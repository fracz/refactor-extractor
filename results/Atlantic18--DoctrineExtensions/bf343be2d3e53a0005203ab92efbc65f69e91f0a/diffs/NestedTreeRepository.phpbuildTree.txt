||||||||    private function buildTree(array $nodes, $html = false, array $options = null)
    {
        //process the nested tree into a nested array
        $nestedTree = $this->processTree($nodes);

        // If you don't want any html output it will return the nested array
        if(!$html){
            return $nestedTree;
        }

        //Defines html decorators and opcional options
        (!empty($options['root'])) ?  $root_open  = " ". $options['root']  ." " : $root_open  = "";
        (!empty($options['child'])) ?  $child_open = " ". $options['child'] ." " : $child_open = "";

        $html_decorator = array(
            'root'  => array('open' => '<ul'. $root_open  .'>', 'close' => '</ul>'),
            'child' => array('open' => '<li'. $child_open .'>', 'close' => '</li>'),
            );

        $html_output = $html_decorator['root']['open'];

        $html_output = $this->processHtmlTree($nestedTree, $html_decorator, $html_output);
        return $html_output;
    }

    /**
     * Creates the nested array
     *
     * @static
     * @param array $nodes
     * @return array
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_CONDITIONAL
        (AST_UNARY_OP
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))))
        (AST_ASSIGN
            (AST_VAR)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR)))
        (AST_ASSIGN
            (AST_VAR)
            (SCALAR)))
    (AST_CONDITIONAL
        (AST_UNARY_OP
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))))
        (AST_ASSIGN
            (AST_VAR)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR)))
        (AST_ASSIGN
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))