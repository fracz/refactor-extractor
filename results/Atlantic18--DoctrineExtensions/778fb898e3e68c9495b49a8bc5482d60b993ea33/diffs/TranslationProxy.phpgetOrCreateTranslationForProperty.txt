||||||||    private function getOrCreateTranslationForProperty($property, $locale)
    {
        if (!($translation = $this->getTranslationForProperty($property, $locale))) {
            $translation = new $this->class;
            $translation->setTranslatable($this->translatable);
            $translation->setProperty($property);
            $translation->setLocale($locale);
            $this->coll->add($translation);
        }

        return $translation;
    }

    /**
     * Finds translation for specified property
     *
     * @param   string  $property   object property name
     * @param   string  $locale     locale name
     *
     * @return  Translation
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))