    public function getInputBOM(): string
    {
        if (null === $this->input_bom) {
            $bom = [
                AbstractCsv::BOM_UTF32_BE, AbstractCsv::BOM_UTF32_LE,
                AbstractCsv::BOM_UTF16_BE, AbstractCsv::BOM_UTF16_LE, AbstractCsv::BOM_UTF8,
            ];
            $csv = $this->getCsvDocument();
            $csv->setFlags(SplFileObject::READ_CSV);
            $csv->rewind();
            $line = $csv->fgets();
            $res  = array_filter($bom, function ($sequence) use ($line) {
                return strpos($line, $sequence) === 0;
            });

            $this->input_bom = (string) array_shift($res);
        }

        return $this->input_bom;
    }

    /**
     * Sets the field delimiter
     *
     * @param string $delimiter
     *
     * @throws InvalidArgumentException If $delimiter is not a single character
     *
     * @return $this
     */
||||||||||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_CLASS_CONST
                                (SCALAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CLASS_CONST
                                (SCALAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CLASS_CONST
                                (SCALAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CLASS_CONST
                                (SCALAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CLASS_CONST
                                (SCALAR))
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                (AST_CLOSURE_USES
                                    (AST_CLOSURE_VAR))
                                (
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)))
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CAST
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||