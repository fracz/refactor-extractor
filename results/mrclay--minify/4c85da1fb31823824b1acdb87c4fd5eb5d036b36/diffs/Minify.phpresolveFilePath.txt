|||||||| protected function resolveFilePath($file) {
   // Is this a URL?
   if (preg_match('/^https?:\/\//i', $file)) {
     if (!$parsedUrl = parse_url($file)) {
       throw new MinifyInvalidUrlException("Invalid URL: $file");
     }

     // Does the server name match the local server name?
     if (!isset($parsedUrl['host']) ||
         $parsedUrl['host'] != $_SERVER['SERVER_NAME']) {
       throw new MinifyInvalidUrlException('Non-local URL not supported: '.
           $file);
     }

     // Get the file's absolute path.
     $filepath = realpath(MINIFY_BASE_DIR.$parsedUrl['path']);
   }
   else {
     // Get the file's absolute path.
     $filepath = realpath(MINIFY_BASE_DIR.'/'.$file);
   }

   // Ensure that the file exists, that the path is under the base directory,
   // that the file's extension is either '.css' or '.js', and that the file is
   // actually readable.
   if (!$filepath ||
       !is_file($filepath) ||
       !is_readable($filepath) ||
       !preg_match('/^'.preg_quote(MINIFY_BASE_DIR, '/').'/', $filepath) ||
       !preg_match('/\.(?:css|js)$/iD', $filepath)) {

     // Even when the file exists, we still throw a
     // MinifyFileNotFoundException in order to try to prevent an information
     // disclosure vulnerability.
     throw new MinifyFileNotFoundException("File not found: $file");
   }

   return $filepath;
 }
}

// -- Exception Classes --------------------------------------------------------
class MinifyException extends Exception {}
class MinifyFileNotFoundException extends MinifyException {}
class MinifyInvalidArgumentException extends MinifyException {}
class MinifyInvalidUrlException extends MinifyException {}

// -- Global Scope -------------------------------------------------------------
if (realpath(__FILE__) == realpath($_SERVER['SCRIPT_FILENAME'])) {
 Minify::handleRequest();
}
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (SCALAR))
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_CONST)
                                                (SCALAR))))
                                    (SCALAR))
                                (AST_VAR)))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))