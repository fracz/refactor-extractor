|||||||| public static function handleRequest() {
   // 404 if no files were requested.
   if (!isset($_GET['files'])) {
     header('HTTP/1.0 404 Not Found');
     exit;
   }

   $files = array_map('trim', explode(',', $_GET['files'], MINIFY_MAX_FILES));

   // 404 if the $files array is empty for some weird reason.
   if (!count($files)) {
     header('HTTP/1.0 404 Not Found');
     exit;
   }

   // Determine the content type based on the extension of the first file
   // requested.
   if (preg_match('/\.js$/iD', $files[0])) {
     $type = self::TYPE_JS;
   } else if (preg_match('/\.css$/iD', $files[0])) {
     $type = self::TYPE_CSS;
   } else {
     $type = self::TYPE_HTML;
   }

   // Minify and spit out the result.
   try {
     $minify = new Minify($type, $files);

     header("Content-Type: $type;charset=".MINIFY_ENCODING);

     $minify->browserCache();
     echo $minify->combine();
     exit;
   }
   catch (MinifyException $e) {
     header('HTTP/1.0 404 Not Found');
     echo htmlentities($e->getMessage());
     exit;
   }
 }

 /**
  * Minifies the specified string and returns it.
  *
  * @param string $string JavaScript, CSS, or HTML string to minify
  * @param string $type content type of the string (Minify::TYPE_CSS,
  *   Minify::TYPE_HTML, or Minify::TYPE_JS)
  * @return string minified string
  */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_EXIT
                (NULL)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL
                        (
                            (SCALAR)))
                    (AST_ECHO
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_EXIT
                        (NULL)))))
        (NULL)))