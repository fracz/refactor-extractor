    private function _getJSFunction($aName) {
        if (defined('self::JSFUNCTION'.$aName))
            return constant('self::JSFUNCTION'.$aName);
        else
            return '';
    }

    // JavaScript Functions used.
    // Note : In Dean's version, these functions are converted
    // with 'String(aFunctionName);'.
    // This internal conversion complete the original code, ex :
    // 'while (aBool) anAction();' is converted to
    // 'while (aBool) { anAction(); }'.
    // The JavaScript functions below are corrected.

    // unpacking function - this is the boot strap function
    //  data extracted from this packing routine is passed to
    //  this function when decoded in the target
    // NOTE ! : without the ';' final.
    const JSFUNCTION_unpack =

'function($packed, $ascii, $count, $keywords, $encode, $decode) {
    while ($count--) {
        if ($keywords[$count]) {
            $packed = $packed.replace(new RegExp(\'\\\\b\' + $encode($count) + \'\\\\b\', \'g\'), $keywords[$count]);
        }
    }
    return $packed;
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (SCALAR))))))||||||||