    private function _encodeSpecialChars($script) {
        $parser = new ParseMaster();
        // replace: $name -> n, $$name -> na
        $parser->add('/((\\x24+)([a-zA-Z$_]+))(\\d*)/',
                     array('fn' => '_replace_name')
        );
        // replace: _name -> _0, double-underscore (__name) is ignored
        $regexp = '/\\b_[A-Za-z\\d]\\w*/';
        // build the word list
        $keywords = $this->_analyze($script, $regexp, '_encodePrivate');
        // quick ref
        $encoded = $keywords['encoded'];

        $parser->add($regexp,
            array(
                'fn' => '_replace_encoded',
                'data' => $encoded
            )
        );
        return $parser->exec($script);
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||