    private function _encodeKeywords($script) {
        // escape high-ascii values already in the script (i.e. in strings)
        if ($this->_encoding > 62)
            $script = $this->_escape95($script);
        // create the parser
        $parser = new ParseMaster();
        $encode = $this->_getEncoder($this->_encoding);
        // for high-ascii, don't encode single character low-ascii
        $regexp = ($this->_encoding > 62) ? '/\\w\\w+/' : '/\\w+/';
        // build the word list
        $keywords = $this->_analyze($script, $regexp, $encode);
        $encoded = $keywords['encoded'];

        // encode
        $parser->add($regexp,
            array(
                'fn' => '_replace_encoded',
                'data' => $encoded
            )
        );
        if (empty($script)) return $script;
        else {
            //$res = $parser->exec($script);
            //$res = $this->_bootStrap($res, $keywords);
            //return $res;
            return $this->_bootStrap($parser->exec($script), $keywords);
        }
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR))))))))||||||||