    public function generateUrl($name, array $parameters = array())
    {

        if (!$this->isChild()) {
            if (strpos($name, '.')) {
                $name = $this->getCode().'|'.$name;
            } else {
                $name = $this->getCode().'.'.$name;
            }
        }
        // if the admin is a child we automatically append the parent's id
        else if ($this->isChild()) {
            $name = $this->baseCodeRoute.'.'.$name;

            // twig template does not accept variable hash key ... so cannot use admin.idparameter ...
            // switch value
            if (isset($parameters['id'])) {
                $parameters[$this->getIdParameter()] = $parameters['id'];
                unset($parameters['id']);
            }

            $parameters[$this->getParent()->getIdParameter()] = $this->request->get($this->getParent()->getIdParameter());
        }

        // if the admin is linked to a parent FieldDescription (ie, embedded widget)
        if ($this->hasParentFieldDescription()) {
            // merge link parameter if any provided by the parent field
            $parameters = array_merge($parameters, $this->getParentFieldDescription()->getOption('link_parameters', array()));

            $parameters['uniqid']  = $this->getUniqid();
            $parameters['code']    = $this->getCode();
            $parameters['pcode']   = $this->getParentFieldDescription()->getAdmin()->getCode();
            $parameters['puniqid'] = $this->getParentFieldDescription()->getAdmin()->getUniqid();
        }

        if ($name == 'update' || substr($name, -7) == '|update') {
            $parameters['uniqid'] = $this->getUniqid();
            $parameters['code']   = $this->getCode();
        }

        // allows to define persistent parameters
        $parameters = array_merge($this->getPersistentParameters(), $parameters);

        $route = $this->getRoute($name);

        if (!$route) {
            throw new \RuntimeException(sprintf('unable to find the route `%s`', $name));
        }

        return $this->router->generate($route->getDefault('_sonata_name'), $parameters);
    }

    /**
     * return the list template
     *
     * @return string the list template
     */
||||||||    public function generateUrl($name, array $parameters = array())
    {

        if (!$this->isChild()) {
            if (strpos($name, '.')) {
                $name = $this->getCode().'|'.$name;
            } else {
                $name = $this->getCode().'.'.$name;
            }
        }
        // if the admin is a child we automatically append the parent's id
        else if ($this->isChild()) {
            $name = $this->baseCodeRoute.'.'.$name;

            // twig template does not accept variable hash key ... so cannot use admin.idparameter ...
            // switch value
            if (isset($parameters['id'])) {
                $parameters[$this->getIdParameter()] = $parameters['id'];
                unset($parameters['id']);
            }

            $parameters[$this->getParent()->getIdParameter()] = $this->request->get($this->getParent()->getIdParameter());
        }

        // if the admin is linked to a parent FieldDescription (ie, embedded widget)
        if ($this->hasParentFieldDescription()) {
            // merge link parameter if any provided by the parent field
            $parameters = array_merge($parameters, $this->getParentFieldDescription()->getOption('link_parameters', array()));

            $parameters['uniqid']  = $this->getUniqid();
            $parameters['code']    = $this->getCode();
            $parameters['pcode']   = $this->getParentFieldDescription()->getAdmin()->getCode();
            $parameters['puniqid'] = $this->getParentFieldDescription()->getAdmin()->getUniqid();
        }

        if ($name == 'update' || substr($name, -7) == '|update') {
            $parameters['uniqid'] = $this->getUniqid();
            $parameters['code']   = $this->getCode();
        }

        // allows to define persistent parameters
        if ($this->hasRequest()) {
            $parameters = array_merge($this->getPersistentParameters(), $parameters);
        }

        $route = $this->getRoute($name);

        if (!$route) {
            throw new \RuntimeException(sprintf('unable to find the route `%s`', $name));
        }

        return $this->router->generate($route->getDefault('_sonata_name'), $parameters);
    }

    /**
     * return the list template
     *
     * @return string the list template
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_ISSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_UNSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (SCALAR)
                                    (AST_ARRAY))))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_ISSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_UNSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (SCALAR)
                                    (AST_ARRAY))))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_VAR)))))