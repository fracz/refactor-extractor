    protected function getOneToManyField(FormBuilder $formBuilder, FieldDescriptionInterface $fieldDescription)
    {
        if (!$fieldDescription->hasAssociationAdmin()) {
            return;
        }

        if ($fieldDescription->getOption('edit') == 'inline') {

            // create a collection type with the generated prototype
            $options = $fieldDescription->getOption('form_field_options', array());
            $options['type'] = 'sonata_type_admin';
            $options['modifiable'] = true;
            $options['type_options'] = array(
                'field_description' => $fieldDescription,
            );

            $formBuilder->add($fieldDescription->getFieldName(), 'sonata_type_collection', $options);

            return;
//            $value = $fieldDescription->getValue($formBuilder->getData());
//
//            // add new instances if the min number is not matched
//            if ($fieldDescription->getOption('min', 0) > count($value)) {
//
//                $diff = $fieldDescription->getOption('min', 0) - count($value);
//                foreach (range(1, $diff) as $i) {
//                    $this->addNewInstance($formBuilder->getData(), $fieldDescription);
//                }
//            }

            // use custom one to expose the newfield method
//            return new \Sonata\AdminBundle\Form\EditableCollectionField($prototype);
        }

        return $this->defineManyToManyField($formBuilder, $fieldDescription);
    }

    /**
     * @param \Symfony\Component\Form\FormBuilder $formBuilder
     * @param \Sonata\AdminBundle\Admin\FieldDescriptionInterface $fieldDescription
     * @return \Symfony\Component\Form\Type\FormTypeInterface
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_ARRAY))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))||||||||