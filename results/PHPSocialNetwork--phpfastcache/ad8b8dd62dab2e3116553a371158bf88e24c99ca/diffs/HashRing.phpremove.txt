    public function remove($node)
    {
        // A node is removed by resetting the ring so that it's recreated from
        // scratch, in order to reassign possible hashes with collisions to the
        // right node according to the order in which they were added in the
        // first place.
        for ($i = 0; $i < count($this->nodes); ++$i) {
            if ($this->nodes[$i]['object'] === $node) {
                array_splice($this->nodes, $i, 1);
                $this->reset();

                break;
            }
        }
    }

    /**
     * Resets the distributor.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (SCALAR)))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BREAK
                            (NULL))))))))||||||||