  public function send(Swift_Mime_Message $message)
  {
    $sent = 0;

    if (!$reversePath = $this->_getReversePath($message))
    {
      throw new Swift_Transport_TransportException(
        'Cannot send message without a sender address'
        );
    }

    if ($evt = $this->_eventDispatcher->createEvent('send', $this, array(
      'message' => $message,
      'transport' => $this,
      'failedRecipients' => array(),
      'result' => Swift_Events_SendEvent::RESULT_PENDING
      )))
    {
      $this->_eventDispatcher->dispatchEvent($evt, 'beforeSendPerformed');
      if ($evt->bubbleCancelled())
      {
        return 0;
      }
    }


    $to = $message->getTo();
    $cc = $message->getCc();
    $bcc = $message->getBcc();
    //Remove Bcc headers initially
    if (!empty($bcc))
    {
      $message->setBcc(array());
    }

    //Send to all direct recipients
    if (!empty($to) || !empty($cc))
    {
      try
      {
        $sent += $this->_doMailTransaction(
          $message, $reversePath, array_merge(
            array_keys((array)$to), array_keys((array)$cc)
            )
          );
      }
      catch (Exception $e)
      {
        if (!empty($bcc)) //don't leave $message in a state it wasn't given in
        {
          $message->setBcc($bcc);
        }
        throw $e;
      }
    }

    //Send blind copies
    if (!empty($bcc))
    {
      foreach ((array) $bcc as $forwardPath => $name)
      {
        //Update the message for this recipient
        $message->setBcc(array($forwardPath => $name));
        try
        {
          $sent += $this->_doMailTransaction(
            $message, $reversePath, array($forwardPath)
            );
        }
        catch (Exception $e)
        {
           //don't leave $message in a state it wasn't given in
          $message->setBcc($bcc);
          throw $e;
        }
      }
    }

    //Restore Bcc headers
    if (!empty($bcc))
    {
      $message->setBcc($bcc);
    }

    if ($evt)
    {
      $evt->result = Swift_Events_SendEvent::RESULT_SUCCESS;
      $this->_eventDispatcher->dispatchEvent($evt, 'sendPerformed');
    }

    return $sent;
  }

  /**
   * Set the name of the local domain which Swift will identify itself as.
   * This should be a fully-qualified domain name and should be truly the domain
   * you're using.  If your server doesn't have a domain name, use the IP in square
   * brackets (i.e. [127.0.0.1]).
   * @param string $domain
   */
||||||||  public function send(Swift_Mime_Message $message, &$failedRecipients = null)
  {
    $sent = 0;
    $failedRecipients = (array) $failedRecipients;

    if (!$reversePath = $this->_getReversePath($message))
    {
      throw new Swift_Transport_TransportException(
        'Cannot send message without a sender address'
        );
    }

    if ($evt = $this->_eventDispatcher->createEvent('send', $this, array(
      'message' => $message,
      'transport' => $this,
      'failedRecipients' => array(),
      'result' => Swift_Events_SendEvent::RESULT_PENDING
      )))
    {
      $this->_eventDispatcher->dispatchEvent($evt, 'beforeSendPerformed');
      if ($evt->bubbleCancelled())
      {
        return 0;
      }
    }


    $to = $message->getTo();
    $cc = $message->getCc();
    $bcc = $message->getBcc();
    //Remove Bcc headers initially
    if (!empty($bcc))
    {
      $message->setBcc(array());
    }

    //Send to all direct recipients
    if (!empty($to) || !empty($cc))
    {
      try
      {
        $sent += $this->_doMailTransaction(
          $message, $reversePath, array_merge(
            array_keys((array)$to), array_keys((array)$cc)
            ), $failedRecipients
          );
      }
      catch (Exception $e)
      {
        if (!empty($bcc)) //don't leave $message in a state it wasn't given in
        {
          $message->setBcc($bcc);
        }
        throw $e;
      }
    }

    //Send blind copies
    if (!empty($bcc))
    {
      foreach ((array) $bcc as $forwardPath => $name)
      {
        //Update the message for this recipient
        $message->setBcc(array($forwardPath => $name));
        try
        {
          $sent += $this->_doMailTransaction(
            $message, $reversePath, array($forwardPath), $failedRecipients
            );
        }
        catch (Exception $e)
        {
           //don't leave $message in a state it wasn't given in
          $message->setBcc($bcc);
          throw $e;
        }
      }
    }

    //Restore Bcc headers
    if (!empty($bcc))
    {
      $message->setBcc($bcc);
    }

    if ($evt)
    {
      $evt->result = Swift_Events_SendEvent::RESULT_SUCCESS;
      $this->_eventDispatcher->dispatchEvent($evt, 'sendPerformed');
    }

    return $sent;
  }

  /**
   * Set the name of the local domain which Swift will identify itself as.
   * This should be a fully-qualified domain name and should be truly the domain
   * you're using.  If your server doesn't have a domain name, use the IP in square
   * brackets (i.e. [127.0.0.1]).
   * @param string $domain
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR))))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ARRAY))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR))))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_CAST
                                                        (AST_VAR))))
                                            (AST_CALL
                                                (
                                                    (AST_CAST
                                                        (AST_VAR))))))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_EMPTY
                                                (AST_VAR)))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR))))))
                                (AST_THROW
                                    (AST_VAR)))))
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_CAST
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_TRY
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (AST_VAR)
                                                    (NULL)))))))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)))
                                        (AST_THROW
                                            (AST_VAR)))))
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR))))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ARRAY))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR))))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_CAST
                                                        (AST_VAR))))
                                            (AST_CALL
                                                (
                                                    (AST_CAST
                                                        (AST_VAR))))))
                                    (AST_VAR)))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_EMPTY
                                                (AST_VAR)))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR))))))
                                (AST_THROW
                                    (AST_VAR)))))
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_CAST
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_TRY
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (AST_VAR)
                                                    (NULL)))
                                            (AST_VAR)))))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)))
                                        (AST_THROW
                                            (AST_VAR)))))
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))