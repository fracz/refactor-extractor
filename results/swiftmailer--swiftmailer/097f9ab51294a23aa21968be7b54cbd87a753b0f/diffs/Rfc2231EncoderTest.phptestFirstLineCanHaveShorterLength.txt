  public function testFirstLineCanHaveShorterLength()
  {
    $context = new Mockery();
    $charStream = $context->mock('Swift_CharacterStream');
    $seq = $context->sequence('byte-sequence');

    $string = '';
    for ($x = 0; $x < 200; ++$x)
    {
      $char = 'a';
      $string .= $char;
      $context->checking(Expectations::create()
        -> one($charStream)->read(optional()) -> inSequence($seq) -> returns($char)
        );
    }
    $context->checking(Expectations::create()
      -> atLeast(1)->of($charStream)->read(optional()) -> inSequence($seq) -> returns(false)
      -> one($charStream)->importString($string)
      -> ignoring($charStream)->flushContents()
      );
    $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
    $encoded = $encoder->encodeString($string, 25, 75);

    $this->assertEqual(
      str_repeat('a', 50) . "\r\n" .
      str_repeat('a', 75) . "\r\n" .
      str_repeat('a', 75),
      $encoded,
      '%s: First line should be 25 bytes shorter than the others.'
      );

    $context->assertIsSatisfied();
  }

}||||||||  public function testFirstLineCanHaveShorterLength()
  {
    $charStream = $this->_mock('Swift_CharacterStream');
    $seq = $this->_sequence('byte-sequence');

    $string = '';
    for ($x = 0; $x < 200; ++$x)
    {
      $char = 'a';
      $string .= $char;
      $this->_checking(Expectations::create()
        -> one($charStream)->read(optional()) -> inSequence($seq) -> returns($char)
        );
    }
    $this->_checking(Expectations::create()
      -> atLeast(1)->of($charStream)->read(optional()) -> inSequence($seq) -> returns(false)
      -> one($charStream)->importString($string)
      -> ignoring($charStream)->flushContents()
      );
    $encoder = new Swift_Encoder_Rfc2231Encoder($charStream);
    $encoded = $encoder->encodeString($string, 25, 75);

    $this->assertEqual(
      str_repeat('a', 50) . "\r\n" .
      str_repeat('a', 75) . "\r\n" .
      str_repeat('a', 75),
      $encoded,
      '%s: First line should be 25 bytes shorter than the others.'
      );


  }

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL)
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_CALL)))
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_STATIC_CALL)
                                                (
                                                    (SCALAR)))
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_CALL)))
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_CONST)))
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR))))
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL)
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_CALL)))
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_STATIC_CALL)
                                                (
                                                    (SCALAR)))
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_CALL)))
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_CONST)))
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR))))
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (AST_VAR)
            (SCALAR))))