  public function testMessageCanBeInjected()
  {
    $context = new Mockery();
    $message = $context->mock('Swift_Mime_Message');

    $evt = new Swift_Events_SendEvent();
    $evt->message = $message;

    $ref = $evt->getMessage();
    $this->assertReference($message, $ref,
      '%s: Message should be injectable'
      );
  }

||||||||  public function testMessageCanBeInjected()
  {
    $message = $this->_mock('Swift_Mime_Message');

    $evt = new Swift_Events_SendEvent();
    $evt->message = $message;

    $ref = $evt->getMessage();
    $this->assertReference($message, $ref,
      '%s: Message should be injectable'
      );
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (SCALAR))))