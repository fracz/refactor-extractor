	function countries() {
		return $this->constants('CC_');
	}

}

//! Container for singular object instances
final class Registry {

	private static
		//! Object catalog
		$table;

	/**
		Return TRUE if object exists in catalog
		@return bool
		@param $key string
	**/
	static function exists($key) {
		return isset(self::$table[$key]);
	}

	/**
		Add object to catalog
		@return object
		@param $key string
		@param $obj object
	**/
	static function set($key,$obj) {
		return self::$table[$key]=$obj;
	}

	/**
		Retrieve object from catalog
		@return object
		@param $key string
	**/
	static function get($key) {
		return self::$table[$key];
	}

	/**
		Remove object from catalog
		@return NULL
		@param $key string
	**/
	static function clear($key) {
		unset(self::$table[$key]);
	}

	//! Prohibit cloning
	private function __clone() {
	}

	//! Prohibit instantiation
	private function __construct() {
	}

}

if (!function_exists('getallheaders')) {

	/**
		Fetch HTTP request headers
		@return array
	**/
	function getallheaders() {
		if (PHP_SAPI=='cli')
			return FALSE;
		$headers=array();
		foreach ($_SERVER as $key=>$val)
			if (substr($key,0,5)=='HTTP_')
				$headers[strtr(ucwords(strtolower(
					strtr(substr($key,5),'_',' '))),' ','-')]=$val;
		return $headers;
	}

}

return Base::instance();||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))))||||||||