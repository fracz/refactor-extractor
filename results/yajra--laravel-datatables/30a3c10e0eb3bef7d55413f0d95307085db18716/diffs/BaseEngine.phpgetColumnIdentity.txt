    public function getColumnIdentity(array $columns, $i)
    {
        if ( ! empty($columns[$i]['name'])) {
            $column = $columns[$i]['name'];
        } else {
            $column = $this->columns[$i];
        }

        return $column;
    }

    /**
     * Get column name from string.
     *
     * @param string $str
     * @return string
     */
||||||||    public function getColumnIdentity($i)
    {
        return $this->request->columnName($i) ?: $this->columns[$i];
    }

    /**
     * Get column name from string.
     *
     * @param string $str
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (NULL)
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)))))