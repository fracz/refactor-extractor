||||||||	public function test__set()
	{
		$superglobal = new atoum\superglobal();

		$this->assert
			->exception(function() use ($superglobal, & $name) {
						$superglobal->{$name = uniqid()} = uniqid();
					}
				)
				->isInstanceOf('\runtimeException')
				->hasMessage('PHP superglobal \'$' . $name . '\' does not exist')
		;

		$superglobal->GLOBALS = ($variable = uniqid());

		$this->assert
			->string($superglobal->GLOBALS)->isEqualTo($variable)
		;

		$superglobal->_SERVER = ($variable = uniqid());

		$this->assert
			->string($superglobal->_SERVER)->isEqualTo($variable)
		;

		$superglobal->_GET = ($variable = uniqid());

		$this->assert
			->string($superglobal->_GET)->isEqualTo($variable)
		;

		$superglobal->_POST = ($variable = uniqid());

		$this->assert
			->string($superglobal->_POST)->isEqualTo($variable)
		;

		$superglobal->_FILES = ($variable = uniqid());

		$this->assert
			->string($superglobal->_FILES)->isEqualTo($variable)
		;

		$superglobal->_COOKIE = ($variable = uniqid());

		$this->assert
			->string($superglobal->_COOKIE)->isEqualTo($variable)
		;

		$superglobal->_SESSION = ($variable = uniqid());

		$this->assert
			->string($superglobal->_SESSION)->isEqualTo($variable)
		;

		$superglobal->_REQUEST = ($variable = uniqid());

		$this->assert
			->string($superglobal->_REQUEST)->isEqualTo($variable)
		;

		$superglobal->_ENV = ($variable = uniqid());

		$this->assert
			->string($superglobal->_ENV)->isEqualTo($variable)
		;
	}
}

?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR)
                            (AST_CLOSURE_VAR))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CALL))))))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_VAR))))