||||||||	public function test__set()
	{
		$template = new atoum\template();

		$template
			->addChild($tag  = new atoum\template\tag(uniqid()))
			->{$tag->getTag()} = $data = uniqid()
		;

		$this->assert
			->string($tag->getData())->isEqualTo($data)
		;

		$tag->addChild($childTag  = new atoum\template\tag($tag->getTag()));

		$template->{$tag->getTag()} = $data;

		$this->assert
			->string($tag->getData())->isEqualTo($data)
			->string($childTag->getData())->isEqualTo($data)
		;

		$tag->addChild($otherChildTag = new atoum\template\tag(uniqid()));

		$template->{$otherChildTag->getTag()} = $otherData = uniqid();

		$this->assert
			->string($tag->getData())->isEqualTo($data)
			->string($childTag->getData())->isEqualTo($data)
			->string($otherChildTag->getData())->isEqualTo($otherData)
		;


		$this->assert
			->exception(function() use ($template, & $undefineTag) {
					$template->{$undefineTag = uniqid()} = uniqid();
				}
			)
				->isInstanceOf('\mageekguy\atoum\exceptions\runtime')
				->hasMessage('Tag \'' . $undefineTag . '\' does not exist')
		;
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW
                            (
                                (AST_CALL)))))))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_CALL))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR)
                            (AST_CLOSURE_VAR))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CALL))))))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR)))))