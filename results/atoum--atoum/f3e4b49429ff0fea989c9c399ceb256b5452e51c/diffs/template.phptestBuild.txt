||||||||	public function testBuild()
	{
		/*
		$template = new atoum\template();

		$this->assert->string($template->build())->isEmpty();

		$data = uniqid();
		$template = new atoum\template($data);

		$this->assert->string($template->build())->isEqualTo($data);

		$template = new atoum\template();
		$template->addChild(new atoum\template\data($data));

		$this->assert->string($template->build())->isEqualTo($data);
		$this->assert->string($template->build())->isEqualTo($data . $data);
		$this->assert->string($template->build())->isEqualTo($data . $data . $data);

		$template = new atoum\template($data);
		$template->addChild(new atoum\template\data($data));

		$this->assert->string($template->build())->isEqualTo($data . $data);
		$this->assert->string($template->build())->isEqualTo($data . $data . $data);
		$this->assert->string($template->build())->isEqualTo($data . $data . $data . $data);

		$template = new atoum\template();
		$tag = new atoum\template\tag(uniqid());
		$template->addChild($tag);
		$data = new atoum\template\data(uniqid());
		$tag->addChild($data);

		$this->assert->string($template->build())->isEmpty();
		$tag->build();
		$this->assert->string($template->build())->isEqualTo($data->getData());
		*/
	}

	/*
	public function testGetChild()
	{
		$template = new atoum\template();
		$this->assert->variable($template->getChild(0))->isNull();
		$this->assert->variable($template->getChild(rand(1, PHP_INT_MAX)))->isNull();

		$childData = new atoum\template\data();
		$template->addChild($childData);
		$this->assert->object($template->getChild(0))->isIdenticalTo($childData);
		$this->assert->variable($template->getChild(rand(1, PHP_INT_MAX)))->isNull();

		$childTag = new atoum\template\tag(uniqid());
		$template->addChild($childTag);
		$this->assert->object($template->getChild(0))->isIdenticalTo($childData);
		$this->assert->object($template->getChild(1))->isIdenticalTo($childTag);
		$this->assert->variable($template->getChild(rand(2, PHP_INT_MAX)))->isNull();
	}

	public function testCheckChild()
	{
		$template = new atoum\template();
		$childTag = new atoum\template\tag(uniqid());

		$this->assert->boolean($template->checkChild($childTag))->isTrue();

		$childTag->setId(uniqid());
		$this->assert->boolean($template->checkChild($childTag))->isTrue();
		$this->assert->boolean($childTag->checkChild($template))->isTrue();

		$littleChildTag = new atoum\template\tag(uniqid());
		$template->addChild($childTag);

		$this->assert->boolean($template->checkChild($littleChildTag))->isTrue();
		$this->assert->boolean($littleChildTag->checkChild($template))->isTrue();
		$this->assert->boolean($childTag->checkChild($littleChildTag))->isTrue();
		$this->assert->boolean($littleChildTag->checkChild($childTag))->isTrue();

		$littleChildTag->setId(uniqid());
		$this->assert->boolean($template->checkChild($littleChildTag))->isTrue();
		$this->assert->boolean($littleChildTag->checkChild($template))->isTrue();
		$this->assert->boolean($childTag->checkChild($littleChildTag))->isTrue();
		$this->assert->boolean($littleChildTag->checkChild($childTag))->isTrue();

		$template->deleteChild($childTag);
		$childTag->unsetId()->addChild($littleChildTag->unsetId());

		$this->assert->boolean($template->checkChild($childTag))->isTrue();
		$this->assert->boolean($childTag->checkChild($template))->isTrue();
		$this->assert->boolean($template->checkChild($childTag))->isTrue();
		$this->assert->boolean($childTag->checkChild($template))->isTrue();
		$this->assert->boolean($littleChildTag->checkChild($template))->isTrue();
		$this->assert->boolean($template->checkChild($littleChildTag))->isTrue();
	}

	public function testGetIterator()
	{
		$template = new atoum\template\tag(uniqid());
		$this->assert
			->iterator($template->getIterator())
				->isInstanceOf('ogoHtmlTemplateIterator')
				->and
				->isEmpty()
		;

		$childTag = new atoum\template\tag(uniqid());
		$template->addChild($childTag);

		$this->assert->iterator($template->getIterator())->hasSize(1);
		$this->assert->object($template->getIterator()->current())->isIdenticalTo($childTag);

		$otherChildTag = new atoum\template\tag(uniqid());
		$template->addChild($otherChildTag);
		$iterator = $template->getIterator();

		$this->assert
			->iterator($iterator)
				->hasSize(2)
				->and
				->integer($iterator->key())->isEqualTo(0)
				->and
				->object($iterator->current())->isIdenticalTo($childTag)
		;

		$iterator->next();

		$this->assert
			->integer($iterator->key())->isEqualTo(1)
			->and
			->object($iterator->current())->isIdenticalTo($otherChildTag)
		;
	}
	*/
}

?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE