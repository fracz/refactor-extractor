	public static function init()
	{
		self::$_enableColors =
			Kint::$cliColors
			&& ( DIRECTORY_SEPARATOR === '/' || getenv( 'ANSICON' ) !== false || getenv( 'ConEmuANSI' ) === 'ON' );
	}
}||||||||	public static function init()
	{
		self::$_enableColors =
			Kint::$cliColors
			&& ( DIRECTORY_SEPARATOR === '/' || getenv( 'ANSICON' ) !== false || getenv( 'ConEmuANSI' ) === 'ON' );

		return Kint::enabled() === Kint::MODE_PLAIN
			? '<style>.-kint i{color:#d00;font-style:normal}.-kint u{color:#030;text-decoration:none;font-weight:bold}</style>'
			: '';
	}
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_STATIC_PROP)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONST)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))
                    (SCALAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_STATIC_PROP)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONST)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_STATIC_CALL)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)
            (SCALAR))))