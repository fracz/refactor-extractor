	protected static function _escape( $value, $encoding = null )
	{
		if ( Kint::$mode === 'cli' || Kint::$mode === 'whitespace' || empty( $value ) ) return $value;

		$value = htmlspecialchars( $value, ENT_QUOTES );
		if ( function_exists( 'mb_encode_numericentity' ) ) {
			$encoding or $encoding = self::_detectEncoding( $value );
			$value = mb_encode_numericentity(
				$value,
				array( 0x80, 0xffff, 0, 0xffff, ),
				$encoding
			);
		}

		# when possible force invisible characters to have some sort of display (experimental)
		// todo we could make the symbols hover-title show the code for the invisible symbol
		return preg_replace( '/[\x00-\x08\x0B\x0C\x0E-\x1F\x80-\x9F]/u', 'ï¿½', $value );
	}

||||||||	protected static function _escape( $value, $encoding = null )
	{
		if ( Kint::enabled() === Kint::MODE_CLI
			|| Kint::enabled() === Kint::MODE_WHITESPACE
			|| empty( $value )
		) {
			return $value;
		}

		$value = htmlspecialchars( $value, ENT_QUOTES );
		if ( function_exists( 'mb_encode_numericentity' ) ) {
			$encoding or $encoding = self::_detectEncoding( $value );
			$value = mb_encode_numericentity(
				$value,
				array( 0x80, 0xffff, 0, 0xffff, ),
				$encoding
			);
		}

		# when possible force invisible characters to have some sort of display (experimental)
		// todo we could make the symbols hover-title show the code for the invisible symbol
		return preg_replace( '/[\x00-\x08\x0B\x0C\x0E-\x1F\x80-\x9F]/u', '?', $value );
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_STATIC_CALL)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_BINARY_OP
                        (AST_STATIC_CALL)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR)))))