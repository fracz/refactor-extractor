||||||||	private static function _parse_unknown( &$variable, kintVariableData $variableData )
	{
		$variableData->type    = "UNKNOWN";
		$variableData->subtype = gettype( $variable );
		$variableData->value   = var_export( $variable, true );
	}

}


class kintVariableData
{
	/** @var string */
	public $type;
	/** @var string */
	public $access;
	/** @var string */
	public $name;
	/** @var string */
	public $operator;
	/** @var string */
	public $subtype;
	/** @var int */
	public $size;
	/**
	 * @var kintVariableData[] array of kintVariableData objects or strings; displayed collapsed, each element from
	 * the array is a separate possible representation of the dumped var
	 */
	public $extendedValue;
	/** @var kintVariableData[] array of alternative representations for same variable */
	public $alternatives;
	/** @var string inline value */
	public $value;


	/* *******************************************
	 * HELPERS
	 */

	protected static function _escape( $value )
	{
		return mb_encode_numericentity(
			htmlentities( $value, ENT_QUOTES, 'UTF-8' ),
			array( 0x80, 0xffff, 0, 0xffff ),
			'UTF-8'
		);
	}

	/**
	 * zaps all excess whitespace from string, compacts it but hurts readability
	 *
	 * @param string $string
	 *
	 * @return string
	 */
	protected static function _stripWhitespace( $string )
	{
		$search = array(
			'#[ \t]+[\r\n]#' => "", // leading whitespace after line end
			'#[\n\r]+#'      => "\n", // multiple newlines
			'# {2,}#'        => " ", // multiple spaces
			'#\t{2,}#'       => "\t", // multiple tabs
			'#\t | \t#'      => "\t", // tabs and spaces together
		);
		return preg_replace( array_keys( $search ), $search, trim( $string ) );
	}


	/**
	 * returns whether the array:
	 *  1) is numeric and
	 *  2) in sequence starting from zero
	 *
	 * @param array $array
	 *
	 * @return bool
	 */
	protected static function _isSequential( array $array )
	{
		return Kint::$hideSequentialKeys
			? array_keys( $array ) === range( 0, count( $array ) - 1 )
			: false;
	}

	protected static function _strlen( $string )
	{
		return function_exists( 'mb_strlen' )
			? mb_strlen( $string, 'UTF-8' )
			: strlen( $string );
	}

	protected static function _substr( $string, $start, $end )
	{
		return function_exists( 'mb_substr' )
			? mb_substr( $string, $start, $end, 'UTF-8' )
			: substr( $string, $start, $end );
	}
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)))))