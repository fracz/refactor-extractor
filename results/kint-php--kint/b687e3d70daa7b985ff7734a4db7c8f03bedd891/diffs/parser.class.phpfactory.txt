	public final static function factory( & $variable, $name = null, $level = 0 )
	{
		$methodName = '_parse_' . gettype( $variable );

		/** @var $mainObject kintParser  */
		$mainObject        = new Kint_Parsers_BaseTypes;
		$mainObject->_name = $name;

		$ret = $mainObject->$methodName( $variable, $level );
		if ( $ret === false ) return $mainObject; // base type parser returning false means "stop processing further": e.g. depth too great

		// now check whether the variable can be represented in a different way
		foreach ( self::$_customDataTypes as $parserClass ) {
			$className = 'Kint_Parsers_' . $parserClass;

			/** @var $object kintParser  */
			$object        = new $className;
			$object->_name = $name; // the parser may overwrite the name value, so set it first

			$ret = $object->_parse( $variable );
			if ( $ret === false ) continue;

			if ( isset( $ret ) && $ret instanceof self ) {
				$object = $ret; // one can return a kintParser instance instead of operating on $this
			}


			$mainObject->_alternatives[] = $object;
		}

		if ( !empty( $mainObject->_alternatives ) && isset( $mainObject->_extendedValue ) ) {
			$a         = new Kint_Parsers_BaseTypes;
			$a->_value = $mainObject->_extendedValue;
			$a->_type  = $mainObject->_type;
			$a->_size  = $mainObject->_size;

			array_unshift( $mainObject->_alternatives, $a );
			$mainObject->_extendedValue = null;
		}

		return $mainObject;
	}

	/**
	 * for use in decorators
	 *
	 * @param $name
	 *
	 * @return mixed
	 * @throws Exception
	 */
||||||||	public final static function factory( & $variable, $name = null )
	{
		isset( self::$_customDataTypes ) or self::_init();

		self::$_level++;

		$varData       = new kintVariableData;
		$varData->name = $name;

		# first parse the variable based on its type
		$methodName = '_parse_' . gettype( $variable );

		# base type parser returning false means "stop processing further": e.g. recursion
		if ( self::$methodName( $variable, $varData ) === false ) {
			self::$_level--;
			return $varData;
		}


		# now check whether the variable can be represented in a different way
		foreach ( self::$_customDataTypes as $parserClass ) {
			$className = 'Kint_Parsers_' . $parserClass;

			/** @var $object kintParser */
			$object       = new $className;
			$object->name = $name; # the parser may overwrite the name value, so set it first

			if ( $object->_parse( $variable ) !== false ) {
				$varData->alternatives[] = $object;
			}
		}


		# combine extended values with alternative representations if applicable
		if ( !empty( $varData->alternatives ) && isset( $varData->extendedValue ) ) {
			$a = new kintVariableData;

			$a->value = $varData->extendedValue;
			$a->type  = $varData->type;
			$a->size  = $varData->size;

			array_unshift( $varData->alternatives, $a );
			$varData->extendedValue = null;
		}

		self::$_level--;
		return $varData;
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_VAR))
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR))))
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_BINARY_OP
        (AST_ISSET
            (AST_STATIC_PROP))
        (AST_STATIC_CALL))
    (AST_POST_INC
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_POST_DEC
                    (AST_STATIC_PROP))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR))))
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_POST_DEC
        (AST_STATIC_PROP))
    (AST_RETURN
        (AST_VAR)))