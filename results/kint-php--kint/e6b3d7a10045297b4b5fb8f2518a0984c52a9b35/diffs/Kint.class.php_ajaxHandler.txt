||||||||	public static function _ajaxHandler()
	{
		if ( !Kint::$enabled ) return;

		# if content type is not HTML (e.g. csv export) and/or is downloaded - skip
		foreach ( headers_list() as $header ) {
			if ( substr( strtolower( $header ), 0, 13 ) === "content-type:" ) {
				if ( strpos( $header, 'text/html' ) === false ) {
					return;
				}
			} elseif ( substr( strtolower( $header ), 0, 20 ) === "content-disposition:" ) {
				return;
			}
		}

		$baseDir = KINT_DIR . 'view/compiled/modular-window/';

		if ( !is_readable( $cssFile = $baseDir . Kint::$theme . '.css' ) ) {
			$cssFile = $baseDir . 'original.css';
		}

		echo '<script>' . file_get_contents( $baseDir . 'kint.js' ) . '</script>'
			. '<style>' . file_get_contents( $cssFile ) . "</style>";
	}
}


if ( !function_exists( 'd' ) ) {
	/**
	 * Alias of Kint::dump()
	 *
	 * @return string
	 */
	function d()
	{
		if ( !Kint::enabled() ) return null;

		$args = func_get_args();
		return call_user_func_array( array( 'Kint', 'dump' ), $args );
	}
}

if ( !function_exists( 'dd' ) ) {
	/**
	 * Alias of Kint::dump()
	 * [!!!] IMPORTANT: execution will halt after call to this function
	 *
	 * @return string
	 */
	function dd()
	{
		if ( !Kint::enabled() ) return;

		$args = func_get_args();
		call_user_func_array( array( 'Kint', 'dump' ), $args );
		die;
	}
}

if ( !function_exists( 's' ) ) {

	/**
	 * Alias of kintLite()
	 *
	 * @return string
	 */
	function s()
	{
		if ( !Kint::enabled() ) return;
		$mode       = Kint::$mode;
		Kint::$mode = 'plain';
		$o          = call_user_func_array( 'Kint::dump', func_get_args() );
		Kint::$mode = $mode;
		return $o;
	}

	/**
	 * Alias of kintLite()
	 * [!!!] IMPORTANT: execution will halt after call to this function
	 *
	 * @return string
	 */
	function sd()
	{
		if ( !Kint::enabled() ) return;
		$mode       = Kint::$mode;
		Kint::$mode = 'plain';
		call_user_func_array( 'Kint::dump', func_get_args() );
		Kint::$mode = $mode;
		die;
	}

}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_PROP))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_FOREACH
        (AST_CALL)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)))
                                    (AST_CONST))
                                (
                                    (AST_RETURN
                                        (NULL)))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_RETURN
                            (NULL)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_STATIC_PROP))
                                (SCALAR))))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))))
                        (SCALAR))
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR))))
            (SCALAR))))