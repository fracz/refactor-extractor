    private function moveNote($notebookId, $noteId, $toNotebookId)
    {
        $note = Note::find($noteId);
        if (is_null($note)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'note', 'id'=>$noteId));
            return null;
        }

        $user =
            $note->users()->where('users.id', '=', Auth::user()->id)->first();
        if (is_null($user)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'user'));
            return null;
        }

        $toNotebook = Notebook::find($toNotebookId);
        if (is_null($toNotebook)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'notebook', 'id'=>$toNotebookId));
            return null;
        }

        $toNotebookUser = $toNotebook->users()
                                     ->where('notebook_user.user_id', '=',
                                         Auth::user()->id)
                                     ->first();
        if (is_null($toNotebookUser)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'toNotebookUser'));
            return null;
        }

        $note->notebook()->associate($toNotebook);
        $note->save();

        return $note;
    }

||||||||    private function moveNote($notebookId, $noteId, $toNotebookId)
    {
        $user = User::find(Auth::user()->id);
        if (is_null($user)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'user'));
            return null;
        }
        //the user shall be owner of the note
        $note = $user->notes()
                    ->wherePivot('umask','=',PaperworkHelpers::UMASK_OWNER)
                    ->where('notes.id','=',$noteId)
                    ->whereNull('notes.deleted_at')
                    ->first();
        if (is_null($note)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'note', 'id'=>$noteId));
            return null;
        }

        //the user shall have the right to write into the destination notebook
        $toNotebook = $user->notebooks()
                        ->wherePivot('umask','>',PaperworkHelpers::UMASK_READONLY)
                        ->where('notebooks.id','=',$toNotebookId)
                        ->whereNull('notebooks.deleted_at')
                        ->first();
        if (is_null($toNotebook)) {
            // return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND, array('item'=>'notebook', 'id'=>$toNotebookId));
            return null;
        }

        $note->notebook()->associate($toNotebook);
        $note->save();

        return $note;
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_CALL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_CALL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_STATIC_CALL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))