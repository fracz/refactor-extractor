    public function update($notebookId, $noteId)
    {
        $validator = Validator::make(Input::all(), ["title" => "required"]);
        if (!$validator->passes()) {
            return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_ERROR,
                $validator->getMessageBag()->toArray());
        }

        $updateNote = Input::json();

        $note = Note::find($noteId);
        if (is_null($note)) {
            return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND,
                array('item' => 'note', 'id' => $noteId));
        }

        $user =
            $note->users()->where('users.id', '=', Auth::user()->id)->first();
        if (is_null($user)) {
            return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND,
                array('item' => 'user'));
        }

        $previousVersion     = $note->version()->first();
        $previousAttachments = $previousVersion->attachments()->get();

        if ($previousVersion->title != $updateNote->get("title") ||
            $previousVersion->content != $updateNote->get("content")
        ) {

            $pureContent =
                PaperworkHelpers::purgeHtml($updateNote->get("content"));

            // TODO: This is a temporary workaround for the content_preview. We need to check, whether there is content or at least one attachment.
            // If there's no content, parse the attachment and set the result as content_preview. This should somehow be done within the DocumentParser, I guess.
            $version = new Version(array(
                'title'           => $updateNote->get("title"),
                'content'         => $pureContent,
                'content_preview' => substr(strip_tags($pureContent), 0, 255)
            ));

            $version->save();

            $previousVersion->next()->associate($version);
            $previousVersion->save();

            $version->previous()->associate($previousVersion);

            if (!is_null($previousAttachments) &&
                $previousAttachments->count() > 0
            ) {
                foreach ($previousAttachments as $previousAttachment) {
                    $version->attachments()->attach($previousAttachment);
                }
            }

            $version->save();

            $note->version_id = $version->id;

            $note->save();

        }

        $tagIds = ApiTagsController::createOrGetTags($updateNote->get('tags'));

        if (!is_null($tagIds)) {
            $note->tags()->sync($tagIds);
        }

        return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_SUCCESS,
            $note);
    }

||||||||    public function update($notebookId, $noteId)
    {
        $validator = Validator::make(Input::all(), ["title" => "required"]);
        if (!$validator->passes()) {
            return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_ERROR,
                $validator->getMessageBag()->toArray());
        }

        $updateNote = Input::json();

        $user=User::find(Auth::user()->id);
        if (is_null($user)) {
            return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND,
                array('item' => 'user'));
        }
        //only a read-writer or owner of the note can update it.
        $note = $user->notes()
                    ->wherePivot('umask','>',PaperworkHelpers::UMASK_READONLY)
                    ->where('notes.id','=',$noteId)
                    ->first();
        if (is_null($note)) {
            return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_NOTFOUND,
                array('item' => 'note', 'id' => $noteId));
        }

        $previousVersion     = $note->version()->first();
        $previousAttachments = $previousVersion->attachments()->get();

        if ($previousVersion->title != $updateNote->get("title") ||
            $previousVersion->content != $updateNote->get("content")
        ) {

            $pureContent =
                PaperworkHelpers::purgeHtml($updateNote->get("content"));

            // TODO: This is a temporary workaround for the content_preview. We need to check, whether there is content or at least one attachment.
            // If there's no content, parse the attachment and set the result as content_preview. This should somehow be done within the DocumentParser, I guess.
            $version = new Version(array(
                'title'           => $updateNote->get("title"),
                'content'         => $pureContent,
                'content_preview' => substr(strip_tags($pureContent), 0, 255)
            ));

            $version->save();

            $previousVersion->next()->associate($version);
            $previousVersion->save();

            $version->previous()->associate($previousVersion);

            if (!is_null($previousAttachments) &&
                $previousAttachments->count() > 0
            ) {
                foreach ($previousAttachments as $previousAttachment) {
                    $version->attachments()->attach($previousAttachment);
                }
            }

            $version->save();

            $note->version_id = $version->id;

            $note->save();

        }

        $tagIds = ApiTagsController::createOrGetTags($updateNote->get('tags'));

        if (!is_null($tagIds)) {
            $note->tags()->sync($tagIds);
        }

        return PaperworkHelpers::apiResponse(PaperworkHelpers::STATUS_SUCCESS,
            $note);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_CALL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (SCALAR)
                                            (SCALAR)))
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (AST_VAR))))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_STATIC_CALL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (SCALAR)
                                            (SCALAR)))
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (AST_VAR))))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR)))))