	public function dispatchCommand($command)
	{
		$socket = $this->_getSocket();

		$socket->write($command->getCommandLine().self::CRLF);

		if ($command->hasData())
		{
			$socket->write($command->getData().self::CRLF);
		}

		$responseLine = $socket->getLine();
		$responseName = preg_replace('#^(\S+).*$#s', '$1', $responseLine);

		if (isset($this->_errorResponses[$responseName]))
		{
			$exception = sprintf(
				'Pheanstalk_Exception_Server%sException',
				$this->_errorResponses[$responseName]
			);

			throw new $exception(sprintf(
				"%s in response to '%s'",
				$responseName,
				$command
			));
		}

		if (in_array($responseName, $this->_dataResponses))
		{
			$dataLength = preg_replace('#^.*\b(\d+)$#', '$1', $responseLine);
			$data = $socket->read($dataLength);

			$crlf = $socket->read(self::CRLF_LENGTH);
			if ($crlf !== self::CRLF)
			{
				throw new Pheanstalk_Exception_ClientException(sprintf(
					'Expected %d bytes of CRLF after %d bytes of data',
					self::CRLF_LENGTH,
					$dataLength
				));
			}
		}
		else
		{
			$data = null;
		}

		return $command
			->getResponseParser()
			->parseResponse($responseLine, $data);
	}

	// ----------------------------------------

	/**
	 * Socket handle for the connection to beanstalkd
	 * @return Pheanstalk_Socket
	 * @throws Pheanstalk_Exception_ConnectionException
	 */
||||||||	public function dispatchCommand($command)
	{
		$socket = $this->_getSocket();

		$to_send = $command->getCommandLine().self::CRLF;

		if ($command->hasData())
		{
			$to_send .= $command->getData().self::CRLF;
		}

		$socket->write($to_send);

		$responseLine = $socket->getLine();
		$responseName = preg_replace('#^(\S+).*$#s', '$1', $responseLine);

		if (isset($this->_errorResponses[$responseName]))
		{
			$exception = sprintf(
				'Pheanstalk_Exception_Server%sException',
				$this->_errorResponses[$responseName]
			);

			throw new $exception(sprintf(
				"%s in response to '%s'",
				$responseName,
				$command
			));
		}

		if (in_array($responseName, $this->_dataResponses))
		{
			$dataLength = preg_replace('#^.*\b(\d+)$#', '$1', $responseLine);
			$data = $socket->read($dataLength);

			$crlf = $socket->read(self::CRLF_LENGTH);
			if ($crlf !== self::CRLF)
			{
				throw new Pheanstalk_Exception_ClientException(sprintf(
					'Expected %d bytes of CRLF after %d bytes of data',
					self::CRLF_LENGTH,
					$dataLength
				));
			}
		}
		else
		{
			$data = null;
		}

		return $command
			->getResponseParser()
			->parseResponse($responseLine, $data);
	}

	// ----------------------------------------

	/**
	 * Socket handle for the connection to beanstalkd
	 * @return Pheanstalk_Socket
	 * @throws Pheanstalk_Exception_ConnectionException
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))
                (AST_THROW
                    (AST_NEW
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))
                (AST_THROW
                    (AST_NEW
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR)))))