	public function findByCredentials(array $credentials)
	{
		$model = $this->createModel();

		if ( ! array_key_exists(($attribute = $model->getLoginName()), $credentials))
		{
			throw new \InvalidArgumentException("Login attribute [$attribute] was not provided.");
		}

		$query              = $model->newQuery();
		$hashableAttributes = $model->getHashableAttributes();
		$hashedCredentials  = array();

		// build query from given credentials
		foreach ($credentials as $credential => $value)
		{
			// Remove hashed attributes to check later as we need to check these
			// values after we retrieved them because of salts
			if (in_array($credential, $hashableAttributes))
			{
				$hashedCredentials = array_merge($hashedCredentials, array($credential => $value));
			}
			else
			{
				$query = $query->where($credential, '=', $value);
			}
		}

		if ( ! $user = $query->first())
		{
			throw new UserNotFoundException("A user was not found with the given credentials.");
		}

		// Now check the hashed credentials match ours
		foreach ($hashedCredentials as $credential => $value)
		{
			if ( ! $this->hasher->checkHash($value, $user->{$credential}))
			{
				throw new UserNotFoundException("A user was found to match all plain text credentials however hashed credential [$credential] did not match.");
			}
		}

		$user->setHasher($this->hasher);

		return $user;
	}

	/**
	 * Creates a user.
	 *
	 * @param  array  $credentials
	 * @return Cartalyst\Sentry\Users\UserInterface
	 */
||||||||	public function findByCredentials(array $credentials)
	{
		$model = $this->createModel();

		if ( ! array_key_exists(($attribute = $model->getLoginName()), $credentials))
		{
			throw new \InvalidArgumentException("Login attribute [$attribute] was not provided.");
		}

		$query              = $model->newQuery();
		$hashableAttributes = $model->getHashableAttributes();
		$hashedCredentials  = array();

		// build query from given credentials
		foreach ($credentials as $credential => $value)
		{
			// Remove hashed attributes to check later as we need to check these
			// values after we retrieved them because of salts
			if (in_array($credential, $hashableAttributes))
			{
				$hashedCredentials = array_merge($hashedCredentials, array($credential => $value));
			}
			else
			{
				$query = $query->where($credential, '=', $value);
			}
		}

		if ( ! $user = $query->first())
		{
			throw new UserNotFoundException("A user was not found with the given credentials.");
		}

		// Now check the hashed credentials match ours
		foreach ($hashedCredentials as $credential => $value)
		{
			if ( ! $this->hasher->checkHash($value, $user->{$credential}))
			{
				throw new UserNotFoundException("A user was found to match all plain text credentials however hashed credential [$credential] did not match.");
			}
		}

		return $user;
	}

	/**
	 * Returns an all users.
	 *
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_VAR)))