    function prepArticle($articleContent) {
        $this->cleanStyles($articleContent);
        $this->killBreaks($articleContent);
        if ($this->revertForcedParagraphElements) {
            $this->revertReadabilityStyledElements($articleContent);
        }

        /* Clean out junk from the article content */
        $this->cleanConditionally($articleContent, 'form');
        $this->clean($articleContent, 'object');
        $this->clean($articleContent, 'h1');

        /**
        * If there is only one h2, they are probably using it
        * as a header and not a subheader, so remove it since we already have a header.
        ***/
        if (!$this->lightClean && ($articleContent->getElementsByTagName('h2')->length == 1)) {
            $this->clean($articleContent, 'h2');
        }
        $this->clean($articleContent, 'iframe');

        $this->cleanHeaders($articleContent);

        /* Do these last as the previous stuff may have removed junk that will affect these */
        $this->cleanConditionally($articleContent, 'table');
        $this->cleanConditionally($articleContent, 'ul');
        $this->cleanConditionally($articleContent, 'div');

        /* Remove extra paragraphs */
        $articleParagraphs = $articleContent->getElementsByTagName('p');
        for ($i = $articleParagraphs->length-1; $i >= 0; $i--)
        {
            $imgCount    = $articleParagraphs->item($i)->getElementsByTagName('img')->length;
            $embedCount  = $articleParagraphs->item($i)->getElementsByTagName('embed')->length;
            $objectCount = $articleParagraphs->item($i)->getElementsByTagName('object')->length;
            $iframeCount = $articleParagraphs->item($i)->getElementsByTagName('iframe')->length;

            if ($imgCount === 0 && $embedCount === 0 && $objectCount === 0 && $iframeCount === 0 && $this->getInnerText($articleParagraphs->item($i), false) == '')
            {
                $articleParagraphs->item($i)->parentNode->removeChild($articleParagraphs->item($i));
            }
        }

        try {
            $articleContent->innerHTML = preg_replace('/<br[^>]*>\s*<p/i', '<p', $articleContent->innerHTML);
            //articleContent.innerHTML = articleContent.innerHTML.replace(/<br[^>]*>\s*<p/gi, '<p');
        }
        catch (Exception $e) {
            $this->dbg("Cleaning innerHTML of breaks failed. This is an IE strict-block-elements bug. Ignoring.: " . $e);
        }
    }

    /**
    * Initialize a node with the readability object. Also checks the
    * className/id for special names to add to its score.
    *
    * @param Element
    * @return void
    **/
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_POST_DEC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))
                                    (AST_CONST)))
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR)))))))
        (NULL)))||||||||