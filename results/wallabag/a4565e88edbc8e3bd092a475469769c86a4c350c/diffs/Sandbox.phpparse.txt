||||||||    public function parse(Twig_Token $token)
    {
        $this->parser->getStream()->expect(Twig_Token::BLOCK_END_TYPE);
        $body = $this->parser->subparse(array($this, 'decideBlockEnd'), true);
        $this->parser->getStream()->expect(Twig_Token::BLOCK_END_TYPE);

        // in a sandbox tag, only include tags are allowed
        if (!$body instanceof Twig_Node_Include) {
            foreach ($body as $node) {
                if ($node instanceof Twig_Node_Text && ctype_space($node->getAttribute('data'))) {
                    continue;
                }

                if (!$node instanceof Twig_Node_Include) {
                    throw new Twig_Error_Syntax('Only "include" tags are allowed within a "sandbox" section', $node->getLine(), $this->parser->getFilename());
                }
            }
        }

        return new Twig_Node_Sandbox($body, $token->getLine(), $this->getTag());
    }

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_INSTANCEOF
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (SCALAR))))))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_INSTANCEOF
                                        (AST_VAR)))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR))))))))))))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))))))