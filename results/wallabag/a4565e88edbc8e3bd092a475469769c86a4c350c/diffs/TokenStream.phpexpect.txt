||||||||    public function expect($type, $value = null, $message = null)
    {
        $token = $this->tokens[$this->current];
        if (!$token->test($type, $value)) {
            $line = $token->getLine();
            throw new Twig_Error_Syntax(sprintf('%sUnexpected token "%s" of value "%s" ("%s" expected%s)',
                $message ? $message.'. ' : '',
                Twig_Token::typeToEnglish($token->getType(), $line), $token->getValue(),
                Twig_Token::typeToEnglish($type, $line), $value ? sprintf(' with value "%s"', $value) : ''),
                $line,
                $this->filename
            );
        }
        $this->next();

        return $token;
    }

    /**
     * Looks at the next token.
     *
     * @param integer $number
     *
     * @return Twig_Token
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CONDITIONAL
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_STATIC_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_CONDITIONAL
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)))
                                        (SCALAR))))
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))