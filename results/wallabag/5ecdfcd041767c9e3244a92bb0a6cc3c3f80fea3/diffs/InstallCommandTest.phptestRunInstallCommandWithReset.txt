    public function testRunInstallCommandWithReset()
    {
        $application = new Application($this->getClient()->getKernel());
        $application->add(new InstallCommandMock());

        $command = $application->find('wallabag:install');

        // We mock the QuestionHelper
        $question = $this->getMockBuilder('Symfony\Component\Console\Helper\QuestionHelper')
            ->disableOriginalConstructor()
            ->getMock();
        $question->expects($this->any())
            ->method('ask')
            ->will($this->returnValue('yes_'.uniqid('', true)));

        // We override the standard helper with our mock
        $command->getHelperSet()->set($question, 'question');

        $tester = new CommandTester($command);
        $tester->execute([
            'command' => $command->getName(),
            '--reset' => true,
        ]);

        $this->assertContains('Checking system requirements.', $tester->getDisplay());
        $this->assertContains('Setting up database.', $tester->getDisplay());
        $this->assertContains('Droping database, creating database and schema, clearing the cache', $tester->getDisplay());
        $this->assertContains('Administration setup.', $tester->getDisplay());
        $this->assertContains('Config setup.', $tester->getDisplay());
        $this->assertContains('Installing assets.', $tester->getDisplay());

        // we force to reset everything
        $this->assertContains('Droping database, creating database and schema, clearing the cache', $tester->getDisplay());
    }

||||||||    public function testRunInstallCommandWithReset()
    {
        $application = new Application($this->getClient()->getKernel());
        $application->add(new InstallCommandMock());

        $command = $application->find('wallabag:install');

        // We mock the QuestionHelper
        $question = $this->getMockBuilder('Symfony\Component\Console\Helper\QuestionHelper')
            ->disableOriginalConstructor()
            ->getMock();
        $question->expects($this->any())
            ->method('ask')
            ->will($this->returnValue('yes_'.uniqid('', true)));

        // We override the standard helper with our mock
        $command->getHelperSet()->set($question, 'question');

        $tester = new CommandTester($command);
        $tester->execute([
            'command' => $command->getName(),
            '--reset' => true,
        ]);

        $this->assertContains('Checking system requirements.', $tester->getDisplay());
        $this->assertContains('Setting up database.', $tester->getDisplay());
        $this->assertContains('Droping database, creating database and schema, clearing the cache', $tester->getDisplay());
        $this->assertContains('Administration setup.', $tester->getDisplay());
        $this->assertContains('Config setup.', $tester->getDisplay());

        // we force to reset everything
        $this->assertContains('Droping database, creating database and schema, clearing the cache', $tester->getDisplay());
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CONST))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CONST))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)))))