||||||||   public static function ActiveCache() {
      static $ActiveCache = NULL;
      if (is_null($ActiveCache)) {
         $ConfigActiveCache = C('Cache.Method', FALSE);

         // This should only fire when cache is loading automatically
         if (!func_num_args()) {
            Gdn::PluginManager()->EventArguments['ActiveCache'] = &$ConfigActiveCache;
            Gdn::PluginManager()->FireEvent('BeforeActiveCache');
         }

         $ActiveCache = $ConfigActiveCache;
      }
      return $ActiveCache;
   }

   /**
   * Add a value to the cache
   *
   * This fails if the item already exists in the cache.
   *
   * @param string $Key Cache key used for storage
   * @param mixed $Value Value to be cached
   * @param array $Options
   * @return boolean TRUE on success or FALSE on failure.
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CONST))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL))
                        (
                            (AST_ASSIGN_REF
                                (AST_DIM
                                    (AST_PROP
                                        (AST_STATIC_CALL))
                                    (SCALAR))
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL)
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))