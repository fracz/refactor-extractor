||||||||    function storeAssociation($server_url, $association)
    {
        if (!$this->active) {
            trigger_error("FileStore no longer active", E_USER_ERROR);
            return false;
        }

        $association_s = $association->serialize();
        $filename = $this->getAssociationFilename($server_url,
                                                  $association->handle);
        list($tmp_file, $tmp) = $this->_mktemp();

        if (!$tmp_file) {
            trigger_error("_mktemp didn't return a valid file descriptor",
                          E_USER_WARNING);
            return false;
        }

        fwrite($tmp_file, $association_s);

        fflush($tmp_file);

        fclose($tmp_file);

        if (@rename($tmp, $filename)) {
            return true;
        } else {
            // In case we are running on Windows, try unlinking the
            // file in case it exists.
            @unlink($filename);

            // Now the target should not exist. Try renaming again,
            // giving up if it fails.
            if (@rename($tmp, $filename)) {
                return true;
            }
        }

        // If there was an error, don't leave the temporary file
        // around.
        Auth_OpenID_FileStore::_removeIfPresent($tmp);
        return false;
    }

    /**
     * Retrieve an association. If no handle is specified, return the
     * association with the most recent issue time.
     *
     * @return mixed $association
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))