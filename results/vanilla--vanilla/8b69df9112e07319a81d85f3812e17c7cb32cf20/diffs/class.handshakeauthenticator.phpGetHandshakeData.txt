   public function GetHandshakeData() {
      if(is_array($this->_HandshakeData))
         return $this->_HandshakeData;
      /*
      $UrlParts = parse_url($this->AuthenticateUrl);
      $Host = $UrlParts['host'];
      $Port = ArrayValue('port', $UrlParts, '80');
      $Path = $UrlParts['path'];
      $Referer = Gdn_Url::WebRoot(TRUE);
      $Query = ArrayValue('query', $UrlParts, '');

      // Make a request to the authenticated Url to see if we are logged in.
      $Pointer = @fsockopen($Host, $Port, $ErrorNumber, $Error);

      if (!$Pointer)
         throw new Exception(sprintf(T('Encountered an error when attempting to authenticate handshake (%1$s): [%2$s] %3$s'), $this->AuthenticateUrl, $ErrorNumber, $Error));

      // Get the cookie.
      $Cookie = '';
      foreach($_COOKIE as $Key => $Value) {
         if(strncasecmp($Key, 'XDEBUG', 6) == 0)
            continue;

         if(strlen($Cookie) > 0)
            $Cookie .= '; ';

         $Cookie .= $Key.'='.urlencode($Value);
      }

      if(strlen($Cookie) > 0)
         $Cookie = "Cookie: $Cookie\r\n";
      */

      //$Header = "GET $Path?$Query HTTP/1.1\r\n" .
      //   "Host: $Host\r\n" .
         // If you've got basic authentication enabled for the app, you're going to need to explicitly define the user/pass for this fsock call
         // "Authorization: Basic ". base64_encode ("username:password")."\r\n" .
      //   "User-Agent: Vanilla/2.0\r\n" .
      //   "Accept: */*\r\n" .
      //   "Accept-Charset: utf-8;\r\n" .
      //   "Referer: $Referer\r\n" .
      //   "Connection: close\r\n" .
      //   $Cookie."\r\n\r\n";
      /*
      // Send the necessary headers to get the file
      fputs($Pointer, $Header);
// echo '<br /><textarea style="height: 400px; width: 700px;">'.$Header.'</textarea>';

      // Retrieve the response from the remote server
      $Response = '';
      $InBody = FALSE;
      while ($Line = fread($Pointer, 4096)) {
         $Response .= $Line;
      }
      fclose($Pointer);
// echo '<br /><textarea style="height: 400px; width: 700px;">'.$Response.'</textarea>';
// exit();
// Remove response headers
      $Response = trim(substr($Response, strpos($Response, "\r\n\r\n") + 4));
      switch($this->Encoding) {
         case 'json':
            $Result = json_decode($Response, TRUE);
            break;
         case 'ini':
         default:
            $Result = parse_ini_string($Response);
            break;
      }
      */

      // Check for data in the cookie
      $QuickIn = Gdn_Format::Unserialize(stripslashes(ArrayValue('QuickIn', $_COOKIE)));
      // Not found? Check in the url
      if (!is_array($QuickIn))
         $QuickIn = Gdn_Format::Unserialize(stripslashes(ArrayValue('QuickIn', $_GET)));

      $this->_HandshakeData = $QuickIn;
      return is_array($this->_HandshakeData) ? $this->_HandshakeData : array();
   }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_PROP
                (AST_VAR))
            (AST_ARRAY))))||||||||