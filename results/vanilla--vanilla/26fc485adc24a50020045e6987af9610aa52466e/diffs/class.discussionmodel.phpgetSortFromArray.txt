    public static function getSortFromArray($array) {
        $unsafeSortKey = val('sort', $array);
        foreach (self::getSorts() as $sort) {
            if ($unsafeSortKey == val('key', $sort)) {
                // Sort key is valid.
                return val('key', $sort);
            }
        }
        return '';
    }

    /**
     * We're using two different data structures for managing filters. One is an array of filters, the other is a
     * collection of filter key/value pairs that we get from the request. This takes a collection of filters and
     * returns the corresponding filter setKey => filterKey  array.
     *
     * @param array $filters The filters to get the keys for.
     * @return array The filter key array.
     */
||||||||    public static function getSortFromArray($array) {
        $unsafeSortKey = val('sort', $array);
        foreach (self::getSorts() as $sort) {
            if ($unsafeSortKey == val('key', $sort)) {
                // Sort key is valid.
                return val('key', $sort);
            }
        }
        if ($unsafeSortKey) {
            Logger::log(
                Logger::NOTICE, 'Sort: '.htmlentities($unsafeSortKey)
                .' does not exist in the DiscussionModel\'s sorts array.'
            );
        }
        return '';
    }

    /**
     * We're using two different data structures for managing filters. One is an array of filters, the other is a
     * collection of filter key/value pairs that we get from the request. This takes a collection of filters and
     * returns the corresponding filter setKey => filterKey  array.
     *
     * @param array $filters The filters to get the keys for.
     * @return array The filter key array.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_STATIC_CALL)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_STATIC_CALL)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (SCALAR)))))))
    (AST_RETURN
        (SCALAR)))