    private function analyzeRequest($request) {

        // Here is the basic format of a request:
        // [/application]/controller[/method[.json|.xml]]/argn|argn=valn

        // Here are some examples of what this method could/would receive:
        // /application/controller/method/argn
        // /controller/method/argn
        // /application/controller/argn
        // /controller/argn
        // /controller

        // Clear the slate
        $this->applicationFolder = '';
        $this->ControllerName = '';
        $this->ControllerMethod = 'index';
        $this->controllerMethodArgs = [];

        $this->rewriteRequest($request);

        switch ($request->outputFormat()) {
            case 'rss':
                $this->syndicationMethod = SYNDICATION_RSS;
                $this->deliveryMethod = DELIVERY_METHOD_RSS;
                break;
            case 'atom':
                $this->syndicationMethod = SYNDICATION_ATOM;
                $this->deliveryMethod = DELIVERY_METHOD_RSS;
                break;
            case 'default':
            default:
                $this->syndicationMethod = SYNDICATION_NONE;
                break;
        }

        if (in_array($request->path(), ['', '/'])) {
            $this->isHomepage = true;
            $defaultController = Gdn::router()->getRoute('DefaultController');
            $request->pathAndQuery($defaultController['Destination']);
        }

        $parts = explode('/', str_replace('\\', '/', $request->path()));

        // We need to save this state now because it's lost after this method.
        $this->passData('isHomepage', $this->isHomepage);

        /**
         * The application folder is either the first argument or is not provided. The controller is therefore
         * either the second argument or the first, depending on the result of the previous statement. Check that.
         */
        try {
            // if the 1st argument is a valid application, check if it has a controller matching the 2nd argument
            if (in_array($parts[0], $this->getEnabledApplicationFolders())) {
                $this->findController(1, $parts);
            }

            // if no match, see if the first argument is a controller
            $this->findController(0, $parts);

            // 3] See if there is a plugin trying to create a root method.
            list($MethodName, $DeliveryMethod) = $this->_splitDeliveryMethod(val(0, $parts), true);
            if ($MethodName && Gdn::pluginManager()->hasNewMethod('RootController', $MethodName, true)) {
                $this->deliveryMethod = $DeliveryMethod;
                $parts[0] = $MethodName;
                $parts = array_merge(array('root'), $parts);
                $this->findController(0, $parts);
            }

            throw new GdnDispatcherControllerNotFoundException();
        } catch (GdnDispatcherControllerFoundException $e) {
            switch ($this->deliveryMethod) {
                case DELIVERY_METHOD_JSON:
                case DELIVERY_METHOD_XML:
                    $this->deliveryType = DELIVERY_TYPE_DATA;
                    break;
                case DELIVERY_METHOD_TEXT:
                    $this->deliveryType = DELIVERY_TYPE_VIEW;
                    break;
                case DELIVERY_METHOD_XHTML:
                case DELIVERY_METHOD_RSS:
                    break;
                default:
                    $this->deliveryMethod = DELIVERY_METHOD_XHTML;
                    break;
            }

            return true;
        } catch (GdnDispatcherControllerNotFoundException $e) {
            $this->EventArguments['Handled'] = false;
            $Handled =& $this->EventArguments['Handled'];
            $this->fireEvent('NotFound');

            if (!$Handled) {
                safeHeader("HTTP/1.1 404 Not Found");
                $request->withRoute('Default404');
                return $this->analyzeRequest($request);
            }
        }
    }

    /**
     *
     *
     * @param string $EnabledApplications
     * @deprecated
     */
||||||||    private function analyzeRequest($request) {
        // Initialize the result of our request.
        $result = [
            'method' => $request->requestMethod(),
            'path' => $request->path(),
            'addon' => null,
            'controller' => '',
            'controllerMethod' => '',
            'pathArgs' => [],
            'query' => array_change_key_case($request->get())
        ];

        // Here is the basic format of a request:
        // [/application]/controller[/method[.json|.xml]]/argn|argn=valn

        // Here are some examples of what this method could/would receive:
        // /application/controller/method/argn
        // /controller/method/argn
        // /application/controller/argn
        // /controller/argn
        // /controller

        $parts = explode('/', str_replace('\\', '/', strtolower($request->path())));

        // Parse the file extension.
        list($parts, $deliveryMethod) = $this->parseDeliveryMethod($parts);

        // Set some special properties based on the deliver method.
        $deliveryType = DELIVERY_TYPE_ALL;
        switch ($deliveryMethod) {
                case DELIVERY_METHOD_JSON:
                case DELIVERY_METHOD_XML:
                $deliveryType = DELIVERY_TYPE_DATA;
                    break;
            case DELIVERY_METHOD_ATOM:
                case DELIVERY_METHOD_RSS:
                $deliveryType = DELIVERY_TYPE_VIEW;
                $result['syndicationMethod'] = DELIVERY_METHOD_RSS; //$deliveryMethod;
                    break;
            case DELIVERY_METHOD_TEXT:
                $deliveryType = DELIVERY_TYPE_VIEW;
                    break;
            }
        // An explicitly passed delivery type/method overrides the default.
        $result['deliveryMethod'] = val('deliverymethod', $result['query'], $deliveryMethod ?: DELIVERY_METHOD_XHTML);
        $result['deliveryType'] = val('deliverytype', $result['query'], $deliveryType);

        // Figure out the controller.
        list($controllerName, $pathArgs) = $this->findController($parts);

        if ($controllerName) {
            // The controller was found based on the path.
            $result['controller'] = $controllerName;
            $result['pathArgs'] = $pathArgs;
        } elseif (Gdn::pluginManager()->hasNewMethod('RootController', val(0, $parts))) {
            // There is a plugin defining a new root method.
            $result['controller'] = 'RootController';
            $result['controllerMethod'] = array_shift($parts);
            $result['pathArgs'] = $parts;
        } else {
            // No controller was found, fire a not found event.
            // TODO: Move this outside this method.
            $this->EventArguments['Handled'] = false;
            $Handled =& $this->EventArguments['Handled'];
            $this->fireEvent('NotFound');

            if (!$Handled) {
                safeHeader("HTTP/1.1 404 Not Found");
                return $this
                    ->passData('Reason', 'controller_notfound')
                    ->analyzeRequest($request->withRoute('Default404'));
            }
        }

        // A controller has been found. Find the addon that manages it.
        $addon = Gdn::addonManager()->lookupByClassname($controllerName);

        // The result should be properly set now. Set the legacy properties though.
        if ($addon) {
            $result['addon'] = $addon;
            $this->applicationFolder = stringBeginsWith($addon->getSubdir(), 'applications/', true, true);
    }
        $this->ControllerName = $result['controller'];
        $this->ControllerMethod = 'index';
        $this->controllerMethodArgs = [];
        $this->syndicationMethod = val('syndicationMethod', $result, SYNDICATION_NONE);
        $this->deliveryMethod = $result['deliveryMethod'];

        return $result;
    }

    /**
     *
     *
     * @param string $EnabledApplications
     * @deprecated
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_SWITCH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (AST_CONST))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)
                                (AST_VAR)
                                (AST_CONST))))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_VAR))))))
            (AST_THROW
                (AST_NEW)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_SWITCH
                        (AST_PROP
                            (AST_VAR))
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL))))))
                    (AST_RETURN
                        (AST_CONST))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_CONST))
                    (AST_ASSIGN_REF
                        (AST_VAR)
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))
                                (AST_RETURN
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_CONST))
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (SCALAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_RETURN
        (AST_VAR)))