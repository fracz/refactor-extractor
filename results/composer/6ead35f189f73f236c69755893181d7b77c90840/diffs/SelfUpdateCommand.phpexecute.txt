    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $config = Factory::createConfig();
        $cacheDir = rtrim($config->get('cache-dir'), '/');

        // Check if current dir is writable and if not try the cache dir from settings
        $tmpDir = is_writable(dirname($this->localFilename))? dirname($this->localFilename) : $cacheDir;

        // check for permissions in local filesystem before start connection process
        if (!is_writable($tmpDir)) {
            throw new FilesystemException('Composer update failed: the "'.$tmpDir.'" directory used to download the temp file could not be written');
        }

        if (!is_writable($this->localFilename)) {
            throw new FilesystemException('Composer update failed: the "'.$this->localFilename.'" file could not be written');
        }

        $rollbackVersion = false;
        $rollbackDir = rtrim($config->get('home'), '/');

        // rollback specified, get last phar
        if ($input->getOption(self::ROLLBACK)) {
            $rollbackVersion = $this->getLastVersion($rollbackDir);
            if (!$rollbackVersion) {
                throw new FilesystemException('Composer rollback failed: no installation to roll back to in "'.$rollbackDir.'"');
            }
        }

        // if a rollback version is specified, check for permissions and rollback installation
        if ($rollbackVersion) {
            if (!is_writable($rollbackDir)) {
                throw new FilesystemException('Composer rollback failed: the "'.$rollbackDir.'" dir could not be written to');
            }

            $old = $rollbackDir . '/' . $rollbackVersion . self::OLD_INSTALL_EXT;

            if (!is_file($old)) {
                throw new FilesystemException('Composer rollback failed: "'.$old.'" could not be found');
            }
            if (!is_readable($old)) {
                throw new FilesystemException('Composer rollback failed: "'.$old.'" could not be read');
            }
        }

        $updateVersion = ($rollbackVersion)? $rollbackVersion : $this->getLatestVersion();

        if (Composer::VERSION === $updateVersion) {
            $output->writeln('<info>You are already using composer version '.$updateVersion.'.</info>');

            return 0;
        }

        $tempFilename = $tmpDir . '/' . basename($this->localFilename, '.phar').'-temp.phar';
        $backupFile = ($rollbackVersion)? false : $rollbackDir . '/' . Composer::VERSION . self::OLD_INSTALL_EXT;

        if ($rollbackVersion) {
            rename($rollbackDir . "/{$rollbackVersion}" . self::OLD_INSTALL_EXT, $tempFilename);
            $output->writeln(sprintf("Rolling back to cached version <info>%s</info>.", $rollbackVersion));
        } else {
            $endpoint = ($updateVersion === $this->getLatestVersion()) ? '/composer.phar' : "/download/{$updateVersion}/composer.phar";
            $remoteFilename = $this->homepageURL . $endpoint;

            $output->writeln(sprintf("Updating to version <info>%s</info>.", $updateVersion));

            $this->remoteFS->copy(self::HOMEPAGE, $remoteFilename, $tempFilename);

            // @todo: handle snapshot versions not being found!
            if (!file_exists($tempFilename)) {
                $output->writeln('<error>The download of the new composer version failed for an unexpected reason');

                return 1;
            }

            // remove saved installations of composer
            if ($input->getOption(self::CLEAN_ROLLBACKS)) {
                $files = $this->getOldInstallationFiles($rollbackDir);

                if (!empty($files)) {
                    $fs = new Filesystem;

                    foreach ($files as $file) {
                        $output->writeln('<info>Removing: '.$file);
                        $fs->remove($file);
                    }
                }
            }
        }

        if ($err = $this->setLocalPhar($tempFilename, $backupFile)) {
            $output->writeln('<error>The file is corrupted ('.$err->getMessage().').</error>');
            $output->writeln('<error>Please re-run the self-update command to try again.</error>');

            return 1;
        }

        if ($backupFile) {
            $output->writeln('<info>Saved rollback snapshot '.$backupFile);
        }
    }

||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $baseUrl = (extension_loaded('openssl') ? 'https' : 'http') . '://' . self::HOMEPAGE;
        $remoteFilesystem = new RemoteFilesystem($this->getIO());
        $config = Factory::createConfig();
        $cacheDir = $config->get('cache-dir');
        $rollbackDir = $config->get('home');
        $localFilename = realpath($_SERVER['argv'][0]) ?: $_SERVER['argv'][0];

        // check if current dir is writable and if not try the cache dir from settings
        $tmpDir = is_writable(dirname($localFilename)) ? dirname($localFilename) : $cacheDir;

        // check for permissions in local filesystem before start connection process
        if (!is_writable($tmpDir)) {
            throw new FilesystemException('Composer update failed: the "'.$tmpDir.'" directory used to download the temp file could not be written');
        }
        if (!is_writable($localFilename)) {
            throw new FilesystemException('Composer update failed: the "'.$localFilename.'" file could not be written');
        }

        if ($input->getOption('rollback')) {
            return $this->rollback($output, $rollbackDir, $localFilename);
        }

        $latestVersion = trim($remoteFilesystem->getContents(self::HOMEPAGE, $baseUrl. '/version', false));
        $updateVersion = $input->getArgument('version') ?: $latestVersion;

        if (preg_match('{^[0-9a-f]{40}$}', $updateVersion) && $updateVersion !== $latestVersion) {
            $output->writeln('<error>You can not update to a specific SHA-1 as those phars are not available for download</error>');

            return 1;
        }

        if (Composer::VERSION === $updateVersion) {
            $output->writeln('<info>You are already using composer version '.$updateVersion.'.</info>');

            return 0;
        }

        $tempFilename = $tmpDir . '/' . basename($localFilename, '.phar').'-temp.phar';
        $backupFile = sprintf(
            '%s/%s-%s%s',
            $rollbackDir,
            strtr(Composer::RELEASE_DATE, ' :', '_-'),
            preg_replace('{^([0-9a-f]{7})[0-9a-f]{33}$}', '$1', Composer::VERSION),
            self::OLD_INSTALL_EXT
        );

        $output->writeln(sprintf("Updating to version <info>%s</info>.", $updateVersion));
        $remoteFilename = $baseUrl . (preg_match('{^[0-9a-f]{40}$}', $updateVersion) ? '/composer.phar' : "/download/{$updateVersion}/composer.phar");
        $remoteFilesystem->copy(self::HOMEPAGE, $remoteFilename, $tempFilename);
        if (!file_exists($tempFilename)) {
            $output->writeln('<error>The download of the new composer version failed for an unexpected reason');

            return 1;
        }

        // remove saved installations of composer
        if ($input->getOption('clean-backups')) {
            $files = $this->getOldInstallationFiles($rollbackDir);

            if (!empty($files)) {
                $fs = new Filesystem;

                foreach ($files as $file) {
                    $output->writeln('<info>Removing: '.$file);
                    $fs->remove($file);
                }
            }
        }

        if ($err = $this->setLocalPhar($localFilename, $tempFilename, $backupFile)) {
            $output->writeln('<error>The file is corrupted ('.$err->getMessage().').</error>');
            $output->writeln('<error>Please re-run the self-update command to try again.</error>');

            return 1;
        }

        if (file_exists($backupFile)) {
            $output->writeln('Use <info>composer self-update --rollback</info> to return to version '.Composer::VERSION);
        } else {
            $output->writeln('<warning>A backup of the current version could not be written to '.$backupFile.', no rollback possible</warning>');
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))))
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLASS_CONST
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))))
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CONST)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR)
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_RETURN
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW))
                                        (AST_FOREACH
                                            (AST_VAR)
                                            (AST_VAR)
                                            (NULL)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_VAR))))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR))))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONDITIONAL
                    (AST_CALL
                        (
                            (SCALAR)))
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (NULL)
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (NULL)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))))
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)
                        (SCALAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CONDITIONAL
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (SCALAR)
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW))
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))))))))