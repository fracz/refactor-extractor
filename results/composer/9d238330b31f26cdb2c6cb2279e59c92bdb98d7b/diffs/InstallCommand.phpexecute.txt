    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $composer = $this->getComposer();

        // creating repository pool
        $pool = new Pool;
        $pool->addRepository($composer->getRepositoryManager()->getLocalRepository());
        foreach ($composer->getRepositoryManager()->getRepositories() as $repository) {
            $pool->addRepository($repository);
        }

        // creating requirements request
        $request = new Request($pool);
        if ($composer->getLocker()->isLocked()) {
            $output->writeln('> Found lockfile. Reading.');

            foreach ($composer->getLocker()->getLockedPackages() as $package) {
                $constraint = new VersionConstraint('=', $package->getVersion());
                $request->install($package->getName(), $constraint);
            }
        } else {
            foreach ($composer->getPackage()->getRequires() as $link) {
                $request->install($link->getTarget(), $link->getConstraint());
            }
        }

        // prepare solver
        $installationManager = $composer->getInstallationManager();
        $localRepo           = $composer->getRepositoryManager()->getLocalRepository();
        $policy              = new DependencyResolver\DefaultPolicy();
        $solver              = new DependencyResolver\Solver($policy, $pool, $localRepo);

        // solve dependencies
        $operations = $solver->solve($request);

        // check for missing deps
        // TODO this belongs in the solver, but this will do for now to report top-level deps missing at least
        foreach ($request->getJobs() as $job) {
            if ('install' === $job['cmd']) {
                foreach ($localRepo->getPackages() as $package) {
                    if ($job['packageName'] === $package->getName()) {
                        continue 2;
                    }
                }
                foreach ($operations as $operation) {
                    if ('install' === $operation->getJobType() && $job['packageName'] === $operation->getPackage()->getName()) {
                        continue 2;
                    }
                }
                throw new \UnexpectedValueException('Package '.$job['packageName'].' could not be resolved to an installable package.');
            }
        }

        // execute operations
        foreach ($operations as $operation) {
            $installationManager->execute($operation);
        }

        if (!$composer->getLocker()->isLocked()) {
            $composer->getLocker()->lockPackages($localRepo->getPackages());
            $output->writeln('> Locked');
        }

        $localRepo->write();

        $output->writeln('> Generating autoload.php');
        $this->generateAutoload($composer, $installationManager);

        $output->writeln('> Done');
    }

||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $composer = $this->getComposer();

        // creating repository pool
        $pool = new Pool;
        $pool->addRepository($composer->getRepositoryManager()->getLocalRepository());
        foreach ($composer->getRepositoryManager()->getRepositories() as $repository) {
            $pool->addRepository($repository);
        }

        // creating requirements request
        $request = new Request($pool);
        if ($composer->getLocker()->isLocked()) {
            $output->writeln('> Found lockfile. Reading.');

            foreach ($composer->getLocker()->getLockedPackages() as $package) {
                $constraint = new VersionConstraint('=', $package->getVersion());
                $request->install($package->getName(), $constraint);
            }
        } else {
            foreach ($composer->getPackage()->getRequires() as $link) {
                $request->install($link->getTarget(), $link->getConstraint());
            }
        }

        // prepare solver
        $installationManager = $composer->getInstallationManager();
        $localRepo           = $composer->getRepositoryManager()->getLocalRepository();
        $policy              = new DependencyResolver\DefaultPolicy();
        $solver              = new DependencyResolver\Solver($policy, $pool, $localRepo);

        // solve dependencies
        $operations = $solver->solve($request);

        // check for missing deps
        // TODO this belongs in the solver, but this will do for now to report top-level deps missing at least
        foreach ($request->getJobs() as $job) {
            if ('install' === $job['cmd']) {
                foreach ($localRepo->getPackages() as $package) {
                    if ($job['packageName'] === $package->getName()) {
                        continue 2;
                    }
                }
                foreach ($operations as $operation) {
                    if ('install' === $operation->getJobType() && $job['packageName'] === $operation->getPackage()->getName()) {
                        continue 2;
                    }
                }
                throw new \UnexpectedValueException('Package '.$job['packageName'].' could not be resolved to an installable package.');
            }
        }

        // execute operations
        foreach ($operations as $operation) {
            $installationManager->execute($operation);
        }

        if (!$composer->getLocker()->isLocked()) {
            $composer->getLocker()->lockPackages($localRepo->getPackages());
            $output->writeln('> Locked');
        }

        $localRepo->write();

        $output->writeln('> Generating autoload.php');
        $localRepo = new \Composer\Repository\FilesystemRepository(
            new \Composer\Json\JsonFile('.composer/installed.json'));
        $generator = new AutoloadGenerator($localRepo, $composer->getPackage(), $installationManager);
        $generator->dump('.composer/autoload.php');

        $output->writeln('> Done');
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_FOREACH
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (
                                            (AST_CONTINUE
                                                (SCALAR)))))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))))
                                        (
                                            (AST_CONTINUE
                                                (SCALAR)))))))
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (SCALAR))))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_FOREACH
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (
                                            (AST_CONTINUE
                                                (SCALAR)))))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))))
                                        (
                                            (AST_CONTINUE
                                                (SCALAR)))))))
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (SCALAR))))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_NEW
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))