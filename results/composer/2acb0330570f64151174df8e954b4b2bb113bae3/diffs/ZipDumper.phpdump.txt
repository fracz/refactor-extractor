||||||||    public function dump(PackageInterface $package)
    {
        $workDir = $this->getAndEnsureWorkDirectory($package);

        $fileName   = $this->getFilename($package, 'zip');
        $sourceType = $package->getSourceType();
        $sourceRef  = $package->getSourceReference();

        $dm = $this->getDownloadManager();
        $dm->download($package, $workDir, true);

        switch ($sourceType) {
            case 'git':
                $this->packageGit($fileName, $sourceRef, $workDir);
                break;
            case 'hg':
                $this->packageHg($fileName, $sourceRef, $workDir);
                break;
            case 'svn':
                $dir = $workDir . (substr($sourceRef, 0, 1) !== '/')?'/':'' . $sourceRef;
                $this->package($fileName, $dir, \Phar::ZIP);
                break;
            default:
                throw new \InvalidArgumentException("Unable to handle repositories of type '{$sourceType}'.");
        }
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (SCALAR)))
                                    (SCALAR)))
                            (SCALAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))))))))))