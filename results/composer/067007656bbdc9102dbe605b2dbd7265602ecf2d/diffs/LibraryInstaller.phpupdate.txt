||||||||    public function update(PackageInterface $initial, PackageInterface $target)
    {
        if (!$this->registry->isPackageRegistered($initial)) {
            throw new \UnexpectedValueException('Package is not installed: '.$initial);
        }

        $type = $this->registry->getRegisteredPackageInstallerType($initial);
        $this->dm->update($initial, $target, $this->dir, $type);
        $this->registry->unregisterPackage($initial);
        $this->registry->registerPackage($target, $type);
    }

    /**
     * Uninstalls specific package.
     *
     * @param   PackageInterface    $package    package instance
     *
     * @throws  InvalidArgumentException        if package is not installed
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_VAR))))