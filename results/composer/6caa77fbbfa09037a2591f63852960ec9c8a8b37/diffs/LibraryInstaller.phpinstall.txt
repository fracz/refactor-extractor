    public function install(PackageInterface $package, DownloaderInterface $downloader, $type)
    {
        if ($type === 'dist') {
            $downloader->download($package, $this->dir, $package->getDistUrl(), $package->getDistSha1Checksum());
        } elseif ($type === 'source') {
            $downloader->download($package, $this->dir, $package->getSourceUrl());
        } else {
            throw new \InvalidArgumentException('Type must be one of (dist, source), '.$type.' given.');
        }
        return true;
    }

||||||||    public function install(PackageInterface $package)
    {
        if ($package->getDistType()) {

            $this->composer->getDownloader($package->getDistType())->download(
                $package, $this->dir, $package->getDistUrl(), $package->getDistSha1Checksum()
            );

        } elseif ($package->getSourceType()) {

            $this->composer->getDownloader($package->getSourceType())->download(
                $package, $this->dir, $package->getSourceUrl()
            );

        } else {
            throw new \InvalidArgumentException(
                'Type must be one of (dist, source), '.$type.' given.'
            );
        }

        return true;
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CONST)))