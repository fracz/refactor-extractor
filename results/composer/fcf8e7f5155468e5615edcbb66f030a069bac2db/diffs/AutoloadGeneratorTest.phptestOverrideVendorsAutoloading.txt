    public function testOverrideVendorsAutoloading()
    {
        $mainPackage = new Package('z', '1.0', '1.0');
        $mainPackage->setAutoload(array(
            'psr-0' => array('A\\B' => $this->workingDir.'/lib'),
            'classmap' => array($this->workingDir.'/src')
        ));
        $mainPackage->setRequires(array(new Link('z', 'a/a')));

        $packages = array();
        $packages[] = $a = new Package('a/a', '1.0', '1.0');
        $packages[] = $b = new Package('b/b', '1.0', '1.0');
        $a->setAutoload(array(
            'psr-0' => array('A' => 'src/', 'A\\B' => 'lib/'),
            'classmap' => array('classmap'),
        ));
        $b->setAutoload(array(
            'psr-0' => array('B\\Sub\\Name' => 'src/'),
        ));

        $this->repository->expects($this->once())
            ->method('getCanonicalPackages')
            ->will($this->returnValue($packages));

        $this->fs->ensureDirectoryExists($this->workingDir.'/lib/A/B');
        $this->fs->ensureDirectoryExists($this->workingDir.'/src/');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/composer');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/a/a/classmap');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/a/a/src');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/a/a/lib/A/B');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/b/b/src');
        file_put_contents($this->workingDir.'/lib/A/B/C.php', '<?php namespace A\\B; class C {}');
        file_put_contents($this->workingDir.'/src/classes.php', '<?php namespace Foo; class Bar {}');
        file_put_contents($this->vendorDir.'/a/a/lib/A/B/C.php', '<?php namespace A\\B; class C {}');
        file_put_contents($this->vendorDir.'/a/a/classmap/classes.php', '<?php namespace Foo; class Bar {}');

        $expectedNamespace = <<<EOF
<?php

// autoload_namespaces.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
    'B\\\\Sub\\\\Name' => array(\$vendorDir . '/b/b/src'),
    'A\\\\B' => array(\$baseDir . '/lib', \$vendorDir . '/a/a/lib'),
    'A' => array(\$vendorDir . '/a/a/src'),
);

EOF;

        // autoload_psr4.php is expected to be empty in this example.
        $expectedPsr4 = <<<EOF
<?php

// autoload_psr4.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
);

EOF;

        $expectedClassmap = <<<EOF
<?php

// autoload_classmap.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
    'A\\\\B\\\\C' => \$baseDir . '/lib/A/B/C.php',
    'Foo\\\\Bar' => \$baseDir . '/src/classes.php',
);

EOF;

        $this->generator->dump($this->config, $this->repository, $mainPackage, $this->im, 'composer', true, '_9');
        $this->assertEquals($expectedNamespace, file_get_contents($this->vendorDir.'/composer/autoload_namespaces.php'));
        $this->assertEquals($expectedPsr4, file_get_contents($this->vendorDir.'/composer/autoload_psr4.php'));
        $this->assertEquals($expectedClassmap, file_get_contents($this->vendorDir.'/composer/autoload_classmap.php'));
    }

||||||||    public function testOverrideVendorsAutoloading()
    {
        $mainPackage = new Package('z', '1.0', '1.0');
        $mainPackage->setAutoload(array(
            'psr-0' => array('A\\B' => $this->workingDir.'/lib'),
            'classmap' => array($this->workingDir.'/src')
        ));
        $mainPackage->setRequires(array(new Link('z', 'a/a')));

        $packages = array();
        $packages[] = $a = new Package('a/a', '1.0', '1.0');
        $packages[] = $b = new Package('b/b', '1.0', '1.0');
        $a->setAutoload(array(
            'psr-0' => array('A' => 'src/', 'A\\B' => 'lib/'),
            'classmap' => array('classmap'),
        ));
        $b->setAutoload(array(
            'psr-0' => array('B\\Sub\\Name' => 'src/'),
        ));

        $this->repository->expects($this->once())
            ->method('getCanonicalPackages')
            ->will($this->returnValue($packages));

        $this->fs->ensureDirectoryExists($this->workingDir.'/lib/A/B');
        $this->fs->ensureDirectoryExists($this->workingDir.'/src/');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/composer');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/a/a/classmap');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/a/a/src');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/a/a/lib/A/B');
        $this->fs->ensureDirectoryExists($this->vendorDir.'/b/b/src');

        // Define the classes A\B\C and Foo\Bar in the main package.
        file_put_contents($this->workingDir.'/lib/A/B/C.php', '<?php namespace A\\B; class C {}');
        file_put_contents($this->workingDir.'/src/classes.php', '<?php namespace Foo; class Bar {}');

        // Define the same two classes in the package a/a.
        file_put_contents($this->vendorDir.'/a/a/lib/A/B/C.php', '<?php namespace A\\B; class C {}');
        file_put_contents($this->vendorDir.'/a/a/classmap/classes.php', '<?php namespace Foo; class Bar {}');

        $expectedNamespace = <<<EOF
<?php

// autoload_namespaces.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
    'B\\\\Sub\\\\Name' => array(\$vendorDir . '/b/b/src'),
    'A\\\\B' => array(\$baseDir . '/lib', \$vendorDir . '/a/a/lib'),
    'A' => array(\$vendorDir . '/a/a/src'),
);

EOF;

        // autoload_psr4.php is expected to be empty in this example.
        $expectedPsr4 = <<<EOF
<?php

// autoload_psr4.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
);

EOF;

        $expectedClassmap = <<<EOF
<?php

// autoload_classmap.php @generated by Composer

\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array(
    'A\\\\B\\\\C' => \$baseDir . '/lib/A/B/C.php',
    'Foo\\\\Bar' => \$baseDir . '/src/classes.php',
);

EOF;

        $this->generator->dump($this->config, $this->repository, $mainPackage, $this->im, 'composer', true, '_9');
        $this->assertEquals($expectedNamespace, file_get_contents($this->vendorDir.'/composer/autoload_namespaces.php'));
        $this->assertEquals($expectedPsr4, file_get_contents($this->vendorDir.'/composer/autoload_psr4.php'));
        $this->assertEquals($expectedClassmap, file_get_contents($this->vendorDir.'/composer/autoload_classmap.php'));
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (NULL)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)))
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_ASSIGN
            (AST_VAR)
            (AST_NEW
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_ASSIGN
            (AST_VAR)
            (AST_NEW
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_CONST)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (NULL)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)))
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_ASSIGN
            (AST_VAR)
            (AST_NEW
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_ASSIGN
            (AST_VAR)
            (AST_NEW
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_CONST)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))))