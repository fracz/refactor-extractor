	public function __construct()
	{
		if (extension_loaded("dom") === false) {
			throw new Exception('DOM extension is required. http://php.net/manual/en/dom.installation.php');
		}
		$this->config = new WhiteHTMLFilterConfig();

		if (!$this->dom) {
			$this->dom = new DOMDocument();
		}
		$this->dom->preserveWhiteSpace = true;
		$this->dom->formatOutput = false;
		$this->dom->encoding = 'UTF-8';
		$this->tempContent = 'a7c598c8-fcb7-4bde-af9c-91c6515fbf7a-lincanbin-' . md5(mt_rand());
		//Disable libxml errors
		libxml_use_internal_errors(true);
	}

	/**
	 * Get current tag whitelist
	 * @return array
	 */
||||||||	public function __construct()
	{
		if (extension_loaded("dom") === false) {
			throw new Exception('DOM extension is required. http://php.net/manual/en/dom.installation.php');
		}
		$this->config = new WhiteHTMLFilterConfig();

		if (!$this->dom) {
			$this->dom = new DOMDocument('1.0', 'UTF-8');
		}
		$this->dom->preserveWhiteSpace = true;
		$this->dom->formatOutput = false;
		$this->TEMP_CONTENT = 'a7c598c8-fcb7-4bde-af9c-91c6515fbf7a-lincanbin-' . md5(mt_rand());
		$this->PARENT_TAG_NAME = substr('tag' . md5(mt_rand()), 0, 8);
		//Disable libxml errors
		libxml_use_internal_errors(true);
	}

	/**
	 * Get current tag whitelist
	 * @return array
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (AST_CALL)))))
    (AST_CALL
        (
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (AST_CALL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_CALL))))
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_CONST))))