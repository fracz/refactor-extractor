    public function __call($name, $arguments) {

        if(isset($this->apis[$name]) && is_callable($this->apis[$name])) {
            return call_user_func_array($this->apis[$name], $arguments);
        }

        return null;
    }
}


class Helper extends AppAware { }


class Session extends Helper {

    protected $initialized = false;
    public $name;

    public function init($sessionname=null){

        if ($this->initialized) return;

        if (!strlen(session_id())) {
            $this->name = $sessionname ? $sessionname : $this->app["session.name"];

            session_name($this->name);
            session_start();
        } else {
            $this->name = session_name();
        }

        $this->initialized = true;
    }

    public function write($key, $value){
        $_SESSION[$key] = $value;
    }

    public function read($key, $default=null){
        return fetch_from_array($_SESSION, $key, $default);
    }

    public function delete($key){
        unset($_SESSION[$key]);
    }

    public function destroy(){
        session_destroy();
    }
}

class Cache extends Helper {

    public $prefix = null;
    protected $cachePath = null;


    public function initialize(){
        $this->cachePath = rtrim(sys_get_temp_dir(),"/\\")."/";
        $this->prefix    = $this->app['app.name'];
    }

    public function setCachePath($path){
        if ($path) {
            $this->cachePath = rtrim($this->app->path($path), "/\\")."/";
        }
    }

    public function getCachePath(){

        return $this->cachePath;
    }

    public function write($key, $value, $duration = -1){

        $expire = ($duration==-1) ? -1:(time() + (is_string($duration) ? strtotime($duration):$duration));

        $safe_var = [
            'expire' => $expire,
            'value' => serialize($value)
        ];

        file_put_contents($this->cachePath.md5($this->prefix.'-'.$key).".cache" , serialize($safe_var));
    }

    public function read($key, $default=null){
        $var = @file_get_contents($this->cachePath.md5($this->prefix.'-'.$key).".cache");

        if ($var==='') {
            return $default;
        } else {

            $time = time();
            $var  = unserialize($var);

            if (($var['expire'] < $time) && $var['expire']!=-1) {
                $this->delete($key);
                return is_callable($default) ? call_user_func($default):$default;
            }

            return unserialize($var['value']);
        }
    }

    public function delete($key){

        $file = $this->cachePath.md5($this->prefix.'-'.$key).".cache";

        if (file_exists($file)) {
            @unlink($file);
        }

    }

    public function clear(){

        $iterator = new \RecursiveDirectoryIterator($this->cachePath);

        foreach($iterator as $file) {
            if ($file->isFile() && substr($file, -6)==".cache") {
                @unlink($this->cachePath.$file->getFilename());
            }
        }
    }
}

// helper functions

function fetch_from_array(&$array, $index=null, $default = null) {

    if (is_null($index)) {

        return $array;

    } elseif (isset($array[$index])) {

        return $array[$index];

    } elseif (strpos($index, '/')) {

        $keys = explode('/', $index);

        switch(count($keys)){

            case 1:
                if (isset($array[$keys[0]])){
                    return $array[$keys[0]];
                }
                break;

            case 2:
                if (isset($array[$keys[0]][$keys[1]])){
                    return $array[$keys[0]][$keys[1]];
                }
                break;

            case 3:
                if (isset($array[$keys[0]][$keys[1]][$keys[2]])){
                    return $array[$keys[0]][$keys[1]][$keys[2]];
                }
                break;

            case 4:
                if (isset($array[$keys[0]][$keys[1]][$keys[2]][$keys[3]])){
                    return $array[$keys[0]][$keys[1]][$keys[2]][$keys[3]];
                }
                break;
        }
    }

    return $default;
}||||||||    public function __call($name, $arguments) {

        if(isset($this->apis[$name]) && is_callable($this->apis[$name])) {
            return call_user_func_array($this->apis[$name], $arguments);
        }

        if(isset($this->apis['__call']) && is_callable($this->apis['__call'])) {
            return call_user_func_array($this->apis['__call'], $arguments);
        }

        return null;
    }
}


class Helper extends AppAware { }


class Session extends Helper {

    protected $initialized = false;
    public $name;

    public function init($sessionname=null){

        if ($this->initialized) return;

        if (!strlen(session_id())) {
            $this->name = $sessionname ? $sessionname : $this->app["session.name"];

            session_name($this->name);
            session_start();
        } else {
            $this->name = session_name();
        }

        $this->initialized = true;
    }

    public function write($key, $value){
        $_SESSION[$key] = $value;
    }

    public function read($key, $default=null){
        return fetch_from_array($_SESSION, $key, $default);
    }

    public function delete($key){
        unset($_SESSION[$key]);
    }

    public function destroy(){
        session_destroy();
    }
}

class Cache extends Helper {

    public $prefix = null;
    protected $cachePath = null;


    public function initialize(){
        $this->cachePath = rtrim(sys_get_temp_dir(),"/\\")."/";
        $this->prefix    = $this->app['app.name'];
    }

    public function setCachePath($path){
        if ($path) {
            $this->cachePath = rtrim($this->app->path($path), "/\\")."/";
        }
    }

    public function getCachePath(){

        return $this->cachePath;
    }

    public function write($key, $value, $duration = -1){

        $expire = ($duration==-1) ? -1:(time() + (is_string($duration) ? strtotime($duration):$duration));

        $safe_var = [
            'expire' => $expire,
            'value' => serialize($value)
        ];

        file_put_contents($this->cachePath.md5($this->prefix.'-'.$key).".cache" , serialize($safe_var));
    }

    public function read($key, $default=null){
        $var = @file_get_contents($this->cachePath.md5($this->prefix.'-'.$key).".cache");

        if ($var==='') {
            return $default;
        } else {

            $time = time();
            $var  = unserialize($var);

            if (($var['expire'] < $time) && $var['expire']!=-1) {
                $this->delete($key);
                return is_callable($default) ? call_user_func($default):$default;
            }

            return unserialize($var['value']);
        }
    }

    public function delete($key){

        $file = $this->cachePath.md5($this->prefix.'-'.$key).".cache";

        if (file_exists($file)) {
            @unlink($file);
        }

    }

    public function clear(){

        $iterator = new \RecursiveDirectoryIterator($this->cachePath);

        foreach($iterator as $file) {
            if ($file->isFile() && substr($file, -6)==".cache") {
                @unlink($this->cachePath.$file->getFilename());
            }
        }
    }
}

// helper functions

function fetch_from_array(&$array, $index=null, $default = null) {

    if (is_null($index)) {

        return $array;

    } elseif (isset($array[$index])) {

        return $array[$index];

    } elseif (strpos($index, '/')) {

        $keys = explode('/', $index);

        switch(count($keys)){

            case 1:
                if (isset($array[$keys[0]])){
                    return $array[$keys[0]];
                }
                break;

            case 2:
                if (isset($array[$keys[0]][$keys[1]])){
                    return $array[$keys[0]][$keys[1]];
                }
                break;

            case 3:
                if (isset($array[$keys[0]][$keys[1]][$keys[2]])){
                    return $array[$keys[0]][$keys[1]][$keys[2]];
                }
                break;

            case 4:
                if (isset($array[$keys[0]][$keys[1]][$keys[2]][$keys[3]])){
                    return $array[$keys[0]][$keys[1]][$keys[2]][$keys[3]];
                }
                break;
        }
    }

    return $default;
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CONST)))