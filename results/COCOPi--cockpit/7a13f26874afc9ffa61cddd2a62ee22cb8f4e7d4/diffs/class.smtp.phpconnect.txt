    public function connect($host, $port = null, $timeout = 30, $options = array())
    {
        static $streamok;
        //This is enabled by default since 5.0.0 but some providers disable it
        //Check this once and cache the result
        if (is_null($streamok)) {
            $streamok = function_exists('stream_socket_client');
        }
        // Clear errors to avoid confusion
        $this->error = array();
        // Make sure we are __not__ connected
        if ($this->connected()) {
            // Already connected, generate error
            $this->error = array('error' => 'Already connected to a server');
            return false;
        }
        if (empty($port)) {
            $port = self::DEFAULT_SMTP_PORT;
        }
        // Connect to the SMTP server
        $this->edebug(
            "Connection: opening to $host:$port, t=$timeout, opt=".var_export($options, true),
            self::DEBUG_CONNECTION
        );
        $errno = 0;
        $errstr = '';
        if ($streamok) {
            $socket_context = stream_context_create($options);
            //Suppress errors; connection failures are handled at a higher level
            $this->smtp_conn = @stream_socket_client(
                $host . ":" . $port,
                $errno,
                $errstr,
                $timeout,
                STREAM_CLIENT_CONNECT,
                $socket_context
            );
        } else {
            //Fall back to fsockopen which should work in more places, but is missing some features
            $this->edebug(
                "Connection: stream_socket_client not available, falling back to fsockopen",
                self::DEBUG_CONNECTION
            );
            $this->smtp_conn = fsockopen(
                $host,
                $port,
                $errno,
                $errstr,
                $timeout
            );
        }
        // Verify we connected properly
        if (!is_resource($this->smtp_conn)) {
            $this->error = array(
                'error' => 'Failed to connect to server',
                'errno' => $errno,
                'errstr' => $errstr
            );
            $this->edebug(
                'SMTP ERROR: ' . $this->error['error']
                . ": $errstr ($errno)",
                self::DEBUG_CLIENT
            );
            return false;
        }
        $this->edebug('Connection: opened', self::DEBUG_CONNECTION);
        // SMTP server can take longer to respond, give longer timeout for first read
        // Windows does not have support for this timeout function
        if (substr(PHP_OS, 0, 3) != 'WIN') {
            $max = ini_get('max_execution_time');
            if ($max != 0 && $timeout > $max) { // Don't bother if unlimited
                @set_time_limit($timeout);
            }
            stream_set_timeout($this->smtp_conn, $timeout, 0);
        }
        // Get any announcement
        $announce = $this->get_lines();
        $this->edebug('SERVER -> CLIENT: ' . $announce, self::DEBUG_SERVER);
        return true;
    }

    /**
     * Initiate a TLS (encrypted) session.
     * @access public
     * @return boolean
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_CONST)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CONST)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))))))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_RETURN
        (AST_CONST)))||||||||