    function force_regrading() {
        $this->needsupdate = true;

        $result = parent::update();

        if ($category = $this->get_category()) {
            $category->force_regrading(); // we can ignore the result

        } else {
            $this->force_recalculation(); // recalculate all formulas - we do not know if any of them depends on this item
        }


        return $result;
    }

    /**
     * Force recalculation of all calculated grades in course.
     */
||||||||    function force_regrading() {
        $this->needsupdate = true;

        $result = parent::update();

        if ($category = $this->get_category()) {
            $category->force_regrading(); // we can ignore the result

        }

        return $result;
    }

    /**
     * Disassociates this item from its category parent(s). The object is then updated in DB.
     * @return boolean Success or Failure
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))