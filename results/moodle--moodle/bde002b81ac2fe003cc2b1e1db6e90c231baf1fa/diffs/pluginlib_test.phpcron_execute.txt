    protected function cron_execute() {
        throw new testable_available_update_checker_cron_executed('Cron executed!');
    }
}


/**
 * Exception used to detect {@link available_update_checker::cron_execute()} calls.
 */
class testable_available_update_checker_cron_executed extends Exception {
}


/**
 * Modified {@link available_update_deployer} suitable for testing purposes.
 */
class testable_available_update_deployer extends available_update_deployer {
}


/**
 * Test cases for {@link available_update_deployer} class.
 *
 * @group core_plugin
 */
class core_available_update_deployer_testcase extends advanced_testcase {

    public function test_magic_setters() {
        $deployer = testable_available_update_deployer::instance();
        $value = new moodle_url('/');
        $deployer->set_returnurl($value);
        $this->assertSame($deployer->get_returnurl(), $value);
    }

    public function test_prepare_authorization() {
        global $CFG;

        $deployer = testable_available_update_deployer::instance();
        list($passfile, $password) = $deployer->prepare_authorization();
        $filename = $CFG->phpunit_dataroot.'/mdeploy/auth/'.$passfile;
        $this->assertFileExists($filename);
        $stored = file($filename, FILE_IGNORE_NEW_LINES);
        $this->assertCount(2, $stored);
        $this->assertGreaterThan(23, strlen($stored[0]));
        $this->assertSame($stored[0], $password);
        $this->assertLessThan(60, time() - (int)$stored[1]);
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_THROW
        (AST_NEW
            (
                (SCALAR)))))||||||||