||||||||    public static function build_config_file() {
        global $CFG;

        $template = '
        <testsuite name="@component@">
            <directory suffix="_test.php">@dir@</directory>
        </testsuite>';
        $data = file_get_contents("$CFG->dirroot/phpunit.xml.dist");

        $suites = '';

        $plugintypes = get_plugin_types();
        ksort($plugintypes);
        foreach ($plugintypes as $type=>$unused) {
            $plugs = get_plugin_list($type);
            ksort($plugs);
            foreach ($plugs as $plug=>$fullplug) {
                if (!file_exists("$fullplug/tests/")) {
                    continue;
                }
                $dir = substr($fullplug, strlen($CFG->dirroot)+1);
                $dir .= '/tests';
                $component = $type.'_'.$plug;

                $suite = str_replace('@component@', $component, $template);
                $suite = str_replace('@dir@', $dir, $suite);

                $suites .= $suite;
            }
        }

        $data = preg_replace('|<!--@plugin_suites_start@-->.*<!--@plugin_suites_end@-->|s', $suites, $data, 1);

        $result = false;
        if (is_writable($CFG->dirroot)) {
            if ($result = file_put_contents("$CFG->dirroot/phpunit.xml", $data)) {
                phpunit_boostrap_fix_file_permissions("$CFG->dirroot/phpunit.xml");
            }
        }

        // relink - it seems that xml:base does not work in phpunit xml files, remove this nasty hack if you find a way to set xml base for relative refs
        $data = str_replace('lib/phpunit/', $CFG->dirroot.DIRECTORY_SEPARATOR.'lib'.DIRECTORY_SEPARATOR.'phpunit'.DIRECTORY_SEPARATOR, $data);
        $data = preg_replace('|<directory suffix="_test.php">([^<]+)</directory>|',
            '<directory suffix="_test.php">'.$CFG->dirroot.(DIRECTORY_SEPARATOR === '\\' ? '\\\\' : DIRECTORY_SEPARATOR).'$1</directory>',
            $data);
        file_put_contents("$CFG->dataroot/phpunit/webrunner.xml", $data);
        phpunit_boostrap_fix_file_permissions("$CFG->dataroot/phpunit/webrunner.xml");

        return (bool)$result;
    }

    /**
     * Builds phpunit.xml files for all components using defaults from /phpunit.xml.dist
     *
     * @static
     * @return void, stops if can not write files
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ENCAPS_LIST
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR)))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))))
                                    (SCALAR)))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_ENCAPS_LIST
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR))))
                        (
                            (AST_CALL
                                (
                                    (AST_ENCAPS_LIST
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))
                                (SCALAR))
                            (AST_CONST))
                        (SCALAR))
                    (AST_CONST))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (SCALAR)
                            (AST_CONST)))
                    (SCALAR))
                (AST_VAR))))
    (AST_CALL
        (
            (AST_ENCAPS_LIST
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_VAR)))
    (AST_CALL
        (
            (AST_ENCAPS_LIST
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_RETURN
        (AST_CAST
            (AST_VAR))))