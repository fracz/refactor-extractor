||||||||    function createupdate_user($userinfo) {
        global $CFG, $MNET_REMOTE_CLIENT, $DB;
        if (!empty($MNET_REMOTE_CLIENT->id)) {
            $userinfo->mnethostid = $MNET_REMOTE_CLIENT->id;
        } else {
            if (empty($userinfo->mnethostid)) {
                // No information available about where user is from - unable to proceed.
                return false;
            }
        }

        // get the local record for the remote user
        $userspec = array('username' => $userinfo->username, 'mnethostid' => $userinfo->mnethostid);
        $localuser = $DB->get_record('user', $userspec);

        if (empty($localuser->id)) {
            // No pre-existing local record of this user
            if (empty($MNET_REMOTE_CLIENT->id)) {
                // Local call - could be user trying to log-in cold
                // (prior to their idp requesting any enrolment or account creation)
                if (empty($this->config->auto_add_remote_users)) {
                    // Users aren't allowed to log in cold.
                    print_error('nolocaluser', 'mnet');
                }
            }
            $userinfo->id = $DB->insert_record('user', $userinfo);
            if (!$userinfo->id) {
                print_error('databaseerror', 'mnet');
            }
            if (! $localuser = $DB->get_record('user', $userspec)) {
                print_error('nolocaluser', 'mnet');
            }
            $localuser->newrecord = true;
        } else {
            // update the local user record with remote user data
            foreach ((array) $localuser as $key => $val) {
                if ($key == 'id') {
                    continue;
                }
                if (isset($userinfo->{$key})) {
                    $localuser->{$key} = $userinfo->{$key};
                }
            }
            $localuser->newrecord = false;
        }
        if (!empty($userinfo->imagehash)) {
            $localuser->picture = $this->createupdate_user_image($localuser, $userinfo->imagehash);
        }

        $bool = $DB->update_record('user', $localuser);
        if (!$bool) {
            error("updating user failed in mnet/auth/confirm_mnet_session ");
        }
        return $localuser;
    }

    /**
     * To delete a host, we must delete all current sessions that users from
     * that host are currently engaged in.
     *
     * @param   string  $sessionidarray   An array of session hashes
     * @return  bool                      True on success
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_EMPTY
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR))))
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR)))))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_VAR)))))
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_FOREACH
                    (AST_CAST
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_ISSET
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))