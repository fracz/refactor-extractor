||||||||    function unenrol_user_remote($minimalistuser, $remotecourseid, $mnet_cp) {
        global $CFG, $MNET;
        require_once $CFG->dirroot . '/mnet/xmlrpc/client.php';
        //Unenrol user from remote course
        $mnetrequest = new mnet_xmlrpc_client();
        $mnetrequest->set_method('enrol/mnet/enrol.php/unenrol_user');
        $mnetrequest->add_param($minimalistuser->username);
        $mnetrequest->add_param($remotecourseid);
        if ($mnetrequest->send($mnet_cp) === true) {
            if($mnetrequest->response) {
                return true;
            }
            // Legacy mnet considers request to unenrol 'nonexistant' user an error
            // Check for this situ by creating usr by enroling in dummy course,
            // Then repeating the unenrol request.
            $mnetrequest = new mnet_xmlrpc_client();
            $mnetrequest->set_method('enrol/mnet/enrol.php/enrol_user');
            $mnetrequest->add_param($minimalistuser);
            $mnetrequest->add_param(0); //dummy remote course id
            // Ignore result, we expect it to fail due to dummy remote course id
            $mnetrequest->send($mnet_cp);

            $mnetrequest = new mnet_xmlrpc_client();
            $mnetrequest->set_method('enrol/mnet/enrol.php/unenrol_user');
            $mnetrequest->add_param($minimalistuser->username);
            $mnetrequest->add_param($remotecourseid);
            if ($mnetrequest->send($mnet_cp) === true) {
                return $mnetrequest->response;
            }
        }
    }

    /**
    * Enrol user into course on mnet peer
    * @param minimalistuser object user object with only basic properties
    * @param remotecourseid integer courseid on the remote peer
    * @param mnetcp object basic peer info
    * @return bool true on successful enrolment
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_PROP
                                    (AST_VAR))))))))))