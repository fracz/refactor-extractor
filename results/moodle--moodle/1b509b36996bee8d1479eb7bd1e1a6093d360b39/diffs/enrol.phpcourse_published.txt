||||||||    function course_published ($courseid) {
        global $CFG, $DB;
        //If the course in question is itself a shell course, it can not be published
        $course = $DB->get_record('course', array('id' => $courseid));
        if (!empty($course->mnetpeer) && !empty($course->remotecourseid)) {
            return false;
        }
        //First check to see if all courses are allowed to be shared:
        if ($CFG->enrol_mnet_allow_allcourses) {
            return true;
        }

        //Check to see if the specified course is named in the list of shared courses
        if (!empty($CFG->enrol_mnet_allowed_courses)) {
            $sharedcourses = explode(',', $CFG->enrol_mnet_allowed_courses);
            if (in_array($courseid,$sharedcourses)) {
                return true;
            }
        }

        //Check to see if any of the course's parent categories are shared
        if (!empty($CFG->enrol_mnet_allowed_categories)) {
            $categorysql =
                    'SELECT ca.id, ca.path ' .
                    'FROM {course} co ' .
                    ' INNER JOIN {course_categories} ca ON ca.id=co.category '.
                    'WHERE co.id = ?';
            $params = array($courseid);
            $category = $DB->get_record_sql($categorysql,$params);
            if (empty($category)) {
                return false;
            }

            $sharedcategories = explode(',',$CFG->enrol_mnet_allowed_categories);
            $categories = explode('/',substr($category->path,1));
            foreach ($categories as $category) {
                if (in_array($category, $sharedcategories)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
    * Map roles that a user has assigned to them relevant to course context (and parent contexts)
    * to a role we can allocate on the course's content provider
    * @param userid integer the local user's identifier
    * @param relevantroles array list of local roleids that we may want to translate to remote roleid
    * @param relevantcontexts array list of contexts where relevant roles might be assigned
    * @param peerrolemappings array keyed on local roleid, value is remote role id.
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))
                            (SCALAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (
                                    (AST_RETURN
                                        (AST_CONST))))))))))
    (AST_RETURN
        (AST_CONST)))