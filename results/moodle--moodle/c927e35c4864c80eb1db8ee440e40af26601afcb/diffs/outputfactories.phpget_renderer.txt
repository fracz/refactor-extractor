    public function get_renderer(moodle_page $page, $component, $subtype=null) {
        $classname = $this->standard_renderer_classname($component, $subtype);
        if (!class_exists($classname)) {
            // standard renderer must always exist
            throw new coding_exception('Request for an unknown renderer class ' . $classname);
        }

        foreach ($this->prefixes as $prefix) {
            // theme lib.php and renderers.php files are loaded automatically
            if (class_exists($prefix . '_' . $classname)) {
                $classname = $prefix . '_' . $classname;
                return new $classname($page);
            }
        }
        // use standard renderes if themes do not contain overridden renderer
        return new $classname($page);
    }
}||||||||    public function get_renderer(moodle_page $page, $component, $subtype = null, $target = null) {
        $classname = $this->standard_renderer_classname($component, $subtype);
        if (!class_exists($classname)) {
            // standard renderer must always exist
            throw new coding_exception('Request for an unknown renderer class ' . $classname);
        }

        list($target, $suffix) = $this->get_target_suffix($target);

        // theme lib.php and renderers.php files are loaded automatically
        // when loading the theme configs

        // first try the renderers with correct suffix
        foreach ($this->prefixes as $prefix) {
            if (class_exists($prefix . '_' . $classname . $suffix)) {
                $classname = $prefix . '_' . $classname . $suffix;
                return new $classname($page, $target);
            }
        }
        if (class_exists($classname . $suffix)) {
            // use the specialised renderer for given target, default renderer might also decide
            // to implement support for more targets
            $classname = $classname . $suffix;
            return new $classname($page, $target);
        }

        // then try general renderer
        foreach ($this->prefixes as $prefix) {
            if (class_exists($prefix . '_' . $classname)) {
                $classname = $prefix . '_' . $classname;
                return new $classname($page, $target);
            }
        }

        return new $classname($page, $target);
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_NEW
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_NEW
            (AST_VAR)
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_NEW
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (AST_NEW
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_NEW
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_NEW
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))