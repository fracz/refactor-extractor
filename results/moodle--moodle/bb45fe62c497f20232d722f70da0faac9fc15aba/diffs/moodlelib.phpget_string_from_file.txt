||||||||    protected function get_string_from_file($identifier, $langfile, $a) {
        $string = &$this->load_lang_file($langfile);
        if (!isset($string[$identifier])) {
            return false;
        }
        $result = $string[$identifier];
        // Skip the eval if we can - slight performance win. Pity there are 3
        // different problem characters, so we have to use preg_match,
        // rather than a faster str... function.
        if (!preg_match('/[%$\\\\]/', $result)) {
            return $result;
        }
        // Moodle used to use $code = '$result = sprintf("' . $result . ')";' for no good reason,
        // (it had done that since revision 1.1 of moodllib.php if you check CVS). However, this
        // meant you had to double up '%' chars in $a first. We now skip that. However, lang strings
        // still contain %% as a result, so we need to fix those.
        $result = str_replace('%%', '%', $result);
        $code = '$result = "' . $result . '";';
        if (eval($code) === FALSE) { // Means parse error.
            debugging('Parse error while trying to load string "'.$identifier.'" from file "' . $langfile . '".', DEBUG_DEVELOPER);
        }
        return $result;
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_CONST))))))
    (AST_RETURN
        (AST_VAR)))