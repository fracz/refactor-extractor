||||||||    public function run() {
        include "Zend/Loader.php";
        Zend_Loader::registerAutoload();

        Zend_XmlRpc_Server_Fault::attachFaultException('moodle_exception');

        // retrieve the token from the url
        // if the token doesn't exist, set a class containing only get_token()
        $token = optional_param('token',null,PARAM_ALPHANUM);
        if (empty($token)) {
            $server = new Zend_XmlRpc_Server();
            $server->setClass("ws_authentication", "authentication");
            echo $server->handle();
        } else { // if token exist, do the authentication here
            /// TODO: following function will need to be modified
            $user = webservice_lib::mock_check_token($token);
            if (empty($user)) {
                throw new moodle_exception('wrongidentification');
            } else {
                /// TODO: probably change this
                global $USER;
                $USER = $user;
            }

            //retrieve the api name
            $classpath = optional_param(classpath,null,PARAM_ALPHA);
            require_once(dirname(__FILE__) . '/../../'.$classpath.'/external.php');

            /// run the server
            $server = new Zend_XmlRpc_Server();
            $server->setClass($classpath."_external", $classpath);
            echo $server->handle();
        }
    }

}


?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_GLOBAL
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_CONST)
                            (AST_CONST))))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_MAGIC_CONST)))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)))))))