    function create(){
            flush();
            $this->lastcall->pt = 0;
            $this->lastcall->time = microtime(true);
            $htmlcode = <<<EOT
            <script type="text/javascript">
            Number.prototype.fixed=function(n){
                with(Math)
                    return round(Number(this)*pow(10,n))/pow(10,n);
            }
            function up_{$this->html_id} (id, width, pt, msg, es){
                percent = pt*100;
                document.getElementById("status_"+id).innerHTML = msg;
                document.getElementById("pt_"+id).innerHTML =
                    percent.fixed(2) + '%';
                if(percent == 100) {
                    document.getElementById("progress_"+id).style.background
                        = "{$this->clr->done}";
                    document.getElementById("time_"+id).style.display
                            = "none";
                } else {
                    document.getElementById("progress_"+id).style.background
                        = "{$this->clr->process}";
                    if (es == Infinity){
                        document.getElementById("time_"+id).innerHTML =
                            "Initializing...";
                    }else {
                        document.getElementById("time_"+id).innerHTML =
                            es.fixed(2)+" sec";
                        document.getElementById("time_"+id).style.display
                            = "block";
                    }
                }
                document.getElementById("progress_"+id).style.width
                    = width + "px";

            }

            </script>
            <div style="text-align:center;width:{$this->width}px;clear:both;padding:0;margin:0 auto;">
                <h2 id="status_{$this->html_id}" style="text-align: center;margin:0 auto"></h2>
                <p id="time_{$this->html_id}"></p>
                <div id="bar_{$this->html_id}" style="border-style:solid;border-width:1px;width:500px;height:50px;">
                    <div id="progress_{$this->html_id}"
                    style="text-align:center;background:{$this->clr->process};width:4px;border:1px
                    solid gray;height:38px; padding-top:10px;">&nbsp;<span id="pt_{$this->html_id}"></span>
                    </div>
                </div>
            </div>
EOT;
            echo $htmlcode;
            flush();
    }
    /**
     * Update the progress bar
     *
     * @param int $percent from 1-100
     * @param string $msg
     * @param mixed $es
     * @return void Echo's output
     */
||||||||    function create(){
            flush();
            $this->lastcall->pt = 0;
            $this->lastcall->time = microtime(true);
            if (CLI_SCRIPT) {
                return; // temporary solution for cli scripts
            }
            $htmlcode = <<<EOT
            <script type="text/javascript">
            Number.prototype.fixed=function(n){
                with(Math)
                    return round(Number(this)*pow(10,n))/pow(10,n);
            }
            function up_{$this->html_id} (id, width, pt, msg, es){
                percent = pt*100;
                document.getElementById("status_"+id).innerHTML = msg;
                document.getElementById("pt_"+id).innerHTML =
                    percent.fixed(2) + '%';
                if(percent == 100) {
                    document.getElementById("progress_"+id).style.background
                        = "{$this->clr->done}";
                    document.getElementById("time_"+id).style.display
                            = "none";
                } else {
                    document.getElementById("progress_"+id).style.background
                        = "{$this->clr->process}";
                    if (es == Infinity){
                        document.getElementById("time_"+id).innerHTML =
                            "Initializing...";
                    }else {
                        document.getElementById("time_"+id).innerHTML =
                            es.fixed(2)+" sec";
                        document.getElementById("time_"+id).style.display
                            = "block";
                    }
                }
                document.getElementById("progress_"+id).style.width
                    = width + "px";

            }

            </script>
            <div style="text-align:center;width:{$this->width}px;clear:both;padding:0;margin:0 auto;">
                <h2 id="status_{$this->html_id}" style="text-align: center;margin:0 auto"></h2>
                <p id="time_{$this->html_id}"></p>
                <div id="bar_{$this->html_id}" style="border-style:solid;border-width:1px;width:500px;height:50px;">
                    <div id="progress_{$this->html_id}"
                    style="text-align:center;background:{$this->clr->process};width:4px;border:1px
                    solid gray;height:38px; padding-top:10px;">&nbsp;<span id="pt_{$this->html_id}"></span>
                    </div>
                </div>
            </div>
EOT;
            echo $htmlcode;
            flush();
    }
    /**
     * Update the progress bar
     *
     * @param int $percent from 1-100
     * @param string $msg
     * @param mixed $es
     * @return void Echo's output
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL)
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ECHO
        (AST_VAR))
    (AST_CALL))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL)
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CALL
            (
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CONST)
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ECHO
        (AST_VAR))
    (AST_CALL))