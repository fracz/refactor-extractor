||||||||    public function set_actual_name($name) {
        $this->name = $name;
    }
}

/**
 * A generic CSS style class to use when a more specific class does not exist.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_generic extends css_style {

    /**
     * Cleans incoming values for typical things that can be optimised.
     *
     * @param mixed $value Cleans the provided value optimising it if possible
     * @return string
     */
    protected function clean_value($value) {
        if (trim($value) == '0px') {
            $value = 0;
        } else if (preg_match('/^#([a-fA-F0-9]{3,6})/', $value, $matches)) {
            $value = '#'.strtoupper($matches[1]);
        }
        return $value;
    }
}

/**
 * A colour CSS style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_color extends css_style {

    /**
     * Creates a new colour style
     *
     * @param mixed $value Initialises a new colour style
     * @return css_style_color
     */
    public static function init($value) {
        return new css_style_color('color', $value);
    }

    /**
     * Cleans the colour unifing it to a 6 char hash colour if possible
     * Doing this allows us to associate identical colours being specified in
     * different ways. e.g. Red, red, #F00, and #F00000
     *
     * @param mixed $value Cleans the provided value optimising it if possible
     * @return string
     */
    protected function clean_value($value) {
        $value = trim($value);
        if (css_is_colour($value)) {
            if (preg_match('/#([a-fA-F0-9]{6})/', $value, $matches)) {
                $value = '#'.strtoupper($matches[1]);
            } else if (preg_match('/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/', $value, $matches)) {
                $value = $matches[1] . $matches[1] . $matches[2] . $matches[2] . $matches[3] . $matches[3];
                $value = '#'.strtoupper($value);
            } else if (array_key_exists(strtolower($value), css_optimiser::$htmlcolours)) {
                $value = css_optimiser::$htmlcolours[strtolower($value)];
            }
        }
        return $value;
    }

    /**
     * Returns the colour style for use within CSS.
     * Will return an optimised hash colour.
     *
     * e.g #123456
     *     #123 instead of #112233
     *     #F00 instead of red
     *
     * @param string $overridevalue If provided then this value will be used instead
     *     of the styles current value.
     * @return string
     */
    public function out($overridevalue = null) {
        if ($overridevalue === null) {
            $overridevalue = $this->value;
        }
        return parent::out(self::shrink_value($overridevalue));
    }

    /**
     * Shrinks the colour value is possible.
     *
     * @param string $value Shrinks the current value to an optimial form if possible
     * @return string
     */
    public static function shrink_value($value) {
        if (preg_match('/#([a-fA-F0-9])\1([a-fA-F0-9])\2([a-fA-F0-9])\3/', $value, $matches)) {
            return '#'.$matches[1].$matches[2].$matches[3];
        }
        return $value;
    }

    /**
     * Returns true if the value is a valid colour.
     *
     * @return bool
     */
    public function is_valid() {
        return css_is_colour($this->value);
    }
}

/**
 * A width style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_width extends css_style {

    /**
     * Checks if the width is valid
     * @return bool
     */
    public function is_valid() {
        return css_is_width($this->value);
    }

    /**
     * Cleans the provided value
     *
     * @param mixed $value Cleans the provided value optimising it if possible
     * @return string
     */
    protected function clean_value($value) {
        if (!css_is_width($value)) {
            // Note we don't actually change the value to something valid. That
            // would be bad for futureproofing.
            $this->set_error('Invalid width specified for '.$this->name);
        } else if (preg_match('#^0\D+$#', $value)) {
            $value = 0;
        }
        return trim($value);
    }

    /**
     * Initialises a new width style
     *
     * @param mixed $value The value this style has
     * @return css_style_width
     */
    public static function init($value) {
        return new css_style_width('width', $value);
    }
}

/**
 * A margin style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_margin extends css_style_width implements core_css_consolidatable_style {

    /**
     * Initialises a margin style.
     *
     * In this case we split the margin into several other margin styles so that
     * we can properly condense overrides and then reconsolidate them later into
     * an optimal form.
     *
     * @param string $value The value the style has
     * @return array An array of margin values that can later be consolidated
     */
    public static function init($value) {
        $important = '';
        if (strpos($value, '!important') !== false) {
            $important = ' !important';
            $value = str_replace('!important', '', $value);
        }

        $value = preg_replace('#\s+#', ' ', trim($value));
        $bits = explode(' ', $value, 4);

        $top = $right = $bottom = $left = null;
        if (count($bits) > 0) {
            $top = $right = $bottom = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $right = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $bottom = array_shift($bits);
        }
        if (count($bits) > 0) {
            $left = array_shift($bits);
        }
        return array(
            new css_style_margintop('margin-top', $top.$important),
            new css_style_marginright('margin-right', $right.$important),
            new css_style_marginbottom('margin-bottom', $bottom.$important),
            new css_style_marginleft('margin-left', $left.$important)
        );
    }

    /**
     * Consolidates individual margin styles into a single margin style
     *
     * @param css_style[] $styles
     * @return css_style[] An array of consolidated styles
     */
    public static function consolidate(array $styles) {
        if (count($styles) != 4) {
            return $styles;
        }

        $someimportant = false;
        $allimportant = null;
        $notimportantequal = null;
        $firstvalue = null;
        foreach ($styles as $style) {
            if ($style->is_important()) {
                $someimportant = true;
                if ($allimportant === null) {
                    $allimportant = true;
                }
            } else {
                if ($allimportant === true) {
                    $allimportant = false;
                }
                if ($firstvalue == null) {
                    $firstvalue = $style->get_value(false);
                    $notimportantequal = true;
                } else if ($notimportantequal && $firstvalue !== $style->get_value(false)) {
                    $notimportantequal = false;
                }
            }
        }

        if ($someimportant && !$allimportant && !$notimportantequal) {
            return $styles;
        }

        if ($someimportant && !$allimportant && $notimportantequal) {
            $return = array(
                new css_style_margin('margin', $firstvalue)
            );
            foreach ($styles as $style) {
                if ($style->is_important()) {
                    $return[] = $style;
                }
            }
            return $return;
        } else {
            $top = null;
            $right = null;
            $bottom = null;
            $left = null;
            foreach ($styles as $style) {
                switch ($style->get_name()) {
                    case 'margin-top' :
                        $top = $style->get_value(false);
                        break;
                    case 'margin-right' :
                        $right = $style->get_value(false);
                        break;
                    case 'margin-bottom' :
                        $bottom = $style->get_value(false);
                        break;
                    case 'margin-left' :
                        $left = $style->get_value(false);
                        break;
                }
            }
            if ($top == $bottom && $left == $right) {
                if ($top == $left) {
                    $returnstyle = new css_style_margin('margin', $top);
                } else {
                    $returnstyle = new css_style_margin('margin', "{$top} {$left}");
                }
            } else if ($left == $right) {
                $returnstyle = new css_style_margin('margin', "{$top} {$right} {$bottom}");
            } else {
                $returnstyle = new css_style_margin('margin', "{$top} {$right} {$bottom} {$left}");
            }
            if ($allimportant) {
                $returnstyle->set_important();
            }
            return array($returnstyle);
        }
    }
}

/**
 * A margin top style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_margintop extends css_style_margin {

    /**
     * A simple init, just a single style
     *
     * @param string $value The value the style has
     * @return css_style_margintop
     */
    public static function init($value) {
        return new css_style_margintop('margin-top', $value);
    }

    /**
     * This style can be consolidated into a single margin style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'margin';
    }
}

/**
 * A margin right style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_marginright extends css_style_margin {

    /**
     * A simple init, just a single style
     *
     * @param string $value The value the style has
     * @return css_style_margintop
     */
    public static function init($value) {
        return new css_style_marginright('margin-right', $value);
    }

    /**
     * This style can be consolidated into a single margin style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'margin';
    }
}

/**
 * A margin bottom style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_marginbottom extends css_style_margin {

    /**
     * A simple init, just a single style
     *
     * @param string $value The value the style has
     * @return css_style_margintop
     */
    public static function init($value) {
        return new css_style_marginbottom('margin-bottom', $value);
    }

    /**
     * This style can be consolidated into a single margin style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'margin';
    }
}

/**
 * A margin left style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_marginleft extends css_style_margin {

    /**
     * A simple init, just a single style
     *
     * @param string $value The value the style has
     * @return css_style_margintop
     */
    public static function init($value) {
        return new css_style_marginleft('margin-left', $value);
    }

    /**
     * This style can be consolidated into a single margin style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'margin';
    }
}

/**
 * A border style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_border extends css_style implements core_css_consolidatable_style {

    /**
     * Initalises the border style into an array of individual style compontents
     *
     * @param string $value The value the style has
     * @return css_style_bordercolor
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 3);

        $return = array();
        if (count($bits) > 0) {
            $width = array_shift($bits);
            if (!css_style_borderwidth::is_border_width($width)) {
                $width = '0';
            }
            $return[] = css_style_bordertopwidth::init($width);
            $return[] = css_style_borderrightwidth::init($width);
            $return[] = css_style_borderbottomwidth::init($width);
            $return[] = css_style_borderleftwidth::init($width);
        }
        if (count($bits) > 0) {
            $style = array_shift($bits);
            $return[] = css_style_bordertopstyle::init($style);
            $return[] = css_style_borderrightstyle::init($style);
            $return[] = css_style_borderbottomstyle::init($style);
            $return[] = css_style_borderleftstyle::init($style);
        }
        if (count($bits) > 0) {
            $colour = array_shift($bits);
            $return[] = css_style_bordertopcolor::init($colour);
            $return[] = css_style_borderrightcolor::init($colour);
            $return[] = css_style_borderbottomcolor::init($colour);
            $return[] = css_style_borderleftcolor::init($colour);
        }
        return $return;
    }

    /**
     * Consolidates all border styles into a single style
     *
     * @param css_style[] $styles An array of border styles
     * @return css_style[] An optimised array of border styles
     */
    public static function consolidate(array $styles) {

        $borderwidths = array('top' => null, 'right' => null, 'bottom' => null, 'left' => null);
        $borderstyles = array('top' => null, 'right' => null, 'bottom' => null, 'left' => null);
        $bordercolors = array('top' => null, 'right' => null, 'bottom' => null, 'left' => null);

        foreach ($styles as $style) {
            switch ($style->get_name()) {
                case 'border-top-width':
                    $borderwidths['top'] = $style->get_value();
                    break;
                case 'border-right-width':
                    $borderwidths['right'] = $style->get_value();
                    break;
                case 'border-bottom-width':
                    $borderwidths['bottom'] = $style->get_value();
                    break;
                case 'border-left-width':
                    $borderwidths['left'] = $style->get_value();
                    break;

                case 'border-top-style':
                    $borderstyles['top'] = $style->get_value();
                    break;
                case 'border-right-style':
                    $borderstyles['right'] = $style->get_value();
                    break;
                case 'border-bottom-style':
                    $borderstyles['bottom'] = $style->get_value();
                    break;
                case 'border-left-style':
                    $borderstyles['left'] = $style->get_value();
                    break;

                case 'border-top-color':
                    $bordercolors['top'] = css_style_color::shrink_value($style->get_value());
                    break;
                case 'border-right-color':
                    $bordercolors['right'] = css_style_color::shrink_value($style->get_value());
                    break;
                case 'border-bottom-color':
                    $bordercolors['bottom'] = css_style_color::shrink_value($style->get_value());
                    break;
                case 'border-left-color':
                    $bordercolors['left'] = css_style_color::shrink_value($style->get_value());
                    break;
            }
        }

        $uniquewidths = count(array_unique($borderwidths));
        $uniquestyles = count(array_unique($borderstyles));
        $uniquecolors = count(array_unique($bordercolors));

        $nullwidths = in_array(null, $borderwidths, true);
        $nullstyles = in_array(null, $borderstyles, true);
        $nullcolors = in_array(null, $bordercolors, true);

        $allwidthsthesame = ($uniquewidths === 1)?1:0;
        $allstylesthesame = ($uniquestyles === 1)?1:0;
        $allcolorsthesame = ($uniquecolors === 1)?1:0;

        $allwidthsnull = $allwidthsthesame && $nullwidths;
        $allstylesnull = $allstylesthesame && $nullstyles;
        $allcolorsnull = $allcolorsthesame && $nullcolors;

        /* @var css_style[] $return */
        $return = array();
        if ($allwidthsnull && $allstylesnull && $allcolorsnull) {
            // Everything is null still... boo.
            return array(new css_style_border('border', ''));

        } else if ($allwidthsnull && $allstylesnull) {

            self::consolidate_styles_by_direction($return, 'css_style_bordercolor', 'border-color', $bordercolors);
            return $return;

        } else if ($allwidthsnull && $allcolorsnull) {

            self::consolidate_styles_by_direction($return, 'css_style_borderstyle', 'border-style', $borderstyles);
            return $return;

        } else if ($allcolorsnull && $allstylesnull) {

            self::consolidate_styles_by_direction($return, 'css_style_borderwidth', 'border-width', $borderwidths);
            return $return;

        }

        if ($allwidthsthesame + $allstylesthesame + $allcolorsthesame == 3) {

            $return[] = new css_style_border('border', $borderwidths['top'].' '.$borderstyles['top'].' '.$bordercolors['top']);

        } else if ($allwidthsthesame + $allstylesthesame + $allcolorsthesame == 2) {

            if ($allwidthsthesame && $allstylesthesame && !$nullwidths && !$nullstyles) {

                $return[] = new css_style_border('border', $borderwidths['top'].' '.$borderstyles['top']);
                self::consolidate_styles_by_direction($return, 'css_style_bordercolor', 'border-color', $bordercolors);

            } else if ($allwidthsthesame && $allcolorsthesame && !$nullwidths && !$nullcolors) {

                $return[] = new css_style_border('border', $borderwidths['top'].' solid '.$bordercolors['top']);
                self::consolidate_styles_by_direction($return, 'css_style_borderstyle', 'border-style', $borderstyles);

            } else if ($allstylesthesame && $allcolorsthesame && !$nullstyles && !$nullcolors) {

                $return[] = new css_style_border('border', '1px '.$borderstyles['top'].' '.$bordercolors['top']);
                self::consolidate_styles_by_direction($return, 'css_style_borderwidth', 'border-width', $borderwidths);

            } else {
                self::consolidate_styles_by_direction($return, 'css_style_borderwidth', 'border-width', $borderwidths);
                self::consolidate_styles_by_direction($return, 'css_style_borderstyle', 'border-style', $borderstyles);
                self::consolidate_styles_by_direction($return, 'css_style_bordercolor', 'border-color', $bordercolors);
            }

        } else if (!$nullwidths && !$nullcolors && !$nullstyles &&
            max(array_count_values($borderwidths)) == 3 &&
            max(array_count_values($borderstyles)) == 3 &&
            max(array_count_values($bordercolors)) == 3) {

            $widthkeys = array();
            $stylekeys = array();
            $colorkeys = array();

            foreach ($borderwidths as $key => $value) {
                if (!array_key_exists($value, $widthkeys)) {
                    $widthkeys[$value] = array();
                }
                $widthkeys[$value][] = $key;
            }
            usort($widthkeys, 'css_sort_by_count');
            $widthkeys = array_values($widthkeys);

            foreach ($borderstyles as $key => $value) {
                if (!array_key_exists($value, $stylekeys)) {
                    $stylekeys[$value] = array();
                }
                $stylekeys[$value][] = $key;
            }
            usort($stylekeys, 'css_sort_by_count');
            $stylekeys = array_values($stylekeys);

            foreach ($bordercolors as $key => $value) {
                if (!array_key_exists($value, $colorkeys)) {
                    $colorkeys[$value] = array();
                }
                $colorkeys[$value][] = $key;
            }
            usort($colorkeys, 'css_sort_by_count');
            $colorkeys = array_values($colorkeys);

            if ($widthkeys == $stylekeys && $stylekeys == $colorkeys) {
                $key = $widthkeys[0][0];
                self::build_style_string($return, 'css_style_border', 'border',
                    $borderwidths[$key], $borderstyles[$key], $bordercolors[$key]);
                $key = $widthkeys[1][0];
                self::build_style_string($return, 'css_style_border'.$key, 'border-'.$key,
                    $borderwidths[$key], $borderstyles[$key], $bordercolors[$key]);
            } else {
                self::build_style_string($return, 'css_style_bordertop', 'border-top',
                    $borderwidths['top'], $borderstyles['top'], $bordercolors['top']);
                self::build_style_string($return, 'css_style_borderright', 'border-right',
                    $borderwidths['right'], $borderstyles['right'], $bordercolors['right']);
                self::build_style_string($return, 'css_style_borderbottom', 'border-bottom',
                    $borderwidths['bottom'], $borderstyles['bottom'], $bordercolors['bottom']);
                self::build_style_string($return, 'css_style_borderleft', 'border-left',
                    $borderwidths['left'], $borderstyles['left'], $bordercolors['left']);
            }
        } else {
            self::build_style_string($return, 'css_style_bordertop', 'border-top',
                $borderwidths['top'], $borderstyles['top'], $bordercolors['top']);
            self::build_style_string($return, 'css_style_borderright', 'border-right',
                $borderwidths['right'], $borderstyles['right'], $bordercolors['right']);
            self::build_style_string($return, 'css_style_borderbottom', 'border-bottom',
                $borderwidths['bottom'], $borderstyles['bottom'], $bordercolors['bottom']);
            self::build_style_string($return, 'css_style_borderleft', 'border-left',
                $borderwidths['left'], $borderstyles['left'], $bordercolors['left']);
        }
        foreach ($return as $key => $style) {
            if ($style->get_value() == '') {
                unset($return[$key]);
            }
        }
        return $return;
    }

    /**
     * Border styles get consolidated to a single border style.
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }

    /**
     * Consolidates a series of border styles into an optimised array of border
     * styles by looking at the direction of the border and prioritising that
     * during the optimisation.
     *
     * @param array $array An array to add styles into during consolidation. Passed by reference.
     * @param string $class The class type to initalise
     * @param string $style The style to create
     * @param string|array $top The top value
     * @param string $right The right value
     * @param string $bottom The bottom value
     * @param string $left The left value
     * @return bool
     */
    public static function consolidate_styles_by_direction(&$array, $class, $style,
                                                           $top, $right = null, $bottom = null, $left = null) {
        if (is_array($top)) {
            $right = $top['right'];
            $bottom = $top['bottom'];
            $left = $top['left'];
            $top = $top['top'];
        }

        if ($top == $bottom && $left == $right && $top == $left) {
            if (is_null($top)) {
                $array[] = new $class($style, '');
            } else {
                $array[] =  new $class($style, $top);
            }
        } else if ($top == null || $right == null || $bottom == null || $left == null) {
            if ($top !== null) {
                $array[] = new $class(str_replace('border-', 'border-top-', $style), $top);
            }
            if ($right !== null) {
                $array[] = new $class(str_replace('border-', 'border-right-', $style), $right);
            }
            if ($bottom !== null) {
                $array[] = new $class(str_replace('border-', 'border-bottom-', $style), $bottom);
            }
            if ($left !== null) {
                $array[] = new $class(str_replace('border-', 'border-left-', $style), $left);
            }
        } else if ($top == $bottom && $left == $right) {
            $array[] = new $class($style, $top.' '.$right);
        } else if ($left == $right) {
            $array[] = new $class($style, $top.' '.$right.' '.$bottom);
        } else {
            $array[] = new $class($style, $top.' '.$right.' '.$bottom.' '.$left);
        }
        return true;
    }

    /**
     * Builds a border style for a set of width, style, and colour values
     *
     * @param array $array An array into which the generated style is added
     * @param string $class The class type to initialise
     * @param string $cssstyle The style to use
     * @param string $width The width of the border
     * @param string $style The style of the border
     * @param string $color The colour of the border
     * @return bool
     */
    public static function build_style_string(&$array, $class, $cssstyle, $width = null, $style = null, $color = null) {
        if (!is_null($width) && !is_null($style) && !is_null($color)) {
            $array[] = new $class($cssstyle, $width.' '.$style.' '.$color);
        } else if (!is_null($width) && !is_null($style) && is_null($color)) {
            $array[] = new $class($cssstyle, $width.' '.$style);
        } else if (!is_null($width) && is_null($style) && is_null($color)) {
            $array[] = new $class($cssstyle, $width);
        } else {
            if (!is_null($width)) {
                $array[] = new $class($cssstyle, $width);
            }
            if (!is_null($style)) {
                $array[] = new $class($cssstyle, $style);
            }
            if (!is_null($color)) {
                $array[] = new $class($cssstyle, $color);
            }
        }
        return true;
    }
}

/**
 * A border colour style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_bordercolor extends css_style_color {

    /**
     * Creates a new border colour style
     *
     * Based upon the colour style
     *
     * @param mixed $value
     * @return Array of css_style_bordercolor
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 4);

        $top = $right = $bottom = $left = null;
        if (count($bits) > 0) {
            $top = $right = $bottom = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $right = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $bottom = array_shift($bits);
        }
        if (count($bits) > 0) {
            $left = array_shift($bits);
        }
        return array(
            css_style_bordertopcolor::init($top),
            css_style_borderrightcolor::init($right),
            css_style_borderbottomcolor::init($bottom),
            css_style_borderleftcolor::init($left)
        );
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }

    /**
     * Cleans the value
     *
     * @param string $value Cleans the provided value optimising it if possible
     * @return string
     */
    protected function clean_value($value) {
        $values = explode(' ', $value);
        $values = array_map('parent::clean_value', $values);
        return join (' ', $values);
    }

    /**
     * Outputs this style
     *
     * @param string $overridevalue
     * @return string
     */
    public function out($overridevalue = null) {
        if ($overridevalue === null) {
            $overridevalue = $this->value;
        }
        $values = explode(' ', $overridevalue);
        $values = array_map('css_style_color::shrink_value', $values);
        return parent::out(join (' ', $values));
    }
}

/**
 * A border left style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderleft extends css_style_generic {

    /**
     * Initialises the border left style into individual components
     *
     * @param string $value
     * @return array Array of css_style_borderleftwidth|css_style_borderleftstyle|css_style_borderleftcolor
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 3);

        $return = array();
        if (count($bits) > 0) {
            $return[] = css_style_borderleftwidth::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_borderleftstyle::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_borderleftcolor::init(array_shift($bits));
        }
        return $return;
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border right style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderright extends css_style_generic {

    /**
     * Initialises the border right style into individual components
     *
     * @param string $value The value of the style
     * @return array Array of css_style_borderrightwidth|css_style_borderrightstyle|css_style_borderrightcolor
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 3);

        $return = array();
        if (count($bits) > 0) {
            $return[] = css_style_borderrightwidth::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_borderrightstyle::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_borderrightcolor::init(array_shift($bits));
        }
        return $return;
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border top style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_bordertop extends css_style_generic {

    /**
     * Initialises the border top style into individual components
     *
     * @param string $value The value of the style
     * @return array Array of css_style_bordertopwidth|css_style_bordertopstyle|css_style_bordertopcolor
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 3);

        $return = array();
        if (count($bits) > 0) {
            $return[] = css_style_bordertopwidth::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_bordertopstyle::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_bordertopcolor::init(array_shift($bits));
        }
        return $return;
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border bottom style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderbottom extends css_style_generic {

    /**
     * Initialises the border bottom style into individual components
     *
     * @param string $value The value of the style
     * @return array Array of css_style_borderbottomwidth|css_style_borderbottomstyle|css_style_borderbottomcolor
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 3);

        $return = array();
        if (count($bits) > 0) {
            $return[] = css_style_borderbottomwidth::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_borderbottomstyle::init(array_shift($bits));
        }
        if (count($bits) > 0) {
            $return[] = css_style_borderbottomcolor::init(array_shift($bits));
        }
        return $return;
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border width style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderwidth extends css_style_width {

    /**
     * Creates a new border colour style
     *
     * Based upon the colour style
     *
     * @param string $value The value of the style
     * @return array Array of css_style_border*width
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 4);

        $top = $right = $bottom = $left = null;
        if (count($bits) > 0) {
            $top = $right = $bottom = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $right = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $bottom = array_shift($bits);
        }
        if (count($bits) > 0) {
            $left = array_shift($bits);
        }
        return array(
            css_style_bordertopwidth::init($top),
            css_style_borderrightwidth::init($right),
            css_style_borderbottomwidth::init($bottom),
            css_style_borderleftwidth::init($left)
        );
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }

    /**
     * Checks if the width is valid
     * @return bool
     */
    public function is_valid() {
        return self::is_border_width($this->value);
    }

    /**
     * Cleans the provided value
     *
     * @param mixed $value Cleans the provided value optimising it if possible
     * @return string
     */
    protected function clean_value($value) {
        $isvalid = self::is_border_width($value);
        if (!$isvalid) {
            $this->set_error('Invalid width specified for '.$this->name);
        } else if (preg_match('#^0\D+$#', $value)) {
            return '0';
        }
        return trim($value);
    }

    /**
     * Returns true if the provided value is a permitted border width
     * @param string $value The value to check
     * @return bool
     */
    public static function is_border_width($value) {
        $altwidthvalues = array('thin', 'medium', 'thick');
        return css_is_width($value) || in_array($value, $altwidthvalues);
    }
}

/**
 * A border style style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderstyle extends css_style_generic {

    /**
     * Creates a new border colour style
     *
     * Based upon the colour style
     *
     * @param string $value The value of the style
     * @return array Array of css_style_border*style
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value, 4);

        $top = $right = $bottom = $left = null;
        if (count($bits) > 0) {
            $top = $right = $bottom = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $right = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $bottom = array_shift($bits);
        }
        if (count($bits) > 0) {
            $left = array_shift($bits);
        }
        return array(
            css_style_bordertopstyle::init($top),
            css_style_borderrightstyle::init($right),
            css_style_borderbottomstyle::init($bottom),
            css_style_borderleftstyle::init($left)
        );
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border top colour style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_bordertopcolor extends css_style_bordercolor {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_bordertopcolor
     */
    public static function init($value) {
        return new css_style_bordertopcolor('border-top-color', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border left colour style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderleftcolor extends css_style_bordercolor {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderleftcolor
     */
    public static function init($value) {
        return new css_style_borderleftcolor('border-left-color', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border right colour style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderrightcolor extends css_style_bordercolor {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderrightcolor
     */
    public static function init($value) {
        return new css_style_borderrightcolor('border-right-color', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border bottom colour style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderbottomcolor extends css_style_bordercolor {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderbottomcolor
     */
    public static function init($value) {
        return new css_style_borderbottomcolor('border-bottom-color', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border width top style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_bordertopwidth extends css_style_borderwidth {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_bordertopwidth
     */
    public static function init($value) {
        return new css_style_bordertopwidth('border-top-width', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border width left style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderleftwidth extends css_style_borderwidth {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderleftwidth
     */
    public static function init($value) {
        return new css_style_borderleftwidth('border-left-width', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border width right style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderrightwidth extends css_style_borderwidth {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderrightwidth
     */
    public static function init($value) {
        return new css_style_borderrightwidth('border-right-width', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border width bottom style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderbottomwidth extends css_style_borderwidth {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderbottomwidth
     */
    public static function init($value) {
        return new css_style_borderbottomwidth('border-bottom-width', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border top style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_bordertopstyle extends css_style_borderstyle {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_bordertopstyle
     */
    public static function init($value) {
        return new css_style_bordertopstyle('border-top-style', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border left style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderleftstyle extends css_style_borderstyle {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderleftstyle
     */
    public static function init($value) {
        return new css_style_borderleftstyle('border-left-style', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border right style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderrightstyle extends css_style_borderstyle {

    /**
     * Initialises this style object
     *
     * @param string $value The value of the style
     * @return css_style_borderrightstyle
     */
    public static function init($value) {
        return new css_style_borderrightstyle('border-right-style', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A border bottom style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_borderbottomstyle extends css_style_borderstyle {

    /**
     * Initialises this style object
     *
     * @param string $value The value for the style
     * @return css_style_borderbottomstyle
     */
    public static function init($value) {
        return new css_style_borderbottomstyle('border-bottom-style', $value);
    }

    /**
     * Consolidate this to a single border style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'border';
    }
}

/**
 * A background style
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_background extends css_style implements core_css_consolidatable_style {

    /**
     * Initialises a background style
     *
     * @param string $value The value of the style
     * @return array An array of background component.
     */
    public static function init($value) {
        // Colour - image - repeat - attachment - position.
        $imageurl = null;
        if (preg_match('#url\(([^\)]+)\)#', $value, $matches)) {
            $imageurl = trim($matches[1]);
            $value = str_replace($matches[1], '', $value);
        }

        // Switch out the brackets so that they don't get messed up when we explode.
        $brackets = array();
        $bracketcount = 0;
        while (preg_match('#\([^\)\(]+\)#', $value, $matches)) {
            $key = "##BRACKET-{$bracketcount}##";
            $bracketcount++;
            $brackets[$key] = $matches[0];
            $value = str_replace($matches[0], $key, $value);
        }

        $important = (stripos($value, '!important') !== false);
        if ($important) {
            // Great some genius put !important in the background shorthand property.
            $value = str_replace('!important', '', $value);
        }

        $value = preg_replace('#\s+#', ' ', $value);
        $bits = explode(' ', $value);

        foreach ($bits as $key => $bit) {
            $bits[$key] = self::replace_bracket_placeholders($bit, $brackets);
        }
        unset($bracketcount);
        unset($brackets);

        $repeats = array('repeat', 'repeat-x', 'repeat-y', 'no-repeat', 'inherit');
        $attachments = array('scroll' , 'fixed', 'inherit');
        $positions = array('top', 'left', 'bottom', 'right', 'center');

        /* @var css_style_background[] $return */
        $return = array();
        $unknownbits = array();

        $color = self::NULL_VALUE;
        if (count($bits) > 0 && css_is_colour(reset($bits))) {
            $color = array_shift($bits);
        }

        $image = self::NULL_VALUE;
        if (count($bits) > 0 && preg_match('#^\s*(none|inherit|url\(\))\s*$#', reset($bits))) {
            $image = array_shift($bits);
            if ($image == 'url()') {
                $image = "url({$imageurl})";
            }
        }

        $repeat = self::NULL_VALUE;
        if (count($bits) > 0 && in_array(reset($bits), $repeats)) {
            $repeat = array_shift($bits);
        }

        $attachment = self::NULL_VALUE;
        if (count($bits) > 0 && in_array(reset($bits), $attachments)) {
            // Scroll , fixed, inherit.
            $attachment = array_shift($bits);
        }

        $position = self::NULL_VALUE;
        if (count($bits) > 0) {
            $widthbits = array();
            foreach ($bits as $bit) {
                if (in_array($bit, $positions) || css_is_width($bit)) {
                    $widthbits[] = $bit;
                } else {
                    $unknownbits[] = $bit;
                }
            }
            if (count($widthbits)) {
                $position = join(' ', $widthbits);
            }
        }

        if (count($unknownbits)) {
            foreach ($unknownbits as $bit) {
                $bit = trim($bit);
                if ($color === self::NULL_VALUE && css_is_colour($bit)) {
                    $color = $bit;
                } else if ($repeat === self::NULL_VALUE && in_array($bit, $repeats)) {
                    $repeat = $bit;
                } else if ($attachment === self::NULL_VALUE && in_array($bit, $attachments)) {
                    $attachment = $bit;
                } else if ($bit !== '') {
                    $advanced = css_style_background_advanced::init($bit);
                    if ($important) {
                        $advanced->set_important();
                    }
                    $return[] = $advanced;
                }
            }
        }

        if ($color === self::NULL_VALUE &&
            $image === self::NULL_VALUE &&
            $repeat === self::NULL_VALUE && $attachment === self::NULL_VALUE &&
            $position === self::NULL_VALUE) {
            // All primaries are null, return without doing anything else. There may be advanced madness there.
            return $return;
        }

        $return[] = css_style_backgroundcolor::init($color);
        $return[] = css_style_backgroundimage::init($image);
        $return[] = css_style_backgroundrepeat::init($repeat);
        $return[] = css_style_backgroundattachment::init($attachment);
        $return[] = css_style_backgroundposition::init($position);

        if ($important) {
            foreach ($return as $style) {
                $style->set_important();
            }
        }

        return $return;
    }

    /**
     * Static helper method to switch in bracket replacements
     *
     * @param string $value
     * @param array $placeholders
     * @return string
     */
    protected static function replace_bracket_placeholders($value, array $placeholders) {
        while (preg_match('/##BRACKET-\d+##/', $value, $matches)) {
            $value = str_replace($matches[0], $placeholders[$matches[0]], $value);
        }
        return $value;
    }

    /**
     * Consolidates background styles into a single background style
     *
     * @param css_style_background[] $styles Consolidates the provided array of background styles
     * @return css_style[] Consolidated optimised background styles
     */
    public static function consolidate(array $styles) {

        if (empty($styles)) {
            return $styles;
        }

        $color = null;
        $image = null;
        $repeat = null;
        $attachment = null;
        $position = null;
        $size = null;
        $origin = null;
        $clip = null;

        $someimportant = false;
        $allimportant = null;
        foreach ($styles as $style) {
            if ($style instanceof css_style_backgroundimage_advanced) {
                continue;
            }
            if ($style->is_important()) {
                $someimportant = true;
                if ($allimportant === null) {
                    $allimportant = true;
                }
            } else if ($allimportant === true) {
                $allimportant = false;
            }
        }

        /* @var css_style[] $organisedstyles */
        $organisedstyles = array();
        /* @var css_style[] $advancedstyles */
        $advancedstyles = array();
        /* @var css_style[] $importantstyles */
        $importantstyles = array();
        foreach ($styles as $style) {
            if ($style instanceof css_style_backgroundimage_advanced) {
                $advancedstyles[] = $style;
                continue;
            }
            if ($someimportant && !$allimportant && $style->is_important()) {
                $importantstyles[] = $style;
                continue;
            }
            $organisedstyles[$style->get_name()] = $style;
            switch ($style->get_name()) {
                case 'background-color' :
                    $color = css_style_color::shrink_value($style->get_value(false));
                    break;
                case 'background-image' :
                    $image = $style->get_value(false);
                    break;
                case 'background-repeat' :
                    $repeat = $style->get_value(false);
                    break;
                case 'background-attachment' :
                    $attachment = $style->get_value(false);
                    break;
                case 'background-position' :
                    $position = $style->get_value(false);
                    break;
                case 'background-clip' :
                    $clip = $style->get_value();
                    break;
                case 'background-origin' :
                    $origin = $style->get_value();
                    break;
                case 'background-size' :
                    $size = $style->get_value();
                    break;
            }
        }

        /* @var css_style[] $consolidatetosingle */
        $consolidatetosingle = array();
        if (!is_null($color) && !is_null($image) && !is_null($repeat) && !is_null($attachment) && !is_null($position)) {
            // We can use the shorthand background-style!
            if (!$organisedstyles['background-color']->is_special_empty_value()) {
                $consolidatetosingle[] = $color;
            }
            if (!$organisedstyles['background-image']->is_special_empty_value()) {
                $consolidatetosingle[] = $image;
            }
            if (!$organisedstyles['background-repeat']->is_special_empty_value()) {
                $consolidatetosingle[] = $repeat;
            }
            if (!$organisedstyles['background-attachment']->is_special_empty_value()) {
                $consolidatetosingle[] = $attachment;
            }
            if (!$organisedstyles['background-position']->is_special_empty_value()) {
                $consolidatetosingle[] = $position;
            }
            // Reset them all to null so we don't use them again.
            $color = null;
            $image = null;
            $repeat = null;
            $attachment = null;
            $position = null;
        }

        $return = array();
        // Single background style needs to come first.
        if (count($consolidatetosingle) > 0) {
            $returnstyle = new css_style_background('background', join(' ', $consolidatetosingle));
            if ($allimportant) {
                $returnstyle->set_important();
            }
            $return[] = $returnstyle;
        }
        foreach ($styles as $style) {
            $value = null;
            switch ($style->get_name()) {
                case 'background-color' :
                    $value = $color;
                    break;
                case 'background-image' :
                    $value = $image;
                    break;
                case 'background-repeat' :
                    $value = $repeat;
                    break;
                case 'background-attachment' :
                    $value = $attachment;
                    break;
                case 'background-position' :
                    $value = $position;
                    break;
                case 'background-clip' :
                    $value = $clip;
                    break;
                case 'background-origin':
                    $value = $origin;
                    break;
                case 'background-size':
                    $value = $size;
                    break;
            }
            if (!is_null($value)) {
                $return[] = $style;
            }
        }
        $return = array_merge($return, $importantstyles, $advancedstyles);
        return $return;
    }
}

/**
 * A advanced background style that allows multiple values to preserve unknown entities
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_background_advanced extends css_style_generic {
    /**
     * Creates a new background colour style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundimage
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        return new css_style_background_advanced('background', $value);
    }

    /**
     * Returns true because the advanced background image supports multiple values.
     * e.g. -webkit-linear-gradient and -moz-linear-gradient.
     *
     * @return boolean
     */
    public function allows_multiple_values() {
        return true;
    }
}

/**
 * A background colour style.
 *
 * Based upon the colour style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundcolor extends css_style_color {

    /**
     * Creates a new background colour style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundcolor
     */
    public static function init($value) {
        return new css_style_backgroundcolor('background-color', $value);
    }

    /**
     * css_style_backgroundcolor consolidates to css_style_background
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }

    /**
     * Returns true if the value for this style is the special null value.
     *
     * This occurs if the shorthand background property was used but no proper value
     * was specified for this style.
     * This leads to a null value being used unless otherwise overridden.
     *
     * @return bool
     */
    public function is_special_empty_value() {
        return ($this->value === self::NULL_VALUE);
    }

    /**
     * Returns true if the value for this style is valid
     * @return bool
     */
    public function is_valid() {
        return $this->is_special_empty_value() || parent::is_valid();
    }
}

/**
 * A background image style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundimage extends css_style_generic {

    /**
     * Creates a new background image style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundimage
     */
    public static function init($value) {
        if ($value !== self::NULL_VALUE && !preg_match('#^\s*(none|inherit|url\()#i', $value)) {
            return css_style_backgroundimage_advanced::init($value);
        }
        return new css_style_backgroundimage('background-image', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }

    /**
     * Returns true if the value for this style is the special null value.
     *
     * This occurs if the shorthand background property was used but no proper value
     * was specified for this style.
     * This leads to a null value being used unless otherwise overridden.
     *
     * @return bool
     */
    public function is_special_empty_value() {
        return ($this->value === self::NULL_VALUE);
    }

    /**
     * Returns true if the value for this style is valid
     * @return bool
     */
    public function is_valid() {
        return $this->is_special_empty_value() || parent::is_valid();
    }
}

/**
 * A background image style that supports multiple values and masquerades as a background-image
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundimage_advanced extends css_style_generic {
    /**
     * Creates a new background colour style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundimage
     */
    public static function init($value) {
        $value = preg_replace('#\s+#', ' ', $value);
        return new css_style_backgroundimage_advanced('background-image', $value);
    }

    /**
     * Returns true because the advanced background image supports multiple values.
     * e.g. -webkit-linear-gradient and -moz-linear-gradient.
     *
     * @return boolean
     */
    public function allows_multiple_values() {
        return true;
    }
}

/**
 * A background repeat style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundrepeat extends css_style_generic {

    /**
     * Creates a new background colour style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundrepeat
     */
    public static function init($value) {
        return new css_style_backgroundrepeat('background-repeat', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }

    /**
     * Returns true if the value for this style is the special null value.
     *
     * This occurs if the shorthand background property was used but no proper value
     * was specified for this style.
     * This leads to a null value being used unless otherwise overridden.
     *
     * @return bool
     */
    public function is_special_empty_value() {
        return ($this->value === self::NULL_VALUE);
    }

    /**
     * Returns true if the value for this style is valid
     * @return bool
     */
    public function is_valid() {
        return $this->is_special_empty_value() || parent::is_valid();
    }
}

/**
 * A background attachment style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundattachment extends css_style_generic {

    /**
     * Creates a new background colour style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundattachment
     */
    public static function init($value) {
        return new css_style_backgroundattachment('background-attachment', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }

    /**
     * Returns true if the value for this style is the special null value.
     *
     * This occurs if the shorthand background property was used but no proper value
     * was specified for this style.
     * This leads to a null value being used unless otherwise overridden.
     *
     * @return bool
     */
    public function is_special_empty_value() {
        return ($this->value === self::NULL_VALUE);
    }

    /**
     * Returns true if the value for this style is valid
     * @return bool
     */
    public function is_valid() {
        return $this->is_special_empty_value() || parent::is_valid();
    }
}

/**
 * A background position style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundposition extends css_style_generic {

    /**
     * Creates a new background colour style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundposition
     */
    public static function init($value) {
        return new css_style_backgroundposition('background-position', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }

    /**
     * Returns true if the value for this style is the special null value.
     *
     * This occurs if the shorthand background property was used but no proper value
     * was specified for this style.
     * This leads to a null value being used unless otherwise overridden.
     *
     * @return bool
     */
    public function is_special_empty_value() {
        return ($this->value === self::NULL_VALUE);
    }

    /**
     * Returns true if the value for this style is valid
     * @return bool
     */
    public function is_valid() {
        return $this->is_special_empty_value() || parent::is_valid();
    }
}

/**
 * A background size style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundsize extends css_style_generic {

    /**
     * Creates a new background size style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundposition
     */
    public static function init($value) {
        return new css_style_backgroundsize('background-size', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }
}

/**
 * A background clip style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundclip extends css_style_generic {

    /**
     * Creates a new background clip style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundposition
     */
    public static function init($value) {
        return new css_style_backgroundclip('background-clip', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }
}

/**
 * A background origin style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_backgroundorigin extends css_style_generic {

    /**
     * Creates a new background origin style
     *
     * @param string $value The value of the style
     * @return css_style_backgroundposition
     */
    public static function init($value) {
        return new css_style_backgroundorigin('background-origin', $value);
    }

    /**
     * Consolidates this style into a single background style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'background';
    }
}

/**
 * A padding style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_padding extends css_style_width implements core_css_consolidatable_style {

    /**
     * Initialises this padding style into several individual padding styles
     *
     * @param string $value The value fo the style
     * @return array An array of padding styles
     */
    public static function init($value) {
        $important = '';
        if (strpos($value, '!important') !== false) {
            $important = ' !important';
            $value = str_replace('!important', '', $value);
        }

        $value = preg_replace('#\s+#', ' ', trim($value));
        $bits = explode(' ', $value, 4);

        $top = $right = $bottom = $left = null;
        if (count($bits) > 0) {
            $top = $right = $bottom = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $right = $left = array_shift($bits);
        }
        if (count($bits) > 0) {
            $bottom = array_shift($bits);
        }
        if (count($bits) > 0) {
            $left = array_shift($bits);
        }
        return array(
            new css_style_paddingtop('padding-top', $top.$important),
            new css_style_paddingright('padding-right', $right.$important),
            new css_style_paddingbottom('padding-bottom', $bottom.$important),
            new css_style_paddingleft('padding-left', $left.$important)
        );
    }

    /**
     * Consolidates several padding styles into a single style.
     *
     * @param css_style_padding[] $styles Array of padding styles
     * @return css_style[] Optimised+consolidated array of padding styles
     */
    public static function consolidate(array $styles) {
        if (count($styles) != 4) {
            return $styles;
        }

        $someimportant = false;
        $allimportant = null;
        $notimportantequal = null;
        $firstvalue = null;
        foreach ($styles as $style) {
            if ($style->is_important()) {
                $someimportant = true;
                if ($allimportant === null) {
                    $allimportant = true;
                }
            } else {
                if ($allimportant === true) {
                    $allimportant = false;
                }
                if ($firstvalue == null) {
                    $firstvalue = $style->get_value(false);
                    $notimportantequal = true;
                } else if ($notimportantequal && $firstvalue !== $style->get_value(false)) {
                    $notimportantequal = false;
                }
            }
        }

        if ($someimportant && !$allimportant && !$notimportantequal) {
            return $styles;
        }

        if ($someimportant && !$allimportant && $notimportantequal) {
            $return = array(
                new css_style_padding('padding', $firstvalue)
            );
            foreach ($styles as $style) {
                if ($style->is_important()) {
                    $return[] = $style;
                }
            }
            return $return;
        } else {
            $top = null;
            $right = null;
            $bottom = null;
            $left = null;
            foreach ($styles as $style) {
                switch ($style->get_name()) {
                    case 'padding-top' :
                        $top = $style->get_value(false);
                        break;
                    case 'padding-right' :
                        $right = $style->get_value(false);
                        break;
                    case 'padding-bottom' :
                        $bottom = $style->get_value(false);
                        break;
                    case 'padding-left' :
                        $left = $style->get_value(false);
                        break;
                }
            }
            if ($top == $bottom && $left == $right) {
                if ($top == $left) {
                    $returnstyle = new css_style_padding('padding', $top);
                } else {
                    $returnstyle = new css_style_padding('padding', "{$top} {$left}");
                }
            } else if ($left == $right) {
                $returnstyle = new css_style_padding('padding', "{$top} {$right} {$bottom}");
            } else {
                $returnstyle = new css_style_padding('padding', "{$top} {$right} {$bottom} {$left}");
            }
            if ($allimportant) {
                $returnstyle->set_important();
            }
            return array($returnstyle);
        }
    }
}

/**
 * A padding top style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_paddingtop extends css_style_padding {

    /**
     * Initialises this style
     *
     * @param string $value The value of the style
     * @return css_style_paddingtop
     */
    public static function init($value) {
        return new css_style_paddingtop('padding-top', $value);
    }

    /**
     * Consolidates this style into a single padding style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'padding';
    }
}

/**
 * A padding right style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_paddingright extends css_style_padding {

    /**
     * Initialises this style
     *
     * @param string $value The value of the style
     * @return css_style_paddingright
     */
    public static function init($value) {
        return new css_style_paddingright('padding-right', $value);
    }

    /**
     * Consolidates this style into a single padding style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'padding';
    }
}

/**
 * A padding bottom style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_paddingbottom extends css_style_padding {

    /**
     * Initialises this style
     *
     * @param string $value The value of the style
     * @return css_style_paddingbottom
     */
    public static function init($value) {
        return new css_style_paddingbottom('padding-bottom', $value);
    }

    /**
     * Consolidates this style into a single padding style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'padding';
    }
}

/**
 * A padding left style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_paddingleft extends css_style_padding {

    /**
     * Initialises this style
     *
     * @param string $value The value of the style
     * @return css_style_paddingleft
     */
    public static function init($value) {
        return new css_style_paddingleft('padding-left', $value);
    }

    /**
     * Consolidates this style into a single padding style
     *
     * @return string
     */
    public function consolidate_to() {
        return 'padding';
    }
}

/**
 * A cursor style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_cursor extends css_style_generic {
    /**
     * Initialises a new cursor style
     * @param string $value
     * @return css_style_cursor
     */
    public static function init($value) {
        return new css_style_cursor('cursor', $value);
    }
    /**
     * Cleans the given value and returns it.
     *
     * @param string $value
     * @return string
     */
    protected function clean_value($value) {
        // Allowed values for the cursor style.
        $allowed = array('auto', 'crosshair', 'default', 'e-resize', 'help', 'move', 'n-resize', 'ne-resize', 'nw-resize',
                         'pointer', 'progress', 's-resize', 'se-resize', 'sw-resize', 'text', 'w-resize', 'wait', 'inherit');
        // Has to be one of the allowed values of an image to use. Loosely match the image... doesn't need to be thorough.
        if (!in_array($value, $allowed) && !preg_match('#\.[a-zA-Z0-9_\-]{1,5}$#', $value)) {
            $this->set_error('Invalid or unexpected cursor value specified: '.$value);
        }
        return trim($value);
    }
}

/**
 * A vertical alignment style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_verticalalign extends css_style_generic {
    /**
     * Initialises a new vertical alignment style
     * @param string $value
     * @return css_style_verticalalign
     */
    public static function init($value) {
        return new css_style_verticalalign('vertical-align', $value);
    }
    /**
     * Cleans the given value and returns it.
     *
     * @param string $value
     * @return string
     */
    protected function clean_value($value) {
        $allowed = array('baseline', 'sub', 'super', 'top', 'text-top', 'middle', 'bottom', 'text-bottom', 'inherit');
        if (!css_is_width($value) && !in_array($value, $allowed)) {
            $this->set_error('Invalid vertical-align value specified: '.$value);
        }
        return trim($value);
    }
}

/**
 * A float style.
 *
 * @package core
 * @subpackage cssoptimiser
 * @copyright 2012 Sam Hemelryk
 * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class css_style_float extends css_style_generic {
    /**
     * Initialises a new float style
     * @param string $value
     * @return css_style_float
     */
    public static function init($value) {
        return new css_style_float('float', $value);
    }
    /**
     * Cleans the given value and returns it.
     *
     * @param string $value
     * @return string
     */
    protected function clean_value($value) {
        $allowed = array('left', 'right', 'none', 'inherit');
        if (!css_is_width($value) && !in_array($value, $allowed)) {
            $this->set_error('Invalid float value specified: '.$value);
        }
        return trim($value);
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))