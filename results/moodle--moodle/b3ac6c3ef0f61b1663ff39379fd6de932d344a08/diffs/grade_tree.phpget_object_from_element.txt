    function get_object_from_element($element) {
        if (is_object($element) && get_class($element) != 'stdClass') {
            return $element;
        } elseif (!empty($element->element['object'])) {
            return $element->element['object'];
        } elseif (!empty($element['object'])) {
            return $element['object'];
        } elseif (!method_exists($object, 'get_sortorder')) {
            return null;
        } else {
            return null;
        }
    }


    /**
     * Given an element array ('object' => object, 'children' => array),
     * searches for the element at the same level placed immediately before this one
     * in sortorder, and returns its sortorder if found. Recursive function.
     * @param array $element
     * @param string $position 'previous' or 'next'
     * @param array $array of elements to search. Defaults to $this->tree_array
     * @return int Sortorder (or null if none found)
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||