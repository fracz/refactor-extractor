    function get_neighbour_sortorder($element, $position, $array=null, $lastsortorder=null) {
        if (empty($this->tree_array) || empty($element) || empty($position) || !in_array($position, array('previous', 'next'))) {
            return null;
        }

        $object = $this->get_object_from_element($element);

        if (empty($object)) {
            debugging("Invalid element given to grade_tree::get_neighbour_sortorder.");
            return false;
        }
        if (empty($array)) {
            $array = $this->tree_array;
        }
        $result = null;

        $returnnextelement = false;
        $count = 0;

        foreach ($array as $key => $child) {
            $sortorder = $child['object']->get_sortorder();
            if ($returnnextelement) {
                return $sortorder;
            }

            if ($object->get_sortorder() == $sortorder) {
                if ($position == 'previous') {
                    if ($count > 0) {
                        return $lastsortorder;
                    }
                } elseif ($position == 'next') {
                    $returnnextelement = true;
                }
                continue;
            }

            $lastsortorder = $sortorder;

            if (!empty($child['children'])) {
                $result = $this->get_neighbour_sortorder($element, $position, $child['children'], $lastsortorder);
                if ($result) {
                    break;
                }
            }

            $count++;
        }
        return $result;
    }

    /**
     * Provided $this->fillers is ready, and given a $tree array and a grade_category or grade_item,
     * checks the fillers array to see if the current element needs to be included before the given
     * object, and includes it if needed, or appends the filler to the tree if no object is given.
     * The inserted filler is then deleted from the fillers array. The tree array is then returned.
     * @param array $tree
     * @param object $object Optional object before which to insert any fillers with a lower sortorder.
     *           If null, the current filler is appended to the tree.
     * @return array $tree
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (AST_EMPTY
                            (AST_VAR)))
                    (AST_EMPTY
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_RETURN
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (
                                                (AST_RETURN
                                                    (AST_VAR)))))))
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST)))))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_EMPTY
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_VAR)
                                (
                                    (AST_BREAK
                                        (NULL))))))))
            (AST_POST_INC
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||