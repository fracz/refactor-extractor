    public function test_encodepath() {
        global $CFG;
        $fb = new file_browser();

        $CFG->slasharguments = true;
        $this->assertEqual('http://test.url.com/path/to/page.php', $fb->encodepath('http://test.url.com', '/path/to/page.php'));
        $this->assertEqual('http://test.url.com/path/to/page.php?forcedownload=1', $fb->encodepath('http://test.url.com', '/path/to/page.php', true));
        $this->assertEqual('https://test.url.com/path/to/page.php?forcedownload=1', $fb->encodepath('http://test.url.com', '/path/to/page.php', true, true));

        // TODO add error checking for malformed path (does method support get variables?)
        $this->assertEqual('http://test.url.com/path/to/page.php?var1=value1&var2=value2', $fb->encodepath('http://test.url.com', '/path/to/page.php?var1=value1&var2=value2'));
        $this->assertEqual('http://test.url.com/path/to/page.php?var1=value1&var2=value2&forcedownload=1', $fb->encodepath('http://test.url.com', '/path/to/page.php?var1=value1&var2=value2', true));

        $CFG->slasharguments = false;
        $this->assertEqual('http://test.url.com?file=%2Fpath%2Fto%2Fpage.php', $fb->encodepath('http://test.url.com', '/path/to/page.php'));
        $this->assertEqual('http://test.url.com?file=%2Fpath%2Fto%2Fpage.php&amp;forcedownload=1', $fb->encodepath('http://test.url.com', '/path/to/page.php', true));
        $this->assertEqual('https://test.url.com?file=%2Fpath%2Fto%2Fpage.php&amp;forcedownload=1', $fb->encodepath('http://test.url.com', '/path/to/page.php', true, true));
    }
}

class test_file_info_system extends filelib_test {
    public function test_get_children() {
        $context = get_context_instance(CONTEXT_SYSTEM);

        $fis = new file_info_system(new file_browser(), $context);
        $children = $fis->get_children();

        $found_coursecat = false;
        $context_coursecat = get_context_instance(CONTEXT_COURSECAT, $this->coursecat->id);
        $file_info_coursecat = new file_info_coursecat(new file_browser(), $context_coursecat, $this->coursecat);

        foreach ($children as $child) {
            if ($child == $file_info_coursecat) {
                $found_coursecat = true;
            }
        }
        $this->assertTrue($found_coursecat);
    }
}

class test_file_info_coursecat extends filelib_test {
    private $fileinfo;

    public function setup() {
        parent::setup();
        $context = get_context_instance(CONTEXT_COURSECAT, $this->coursecat->id);
        $this->fileinfo = new file_info_coursecat(new file_browser(), $context, $this->coursecat);
    }

    public function test_get_children() {
        $children = $this->fileinfo->get_children();
        $this->assertEqual(2, count($children));

        // Not sure but I think there should be two children: a file_info_stored object and a file_info_course object.
        $this->assertEqual('Category introduction', $children[0]->get_visible_name());
        $this->assertEqual('', $children[0]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[0]));

        $context_course = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $fic = new file_info_course(new file_browser(), $context_course, $this->course);
        $this->assertEqual($fic, $children[1]);
    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_SYSTEM);
        $fis = new file_info_system(new file_browser(), $context);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fis);
    }
}

class test_file_info_course extends filelib_test {
    private $fileinfo;

    public function setup() {
        parent::setup();
        $context = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $this->fileinfo = new file_info_course(new file_browser(), $context, $this->course);
    }

    public function test_get_children() {
        global $DB;

        $children = $this->fileinfo->get_children();
        $this->assertEqual(4, count($children));

        $this->assertEqual('Course introduction', $children[0]->get_visible_name());
        $this->assertEqual('', $children[0]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[0]));

        $context_course = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $fics = new file_info_coursesection(new file_browser(), $context_course, $this->course);
        $this->assertEqual($fics, $children[1]);

        $this->assertEqual('Backups', $children[2]->get_visible_name());
        $this->assertEqual('', $children[2]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[2]));

        $this->assertEqual('Course files', $children[3]->get_visible_name());
        $this->assertEqual('', $children[3]->get_url());
        $this->assertEqual('file_info_coursefile', get_class($children[3]));

    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_COURSECAT, $this->coursecat->id);
        $fic = new file_info_coursecat(new file_browser(), $context, $this->coursecat);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fic);
    }
}

class test_file_info_user extends filelib_test {
    private $fileinfo;

    public function setup() {
        parent::setup();
        $context = get_context_instance(CONTEXT_USER, $this->user->id);
        $this->fileinfo = new file_info_user(new file_browser(), $context, $this->user);
    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_SYSTEM);
        $fic = new file_info_system(new file_browser(), $context);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fic);
    }

    public function test_get_children() {
        $children = $this->fileinfo->get_children();
        $this->assertEqual(2, count($children));

        $this->assertEqual('Personal', $children[0]->get_visible_name());
        $this->assertEqual('', $children[0]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[0]));

        $this->assertEqual('Profile', $children[1]->get_visible_name());
        $this->assertEqual('', $children[1]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[1]));
    }
}

class test_file_info_module extends filelib_test {
    private $fileinfo;

    public function setup() {
        global $DB;
        parent::setup();
        $context = get_context_instance(CONTEXT_MODULE, $DB->get_field('course_modules', 'id', array('instance' => $this->module->instance)));
        $this->fileinfo = new file_info_module(new file_browser(), $this->course, $this->module->instance, $context, array());
    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $fic = new file_info_course(new file_browser(), $context, $this->course);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fic);
    }

    public function test_get_children() {
        $children = $this->fileinfo->get_children();
        $this->assertEqual(0, count($children));
    }
}||||||||    public function test_encodepath() {
        global $CFG;
        $fb = new file_browser();

        $CFG->slasharguments = true;
        $this->assertEqual('http://test.url.com/path/to/page.php', file_encode_url('http://test.url.com', '/path/to/page.php'));
        $this->assertEqual('http://test.url.com/path/to/page.php?forcedownload=1', file_encode_url('http://test.url.com', '/path/to/page.php', true));
        $this->assertEqual('https://test.url.com/path/to/page.php?forcedownload=1', file_encode_url('http://test.url.com', '/path/to/page.php', true, true));

        // TODO add error checking for malformed path (does method support get variables?)
        $this->assertEqual('http://test.url.com/path/to/page.php?var1=value1&var2=value2', file_encode_url('http://test.url.com', '/path/to/page.php?var1=value1&var2=value2'));
        $this->assertEqual('http://test.url.com/path/to/page.php?var1=value1&var2=value2&forcedownload=1', file_encode_url('http://test.url.com', '/path/to/page.php?var1=value1&var2=value2', true));

        $CFG->slasharguments = false;
        $this->assertEqual('http://test.url.com?file=%2Fpath%2Fto%2Fpage.php', file_encode_url('http://test.url.com', '/path/to/page.php'));
        $this->assertEqual('http://test.url.com?file=%2Fpath%2Fto%2Fpage.php&amp;forcedownload=1', file_encode_url('http://test.url.com', '/path/to/page.php', true));
        $this->assertEqual('https://test.url.com?file=%2Fpath%2Fto%2Fpage.php&amp;forcedownload=1', file_encode_url('http://test.url.com', '/path/to/page.php', true, true));
    }
}

class test_file_info_system extends filelib_test {
    public function test_get_children() {
        $context = get_context_instance(CONTEXT_SYSTEM);

        $fis = new file_info_system(new file_browser(), $context);
        $children = $fis->get_children();

        $found_coursecat = false;
        $context_coursecat = get_context_instance(CONTEXT_COURSECAT, $this->coursecat->id);
        $file_info_coursecat = new file_info_coursecat(new file_browser(), $context_coursecat, $this->coursecat);

        foreach ($children as $child) {
            if ($child == $file_info_coursecat) {
                $found_coursecat = true;
            }
        }
        $this->assertTrue($found_coursecat);
    }
}

class test_file_info_coursecat extends filelib_test {
    private $fileinfo;

    public function setup() {
        parent::setup();
        $context = get_context_instance(CONTEXT_COURSECAT, $this->coursecat->id);
        $this->fileinfo = new file_info_coursecat(new file_browser(), $context, $this->coursecat);
    }

    public function test_get_children() {
        $children = $this->fileinfo->get_children();
        $this->assertEqual(2, count($children));

        // Not sure but I think there should be two children: a file_info_stored object and a file_info_course object.
        $this->assertEqual('Category introduction', $children[0]->get_visible_name());
        $this->assertEqual('', $children[0]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[0]));

        $context_course = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $fic = new file_info_course(new file_browser(), $context_course, $this->course);
        $this->assertEqual($fic, $children[1]);
    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_SYSTEM);
        $fis = new file_info_system(new file_browser(), $context);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fis);
    }
}

class test_file_info_course extends filelib_test {
    private $fileinfo;

    public function setup() {
        parent::setup();
        $context = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $this->fileinfo = new file_info_course(new file_browser(), $context, $this->course);
    }

    public function test_get_children() {
        global $DB;

        $children = $this->fileinfo->get_children();
        $this->assertEqual(4, count($children));

        $this->assertEqual('Course introduction', $children[0]->get_visible_name());
        $this->assertEqual('', $children[0]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[0]));

        $context_course = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $fics = new file_info_coursesection(new file_browser(), $context_course, $this->course);
        $this->assertEqual($fics, $children[1]);

        $this->assertEqual('Backups', $children[2]->get_visible_name());
        $this->assertEqual('', $children[2]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[2]));

        $this->assertEqual('Course files', $children[3]->get_visible_name());
        $this->assertEqual('', $children[3]->get_url());
        $this->assertEqual('file_info_coursefile', get_class($children[3]));

    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_COURSECAT, $this->coursecat->id);
        $fic = new file_info_coursecat(new file_browser(), $context, $this->coursecat);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fic);
    }
}

class test_file_info_user extends filelib_test {
    private $fileinfo;

    public function setup() {
        parent::setup();
        $context = get_context_instance(CONTEXT_USER, $this->user->id);
        $this->fileinfo = new file_info_user(new file_browser(), $context, $this->user);
    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_SYSTEM);
        $fic = new file_info_system(new file_browser(), $context);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fic);
    }

    public function test_get_children() {
        $children = $this->fileinfo->get_children();
        $this->assertEqual(2, count($children));

        $this->assertEqual('Personal', $children[0]->get_visible_name());
        $this->assertEqual('', $children[0]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[0]));

        $this->assertEqual('Profile', $children[1]->get_visible_name());
        $this->assertEqual('', $children[1]->get_url());
        $this->assertEqual('file_info_stored', get_class($children[1]));
    }
}

class test_file_info_module extends filelib_test {
    private $fileinfo;

    public function setup() {
        global $DB;
        parent::setup();
        $context = get_context_instance(CONTEXT_MODULE, $DB->get_field('course_modules', 'id', array('instance' => $this->module->instance)));
        $this->fileinfo = new file_info_module(new file_browser(), $this->course, $this->module->instance, $context, array());
    }

    public function test_get_parent() {
        $context = get_context_instance(CONTEXT_COURSE, $this->course->id);
        $fic = new file_info_course(new file_browser(), $context, $this->course);
        $parent = $this->fileinfo->get_parent();
        $this->assertEqual($parent, $fic);
    }

    public function test_get_children() {
        $children = $this->fileinfo->get_children();
        $this->assertEqual(0, count($children));
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)
                    (AST_CONST))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)
                    (AST_CONST))))))