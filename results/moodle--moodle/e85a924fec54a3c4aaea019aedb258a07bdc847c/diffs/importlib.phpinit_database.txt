    public function init_database() {
        if (!$this->mdb->get_tables()) {
            // not tables yet, time to create all tables
            $this->manager->install_from_xmldb_structure($this->schema);
        }
    }
}

/**
 * XML format importer class (uses SAX for speed and low memory footprint).
 * Provides logic for parsing XML data and calling appropiate callbacks.
 * Subclasses should define XML data sources.
 */
abstract class xml_database_importer extends database_importer {
    /**
     * Creates and setups a SAX parser. Subclasses should use this method to
     * create the XML parser.
     *
     * @return resource XML parser resource.
     */
    protected function get_parser() {
        $parser = xml_parser_create();
        xml_set_object($parser, $this);
        xml_set_element_handler($parser, 'tag_open', 'tag_close');
        xml_set_character_data_handler($parser, 'cdata');
        xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, false);
        return $parser;
    }

    /**
     * Callback function. Called by the XML parser for opening tags processing.
     *
     * @param resource $parser XML parser resource.
     * @param string $tag name of opening tag
     * @param array $attributes set of opening tag XML attributes
     * @return void
     */
    protected function tag_open($parser, $tag, $attributes) {
        switch ($tag) {
            case 'moodle_database' :
                $this->begin_database_import($attributes['version'], $attributes['timestamp']);
                break;
            case 'table' :
                $this->current_table = $attributes['name'];
                $this->begin_table_import($this->current_table, $attributes['schemaHash']);
                break;
            case 'record' :
                $this->current_row = new object();
                break;
            case 'field' :
                $this->current_field = $attributes['name'];
                $this->current_data = @$attributes['value'] == 'null' ? null : '';
                break;
            default :
                //TODO put message in error lang
                throw new import_exception('XML content not valid for import operation.');
        }
    }

    /**
     * Callback function. Called by the XML parser for closing tags processing.
     *
     * @param resource $parser XML parser resource.
     * @param string $tag name of opening tag
     * @return void
     */
    protected function tag_close($parser, $tag) {
        switch ($tag) {
            case 'moodle_database' :
                $this->finish_database_import();
                break;
            case 'table' :
                $this->finish_table_import($this->current_table);
                unset ($this->current_table);
                break;
            case 'record' :
                $this->import_table_data($this->current_table, $this->current_row);
                unset ($this->current_row);
                break;
            case 'field' :
                $field = $this->current_field;
                unset ($this->current_field);
                $this->current_row-> $field = $this->current_data;
                unset ($this->current_data);
                break;
            default :
                //TODO put message in error lang
                throw new import_exception('XML content not valid for import operation.');
        }
    }

    /**
     * Callback function. Called by the XML parser for character data processing.
     *
     * @param resource $parser XML parser resource.
     * @param string $data character data to be processed
     * @return void
     */
    protected function cdata($parser, $cdata) {
        if (isset($this->current_field)) {
            $this->current_data .= $cdata;
        }
    }

    /**
     * Common import method
     * @return void
     */
    public abstract function import_database();
}

/**
 * XML format importer class from file storage.
 */
class file_xml_database_importer extends xml_database_importer {
    /** Path to the XML data file. */
    protected $filepath;

    /**
     * Object constructor.
     *
     * @param string $filepath - path to the XML data file. Use null for PHP
     * input stream.
     * @param moodle_database $mdb Connection to the target database
     * @see xml_database_importer::__construct()
     * @param xmldb_structure $schema Target database schema in XMLDB format
     * @see xml_database_importer::__construct()
     * @param boolean $check_schema - whether or not to check that XML database
     * @see xml_database_importer::__construct()
     */
    public function __construct($filepath, moodle_database $mdb, xmldb_structure $schema=null) {
        parent::__construct($mdb, $schema);
        if (is_null($filepath)) {
            $filepath = 'php://input';
        }
        $this->filepath = $filepath;
    }

    /**
     * Common import method: it opens the file storage, creates the parser, feeds
     * the XML parser with data, releases the parser and closes the file storage.
     * @return void
     */
    public function import_database() {
        $this->init_database();
        $file = fopen($this->filepath, 'r');
        $parser = $this->get_parser();
        while (($data = fread($file, 65536)) && xml_parse($parser, $data, feof($file)));
        xml_parser_free($parser);
        fclose($file);
    }
}

/**
 * XML format importer class from memory storage (i.e. string).
 */
class string_xml_database_importer extends xml_database_importer {
    /** String with XML data. */
    protected $data;

    /**
     * Object constructor.
     *
     * @param string data - string with XML data
     * @param moodle_database $mdb Connection to the target database
     * @see xml_database_importer::__construct()
     * @param xmldb_structure $schema Target database schema in XMLDB format
     * @see xml_database_importer::__construct()
     * @param boolean $check_schema - whether or not to check that XML database
     * @see xml_database_importer::__construct()
     */
    public function __construct($data, moodle_database $mdb, xmldb_structure $schema=null) {
        parent::__construct($mdb, $schema);
        $this->data = $data;
    }

    /**
     * Common import method: it creates the parser, feeds the XML parser with
     * data, releases the parser.
     * @return void
     */
    public function import_database() {
        $this->init_database();
        $parser = $this->get_parser();
        xml_parse($parser, $this->data, true);
        xml_parser_free($parser);
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_PROP
                            (AST_VAR))))))))||||||||