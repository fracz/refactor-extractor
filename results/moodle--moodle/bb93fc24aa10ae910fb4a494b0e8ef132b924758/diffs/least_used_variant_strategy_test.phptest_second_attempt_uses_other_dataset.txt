||||||||    public function test_second_attempt_uses_other_dataset() {
        global $DB;
        $this->resetAfterTest();
        $generator = $this->getDataGenerator()->get_plugin_generator('core_question');

        $cat = $generator->create_question_category();
        $questiondata = $generator->create_question('calculated', null, array('category' => $cat->id));

        // Create two dataset items.
        $adefinitionid = $DB->get_field_sql("
                    SELECT qdd.id
                      FROM {question_dataset_definitions} qdd
                      JOIN {question_datasets} qd ON qd.datasetdefinition = qdd.id
                     WHERE qd.question = ?
                       AND qdd.name = ?", array($questiondata->id, 'a'));
        $bdefinitionid = $DB->get_field_sql("
                    SELECT qdd.id
                      FROM {question_dataset_definitions} qdd
                      JOIN {question_datasets} qd ON qd.datasetdefinition = qdd.id
                     WHERE qd.question = ?
                       AND qdd.name = ?", array($questiondata->id, 'b'));
        $DB->set_field('question_dataset_definitions', 'itemcount', 2, array('id' => $adefinitionid));
        $DB->set_field('question_dataset_definitions', 'itemcount', 2, array('id' => $bdefinitionid));
        $DB->insert_record('question_dataset_items', array('definition' => $adefinitionid,
                'itemnumber' => 1, 'value' => 3));
        $DB->insert_record('question_dataset_items', array('definition' => $bdefinitionid,
                'itemnumber' => 1, 'value' => 7));
        $DB->insert_record('question_dataset_items', array('definition' => $adefinitionid,
                'itemnumber' => 2, 'value' => 6));
        $DB->insert_record('question_dataset_items', array('definition' => $bdefinitionid,
                'itemnumber' => 2, 'value' => 4));

        $question = question_bank::load_question($questiondata->id);

        $quba1 = question_engine::make_questions_usage_by_activity('test', context_system::instance());
        $quba1->set_preferred_behaviour('deferredfeedback');
        $slot1 = $quba1->add_question($question);
        $quba1->start_all_questions(new core_question\engine\variants\least_used_strategy(
                $quba1, new qubaid_list(array())));
        question_engine::save_questions_usage_by_activity($quba1);
        $variant1 = $quba1->get_variant($slot1);

        // Second attempt should use the other variant.
        $quba2 = question_engine::make_questions_usage_by_activity('test', context_system::instance());
        $quba2->set_preferred_behaviour('deferredfeedback');
        $slot2 = $quba2->add_question($question);
        $quba2->start_all_questions(new core_question\engine\variants\least_used_strategy(
                $quba1, new qubaid_list(array($quba1->get_id()))));
        question_engine::save_questions_usage_by_activity($quba2);
        $variant2 = $quba2->get_variant($slot2);

        $this->assertNotEquals($variant1, $variant2);

        // Third attempt uses either variant at random.
        $quba3 = question_engine::make_questions_usage_by_activity('test', context_system::instance());
        $quba3->set_preferred_behaviour('deferredfeedback');
        $slot3 = $quba3->add_question($question);
        $quba3->start_all_questions(new core_question\engine\variants\least_used_strategy(
                $quba1, new qubaid_list(array($quba1->get_id(), $quba2->get_id()))));
        $variant3 = $quba3->get_variant($slot3);

        $this->assertTrue($variant3 == $variant1 || $variant3 == $variant2);
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_CONST)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY)))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (NULL)))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (NULL)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))))))