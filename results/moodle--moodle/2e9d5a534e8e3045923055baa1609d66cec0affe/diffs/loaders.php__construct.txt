    public function __construct(cache_definition $definition, cache_store $store, $loader = null) {
        // First up copy the loadeduserid to the current user id.
        $this->currentuserid = self::$loadeduserid;
        parent::__construct($definition, $store, $loader);
        if ($definition->has_invalidation_events()) {
            $lastinvalidation = $this->get('lastsessioninvalidation');
            if ($lastinvalidation === false) {
                // This is a new session, there won't be anything to invalidate. Set the time of the last invalidation and
                // move on.
                $this->set('lastsessioninvalidation', cache::now());
                return;
            } else if ($lastinvalidation == cache::now()) {
                // We've already invalidated during this request.
                return;
            }

            // Get the event invalidation cache.
            $cache = cache::make('core', 'eventinvalidation');
            $events = $cache->get_many($definition->get_invalidation_events());
            $todelete = array();
            $purgeall = false;
            // Iterate the returned data for the events.
            foreach ($events as $event => $keys) {
                if ($keys === false) {
                    // No data to be invalidated yet.
                    continue;
                }
                // Look at each key and check the timestamp.
                foreach ($keys as $key => $timestamp) {
                    // If the timestamp of the event is more than or equal to the last invalidation (happened between the last
                    // invalidation and now)then we need to invaliate the key.
                    if ($timestamp >= $lastinvalidation) {
                        if ($key === 'purged') {
                            $purgeall = true;
                            break;
                        } else {
                            $todelete[] = $key;
                        }
                    }
                }
            }
            if ($purgeall) {
                $this->purge();
            } else if (!empty($todelete)) {
                $todelete = array_unique($todelete);
                $this->delete_many($todelete);
            }
            // Set the time of the last invalidation.
            $this->set('lastsessioninvalidation', cache::now());
        }
    }

    /**
     * Parses the key turning it into a string (or array is required) suitable to be passed to the cache store.
     *
     * This function is called for every operation that uses keys. For this reason we use this function to also check
     * that the current user is the same as the user who last used this cache.
     *
     * On top of that if prepends the string 'sess_' to the start of all keys. The _ ensures things are easily identifiable.
     *
     * @param string|int $key As passed to get|set|delete etc.
     * @return string|array String unless the store supports multi-identifiers in which case an array if returned.
     */
||||||||    public function __construct(cache_definition $definition, cache_store $store, $loader = null) {
        // First up copy the loadeduserid to the current user id.
        $this->currentuserid = self::$loadeduserid;
        parent::__construct($definition, $store, $loader);

        // This will trigger check tracked user. If this gets removed a call to that will need to be added here in its place.
        $this->set(self::LASTACCESS, cache::now());

        if ($definition->has_invalidation_events()) {
            $lastinvalidation = $this->get('lastsessioninvalidation');
            if ($lastinvalidation === false) {
                // This is a new session, there won't be anything to invalidate. Set the time of the last invalidation and
                // move on.
                $this->set('lastsessioninvalidation', cache::now());
                return;
            } else if ($lastinvalidation == cache::now()) {
                // We've already invalidated during this request.
                return;
            }

            // Get the event invalidation cache.
            $cache = cache::make('core', 'eventinvalidation');
            $events = $cache->get_many($definition->get_invalidation_events());
            $todelete = array();
            $purgeall = false;
            // Iterate the returned data for the events.
            foreach ($events as $event => $keys) {
                if ($keys === false) {
                    // No data to be invalidated yet.
                    continue;
                }
                // Look at each key and check the timestamp.
                foreach ($keys as $key => $timestamp) {
                    // If the timestamp of the event is more than or equal to the last invalidation (happened between the last
                    // invalidation and now)then we need to invaliate the key.
                    if ($timestamp >= $lastinvalidation) {
                        if ($key === 'purged') {
                            $purgeall = true;
                            break;
                        } else {
                            $todelete[] = $key;
                        }
                    }
                }
            }
            if ($purgeall) {
                $this->purge();
            } else if (!empty($todelete)) {
                $todelete = array_unique($todelete);
                $this->delete_many($todelete);
            }
            // Set the time of the last invalidation.
            $this->set('lastsessioninvalidation', cache::now());
        }
    }

    /**
     * Sets the session id for the loader.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_PROP))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_STATIC_CALL)))
                            (AST_RETURN
                                (NULL))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_STATIC_CALL))
                                    (
                                        (AST_RETURN
                                            (NULL))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_IF
                                                (AST_IF_ELEM
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_VAR)
                                                            (AST_CONST))
                                                        (AST_BREAK
                                                            (NULL))))
                                                (AST_IF_ELEM
                                                    (NULL)
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_DIM
                                                                (AST_VAR)
                                                                (NULL))
                                                            (AST_VAR))))))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_STATIC_CALL)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_PROP))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_STATIC_CALL)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_STATIC_CALL)))
                            (AST_RETURN
                                (NULL))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_STATIC_CALL))
                                    (
                                        (AST_RETURN
                                            (NULL))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_IF
                                                (AST_IF_ELEM
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_VAR)
                                                            (AST_CONST))
                                                        (AST_BREAK
                                                            (NULL))))
                                                (AST_IF_ELEM
                                                    (NULL)
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_DIM
                                                                (AST_VAR)
                                                                (NULL))
                                                            (AST_VAR))))))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_STATIC_CALL)))))))