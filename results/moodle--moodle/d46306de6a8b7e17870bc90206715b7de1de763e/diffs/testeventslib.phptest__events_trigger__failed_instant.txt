||||||||    function test__events_trigger__failed_instant() {
        $this->assertEqual(1, events_trigger('test_instant', 'fail'), 'fail first event: %s');
        $this->assertEqual(1, events_trigger('test_instant', 'ok'), 'this one should fail too: %s');
        $this->assertEqual(0, events_cron('test_instant'), 'all events should stay in queue: %s');
        $this->assertEqual(2, events_pending_count('test_instant'), 'two events should in queue: %s');
        $this->assertEqual(0, sample_function_handler('status'), 'verify no event dispatched yet: %s');
        sample_function_handler('ignorefail'); //ignore "fail" eventdata from now on
        $this->assertEqual(1, events_trigger('test_instant', 'ok'), 'this one should go to queue directly: %s');
        $this->assertEqual(3, events_pending_count('test_instant'), 'three events should in queue: %s');
        $this->assertEqual(0, sample_function_handler('status'), 'verify previous event was not dispatched: %s');
        $this->assertEqual(3, events_cron('test_instant'), 'all events should be dispatched: %s');
        $this->assertEqual(3, sample_function_handler('status'), 'verify three events were dispatched: %s');
        $this->assertEqual(0, events_pending_count('test_instant'), 'no events should in queue: %s');
        $this->assertEqual(0, events_trigger('test_instant', 'ok'), 'this event should be dispatched immediately: %s');
        $this->assertEqual(4, sample_function_handler('status'), 'verify event was dispatched: %s');
        $this->assertEqual(0, events_pending_count('test_instant'), 'no events should in queue: %s');
    }



}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR))))