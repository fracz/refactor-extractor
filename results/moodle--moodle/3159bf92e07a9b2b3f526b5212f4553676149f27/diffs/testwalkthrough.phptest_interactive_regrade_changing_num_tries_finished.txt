    public function test_interactive_regrade_changing_num_tries_finished() {
        // Create a multichoice multiple question.
        $q = test_question_maker::make_a_shortanswer_question();
        $q->hints = array(
            new question_hint_with_parts(0, 'This is the first hint.', FORMAT_HTML, true, true),
            new question_hint_with_parts(0, 'This is the second hint.', FORMAT_HTML, true, true),
        );
        $this->start_attempt_at_question($q, 'interactive', 3);

        // Check the initial state.
        $this->check_current_state(question_state::$todo);
        $this->check_current_mark(null);
        $this->check_current_output(
                $this->get_tries_remaining_expectation(3));

        // Submit the right answer.
        $this->process_submission(array('answer' => 'frog', '-submit' => 1));

        // Verify.
        $this->check_current_state(question_state::$gradedright);
        $this->check_current_mark(3);

        // Now change the quiestion so that answer is only partially right, and regrade.
        $q->answers[13]->fraction = 0.6666667;
        $q->answers[14]->fraction = 1;

        $this->quba->regrade_all_questions(true);

        // Verify.
        $this->check_current_state(question_state::$gradedpartial);
        // TODO I don't think 1 is the right fraction here. However, it is what
        // you get attempting a question like this without regrading being involved,
        // and I am currently interested in testing regrading here.
        $this->check_current_mark(1);
    }
}||||||||    public function test_interactive_regrade_changing_num_tries_finished() {
        // Create a multichoice multiple question.
        $q = test_question_maker::make_question('shortanswer');
        $q->hints = array(
            new question_hint_with_parts(0, 'This is the first hint.', FORMAT_HTML, true, true),
            new question_hint_with_parts(0, 'This is the second hint.', FORMAT_HTML, true, true),
        );
        $this->start_attempt_at_question($q, 'interactive', 3);

        // Check the initial state.
        $this->check_current_state(question_state::$todo);
        $this->check_current_mark(null);
        $this->check_current_output(
                $this->get_tries_remaining_expectation(3));

        // Submit the right answer.
        $this->process_submission(array('answer' => 'frog', '-submit' => 1));

        // Verify.
        $this->check_current_state(question_state::$gradedright);
        $this->check_current_mark(3);

        // Now change the quiestion so that answer is only partially right, and regrade.
        $q->answers[13]->fraction = 0.6666667;
        $q->answers[14]->fraction = 1;

        $this->quba->regrade_all_questions(true);

        // Verify.
        $this->check_current_state(question_state::$gradedpartial);
        // TODO I don't think 1 is the right fraction here. However, it is what
        // you get attempting a question like this without regrading being involved,
        // and I am currently interested in testing regrading here.
        $this->check_current_mark(1);
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_CONST)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_CONST)))
                (NULL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_CONST)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_CONST)))
                (NULL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))