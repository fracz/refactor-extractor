    function display($quiz, $cm, $course) {     /// This function just displays the report
        global $CFG, $SESSION, $QTYPES, $DB;
        $strnoattempts = get_string('noattempts','quiz');
    /// Only print headers if not asked to download data
        $download = optional_param('download', NULL);
        if (!$download) {
            $this->print_header_and_tabs($cm, $course, $quiz, $reportmode="analysis");
        }
    /// Construct the table for this particular report
//    echo "course <pre>";print_r($course);echo "</pre>";
 //   echo "course <pre>";print_r($CFG);echo "</pre>";
        if (!$quiz->questions) {
            print_heading($strnoattempts);
            return true;
        }

    /// Check to see if groups are being used in this quiz
        $currentgroup = groups_get_activity_group($cm, true);

        if ($groupmode = groups_get_activity_groupmode($cm)) {   // Groups are being used
            if (!$download) {
                groups_print_activity_menu($cm, "report.php?id=$cm->id&amp;mode=analysis");
            }
        }

        // set Table and Analysis stats options
        if(!isset($SESSION->quiz_analysis_table)) {
            $SESSION->quiz_analysis_table = array('attemptselection' => 0, 'lowmarklimit' => 0, 'pagesize' => QUIZ_REPORT_DEFAULT_PAGE_SIZE);
        }

        foreach($SESSION->quiz_analysis_table as $option => $value) {
            $urlparam = optional_param($option, NULL, PARAM_INT);
            if($urlparam === NULL) {
                $$option = $value;
            } else {
                $$option = $SESSION->quiz_analysis_table[$option] = $urlparam;
            }
        }
        if (!isset($pagesize) || ((int)$pagesize < 1) ){
            $pagesize = QUIZ_REPORT_DEFAULT_PAGE_SIZE;
        }


        $scorelimit = $quiz->sumgrades * $lowmarklimit/ 100;

        // ULPGC ecastro DEBUG this is here to allow for different SQL to select attempts
        switch ($attemptselection) {
        case QUIZ_ALLATTEMPTS :
            $limit = '';
            $group = '';
            break;
        case QUIZ_HIGHESTATTEMPT :
            $limit = ', max(qa.sumgrades) ';
            $group = ' GROUP BY qa.userid ';
            break;
        case QUIZ_FIRSTATTEMPT :
            $limit = ', min(qa.timemodified) ';
            $group = ' GROUP BY qa.userid ';
            break;
        case QUIZ_LASTATTEMPT :
            $limit = ', max(qa.timemodified) ';
            $group = ' GROUP BY qa.userid ';
            break;
        }

        if ($attemptselection != QUIZ_ALLATTEMPTS) {
            $sql = 'SELECT qa.userid '.$limit.
                    'FROM {user} u LEFT JOIN {quiz_attempts} qa ON u.id = qa.userid '.
                    'WHERE qa.quiz = ? AND qa.preview = 0 '.
                    $group;
            $usermax = $DB->get_records_sql_menu($sql, array($quiz->id));
        }else {
            $usermax = '';
        }
        $groupmembers = '';
        $groupwhere = '';

        //Add this to the SQL to show only group users
        $params = array($quiz->id, $scorelimit);
        if ($currentgroup) {
            $groupmembers = ", {groups_members} gm ";
            $groupwhere = "AND gm.groupid = ? AND u.id = gm.userid";
            $params[] = $currentgroup;
        }

        $sql = 'SELECT  qa.* FROM {quiz_attempts} qa, {user} u '.$groupmembers.
                 'WHERE u.id = qa.userid AND qa.quiz = ? AND qa.preview = 0 AND ( qa.sumgrades >= ? ) '.$groupwhere;

        // ^^^^^^ es posible seleccionar aqu TODOS los quizzes, como quiere Jussi,
        // pero habra que llevar la cuenta ed cada quiz para restaura las preguntas (quizquestions, states)

        /// Fetch the attempts
        $attempts = $DB->get_records_sql($sql, $params);

        if(empty($attempts)) {
            print_heading(get_string('nothingtodisplay'));
            $this->print_options_form($quiz, $cm, $attemptselection, $lowmarklimit, $pagesize);
            return true;
        }
        $questions = array();
        $getquestiondata = true ;
        $this->get_questions_atttempts_data ($quiz,$questions,$attempts,$attemptselection,$usermax);

/*    This is the code before creating the get_questions_atttempts_data function
///     will remove these lines when the new function gets approval
/// Here we rewiew all attempts and record data to construct the table
        $questions = array();
        $statstable = array();
        $questionarray = array();
        foreach ($attempts as $attempt) {
            $questionarray[] = quiz_questions_in_quiz($attempt->layout);
        }
        $questionlist = quiz_questions_in_quiz(implode(",", $questionarray));
        $questionarray = array_unique(explode(",",$questionlist));
        $questionlist = implode(",", $questionarray);
        unset($questionarray);

        foreach ($attempts as $attempt) {
            switch ($attemptselection) {
            case QUIZ_ALLATTEMPTS :
                $userscore = 0;      // can be anything, not used
                break;
            case QUIZ_HIGHESTATTEMPT :
                $userscore = $attempt->sumgrades;
                break;
            case QUIZ_FIRSTATTEMPT :
                $userscore = $attempt->timemodified;
                break;
            case QUIZ_LASTATTEMPT :
                $userscore = $attempt->timemodified;
                break;
            }

            if ($attemptselection == QUIZ_ALLATTEMPTS || $userscore == $usermax[$attempt->userid]) {

            $sql = "SELECT q.*, i.grade AS maxgrade, i.id AS instance".
                   "  FROM {question} q,".
                   "       {quiz_question_instances} i".
                   " WHERE i.quiz = '$quiz->id' AND q.id = i.question".
                   "   AND q.id IN ($questionlist)";

            if (!$quizquestions = $DB->get_records_sql($sql)) {
                print_error('noquestion', 'quiz');
            }

            // Load the question type specific information
            if (!get_question_options($quizquestions)) {
                print_error('cannotloadquestion', 'quiz');
            }
            // Restore the question sessions to their most recent states
            // creating new sessions where required
            if (!$states = get_question_states($quizquestions, $quiz, $attempt)) {
                print_error('cannotrestore', 'quiz');
            }
            $numbers = explode(',', $questionlist);
            $statsrow = array();
            foreach ($numbers as $i) {
                if (!isset($quizquestions[$i]) or !isset($states[$i])) {
                    continue;
                }
                $qtype = ($quizquestions[$i]->qtype=='random') ? $states[$i]->options->question->qtype : $quizquestions[$i]->qtype;
                if($quizquestions[$i]->qtype =='randomsamatch'){
                    $quizquestions[$i]->options =$states[$i]->options ;
                }
                $q = get_question_responses($quizquestions[$i], $states[$i]);
                if (empty($q)){
                    continue;
                }
                $qid = $q->id;
                if (!isset($questions[$qid])) {
                    $questions[$qid]['id'] = $qid;
                    $questions[$qid]['qname'] = $quizquestions[$i]->name;
                    foreach ($q->responses as $answer => $r) {
                        $r->count = 0;
                        $questions[$qid]['responses'][$answer] = $r->answer;
                        $questions[$qid]['rcounts'][$answer] = 0;
                        $questions[$qid]['credits'][$answer] = $r->credit;
                        $statsrow[$qid] = 0;
                    }
                }
                $responses = get_question_actual_response($quizquestions[$i], $states[$i]);
                foreach ($responses as $resp){
                    if ($resp) {
                        if ($key = array_search($resp, $questions[$qid]['responses'])) {
                            $questions[$qid]['rcounts'][$key]++;
                        } else {
                            $test = new stdClass;
                            $test->responses = $QTYPES[$quizquestions[$i]->qtype]->get_correct_responses($quizquestions[$i], $states[$i]);
                            if ($key = $QTYPES[$quizquestions[$i]->qtype]->check_response($quizquestions[$i], $states[$i], $test)) {
                                $questions[$qid]['rcounts'][$key]++;
                            } else {
                                $questions[$qid]['responses'][] = $resp;
                                $questions[$qid]['rcounts'][] = 1;
                                $questions[$qid]['credits'][] = 0;
                            }
                        }
                    }
                }
                $statsrow[$qid] = get_question_fraction_grade($quizquestions[$i], $states[$i]);
            }
            $attemptscores[$attempt->id] = $attempt->sumgrades;
            $statstable[$attempt->id] = $statsrow;
            }
        } // Statistics Data table built

        unset($attempts);
        unset($quizquestions);
        unset($states);

        // now calculate statistics and set the values in the $questions array
        $top = max($attemptscores);
        $bottom = min($attemptscores);
        $gap = ($top - $bottom)/3;
        $top -=$gap;
        $bottom +=$gap;
        foreach ($questions as $qid=>$q) {
            $questions[$qid] = $this->report_question_stats($q, $attemptscores, $statstable, $top, $bottom);
            // calculate rpercent
            foreach($q['responses']as $aid => $resp){
                $rpercent =  '('.format_float($q['rcounts'][$aid]/$q['count']*100,0).'%)';
                $questions[$qid]['rpercent'][$aid] = $rpercent ;
            }

        }


        unset($attemptscores);
        unset($statstable);
*/
    /// Now check if asked download of data
        if ($download = optional_param('download', NULL)) {
            $filename = clean_filename("$course->shortname ".format_string($quiz->name,true));
            switch ($download) {
            case "Excel" :
                $this->Export_Excel($questions, $filename);
                break;
            case "ODS":
                $this->Export_ODS($questions, $filename);
                break;
            case "CSV":
                $this->Export_CSV($questions, $filename);
                break;
            case "HTML":
                $this->Export_HTML($questions, $filename);
                break;
            }
        }

    /// Construct the table for this particular report

        $tablecolumns = array('id', 'qname',    'responses', 'credits', 'rcounts', 'rpercent', 'facility', 'qsd','disc_index', 'disc_coeff');
        $tableheaders = array(get_string('qidtitle','quiz_analysis'), get_string('qtexttitle','quiz_analysis'),
                        get_string('responsestitle','quiz_analysis'), get_string('rfractiontitle','quiz_analysis'),
                        get_string('rcounttitle','quiz_analysis'), get_string('rpercenttitle','quiz_analysis'),
                        get_string('facilitytitle','quiz_analysis'), get_string('stddevtitle','quiz_analysis'),
                        get_string('dicsindextitle','quiz_analysis'), get_string('disccoefftitle','quiz_analysis'));

        $table = new flexible_table('mod-quiz-report-itemanalysis');

        $table->define_columns($tablecolumns);
        $table->define_headers($tableheaders);
        $table->define_baseurl($CFG->wwwroot.'/mod/quiz/report.php?q='.$quiz->id.'&amp;mode=analysis');

        $table->sortable(true);
      //  $table->no_sorting('rpercent');
        $table->collapsible(true);
        $table->initialbars(false);

        $table->column_class('id', 'numcol');
        $table->column_class('credits', 'numcol');
        $table->column_class('rcounts', 'numcol');
     //   $table->column_class('rpercent', 'numcol');
        $table->column_class('facility', 'numcol');
        $table->column_class('qsd', 'numcol');
        $table->column_class('disc_index', 'numcol');
        $table->column_class('disc_coeff', 'numcol');

        $table->column_suppress('id');
        $table->column_suppress('qname');
        $table->column_suppress('facility');
        $table->column_suppress('qsd');
        $table->column_suppress('disc_index');
        $table->column_suppress('disc_coeff');

        $table->set_attribute('cellspacing', '0');
        $table->set_attribute('id', 'itemanalysis');
        $table->set_attribute('class', 'generaltable generalbox');

        // Start working -- this is necessary as soon as the niceties are over
        $table->setup();

        $tablesort = $table->get_sql_sort();
        $sorts = explode(",",trim($tablesort));
        if ($tablesort and is_array($sorts)) {
            $sortindex = array();
            $sortorder = array ();
            foreach ($sorts as $sort) {
                $data = explode(" ",trim($sort));
                $sortindex[] = trim($data[0]);
                $s = trim($data[1]);
                if ($s=="ASC") {
                    $sortorder[] = SORT_ASC;
                } else {
                    $sortorder[] = SORT_DESC;
                }
            }
            if (count($sortindex)>0) {
                $sortindex[] = "id";
                $sortorder[] = SORT_ASC;
                foreach($questions as $qid => $row){
                    $index1[$qid] = $row[$sortindex[0]];
                    $index2[$qid] = $row[$sortindex[1]];
                }
                array_multisort($index1, $sortorder[0], $index2, $sortorder[1], $questions);
            }
        }

        $format_options = new stdClass;
        $format_options->para = false;
        $format_options->noclean = true;
        $format_options->newlines = false;

        // Now it is time to page the data, simply slice the keys in the array
        $table->pagesize($pagesize, count($questions));
        $start = $table->get_page_start();
        $pagequestions = array_slice(array_keys($questions), $start, $pagesize);

        foreach($pagequestions as $qnum) {
            $q = $questions[$qnum];
            $qid = $q['id'];
            $question = $DB->get_record('question', array('id' => $qid));
            $qnumber = " (".link_to_popup_window('/question/question.php?id='.$qid,'editquestion', $qid, 450, 550, get_string('edit'), 'none', true ).") ";
            $qname = '<div class="qname">'.format_text($question->name." :  ", $question->questiontextformat, $format_options, $quiz->course).'</div>';
            $qicon = print_question_icon($question, true);
            $qreview = quiz_question_preview_button($quiz, $question);
            $qtext = format_text($question->questiontext, $question->questiontextformat, $format_options, $quiz->course);
            $qquestion = $qname."\n".$qtext."\n";

            $responses = array();
            foreach ($q['responses'] as $aid=>$resp){
                $response = new stdClass;
                if ($q['credits'][$aid] <= 0) {
                    $qclass = 'uncorrect';
                } elseif ($q['credits'][$aid] == 1) {
                    $qclass = 'correct';
                } else {
                    $qclass = 'partialcorrect';
                }
                $response->credit = '<span class="'.$qclass.'">('.format_float($q['credits'][$aid],2).') </span>';
                $response->text = '<span class="'.$qclass.'">'.format_text($resp, FORMAT_MOODLE, $format_options, $quiz->course).' </span>';
                $count = $q['rcounts'][$aid].'/'.$q['count'];
                $response->rcount = $count;
                $response->rpercent =  $q['rpercent'][$aid];
                $responses[] = $response;
            }

            $facility = format_float($q['facility']*100,0)."%";
            $qsd = format_float($q['qsd'],3);
            $di = format_float($q['disc_index'],2);
            $dc = format_float($q['disc_coeff'],2);

            $response = array_shift($responses);
            $table->add_data(array($qnumber."\n<br />".$qicon."\n ".$qreview, $qquestion, $response->text, $response->credit, $response->rcount, $response->rpercent, $facility, $qsd, $di, $dc));
            foreach($responses as $response) {
                $table->add_data(array('', '', $response->text, $response->credit, $response->rcount, $response->rpercent, '', '', '', ''));
            }
        }
        print_heading_with_help(get_string("analysistitle", "quiz_analysis"),"itemanalysis", "quiz");

        echo '<div id="tablecontainer">';
        $table->print_html();
        echo '</div>';

        $this->print_options_form($quiz, $cm, $attemptselection, $lowmarklimit, $pagesize);
        return true;
    }


||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_ISSET
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CAST
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (SCALAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (NULL))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)))))))
                (AST_SWITCH
                    (AST_VAR)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_CONST))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_CONST)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_CONST))
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))))
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR)
                                (AST_CONST))))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_VAR))
                                        (SCALAR))))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST)
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR)))))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))))))
    (AST_CALL
        (
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))||||||||