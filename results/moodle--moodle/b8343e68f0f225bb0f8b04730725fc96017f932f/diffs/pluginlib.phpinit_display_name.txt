||||||||    public function init_display_name() {
        $this->displayname = get_string($this->name, 'qformat_' . $this->name);
    }
}

/**
 * Class for authentication plugins
 */
class plugintype_auth extends plugintype_base implements plugintype_interface {

    /**
     * @see plugintype_interface::is_enabled()
     */
    public function is_enabled() {
        global $CFG;
        /** @var null|array list of enabled authentication plugins */
        static $enabled = null;

        if (in_array($this->name, array('nologin', 'manual'))) {
            // these two are always enabled and can't be disabled
            return null;
        }

        if (is_null($enabled)) {
            $enabled = explode(',', $CFG->auth);
        }

        return isset($enabled[$this->name]);
    }

    /**
     * @see plugintype_interface::get_settings_url()
     */
    public function get_settings_url() {

        if (!empty($this->rootdir) and file_exists($this->rootdir . '/settings.php')) {
            return new moodle_url('/admin/settings.php', array('section' => 'authsetting' . $this->name));
        } else {
            return new moodle_url('/admin/auth_config.php', array('auth' => $this->name));
        }
    }
}

/**
 * Class for enrolment plugins
 */
class plugintype_enrol extends plugintype_base implements plugintype_interface {

    /**
     * We do not actually need whole enrolment classes here so we do not call
     * {@link enrol_get_plugins()}. Note that this may produce slightly different
     * results, for example if the enrolment plugin does not contain lib.php
     * but it is listed in $CFG->enrol_plugins_enabled
     *
     * @see plugintype_interface::is_enabled()
     */
    public function is_enabled() {
        global $CFG;
        /** @var null|array list of enabled enrolment plugins */
        static $enabled = null;

        if (is_null($enabled)) {
            $enabled = explode(',', $CFG->enrol_plugins_enabled);
        }

        return isset($enabled[$this->name]);
    }

    /**
     * @see plugintype_interface::get_settings_url()
     */
    public function get_settings_url() {

        if ($this->is_enabled() or (!empty($this->rootdir) and file_exists($this->rootdir . '/settings.php'))) {
            return new moodle_url('/admin/settings.php', array('section' => 'enrolsettings' . $this->name));
        } else {
            return parent::get_settings_url();
        }
    }

    /**
     * @see plugintype_interface::get_uninstall_url()
     */
    public function get_uninstall_url() {
        return new moodle_url('/admin/enrol.php', array('action' => 'uninstall', 'enrol' => $this->name, 'sesskey' => sesskey()));
    }
}

/**
 * Class for messaging processors
 */
class plugintype_message extends plugintype_base implements plugintype_interface {

    /**
     * @see plugintype_interface::get_settings_url()
     */
    public function get_settings_url() {

        if ($this->name === 'jabber') {
            return new moodle_url('/admin/settings.php', array('section' => 'jabber'));
        }

        if ($this->name === 'email') {
            return new moodle_url('/admin/settings.php', array('section' => 'mail'));
        }

    }
}

/**
 * Class for repositories
 */
class plugintype_repository extends plugintype_base implements plugintype_interface {

    /**
     * @see plugintype_interface::is_enabled()
     */
    public function is_enabled() {

        $enabled = self::get_enabled_repositories();

        return isset($enabled[$this->name]);
    }

    /**
     * @see plugintype_interface::get_settings_url()
     */
    public function get_settings_url() {

        if ($this->is_enabled()) {
            return new moodle_url('/admin/repository.php', array('sesskey' => sesskey(), 'action' => 'edit', 'repos' => $this->name));
        } else {
            return parent::get_settings_url();
        }
    }

    /**
     * Provides access to the records in {repository} table
     *
     * @param bool $disablecache do not use internal static cache
     * @return array array of stdClasses
     */
    protected static function get_enabled_repositories($disablecache=false) {
        global $DB;
        static $repositories = null;

        if (is_null($repositories) or $disablecache) {
            $repositories = $DB->get_records('repository', null, 'type', 'type,visible,sortorder');
        }

        return $repositories;
    }
}

/**
 * Class for portfolios
 */
class plugintype_portfolio extends plugintype_base implements plugintype_interface {

    /**
     * @see plugintype_interface::is_enabled()
     */
    public function is_enabled() {

        $enabled = self::get_enabled_portfolios();

        return isset($enabled[$this->name]);
    }

    /**
     * Provides access to the records in {portfolio_instance} table
     *
     * @param bool $disablecache do not use internal static cache
     * @return array array of stdClasses
     */
    protected static function get_enabled_portfolios($disablecache=false) {
        global $DB;
        static $portfolios = null;

        if (is_null($portfolios) or $disablecache) {
            $portfolios = array();
            $instances  = $DB->get_recordset('portfolio_instance', null, 'plugin');
            foreach ($instances as $instance) {
                if (isset($portfolios[$instance->plugin])) {
                    if ($instance->visible) {
                        $portfolios[$instance->plugin]->visible = $instance->visible;
                    }
                } else {
                    $portfolios[$instance->plugin] = $instance;
                }
            }
        }

        return $portfolios;
    }
}

/**
 * Class for themes
 */
class plugintype_theme extends plugintype_base implements plugintype_interface {

    /**
     * @see plugintype_interface::is_enabled()
     */
    public function is_enabled() {
        global $CFG;

        if ((!empty($CFG->theme) and $CFG->theme === $this->name) or
            (!empty($CFG->themelegacy) and $CFG->themelegacy === $this->name)) {
            return true;
        } else {
            return parent::is_enabled();
        }
    }
}

/**
 * Class representing an MNet service
 */
class plugintype_mnetservice extends plugintype_base implements plugintype_interface {

    /**
     * @see plugintype_interface::is_enabled()
     */
    public function is_enabled() {
        global $CFG;

        if (empty($CFG->mnet_dispatcher_mode) || $CFG->mnet_dispatcher_mode !== 'strict') {
            return false;
        } else {
            return parent::is_enabled();
        }
    }
}

/**
 * Class for admin tool plugins
 */
class plugintype_tool extends plugintype_base implements plugintype_interface {

    public function get_uninstall_url() {
        return new moodle_url('/admin/tools.php', array('delete' => $this->name, 'sesskey' => sesskey()));
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR)))))))