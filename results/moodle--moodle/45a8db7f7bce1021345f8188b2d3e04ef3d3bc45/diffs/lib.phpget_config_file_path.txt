    protected static function get_config_file_path() {
        global $CFG;
        // We always use this path.
        $configpath = $CFG->dataroot.'/muc/config.php';

        if (!empty($CFG->altcacheconfigpath)) {

            if  (defined('PHPUNIT_TEST') && PHPUNIT_TEST &&
                (!defined('TEST_CACHE_USING_ALT_CACHE_CONFIG_PATH') || !TEST_CACHE_USING_ALT_CACHE_CONFIG_PATH)) {
                // We're within a unit test, but TEST_CACHE_USING_ALT_CACHE_CONFIG_PATH has not being defined or is
                // false, we want to use the default.
                return $configpath;
            }

            $path = $CFG->altcacheconfigpath;
            if (is_dir($path) && is_writable($path)) {
                // Its a writable directory, thats fine. Convert it to a file.
                $path = $CFG->altcacheconfigpath.'/cacheconfig.php';
            }
            if (is_readable($path)) {
                $directory = dirname($configpath);
                if ($directory !== $CFG->dataroot && !file_exists($directory)) {
                    $result = make_writable_directory($directory, false);
                    if (!$result) {
                        throw new cache_exception('ex_configcannotsave', 'cache', '', null, 'Cannot create config directory. Check the permissions on your moodledata directory.');
                    }
                }
                // We don't care that this fails but we should let the developer know.
                if (!is_readable($configpath) && !@copy($path, $configpath)) {
                    debugging('Failed to copy alt cache config file to required location');
                }
            }
        }

        // We always use the dataroot location.
        return $configpath;
    }

    /**
     * Adds a definition to the stack
     * @param string $area
     * @param array $properties
     * @param bool $addmapping By default this method adds a definition and a mapping for that definition. You can
     *    however set this to false if you only want it to add the definition and not the mapping.
     */
||||||||    protected static function get_config_file_path() {
        global $CFG;
        // We always use this path.
        $configpath = $CFG->dataroot.'/muc/config.php';

        if (!empty($CFG->altcacheconfigpath)) {

            // No need to check we are within a test here, this is the cache config class that gets used
            // only when one of those is true.
            if  (!defined('TEST_CACHE_USING_ALT_CACHE_CONFIG_PATH') || !TEST_CACHE_USING_ALT_CACHE_CONFIG_PATH) {
                // TEST_CACHE_USING_ALT_CACHE_CONFIG_PATH has not being defined or is false, we want to use the default.
                return $configpath;
            }

            $path = $CFG->altcacheconfigpath;
            if (is_dir($path) && is_writable($path)) {
                // Its a writable directory, thats fine. Convert it to a file.
                $path = $CFG->altcacheconfigpath.'/cacheconfig.php';
            }
            if (is_readable($path)) {
                $directory = dirname($configpath);
                if ($directory !== $CFG->dataroot && !file_exists($directory)) {
                    $result = make_writable_directory($directory, false);
                    if (!$result) {
                        throw new cache_exception('ex_configcannotsave', 'cache', '', null, 'Cannot create config directory. Check the permissions on your moodledata directory.');
                    }
                }
                // We don't care that this fails but we should let the developer know.
                if (!is_readable($configpath) && !@copy($path, $configpath)) {
                    debugging('Failed to copy alt cache config file to required location');
                }
            }
        }

        // We always use the dataroot location.
        return $configpath;
    }

    /**
     * Adds a definition to the stack
     * @param string $area
     * @param array $properties
     * @param bool $addmapping By default this method adds a definition and a mapping for that definition. You can
     *    however set this to false if you only want it to add the definition and not the mapping.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (SCALAR))))
                                (AST_UNARY_OP
                                    (AST_CONST))))
                        (
                            (AST_RETURN
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_CONST))))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_UNARY_OP
                                                    (AST_VAR))
                                                (
                                                    (AST_THROW
                                                        (AST_NEW
                                                            (
                                                                (SCALAR)
                                                                (SCALAR)
                                                                (SCALAR)
                                                                (AST_CONST)
                                                                (SCALAR))))))))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_UNARY_OP
                                            (AST_UNARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR))))))
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR))))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR))))
                            (AST_UNARY_OP
                                (AST_CONST)))
                        (
                            (AST_RETURN
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_CONST))))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_UNARY_OP
                                                    (AST_VAR))
                                                (
                                                    (AST_THROW
                                                        (AST_NEW
                                                            (
                                                                (SCALAR)
                                                                (SCALAR)
                                                                (SCALAR)
                                                                (AST_CONST)
                                                                (SCALAR))))))))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_UNARY_OP
                                            (AST_UNARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR))))))
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR))))))))))))
    (AST_RETURN
        (AST_VAR)))