	public static function initSysLog() {
		global $TYPO3_CONF_VARS;

			// for CLI logging name is <fqdn-hostname>:<TYPO3-path>
			// Note that TYPO3_REQUESTTYPE is not used here as it may not yet be defined
		if (defined('TYPO3_cliMode') && TYPO3_cliMode) {
			$TYPO3_CONF_VARS['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogHost'] = self::getHostname($requestHost = FALSE) . ':' . PATH_site;
		}
			// for Web logging name is <protocol>://<request-hostame>/<site-path>
		else {
			$TYPO3_CONF_VARS['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogHost'] = self::getIndpEnv('TYPO3_SITE_URL');
		}

			// init custom logging
		if (is_array($TYPO3_CONF_VARS['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLog'])) {
			$params = array('initLog' => TRUE);
			$fakeThis = FALSE;
			foreach ($TYPO3_CONF_VARS['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLog'] as $hookMethod) {
				self::callUserFunction($hookMethod, $params, $fakeThis);
			}
		}

			// init TYPO3 logging
		foreach (explode(';', $TYPO3_CONF_VARS['SYS']['systemLog'], 2) as $log) {
			list($type, $destination) = explode(',', $log, 3);

			if ($type == 'syslog') {
				if (TYPO3_OS == 'WIN') {
					$facility = LOG_USER;
				} else {
					$facility = constant('LOG_' . strtoupper($destination));
				}
				openlog($TYPO3_CONF_VARS['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogHost'], LOG_ODELAY, $facility);
			}
		}

		$TYPO3_CONF_VARS['SYS']['systemLogLevel'] = self::intInRange($TYPO3_CONF_VARS['SYS']['systemLogLevel'], 0, 4);
		$TYPO3_CONF_VARS['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogInit'] = TRUE;
	}

	/**
	 * Logs message to the system log.
	 * This should be implemented around the source code, including the Core and both frontend and backend, logging serious errors.
	 * If you want to implement the sysLog in your applications, simply add lines like:
	 *		 t3lib_div::sysLog('[write message in English here]', 'extension_key', 'severity');
	 *
	 * @param	string		Message (in English).
	 * @param	string		Extension key (from which extension you are calling the log) or "Core"
	 * @param	integer		Severity: 0 is info, 1 is notice, 2 is warning, 3 is error, 4 is fatal error
	 * @return	void
	 */
||||||||	public static function initSysLog() {
			// for CLI logging name is <fqdn-hostname>:<TYPO3-path>
			// Note that TYPO3_REQUESTTYPE is not used here as it may not yet be defined
		if (defined('TYPO3_cliMode') && TYPO3_cliMode) {
			$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogHost'] = self::getHostname($requestHost = FALSE) . ':' . PATH_site;
		}
			// for Web logging name is <protocol>://<request-hostame>/<site-path>
		else {
			$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogHost'] = self::getIndpEnv('TYPO3_SITE_URL');
		}

			// init custom logging
		if (is_array($GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLog'])) {
			$params = array('initLog' => TRUE);
			$fakeThis = FALSE;
			foreach ($GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLog'] as $hookMethod) {
				self::callUserFunction($hookMethod, $params, $fakeThis);
			}
		}

			// init TYPO3 logging
		foreach (explode(';', $GLOBALS['TYPO3_CONF_VARS']['SYS']['systemLog'], 2) as $log) {
			list($type, $destination) = explode(',', $log, 3);

			if ($type == 'syslog') {
				if (TYPO3_OS == 'WIN') {
					$facility = LOG_USER;
				} else {
					$facility = constant('LOG_' . strtoupper($destination));
				}
				openlog($GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogHost'], LOG_ODELAY, $facility);
			}
		}

		$GLOBALS['TYPO3_CONF_VARS']['SYS']['systemLogLevel'] = t3lib_utility_Math::forceIntegerInRange($GLOBALS['TYPO3_CONF_VARS']['SYS']['systemLogLevel'], 0, 4);
		$GLOBALS['TYPO3_CONF_VARS']['SC_OPTIONS']['t3lib/class.t3lib_div.php']['systemLogInit'] = TRUE;
	}

	/**
	 * Logs message to the system log.
	 * This should be implemented around the source code, including the Core and both frontend and backend, logging serious errors.
	 * If you want to implement the sysLog in your applications, simply add lines like:
	 *		 t3lib_div::sysLog('[write message in English here]', 'extension_key', 'severity');
	 *
	 * @param string $msg Message (in English).
	 * @param string $extKey Extension key (from which extension you are calling the log) or "Core"
	 * @param integer $severity Severity: 0 is info, 1 is notice, 2 is warning, 3 is error, 4 is fatal error
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))))
                            (SCALAR))
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_FOREACH
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR))))))))))
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (AST_CONST)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (SCALAR))
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))))
                            (SCALAR))
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_FOREACH
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (SCALAR))
                (SCALAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR))))))))))
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (AST_CONST)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (SCALAR))
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (SCALAR))
        (AST_CONST)))