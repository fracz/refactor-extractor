	public static function mkdir_deep($destination, $deepDir) {
		$allParts = self::trimExplode('/', $deepDir, 1);
		$root = '';
		foreach ($allParts as $part) {
			$root .= $part . '/';
			if (!is_dir($destination . $root)) {
				self::mkdir($destination . $root);
				if (!@is_dir($destination . $root)) {
					return 'Error: The directory "' . $destination . $root . '" could not be created...';
				}
			}
		}
	}

	/**
	 * Wrapper function for rmdir, allowing recursive deletion of folders and files
	 *
	 * @param	string		Absolute path to folder, see PHP rmdir() function. Removes trailing slash internally.
	 * @param	boolean		Allow deletion of non-empty directories
	 * @return	boolean		true if @rmdir went well!
	 */
||||||||	public static function mkdir_deep($directory, $deepDirectory = '') {
		if (!is_string($directory)) {
			throw new \InvalidArgumentException(
				'The specified directory is of type "' . gettype($directory) . '" but a string is expected.',
				1303662955
			);
		}
		if (!is_string($deepDirectory)) {
			throw new \InvalidArgumentException(
				'The specified directory is of type "' . gettype($deepDirectory) . '" but a string is expected.',
				1303662956
			);
		}

		$fullPath = $directory . $deepDirectory;
		if (!is_dir($fullPath) && strlen($fullPath) > 0) {
			$firstCreatedPath = self::createDirectoryPath($fullPath);
			if ($firstCreatedPath !== '') {
				self::fixPermissions($firstCreatedPath, TRUE);
			}
		}
	}

	/**
	 * Creates directories for the specified paths if they do not exist. This
	 * functions sets proper permission mask but does not set proper user and
	 * group.
	 *
	 * @static
	 * @param string $fullDirectoryPath
	 * @return string Path to the the first created directory in the hierarchy
	 * @see t3lib_div::mkdir_deep
	 * @throws \RuntimeException If directory could not be created
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_UNARY_OP
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (AST_VAR))
                                            (SCALAR))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR))
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_CONST))))))))))