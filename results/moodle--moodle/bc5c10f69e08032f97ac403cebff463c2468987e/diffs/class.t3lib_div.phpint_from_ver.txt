	public static function int_from_ver($verNumberStr) {
		$verParts = explode('.', $verNumberStr);
		return intval((int) $verParts[0] . str_pad((int) $verParts[1], 3, '0', STR_PAD_LEFT) . str_pad((int) $verParts[2], 3, '0', STR_PAD_LEFT));
	}

	/**
	 * Returns true if the current TYPO3 version (or compatibility version) is compatible to the input version
	 * Notice that this function compares branches, not versions (4.0.1 would be > 4.0.0 although they use the same compat_version)
	 *
	 * @param	string		Minimum branch number required (format x.y / e.g. "4.0" NOT "4.0.0"!)
	 * @return	boolean		Returns true if this setup is compatible with the provided version number
	 * @todo	Still needs a function to convert versions to branches
	 */
||||||||	public static function int_from_ver($verNumberStr) {
			// Deprecation log is activated only for TYPO3 4.7 and above
		if (t3lib_utility_VersionNumber::convertVersionNumberToInteger(TYPO3_version) >= 4007000) {
			self::logDeprecatedFunction();
		}
		return t3lib_utility_VersionNumber::convertVersionNumberToInteger($verNumberStr);
	}

	/**
	 * Returns TRUE if the current TYPO3 version (or compatibility version) is compatible to the input version
	 * Notice that this function compares branches, not versions (4.0.1 would be > 4.0.0 although they use the same compat_version)
	 *
	 * @param string $verNumberStr	Minimum branch number required (format x.y / e.g. "4.0" NOT "4.0.0"!)
	 * @return boolean Returns TRUE if this setup is compatible with the provided version number
	 * @todo Still needs a function to convert versions to branches
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CAST
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_CALL
                            (
                                (AST_CAST
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))
                                (SCALAR)
                                (SCALAR)
                                (AST_CONST))))
                    (AST_CALL
                        (
                            (AST_CAST
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR)
                            (SCALAR)
                            (AST_CONST))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_CONST)))
                (SCALAR))
            (
                (AST_STATIC_CALL))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)))))