    public function test_check_allowed_file_types() {
        $this->resetAfterTest(true);

        // Valid file extensions.
        $listofextensions = '';
        $expected = '';
        // The function returns '' when file extensions are valid or the input field is empty.
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        $listofextensions = 'doc, jpg, mp3';
        $expected = '';
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        $listofextensions = 'doc; ".jpg"; mp4 ...mp3';
        $expected = '';
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        // Error handling.
        $listofextensions = 'doc.jpg .mp3 .avi';
        $expected = get_string('err_notallowedfiletype', 'workshop', 'doc.jpg');
        // The function returns and error on the form-field: 'The file extension "doc.jpg" is not allowed'.
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        $listofextensions = 'doc, jpg, mp3, unusual';
        $expected = get_string('err_notallowedfiletype', 'workshop', 'unusual');
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        $listofextensions = 'doc,; unusual1, unusual2';
        $expected = get_string('err_notallowedfiletype', 'workshop', 'unusual1');
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        $listofextensions = 'unusual1,; unsusual2, doc, jpg';
        $expected = get_string('err_notallowedfiletype', 'workshop', 'unusual1');
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);

        $listofextensions = 'unusual1; unusual2; mp4';
        $expected = get_string('err_notallowedfiletype', 'workshop', 'unusual1');
        $actual = workshop::check_allowed_file_types($listofextensions);
        $this->assertEquals($expected, $actual);
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||