    public function commit_delegated_transaction(moodle_transaction $transaction) {
        if ($transaction->is_disposed()) {
            throw new dml_transaction_exception('Transactions already disposed', $transaction);
        }
        // mark as disposed so that it can not be used again
        $transaction->dispose();

        if (empty($this->transactions)) {
            throw new dml_transaction_exception('Transaction not started', $transaction);
        }

        if ($this->force_rollback) {
            throw new dml_transaction_exception('Tried to commit transaction after lower level rollback', $transaction);
        }

        if ($transaction !== $this->transactions[count($this->transactions) - 1]) {
            // one incorrect commit at any level rollbacks everything
            $this->force_rollback = true;
            throw new dml_transaction_exception('Invalid transaction commit attempt', $transaction);
        }

        if (count($this->transactions) == 1) {
            // only commit the top most level
            $this->commit_transaction();
        }
        array_pop($this->transactions);

        if (empty($this->transactions)) {
            \core\event\manager::database_transaction_commited();
        }
    }

    /**
     * Driver specific commit of real database transaction,
     * this can not be used directly in code.
     * @return void
     */
||||||||    public function commit_delegated_transaction(moodle_transaction $transaction) {
        if ($transaction->is_disposed()) {
            throw new dml_transaction_exception('Transactions already disposed', $transaction);
        }
        // mark as disposed so that it can not be used again
        $transaction->dispose();

        if (empty($this->transactions)) {
            throw new dml_transaction_exception('Transaction not started', $transaction);
        }

        if ($this->force_rollback) {
            throw new dml_transaction_exception('Tried to commit transaction after lower level rollback', $transaction);
        }

        if ($transaction !== $this->transactions[count($this->transactions) - 1]) {
            // one incorrect commit at any level rollbacks everything
            $this->force_rollback = true;
            throw new dml_transaction_exception('Invalid transaction commit attempt', $transaction);
        }

        if (count($this->transactions) == 1) {
            // only commit the top most level
            $this->commit_transaction();
        }
        array_pop($this->transactions);

        if (empty($this->transactions)) {
            \core\event\manager::database_transaction_commited();
            \core\message\manager::database_transaction_commited();
        }
    }

    /**
     * Driver specific commit of real database transaction,
     * this can not be used directly in code.
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_STATIC_CALL)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_STATIC_CALL)
                (AST_STATIC_CALL)))))