    function test_grade_item_adjust_scale_grade() {
        // Load grade item and its scale
        $grade_item = new grade_item(array('scaleid' => $this->scale[1]->id), false);
        $grade_item->gradetype = GRADE_TYPE_SCALE;
        $grade_item->insert();
        $grade_item->load_scale();
        $this->assertEqual('Very Good', $grade_item->scale->scale_items[1]);

        // Load raw grade and its scale
        $grade_raw = new grade_grades_raw(array('scaleid' => $this->scale[0]->id), false);
        $grade_raw->gradevalue = 4;
        $grade_raw->itemid = $grade_item->id;
        $grade_raw->userid = 1;
        $grade_raw->insert();
        $grade_raw->load_scale();
        $this->assertEqual('Fairly neutral', $grade_raw->scale->scale_items[2]);

        // Test grade_item::adjust_scale
        $this->assertEqual(3, round($grade_item->adjust_grade($grade_raw, null, 'gradevalue')));
        $grade_raw->gradevalue = 6;
        $this->assertEqual(4, $grade_item->adjust_grade($grade_raw, null, 'gradevalue'));

        // Check that the final grades have the correct values now
        $grade_item->load_raw();
        $grade_item->update_final_grade();

        $this->assertFalse(empty($grade_item->grade_grades_final));
        $this->assertEqual($grade_item->id, $grade_item->grade_grades_final[1]->itemid);
        $this->assertEqual(2.66667, round($grade_item->grade_grades_final[1]->gradevalue, 5));
        $this->assertEqual(1, $grade_item->grade_grades_final[1]->userid);
    }

||||||||    function test_grade_item_adjust_scale_grade() {
        // Load grade item and its scale
        $grade_item = new grade_item(array('scaleid' => $this->scale[1]->id), false);
        $grade_item->gradetype = GRADE_TYPE_SCALE;
        $grade_item->insert();
        $grade_item->load_scale();
        $this->assertEqual('Very Good', $grade_item->scale->scale_items[1]);

        // Load raw grade and its scale
        $grade_raw = new grade_grades_raw(array('scaleid' => $this->scale[0]->id), false);
        $grade_raw->gradevalue = 4;
        $grade_raw->itemid = $grade_item->id;
        $grade_raw->userid = 1;
        $grade_raw->insert();
        $grade_raw->load_scale();
        $this->assertEqual('Fairly neutral', $grade_raw->scale->scale_items[2]);

        // Test grade_item::adjust_scale
        $this->assertEqual(3, $grade_item->adjust_grade($grade_raw));
        $grade_raw->gradevalue = 6;
        $this->assertEqual(4, $grade_item->adjust_grade($grade_raw));
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))