    function load_grade_calculations() {
        // Calculation for grade_item 1
        $grade_calculation = new stdClass();
        $grade_calculation->itemid = $this->grade_items[0]->id;
        $grade_calculation->calculation = '[unittestgradeitem1] * 1.4 - 3';
        $grade_calculation->timecreated = mktime();
        $grade_calculation->timemodified = mktime();

        if ($grade_calculation->id = insert_record('grade_calculations', $grade_calculation)) {
            $this->grade_calculations[] = $grade_calculation;
            $this->grade_items[0]->calculation = $grade_calculation;
        }

        // Calculation for grade_item 2
        $grade_calculation = new stdClass();
        $grade_calculation->itemid = $this->grade_items[1]->id;
        $grade_calculation->calculation = '[unittestgradeitem2] + 3';
        $grade_calculation->timecreated = mktime();
        $grade_calculation->timemodified = mktime();

        if ($grade_calculation->id = insert_record('grade_calculations', $grade_calculation)) {
            $this->grade_calculations[] = $grade_calculation;
            $this->grade_items[1]->calculation = $grade_calculation;
        }

        // Calculation for grade_item 3
        $grade_calculation = new stdClass();
        $grade_calculation->itemid = $this->grade_items[2]->id;
        $grade_calculation->calculation = '[unittestgradeitem3] / 2 + 40';
        $grade_calculation->timecreated = mktime();
        $grade_calculation->timemodified = mktime();

        if ($grade_calculation->id = insert_record('grade_calculations', $grade_calculation)) {
            $this->grade_calculations[] = $grade_calculation;
            $this->grade_items[2]->calculation = $grade_calculation;
        }
    }

    /**
     * Load grade_grades_raw data into the database, and adds the corresponding objects to this class' variable.
     */
||||||||    function load_grade_calculations() {
        // Calculation for grade_item 2
        $grade_calculation = new stdClass();
        $grade_calculation->itemid = $this->grade_items[1]->id;
        $grade_calculation->calculation = '= gi'.$this->grade_items[0]->id.'* + 30 ';
        $grade_calculation->timecreated = mktime();
        $grade_calculation->timemodified = mktime();

        if ($grade_calculation->id = insert_record('grade_calculations', $grade_calculation)) {
            $this->grade_calculations[0] = $grade_calculation;
            $this->grade_items[1]->calculation = $grade_calculation;
        }
    }

    /**
     * Load grade_grades_raw data into the database, and adds the corresponding objects to this class' variable.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_VAR))))))