    function apply_limit_rules($grades) {
        rsort($grades, SORT_NUMERIC);
        if (!empty($this->droplow)) {
            for ($i = 0; $i < $this->droplow; $i++) {
                array_pop($grades);
            }
        } elseif (!empty($this->keephigh)) {
            while (count($grades) > $this->keephigh) {
                array_pop($grades);
            }
        }
        sort($grades, SORT_NUMERIC);
        return $grades;
    }

    /**
     * Given an array of arrays of values, standardised from 0 to 1 and indexed by userid,
     * uses this category's aggregation method to
     * compute and return a single array of grade_raw objects with the aggregated gradevalue.
     * @param array $raw_grade_sets
     * @return array Raw grade objects
     */
||||||||    function apply_limit_rules(&$grades) {
        rsort($grades, SORT_NUMERIC);
        if (!empty($this->droplow)) {
            for ($i = 0; $i < $this->droplow; $i++) {
                array_pop($grades);
            }
        } elseif (!empty($this->keephigh)) {
            while (count($grades) > $this->keephigh) {
                array_pop($grades);
            }
        }
    }

    /**
     * Given an array of stdClass children of a certain $object_type, returns a flat or nested
     * array of these children, ready for appending to a tree built by get_children.
     * @static
     * @param array $children
     * @param string $arraytype
     * @param string $object_type
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOR
                    (AST_EXPR_LIST
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))
                    (AST_EXPR_LIST
                        (AST_POST_INC
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOR
                    (AST_EXPR_LIST
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))
                    (AST_EXPR_LIST
                        (AST_POST_INC
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))))))