    public static function delete_groups($groupids) {
        global $CFG;
        require_once("$CFG->dirroot/group/lib.php");

        $params = self::validate_parameters(self::delete_groups_parameters(), array('groupids'=>$groupids));

        $DB->begin_sql();
        try {
// TODO: this is problematic because the DB rollback does not handle deleting of images!!
//       there is also potential problem with events propagating action to external systems :-(
            foreach ($params['groupids'] as $groupid) {
                // validate params
                $groupid = validate_param($groupid, PARAM_INTEGER);
                if (!$group = groups_get_group($groupid, 'id, courseid', IGNORE_MISSING)) {
                    // silently ignore attempts to delete nonexisting groups
                    continue;
                }

                // now security checks
                $context = get_context_instance(CONTEXT_COURSE, $group->courseid);
                self::validate_context($context);
                require_capability('moodle/course:managegroups', $context);

                groups_delete_group($group);
            }
        } catch (Exception $ex) {
            $DB->rollback_sql();
            throw $ex;
        }
        $DB->commit_sql();
    }

   /**
     * Returns description of method result value
     * @return external_description
     */
||||||||    public static function delete_groups($groupids) {
        global $CFG, $DB;
        require_once("$CFG->dirroot/group/lib.php");

        $params = self::validate_parameters(self::delete_groups_parameters(), array('groupids'=>$groupids));

        $DB->begin_sql();
        try {
// TODO: this is problematic because the DB rollback does not handle deleting of images!!
//       there is also potential problem with events propagating action to external systems :-(
            foreach ($params['groupids'] as $groupid) {
                // validate params
                $groupid = validate_param($groupid, PARAM_INTEGER);
                if (!$group = groups_get_group($groupid, 'id, courseid', IGNORE_MISSING)) {
                    // silently ignore attempts to delete nonexisting groups
                    continue;
                }

                // now security checks
                $context = get_context_instance(CONTEXT_COURSE, $group->courseid);
                self::validate_context($context);
                require_capability('moodle/course:managegroups', $context);

                groups_delete_group($group);
            }
        } catch (Exception $ex) {
            $DB->rollback_sql();
            throw $ex;
        }
        $DB->commit_sql();
    }

   /**
     * Returns description of method result value
     * @return external_description
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_INCLUDE_OR_EVAL
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CONST))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_CONST)))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_INCLUDE_OR_EVAL
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CONST))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_CONST)))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)))