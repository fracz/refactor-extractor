    public function purge() {
        $pattern = $this->path.'/*.cache';
        foreach (glob($pattern, GLOB_MARK | GLOB_NOSORT) as $filename) {
            @unlink($filename);
        }
        $this->keys = array();
        return true;
    }

    /**
     * Given the data from the add instance form this function creates a configuration array.
     *
     * @param stdClass $data
     * @return array
     */
||||||||    public function purge() {
        foreach (glob($this->glob_keys_pattern(), GLOB_MARK | GLOB_NOSORT) as $filename) {
            @unlink($filename);
        }
        $this->keys = array();
        return true;
    }

    /**
     * Given the data from the add instance form this function creates a configuration array.
     *
     * @param stdClass $data
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_FOREACH
        (AST_CALL
            (
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CONST))))
        (AST_VAR)
        (NULL)
        (
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_FOREACH
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CONST))))
        (AST_VAR)
        (NULL)
        (
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_RETURN
        (AST_CONST)))