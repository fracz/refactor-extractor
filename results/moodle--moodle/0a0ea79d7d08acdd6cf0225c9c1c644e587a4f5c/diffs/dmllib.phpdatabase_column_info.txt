    public function database_column_info($data) {
        foreach ($data as $key=>$value) {
            if (array_key_exists($key, $this)) {
                $this->$key = $value;
            }
        }
    }
}












/////// DEPRECATED - works fine


function sql_ilike() {
    global $DB;
    return $DB->sql_ilike();
}

function sql_fullname($first='firstname', $last='lastname') {
    global $DB;
    return $DB->sql_fullname($first, $last);
}

function sql_concat() {
    global $DB;

    $args = func_get_args();
    return call_user_func_array(array($DB, 'sql_concat'), $args);
}

function sql_empty() {
    global $DB;
    return $DB->sql_empty();
}

function sql_substr() {
    global $DB;
    return $DB->sql_substr();
}

function sql_bitand($int1, $int2) {
    global $DB;
    return $DB->sql_bitand($int1, $int2);
}

function sql_bitnot($int1) {
    global $DB;
    return $DB->sql_bitnot($int1);
}

function sql_bitor($int1, $int2) {
    global $DB;
    return $DB->sql_bitor($int1);

}

function sql_bitxor($int1, $int2) {
    global $DB;
    return $DB->sql_bitxor($int1, $int2);

}

function sql_cast_char2int($fieldname, $text=false) {
    global $DB;
    return $DB->sql_cast_char2int($fieldname, $text);
}

function sql_compare_text($fieldname, $numchars=32) {
    return sql_order_by_text($fieldname, $numchars);
}

function sql_order_by_text($fieldname, $numchars=32) {
    global $DB;
    return $DB->sql_order_by_text($fieldname, $numchars);
}


function sql_concat_join($separator="' '", $elements=array()) {
    global $DB;
    return $DB->sql_concat_join($separator, $elements);
}

function sql_isempty($tablename, $fieldname, $nullablefield, $textfield) {
    global $DB;
    return $DB->sql_isempty($tablename, $fieldname, $nullablefield, $textfield);
}

function sql_isnotempty($tablename, $fieldname, $nullablefield, $textfield) {
    global $DB;
    return $DB->sql_isnotempty($tablename, $fieldname, $nullablefield, $textfield);
}


function begin_sql() {
    global $DB;
    return $DB->begin_sql();
}

function commit_sql() {
    global $DB;
    return $DB->commit_sql();
}

function rollback_sql() {
    global $DB;
    return $DB->rollback_sql();
}

function insert_record($table, $dataobject, $returnid=true, $primarykey='id') {
    global $DB;

    $dataobject = stripslashes_recursive($dataobject);
    return $DB->insert_record($table, $dataobject, $returnid);
}

function update_record($table, $dataobject) {
    global $DB;

    $dataobject = stripslashes_recursive($dataobject);
    return $DB->update_record($table, $dataobject, true);
}

function get_records($table, $field='', $value='', $sort='', $fields='*', $limitfrom='', $limitnum='') {
    global $DB;

    $conditions = array();
    if ($field) {
        $conditions[$field] = stripslashes_recursive($value);
    }

    return $DB->get_records($table, $conditions, $sort, $fields, $limitfrom, $limitnum);
}

function get_record($table, $field1, $value1, $field2='', $value2='', $field3='', $value3='', $fields='*') {
    global $DB;

    $conditions = array();
    if ($field1) {
        $conditions[$field1] = stripslashes_recursive($value1);
    }
    if ($field2) {
        $conditions[$field2] = stripslashes_recursive($value2);
    }
    if ($field3) {
        $conditions[$field3] = stripslashes_recursive($value3);
    }

    return $DB->get_record($table, $conditions, $fields);
}

function set_field($table, $newfield, $newvalue, $field1, $value1, $field2='', $value2='', $field3='', $value3='') {
    global $DB;

    $conditions = array();
    if ($field1) {
        $conditions[$field1] = stripslashes_recursive($value1);
    }
    if ($field2) {
        $conditions[$field2] = stripslashes_recursive($value2);
    }
    if ($field3) {
        $conditions[$field3] = stripslashes_recursive($value3);
    }

    return $DB->set_field($table, $newfield, stripslashes_recursive($newvalue), $conditions);
}

function count_records($table, $field1='', $value1='', $field2='', $value2='', $field3='', $value3='') {
    global $DB;

    $conditions = array();
    if ($field1) {
        $conditions[$field1] = stripslashes_recursive($value1);
    }
    if ($field2) {
        $conditions[$field2] = stripslashes_recursive($value2);
    }
    if ($field3) {
        $conditions[$field3] = stripslashes_recursive($value3);
    }

    return $DB->count_records($table, $conditions);
}

function record_exists($table, $field1='', $value1='', $field2='', $value2='', $field3='', $value3='') {
    global $DB;

    $conditions = array();
    if ($field1) {
        $conditions[$field1] = stripslashes_recursive($value1);
    }
    if ($field2) {
        $conditions[$field2] = stripslashes_recursive($value2);
    }
    if ($field3) {
        $conditions[$field3] = stripslashes_recursive($value3);
    }

    return $DB->record_exists($table, $conditions);
}

function delete_records($table, $field1='', $value1='', $field2='', $value2='', $field3='', $value3='') {
    global $DB;

    $conditions = array();
    if ($field1) {
        $conditions[$field1] = stripslashes_recursive($value1);
    }
    if ($field2) {
        $conditions[$field2] = stripslashes_recursive($value2);
    }
    if ($field3) {
        $conditions[$field3] = stripslashes_recursive($value3);
    }

    return $DB->delete_records($table, $conditions);
}

function get_field($table, $return, $field1, $value1, $field2='', $value2='', $field3='', $value3='') {
    global $DB;

    $conditions = array();
    if ($field1) {
        $conditions[$field1] = stripslashes_recursive($value1);
    }
    if ($field2) {
        $conditions[$field2] = stripslashes_recursive($value2);
    }
    if ($field3) {
        $conditions[$field3] = stripslashes_recursive($value3);
    }

    return $DB->get_field($table, $return, $conditions);
}








///// DELETED - must not be used anymore

function configure_dbconnection() {
    error('configure_dbconnection() removed');
}

function sql_max($field) {
    error('sql_max() removed - use normal sql MAX() instead');
}

function sql_as() {
    error('sql_as() removed - do not use AS for tables at all');
}

function sql_paging_limit($page, $recordsperpage) {
    error('Function sql_paging_limit() is deprecated. Replace it with the correct use of limitfrom, limitnum parameters');
}

function db_uppercase() {
    error('upper() removed - use normal sql UPPER()');
}

function db_lowercase() {
    error('upper() removed - use normal sql LOWER()');
}

function modify_database($sqlfile='', $sqlstring='') {
    error('modify_database() removed - use new XMLDB functions');
}

function where_clause($field1='', $value1='', $field2='', $value2='', $field3='', $value3='') {
    error('where_clause() removed - use new functions with $conditions parameter');
}

function execute_sql_arr($sqlarr, $continue=true, $feedback=true) {
    error('execute_sql_arr() removed');
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))))))||||||||