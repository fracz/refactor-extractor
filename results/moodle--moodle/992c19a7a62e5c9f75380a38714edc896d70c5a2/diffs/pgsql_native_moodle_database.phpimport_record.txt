    public function import_record($table, $dataobject) {
        $dataobject = (array)$dataobject;

        $columns = $this->get_columns($table);
        $cleaned = array();
        $blobs   = array();

        foreach ($dataobject as $field=>$value) {
            if (!isset($columns[$field])) {
                continue;
            }
            if ($columns[$field]->meta_type === 'B') {
                if (!is_null($value)) {
                    $cleaned[$field] = '@#BLOB#@';
                    $blobs[$field] = $value;
                    continue;
                }
            }

            $cleaned[$field] = $value;
        }

        $id = $dataobject['id'];
        $this->insert_record_raw($table, $cleaned, false, true, true);

        foreach ($blobs as $key=>$value) {
            $value = pg_escape_bytea($this->pgsql, $value);
            $sql = "UPDATE {$this->prefix}$table SET $key = '$value'::bytea WHERE id = $id";
            $this->query_start($sql, NULL, SQL_QUERY_UPDATE);
            $result = pg_query($this->pgsql, $sql);
            $this->query_end($result);
            if ($result !== false) {
                pg_free_result($result);
            }
        }

        return true;
    }

    /**
     * Update record in database, as fast as possible, no safety checks, lobs not supported.
     * @param string $table name
     * @param mixed $params data record as object or array
     * @param bool true means repeated updates expected
     * @return bool true
     * @throws dml_exception if error
     */
||||||||    public function import_record($table, $dataobject) {
        $dataobject = (array)$dataobject;

        $columns = $this->get_columns($table);
        $cleaned = array();
        $blobs   = array();

        foreach ($dataobject as $field=>$value) {
            if (!isset($columns[$field])) {
                continue;
            }
            if ($columns[$field]->meta_type === 'B') {
                if (!is_null($value)) {
                    $cleaned[$field] = '@#BLOB#@';
                    $blobs[$field] = $value;
                    continue;
                }
            }

            $cleaned[$field] = $value;
        }

        $this->insert_record_raw($table, $cleaned, false, true, true);
        $id = $dataobject['id'];

        foreach ($blobs as $key=>$value) {
            $value = pg_escape_bytea($this->pgsql, $value);
            $sql = "UPDATE {$this->prefix}$table SET $key = '$value'::bytea WHERE id = $id";
            $this->query_start($sql, NULL, SQL_QUERY_UPDATE);
            $result = pg_query($this->pgsql, $sql);
            $this->query_end($result);
            if ($result !== false) {
                pg_free_result($result);
            }
        }

        return true;
    }

    /**
     * Update record in database, as fast as possible, no safety checks, lobs not supported.
     * @param string $table name
     * @param mixed $params data record as object or array
     * @param bool true means repeated updates expected
     * @return bool true
     * @throws dml_exception if error
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_VAR))
                                    (AST_CONTINUE
                                        (NULL))))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)
            (AST_CONST)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_VAR))
                                    (AST_CONTINUE
                                        (NULL))))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))