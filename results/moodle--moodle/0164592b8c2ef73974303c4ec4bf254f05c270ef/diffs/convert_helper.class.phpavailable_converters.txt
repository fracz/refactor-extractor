||||||||    public static function available_converters() {
        global $CFG;

        $converters = array();
        $plugins    = get_list_of_plugins('backup/converter');
        foreach ($plugins as $name) {
            $classfile = "$CFG->dirroot/backup/converter/$name/converter.class.php";
            $classname = "{$name}_converter";

            if (!file_exists($classfile)) {
                throw new coding_exception("Converter factory error: class file not found $classfile");
            }
            require_once($classfile);

            if (!class_exists($classname)) {
                throw new coding_exception("Converter factory error: class not found $classname");
            }

            if (call_user_func($classname .'::is_available')) {
                $converters[] = $name;
            }
        }

        return $converters;
    }

    /**
     * Detects if the given folder contains an unpacked moodle2 backup
     *
     * @param string $tempdir the name of the backup directory
     * @return boolean true if moodle2 format detected, false otherwise
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (AST_VAR)
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR))))))))
            (AST_INCLUDE_OR_EVAL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))