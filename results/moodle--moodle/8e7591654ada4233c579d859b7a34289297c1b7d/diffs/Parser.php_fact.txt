||||||||	function _fact()
	{
		if ($this->_current_token == "(") {
			$this->_advance();         // eat the "("
			$result = $this->_parenthesizedExpression();
			if ($this->_current_token != ")") {
				throw new Exception("')' token expected.");
			}
			$this->_advance();         // eat the ")"
			return $result;
		}
		// if it's a reference
		if (preg_match('/^\$?[A-Ia-i]?[A-Za-z]\$?[0-9]+$/',$this->_current_token))
		{
			$result = $this->_createTree($this->_current_token, '', '');
			$this->_advance();
			return $result;
		}
		// If it's an external reference (Sheet1!A1 or Sheet1:Sheet2!A1 or Sheet1!$A$1 or Sheet1:Sheet2!$A$1)
		elseif (preg_match("/^" . self::REGEX_SHEET_TITLE_UNQUOTED . "(\:" . self::REGEX_SHEET_TITLE_UNQUOTED . ")?\!\\$?[A-Ia-i]?[A-Za-z]\\$?[0-9]+$/u",$this->_current_token))
		{
			$result = $this->_createTree($this->_current_token, '', '');
			$this->_advance();
			return $result;
		}
		// If it's an external reference ('Sheet1'!A1 or 'Sheet1:Sheet2'!A1 or 'Sheet1'!$A$1 or 'Sheet1:Sheet2'!$A$1)
		elseif (preg_match("/^'" . self::REGEX_SHEET_TITLE_QUOTED . "(\:" . self::REGEX_SHEET_TITLE_QUOTED . ")?'\!\\$?[A-Ia-i]?[A-Za-z]\\$?[0-9]+$/u",$this->_current_token))
		{
			$result = $this->_createTree($this->_current_token, '', '');
			$this->_advance();
			return $result;
		}
		// if it's a range A1:B2 or $A$1:$B$2
		elseif (preg_match('/^(\$)?[A-Ia-i]?[A-Za-z](\$)?[0-9]+:(\$)?[A-Ia-i]?[A-Za-z](\$)?[0-9]+$/',$this->_current_token) or
				preg_match('/^(\$)?[A-Ia-i]?[A-Za-z](\$)?[0-9]+\.\.(\$)?[A-Ia-i]?[A-Za-z](\$)?[0-9]+$/',$this->_current_token))
		{
			// must be an error?
			$result = $this->_createTree($this->_current_token, '', '');
			$this->_advance();
			return $result;
		}
		// If it's an external range (Sheet1!A1:B2 or Sheet1:Sheet2!A1:B2 or Sheet1!$A$1:$B$2 or Sheet1:Sheet2!$A$1:$B$2)
		elseif (preg_match("/^" . self::REGEX_SHEET_TITLE_UNQUOTED . "(\:" . self::REGEX_SHEET_TITLE_UNQUOTED . ")?\!\\$?([A-Ia-i]?[A-Za-z])?\\$?[0-9]+:\\$?([A-Ia-i]?[A-Za-z])?\\$?[0-9]+$/u",$this->_current_token))
		{
			// must be an error?
			//$result = $this->_current_token;
			$result = $this->_createTree($this->_current_token, '', '');
			$this->_advance();
			return $result;
		}
		// If it's an external range ('Sheet1'!A1:B2 or 'Sheet1'!A1:B2 or 'Sheet1'!$A$1:$B$2 or 'Sheet1'!$A$1:$B$2)
		elseif (preg_match("/^'" . self::REGEX_SHEET_TITLE_QUOTED . "(\:" . self::REGEX_SHEET_TITLE_QUOTED . ")?'\!\\$?([A-Ia-i]?[A-Za-z])?\\$?[0-9]+:\\$?([A-Ia-i]?[A-Za-z])?\\$?[0-9]+$/u",$this->_current_token))
		{
			// must be an error?
			//$result = $this->_current_token;
			$result = $this->_createTree($this->_current_token, '', '');
			$this->_advance();
			return $result;
		}
		// If it's a number or a percent
		elseif (is_numeric($this->_current_token))
		{
		    if($this->_lookahead == '%'){
		        $result = $this->_createTree('ptgPercent', $this->_current_token, '');
		    } else {
		        $result = $this->_createTree($this->_current_token, '', '');
		    }
		    $this->_advance();
		    return $result;
		}
		// if it's a function call
		elseif (preg_match("/^[A-Z0-9\xc0-\xdc\.]+$/i",$this->_current_token))
		{
			$result = $this->_func();
			return $result;
		}
		throw new Exception("Syntax error: ".$this->_current_token.
								 ", lookahead: ".$this->_lookahead.
								 ", current char: ".$this->_current_char);
	}

	/**
	 * It parses a function call. It assumes the following rule:
	 * Func -> ( Expr [,Expr]* )
	 *
	 * @access private
	 * @return mixed The parsed ptg'd tree on success
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)
                                        (SCALAR)))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))))))