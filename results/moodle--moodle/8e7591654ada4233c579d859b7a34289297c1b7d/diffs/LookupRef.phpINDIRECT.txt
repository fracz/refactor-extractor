||||||||	public static function INDIRECT($cellAddress=Null, PHPExcel_Cell $pCell = null) {
		$cellAddress	= PHPExcel_Calculation_Functions::flattenSingleValue($cellAddress);
		if (is_null($cellAddress) || $cellAddress === '') {
			return PHPExcel_Calculation_Functions::REF();
		}

		$cellAddress1 = $cellAddress;
		$cellAddress2 = NULL;
		if (strpos($cellAddress,':') !== false) {
			list($cellAddress1,$cellAddress2) = explode(':',$cellAddress);
		}

		if ((!preg_match('/^'.PHPExcel_Calculation::CALCULATION_REGEXP_CELLREF.'$/i', $cellAddress1, $matches)) ||
			((!is_null($cellAddress2)) && (!preg_match('/^'.PHPExcel_Calculation::CALCULATION_REGEXP_CELLREF.'$/i', $cellAddress2, $matches)))) {

			if (!preg_match('/^'.PHPExcel_Calculation::CALCULATION_REGEXP_NAMEDRANGE.'$/i', $cellAddress1, $matches)) {
				return PHPExcel_Calculation_Functions::REF();
			}

			if (strpos($cellAddress,'!') !== false) {
				list($sheetName,$cellAddress) = explode('!',$cellAddress);
				$pSheet = $pCell->getParent()->getParent()->getSheetByName($sheetName);
			} else {
				$pSheet = $pCell->getParent();
			}

			return PHPExcel_Calculation::getInstance()->extractNamedRange($cellAddress, $pSheet, False);
		}

		if (strpos($cellAddress,'!') !== false) {
			list($sheetName,$cellAddress) = explode('!',$cellAddress);
			$pSheet = $pCell->getParent()->getParent()->getSheetByName($sheetName);
		} else {
			$pSheet = $pCell->getParent();
		}

		return PHPExcel_Calculation::getInstance()->extractCellRange($cellAddress, $pSheet, False);
	}	//	function INDIRECT()


	/**
	 * OFFSET
	 *
	 * Returns a reference to a range that is a specified number of rows and columns from a cell or range of cells.
	 * The reference that is returned can be a single cell or a range of cells. You can specify the number of rows and
	 * the number of columns to be returned.
	 *
	 * Excel Function:
	 *		=OFFSET(cellAddress, rows, cols, [height], [width])
	 *
	 * @param	cellAddress		The reference from which you want to base the offset. Reference must refer to a cell or
	 *								range of adjacent cells; otherwise, OFFSET returns the #VALUE! error value.
	 * @param	rows			The number of rows, up or down, that you want the upper-left cell to refer to.
	 *								Using 5 as the rows argument specifies that the upper-left cell in the reference is
	 *								five rows below reference. Rows can be positive (which means below the starting reference)
	 *								or negative (which means above the starting reference).
	 * @param	cols			The number of columns, to the left or right, that you want the upper-left cell of the result
	 *								to refer to. Using 5 as the cols argument specifies that the upper-left cell in the
	 *								reference is five columns to the right of reference. Cols can be positive (which means
	 *								to the right of the starting reference) or negative (which means to the left of the
	 *								starting reference).
	 * @param	height			The height, in number of rows, that you want the returned reference to be. Height must be a positive number.
	 * @param	width			The width, in number of columns, that you want the returned reference to be. Width must be a positive number.
	 * @return	string			A reference to a cell or range of cells
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_VAR)
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_VAR)
                                (AST_VAR))))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_CONST)))))