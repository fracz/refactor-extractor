||||||||	public static function PV($rate = 0, $nper = 0, $pmt = 0, $fv = 0, $type = 0) {
		$rate	= PHPExcel_Calculation_Functions::flattenSingleValue($rate);
		$nper	= PHPExcel_Calculation_Functions::flattenSingleValue($nper);
		$pmt	= PHPExcel_Calculation_Functions::flattenSingleValue($pmt);
		$fv		= PHPExcel_Calculation_Functions::flattenSingleValue($fv);
		$type	= PHPExcel_Calculation_Functions::flattenSingleValue($type);

		// Validate parameters
		if ($type != 0 && $type != 1) {
			return PHPExcel_Calculation_Functions::NaN();
		}

		// Calculate
		if (!is_null($rate) && $rate != 0) {
			return (-$pmt * (1 + $rate * $type) * ((pow(1 + $rate, $nper) - 1) / $rate) - $fv) / pow(1 + $rate, $nper);
		} else {
			return -$fv - $pmt * $nper;
		}
	}	//	function PV()


	/**
	 * RATE
	 *
	 * Returns the interest rate per period of an annuity.
	 * RATE is calculated by iteration and can have zero or more solutions.
	 * If the successive results of RATE do not converge to within 0.0000001 after 20 iterations,
	 * RATE returns the #NUM! error value.
	 *
	 * Excel Function:
	 *		RATE(nper,pmt,pv[,fv[,type[,guess]]])
	 *
	 * @access	public
	 * @category Financial Functions
	 * @param	float	nper		The total number of payment periods in an annuity.
	 * @param	float	pmt			The payment made each period and cannot change over the life
	 *									of the annuity.
	 *								Typically, pmt includes principal and interest but no other
	 *									fees or taxes.
	 * @param	float	pv			The present value - the total amount that a series of future
	 *									payments is worth now.
	 * @param	float	fv			The future value, or a cash balance you want to attain after
	 *									the last payment is made. If fv is omitted, it is assumed
	 *									to be 0 (the future value of a loan, for example, is 0).
	 * @param	integer	type		A number 0 or 1 and indicates when payments are due:
	 *										0 or omitted	At the end of the period.
	 *										1				At the beginning of the period.
	 * @param	float	guess		Your guess for what the rate will be.
	 *									If you omit guess, it is assumed to be 10 percent.
	 * @return	float
	 **/
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_VAR))
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_VAR)))
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))))))))