||||||||	function _writeUrlExternal($row1, $col1, $row2, $col2, $url)
	{
		// Network drives are different. We will handle them separately
		// MS/Novell network drives and shares start with \\
		if (preg_match('[^external:\\\\]', $url)) {
			return; //($this->_writeUrlExternal_net($row1, $col1, $row2, $col2, $url, $str, $format));
		}

		$record	  = 0x01B8;					   // Record identifier
		$length	  = 0x00000;					  // Bytes to follow

		// Strip URL type and change Unix dir separator to Dos style (if needed)
		//
		$url = preg_replace('/^external:/', '', $url);
		$url = preg_replace('/\//', "\\", $url);

		// Determine if the link is relative or absolute:
		//   relative if link contains no dir separator, "somefile.xls"
		//   relative if link starts with up-dir, "..\..\somefile.xls"
		//   otherwise, absolute

		$absolute = 0x00; // relative path
		if ( preg_match('/^[A-Z]:/', $url) ) {
			$absolute = 0x02; // absolute path on Windows, e.g. C:\...
		}
		$link_type			   = 0x01 | $absolute;

		// Determine if the link contains a sheet reference and change some of the
		// parameters accordingly.
		// Split the dir name and sheet name (if it exists)
		$dir_long = $url;
		if (preg_match("/\#/", $url)) {
			$link_type |= 0x08;
		}


		// Pack the link type
		$link_type   = pack("V", $link_type);

		// Calculate the up-level dir count e.g.. (..\..\..\ == 3)
		$up_count	= preg_match_all("/\.\.\\\/", $dir_long, $useless);
		$up_count	= pack("v", $up_count);

		// Store the short dos dir name (null terminated)
		$dir_short   = preg_replace("/\.\.\\\/", '', $dir_long) . "\0";

		// Store the long dir name as a wchar string (non-null terminated)
		$dir_long	   = $dir_long . "\0";

		// Pack the lengths of the dir strings
		$dir_short_len = pack("V", strlen($dir_short)	  );
		$dir_long_len  = pack("V", strlen($dir_long)	   );
		$stream_len	= pack("V", 0);//strlen($dir_long) + 0x06);

		// Pack the undocumented parts of the hyperlink stream
		$unknown1 = pack("H*",'D0C9EA79F9BACE118C8200AA004BA90B02000000'	   );
		$unknown2 = pack("H*",'0303000000000000C000000000000046'			   );
		$unknown3 = pack("H*",'FFFFADDE000000000000000000000000000000000000000');
		$unknown4 = pack("v",  0x03											);

		// Pack the main data stream
		$data		= pack("vvvv", $row1, $row2, $col1, $col2) .
						  $unknown1	 .
						  $link_type	.
						  $unknown2	 .
						  $up_count	 .
						  $dir_short_len.
						  $dir_short	.
						  $unknown3	 .
						  $stream_len   ;/*.
						  $dir_long_len .
						  $unknown4	 .
						  $dir_long	 .
						  $sheet_len	.
						  $sheet		;*/

		// Pack the header data
		$length   = strlen($data);
		$header   = pack("vv", $record, $length);

		// Write the packed data
		$this->_append($header. $data);
		return 0;
	}

	/**
	 * This method is used to set the height and format for a row.
	 *
	 * @param integer $row	The row to set
	 * @param integer $height Height we are giving to the row.
	 *						Use null to set XF without setting height
	 * @param integer $xfIndex  The optional cell style Xf index to apply to the columns
	 * @param bool	$hidden The optional hidden attribute
	 * @param integer $level  The optional outline level for row, in range [0,7]
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_VAR))
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR))
                (AST_VAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (SCALAR)))