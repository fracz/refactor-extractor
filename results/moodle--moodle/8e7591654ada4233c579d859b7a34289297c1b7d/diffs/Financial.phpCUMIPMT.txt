||||||||	public static function CUMIPMT($rate, $nper, $pv, $start, $end, $type = 0) {
		$rate	= PHPExcel_Calculation_Functions::flattenSingleValue($rate);
		$nper	= (int) PHPExcel_Calculation_Functions::flattenSingleValue($nper);
		$pv		= PHPExcel_Calculation_Functions::flattenSingleValue($pv);
		$start	= (int) PHPExcel_Calculation_Functions::flattenSingleValue($start);
		$end	= (int) PHPExcel_Calculation_Functions::flattenSingleValue($end);
		$type	= (int) PHPExcel_Calculation_Functions::flattenSingleValue($type);

		// Validate parameters
		if ($type != 0 && $type != 1) {
			return PHPExcel_Calculation_Functions::NaN();
		}
		if ($start < 1 || $start > $end) {
			return PHPExcel_Calculation_Functions::VALUE();
		}

		// Calculate
		$interest = 0;
		for ($per = $start; $per <= $end; ++$per) {
			$interest += self::IPMT($rate, $per, $nper, $pv, 0, $type);
		}

		return $interest;
	}	//	function CUMIPMT()


	/**
	 * CUMPRINC
	 *
	 * Returns the cumulative principal paid on a loan between the start and end periods.
	 *
	 * Excel Function:
	 *		CUMPRINC(rate,nper,pv,start,end[,type])
	 *
	 * @access	public
	 * @category Financial Functions
	 * @param	float	$rate	The Interest rate
	 * @param	integer	$nper	The total number of payment periods
	 * @param	float	$pv		Present Value
	 * @param	integer	$start	The first period in the calculation.
	 *							Payment periods are numbered beginning with 1.
	 * @param	integer	$end	The last period in the calculation.
	 * @param	integer	$type	A number 0 or 1 and indicates when payments are due:
	 *								0 or omitted	At the end of the period.
	 *								1				At the beginning of the period.
	 * @return	float
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))