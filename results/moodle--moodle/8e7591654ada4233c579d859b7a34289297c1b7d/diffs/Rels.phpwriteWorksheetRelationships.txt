||||||||	public function writeWorksheetRelationships(PHPExcel_Worksheet $pWorksheet = null, $pWorksheetId = 1, $includeCharts = FALSE)
	{
		// Create XML writer
		$objWriter = null;
		if ($this->getParentWriter()->getUseDiskCaching()) {
			$objWriter = new PHPExcel_Shared_XMLWriter(PHPExcel_Shared_XMLWriter::STORAGE_DISK, $this->getParentWriter()->getDiskCachingDirectory());
		} else {
			$objWriter = new PHPExcel_Shared_XMLWriter(PHPExcel_Shared_XMLWriter::STORAGE_MEMORY);
		}

		// XML header
		$objWriter->startDocument('1.0','UTF-8','yes');

		// Relationships
		$objWriter->startElement('Relationships');
		$objWriter->writeAttribute('xmlns', 'http://schemas.openxmlformats.org/package/2006/relationships');

			// Write drawing relationships?
			$d = 0;
			if ($includeCharts) {
				$charts = $pWorksheet->getChartCollection();
			} else {
				$charts = array();
			}
			if (($pWorksheet->getDrawingCollection()->count() > 0) ||
				(count($charts) > 0)) {
				$this->_writeRelationship(
					$objWriter,
					++$d,
					'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
					'../drawings/drawing' . $pWorksheetId . '.xml'
				);
			}

			// Write chart relationships?
//			$chartCount = 0;
//			$charts = $pWorksheet->getChartCollection();
//			echo 'Chart Rels: ' , count($charts) , '<br />';
//			if (count($charts) > 0) {
//				foreach($charts as $chart) {
//					$this->_writeRelationship(
//						$objWriter,
//						++$d,
//						'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart',
//						'../charts/chart' . ++$chartCount . '.xml'
//					);
//				}
//			}
//
			// Write hyperlink relationships?
			$i = 1;
			foreach ($pWorksheet->getHyperlinkCollection() as $hyperlink) {
				if (!$hyperlink->isInternal()) {
					$this->_writeRelationship(
						$objWriter,
						'_hyperlink_' . $i,
						'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',
						$hyperlink->getUrl(),
						'External'
					);

					++$i;
				}
			}

			// Write comments relationship?
			$i = 1;
			if (count($pWorksheet->getComments()) > 0) {
				$this->_writeRelationship(
					$objWriter,
					'_comments_vml' . $i,
					'http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing',
					'../drawings/vmlDrawing' . $pWorksheetId . '.vml'
				);

				$this->_writeRelationship(
					$objWriter,
					'_comments' . $i,
					'http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments',
					'../comments' . $pWorksheetId . '.xml'
				);
			}

			// Write header/footer relationship?
			$i = 1;
			if (count($pWorksheet->getHeaderFooter()->getImages()) > 0) {
				$this->_writeRelationship(
					$objWriter,
					'_headerfooter_vml' . $i,
					'http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing',
					'../drawings/vmlDrawingHF' . $pWorksheetId . '.vml'
				);
			}

		$objWriter->endElement();

		// Return
		return $objWriter->getData();
	}

	/**
	 * Write drawing relationships to XML format
	 *
	 * @param 	PHPExcel_Worksheet	$pWorksheet
	 * @param	int					&$chartRef		Chart ID
	 * @param	boolean				$includeCharts	Flag indicating if we should write charts
	 * @return 	string 				XML Output
	 * @throws 	Exception
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_PRE_INC
                            (AST_VAR))
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)))
                        (AST_PRE_INC
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))