||||||||	public static function DECTOBIN($x, $places=NULL) {
		$x	= PHPExcel_Calculation_Functions::flattenSingleValue($x);
		$places	= PHPExcel_Calculation_Functions::flattenSingleValue($places);

		if (is_bool($x)) {
			if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE) {
				$x = (int) $x;
			} else {
				return PHPExcel_Calculation_Functions::VALUE();
			}
		}
		$x = (string) $x;
		if (strlen($x) > preg_match_all('/[-0123456789.]/',$x,$out)) {
			return PHPExcel_Calculation_Functions::VALUE();
		}
		$x = (string) floor($x);
		$r = decbin($x);
		if (strlen($r) == 32) {
			//	Two's Complement
			$r = substr($r,-10);
		} elseif (strlen($r) > 11) {
			return PHPExcel_Calculation_Functions::NaN();
		}

		return self::_nbrConversionFormat($r,$places);
	}	//	function DECTOBIN()


	/**
	 * DECTOHEX
	 *
	 * Return a decimal value as hex.
	 *
	 * Excel Function:
	 *		DEC2HEX(x[,places])
	 *
	 * @access	public
	 * @category Engineering Functions
	 * @param	string		$x		The decimal integer you want to convert. If number is negative,
	 *								places is ignored and DEC2HEX returns a 10-character (40-bit)
	 *								hexadecimal number in which the most significant bit is the sign
	 *								bit. The remaining 39 bits are magnitude bits. Negative numbers
	 *								are represented using two's-complement notation.
	 *								If number < -549,755,813,888 or if number > 549,755,813,887,
	 *								DEC2HEX returns the #NUM! error value.
	 *								If number is nonnumeric, DEC2HEX returns the #VALUE! error value.
	 *								If DEC2HEX requires more than places characters, it returns the
	 *								#NUM! error value.
	 * @param	integer		$places	The number of characters to use. If places is omitted, DEC2HEX uses
	 *								the minimum number of characters necessary. Places is useful for
	 *								padding the return value with leading 0s (zeros).
	 *								If places is not an integer, it is truncated.
	 *								If places is nonnumeric, DEC2HEX returns the #VALUE! error value.
	 *								If places is zero or negative, DEC2HEX returns the #NUM! error value.
	 * @return	string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CAST
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)))))