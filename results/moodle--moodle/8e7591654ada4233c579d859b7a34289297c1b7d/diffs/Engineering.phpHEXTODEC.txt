||||||||	public static function HEXTODEC($x) {
		$x	= PHPExcel_Calculation_Functions::flattenSingleValue($x);

		if (is_bool($x)) {
			return PHPExcel_Calculation_Functions::VALUE();
		}
		$x = (string) $x;
		if (strlen($x) > preg_match_all('/[0123456789ABCDEF]/',strtoupper($x),$out)) {
			return PHPExcel_Calculation_Functions::NaN();
		}
		return hexdec($x);
	}	//	function HEXTODEC()


	/**
	 * HEXTOOCT
	 *
	 * Return a hex value as octal.
	 *
	 * Excel Function:
	 *		HEX2OCT(x[,places])
	 *
	 * @access	public
	 * @category Engineering Functions
	 * @param	string		$x			The hexadecimal number you want to convert. Number cannot
	 *									contain more than 10 characters. The most significant bit of
	 *									number is the sign bit. The remaining 39 bits are magnitude
	 *									bits. Negative numbers are represented using two's-complement
	 *									notation.
	 *									If number is negative, HEX2OCT ignores places and returns a
	 *									10-character octal number.
	 *									If number is negative, it cannot be less than FFE0000000, and
	 *									if number is positive, it cannot be greater than 1FFFFFFF.
	 *									If number is not a valid hexadecimal number, HEX2OCT returns
	 *									the #NUM! error value.
	 *									If HEX2OCT requires more than places characters, it returns
	 *									the #NUM! error value.
	 * @param	integer		$places		The number of characters to use. If places is omitted, HEX2OCT
	 *									uses the minimum number of characters necessary. Places is
	 *									useful for padding the return value with leading 0s (zeros).
	 *									If places is not an integer, it is truncated.
	 *									If places is nonnumeric, HEX2OCT returns the #VALUE! error
	 *									value.
	 *									If places is negative, HEX2OCT returns the #NUM! error value.
	 * @return	string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))