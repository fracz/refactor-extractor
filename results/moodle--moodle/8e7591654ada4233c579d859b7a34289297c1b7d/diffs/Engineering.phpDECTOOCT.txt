||||||||	public static function DECTOOCT($x, $places=null) {
		$x	= PHPExcel_Calculation_Functions::flattenSingleValue($x);
		$places	= PHPExcel_Calculation_Functions::flattenSingleValue($places);

		if (is_bool($x)) {
			if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE) {
				$x = (int) $x;
			} else {
				return PHPExcel_Calculation_Functions::VALUE();
			}
		}
		$x = (string) $x;
		if (strlen($x) > preg_match_all('/[-0123456789.]/',$x,$out)) {
			return PHPExcel_Calculation_Functions::VALUE();
		}
		$x = (string) floor($x);
		$r = decoct($x);
		if (strlen($r) == 11) {
			//	Two's Complement
			$r = substr($r,-10);
		}

		return self::_nbrConversionFormat($r,$places);
	}	//	function DECTOOCT()


	/**
	 * HEXTOBIN
	 *
	 * Return a hex value as binary.
	 *
	 * Excel Function:
	 *		HEX2BIN(x[,places])
	 *
	 * @access	public
	 * @category Engineering Functions
	 * @param	string		$x			the hexadecimal number you want to convert. Number cannot
	 *									contain more than 10 characters. The most significant bit of
	 *									number is the sign bit (40th bit from the right). The remaining
	 *									9 bits are magnitude bits. Negative numbers are represented
	 *									using two's-complement notation.
	 *									If number is negative, HEX2BIN ignores places and returns a
	 *									10-character binary number.
	 *									If number is negative, it cannot be less than FFFFFFFE00, and
	 *									if number is positive, it cannot be greater than 1FF.
	 *									If number is not a valid hexadecimal number, HEX2BIN returns
	 *									the #NUM! error value.
	 *									If HEX2BIN requires more than places characters, it returns
	 *									the #NUM! error value.
	 * @param	integer		$places		The number of characters to use. If places is omitted,
	 *									HEX2BIN uses the minimum number of characters necessary. Places
	 *									is useful for padding the return value with leading 0s (zeros).
	 *									If places is not an integer, it is truncated.
	 *									If places is nonnumeric, HEX2BIN returns the #VALUE! error value.
	 *									If places is negative, HEX2BIN returns the #NUM! error value.
	 * @return	string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CAST
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)))))