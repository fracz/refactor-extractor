||||||||	public function getCalculatedValue($resetLog = TRUE)
	{
//		echo 'Cell '.$this->getCoordinate().' value is a '.$this->_dataType.' with a value of '.$this->getValue().'<br />';
		if ($this->_dataType == PHPExcel_Cell_DataType::TYPE_FORMULA) {
			try {
//				echo 'Cell value for '.$this->getCoordinate().' is a formula: Calculating value<br />';
				$result = PHPExcel_Calculation::getInstance()->calculateCellValue($this,$resetLog);
//				echo $this->getCoordinate().' calculation result is '.$result.'<br />';
			} catch ( Exception $ex ) {
				if (($ex->getMessage() === 'Unable to access External Workbook') && ($this->_calculatedValue !== NULL)) {
//					echo 'Returning fallback value of '.$this->_calculatedValue.' for cell '.$this->getCoordinate().'<br />';
					return $this->_calculatedValue; // Fallback for calculations referencing external files.
				}
//				echo 'Calculation Exception: '.$ex->getMessage().'<br />';
				$result = '#N/A';
				throw(
					new PHPExcel_Exception(
						$this->getParent()->getTitle().'!'.$this->getCoordinate().' -> '.$ex->getMessage()
					)
				);
			}

			if ($result === '#Not Yet Implemented') {
//				echo 'Returning fallback value of '.$this->_calculatedValue.' for cell '.$this->getCoordinate().'<br />';
				return $this->_calculatedValue; // Fallback if calculation engine does not support the formula.
			}
//			echo 'Returning calculated value of '.$result.' for cell '.$this->getCoordinate().'<br />';
			return $result;
		}

//		if ($this->_value === NULL) {
//			echo 'Cell '.$this->getCoordinate().' has no value, formula or otherwise<br />';
//			return NULL;
//		}
//		echo 'Cell value for '.$this->getCoordinate().' is not a formula: Returning data value of '.$this->_value.'<br />';
		return $this->_value;
	}

	/**
	 *	Set old calculated value (cached)
	 *
	 *	@param	mixed $pValue	Value
	 *	@return	PHPExcel_Cell
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (AST_PROP
                                                    (AST_VAR))
                                                (AST_CONST)))
                                        (
                                            (AST_RETURN
                                                (AST_PROP
                                                    (AST_VAR))))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_METHOD_CALL
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR)))
                                                            (SCALAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))))
                    (NULL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_RETURN
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))