||||||||	public static function CEILING($number, $significance = NULL) {
		$number			= PHPExcel_Calculation_Functions::flattenSingleValue($number);
		$significance	= PHPExcel_Calculation_Functions::flattenSingleValue($significance);

		if ((is_null($significance)) &&
			(PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC)) {
			$significance = $number/abs($number);
		}

		if ((is_numeric($number)) && (is_numeric($significance))) {
			if ($significance == 0.0) {
				return 0.0;
			} elseif (self::SIGN($number) == self::SIGN($significance)) {
				return ceil($number / $significance) * $significance;
			} else {
				return PHPExcel_Calculation_Functions::NaN();
			}
		}
		return PHPExcel_Calculation_Functions::VALUE();
	}	//	function CEILING()


	/**
	 * COMBIN
	 *
	 * Returns the number of combinations for a given number of items. Use COMBIN to
	 *		determine the total possible number of groups for a given number of items.
	 *
	 * Excel Function:
	 *		COMBIN(numObjs,numInSet)
	 *
	 * @access	public
	 * @category Mathematical and Trigonometric Functions
	 * @param	int		$numObjs	Number of different objects
	 * @param	int		$numInSet	Number of objects in each combination
	 * @return	int		Number of combinations
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_STATIC_CALL)
                    (AST_CLASS_CONST
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_RETURN
                                (SCALAR))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_VAR))))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL))))))))
    (AST_RETURN
        (AST_STATIC_CALL)))