||||||||	public static function AMORLINC($cost, $purchased, $firstPeriod, $salvage, $period, $rate, $basis=0) {
		$cost			= PHPExcel_Calculation_Functions::flattenSingleValue($cost);
		$purchased		= PHPExcel_Calculation_Functions::flattenSingleValue($purchased);
		$firstPeriod	= PHPExcel_Calculation_Functions::flattenSingleValue($firstPeriod);
		$salvage		= PHPExcel_Calculation_Functions::flattenSingleValue($salvage);
		$period			= PHPExcel_Calculation_Functions::flattenSingleValue($period);
		$rate			= PHPExcel_Calculation_Functions::flattenSingleValue($rate);
		$basis			= (is_null($basis))	? 0 :	(int) PHPExcel_Calculation_Functions::flattenSingleValue($basis);

		$fOneRate = $cost * $rate;
		$fCostDelta = $cost - $salvage;
		//	Note, quirky variation for leap years on the YEARFRAC for this function
		$purchasedYear = PHPExcel_Calculation_DateTime::YEAR($purchased);
		$yearFrac = PHPExcel_Calculation_DateTime::YEARFRAC($purchased, $firstPeriod, $basis);

		if (($basis == 1) && ($yearFrac < 1) && (PHPExcel_Calculation_DateTime::_isLeapYear($purchasedYear))) {
			$yearFrac *= 365 / 366;
		}

		$f0Rate = $yearFrac * $rate * $cost;
		$nNumOfFullPeriods = intval(($cost - $salvage - $f0Rate) / $fOneRate);

		if ($period == 0) {
			return $f0Rate;
		} elseif ($period <= $nNumOfFullPeriods) {
			return $fOneRate;
		} elseif ($period == ($nNumOfFullPeriods + 1)) {
            return ($fCostDelta - $fOneRate * $nNumOfFullPeriods - $f0Rate);
		} else {
			return 0.0;
		}
	}	//	function AMORLINC()


	/**
	 * COUPDAYBS
	 *
	 * Returns the number of days from the beginning of the coupon period to the settlement date.
	 *
	 * Excel Function:
	 *		COUPDAYBS(settlement,maturity,frequency[,basis])
	 *
	 * @access	public
	 * @category Financial Functions
	 * @param	mixed	settlement	The security's settlement date.
	 *								The security settlement date is the date after the issue
	 *								date when the security is traded to the buyer.
	 * @param	mixed	maturity	The security's maturity date.
	 *								The maturity date is the date when the security expires.
	 * @param	mixed	frequency	the number of coupon payments per year.
	 *									Valid frequency values are:
	 *										1	Annual
	 *										2	Semi-Annual
	 *										4	Quarterly
	 *									If working in Gnumeric Mode, the following frequency options are
	 *									also available
	 *										6	Bimonthly
	 *										12	Monthly
	 * @param	integer		basis		The type of day count to use.
	 *										0 or omitted	US (NASD) 30/360
	 *										1				Actual/actual
	 *										2				Actual/360
	 *										3				Actual/365
	 *										4				European 30/360
	 * @return	float
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)
            (AST_CAST
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (SCALAR))))))