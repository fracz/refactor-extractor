||||||||	public static function ATAN2($xCoordinate = NULL, $yCoordinate = NULL) {
		$xCoordinate	= PHPExcel_Calculation_Functions::flattenSingleValue($xCoordinate);
		$yCoordinate	= PHPExcel_Calculation_Functions::flattenSingleValue($yCoordinate);

		$xCoordinate	= ($xCoordinate !== NULL)	? $xCoordinate : 0.0;
		$yCoordinate	= ($yCoordinate !== NULL)	? $yCoordinate : 0.0;

		if (((is_numeric($xCoordinate)) || (is_bool($xCoordinate))) &&
			((is_numeric($yCoordinate)))  || (is_bool($yCoordinate))) {
			$xCoordinate	= (float) $xCoordinate;
			$yCoordinate	= (float) $yCoordinate;

			if (($xCoordinate == 0) && ($yCoordinate == 0)) {
				return PHPExcel_Calculation_Functions::DIV0();
			}

			return atan2($yCoordinate, $xCoordinate);
		}
		return PHPExcel_Calculation_Functions::VALUE();
	}	//	function ATAN2()


	/**
	 * CEILING
	 *
	 * Returns number rounded up, away from zero, to the nearest multiple of significance.
	 *		For example, if you want to avoid using pennies in your prices and your product is
	 *		priced at $4.42, use the formula =CEILING(4.42,0.05) to round prices up to the
	 *		nearest nickel.
	 *
	 * Excel Function:
	 *		CEILING(number[,significance])
	 *
	 * @access	public
	 * @category Mathematical and Trigonometric Functions
	 * @param	float	$number			The number you want to round.
	 * @param	float	$significance	The multiple to which you want to round.
	 * @return	float	Rounded Number
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL)))))
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_STATIC_CALL)))