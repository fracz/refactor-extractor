||||||||	public static function HEXTOOCT($x, $places=null) {
		$x	= PHPExcel_Calculation_Functions::flattenSingleValue($x);
		$places	= PHPExcel_Calculation_Functions::flattenSingleValue($places);

		if (is_bool($x)) {
			return PHPExcel_Calculation_Functions::VALUE();
		}
		$x = (string) $x;
		if (strlen($x) > preg_match_all('/[0123456789ABCDEF]/',strtoupper($x),$out)) {
			return PHPExcel_Calculation_Functions::NaN();
		}
		$octVal = decoct(hexdec($x));

		return self::_nbrConversionFormat($octVal,$places);
	}	//	function HEXTOOCT()


	/**
	 * OCTTOBIN
	 *
	 * Return an octal value as binary.
	 *
	 * Excel Function:
	 *		OCT2BIN(x[,places])
	 *
	 * @access	public
	 * @category Engineering Functions
	 * @param	string		$x			The octal number you want to convert. Number may not
	 *									contain more than 10 characters. The most significant
	 *									bit of number is the sign bit. The remaining 29 bits
	 *									are magnitude bits. Negative numbers are represented
	 *									using two's-complement notation.
	 *									If number is negative, OCT2BIN ignores places and returns
	 *									a 10-character binary number.
	 *									If number is negative, it cannot be less than 7777777000,
	 *									and if number is positive, it cannot be greater than 777.
	 *									If number is not a valid octal number, OCT2BIN returns
	 *									the #NUM! error value.
	 *									If OCT2BIN requires more than places characters, it
	 *									returns the #NUM! error value.
	 * @param	integer		$places		The number of characters to use. If places is omitted,
	 *									OCT2BIN uses the minimum number of characters necessary.
	 *									Places is useful for padding the return value with
	 *									leading 0s (zeros).
	 *									If places is not an integer, it is truncated.
	 *									If places is nonnumeric, OCT2BIN returns the #VALUE!
	 *									error value.
	 *									If places is negative, OCT2BIN returns the #NUM! error
	 *									value.
	 * @return	string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)))))