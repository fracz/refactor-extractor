    public static function raise_error($string, $module, $continue=null) {
        if (defined('FULLME') && FULLME == 'cron') {
            debugging(get_string($string, $module));
            return false;
        }
        global $SESSION;
        unset($SESSION->portfolio);
        print_error($string, $module, $continue);
    }
}

/**
* event handler for the portfolio_send event
*/
function portfolio_handle_event($eventdata) {
    global $CFG;
    require_once($CFG->dirroot . '/' . $eventdata->instancefile);
    require_once($CFG->dirroot . '/' . $eventdata->callerfile);
    $exporter = unserialize(serialize($eventdata));
    $exporter->process_stage_package();
    $exporter->process_stage_send();
    $exporter->process_stage_cleanup();
    return true;
}

?>||||||||    public static function raise_error($string, $module='moodle', $continue=null) {
        if (defined('FULLME') && FULLME == 'cron') {
            debugging(get_string($string, $module));
            return false;
        }
        global $SESSION;
        unset($SESSION->portfolio);
        print_error($string, $module, $continue);
    }
}

class portfolio_instance_select extends moodleform {

    private $caller;

    function definition() {
        $this->caller = $this->_customdata['caller'];
        $options = portfolio_instance_select(
            portfolio_instances(),
            $this->caller->supported_formats(),
            get_class($this->caller),
            'instance',
            true,
            true
        );
        if (empty($options)) {
            portfolio_exporter::raise_error('noavailableplugins', 'portfolio');
        }
        $mform =& $this->_form;
        $mform->addElement('select', 'instance', get_string('selectplugin', 'portfolio'), $options);
        $this->add_action_buttons(true, get_string('next'));
    }
}

/**
* event handler for the portfolio_send event
*/
function portfolio_handle_event($eventdata) {
    global $CFG;
    require_once($CFG->dirroot . '/' . $eventdata->instancefile);
    require_once($CFG->dirroot . '/' . $eventdata->callerfile);
    $exporter = unserialize(serialize($eventdata));
    $exporter->process_stage_package();
    $exporter->process_stage_send();
    $exporter->process_stage_cleanup();
    return true;
}

?>||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_GLOBAL
        (AST_VAR))
    (AST_UNSET
        (AST_PROP
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_GLOBAL
        (AST_VAR))
    (AST_UNSET
        (AST_PROP
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR))))