    protected function load_section_activities(navigation_node $sectionnode, $sectionnumber, course_modinfo $modinfo) {
        if (!array_key_exists($sectionnumber, $modinfo->sections)) {
            return true;
        }

        $activities = array();

        foreach ($modinfo->sections[$sectionnumber] as $cmid) {
            $cm = $modinfo->cms[$cmid];
            if (!$cm->uservisible) {
                continue;
            }
            if ($cm->icon) {
                $icon = new pix_icon($cm->icon, get_string('modulename', $cm->modname), $cm->iconcomponent);
            } else {
                $icon = new pix_icon('icon', get_string('modulename', $cm->modname), $cm->modname);
            }
            $url = $cm->get_url();
            $activitynode = $sectionnode->add(format_string($cm->name), $url, navigation_node::TYPE_ACTIVITY, null, $cm->id, $icon);
            $activitynode->title(get_string('modulename', $cm->modname));
            $activitynode->hidden = (!$cm->visible);
            if (!$url) {
                // Do not show activities that don't have links!
                $activitynode->display = false;
            } else if ($this->module_extends_navigation($cm->modname)) {
                $activitynode->nodetype = navigation_node::NODETYPE_BRANCH;
            }
            $activities[$cmid] = $activitynode;
        }

        return $activities;
    }
    /**
     * Loads a stealth module from unavailable section
     * @param navigation_node $coursenode
     * @param stdClass $modinfo
     * @return navigation_node or null if not accessible
     */
||||||||    protected function load_section_activities(navigation_node $sectionnode, $sectionnumber, $activities) {

        if ($activities instanceof course_modinfo) {
            debugging('global_navigation::load_section_activities argument 3 should now recieve an array of activites. See that method for an example.', DEBUG_DEVELOPER);
            list($sections, $activities) = $this->generate_sections_and_activities($activities->course);
        }

        $activitynodes = array();
        foreach ($activities as $activity) {
            if ($activity->section != $sectionnumber) {
                continue;
            }
            if ($activity->icon) {
                $icon = new pix_icon($activity->icon, get_string('modulename', $activity->modname), $activity->iconcomponent);
            } else {
                $icon = new pix_icon('icon', get_string('modulename', $activity->modname), $activity->modname);
            }
            $activitynode = $sectionnode->add(format_string($activity->name), $activity->url, navigation_node::TYPE_ACTIVITY, null, $activity->id, $icon);
            $activitynode->title(get_string('modulename', $activity->modname));
            $activitynode->hidden = $activity->hidden;
            $activitynode->display = $activity->display;
            $activitynode->nodetype = $activity->nodetype;
            $activitynodes[$activity->id] = $activitynode;
        }

        return $activitynodes;
    }
    /**
     * Loads a stealth module from unavailable section
     * @param navigation_node $coursenode
     * @param stdClass $modinfo
     * @return navigation_node or null if not accessible
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_PROP
                                        (AST_VAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CLASS_CONST
                                            (SCALAR)))))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_PROP
                                        (AST_VAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))