||||||||    function get_original_filename() {
        if (!empty($this->inputname) && count($this->files) == 1) {
            return $this->files[$this->inputname]['originalname'];
        }
        return false;
    }
}

/**************************************************************************************
THESE FUNCTIONS ARE OUTSIDE THE CLASS BECAUSE THEY NEED TO BE CALLED FROM OTHER PLACES.
FOR EXAMPLE CLAM_HANDLE_INFECTED_FILE AND CLAM_REPLACE_INFECTED_FILE USED FROM CRON
UPLOAD_PRINT_FORM_FRAGMENT DOESN'T REALLY BELONG IN THE CLASS BUT CERTAINLY IN THIS FILE
***************************************************************************************/


/**
 * This function prints out a number of upload form elements
 * @param $numfiles - the number of elements required (optional, defaults to 1)
 * @param $names - array of element names to use (optional, defaults to FILE_n)
 * @param $descriptions - array of strings to be printed out before each file bit.
 * @param $uselabels - whether to output text fields for file descriptions or not (optional, defaults to false)
 * @param $labelnames - array of element names to use for labels (optional, defaults to LABEL_n)
 * @param $coursebytes
 * @param $modbytes - these last two are used to calculate upload max size ( using get_max_upload_file_size)
 * @param $return - whether to return the string (defaults to false - string is echoed)
 */
function upload_print_form_fragment($numfiles=1,$names=null,$descriptions=null,$uselabels=false,$labelnames=null,$coursebytes=0,$modbytes=0,$return=false) {
    global $CFG;
    $maxbytes = get_max_upload_file_size($CFG->maxbytes,$coursebytes,$modbytes);
    $str = '<input type="hidden" name="MAX_FILE_SIZE" value="'.$maxbytes.'" />'."\n";
    for ($i = 0; $i < $numfiles; $i++) {
        if (is_array($descriptions) && !empty($descriptions[$i])) {
            $str .= '<b>'.$descriptions[$i].'</b><br />';
        }
        $str .= '<input type="file" size="50" name="'.((is_array($names) && !empty($names[$i])) ? $names[$i] : 'FILE_'.$i).'" /><br />'."\n";
        if ($uselabels) {
            $str .= get_string('uploadlabel').' <input type="text" size="50" name="'
                .((is_array($labelnames) && !empty($labelnames[$i])) ? $labelnames[$i] : 'LABEL_'.$i)
                .'" /><br /><br />'."\n";
        }
    }
    if ($return) {
        return $str;
    }
    else {
        echo $str;
    }
}


/**
 * Deals with an infected file - either moves it to a quarantinedir
 * (specified in CFG->quarantinedir) or deletes it.
 * If moving it fails, it deletes it.
 * @param file full path to the file
 * @param userid - if not used, defaults to $USER->id (there in case called from cron)
 * @param basiconly - admin level reporting or user level reporting.
 * @return a string of what it did.
 */
function clam_handle_infected_file($file,$userid=0,$basiconly=false) {

    global $CFG,$USER;
    if ($USER && !$userid) {
        $userid = $USER->id;
    }
    $delete = true;
    if (file_exists($CFG->quarantinedir) && is_dir($CFG->quarantinedir) && is_writable($CFG->quarantinedir)) {
        $now = date('YmdHis');
        if (rename($file,$CFG->quarantinedir.'/'.$now.'-user-'.$userid.'-infected')) {
            $delete = false;
            if ($basiconly) {
                $notice .= "\n".get_string('clammovedfilebasic');
            }
            else {
                $notice .= "\n".get_string('clammovedfile','moodle',$CFG->quarantinedir.'/'.$now.'-user-'.$userid.'-infected');
            }
        }
        else {
            if ($basiconly) {
                $notice .= "\n".get_string('clamdeletedfile');
            }
            else {
                $notice .= "\n".get_string('clamquarantinedirfailed','moodle',$CFG->quarantinedir);
            }
        }
    }
    else {
        if ($basiconly) {
            $notice .= "\n".get_string('clamdeletedfile');
        }
        else {
            $notice .= "\n".get_string('clamquarantinedirfailed','moodle',$CFG->quarantinedir);
        }
    }
    if ($delete) {
        if (unlink($file)) {
            $notice .= "\n".get_string('clamdeletedfile');
        }
        else {
            if ($basiconly) {
                // still tell the user the file has been deleted. this is only for admins.
                $notice .= "\n".get_string('clamdeletedfile');
            }
            else {
                $notice .= "\n".get_string('clamdeletedfilefailed');
            }
        }
    }
    return $notice;
}

/**
 * Replaces the given file with a string to notify that the original file had a virus.
 * This is to avoid missing files but could result in the wrong content-type.
 * @param file - full path to the file.
 */
function clam_replace_infected_file($file) {
    $newcontents = get_string('virusplaceholder');
    if (!$f = fopen($file,'w')) {
        return false;
    }
    if (!fwrite($f,$newcontents)) {
        return false;
    }
    return true;
}


/**
 * If $CFG->runclamonupload is set, we scan a given file. (called from preprocess_files)
 * This function will add on a uploadlog index in $file.
 * @param $file - the file to scan from $files. or an absolute path to a file.
 * @return 1 if good, 0 if something goes wrong (opposite from actual error code from clam)
 */
function clam_scan_file(&$file,$course) {
    global $CFG,$USER;

    if (is_array($file) && is_uploaded_file($file['tmp_name'])) { // it's from $_FILES
        $appendlog = true;
        $fullpath = $file['tmp_name'];
    }
    else if (file_exists($file)) { // it's a path to somewhere on the filesystem!
        $fullpath = $file;
    }
    else {
        return false; // erm, what is this supposed to be then, huh?
    }

    if (!$CFG->pathtoclam || !file_exists($CFG->pathtoclam) || !is_executable($CFG->pathtoclam)) {
        $newreturn = 1;
        $notice = get_string('clamlost','moodle',$CFG->pathtoclam);
        if ($CFG->clamfailureonupload == 'actlikevirus') {
            $notice .= "\n".get_string('clamlostandactinglikevirus');
            $notice .= "\n".clam_handle_infected_file($fullpath);
            $newreturn = false;
        }
        clam_mail_admins($notice);
        return $newreturn; // return 1 if we're allowing clam failures
    }

    $cmd = $CFG->pathtoclam.' '.$fullpath." 2>&1";

    // before we do anything we need to change perms so that clamscan can read the file (clamdscan won't work otherwise)
    chmod($fullpath,0644);

    exec($cmd,$output,$return);


    switch ($return) {
    case 0: // glee! we're ok.
        return 1; // translate clam return code into reasonable return code consistent with everything else.
    case 1:  // bad wicked evil, we have a virus.
        if (!empty($course)) {
            $info->course = $course->fullname;
        }
        else {
            $info->course = 'No course';
        }
        $info->user = $USER->firstname.' '.$USER->lastname;
        $notice = get_string('virusfound','moodle',$info);
        $notice .= "\n\n".implode("\n",$output);
        $notice .= "\n\n".clam_handle_infected_file($fullpath);
        clam_mail_admins($notice);
        if ($appendlog) {
            $info->filename = $file['originalname'];
            $file['uploadlog'] .= "\n".get_string('virusfounduser','moodle',$info);
            $file['virus'] = 1;
        }
        return false; // in this case, 0 means bad.
    default:
        // error - clam failed to run or something went wrong
        $notice .= get_string('clamfailed','moodle',get_clam_error_code($return));
        $notice .= "\n\n".implode("\n",$output);
        $newreturn = true;
        if ($CFG->clamfailureonupload == 'actlikevirus') {
            $notice .= "\n".clam_handle_infected_file($fullpath);
            $newreturn = false;
        }
        clam_mail_admins($notice);
        if ($appendlog) {
            $file['uploadlog'] .= "\n".get_string('clambroken');
            $file['clam'] = 1;
        }
        return $newreturn; // return 1 if we're allowing failures.
    }
}

/**
 * emails admins about a clam outcome
 * @param notice - the body of the email.
 */
function clam_mail_admins($notice) {

    $site = get_site();

    $subject = get_string('clamemailsubject','moodle',$site->fullname);
    $admins = get_admins();
    foreach ($admins as $admin) {
        email_to_user($admin,get_admin(),$subject,$notice);
    }
}


function get_clam_error_code($returncode) {
    $returncodes = array();
    $returncodes[0] = 'No virus found.';
    $returncodes[1] = 'Virus(es) found.';
    $returncodes[2] = ' An error occured'; // specific to clamdscan
    // all after here are specific to clamscan
    $returncodes[40] = 'Unknown option passed.';
    $returncodes[50] = 'Database initialization error.';
    $returncodes[52] = 'Not supported file type.';
    $returncodes[53] = 'Can\'t open directory.';
    $returncodes[54] = 'Can\'t open file. (ofm)';
    $returncodes[55] = 'Error reading file. (ofm)';
    $returncodes[56] = 'Can\'t stat input file / directory.';
    $returncodes[57] = 'Can\'t get absolute path name of current working directory.';
    $returncodes[58] = 'I/O error, please check your filesystem.';
    $returncodes[59] = 'Can\'t get information about current user from /etc/passwd.';
    $returncodes[60] = 'Can\'t get information about user \'clamav\' (default name) from /etc/passwd.';
    $returncodes[61] = 'Can\'t fork.';
    $returncodes[63] = 'Can\'t create temporary files/directories (check permissions).';
    $returncodes[64] = 'Can\'t write to temporary directory (please specify another one).';
    $returncodes[70] = 'Can\'t allocate and clear memory (calloc).';
    $returncodes[71] = 'Can\'t allocate memory (malloc).';
    if ($returncodes[$returncode])
       return $returncodes[$returncode];
    return get_string('clamunknownerror');

}

/**
 * adds a file upload to the log table so that clam can resolve the filename to the user later if necessary
 */
function clam_log_upload($newfilepath,$course=null) {
    global $CFG,$USER;
    // get rid of any double // that might have appeared
    $newfilepath = preg_replace('/\/\//','/',$newfilepath);
    if (strpos($newfilepath,$CFG->dataroot) === false) {
        $newfilepath = $CFG->dataroot.'/'.$newfilepath;
    }
    $CFG->debug=10;
    $courseid = 0;
    if ($course) {
        $courseid = $course->id;
    }
    add_to_log($courseid,"upload","upload","",$newfilepath);
}

/**
 * some of the modules allow moving attachments (glossary), in which case we need to hunt down an original log and change the path.
 */
function clam_change_log($oldpath,$newpath) {
    global $CFG;
    $sql = "UPDATE {$CFG->prefix}log SET info = '$newpath' WHERE module = 'upload' AND info = '$oldpath'";
    execute_sql($sql);
}
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_RETURN
        (AST_CONST)))