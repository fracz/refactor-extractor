     function _is_required() {
        return ($this->field->required == PROFILE_REQUIRED_YES);
     }


} /// End of class definition


/***** General purpose functions for customisable user profiles *****/

/**
 * Print out the customisable categories and fields for a users profile
 * @param  object   instance of the moodleform class
 * @param  integer  id of the user
 * @return  nothing
 */
function profile_print_custom_fields(&$form, $userid=0) {
    global $USER, $CFG;

    if ($userid == 0) $userid = $USER->id;

    if ($categories = get_records_select('user_info_category', '', 'sortorder ASC')) {
        foreach ($categories as $category) {
            if ($fields = get_records_select('user_info_field', "categoryid=$category->id", 'sortorder ASC')) {

                $form->addElement('header', 'category_'.$category->id, $category->name);

                foreach ($fields as $field) {

                    require_once($CFG->dirroot.'/user/profile/field/'.$field->datatype.'/field.class.php');
                    $newfield = 'profile_field_'.$field->datatype;
                    $formfield = new $newfield($field->id,$user->id);
                    $formfield->display_field($form);
                    unset($formfield);

                }
            } /// End of $fields if
        } /// End of $categories foreach
    } /// End of $categories if
}


/**
 * Retrieve a list of all the available data types
 * @return   array   a list of the datatypes suitable to use in a select statement
 */
function profile_list_datatypes() {
    global $CFG;

    $datatypes = array();

    if ($dirlist = get_directory_list($CFG->dirroot.'/user/profile/field', '', false, true, false)) {
        foreach ($dirlist as $type) {
            $datatypes[$type] = get_string('profilefieldtype'.$type, 'admin');
        }
    }
    return $datatypes;
//    return get_directory_list($CFG->dirroot.'/user/profile/field', '', false, true, false);
}

/**
 * Change the sortorder of a field
 * @param   integer   id of the field
 * @param   string    direction of move
 * @return  boolean   success of operation
 */
function profile_move_field ($id, $move='down') {
    /// Get the field object
    if (!($field = get_record('user_info_field', 'id', $id))) {
        return false;
    }
    /// Count the number of fields in this category
    $fieldcount = count_records_select('user_info_field', 'categoryid='.$field->categoryid);

    /// Calculate the new sortorder
    if ( ($move == 'up') and ($field->sortorder > 1)) {
        $neworder = $field->sortorder - 1;
    } elseif ( ($move == 'down') and ($field->sortorder < $fieldcount)) {
        $neworder = $field->sortorder + 1;
    } else {
        return false;
    }

    /// Retrieve the field object that is currently residing in the new position
    if ($swapfield = get_record('user_info_field', 'categoryid', $field->categoryid, 'sortorder', $neworder)) {

        /// Swap the sortorders
        $swapfield->sortorder = $field->sortorder;
        $field->sortorder     = $neworder;

        /// Update the field records
        if (update_record('user_info_field', $field) and update_record('user_info_field', $swapfield)) {
            return true;
        }
    }

    return false;
}

/**
 * Change the sortorder of a category
 * @param   integer   id of the category
 * @param   string    direction of move
 * @return  boolean   success of operation
 */
function profile_move_category ($id, $move='down') {
    /// Get the category object
    if (!($category = get_record('user_info_category', 'id', $id))) {
        return false;
    }

    /// Count the number of categories
    $categorycount = count_records('user_info_category');

    /// Calculate the new sortorder
    if ( ($move == 'up') and ($category->sortorder > 1)) {
        $neworder = $category->sortorder - 1;
    } elseif ( ($move == 'down') and ($category->sortorder < $categorycount)) {
        $neworder = $category->sortorder + 1;
    } else {
        return false;
    }

    /// Retrieve the category object that is currently residing in the new position
    if ($swapcategory = get_record('user_info_category', 'sortorder', $neworder)) {

        /// Swap the sortorders
        $swapcategory->sortorder = $category->sortorder;
        $category->sortorder     = $neworder;

        /// Update the category records
        if (update_record('user_info_category', $category) and update_record('user_info_category', $swapcategory)) {
            return true;
        }
    }

    return false;
}


/**
 * Retrieve a list of categories and ids suitable for use in a form
 * @return   array
 */
function profile_list_categories() {
    if ( !($categories = get_records_select_menu('user_info_category', '', 'sortorder ASC', 'id, name')) ) {
        $categories = array();
    }
    return $categories;
}

/**
 * Delete a profile category
 * @param   integer   id of the category to be deleted
 * @return  boolean   success of operation
 */
function profile_delete_category ($id) {
    /// Retrieve the category
    if (!($category = get_record('user_info_category', 'id', $id))) {
        return false;
    }

    /// Retrieve the next category up
    if ( !($newcategory = get_record('user_info_category', 'sortorder', ($category->sortorder - 1))) ) {

        /// Retrieve the next category down
        if (!($newcategory = get_record('user_info_category', 'sortorder', ($category->sortorder + 1))) ) {

            if (count_records('user_info_field', 'categoryid', $category->id) > 0) {

                /// We cannot find any other categories next to current one so either:
                /// 1. The sortorder values are incongruous which means a bug somewhere
                /// 2. We are the only category but there are fields  => cannot delete this category!

                return false;
            }
        }
    }

    /// Does the category contain any fields
    if (count_records('user_info_field', 'categoryid', $category->id) > 0) {
        /// Move fields to the new category
        $sortorder = count_records('user_info_field', 'categoryid', $newcategory->id);

        if ($fields = get_records('user_info_field', 'categoryid', $category->id)) {
            foreach ($fields as $field) {
                $sortorder++;
                $field->sortorder = $sortorder;
                $field->categoryid = $newcategory->id;
                update_record('user_info_field', $field);
            }
        }
    }

    /// Finally we get to delete the category
    if (delete_records('user_info_category', 'id', $category->id) !== false) {
        profile_reorder_categories();
        return true;
    } else {
        return false;
    }
}

/**
 * Reorder the profile fields within a given category starting
 * at the field at the given startorder
 * @param   integer   id of the category
 * @param   integer   starting order
 * @return  integer   number of fields reordered
 */
function profile_reorder_fields($categoryid, $startorder=1) {
    $count = 0;
    $sortorder = $startorder;

    if ($fields = get_records_select('user_info_field', 'categoryid='.$categoryid.' AND sortorder>='.$startorder, 'sortorder ASC')) {
        foreach ($fields as $field) {
            $field->sortorder = $sortorder;
            update_record('user_info_field', $field);
            $sortorder++;
            $count++;
        }
    }
    return $count;
}

/**
 * Reorder the profile categoriess starting at the category
 * at the given startorder
 * @param   integer   starting order
 * @return  integer   number of categories reordered
 */
function profile_reorder_categories($startorder=1) {
    $count = 0;
    $sortorder = $startorder;

    if ($categories = get_records_select('user_info_category', 'sortorder>='.$startorder, 'sortorder ASC')) {
        foreach ($categories as $cat) {
            $cat->sortorder = $sortorder;
            update_record('user_info_category', $cat);
            $sortorder++;
            $count++;
        }
    }
    return $count;
}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_BINARY_OP
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST))))||||||||