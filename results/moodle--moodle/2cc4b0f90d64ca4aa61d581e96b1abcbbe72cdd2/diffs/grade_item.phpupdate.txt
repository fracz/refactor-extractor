    function update() {
        // If item is flagged as deleted, only update that flag in DB. The other changes are ignored.
        if (!empty($this->deleted) && $this->deleted) {
            return set_field('grade_items', 'deleted', 1, 'id', $this->id);
        }

        if (!empty($this->outcome->id)) {
            $this->outcomeid = $this->outcome->id;
        }

        if (!isset($this->gradetype)) {
            $this->gradetype = GRADE_TYPE_VALUE;
        }

        if (empty($this->scaleid) and !empty($this->scale->id)) {
            $this->scaleid = $this->scale->id;
        }

        // Retrieve scale and infer grademax from it
        if ($this->gradetype == GRADE_TYPE_SCALE and !empty($this->scaleid)) {
            $this->load_scale();

        } else {
            $this->scaleid = NULL;
            $this->scale = NULL;
        }

        $qualifies = $this->qualifies_for_update();

        $result = parent::update();

        if ($result && $qualifies) {
            $category = $this->get_category();

            if (!empty($category)) {
                $result = $result && $category->flag_for_update();
            }
        }

        return $result;
    }

    /**
     * Compares the values held by this object with those of the matching record in DB, and returns
     * whether or not these differences are sufficient to justify an update of all parent objects.
     * This assumes that this object has an id number and a matching record in DB. If not, it will return false.
     * @return boolean
     */
||||||||    function update() {

        if (!empty($this->outcome->id)) {
            $this->outcomeid = $this->outcome->id;
        }

        if (!isset($this->gradetype)) {
            $this->gradetype = GRADE_TYPE_VALUE;
        }

        if (empty($this->scaleid) and !empty($this->scale->id)) {
            $this->scaleid = $this->scale->id;
        }

        // Retrieve scale and infer grademax from it
        if ($this->gradetype == GRADE_TYPE_SCALE and !empty($this->scaleid)) {
            $this->load_scale();

        } else {
            $this->scaleid = NULL;
            $this->scale = NULL;
        }

        if ($this->qualifies_for_regrading()) {
            return $this->force_regrading();

        } else {
            return parent::update();
        }
    }

    /**
     * Compares the values held by this object with those of the matching record in DB, and returns
     * whether or not these differences are sufficient to justify an update of all parent objects.
     * This assumes that this object has an id number and a matching record in DB. If not, it will return false.
     * @return boolean
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR))))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_STATIC_CALL))))))