||||||||    function update_raw_grade($userid, $rawgrade=false, $howmodified='manual', $note=NULL, $feedback=false, $feedbackformat=FORMAT_MOODLE) {

        // calculated grades can not be updated
        if ($this->get_calculation()) {
            return false;
        }

        // do not allow grade updates when item locked - this prevents fetching of grade from db
        if ($this->is_locked()) {
            return false;
        }

        $grade = new grade_grades(array('itemid'=>$this->id, 'userid'=>$userid));
        $grade->grade_item =& $this; // prevent db fetching of cached grade_item

        if (!empty($grade->id)) {
            if ($grade->is_locked()) {
                // do not update locked grades at all
                return false;
            }

            if ($grade->locktime < time()) {
                // do not update grades that should be already locked
                // this does not solve all problems, cron is still needed to recalculate the final grades periodically
                return false;
            }

        }

        //TODO: if grade tree does not need to be recalculated, try to update grades of all users in course and force_regrading only if failed

        // fist copy current grademin/max and scale
        $grade->rawgrademin = $this->grademin;
        $grade->rawgrademax = $this->grademax;
        $grade->rawscaleid  = $this->scaleid;

        if ($rawgrade !== false) {
            // change of grade value requested
            if (empty($grade->id)) {
                $oldgrade = null;
                $grade->rawgrade = $rawgrade;
                $result = $grade->insert();

            } else {
                $oldgrade = $grade->rawgrade;
                $grade->rawgrade = $rawgrade;
                $result = $grade->update();
            }
        }

        // do we have comment from teacher?
        if ($result and $feedback !== false) {
            if (empty($grade->id)) {
                // create new grade
                $oldgrade = null;
                $result = $grade->insert();
            }
            $result = $result && $grade->update_feedback($feedback, $feedbackformat);
        }

        // TODO Handle history recording error, such as displaying a notice, but still return true
        grade_history::insert_change($userid, $this->id, $grade->rawgrade, $oldgrade, $howmodified, $note);

        // This grade item needs update
        $this->force_regrading();

        if ($result) {
            return $grade;
        } else {
            return false;
        }
    }
}
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN_REF
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CALL))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))