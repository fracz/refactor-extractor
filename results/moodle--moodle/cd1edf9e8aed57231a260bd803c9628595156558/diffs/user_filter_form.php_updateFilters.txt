    function _updateFilters($data) {
        global $SESSION;
        // if the forms was not submited, then quit
        if(is_null($data)){
            return;
        }
        // if cancel was pressed, then remove all filters
        if(!empty($data->cancel)) {
            $this->_removeFilters();
            return;
        }

        // if remove was pressed, then remove selected filters
        if(!empty($data->remove)) {
            if(!empty($data->filter)) {
                foreach($data->filter as $k=>$f) {
                    $this->_removeFilter($k);
                }
            }
            return;
        }

        // if set was pressed, then remove all filters before adding new ones
        if(!empty($data->set)) {
            $this->_removeFilters();
        }

        // in any other case, add the selected filter
        // first build the filter out of each active filter type
        $clauses = array();
        $descriptions = array();
        foreach($this->_filtersTypes as $ft) {
            $ft->checkData($data);
            $sqlFilter = $ft->getSQLFilter();
            // ignore disabled filters
            if(!empty($sqlFilter)) {
                $clauses[] = $sqlFilter;
                $descriptions[] = $ft->getDescription();
            }
        }
        // if no filters are active, then quit
        if(empty($clauses)) {
            return;
        }

        // join the filter parts and their descriptions together
        $clauses = implode(' AND ', $clauses);
        $descriptions = implode(', ', $descriptions);

        // check if this filter is a duplicate; if so, then quit
        $lastkey = -1;
        if(!empty($SESSION->user_filter_descriptions)) {
            foreach($SESSION->user_filter_descriptions as $k=>$c) {
                if($c == $descriptions) {
                    return;
                }
                $lastkey = $k;
            }
        }
        // append the new filter
        $this->_insertFilter($lastkey + 1, $descriptions, $clauses);
    }

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_EMPTY
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (
                                    (AST_RETURN
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_VAR)
            (AST_VAR))))||||||||