    protected function init_requirements_data(moodle_page $page, core_renderer $output) {
        global $CFG;

        // JavaScript should always work with $CFG->httpswwwroot rather than $CFG->wwwroot.
        // Otherwise, in some situations, users will get warnings about insecure content
        // on sercure pages from their web browser.

        //TODO: problem here is we may need this in some included JS - move this somehow to the very beginning
        //      right after the YUI loading
        $config = array(
            'wwwroot'             => $CFG->httpswwwroot, // Yes, really. See above.
            'sesskey'             => sesskey(),
            'loadingicon'         => $output->pix_url('i/loading_small', 'moodle')->out(false),
            'themerev'            => theme_get_revision(),
            'theme'               => $page->theme->name,
            'yui2loaderBase'      => $this->yui2loader->base,
            'yui3loaderBase'      => $this->yui3loader->base,
            'yui2loaderComboBase' => $this->yui2loader->comboBase,
            'yui3loaderComboBase' => $this->yui3loader->comboBase,
            'yuicombine'          => (int)$this->yui3loader->combine,
            'yuifilter'           => debugging('', DEBUG_DEVELOPER) ? 'debug' : '',

        );
        if (debugging('', DEBUG_DEVELOPER)) {
            $config['developerdebug'] = true;
        }
        $this->data_for_js('moodle_cfg', $config)->in_head();

        if (debugging('', DEBUG_DEVELOPER)) {
            $this->yui2_lib('logger');
        }

        // YUI3 init code
        $this->yui3_lib(array('cssreset', 'cssbase', 'cssfonts', 'cssgrids')); // full CSS reset
        $this->yui3_lib(array('yui', 'loader')); // allows autoloading of everything else


        $this->skip_link_to('maincontent', get_string('tocontent', 'access'));

        // Note that, as a short-cut, the code
        // $js = "document.body.className += ' jsenabled';\n";
        // is hard-coded in {@link page_requirements_manager::get_top_of_body_code)
        $this->yui2_lib('dom');        // needs to be migrated to YUI3 before we release 2.0
        $this->yui2_lib('container');  // needs to be migrated to YUI3 before we release 2.0
        $this->yui2_lib('connection'); // needs to be migrated to YUI3 before we release 2.0
        // File Picker use this module loading YUI2 widgets
        $this->yui2_lib('yuiloader');  // needs to be migrated to YUI3 before we release 2.0
        $this->js_module('filepicker'); // should be migrated elsewhere before 2.0

        $this->string_for_js('confirmation', 'admin');
        $this->string_for_js('cancel', 'moodle');
        $this->string_for_js('yes', 'moodle');
        $this->js_function_call('init_help_icons');
    }

    /**
     * Ensure that the specified JavaScript file is linked to from this page.
     *
     * By default the link is put at the end of the page, since this gives best page-load performance.
     *
     * Even if a particular script is requested more than once, it will only be linked
     * to once.
     *
     * @param $jsfile The path to the .js file, relative to $CFG->dirroot / $CFG->wwwroot.
     *      For example '/mod/mymod/customscripts.js';
     * @param boolean $fullurl This parameter is intended for internal use only.
     *      However, in exceptional circumstances you may wish to use it to link
     *      to JavaScript on another server. For example, lib/recaptchalib.php has to
     *      do this. This really should only be done in exceptional circumstances. This
     *      may change in the future without warning.
     *      (If true, $jsfile is treaded as a full URL, not relative $CFG->wwwroot.)
     * @return required_js The required_js object. This allows you to control when the
     *      link to the script is output by calling methods like {@link required_js::asap()} or
     *      {@link required_js::in_head()}.
     */
||||||||    protected function init_requirements_data(moodle_page $page, core_renderer $renderer) {
        global $CFG;

        // JavaScript should always work with $CFG->httpswwwroot rather than $CFG->wwwroot.
        // Otherwise, in some situations, users will get warnings about insecure content
        // on sercure pages from their web browser.

        //TODO: problem here is we may need this in some included JS - move this somehow to the very beginning
        //      right after the YUI loading
        $config = array(
            'wwwroot'             => $CFG->httpswwwroot, // Yes, really. See above.
            'sesskey'             => sesskey(),
            'loadingicon'         => $renderer->pix_url('i/loading_small', 'moodle')->out(false),
            'themerev'            => theme_get_revision(),
            'theme'               => $page->theme->name,
            'yui2loaderBase'      => $this->yui2loader->base,
            'yui3loaderBase'      => $this->yui3loader->base,
            'yui2loaderComboBase' => $this->yui2loader->comboBase,
            'yui3loaderComboBase' => $this->yui3loader->comboBase,
            'yuicombine'          => (int)$this->yui3loader->combine,
            'yuifilter'           => debugging('', DEBUG_DEVELOPER) ? 'debug' : '',

        );
        if (debugging('', DEBUG_DEVELOPER)) {
            $config['developerdebug'] = true;
        }
        $this->data_for_js('moodle_cfg', $config)->in_head();
        $this->data_for_js('yui3loader', null)->in_head();

        if (debugging('', DEBUG_DEVELOPER)) {
            $this->yui2_lib('logger');
        }

        // YUI3 init code
        $this->yui3_lib(array('cssreset', 'cssbase', 'cssfonts', 'cssgrids')); // full CSS reset
        $this->yui3_lib(array('yui', 'loader')); // allows autoloading of everything else


        $this->skip_link_to('maincontent', get_string('tocontent', 'access'));

        // Note that, as a short-cut, the code
        // $js = "document.body.className += ' jsenabled';\n";
        // is hard-coded in {@link page_requirements_manager::get_top_of_body_code)
        $this->yui2_lib('dom');        // needs to be migrated to YUI3 before we release 2.0
        $this->yui2_lib('container');  // needs to be migrated to YUI3 before we release 2.0
        $this->yui2_lib('connection'); // needs to be migrated to YUI3 before we release 2.0
        // File Picker use this module loading YUI2 widgets
        $this->yui2_lib('yuiloader');  // needs to be migrated to YUI3 before we release 2.0
        $this->js_module('filepicker'); // should be migrated elsewhere before 2.0

        $this->string_for_js('confirmation', 'admin');
        $this->string_for_js('cancel', 'moodle');
        $this->string_for_js('yes', 'moodle');
        $this->js_function_call('init_help_icons');
    }

    /**
     * Ensure that the specified JavaScript file is linked to from this page.
     *
     * By default the link is put at the end of the page, since this gives best page-load performance.
     *
     * Even if a particular script is requested more than once, it will only be linked
     * to once.
     *
     * @param $jsfile The path to the .js file, relative to $CFG->dirroot / $CFG->wwwroot.
     *      For example '/mod/mymod/customscripts.js';
     * @param boolean $fullurl This parameter is intended for internal use only.
     *      However, in exceptional circumstances you may wish to use it to link
     *      to JavaScript on another server. For example, lib/recaptchalib.php has to
     *      do this. This really should only be done in exceptional circumstances. This
     *      may change in the future without warning.
     *      (If true, $jsfile is treaded as a full URL, not relative $CFG->wwwroot.)
     * @return required_js The required_js object. This allows you to control when the
     *      link to the script is output by calling methods like {@link required_js::asap()} or
     *      {@link required_js::in_head()}.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR)))
                    (
                        (AST_CONST)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CAST
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONDITIONAL
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CONST)))
                    (SCALAR)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CONST)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR)))
                    (
                        (AST_CONST)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CAST
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONDITIONAL
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CONST)))
                    (SCALAR)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CONST)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))