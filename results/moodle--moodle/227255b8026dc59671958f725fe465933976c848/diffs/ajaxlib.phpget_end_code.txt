    public function get_end_code() {
        global $CFG;
        // add missing YUI2 YUI - to be removed once we convert everything to YUI3!
        $output = $this->get_yui2lib_code();

        // set up global YUI3 loader object - this should contain all code needed by plugins
        // note: in JavaScript just use "YUI(yui3loader).use('overlay', function(Y) { .... });"
        $output .= $this->data_for_js('yui3loader', $this->json_yui3loader)->now();

        // now print all the stuff that was added through ->requires
        $output .= $this->get_linked_resources_code(self::WHEN_AT_END);

        if (!empty($this->stringsforjs)) {
            array_unshift($this->requiredjscode, new required_data_for_js($this, 'mstr', $this->stringsforjs));
        }

        $js = $this->get_javascript_code(self::WHEN_AT_END);

        $inyuijs = $this->get_javascript_code(self::WHEN_IN_YUI, '    ');
        $ondomreadyjs = $this->get_javascript_code(self::WHEN_ON_DOM_READY, '        ');
        $jsinit = $this->get_javascript_init_code();

//TODO: do we really need the global "Y" defined in javasecript-static.js?
//      The problem is that we can not rely on it to be fully initialised
        $js .= <<<EOD
Y = YUI(yui3loader).use('node-base', function(Y) {
$inyuijs    ;
    Y.on('domready', function() {
$ondomreadyjs
    });
$jsinit
});
EOD;

        $output .= html_writer::script($js);

        return $output;
    }

    /**
     * @return boolean Have we already output the code in the <head> tag?
     */
||||||||    public function get_end_code() {
        global $CFG;
        // add missing YUI2 YUI - to be removed once we convert everything to YUI3!
        $output = $this->get_yui2lib_code();

        // set up global YUI3 loader object - this should contain all code needed by plugins
        // note: in JavaScript just use "YUI(yui3loader).use('overlay', function(Y) { .... });"
        // this needs to be done before including any other script
        $output .= html_writer::script(js_writer::set_variable('yui3loader', $this->json_yui3loader, false));

        // now print all the stuff that was added through ->requires
        $output .= $this->get_linked_resources_code(self::WHEN_AT_END);

        if (!empty($this->stringsforjs)) {
            array_unshift($this->requiredjscode, new required_data_for_js($this, 'mstr', $this->stringsforjs));
        }

        $js = $this->get_javascript_code(self::WHEN_AT_END);

        $inyuijs = $this->get_javascript_code(self::WHEN_IN_YUI, '    ');
        $ondomreadyjs = $this->get_javascript_code(self::WHEN_ON_DOM_READY, '        ');
        $jsinit = $this->get_javascript_init_code();
        $handlersjs = $this->get_event_handler_code();

        // the global Y can be used only after it is fully loaded, that means
        // from code executed from the following block
        $js .= <<<EOD
Y = YUI(yui3loader).use('node-base', function(Y) {
$inyuijs    ;
    Y.on('domready', function() {
$ondomreadyjs
    });
$jsinit
$handlersjs
});
EOD;

        $output .= html_writer::script($js);

        return $output;
    }

    /**
     * @return boolean Have we already output the code in the <head> tag?
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))