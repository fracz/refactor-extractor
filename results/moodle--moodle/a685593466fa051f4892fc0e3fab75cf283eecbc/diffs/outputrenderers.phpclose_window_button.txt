    public function close_window_button($text='') {
        if (empty($text)) {
            $text = get_string('closewindow');
        }
        $button = new single_button($this->page->url.'#', $text, 'get');
        $button->add_action('click', 'close_window');

        return $this->container($this->render($button), 'closewindow');
    }

    /**
     * Outputs a <select> menu or a list of radio/checkbox inputs.
     *
     * This method is extremely versatile, and can be used to output yes/no menus,
     * form-enclosed menus with automatic redirects when an option is selected,
     * descriptive labels and help icons. By default it just outputs a select
     * menu.
     *
     * To add a descriptive label, use html_select::set_label($text, $for) or
     * html_select::set_label($label) passing a html_label object
     *
     * To add a help icon, use html_select::set_help($page, $text, $linktext) or
     * html_select::set_help($helpicon) passing a help_icon object
     *
     * If you html_select::$rendertype to "radio", it will render radio buttons
     * instead of a <select> menu, unless $multiple is true, in which case it
     * will render checkboxes.
     *
     * To surround the menu with a form, simply set html_select->form as a
     * valid html_form object. Note that this function will NOT automatically
     * add a form for non-JS browsers. If you do not set one up, it assumes
     * that you are providing your own form in some other way.
     *
     * You can either call this function with a single html_select argument
     * or, with a list of parameters, in which case those parameters are sent to
     * the html_select constructor.
     *
     * @param html_select $select a html_select that describes
     *      the select menu you want output.
     * @return string the HTML for the <select>
     */
||||||||    public function close_window_button($text='') {
        if (empty($text)) {
            $text = get_string('closewindow');
        }
        $button = new single_button(new moodle_url('#'), $text, 'get');
        $button->add_action(new component_action('click', 'close_window'));

        return $this->container($this->render($button), 'closewindow');
    }

    /**
     * Outputs a <select> menu or a list of radio/checkbox inputs.
     *
     * This method is extremely versatile, and can be used to output yes/no menus,
     * form-enclosed menus with automatic redirects when an option is selected,
     * descriptive labels and help icons. By default it just outputs a select
     * menu.
     *
     * To add a descriptive label, use html_select::set_label($text, $for) or
     * html_select::set_label($label) passing a html_label object
     *
     * To add a help icon, use html_select::set_help($page, $text, $linktext) or
     * html_select::set_help($helpicon) passing a help_icon object
     *
     * If you html_select::$rendertype to "radio", it will render radio buttons
     * instead of a <select> menu, unless $multiple is true, in which case it
     * will render checkboxes.
     *
     * To surround the menu with a form, simply set html_select->form as a
     * valid html_form object. Note that this function will NOT automatically
     * add a form for non-JS browsers. If you do not set one up, it assumes
     * that you are providing your own form in some other way.
     *
     * You can either call this function with a single html_select argument
     * or, with a list of parameters, in which case those parameters are sent to
     * the html_select constructor.
     *
     * @param html_select $select a html_select that describes
     *      the select menu you want output.
     * @return string the HTML for the <select>
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR))
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_NEW
                    (
                        (SCALAR)))
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (SCALAR)))))