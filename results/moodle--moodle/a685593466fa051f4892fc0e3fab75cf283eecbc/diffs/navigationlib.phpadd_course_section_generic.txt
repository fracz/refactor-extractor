    public function add_course_section_generic(&$keys, $course=null, $name=null, $activeparam = null) {
        global $PAGE, $CFG, $OUTPUT;

        if ($course === null) {
            $course = $PAGE->course;
        }

        $coursesecstr = 'coursesections'.$course->id;
        if (!$this->cache->cached($coursesecstr)) {
            $sections = get_all_sections($course->id);
            $this->cache->$coursesecstr = $sections;
        } else {
            $sections = $this->cache->$coursesecstr;
        }

        if (!$this->cache->compare('modinfo'.$course->id, $course->modinfo, false)) {
            $this->cache->{'modinfo'.$course->id} = get_fast_modinfo($course);
        }
        $modinfo =  $this->cache->{'modinfo'.$course->id};

        $depthforward = 0;
        if (!is_array($modinfo->sections)) {
            return $keys;
        }

        if ($name === null) {
            $name = get_string('topic');
        }

        if ($activeparam === null) {
            $activeparam = 'topic';
        }

        $coursenode = $this->find_child($course->id, navigation_node::TYPE_COURSE);
        if ($coursenode!==false) {
            $coursenode->action->param($activeparam,'0');
        }

        if (!$this->cache->cached('canviewhiddenactivities')) {
            $this->cache->canviewhiddenactivities = has_capability('moodle/course:viewhiddenactivities', $this->context);
        }
        $viewhiddenactivities = $this->cache->canviewhiddenactivities;

        if (!$this->cache->cached('canviewhiddensections')) {
            $this->cache->canviewhiddensections = has_capability('moodle/course:viewhiddensections', $this->context);
        }
        $viewhiddensections = $this->cache->canviewhiddensections;

        $selectedstructure = optional_param($activeparam,false,PARAM_INT);

        // This is required to make sure that if people have reduced the number
        // of sections after adding activities to sections that no longer exist
        // we dont show them
        // MDL-20242
        $sections = array_slice($sections, 0, $course->numsections, true);

        foreach ($sections as $section) {
            if ((!$viewhiddensections && !$section->visible) || (!$this->showemptybranches && !array_key_exists($section->section, $modinfo->sections))) {
                continue;
            }
            if ($section->section!=0) {
                $sectionkeys = $keys;
                $url = new moodle_url($CFG->wwwroot.'/course/view.php', array('id'=>$course->id, $activeparam=>$section->section));
                $this->add_to_path($sectionkeys, $section->id, $name.' '.$section->section, null, navigation_node::TYPE_SECTION, $url);
                $sectionchild = $this->find_child($section->id, navigation_node::TYPE_SECTION);
                if ($sectionchild !== false) {
                    $sectionchild->nodetype = self::NODETYPE_BRANCH;
                    if ($sectionchild->isactive) {
                        $this->load_section_activities($sectionkeys, $section->section);
                    }
                    if (!$section->visible) {
                        $sectionchild->hidden = true;
                    }
                }
            }
        }
        return true;
    }

    /**
     * Check if we are permitted to display a given type
     *
     * @return bool True if we are, False otherwise
     */
||||||||    public function add_course_section_generic(&$keys, $course=null, $name=null, $activeparam = null) {
        global $PAGE, $CFG, $OUTPUT;

        if ($course === null) {
            $course = $PAGE->course;
        }

        $coursesecstr = 'coursesections'.$course->id;
        if (!$this->cache->cached($coursesecstr)) {
            $sections = get_all_sections($course->id);
            $this->cache->$coursesecstr = $sections;
        } else {
            $sections = $this->cache->$coursesecstr;
        }

        if (!$this->cache->compare('modinfo'.$course->id, $course->modinfo, false)) {
            $this->cache->{'modinfo'.$course->id} = get_fast_modinfo($course);
        }
        $modinfo =  $this->cache->{'modinfo'.$course->id};

        $depthforward = 0;
        if (!is_array($modinfo->sections)) {
            return $keys;
        }

        if ($name === null) {
            $name = get_string('topic');
        }

        if ($activeparam === null) {
            $activeparam = 'topic';
        }

        $coursenode = $this->find_child($course->id, navigation_node::TYPE_COURSE);
        if ($coursenode!==false) {
            $coursenode->action->param($activeparam,'0');
        }

        if (!$this->cache->cached('canviewhiddenactivities')) {
            $this->cache->canviewhiddenactivities = has_capability('moodle/course:viewhiddenactivities', $this->context);
        }
        $viewhiddenactivities = $this->cache->canviewhiddenactivities;

        if (!$this->cache->cached('canviewhiddensections')) {
            $this->cache->canviewhiddensections = has_capability('moodle/course:viewhiddensections', $this->context);
        }
        $viewhiddensections = $this->cache->canviewhiddensections;

        $selectedstructure = optional_param($activeparam,false,PARAM_INT);

        // This is required to make sure that if people have reduced the number
        // of sections after adding activities to sections that no longer exist
        // we dont show them
        // MDL-20242
        $sections = array_slice($sections, 0, $course->numsections, true);

        foreach ($sections as $section) {
            if ((!$viewhiddensections && !$section->visible) || (!$this->showemptybranches && !array_key_exists($section->section, $modinfo->sections))) {
                continue;
            }
            if ($section->section!=0) {
                $sectionkeys = $keys;
                $url = new moodle_url('/course/view.php', array('id'=>$course->id, $activeparam=>$section->section));
                $this->add_to_path($sectionkeys, $section->id, $name.' '.$section->section, null, navigation_node::TYPE_SECTION, $url);
                $sectionchild = $this->find_child($section->id, navigation_node::TYPE_SECTION);
                if ($sectionchild !== false) {
                    $sectionchild->nodetype = self::NODETYPE_BRANCH;
                    if ($sectionchild->isactive) {
                        $this->load_section_activities($sectionkeys, $section->section);
                    }
                    if (!$section->visible) {
                        $sectionchild->hidden = true;
                    }
                }
            }
        }
        return true;
    }

    /**
     * Check if we are permitted to display a given type
     *
     * @return bool True if we are, False otherwise
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CONST)
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR)
                                                        (AST_PROP
                                                            (AST_VAR)))))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_UNARY_OP
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (
                                                (AST_ASSIGN
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (AST_CONST)))))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CONST)
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR)
                                                        (AST_PROP
                                                            (AST_VAR)))))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_UNARY_OP
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (
                                                (AST_ASSIGN
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (AST_CONST)))))))))))))
    (AST_RETURN
        (AST_CONST)))