    public function root_node () {
        return $this->get_instance(get_context_instance(CONTEXT_SYSTEM)->id);
    }
}



class qtype_ddmarker_category_list extends qtype_ddmarker_list {
    protected $contextlist;
    protected function new_list_item($stringidentifier, $link, $record) {
        return new qtype_ddmarker_category_list_item($stringidentifier, $link, $record, $this, $this->contextlist);
    }
    public function __construct($stringidentifier, $link, $contextids, $contextlist) {
        global $DB;
        $this->contextlist = $contextlist;
        // Probably most efficient way to reconstruct question category tree is
        // to load all q cats in relevant contexts.
        list($sql, $params) = $DB->get_in_or_equal($contextids);
        $this->records = $DB->get_records_select('question_categories', "contextid ".$sql, $params);
        $this->make_list_item_instances_from_records($stringidentifier, $link);
    }
}

class qtype_ddmarker_question_list extends qtype_ddmarker_list {
    protected $categorylist;
    protected function new_list_item($stringidentifier, $link, $record) {
        return new qtype_ddmarker_question_list_item($stringidentifier, $link, $record, $this, $this->categorylist);
    }
    public function __construct($stringidentifier, $link, $questions, $categorylist) {
        global $DB;
        $this->categorylist = $categorylist;
        $this->records = $questions;
        $this->make_list_item_instances_from_records($stringidentifier, $link);
    }
    public function prepare_for_processing($top) {
    }
}||||||||    public function root_node () {
        return $this->get_instance(context_system::instance()->id);
    }
}


class qtype_ddmarker_category_list extends qtype_ddmarker_list {
    protected $contextlist;
    protected function new_list_item($stringidentifier, $link, $record) {
        return new qtype_ddmarker_category_list_item($stringidentifier, $link, $record, $this, $this->contextlist);
    }
    public function __construct($stringidentifier, $link, $contextids, $contextlist) {
        global $DB;
        $this->contextlist = $contextlist;
        // Probably most efficient way to reconstruct question category tree is
        // to load all q cats in relevant contexts.
        list($sql, $params) = $DB->get_in_or_equal($contextids);
        $this->records = $DB->get_records_select('question_categories', "contextid ".$sql, $params);
        $this->make_list_item_instances_from_records($stringidentifier, $link);
    }
}

class qtype_ddmarker_question_list extends qtype_ddmarker_list {
    protected $categorylist;
    protected function new_list_item($stringidentifier, $link, $record) {
        return new qtype_ddmarker_question_list_item($stringidentifier, $link, $record, $this, $this->categorylist);
    }
    public function __construct($stringidentifier, $link, $questions, $categorylist) {
        global $DB;
        $this->categorylist = $categorylist;
        $this->records = $questions;
        $this->make_list_item_instances_from_records($stringidentifier, $link);
    }
    public function prepare_for_processing($top) {
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_CALL
                        (
                            (AST_CONST))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_STATIC_CALL))))))