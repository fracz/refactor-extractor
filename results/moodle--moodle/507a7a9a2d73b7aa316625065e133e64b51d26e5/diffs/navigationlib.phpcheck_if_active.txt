    public function check_if_active($strength=URL_MATCH_EXACT) {
        global $FULLME, $PAGE;
        if (self::$fullmeurl == null) {
            if ($PAGE->has_set_url()) {
                $url = new moodle_url($PAGE->url);
            } else {
                $url = new moodle_url($FULLME);
            }
            self::$fullmeurl = $url;
        }

        if ($this->action instanceof moodle_url && $this->action->compare(self::$fullmeurl, $strength)) {
            $this->make_active();
            return true;
        } else if (is_string($this->action) && $this->action==self::$fullmeurl->out()) {
            $this->make_active();
            return true;
        }
        return false;
    }
    /**
     * This function allows the user to add a child node to this node.
     *
     * @param string $text The text to display in the node
     * @param string $action Either a moodle_url or a bit of html to use instead of the text <i>optional</i>
     * @param int $type The type of node should be one of the const types of navigation_node <i>optional</i>
     * @param string $shorttext The short text to use for this node
     * @param string|int $key Sets the key that can be used to retrieve this node <i>optional</i>
     * @param string $icon The path to an icon to use for this node <i>optional</i>
     * @return string The key that was used for this node
     */
||||||||    public function check_if_active($strength=URL_MATCH_EXACT) {
        global $FULLME, $PAGE;
        if (self::$fullmeurl == null) {
            if ($PAGE->has_set_url()) {
                $this->override_active_url(new moodle_url($PAGE->url));
            } else {
                $this->override_active_url(new moodle_url($FULLME));
            }
        }

        if ($this->action instanceof moodle_url && $this->action->compare(self::$fullmeurl, $strength)) {
            $this->make_active();
            return true;
        } else if (is_string($this->action) && $this->action==self::$fullmeurl->out()) {
            $this->make_active();
            return true;
        }
        return false;
    }
    /**
     * This function allows the user to add a child node to this node.
     *
     * @param string $text The text to display in the node
     * @param string $action Either a moodle_url or a bit of html to use instead of the text <i>optional</i>
     * @param int $type The type of node should be one of the const types of navigation_node <i>optional</i>
     * @param string $shorttext The short text to use for this node
     * @param string|int $key Sets the key that can be used to retrieve this node <i>optional</i>
     * @param string $icon The path to an icon to use for this node <i>optional</i>
     * @return string The key that was used for this node
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_STATIC_PROP)
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_STATIC_PROP))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_NEW
                                        (
                                            (AST_PROP
                                                (AST_VAR))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_NEW
                                        (
                                            (AST_VAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_STATIC_PROP)
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_STATIC_PROP))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_CONST)))