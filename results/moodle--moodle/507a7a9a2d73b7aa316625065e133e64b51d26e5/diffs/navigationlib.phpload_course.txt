    protected function load_course($instanceid) {
        global $DB, $PAGE;

        if (!$this->cache->cached('course'.$instanceid)) {
            $this->cache->{'course'.$instanceid} = $DB->get_record('course', array('id'=>$instanceid));
        }
        $course = $this->cache->{'course'.$instanceid};

        if (!$course) {
            echo "Invalid Course ID";
            break;
        }

        if (!$this->format_display_course_content($course->format)) {
            return true;
        }

        if (!$this->cache->cached('coursecontext'.$course->id)) {
            $this->cache->{'coursecontext'.$course->id} = get_context_instance(CONTEXT_COURSE, $course->id);
        }
        $this->context = $this->cache->{'coursecontext'.$course->id};

        $keys = array();
        parent::load_course($keys, $course);

        if (isloggedin() && has_capability('moodle/course:view', get_context_instance(CONTEXT_COURSE, $instanceid))) {

            if (!$this->cache->cached('course'.$course->id.'section0')) {
                $this->cache->{'course'.$course->id.'section0'} = $DB->get_record('course_sections', array('course'=>$course->id, 'section'=>'0'));
            }
            $section = $this->cache->{'course'.$course->id.'section0'};
            $this->load_section_activities($course, $section);
            if ($this->depthforward>0) {
                $this->load_course_sections($keys, $course);
            }
        }
    }
    /**
     * Use the instance id to load a specific course section
     *
     * @param int $instanceid
     */
||||||||    protected function load_course($instanceid) {
        global $DB, $PAGE;

        if (!$this->cache->cached('course'.$instanceid)) {
            if ($PAGE->course->id == $instanceid) {
                $this->cache->{'course'.$instanceid} = $PAGE->course;
            } else {
                $this->cache->{'course'.$instanceid} = $DB->get_record('course', array('id'=>$instanceid), '*', MUST_EXIST);
            }
        }
        $course = $this->cache->{'course'.$instanceid};

        if (!$this->format_display_course_content($course->format)) {
            return true;
        }

        if (!$this->cache->cached('coursecontext'.$course->id)) {
            $this->cache->{'coursecontext'.$course->id} = get_context_instance(CONTEXT_COURSE, $course->id);
        }
        $this->context = $this->cache->{'coursecontext'.$course->id};

        $keys = array();
        parent::load_course($keys, $course);

        if (isloggedin() && has_capability('moodle/course:view', $this->context)) {
            if (!$this->cache->cached('course'.$course->id.'section0')) {
                $this->cache->{'course'.$course->id.'section0'} = get_course_section('0', $course->id);
            }
            $section = $this->cache->{'course'.$course->id.'section0'};
            $this->load_section_activities($course, $section);
            if ($this->depthforward>0) {
                $this->load_course_sections($keys, $course);
            }
        }
    }
    /**
     * Use the instance id to load a specific course section
     *
     * @param int $instanceid
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_BREAK
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_CONST)
                                (AST_VAR))))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR)))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (SCALAR)))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (SCALAR)
                                        (AST_CONST))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR)))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))))