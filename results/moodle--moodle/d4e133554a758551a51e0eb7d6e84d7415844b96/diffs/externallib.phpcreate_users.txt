    public static function create_users($params) {
        global $CFG, $DB;

        // Ensure the current user is allowed to run this function
        $context = get_context_instance(CONTEXT_SYSTEM);
        require_capability('moodle/user:create', $context);
        self::validate_context($context);

        // Do basic automatic PARAM checks on incoming data, using params description
        // This checks to make sure that:
        //      1) No extra data was sent
        //      2) All required items were sent
        //      3) All data passes clean_param without changes (yes this is strict)
        // If any problems are found then exceptions are thrown with helpful error messages
        self::validate_params($params, self::create_users_params());


        // Perform further checks and build up a clean array of user data
        // Nothing is actually performed until the whole dataset is checked
        $users = array();
        foreach ($params as $user) {

            // Empty or no auth is assumed to be manual
            if (empty($user['auth'])) {
                $user['auth'] = 'manual';
            }

            // Lang must be a real code, not empty string
            if (isset($user['lang']) && empty($user['lang'])) {
                unset($user['lang']);
            }

            // Make sure that the username doesn't already exist
            if ($DB->get_record('user', array('username'=>$user['username'], 'mnethostid'=>$CFG->mnet_localhost_id))) {
                throw new invalid_parameter_exception($user['username']." username is already taken, sorry");
            }

            // Make sure that incoming data doesn't contain duplicate usernames
            if (isset($users[$user['username']])) {
                throw new invalid_parameter_exception("multiple users with the same username requested");
            }

            // TODO: More checks here?

            $users[$user['username']] = $user;   // Add this data to an array (mem overflows?)
        }

        $result = array();

        foreach ($users as $user) {  // Actually create the user accounts now
            $record = create_user_record($user['username'], $user['password'], $user['auth']);
            unset($user['username']);
            unset($user['password']);
            unset($user['auth']);

            // now override the default (or external) values
            foreach ($user as $key=>$value) {
                $record->$key = $value;
            }
            $DB->update_record('user', $record);

            $result[] = $record->id;

            // TODO: Save all the preferences and custom fields here

        }

        return $result;
    }


||||||||    public static function create_users($params) {
        global $CFG, $DB;

        // Ensure the current user is allowed to run this function
        $context = get_context_instance(CONTEXT_SYSTEM);
        require_capability('moodle/user:create', $context);
        self::validate_context($context);

        // Do basic automatic PARAM checks on incoming data, using params description
        // This checks to make sure that:
        //      1) No extra data was sent
        //      2) All required items were sent
        //      3) All data passes clean_param without changes (yes this is strict)
        // If any problems are found then exceptions are thrown with helpful error messages
        $params = self::validate_prameters(self::create_users_parameters(), $params);


        // Perform further checks and build up a clean array of user data
        // Nothing is actually performed until the whole dataset is checked
        $users = array();
        foreach ($params['users'] as $user) {

            // Empty or no auth is assumed to be manual
            if (empty($user['auth'])) {
                $user['auth'] = 'manual';
            }

            // Lang must be a real code, not empty string
            if (isset($user['lang']) && empty($user['lang'])) {
                unset($user['lang']);
            }

            // Make sure that the username doesn't already exist
            if ($DB->get_record('user', array('username'=>$user['username'], 'mnethostid'=>$CFG->mnet_localhost_id))) {
                throw new invalid_parameter_exception($user['username']." username is already taken, sorry");
            }

            // Make sure that incoming data doesn't contain duplicate usernames
            if (isset($users[$user['username']])) {
                throw new invalid_parameter_exception("multiple users with the same username requested");
            }

            // TODO: More checks here?

            $users[$user['username']] = $user;   // Add this data to an array (mem overflows?)
        }

        $result = array();

        foreach ($users as $user) {  // Actually create the user accounts now
            $record = create_user_record($user['username'], $user['password'], $user['auth']);
            unset($user['username']);
            unset($user['password']);
            unset($user['auth']);

            // now override the default (or external) values
            foreach ($user as $key=>$value) {
                $record->$key = $value;
            }
            $DB->update_record('user', $record);

            //TODO: preferences and custom fields

            $result[] = $record->id;

            // TODO: Save all the preferences and custom fields here

        }

        return $result;
    }
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_EMPTY
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_EMPTY
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))