||||||||    private function ensure_state_loaded($id) {
        if (!array_key_exists($id, $this->states)) {
            throw new moodle_quiz_exception($this, 'statenotloaded', $id);
        }
    }
}

class quiz_attempt_question_iterator implements Iterator {
    private $attemptobj;
    private $questionids;
    public function __construct(quiz_attempt $attemptobj, $page = 'all') {
        $this->attemptobj = $attemptobj;
        $attemptobj->number_questions($page);
        $this->questionids = $attemptobj->get_question_ids($page);
    }

    public function rewind() {
        reset($this->questionids);
    }

    public function current() {
        $id = current($this->questionids);
        if ($id) {
            return $this->attemptobj->get_question($id);
        } else {
            return false;
        }
    }

    public function key() {
        $id = current($this->questionids);
        if ($id) {
            return $this->attemptobj->get_question($id)->number;
        } else {
            return false;
        }
        return $this->attemptobj->get_question(current($this->questionids))->number;
    }

    public function next() {
        $id = next($this->questionids);
        if ($id) {
            return $this->attemptobj->get_question($id);
        } else {
            return false;
        }
    }

    public function valid() {
        return $this->current() !== false;
    }
}
?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))))))))