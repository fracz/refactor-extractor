||||||||    function out($pagesize, $useinitialsbar, $downloadhelpbutton=''){
        if (!$this->columns){
            $onerow = get_record_sql("SELECT {$this->sql->fields} FROM {$this->sql->from} WHERE {$this->sql->where}", true);
            //if columns is not set then define columns as the keys of the rows returned
            //from the db.
            $this->define_columns(array_keys((array)$onerow));
            $this->define_headers(array_keys((array)$onerow));
        }
        $this->setup();
        $this->query_db($pagesize, $useinitialsbar);
        $this->build_table();
        $this->finish_output();
    }
}

class table_default_export_format_parent{
    /**
     * @var flexible_table or child class reference pointing to table class
     * object from which to export data.
     */
    var $table;
    function table_default_export_format_parent(&$table){
        $this->table =& $table;
    }

    function add_data($row) {
        return false;
    }
    function add_seperator() {
        return false;
    }
    function finish_output(){
    }
}

class table_spreadsheet_export_format_parent extends table_default_export_format_parent{
    var $rownum;
    var $workbook;
    var $worksheet;
    /**
     * @var object format object - format for normal table cells
     */
    var $formatnormal;
    /**
     * @var object format object - format for header table cells
     */
    var $formatheaders;

    /**
     * should be overriden in child class.
     */
    var $fileextension;

    /**
     * This method will be overridden in the child class.
     */
    function define_workbook(){
    }
    function start_output($filename, $sheettitle){
        $this->filename = $filename.'.'.$this->fileextension;
        $this->define_workbook();
        // Creating the first worksheet
        $this->worksheet =& $this->workbook->add_worksheet();
        // format types
        $this->formatnormal =& $this->workbook->add_format();
        $this->formatnormal->set_bold(0);
        $this->formatheaders =& $this->workbook->add_format();
        $this->formatheaders->set_bold(1);
        $this->formatheaders->set_align('center');

        // Sending HTTP headers
        $this->workbook->send($this->filename);
        // Creating the first worksheet

        $this->rownum=0;
    }
    function output_headers($headers){
        $colnum = 0;
        foreach ($headers as $item) {
            $this->worksheet->write($this->rownum,$colnum,$item,$this->formatheaders);
            $colnum++;
        }
        $this->rownum++;
    }
    function add_data($row){
        $colnum = 0;
        foreach($row as $item){
            $this->worksheet->write($this->rownum,$colnum,$item,$this->formatnormal);
            $colnum++;
        }
        $this->rownum++;
        return true;
    }
    function add_seperator() {
        $this->rownum++;
        return true;
    }
    function finish_output(){
        $this->workbook->close();
        exit;
    }
}

class table_excel_export_format extends table_spreadsheet_export_format_parent{
    var $fileextension = 'xls';

    function define_workbook(){
        global $CFG;
        require_once("$CFG->libdir/excellib.class.php");
        // Creating a workbook
        $this->workbook = new MoodleExcelWorkbook("-");
    }

}

class table_ods_export_format extends table_spreadsheet_export_format_parent{
    var $fileextension = 'ods';
    function define_workbook(){
        global $CFG;
        require_once("$CFG->libdir/odslib.class.php");
        // Creating a workbook
        $this->workbook = new MoodleODSWorkbook("-");
    }
}

class table_text_export_format_parent extends table_default_export_format_parent{
    var $seperator = "\t";
    function start_output($filename, $sheettitle){
        $this->filename = $filename.".txt";

        header("Content-Type: application/download\n");
        header("Content-Disposition: attachment; filename=\"$this->filename\"");
        header("Expires: 0");
        header("Cache-Control: must-revalidate,post-check=0,pre-check=0");
        header("Pragma: public");
    }
    function output_headers($headers){
        echo implode($this->seperator, $headers)." \n";
    }
    function add_data($row){
        echo implode($this->seperator, $row)." \n";
        return true;
    }
    function finish_output(){
        exit;
    }
}

class table_tsv_export_format extends table_text_export_format_parent{
    var $seperator = "\t";

}

class table_csv_export_format extends table_text_export_format_parent{
    var $seperator = ",";

}

class table_xhtml_export_format extends table_default_export_format_parent{
    var $seperator = "\t";
    function start_output($filename, $sheettitle){
        $this->table->sortable(false);
        $this->table->collapsible(false);
        $this->filename = $filename.".html";

        header("Content-Type: application/download\n");
        header("Content-Disposition: attachment; filename=\"$this->filename\"");
        header("Expires: 0");
        header("Cache-Control: must-revalidate,post-check=0,pre-check=0");
        header("Pragma: public");

        //html headers

        echo <<<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
  xml:lang="en" lang="en">
<style type="text/css">/*<![CDATA[*/

.flexible th {
white-space:normal;
}
th.header, td.header, div.header {
border-color:#DDDDDD;
background-color:lightGrey;
}
.flexible th {
white-space:nowrap;
}
th {
font-weight:bold;
}

.generaltable {
border-style:solid;
}
.generalbox {
border-style:solid;
}
body, table, td, th {
font-family:Arial,Verdana,Helvetica,sans-serif;
font-size:100%;
}
td {
    border-style:solid;
    border-width:1pt;
}
table {
    border-collapse:collapse;
    border-spacing:0pt;
    width:80%;
    margin:auto;
}

h1{
    text-align:center;
}
.bold {
font-weight:bold;
}



/*]]>*/</style>
<head>
  <title>$sheettitle</title>
</head>
<body>
<h1>$sheettitle</h1>
EOF;
        $this->table->start_html();
    }
    function output_headers($headers){
        $this->table->print_headers();
    }
    function add_data($row){
        $this->table->print_row($row);
        return true;
    }
    function add_seperator() {
        $this->table->print_row(NULL);
        return true;
    }
    function finish_output(){
        $this->table->finish_html();
        echo '</body>';
        exit;
    }
}
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_CONST))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_CAST
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_CAST
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)))