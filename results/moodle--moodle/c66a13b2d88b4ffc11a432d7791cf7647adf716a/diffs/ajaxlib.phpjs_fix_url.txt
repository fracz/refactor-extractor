||||||||    protected function js_fix_url($url) {
        global $CFG;

        if ($url instanceof moodle_url) {
            return $url;
        } else if (strpos($url, '/') === 0) {
            if (debugging()) {
                // check file existence only when in debug mode
                if (!file_exists($CFG->dirroot . strtok($url, '?'))) {
                    throw new coding_exception('Attept to require a JavaScript file that does not exist.', $url);
                }
            }
            //return new moodle_url($CFG->httpswwwroot.'/lib/javascript.php', array('file'=>$url, 'rev'=>$CFG->jsrev));
            return new moodle_url($CFG->httpswwwroot.$url);
        } else {
            throw new coding_exception('Invalid JS url, it has to be shortened url starting with / or moodle_url instance.', $url);
        }
    }

    /**
     * Find out if JS modulke present and return details.
     * @param string $name name of module, ex: core_group, mod_forum
     * @return array description of module or null if not found
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_UNARY_OP
                                                    (AST_CALL
                                                        (
                                                            (AST_BINARY_OP
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR)
                                                                        (SCALAR)))))))
                                                (
                                                    (AST_THROW
                                                        (AST_NEW
                                                            (
                                                                (SCALAR)
                                                                (AST_VAR))))))))))
                            (AST_RETURN
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR)))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)
                                        (AST_VAR)))))))))))