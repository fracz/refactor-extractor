    public static function get($id, $strictness = MUST_EXIST, $returninvisible = false) {
        global $DB;
        if (!$id) {
            if (!isset(self::$coursecat0)) {
                $record = array(
                    'id' => 0,
                    'visible' => 1,
                    'depth' => 0,
                    'path' => ''
                );
                self::$coursecat0 = new coursecat((object)$record);
            }
            return self::$coursecat0;
        }
        $coursecatcache = cache::make('core', 'coursecat');
        $coursecat = null;
        if ($coursecatcache->has($id)) {
            $coursecat = $coursecatcache->get($id);
        } else {
            $all = self::get_all_ids();
            if (array_key_exists($id, $all)) {
                // retrieve from DB and store in cache
                list($ccselect, $ccjoin) = context_instance_preload_sql('cc.id', CONTEXT_COURSECAT, 'ctx');
                $sql = "SELECT cc.* $ccselect
                        FROM {course_categories} cc
                        $ccjoin
                        WHERE cc.id = ?";
                if ($record = $DB->get_record_sql($sql, array($id))) {
                    $coursecat = new coursecat($record);
                    $coursecatcache->set($id, $coursecat);
                } else {
                    // should not happen because if entry is present in get_all_ids() it should be found
                    self::purge_cache();
                }
            }
        }
        if ($coursecat && ($returninvisible || $coursecat->is_uservisible())) {
            return $coursecat;
        } else {
            if ($strictness == MUST_EXIST) {
                throw new moodle_exception('unknowcategory');
            }
        }
        return null;
    }

    /**
     * Returns the first found category
     *
     * Note that if there are no categories visible to the current user on the first level,
     * the invisible category may be returned
     *
     * @return coursecat
     */
||||||||    public static function get($id, $strictness = MUST_EXIST, $alwaysreturnhidden = false) {
        global $DB;
        if (!$id) {
            if (!isset(self::$coursecat0)) {
                $record = new stdClass();
                $record->id = 0;
                $record->visible = 1;
                $record->depth = 0;
                $record->path = '';
                self::$coursecat0 = new coursecat($record);
            }
            return self::$coursecat0;
        }
        $coursecatcache = cache::make('core', 'coursecat');
        $coursecat = $coursecatcache->get($id);
        if ($coursecat === false) {
            $all = self::get_all_ids();
            if (array_key_exists($id, $all)) {
                // Retrieve from DB only the fields that need to be stored in cache
                $fields = array_filter(array_keys(self::$coursecatfields), function ($element)
                    { return (self::$coursecatfields[$element] !== null); } );
                $ctxselect = context_helper::get_preload_record_columns_sql('ctx');
                $sql = "SELECT cc.". join(',cc.', $fields). ", $ctxselect
                        FROM {course_categories} cc
                        JOIN {context} ctx ON cc.id = ctx.instanceid AND ctx.contextlevel = ?
                        WHERE cc.id = ?";
                if ($record = $DB->get_record_sql($sql, array(CONTEXT_COURSECAT, $id))) {
                    $coursecat = new coursecat($record);
                    // Store in cache
                    $coursecatcache->set($id, $coursecat);
                }
            }
        }
        if ($coursecat && ($alwaysreturnhidden || $coursecat->is_uservisible())) {
            return $coursecat;
        } else {
            if ($strictness == MUST_EXIST) {
                throw new moodle_exception('unknowcategory');
            }
        }
        return null;
    }

    /**
     * Returns the first found category
     *
     * Note that if there are no categories visible to the current user on the first level,
     * the invisible category may be returned
     *
     * @return coursecat
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_STATIC_PROP)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_STATIC_PROP)
                                (AST_NEW
                                    (
                                        (AST_CAST
                                            (AST_VAR))))))))
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CONST)
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (NULL))))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (
                                                    (AST_VAR))))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_STATIC_CALL))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_STATIC_PROP)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_STATIC_PROP)
                                (AST_NEW
                                    (
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_STATIC_PROP)))
                                        (AST_CLOSURE
                                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                            (NULL)
                                            (
                                                (AST_RETURN
                                                    (AST_BINARY_OP
                                                        (AST_DIM
                                                            (AST_STATIC_PROP)
                                                            (AST_VAR))
                                                        (AST_CONST))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR))))
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_CONST)
                                                        (NULL))
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (NULL))))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (
                                                    (AST_VAR))))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_CONST)))