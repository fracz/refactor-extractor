||||||||    public static function start() {
        global $CFG, $DB;

        if (isset(self::$sessionactive)) {
            debugging('Session was already started!', DEBUG_DEVELOPER);
            return;
        }

        self::load_handler();

        // Init the session handler only if everything initialised properly in lib/setup.php file
        // and the session is actually required.
        if (empty($DB) or empty($CFG->version) or !defined('NO_MOODLE_COOKIES') or NO_MOODLE_COOKIES or CLI_SCRIPT) {
            self::$sessionactive = false;
            self::init_empty_session();
            return;
        }

        try {
            self::$handler->init();
            self::prepare_cookies();
            $newsid = empty($_COOKIE[session_name()]);

            session_start();

            self::initialise_user_session($newsid);
            self::check_security();

        } catch (\Exception $ex) {
            @session_write_close();
            self::init_empty_session();
            self::$sessionactive = false;
            throw $ex;
        }

        self::$sessionactive = true;
    }

    /**
     * Returns current page performance info.
     *
     * @return array perf info
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_STATIC_PROP))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (NULL)))))
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_VAR))
                            (AST_EMPTY
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)))))
                    (AST_CONST))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CONST))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (NULL)))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_PROP))
            (AST_STATIC_CALL)
            (AST_ASSIGN
                (AST_VAR)
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (AST_CALL))))
            (AST_CALL)
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (AST_STATIC_CALL))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_UNARY_OP
                        (AST_CALL))
                    (AST_STATIC_CALL)
                    (AST_ASSIGN
                        (AST_STATIC_PROP)
                        (AST_CONST))
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST)))