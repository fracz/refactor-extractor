    public function get_file_by_reference($reference) {
        $boxnetfile = $this->get_file($reference->reference);
        // Please note that here we will ALWAYS receive a file
        // If source file has been removed from external server, box.com still returns
        // a plain/text file with content 'no such file' (filesize will be 12 bytes)
        if (!empty($boxnetfile['path'])) {
            return (object)array('filepath' => $boxnetfile['path']);
        }
        return null;
    }

    /**
     * Return human readable reference information
     * {@link stored_file::get_reference()}
     *
     * @param string $reference
     * @param int $filestatus status of the file, 0 - ok, 666 - source missing
     * @return string
     */
||||||||    public function get_file_by_reference($reference) {
        $array = explode('/', $reference->reference);
        $fileid = array_pop($array);
        $fileinfo = $this->boxclient->get_file_info($fileid, self::SYNCFILE_TIMEOUT);
        if ($fileinfo) {
            $size = (int)$fileinfo->size;
            if (file_extension_in_typegroup($fileinfo->file_name, 'web_image')) {
                // this is an image - download it to moodle
                $path = $this->prepare_file('');
                $c = new curl;
                $result = $c->download_one($reference->reference, null, array('filepath' => $path, 'timeout' => self::SYNCIMAGE_TIMEOUT));
                if ($result === true) {
                    return (object)array('filepath' => $path);
                }
            }
            return (object)array('filesize' => $size);
        }
        return null;
    }

    /**
     * Return human readable reference information
     * {@link stored_file::get_reference()}
     *
     * @param string $reference
     * @param int $filestatus status of the file, 0 - ok, 666 - source missing
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CAST
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_PROP
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (SCALAR))))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CONST))
                                    (
                                        (AST_RETURN
                                            (AST_CAST
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (SCALAR)))))))))))
                (AST_RETURN
                    (AST_CAST
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CONST)))