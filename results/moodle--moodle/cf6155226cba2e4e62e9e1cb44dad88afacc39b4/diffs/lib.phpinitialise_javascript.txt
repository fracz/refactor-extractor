    protected function initialise_javascript($search) {
        global $USER;
        $output = '';

        // Put the options into the session, to allow search.php to respond to the ajax requests.
        $options = $this->get_options();
        $hash = md5(serialize($options));
        $USER->userselectors[$hash] = $options;

        // Initialise the selector.
        $output .= print_js_call('new user_selector', array($this->name, $hash, $this->extrafields,
                $search, get_string('previouslyselectedusers', '', '%%SEARCHTERM%%'),
                get_string('nomatchingusers', '', '%%SEARCHTERM%%'), get_string('none')), true);

        return $output;
    }
}

// User selectors for managing group memebers ==================================

/**
 * Base class to avoid duplicating code.
 */
abstract class groups_user_selector_base extends user_selector_base {
    protected $groupid;
    protected $courseid;

    /**
     * @param string $name control name
     * @param array $options should have two elements with keys groupid and courseid.
     */
    public function __construct($name, $options) {
        global $CFG;
        parent::__construct($name, $options);
        $this->groupid = $options['groupid'];
        $this->courseid = $options['courseid'];
        require_once($CFG->dirroot . '/group/lib.php');
    }

    protected function get_options() {
        $options = parent::get_options();
        $options['groupid'] = $this->groupid;
        $options['courseid'] = $this->courseid;
        return $options;
    }

    /**
     * @param array $roles array in the format returned by groups_calculate_role_people.
     * @return array array in the format find_users is supposed to return.
     */
    protected function convert_array_format($roles, $search) {
        if (empty($roles)) {
            $roles = array();
        }
        $groupedusers = array();
        foreach ($roles as $role) {
            if ($search) {
                $a = new stdClass;
                $a->role = $role->name;
                $a->search = $search;
                $groupname = get_string('matchingsearchandrole', '', $a);
            } else {
                $groupname = $role->name;
            }
            $groupedusers[$groupname] = $role->users;
            foreach ($groupedusers[$groupname] as &$user) {
                unset($user->roles);
                $user->fullname = fullname($user);
            }
        }
        return $groupedusers;
    }
}

/**
 * User selector subclass for the list of users who are in a certain group.
 * Used on the add group memebers page.
 */
class group_members_selector extends groups_user_selector_base {
    public function find_users($search) {
        list($wherecondition, $params) = $this->search_sql($search, 'u');
        $roles = groups_get_members_by_role($this->groupid, $this->courseid,
                $this->required_fields_sql('u'), 'u.lastname, u.firstname',
                $wherecondition, $params);
        return $this->convert_array_format($roles, $search);
    }
}

/**
 * User selector subclass for the list of users who are not in a certain group.
 * Used on the add group memebers page.
 */
class group_non_members_selector extends groups_user_selector_base {
    const MAX_USERS_PER_PAGE = 100;

    public function output_user($user) {
        return parent::output_user($user) . ' (' . $user->numgroups . ')';
    }

    public function find_users($search) {
        global $DB;

        // Get list of allowed roles.
        $context = get_context_instance(CONTEXT_COURSE, $this->courseid);
        if (!$validroleids = groups_get_possible_roles($context)) {
            return array();
        }
        list($roleids, $roleparams) = $DB->get_in_or_equal($validroleids);

        // Get the search condition.
        list($searchcondition, $searchparams) = $this->search_sql($search, 'u');

        // Build the SQL
        $fields = "SELECT r.id AS roleid, r.shortname AS roleshortname, r.name AS rolename, u.id AS userid, " .
                $this->required_fields_sql('u') .
                ', (SELECT count(igm.groupid) FROM {groups_members} igm JOIN {groups} ig ON
                    igm.groupid = ig.id WHERE igm.userid = u.id AND ig.courseid = ?) AS numgroups ';
        $sql = "   FROM {user} u
                   JOIN {role_assignments} ra ON ra.userid = u.id
                   JOIN {role} r ON r.id = ra.roleid
                  WHERE ra.contextid " . get_related_contexts_string($context) . "
                        AND u.deleted = 0
                        AND ra.roleid $roleids
                        AND u.id NOT IN (SELECT userid
                                          FROM {groups_members}
                                         WHERE groupid = ?)
                        AND $searchcondition";
        $orderby = " ORDER BY u.lastname, u.firstname";

        $params = array_merge($roleparams, array($this->groupid), $searchparams);

        if (!$this->is_validating()) {
            $potentialmemberscount = $DB->count_records_sql('SELECT count(DISTINCT u.id) ' . $sql, $params);
            if ($potentialmemberscount > group_non_members_selector::MAX_USERS_PER_PAGE) {
                return $this->too_many_results($search, $potentialmemberscount);
            }
        }

        array_unshift($params, $this->courseid);
        $rs = $DB->get_recordset_sql($fields . $sql . $orderby, $params);
        $roles =  groups_calculate_role_people($rs, $context);

        return $this->convert_array_format($roles, $search);
    }
}
?>||||||||    protected function initialise_javascript($search) {
        global $USER, $PAGE;
        $output = '';

        // Put the options into the session, to allow search.php to respond to the ajax requests.
        $options = $this->get_options();
        $hash = md5(serialize($options));
        $USER->userselectors[$hash] = $options;

        // Initialise the selector.
        $PAGE->requires->js_function_call('new user_selector', array($this->name, $hash, $this->extrafields,
                $search, get_string('previouslyselectedusers', '', '%%SEARCHTERM%%'),
                get_string('nomatchingusers', '', '%%SEARCHTERM%%'), get_string('none')), true);

        return $output;
    }
}

// User selectors for managing group memebers ==================================

/**
 * Base class to avoid duplicating code.
 */
abstract class groups_user_selector_base extends user_selector_base {
    protected $groupid;
    protected $courseid;

    /**
     * @param string $name control name
     * @param array $options should have two elements with keys groupid and courseid.
     */
    public function __construct($name, $options) {
        global $CFG;
        parent::__construct($name, $options);
        $this->groupid = $options['groupid'];
        $this->courseid = $options['courseid'];
        require_once($CFG->dirroot . '/group/lib.php');
    }

    protected function get_options() {
        $options = parent::get_options();
        $options['groupid'] = $this->groupid;
        $options['courseid'] = $this->courseid;
        return $options;
    }

    /**
     * @param array $roles array in the format returned by groups_calculate_role_people.
     * @return array array in the format find_users is supposed to return.
     */
    protected function convert_array_format($roles, $search) {
        if (empty($roles)) {
            $roles = array();
        }
        $groupedusers = array();
        foreach ($roles as $role) {
            if ($search) {
                $a = new stdClass;
                $a->role = $role->name;
                $a->search = $search;
                $groupname = get_string('matchingsearchandrole', '', $a);
            } else {
                $groupname = $role->name;
            }
            $groupedusers[$groupname] = $role->users;
            foreach ($groupedusers[$groupname] as &$user) {
                unset($user->roles);
                $user->fullname = fullname($user);
            }
        }
        return $groupedusers;
    }
}

/**
 * User selector subclass for the list of users who are in a certain group.
 * Used on the add group memebers page.
 */
class group_members_selector extends groups_user_selector_base {
    public function find_users($search) {
        list($wherecondition, $params) = $this->search_sql($search, 'u');
        $roles = groups_get_members_by_role($this->groupid, $this->courseid,
                $this->required_fields_sql('u'), 'u.lastname, u.firstname',
                $wherecondition, $params);
        return $this->convert_array_format($roles, $search);
    }
}

/**
 * User selector subclass for the list of users who are not in a certain group.
 * Used on the add group memebers page.
 */
class group_non_members_selector extends groups_user_selector_base {
    const MAX_USERS_PER_PAGE = 100;

    public function output_user($user) {
        return parent::output_user($user) . ' (' . $user->numgroups . ')';
    }

    public function find_users($search) {
        global $DB;

        // Get list of allowed roles.
        $context = get_context_instance(CONTEXT_COURSE, $this->courseid);
        if (!$validroleids = groups_get_possible_roles($context)) {
            return array();
        }
        list($roleids, $roleparams) = $DB->get_in_or_equal($validroleids);

        // Get the search condition.
        list($searchcondition, $searchparams) = $this->search_sql($search, 'u');

        // Build the SQL
        $fields = "SELECT r.id AS roleid, r.shortname AS roleshortname, r.name AS rolename, u.id AS userid, " .
                $this->required_fields_sql('u') .
                ', (SELECT count(igm.groupid) FROM {groups_members} igm JOIN {groups} ig ON
                    igm.groupid = ig.id WHERE igm.userid = u.id AND ig.courseid = ?) AS numgroups ';
        $sql = "   FROM {user} u
                   JOIN {role_assignments} ra ON ra.userid = u.id
                   JOIN {role} r ON r.id = ra.roleid
                  WHERE ra.contextid " . get_related_contexts_string($context) . "
                        AND u.deleted = 0
                        AND ra.roleid $roleids
                        AND u.id NOT IN (SELECT userid
                                          FROM {groups_members}
                                         WHERE groupid = ?)
                        AND $searchcondition";
        $orderby = " ORDER BY u.lastname, u.firstname";

        $params = array_merge($roleparams, array($this->groupid), $searchparams);

        if (!$this->is_validating()) {
            $potentialmemberscount = $DB->count_records_sql('SELECT count(DISTINCT u.id) ' . $sql, $params);
            if ($potentialmemberscount > group_non_members_selector::MAX_USERS_PER_PAGE) {
                return $this->too_many_results($search, $potentialmemberscount);
            }
        }

        array_unshift($params, $this->courseid);
        $rs = $DB->get_recordset_sql($fields . $sql . $orderby, $params);
        $roles =  groups_calculate_role_people($rs, $context);

        return $this->convert_array_format($roles, $search);
    }
}
?>||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)))
                (AST_CONST))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (SCALAR)))
                    (NULL)))
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))