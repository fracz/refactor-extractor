||||||||    public function after_delay($seconds) {
        if ($seconds) {
            $this->on_dom_ready();
        }
        $this->delay = $seconds;
    }
}


/**
 * This class represents some data from PHP that needs to be made available in a
 * global JavaScript variable. By default the data will be output at the end of
 * the page, but you can chage that using the ->asap, ->in_head, etc. methods.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class required_data_for_js extends required_js_code {
    protected $variable;
    protected $data;

    /**
     * Constructor. Normally the class and its subclasses should not be created
     * directly. Client code should create them via the page_requirements_manager
     * method ->data_for_js(...).
     *
     * @param page_requirements_manager $manager the page_requirements_manager we are associated with.
     * @param string $variable the the name of the JavaScript variable to assign the data to.
     *      Will probably work if you use a compound name like 'mybuttons.button[1]', but this
     *      should be considered an experimental feature.
     * @param mixed $data The data to pass to JavaScript. This will be escaped using json_encode,
     *      so passing objects and arrays should work.
     */
    public function __construct(page_requirements_manager $manager, $variable, $data) {
        parent::__construct($manager);
        $this->variable = $variable;
        $this->data = json_encode($data);
        // json_encode immediately, so that if $data is an object (and therefore was
        // passed in by reference) we get the data at the time the call was made, and
        // not whatever the data happened to be when this is output.
    }

    public function get_js_code() {
        $prefix = 'var ';
        if (strpos($this->variable, '.') || strpos($this->variable, '[')) {
            $prefix = '';
        }
        return $prefix . $this->variable . ' = ' . $this->data . ";\n";
    }
}


/**
 * Generate a script tag containing the the specified code.
 *
 * @param string $js the JavaScript code
 * @return string HTML, the code wrapped in <script> tags.
 */
function ajax_generate_script_tag($js) {
    if ($js) {
        return '<script type="text/javascript">' . "\n//<![CDATA[\n" .
                $js . "//]]>\n</script>\n";
    } else {
        return '';
    }
}


/**
 * Given the name of a YUI library, return a list of the .js and .css files that
 * it requries.
 *
 * This method takes note of the $CFG->useexternalyui setting.
 *
 * If $CFG->debug is set to DEBUG_DEVELOPER then this method will return links to
 * the -debug version of the YUI files, otherwise it will return links to the -min versions.
 *
 * @param string $libname the name of a YUI library, for example 'autocomplete'.
 * @return array with two elementes. The first is an array of the JavaScript URLs
 *      that must be loaded to make this library work, in the order they should be
 *      loaded. The second element is a (possibly empty) list of CSS files that
 *      need to be loaded.
 */
function ajax_resolve_yui_lib($libname) {
    global $CFG;

    // Note, we always use yahoo-dom-event, even if we are only asked for part of it.
    // because another part of the code may later ask for other bits. It is easier, and
    // not very inefficient, just to always use (and get browsers to cache) the combined file.
    static $translatelist = array(
        'yahoo' => 'yahoo-dom-event',
        'animation' => array('yahoo-dom-event', 'animation'),
        'autocomplete' => array(
                'js' => array('yahoo-dom-event', 'datasource', 'autocomplete'),
                'css' => array('autocomplete/assets/skins/sam/autocomplete.css')),
        'button' => array(
                'js' => array('yahoo-dom-event', 'element', 'button'),
                'css' => array('button/assets/skins/sam/button.css')),
        'calendar' => array(
                'js' => array('yahoo-dom-event', 'calendar'),
                'css' => array('calendar/assets/skins/sam/calendar.css')),
        'carousel' => array(
                'js' => array('yahoo-dom-event', 'element', 'carousel'),
                'css' => array('carousel/assets/skins/sam/carousel.css')),
        'charts' => array('yahoo-dom-event', 'element', 'datasource', 'json', 'charts'),
        'colorpicker' => array(
                'js' => array('utilities', 'slider', 'colorpicker'),
                'css' => array('colorpicker/assets/skins/sam/colorpicker.css')),
        'connection' => array('yahoo-dom-event', 'connection'),
        'container' => array(
                'js' => array('yahoo-dom-event', 'container'),
                'css' => array('container/assets/skins/sam/container.css')),
        'cookie' => array('yahoo-dom-event', 'cookie'),
        'datasource' => array('yahoo-dom-event', 'datasource'),
        'datatable' => array(
                'js' => array('yahoo-dom-event', 'element', 'datasource', 'datatable'),
                'css' => array('datatable/assets/skins/sam/datatable.css')),
        'dom' => 'yahoo-dom-event',
        'dom-event' => 'yahoo-dom-event',
        'dragdrop' => array('yahoo-dom-event', 'dragdrop'),
        'editor' => array(
                'js' => array('yahoo-dom-event', 'element', 'container', 'menu', 'button', 'editor'),
                'css' => array('assets/skins/sam/skin.css')),
        'element' => array('yahoo-dom-event', 'element'),
        'event' => 'yahoo-dom-event',
        'get' => array('yahoo-dom-event', 'get'),
        'history' => array('yahoo-dom-event', 'history'),
        'imagecropper' => array(
                'js' => array('yahoo-dom-event', 'dragdrop', 'element', 'resize', 'imagecropper'),
                'css' => array('assets/skins/sam/resize.css', 'assets/skins/sam/imagecropper.css')),
        'imageloader' => array('yahoo-dom-event', 'imageloader'),
        'json' => array('yahoo-dom-event', 'json/json'),
        'layout' => array(
                'js' => array('yahoo-dom-event', 'dragdrop', 'element', 'layout'),
                'css' => array('reset-fonts-grids/reset-fonts-grids.css', 'assets/skins/sam/layout.css')),
        'logger' => array(
                'js' => array('yahoo-dom-event', 'logger'),
                'css' => array('logger/assets/skins/sam/logger.css')),
        'menu' => array(
                'js' => array('yahoo-dom-event', 'container', 'menu'),
                'css' => array('menu/assets/skins/sam/menu.css')),
        'paginator' => array(
                'js' => array('yahoo-dom-event', 'element', 'paginator'),
                'css' => array('paginator/assets/skins/sam/paginator.css')),
        'profiler' => array('yahoo-dom-event', 'profiler'),
        'profilerviewer' => array('yuiloader-dom-event', 'element', 'profiler', 'profilerviewer'),
        'resize' => array(
                'js' => array('yahoo-dom-event', 'dragdrop', 'element', 'resize'),
                'css' => array('assets/skins/sam/resize.css')),
        'selector' => array('yahoo-dom-event', 'selector'),
        'simpleeditor' => array(
                'js' => array('yahoo-dom-event', 'element', 'container', 'simpleeditor'),
                'css' => array('assets/skins/sam/skin.css')),
        'slider' => array('yahoo-dom-event', 'gragdrop', 'slider'),
        'stylesheet' => array('yahoo-dom-event', 'stylesheet'),
        'tabview' => array(
                'js' => array('yahoo-dom-event', 'element', 'tabview'),
                'css' => array('assets/skins/sam/skin.css')),
        'treeview' => array(
                'js' => array('yahoo-dom-event', 'treeviewed'),
                'css' => array('treeview/assets/skins/sam/treeview.css')),
        'uploader' => array('yahoo-dom-event', 'element', 'uploader'),
        'utilities' => array('yahoo-dom-event', 'connection', 'animation', 'dragdrop', 'element', 'get'),
        'yuiloader' => 'yuiloader',
        'yuitest' => array(
                'js' => array('yahoo-dom-event', 'logger', 'yuitest'),
                'css' => array('logger/assets/logger.css', 'yuitest/assets/testlogger.css')),
    );
    if (!isset($translatelist[$libname])) {
        throw new coding_exception('Unknown YUI library ' . $libname);
    }

    $data = $translatelist[$libname];
    if (!is_array($data)) {
        $jsnames = array($data);
        $cssfiles = array();
    } else if (isset($data['js']) && isset($data['css'])) {
        $jsnames = $data['js'];
        $cssfiles = $data['css'];
    } else {
        $jsnames = $data;
        $cssfiles = array();
    }

    $debugging = debugging('', DEBUG_DEVELOPER);
    if ($debugging) {
        $suffix = '-debug.js';
    } else {
        $suffix = '-min.js';
    }
    $libpath = $CFG->httpswwwroot . '/lib/yui/';

    $externalyui = !empty($CFG->useexternalyui);
    if ($externalyui) {
        include($CFG->libdir.'/yui/version.php'); // Sets $yuiversion.
        $libpath = 'http://yui.yahooapis.com/' . $yuiversion . '/build/';
    }

    $jsurls = array();
    foreach ($jsnames as $js) {
        if ($js == 'yahoo-dom-event') {
            if ($debugging) {
                $jsurls[] = $libpath . 'yahoo/yahoo' . $suffix;
                $jsurls[] = $libpath . 'dom/dom' . $suffix;
                $jsurls[] = $libpath . 'event/event' . $suffix;
            } else {
                $jsurls[] = $jsurls[] = $libpath . $js . '/' . $js . '.js';
            }
        } else {
            $jsurls[] = $libpath . $js . '/' . $js . $suffix;
        }
    }

    $cssurls = array();
    foreach ($cssfiles as $css) {
        $cssurls[] = $libpath . $css;
    }

    return array($jsurls, $cssurls);
}

/**
 * Return the HTML required to link to a JavaScript file.
 * @param $url the URL of a JavaScript file.
 * @return string the required HTML.
 */
function ajax_get_link_to_script($url) {
    return '<script type="text/javascript"  src="' . $url . '"></script>' . "\n";
}


/**
 * Returns whether ajax is enabled/allowed or not.
 */
function ajaxenabled($browsers = array()) {

    global $CFG, $USER;

    if (!empty($browsers)) {
        $valid = false;
        foreach ($browsers as $brand => $version) {
            if (check_browser_version($brand, $version)) {
                $valid = true;
            }
        }

        if (!$valid) {
            return false;
        }
    }

    $ie = check_browser_version('MSIE', 6.0);
    $ff = check_browser_version('Gecko', 20051106);
    $op = check_browser_version('Opera', 9.0);
    $sa = check_browser_version('Safari', 412);

    if (!$ie && !$ff && !$op && !$sa) {
        /** @see http://en.wikipedia.org/wiki/User_agent */
        // Gecko build 20051107 is what is in Firefox 1.5.
        // We still have issues with AJAX in other browsers.
        return false;
    }

    if (!empty($CFG->enableajax) && (!empty($USER->ajax) || !isloggedin())) {
        return true;
    } else {
        return false;
    }
}


/**
 * Used to create view of document to be passed to JavaScript on pageload.
 * We use this class to pass data from PHP to JavaScript.
 */
class jsportal {

    var $currentblocksection = null;
    var $blocks = array();


    /**
     * Takes id of block and adds it
     */
    function block_add($id, $hidden=false){
        $hidden_binary = 0;

        if ($hidden) {
            $hidden_binary = 1;
        }
        $this->blocks[count($this->blocks)] = array($this->currentblocksection, $id, $hidden_binary);
    }


    /**
     * Prints the JavaScript code needed to set up AJAX for the course.
     */
    function print_javascript($courseid, $return=false) {
        global $CFG, $USER;

        $blocksoutput = $output = '';
        for ($i=0; $i<count($this->blocks); $i++) {
            $blocksoutput .= "['".$this->blocks[$i][0]."',
                             '".$this->blocks[$i][1]."',
                             '".$this->blocks[$i][2]."']";

            if ($i != (count($this->blocks) - 1)) {
                $blocksoutput .= ',';
            }
        }
        $output .= "<script type=\"text/javascript\">\n";
        $output .= "    main.portal.id = ".$courseid.";\n";
        $output .= "    main.portal.blocks = new Array(".$blocksoutput.");\n";
        $output .= "    main.portal.strings['wwwroot']='".$CFG->wwwroot."';\n";
        $output .= "    main.portal.strings['pixpath']='".$CFG->pixpath."';\n";
        $output .= "    main.portal.strings['marker']='".get_string('markthistopic', '', '_var_')."';\n";
        $output .= "    main.portal.strings['marked']='".get_string('markedthistopic', '', '_var_')."';\n";
        $output .= "    main.portal.strings['hide']='".get_string('hide')."';\n";
        $output .= "    main.portal.strings['hidesection']='".get_string('hidesection', '', '_var_')."';\n";
        $output .= "    main.portal.strings['show']='".get_string('show')."';\n";
        $output .= "    main.portal.strings['delete']='".get_string('delete')."';\n";
        $output .= "    main.portal.strings['move']='".get_string('move')."';\n";
        $output .= "    main.portal.strings['movesection']='".get_string('movesection', '', '_var_')."';\n";
        $output .= "    main.portal.strings['moveleft']='".get_string('moveleft')."';\n";
        $output .= "    main.portal.strings['moveright']='".get_string('moveright')."';\n";
        $output .= "    main.portal.strings['update']='".get_string('update')."';\n";
        $output .= "    main.portal.strings['groupsnone']='".get_string('groupsnone')."';\n";
        $output .= "    main.portal.strings['groupsseparate']='".get_string('groupsseparate')."';\n";
        $output .= "    main.portal.strings['groupsvisible']='".get_string('groupsvisible')."';\n";
        $output .= "    main.portal.strings['clicktochange']='".get_string('clicktochange')."';\n";
        $output .= "    main.portal.strings['deletecheck']='".get_string('deletecheck','','_var_')."';\n";
        $output .= "    main.portal.strings['resource']='".get_string('resource')."';\n";
        $output .= "    main.portal.strings['activity']='".get_string('activity')."';\n";
        $output .= "    main.portal.strings['sesskey']='".sesskey()."';\n";
        $output .= "    onloadobj.load();\n";
        $output .= "    main.process_blocks();\n";
        $output .= "</script>";
        if ($return) {
            return $output;
        } else {
            echo $output;
        }
    }

}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))