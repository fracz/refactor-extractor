    public static function get_plugin_tasks($type, $format, $extra = NULL) {
        global $CFG; // REQUIRED by task file includes

        if (is_null($extra)) {
            $extra = $type;
        }
        $tasks   = array();
        $plugins = get_plugin_list($type);
        foreach ($plugins as $name => $dir) {
            $taskfile  = "$dir/backup/$format/convert_{$name}_{$extra}_task.class.php";
            $taskclass = "{$format}_{$name}_{$extra}_task";
            if (!file_exists($taskfile)) {
                continue;
            }
            require_once($taskfile);

            if (!class_exists($taskclass)) {
                throw new coding_exception("The class name should be $taskclass in $taskfile");
            }
            $tasks[] = new $taskclass("{$type}_$name");
        }
        return $tasks;
    }

    /**
     * Adds all of the plugin tasks to the given converter's plan
     *
     * @param plan_converter $converter The converter to add the plugin tasks to
     * @param string $type The plugin type
     * @param string $extra Extra naming structure
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_INCLUDE_OR_EVAL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_NEW
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||