    private function oracle_dirty_hack ($table, $field, $value) {

    /// Get metadata
        $columns = $this->get_columns($table);
        if (!isset($columns[$field])) {
            return $value;
        }
        $column = $columns[$field];

    /// For Oracle DB, empty strings are converted to NULLs in DB
    /// and this breaks a lot of NOT NULL columns currenty Moodle. In the future it's
    /// planned to move some of them to NULL, if they must accept empty values and this
    /// piece of code will become less and less used. But, for now, we need it.
    /// What we are going to do is to examine all the data being inserted and if it's
    /// an empty string (NULL for Oracle) and the field is defined as NOT NULL, we'll modify
    /// such data in the best form possible ("0" for booleans and numbers and " " for the
    /// rest of strings. It isn't optimal, but the only way to do so.
    /// In the oppsite, when retrieving records from Oracle, we'll decode " " back to
    /// empty strings to allow everything to work properly. DIRTY HACK.

    /// If the field ins't VARCHAR or CLOB, skip
        if ($column->meta_type != 'C' and $column->meta_type != 'X') {
            return $value;
        }

    /// If the field isn't NOT NULL, skip (it's nullable, so accept empty-null values)
        if (!$column->not_null) {
            return $value;
        }

    /// If the value isn't empty, skip
        if (!empty($value)) {
            return $value;
        }

    /// Now, we have one empty value, going to be inserted to one NOT NULL, VARCHAR2 or CLOB field
    /// Try to get the best value to be inserted

    /// The '0' string doesn't need any transformation, skip
        if ($value === '0') {
            return $value;
        }

    /// Transformations start
        if (gettype($value) == 'boolean') {
            return '0'; /// Transform false to '0' that evaluates the same for PHP

        } else if (gettype($value) == 'integer') {
            return '0'; /// Transform 0 to '0' that evaluates the same for PHP

        } else if (gettype($value) == 'NULL') {
            return '0'; /// Transform NULL to '0' that evaluates the same for PHP

        } else if ($value === '') {
            return ' '; /// Transform '' to ' ' that DONT'T EVALUATE THE SAME
                        /// (we'll transform back again on get_records_XXX functions and others)!!
        }

    /// Fail safe to original value
        return $value;
    }

    /**
     * Import a record into a table, id field is required.
     * Basic safety checks only. Lobs are supported.
     * @param string $table name of database table to be inserted into
     * @param mixed $dataobject object or array with fields in the record
     * @return bool success
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (
                            (AST_RETURN
                                (SCALAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_RETURN
                                            (SCALAR))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (
                                                    (AST_RETURN
                                                        (SCALAR))))))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||