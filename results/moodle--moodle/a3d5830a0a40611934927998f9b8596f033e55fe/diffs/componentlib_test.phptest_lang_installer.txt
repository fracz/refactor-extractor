||||||||    public function test_lang_installer() {

        // test the manipulation with the download queue
        $installer = new testable_lang_installer();
        $this->assertFalse($installer->protected_is_queued());
        $installer->protected_add_to_queue('cs');
        $installer->protected_add_to_queue(array('cs', 'sk'));
        $this->assertTrue($installer->protected_is_queued());
        $this->assertTrue($installer->protected_is_queued('cs'));
        $this->assertTrue($installer->protected_is_queued('sk'));
        $this->assertFalse($installer->protected_is_queued('de_kids'));
        $installer->set_queue('de_kids');
        $this->assertFalse($installer->protected_is_queued('cs'));
        $this->assertFalse($installer->protected_is_queued('sk'));
        $this->assertFalse($installer->protected_is_queued('de'));
        $this->assertFalse($installer->protected_is_queued('de_du'));
        $this->assertTrue($installer->protected_is_queued('de_kids'));
        $installer->set_queue(array('cs', 'de_kids'));
        $this->assertTrue($installer->protected_is_queued('cs'));
        $this->assertFalse($installer->protected_is_queued('sk'));
        $this->assertFalse($installer->protected_is_queued('de'));
        $this->assertFalse($installer->protected_is_queued('de_du'));
        $this->assertTrue($installer->protected_is_queued('de_kids'));
        $installer->set_queue(array());
        $this->assertFalse($installer->protected_is_queued());
        unset($installer);

        // install a set of lang packs
        $installer = new testable_lang_installer(array('cs', 'de_kids', 'xx'));
        $result = $installer->run();
        $this->assertEquals($result['cs'], lang_installer::RESULT_UPTODATE);
        $this->assertEquals($result['de_kids'], lang_installer::RESULT_INSTALLED);
        $this->assertEquals($result['xx'], lang_installer::RESULT_DOWNLOADERROR);
        // the following two were automatically added to the queue
        $this->assertEquals($result['de_du'], lang_installer::RESULT_INSTALLED);
        $this->assertEquals($result['de'], lang_installer::RESULT_UPTODATE);

        // exception throwing
        $installer = new testable_lang_installer(array('yy'));
        try {
            $installer->run();
            $this->fail('lang_installer_exception exception expected');
        } catch (Exception $e) {
            $this->assertEquals('lang_installer_exception', get_class($e));
        }
    }
}

/**
 * Testable lang_installer subclass that does not actually install anything
 * and provides access to the protected methods of the parent class
 *
 * @copyright 2011 David Mudrak <david@moodle.com>
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class testable_lang_installer extends lang_installer {

    /**
     * @see parent::is_queued()
     */
    public function protected_is_queued($langcode = '') {
        return $this->is_queued($langcode);
    }

    /**
     * @see parent::add_to_queue()
     */
    public function protected_add_to_queue($langcodes) {
        return $this->add_to_queue($langcodes);
    }

    /**
     * Simulate lang pack installation via component_installer
     *
     * Language packages 'de_du' and 'de_kids' reported as installed
     * Language packages 'cs' and 'de' reported as up-to-date
     * Language package 'xx' returns download error
     * All other language packages will throw an unknown exception
     *
     * @see parent::install_language_pack()
     */
    protected function install_language_pack($langcode) {

        switch ($langcode) {
            case 'de_du':
            case 'de_kids':
                return self::RESULT_INSTALLED;

            case 'cs':
            case 'de':
                return self::RESULT_UPTODATE;

            case 'xx':
                return self::RESULT_DOWNLOADERROR;

            default:
                throw new lang_installer_exception('testing-unknown-exception', $langcode);
        }
    }

    /**
     * Simulate detection of parent languge
     *
     * @see parent::get_parent_language()
     */
    protected function get_parent_language($langcode) {

        switch ($langcode) {
            case 'de_kids':
                return 'de_du';
            case 'de_du':
                return 'de';
            default:
                return '';
        }
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_UNSET
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR))))))))
        (NULL)))