||||||||    public function test_filter_delete_all_for_context() {
        global $DB;

        // Setup fixture.
        filter_set_global_state('filter/name', TEXTFILTER_ON);
        filter_set_local_state('filter/name', 123, TEXTFILTER_OFF);
        filter_set_local_config('filter/name', 123, 'settingname', 'A value');
        filter_set_local_config('filter/other', 123, 'settingname', 'Other value');
        filter_set_local_config('filter/other', 122, 'settingname', 'Other value');
        // Exercise SUT.
        filter_delete_all_for_context(123);
        // Validate.
        $this->assertEquals(1, $DB->count_records('filter_active'));
        $this->assertTrue($DB->record_exists('filter_active', array('contextid' => context_system::instance()->id)));
        $this->assertEquals(1, $DB->count_records('filter_config'));
        $this->assertTrue($DB->record_exists('filter_config', array('filter' => 'filter/other')));
    }
}

class filter_filter_set_applies_to_strings extends advanced_testcase {
    protected $origcfgstringfilters;
    protected $origcfgfilterall;

    public function setUp() {
        global $DB, $CFG;
        parent::setUp();

        $DB->delete_records('filter_active', array());
        $DB->delete_records('filter_config', array());
        $this->resetAfterTest(false);

        // Store original $CFG;
        $this->origcfgstringfilters = $CFG->stringfilters;
        $this->origcfgfilterall = $CFG->filterall;
    }

    public function tearDown() {
        global $CFG;
        $CFG->stringfilters = $this->origcfgstringfilters;
        $CFG->filterall = $this->origcfgfilterall;

        parent::tearDown();
    }

    public function test_set() {
        global $CFG;
        // Setup fixture.
        $CFG->filterall = 0;
        $CFG->stringfilters = '';
        // Exercise SUT.
        filter_set_applies_to_strings('filter/name', true);
        // Validate.
        $this->assertEquals('filter/name', $CFG->stringfilters);
        $this->assertEquals(1, $CFG->filterall);
    }

    public function test_unset_to_empty() {
        global $CFG;
        // Setup fixture.
        $CFG->filterall = 1;
        $CFG->stringfilters = 'filter/name';
        // Exercise SUT.
        filter_set_applies_to_strings('filter/name', false);
        // Validate.
        $this->assertEquals('', $CFG->stringfilters);
        $this->assertEquals('', $CFG->filterall);
    }

    public function test_unset_multi() {
        global $CFG;
        // Setup fixture.
        $CFG->filterall = 1;
        $CFG->stringfilters = 'filter/name,filter/other';
        // Exercise SUT.
        filter_set_applies_to_strings('filter/name', false);
        // Validate.
        $this->assertEquals('filter/other', $CFG->stringfilters);
        $this->assertEquals(1, $CFG->filterall);
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_CALL
        (
            (SCALAR)
            (AST_CONST)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_CONST)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_STATIC_CALL))
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))))))))