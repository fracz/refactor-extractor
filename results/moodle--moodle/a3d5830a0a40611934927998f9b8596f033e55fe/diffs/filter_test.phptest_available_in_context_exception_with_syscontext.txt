||||||||    public function test_available_in_context_exception_with_syscontext() {
        // Exercise SUT.
        filter_get_available_in_context(self::$syscontext);
    }
}


class filter_preload_activities_test extends advanced_testcase {
    private static $syscontext;
    private static $catcontext;
    private static $coursecontext;
    private static $course;
    private static $activity1context;
    private static $activity2context;

    public static function setUpBeforeClass() {
        parent::setUpBeforeClass();

        self::$syscontext = context_system::instance();
        self::$catcontext = context_coursecat::instance(1);
        self::$course = self::getDataGenerator()->create_course(array('category'=>1));
        self::$coursecontext = context_course::instance(self::$course->id);
        $page1 =  self::getDataGenerator()->create_module('page', array('course'=>self::$course->id));
        self::$activity1context = context_module::instance($page1->cmid);
        $page2 =  self::getDataGenerator()->create_module('page', array('course'=>self::$course->id));
        self::$activity2context = context_module::instance($page2->cmid);
    }

    public function setUp() {
        global $DB;
        parent::setUp();

        $DB->delete_records('filter_active', array());
        $DB->delete_records('filter_config', array());
        $this->resetAfterTest(false);
    }

    private function assert_matches($modinfo) {
        global $FILTERLIB_PRIVATE, $DB;

        // Use preload cache...
        $FILTERLIB_PRIVATE = new stdClass();
        filter_preload_activities($modinfo);

        // Get data and check no queries are made
        $before = $DB->perf_get_reads();
        $plfilters1 = filter_get_active_in_context(self::$activity1context);
        $plfilters2 = filter_get_active_in_context(self::$activity2context);
        $after = $DB->perf_get_reads();
        $this->assertEquals($before, $after);

        // Repeat without cache and check it makes queries now
        $FILTERLIB_PRIVATE = new stdClass;
        $before = $DB->perf_get_reads();
        $filters1 = filter_get_active_in_context(self::$activity1context);
        $filters2 = filter_get_active_in_context(self::$activity2context);
        $after = $DB->perf_get_reads();
        $this->assertTrue($after > $before);

        // Check they match
        $this->assertEquals($plfilters1, $filters1);
        $this->assertEquals($plfilters2, $filters2);
    }

    public function test_preload() {
        // Get course and modinfo
        $modinfo = new course_modinfo(self::$course, 2);

        // Note: All the tests in this function check that the result from the
        // preloaded cache is the same as the result from calling the standard
        // function without preloading.

        // Initially, check with no filters enabled
        $this->assert_matches($modinfo);

        // Enable filter globally, check
        filter_set_global_state('filter/name', TEXTFILTER_ON);
        $this->assert_matches($modinfo);

        // Disable for activity 2
        filter_set_local_state('filter/name', self::$activity2context->id, TEXTFILTER_OFF);
        $this->assert_matches($modinfo);

        // Disable at category
        filter_set_local_state('filter/name', self::$catcontext->id, TEXTFILTER_OFF);
        $this->assert_matches($modinfo);

        // Enable for activity 1
        filter_set_local_state('filter/name', self::$activity1context->id, TEXTFILTER_ON);
        $this->assert_matches($modinfo);

        // Disable globally
        filter_set_global_state('filter/name', TEXTFILTER_DISABLED);
        $this->assert_matches($modinfo);

        // Add another 2 filters
        filter_set_global_state('filter/frog', TEXTFILTER_ON);
        filter_set_global_state('filter/zombie', TEXTFILTER_ON);
        $this->assert_matches($modinfo);

        // Disable random one of these in each context
        filter_set_local_state('filter/zombie', self::$activity1context->id, TEXTFILTER_OFF);
        filter_set_local_state('filter/frog', self::$activity2context->id, TEXTFILTER_OFF);
        $this->assert_matches($modinfo);

        // Now do some filter options
        filter_set_local_config('filter/name', self::$activity1context->id, 'a', 'x');
        filter_set_local_config('filter/zombie', self::$activity1context->id, 'a', 'y');
        filter_set_local_config('filter/frog', self::$activity1context->id, 'a', 'z');
        // These last two don't do anything as they are not at final level but I
        // thought it would be good to have that verified in test
        filter_set_local_config('filter/frog', self::$coursecontext->id, 'q', 'x');
        filter_set_local_config('filter/frog', self::$catcontext->id, 'q', 'z');
        $this->assert_matches($modinfo);
    }
}


class filter_delete_config_test extends advanced_testcase {
    public function setUp() {
        global $DB;
        parent::setUp();

        $DB->delete_records('filter_active', array());
        $DB->delete_records('filter_config', array());
        $this->resetAfterTest(false);
    }

    public function test_filter_delete_all_for_filter() {
        global $DB;

        // Setup fixture.
        filter_set_global_state('filter/name', TEXTFILTER_ON);
        filter_set_global_state('filter/other', TEXTFILTER_ON);
        filter_set_local_config('filter/name', context_system::instance()->id, 'settingname', 'A value');
        filter_set_local_config('filter/other', context_system::instance()->id, 'settingname', 'Other value');
        set_config('configname', 'A config value', 'filter_name');
        set_config('configname', 'Other config value', 'filter_other');
        // Exercise SUT.
        filter_delete_all_for_filter('filter/name');
        // Validate.
        $this->assertEquals(1, $DB->count_records('filter_active'));
        $this->assertTrue($DB->record_exists('filter_active', array('filter' => 'filter/other')));
        $this->assertEquals(1, $DB->count_records('filter_config'));
        $this->assertTrue($DB->record_exists('filter_config', array('filter' => 'filter/other')));
        $expectedconfig = new stdClass;
        $expectedconfig->configname = 'Other config value';
        $this->assertEquals($expectedconfig, get_config('filter_other'));
        $this->assertEquals(get_config('filter_name'), new stdClass());
    }

    public function test_filter_delete_all_for_context() {
        global $DB;

        // Setup fixture.
        filter_set_global_state('filter/name', TEXTFILTER_ON);
        filter_set_local_state('filter/name', 123, TEXTFILTER_OFF);
        filter_set_local_config('filter/name', 123, 'settingname', 'A value');
        filter_set_local_config('filter/other', 123, 'settingname', 'Other value');
        filter_set_local_config('filter/other', 122, 'settingname', 'Other value');
        // Exercise SUT.
        filter_delete_all_for_context(123);
        // Validate.
        $this->assertEquals(1, $DB->count_records('filter_active'));
        $this->assertTrue($DB->record_exists('filter_active', array('contextid' => context_system::instance()->id)));
        $this->assertEquals(1, $DB->count_records('filter_config'));
        $this->assertTrue($DB->record_exists('filter_config', array('filter' => 'filter/other')));
    }
}

class filter_filter_set_applies_to_strings extends advanced_testcase {
    protected $origcfgstringfilters;
    protected $origcfgfilterall;

    public function setUp() {
        global $DB, $CFG;
        parent::setUp();

        $DB->delete_records('filter_active', array());
        $DB->delete_records('filter_config', array());
        $this->resetAfterTest(false);

        // Store original $CFG;
        $this->origcfgstringfilters = $CFG->stringfilters;
        $this->origcfgfilterall = $CFG->filterall;
    }

    public function tearDown() {
        global $CFG;
        $CFG->stringfilters = $this->origcfgstringfilters;
        $CFG->filterall = $this->origcfgfilterall;

        parent::tearDown();
    }

    public function test_set() {
        global $CFG;
        // Setup fixture.
        $CFG->filterall = 0;
        $CFG->stringfilters = '';
        // Exercise SUT.
        filter_set_applies_to_strings('filter/name', true);
        // Validate.
        $this->assertEquals('filter/name', $CFG->stringfilters);
        $this->assertEquals(1, $CFG->filterall);
    }

    public function test_unset_to_empty() {
        global $CFG;
        // Setup fixture.
        $CFG->filterall = 1;
        $CFG->stringfilters = 'filter/name';
        // Exercise SUT.
        filter_set_applies_to_strings('filter/name', false);
        // Validate.
        $this->assertEquals('', $CFG->stringfilters);
        $this->assertEquals('', $CFG->filterall);
    }

    public function test_unset_multi() {
        global $CFG;
        // Setup fixture.
        $CFG->filterall = 1;
        $CFG->stringfilters = 'filter/name,filter/other';
        // Exercise SUT.
        filter_set_applies_to_strings('filter/name', false);
        // Validate.
        $this->assertEquals('filter/other', $CFG->stringfilters);
        $this->assertEquals(1, $CFG->filterall);
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (AST_STATIC_PROP))))