    function sub_test_grade_category_generate_grades() {
        global $DB;

        //inserting some special grade items to make testing the final grade calculation easier
        $params->courseid = $this->courseid;
        $params->fullname = 'unittestgradecalccategory';
        $params->aggregation = GRADE_AGGREGATE_MEAN;
        $params->aggregateonlygraded = 0;
        $grade_category = new grade_category($params, false);
        $grade_category->insert();

        $this->assertTrue(method_exists($grade_category, 'generate_grades'));

        $grade_category->load_grade_item();
        $cgi = $grade_category->get_grade_item();
        $cgi->grademin = 0;
        $cgi->grademax = 20;//3 grade items out of 10 but category is out of 20 to force scaling to occur
        $cgi->update();

        //3 grade items each with a maximum grade of 10
        $grade_items = array();
        for ($i=0; $i<3; $i++) {
            $grade_items[$i] = new grade_item();
            $grade_items[$i]->courseid = $this->courseid;
            $grade_items[$i]->categoryid = $grade_category->id;
            $grade_items[$i]->itemname = 'manual grade_item '.$i;
            $grade_items[$i]->itemtype = 'manual';
            $grade_items[$i]->itemnumber = 0;
            $grade_items[$i]->needsupdate = false;
            $grade_items[$i]->gradetype = GRADE_TYPE_VALUE;
            $grade_items[$i]->grademin = 0;
            $grade_items[$i]->grademax = 10;
            $grade_items[$i]->iteminfo = 'Manual grade item used for unit testing';
            $grade_items[$i]->timecreated = time();
            $grade_items[$i]->timemodified = time();

            //used as the weight by weighted mean and as extra credit by mean with extra credit
            //Will be 0, 1 and 2
            $grade_items[$i]->aggregationcoef = $i;

            $grade_items[$i]->insert();
        }

        //a grade for each grade item
        $grade_grades = array();
        for ($i=0; $i<3; $i++) {
            $grade_grades[$i] = new grade_grade();
            $grade_grades[$i]->itemid = $grade_items[$i]->id;
            $grade_grades[$i]->userid = $this->userid;
            $grade_grades[$i]->rawgrade = ($i+1)*2;//produce grade grades of 2, 4 and 6
            $grade_grades[$i]->finalgrade = ($i+1)*2;
            $grade_grades[$i]->timecreated = time();
            $grade_grades[$i]->timemodified = time();
            $grade_grades[$i]->information = '1 of 2 grade_grades';
            $grade_grades[$i]->informationformat = FORMAT_PLAIN;
            $grade_grades[$i]->feedback = 'Good, but not good enough..';
            $grade_grades[$i]->feedbackformat = FORMAT_PLAIN;

            $grade_grades[$i]->insert();
        }

        //3 grade items with 1 grade_grade each.
        //grade grades have the values 2, 4 and 6

        //First correct answer is the aggregate with all 3 grades
        //Second correct answer is with the first grade (value 2) hidden

        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_MEDIAN, 'GRADE_AGGREGATE_MEDIAN', 8, 8);
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_MAX, 'GRADE_AGGREGATE_MAX', 12, 12);
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_MODE, 'GRADE_AGGREGATE_MODE', 12, 12);

        //weighted mean. note grade totals are rounded to an int to prevent rounding discrepancies. correct final grade isnt actually exactly 10
        //3 items with grades 2, 4 and 6 with weights 0, 1 and 2 and all out of 10. then doubled to be out of 20.
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_WEIGHTED_MEAN, 'GRADE_AGGREGATE_WEIGHTED_MEAN', 10, 10);

        //simple weighted mean
        //3 items with grades 2, 4 and 6 equally weighted and all out of 10. then doubled to be out of 20.
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_WEIGHTED_MEAN2, 'GRADE_AGGREGATE_WEIGHTED_MEAN2', 8, 10);

        //mean of grades with extra credit
        //3 items with grades 2, 4 and 6 with extra credit 0, 1 and 2 equally weighted and all out of 10. then doubled to be out of 20.
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_EXTRACREDIT_MEAN, 'GRADE_AGGREGATE_EXTRACREDIT_MEAN', 10, 13);

        //aggregation tests the are affected by a hidden grade currently dont work as we dont store the altered grade in the database
        //instead an in memory recalculation is done. This should be remedied by MDL-11837

        //fails with 1 grade hidden. still reports 8 as being correct
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_MEAN, 'GRADE_AGGREGATE_MEAN', 8, 10);

        //fails with 1 grade hidden. still reports 4 as being correct
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_MIN, 'GRADE_AGGREGATE_MIN', 4, 8);

        //fails with 1 grade hidden. still reports 12 as being correct
        $this->helper_test_grade_agg_method($grade_category, $grade_items, $grade_grades, GRADE_AGGREGATE_SUM, 'GRADE_AGGREGATE_SUM', 12, 10);
    }

    /**
     * Test grade category aggregation using the supplied grade objects and aggregation method
     * @param grade_category $grade_category the category to be tested
     * @param array $grade_items array of instance of grade_item
     * @param array $grade_grades array of instances of grade_grade
     * @param int $aggmethod the aggregation method to apply ie GRADE_AGGREGATE_MEAN
     * @param string $aggmethodname the name of the aggregation method to apply. Used to display any test failure messages
     * @param int $correct1 the correct final grade for the category with NO items hidden
     * @param int $correct2 the correct final grade for the category with the grade at $grade_grades[0] hidden
     * @return void
    */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (SCALAR)
            (SCALAR))))||||||||