    public function do_password_check($canpreview, $accessmanager) {
        global $CFG, $SESSION, $OUTPUT, $PAGE;

        // We have already checked the password for this quiz this session, so don't ask again.
        if (!empty($SESSION->passwordcheckedquizzes[$this->quiz->id])) {
            return;
        }

        // If the user cancelled the password form, send them back to the view page.
        if (optional_param('cancelpassword', false, PARAM_BOOL)) {
            $accessmanager->back_to_view_page($output);
        }

        // If they entered the right password, let them in.
        $enteredpassword = optional_param('quizpassword', '', PARAM_RAW);
        $validpassword = false;
        if (strcmp($this->quiz->password, $enteredpassword) === 0) {
            $validpassword = true;
        } else if (isset($this->quiz->extrapasswords)) {
            // group overrides may have additional passwords
            foreach ($this->quiz->extrapasswords as $password) {
                if (strcmp($password, $enteredpassword) === 0) {
                    $validpassword = true;
                    break;
                }
            }
        }
        if ($validpassword) {
            $SESSION->passwordcheckedquizzes[$this->quiz->id] = true;
            return;
        }

        // User entered the wrong password, or has not entered one yet, so display the form.
        $output = '';

        // Start the page and print the quiz intro, if any.
        $PAGE->set_title(format_string($this->quizobj->get_quiz_name()));
        $accessmanager->setup_attempt_page($PAGE);

        echo $OUTPUT->header();
        if (trim(strip_tags($this->quiz->intro))) {
            $output .= $OUTPUT->box(format_module_intro('quiz', $this->quiz,
            $this->quizobj->get_cmid()), 'generalbox', 'intro');
        }
        $output .= $OUTPUT->box_start('generalbox', 'passwordbox');

        // If they have previously tried and failed to enter a password, tell them it was wrong.
        if (!empty($enteredpassword)) {
            $output .= '<p class="notifyproblem">' . get_string('passworderror', 'quiz') . '</p>';
        }

        // Print the password entry form.
        $output .= '<p>' . get_string('requirepasswordmessage', 'quiz') . "</p>\n";
        $output .= '<form id="passwordform" method="post" action="' . $CFG->wwwroot .
                '/mod/quiz/startattempt.php" onclick="this.autocomplete=\'off\'">' . "\n";
        $output .= "<div>\n";
        $output .= '<label for="quizpassword">' . get_string('password') . "</label>\n";
        $output .= '<input name="quizpassword" id="quizpassword" type="password" value=""/>' . "\n";
        $output .= '<input name="cmid" type="hidden" value="' .
        $this->quizobj->get_cmid() . '"/>' . "\n";
        $output .= '<input name="sesskey" type="hidden" value="' . sesskey() . '"/>' . "\n";
        $output .= '<input type="submit" value="' . get_string('ok') . '" />';
        $output .= '<input type="submit" name="cancelpassword" value="' .
        get_string('cancel') . '" />' . "\n";
        $output .= "</div>\n";
        $output .= "</form>\n";

        // Finish page.
        $output .= $OUTPUT->box_end();

        // return or display form.
        echo $output;
        echo $OUTPUT->footer();
        exit;
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CONST)
                    (AST_CONST)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR)))
                                                (SCALAR))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_CONST))
                                                (AST_BREAK
                                                    (NULL)))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))
                    (AST_CONST))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR))))
                        (SCALAR))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR))))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_EXIT
        (NULL)))||||||||