    public static function grade_competency_in_plan($planorid, $competencyid, $grade, $override) {
        global $USER;

        $plan = $planorid;
        if (!is_object($planorid)) {
            $plan = new plan($planorid);
        }
        $context = $plan->get_context();
        if ($override) {
            require_capability('tool/lp:competencygrade', $context);
        } else {
            require_capability('tool/lp:competencysuggestgrade', $context);
        }

        // Verify the data.


        $userplancompetencies = self::list_plan_competencies($plan);
        $competency = null;

        foreach ($userplancompetencies as $userplancompetency) {
            if ($userplancompetency->competency->get_id() == $competencyid) {
                $competency = $userplancompetency->competency;
            }
        }
        if (!$competency) {
            throw new coding_exception('The competency does not belong to this plan: ' . $competencyid . ', ' . $planid);
        }

        $action = evidence::ACTION_OVERRIDE;
        $desckey = 'evidence_manualoverrideinplan';
        if (!$override) {
            $action = evidence::ACTION_SUGGEST;
            $desckey = 'evidence_manualsuggestinplan';
        }

        return self::add_evidence($plan->get_userid(),
                                  $competency,
                                  $context->id,
                                  $action,
                                  $desckey,
                                  'tool_lp',
                                  $plan->get_name(),
                                  false,
                                  null,
                                  $grade,
                                  $USER->id);
    }

    /**
     * Manually grade a user competency from the course page.
     *
     * @param mixed $courseorid
     * @param int $userid
     * @param int $competencyid
     * @param int $grade
     * @param boolean $override
     * @return array of \tool_lp\user_competency
     */
||||||||    public static function grade_competency_in_plan($planorid, $competencyid, $grade, $override) {
        global $USER;

        $plan = $planorid;
        if (!is_object($planorid)) {
            $plan = new plan($planorid);
        }
        $context = $plan->get_context();
        if ($override) {
            require_capability('tool/lp:competencygrade', $context);
        } else {
            require_capability('tool/lp:competencysuggestgrade', $context);
        }

        // Throws exception if competency not in plan.
        $competency = $plan->get_competency($competencyid);
        $competencycontext = $competency->get_context();
        if (!has_any_capability(array('tool/lp:competencyread', 'tool/lp:competencymanage'), $competencycontext)) {
             throw new required_capability_exception($competencycontext, 'tool/lp:competencyread', 'nopermissions', '');
        }

        $action = evidence::ACTION_OVERRIDE;
        $desckey = 'evidence_manualoverrideinplan';
        if (!$override) {
            $action = evidence::ACTION_SUGGEST;
            $desckey = 'evidence_manualsuggestinplan';
        }

        return self::add_evidence($plan->get_userid(),
                                  $competency,
                                  $context->id,
                                  $action,
                                  $desckey,
                                  'tool_lp',
                                  $plan->get_name(),
                                  false,
                                  null,
                                  $grade,
                                  $USER->id);
    }

    /**
     * Manually grade a user competency from the course page.
     *
     * @param mixed $courseorid
     * @param int $userid
     * @param int $competencyid
     * @param int $grade
     * @param boolean $override
     * @return array of \tool_lp\user_competency
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST)
                (AST_CONST)
                (AST_VAR)
                (AST_PROP
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST)
                (AST_CONST)
                (AST_VAR)
                (AST_PROP
                    (AST_VAR))))))