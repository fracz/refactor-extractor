    function test_response(&$question, &$state, $answer ) {
        // Deal with the match anything answer.
        //        echo"<p> test_response answer    <pre>";print_r($answer) ;echo"</pre></p>";
        //        echo"<p>test_response state    <pre>";print_r($state) ;echo"</pre></p>";
        if ($answer->answer === '*') {
            return true;
        }
        // using old grading process if $question->unitgradingtype == 0
        // and adding unit1 for the new option NUMERICALQUESTIONUNITTEXTDISPLAY
        if ($question->options->unitgradingtype == 0 ){
            // values coming form old question stored in attempts
            if (!isset($state->responses['answer']) && isset($state->responses[''])){
               $state->responses['answer'] =  $state->responses[''];
            }
            $answertotest = $state->responses['answer'];
            // values coming from  NUMERICALQUESTIONUNITTEXTINPUTDISPLAY
            // or NUMERICALQUESTIONUNITTEXTDISPLAY as unit hidden HTML element
            if(isset($state->responses['unit'])) {
                $answertotest .= $state->responses['unit'] ;
            }
          //  if ($question->options->showunits == NUMERICALQUESTIONUNITTEXTDISPLAY && isset($question->options->units[0])){
           //     $answertotest .= $question->options->units[0]->unit ;
           // }
           // test OK if only numerical or numerical with known unit names with the unit mltiplier applied
            $response = $this->apply_unit($answertotest, $question->options->units);
      //          echo"<p> dans response  apres apply  <pre>";print_r($response) ;echo"</pre></p>";

            if ($response === false) {
                return false; // The student did not type a number.
            }

            // The student did type a number, so check it with tolerances.
            $this->get_tolerance_interval($answer);
      //          echo"<p> test_response apres get tolerance interval answer    <pre>";print_r($answer) ;echo"</pre></p>";
            return ($answer->min <= $response && $response <= $answer->max);
        }else { // $question->options->unitgradingtype > 0
            /* testing with unitgradingtype $question->options->unitgradingtype > 0
            * if the response is at least patially true
            * if the numerical value agree in the interval
            * if so the only non valid case will be a bad unit and a unity penalty.

             To be able to test (old) questions that do not have an unit
            * input element the test is done using the $state->responses['']
            * which contains the response which is analyzed by extract_numerical_response()
            * If the data comes from the numerical or calculated display
            * the $state->responses['unit'] comes from either
            * a multichoice radio element NUMERICALQUESTIONUNITMULTICHOICEDISPLAY
            * where the $state->responses['unit'] value is the key => unit object
            * in the  the $question->options->units array
            * or an input text element NUMERICALQUESTIONUNITTEXTINPUTDISPLAY
            * which contains the student response
            * for NUMERICALQUESTIONUNITTEXTDISPLAY and NUMERICALQUESTIONUNITNODISPLAY
            *
            */

            $response = $this->extract_numerical_response($state->responses['answer']);

           //     echo"<p> response    <pre>";print_r($response) ;echo"</pre></p>";
              //  echo"<p> response    <pre>";print_r($response) ;echo"</pre></p>";

            if ($response->number === false ) {
                return false; // The student did not type a number.
            }

            // The student did type a number, so check it with tolerances.
            $this->get_tolerance_interval($answer);
            if ($answer->min <= $response->number && $response->number <= $answer->max){
             //   echo"<p> response  true  <pre>";print_r($response) ;echo"</pre></p>";
               return true;
            }
            // testing for other units
            if ( isset($question->options->units) && count($question->options->units) > 0) {
                foreach($question->options->units as $key =>$unit){
                    $testresponse = $response->number /$unit->multiplier ;
                    if($answer->min <= $testresponse && $testresponse<= $answer->max) {
                        return true;
                    }
                }
            }
            return false;
        }
        return false;
    }

    /**
    * Performs response processing and grading
    * The function was redefined for handling correctly the two parts
    * number and unit of numerical or calculated questions
    * The code handles also the case when there no unit defined by the user or
    * when used in a multianswer (Cloze) question.
    * This function performs response processing and grading and updates
    * the state accordingly.
    * @return boolean         Indicates success or failure.
    * @param object $question The question to be graded. Question type
    *                         specific information is included.
    * @param object $state    The state of the question to grade. The current
    *                         responses are in ->responses. The last graded state
    *                         is in ->last_graded (hence the most recently graded
    *                         responses are in ->last_graded->responses). The
    *                         question type specific information is also
    *                         included. The ->raw_grade and ->penalty fields
    *                         must be updated. The method is able to
    *                         close the question session (preventing any further
    *                         attempts at this question) by setting
    *                         $state->event to QUESTION_EVENTCLOSEANDGRADE
    * @param object $cmoptions
    */
||||||||    function test_response(&$question, &$state, $answer ) {
        // Deal with the match anything answer.
        //        echo"<p> test_response answer    <pre>";print_r($answer) ;echo"</pre></p>";
        //        echo"<p>test_response state    <pre>";print_r($state) ;echo"</pre></p>";
        if ($answer->answer === '*') {
            return true;
        }
        // using old grading process if $question->unitgradingtype == 0
        // and adding unit1 for the new option NUMERICALQUESTIONUNITTEXTDISPLAY
        if ($question->options->unitgradingtype == 0 ){
            // values coming form old question stored in attempts
            if (!isset($state->responses['answer']) && isset($state->responses[''])){
               $state->responses['answer'] =  $state->responses[''];
            }
            $answertotest = $state->responses['answer'];
            // values coming from  NUMERICALQUESTIONUNITTEXTINPUTDISPLAY
            // or NUMERICALQUESTIONUNITTEXTDISPLAY as unit hidden HTML element

            if($question->options->showunits == NUMERICALQUESTIONUNITTEXTINPUTDISPLAY ){
                //
                $testresponse = $this->extract_numerical_response($state->responses['answer']);
                if($testresponse->unit != '' || $testresponse->number === false){
                   return false;
                }
                $answertotest = $testresponse->number ;
            }
            if(isset($state->responses['unit'])) {
                $answertotest .= $state->responses['unit'] ;
            }
          //  if ($question->options->showunits == NUMERICALQUESTIONUNITTEXTDISPLAY && isset($question->options->units[0])){
           //     $answertotest .= $question->options->units[0]->unit ;
           // }
           // test OK if only numerical or numerical with known unit names with the unit mltiplier applied
            $response = $this->apply_unit($answertotest, $question->options->units);
      //          echo"<p> dans response  apres apply  <pre>";print_r($response) ;echo"</pre></p>";

            if ($response === false) {
                return false; // The student did not type a number.
            }

            // The student did type a number, so check it with tolerances.
            $this->get_tolerance_interval($answer);
      //          echo"<p> test_response apres get tolerance interval answer    <pre>";print_r($answer) ;echo"</pre></p>";
            return ($answer->min <= $response && $response <= $answer->max);
        }else { // $question->options->unitgradingtype > 0
            /* testing with unitgradingtype $question->options->unitgradingtype > 0
            * if the response is at least patially true
            * if the numerical value agree in the interval
            * if so the only non valid case will be a bad unit and a unity penalty.

             To be able to test (old) questions that do not have an unit
            * input element the test is done using the $state->responses['']
            * which contains the response which is analyzed by extract_numerical_response()
            * If the data comes from the numerical or calculated display
            * the $state->responses['unit'] comes from either
            * a multichoice radio element NUMERICALQUESTIONUNITMULTICHOICEDISPLAY
            * where the $state->responses['unit'] value is the key => unit object
            * in the  the $question->options->units array
            * or an input text element NUMERICALQUESTIONUNITTEXTINPUTDISPLAY
            * which contains the student response
            * for NUMERICALQUESTIONUNITTEXTDISPLAY and NUMERICALQUESTIONUNITNODISPLAY
            *
            */

            $response = $this->extract_numerical_response($state->responses['answer']);

           //     echo"<p> response    <pre>";print_r($response) ;echo"</pre></p>";
              //  echo"<p> response    <pre>";print_r($response) ;echo"</pre></p>";

            if ($response->number === false ) {
                return false; // The student did not type a number.
            }

            // The student did type a number, so check it with tolerances.
            $this->get_tolerance_interval($answer);
            if ($answer->min <= $response->number && $response->number <= $answer->max){
             //   echo"<p> response  true  <pre>";print_r($response) ;echo"</pre></p>";
               return true;
            }
            // testing for other units
            if ( isset($question->options->units) && count($question->options->units) > 0) {
                foreach($question->options->units as $key =>$unit){
                    $testresponse = $response->number /$unit->multiplier ;
                    if($answer->min <= $testresponse && $testresponse<= $answer->max) {
                        return true;
                    }
                }
            }
            return false;
        }
        return false;
    }

    /**
    * Performs response processing and grading
    * The function was redefined for handling correctly the two parts
    * number and unit of numerical or calculated questions
    * The code handles also the case when there no unit defined by the user or
    * when used in a multianswer (Cloze) question.
    * This function performs response processing and grading and updates
    * the state accordingly.
    * @return boolean         Indicates success or failure.
    * @param object $question The question to be graded. Question type
    *                         specific information is included.
    * @param object $state    The state of the question to grade. The current
    *                         responses are in ->responses. The last graded state
    *                         is in ->last_graded (hence the most recently graded
    *                         responses are in ->last_graded->responses). The
    *                         question type specific information is also
    *                         included. The ->raw_grade and ->penalty fields
    *                         must be updated. The method is able to
    *                         close the question session (preventing any further
    *                         attempts at this question) by setting
    *                         $state->event to QUESTION_EVENTCLOSEANDGRADE
    * @param object $cmoptions
    */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_ISSET
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ISSET
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))))
                                (SCALAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (AST_VAR))
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (
                                                (AST_RETURN
                                                    (AST_CONST))))))))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_ISSET
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CONST)))
                                    (
                                        (AST_RETURN
                                            (AST_CONST)))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ISSET
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))))
                                (SCALAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (AST_VAR))
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (
                                                (AST_RETURN
                                                    (AST_CONST))))))))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))