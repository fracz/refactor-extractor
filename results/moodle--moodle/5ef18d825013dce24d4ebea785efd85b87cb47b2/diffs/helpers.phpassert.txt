    public function assert($expectation, $compare, $message = '') {
        $message = (isset($expectation->message) and $expectation->message !== '') ? $expectation->message : $message;

        if (get_class($expectation) === 'question_pattern_expectation') {
            $this->assertRegExp($expectation->pattern, $compare, $message);
            return;

        } else if (get_class($expectation) === 'question_no_pattern_expectation') {
            $this->assertNotRegExp($expectation->pattern, $compare, $message);
            return;

        } else if (get_class($expectation) === 'question_contains_tag_with_attributes') {
            $this->assertTag(array('tag'=>$expectation->tag, 'attributes'=>$expectation->expectedvalues), $compare, $message);
            foreach ($expectation->forbiddenvalues as $k=>$v) {
                $attr = $expectation->expectedvalues;
                $attr[$k] = $v;
                $this->assertNotTag(array('tag'=>$expectation->tag, 'attributes'=>$attr), $compare, $message);
            }
            return;

        } else if (get_class($expectation) === 'question_contains_tag_with_attribute') {
            $attr = array($expectation->attribute=>$expectation->value);
            $this->assertTag(array('tag'=>$expectation->tag, 'attributes'=>$attr), $compare, $message);
            return;

        } else if (get_class($expectation) === 'question_does_not_contain_tag_with_attributes') {
            $this->assertNotTag(array('tag'=>$expectation->tag, 'attributes'=>$expectation->attributes), $compare, $message);
            return;

        } else if (get_class($expectation) === 'question_contains_select_expectation') {
            $tag = array('tag'=>'select', 'attributes'=>array('name'=>$expectation->name),
                'children'=>array('count'=>count($expectation->choices)));
            if ($expectation->enabled === false) {
                $tag['attributes']['disabled'] = 'disabled';
            } else if ($expectation->enabled === true) {
                // TODO
            }
            foreach(array_keys($expectation->choices) as $value) {
                if ($expectation->selected === $value) {
                    $tag['child'] = array('tag'=>'option', 'attributes'=>array('value'=>$value, 'selected'=>'selected'));
                } else {
                    $tag['child'] = array('tag'=>'option', 'attributes'=>array('value'=>$value));
                }
            }

            $this->assertTag($tag, $compare, 'expected select not found in ' . $compare);
            return;

        } else if (get_class($expectation) === 'question_check_specified_fields_expectation') {
            $expect = (array)$expectation->expect;
            $compare = (array)$compare;
            foreach ($expect as $k=>$v) {
                if (!array_key_exists($k, $compare)) {
                    if (!$message) {
                        $message = "Property $k does not exist";
                    }
                    $this->fail($message);
                }
                if ($v != $compare[$k]) {
                    if (!$message) {
                        $message = "Property $k is different";
                    }
                    $this->fail($message);
                }
            }
            $this->assertTrue(true);
            return;

        } else if (get_class($expectation) === 'question_contains_tag_with_contents') {
            $this->assertTag(array('tag'=>$expectation->tag, 'content'=>$expectation->content), $compare, $message);
            return;
        }

        throw new coding_exception('Unknown expectiontion:'.get_class($expectation));
    }
}


class question_contains_tag_with_contents {
    public $tag;
    public $content;
    public $message;

    public function __construct($tag, $content, $message = '') {
        $this->tag = $tag;
        $this->content = $content;
        $this->message = $message;
    }

}

class question_check_specified_fields_expectation {
    public $expect;
    public $message;

    function __construct($expected, $message = '') {
        $this->expect = $expected;
        $this->message = $message;
    }
}


class question_contains_select_expectation {
    public $name;
    public $choices;
    public $selected;
    public $enabled;
    public $message;

    public function __construct($name, $choices, $selected = null, $enabled = null, $message = '') {
        $this->name = $name;
        $this->choices = $choices;
        $this->selected = $selected;
        $this->enabled = $enabled;
        $this->message = $message;
    }
}


class question_does_not_contain_tag_with_attributes {
    public $tag;
    public $attributes;
    public $message;

    public function __construct($tag, $attributes, $message = '') {
        $this->tag = $tag;
        $this->attributes = $attributes;
        $this->message = $message;
    }
}


class question_contains_tag_with_attribute {
    public $tag;
    public $attribute;
    public $value;
    public $message;

    public function __construct($tag, $attribute, $value, $message = '') {
        $this->tag = $tag;
        $this->attribute = $attribute;
        $this->value = $value;
        $this->message = $message;
    }
}


class question_contains_tag_with_attributes {
    public $tag;
    public $expectedvalues = array();
    public $forbiddenvalues = array();
    public $message;

    public function __construct($tag, $expectedvalues, $forbiddenvalues=array(), $message = '') {
        $this->tag = $tag;
        $this->expectedvalues = $expectedvalues;
        $this->forbiddenvalues = $forbiddenvalues;
        $this->message = $message;
    }
}


class question_pattern_expectation {
    public $pattern;
    public $message;

    public function __construct($pattern, $message = '') {
        $this->pattern = $pattern;
        $this->message = $message;
    }
}


class question_no_pattern_expectation {
    public $pattern;
    public $message;

    public function __construct($pattern, $message = '') {
        $this->pattern = $pattern;
        $this->message = $message;
    }
}


/**
 * Helper base class for tests that walk a question through a sequents of
 * interactions under the control of a particular behaviour.
 *
 * @copyright  2009 The Open University
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
abstract class qbehaviour_walkthrough_test_base extends question_testcase {
    /** @var question_display_options */
    protected $displayoptions;
    /** @var question_usage_by_activity */
    protected $quba;
    /** @var unknown_type integer */
    protected $slot;

    protected function setUp() {
        parent::setUp();
        $this->resetAfterTest(true);

        $this->displayoptions = new question_display_options();
        $this->quba = question_engine::make_questions_usage_by_activity('unit_test',
            get_context_instance(CONTEXT_SYSTEM));
    }

    protected function tearDown() {
        $this->displayoptions = null;
        $this->quba = null;
        parent::tearDown();
    }

    protected function start_attempt_at_question($question, $preferredbehaviour,
                                                 $maxmark = null, $variant = 1) {
        $this->quba->set_preferred_behaviour($preferredbehaviour);
        $this->slot = $this->quba->add_question($question, $maxmark);
        $this->quba->start_question($this->slot, $variant);
    }
    protected function process_submission($data) {
        $this->quba->process_action($this->slot, $data);
    }

    protected function manual_grade($comment, $mark) {
        $this->quba->manual_grade($this->slot, $comment, $mark);
    }

    protected function check_current_state($state) {
        $this->assertEquals($this->quba->get_question_state($this->slot), $state,
            'Questions is in the wrong state: %s.');
    }

    protected function check_current_mark($mark) {
        if (is_null($mark)) {
            $this->assertNull($this->quba->get_question_mark($this->slot));
        } else {
            if ($mark == 0) {
                // PHP will think a null mark and a mark of 0 are equal,
                // so explicity check not null in this case.
                $this->assertNotNull($this->quba->get_question_mark($this->slot));
            }
            $this->assertEquals($mark, $this->quba->get_question_mark($this->slot),
                'Expected mark and actual mark differ: %s.', 0.000001);
        }
    }

    /**
     * @param $condition one or more Expectations. (users varargs).
     */
    protected function check_current_output() {
        $html = $this->quba->render_question($this->slot, $this->displayoptions);
        foreach (func_get_args() as $condition) {
            $this->assert($condition, $html);
        }
    }

    protected function get_question_attempt() {
        return $this->quba->get_question_attempt($this->slot);
    }

    protected function get_step_count() {
        return $this->get_question_attempt()->get_num_steps();
    }

    protected function check_step_count($expectednumsteps) {
        $this->assertEquals($expectednumsteps, $this->get_step_count());
    }

    protected function get_step($stepnum) {
        return $this->get_question_attempt()->get_step($stepnum);
    }

    protected function get_contains_question_text_expectation($question) {
        return new question_pattern_expectation('/' . preg_quote($question->questiontext) . '/');
    }

    protected function get_contains_general_feedback_expectation($question) {
        return new question_pattern_expectation('/' . preg_quote($question->generalfeedback) . '/');
    }

    protected function get_does_not_contain_correctness_expectation() {
        return new question_no_pattern_expectation('/class=\"correctness/');
    }

    protected function get_contains_correct_expectation() {
        return new question_pattern_expectation('/' . preg_quote(get_string('correct', 'question')) . '/');
    }

    protected function get_contains_partcorrect_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(get_string('partiallycorrect', 'question')) . '/');
    }

    protected function get_contains_incorrect_expectation() {
        return new question_pattern_expectation('/' . preg_quote(get_string('incorrect', 'question')) . '/');
    }

    protected function get_contains_standard_correct_combined_feedback_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(test_question_maker::STANDARD_OVERALL_CORRECT_FEEDBACK) . '/');
    }

    protected function get_contains_standard_partiallycorrect_combined_feedback_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(test_question_maker::STANDARD_OVERALL_PARTIALLYCORRECT_FEEDBACK) . '/');
    }

    protected function get_contains_standard_incorrect_combined_feedback_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(test_question_maker::STANDARD_OVERALL_INCORRECT_FEEDBACK) . '/');
    }

    protected function get_does_not_contain_feedback_expectation() {
        return new question_no_pattern_expectation('/class="feedback"/');
    }

    protected function get_does_not_contain_num_parts_correct() {
        return new question_no_pattern_expectation('/class="numpartscorrect"/');
    }

    protected function get_contains_num_parts_correct($num) {
        $a = new stdClass();
        $a->num = $num;
        return new question_pattern_expectation('/<div class="numpartscorrect">' .
            preg_quote(get_string('yougotnright', 'question', $a)) . '/');
    }

    protected function get_does_not_contain_specific_feedback_expectation() {
        return new question_no_pattern_expectation('/class="specificfeedback"/');
    }

    protected function get_contains_validation_error_expectation() {
        return new question_contains_tag_with_attribute('div', 'class', 'validationerror');
    }

    protected function get_does_not_contain_validation_error_expectation() {
        return new question_no_pattern_expectation('/class="validationerror"/');
    }

    protected function get_contains_mark_summary($mark) {
        $a = new stdClass();
        $a->mark = format_float($mark, $this->displayoptions->markdp);
        $a->max = format_float($this->quba->get_question_max_mark($this->slot),
            $this->displayoptions->markdp);
        return new question_pattern_expectation('/' .
            preg_quote(get_string('markoutofmax', 'question', $a)) . '/');
    }

    protected function get_contains_marked_out_of_summary() {
        $max = format_float($this->quba->get_question_max_mark($this->slot),
            $this->displayoptions->markdp);
        return new question_pattern_expectation('/' .
            preg_quote(get_string('markedoutofmax', 'question', $max)) . '/');
    }

    protected function get_does_not_contain_mark_summary() {
        return new question_no_pattern_expectation('/<div class="grade">/');
    }

    protected function get_contains_checkbox_expectation($baseattr, $enabled, $checked) {
        $expectedattributes = $baseattr;
        $forbiddenattributes = array();
        $expectedattributes['type'] = 'checkbox';
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        if ($checked === true) {
            $expectedattributes['checked'] = 'checked';
        } else if ($checked === false) {
            $forbiddenattributes['checked'] = 'checked';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_contains_mc_checkbox_expectation($index, $enabled = null,
                                                            $checked = null) {
        return $this->get_contains_checkbox_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . $index,
            'value' => 1,
        ), $enabled, $checked);
    }

    protected function get_contains_radio_expectation($baseattr, $enabled, $checked) {
        $expectedattributes = $baseattr;
        $forbiddenattributes = array();
        $expectedattributes['type'] = 'radio';
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        if ($checked === true) {
            $expectedattributes['checked'] = 'checked';
        } else if ($checked === false) {
            $forbiddenattributes['checked'] = 'checked';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_contains_mc_radio_expectation($index, $enabled = null, $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . 'answer',
            'value' => $index,
        ), $enabled, $checked);
    }

    protected function get_contains_hidden_expectation($name, $value = null) {
        $expectedattributes = array('type' => 'hidden', 'name' => s($name));
        if (!is_null($value)) {
            $expectedattributes['value'] = s($value);
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes);
    }

    protected function get_does_not_contain_hidden_expectation($name, $value = null) {
        $expectedattributes = array('type' => 'hidden', 'name' => s($name));
        if (!is_null($value)) {
            $expectedattributes['value'] = s($value);
        }
        return new question_does_not_contain_tag_with_attributes('input', $expectedattributes);
    }

    protected function get_contains_tf_true_radio_expectation($enabled = null, $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . 'answer',
            'value' => 1,
        ), $enabled, $checked);
    }

    protected function get_contains_tf_false_radio_expectation($enabled = null, $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . 'answer',
            'value' => 0,
        ), $enabled, $checked);
    }

    protected function get_contains_cbm_radio_expectation($certainty, $enabled = null,
                                                          $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . '-certainty',
            'value' => $certainty,
        ), $enabled, $checked);
    }

    protected function get_contains_button_expectation($name, $value = null, $enabled = null) {
        $expectedattributes = array(
            'type' => 'submit',
            'name' => $name,
        );
        $forbiddenattributes = array();
        if (!is_null($value)) {
            $expectedattributes['value'] = $value;
        }
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_contains_submit_button_expectation($enabled = null) {
        return $this->get_contains_button_expectation(
            $this->quba->get_field_prefix($this->slot) . '-submit', null, $enabled);
    }

    protected function get_tries_remaining_expectation($n) {
        return new question_pattern_expectation('/' .
            preg_quote(get_string('triesremaining', 'qbehaviour_interactive', $n)) . '/');
    }

    protected function get_invalid_answer_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(get_string('invalidanswer', 'question')) . '/');
    }

    protected function get_contains_try_again_button_expectation($enabled = null) {
        $expectedattributes = array(
            'type' => 'submit',
            'name' => $this->quba->get_field_prefix($this->slot) . '-tryagain',
        );
        $forbiddenattributes = array();
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_does_not_contain_try_again_button_expectation() {
        return new question_no_pattern_expectation('/name="' .
            $this->quba->get_field_prefix($this->slot) . '-tryagain"/');
    }

    protected function get_contains_select_expectation($name, $choices,
                                                       $selected = null, $enabled = null) {
        $fullname = $this->quba->get_field_prefix($this->slot) . $name;
        return new question_contains_select_expectation($fullname, $choices, $selected, $enabled);
    }

    protected function get_mc_right_answer_index($mc) {
        $order = $mc->get_order($this->get_question_attempt());
        foreach ($order as $i => $ansid) {
            if ($mc->answers[$ansid]->fraction == 1) {
                return $i;
            }
        }
        $this->fail('This multiple choice question does not seem to have a right answer!');
    }

    protected function get_no_hint_visible_expectation() {
        return new question_no_pattern_expectation('/class="hint"/');
    }

    protected function get_contains_hint_expectation($hinttext) {
        // Does not currently verify hint text.
        return new question_contains_tag_with_attribute('div', 'class', 'hint');
    }
}

/**
 * Simple class that implements the {@link moodle_recordset} API based on an
 * array of test data.
 *
 *  See the {@link question_attempt_step_db_test} class in
 *  question/engine/tests/testquestionattemptstep.php for an example of how
 *  this is used.
 *
 * @copyright  2011 The Open University
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class question_test_recordset extends moodle_recordset {
    protected $records;

    /**
     * Constructor
     * @param $table as for {@link testing_db_record_builder::build_db_records()}
     *      but does not need a unique first column.
     */
    public function __construct(array $table) {
        $columns = array_shift($table);
        $this->records = array();
        foreach ($table as $row) {
            if (count($row) != count($columns)) {
                throw new coding_exception("Row contains the wrong number of fields.");
            }
            $rec = array();
            foreach ($columns as $i => $name) {
                $rec[$name] = $row[$i];
            }
            $this->records[] = $rec;
        }
        reset($this->records);
    }

    public function __destruct() {
        $this->close();
    }

    public function current() {
        return (object) current($this->records);
    }

    public function key() {
        if (is_null(key($this->records))) {
            return false;
        }
        $current = current($this->records);
        return reset($current);
    }

    public function next() {
        next($this->records);
    }

    public function valid() {
        return !is_null(key($this->records));
    }

    public function close() {
        $this->records = null;
    }
}||||||||    public function assert($expectation, $compare, $notused = '') {

        if (get_class($expectation) === 'question_pattern_expectation') {
            $this->assertRegExp($expectation->pattern, $compare,
                    'Expected regex ' . $expectation->pattern . ' not found in ' . $compare);
            return;

        } else if (get_class($expectation) === 'question_no_pattern_expectation') {
            $this->assertNotRegExp($expectation->pattern, $compare,
                    'Unexpected regex ' . $expectation->pattern . ' found in ' . $compare);
            return;

        } else if (get_class($expectation) === 'question_contains_tag_with_attributes') {
            $this->assertTag(array('tag'=>$expectation->tag, 'attributes'=>$expectation->expectedvalues), $compare,
                    'Looking for a ' . $expectation->tag . ' with attributes ' . html_writer::attributes($expectation->expectedvalues) . ' in ' . $compare);
            foreach ($expectation->forbiddenvalues as $k=>$v) {
                $attr = $expectation->expectedvalues;
                $attr[$k] = $v;
                $this->assertNotTag(array('tag'=>$expectation->tag, 'attributes'=>$attr), $compare,
                        $expectation->tag . ' had a ' . $k . ' attribute that should not be there in ' . $compare);
            }
            return;

        } else if (get_class($expectation) === 'question_contains_tag_with_attribute') {
            $attr = array($expectation->attribute=>$expectation->value);
            $this->assertTag(array('tag'=>$expectation->tag, 'attributes'=>$attr), $compare,
                    'Looking for a ' . $expectation->tag . ' with attribute ' . html_writer::attributes($attr) . ' in ' . $compare);
            return;

        } else if (get_class($expectation) === 'question_does_not_contain_tag_with_attributes') {
            $this->assertNotTag(array('tag'=>$expectation->tag, 'attributes'=>$expectation->attributes), $compare,
                    'Unexpected ' . $expectation->tag . ' with attributes ' . html_writer::attributes($expectation->attributes) . ' found in ' . $compare);
            return;

        } else if (get_class($expectation) === 'question_contains_select_expectation') {
            $tag = array('tag'=>'select', 'attributes'=>array('name'=>$expectation->name),
                'children'=>array('count'=>count($expectation->choices)));
            if ($expectation->enabled === false) {
                $tag['attributes']['disabled'] = 'disabled';
            } else if ($expectation->enabled === true) {
                // TODO
            }
            foreach(array_keys($expectation->choices) as $value) {
                if ($expectation->selected === $value) {
                    $tag['child'] = array('tag'=>'option', 'attributes'=>array('value'=>$value, 'selected'=>'selected'));
                } else {
                    $tag['child'] = array('tag'=>'option', 'attributes'=>array('value'=>$value));
                }
            }

            $this->assertTag($tag, $compare, 'expected select not found in ' . $compare);
            return;

        } else if (get_class($expectation) === 'question_check_specified_fields_expectation') {
            $expect = (array)$expectation->expect;
            $compare = (array)$compare;
            foreach ($expect as $k=>$v) {
                if (!array_key_exists($k, $compare)) {
                    if (!$message) {
                        $message = "Property $k does not exist";
                    }
                    $this->fail($message);
                }
                if ($v != $compare[$k]) {
                    if (!$message) {
                        $message = "Property $k is different";
                    }
                    $this->fail($message);
                }
            }
            $this->assertTrue(true);
            return;

        } else if (get_class($expectation) === 'question_contains_tag_with_contents') {
            $this->assertTag(array('tag'=>$expectation->tag, 'content'=>$expectation->content), $compare,
                    'Looking for a ' . $expectation->tag . ' with content ' . $expectation->content . ' in ' . $compare);
            return;
        }

        throw new coding_exception('Unknown expectiontion:'.get_class($expectation));
    }
}


class question_contains_tag_with_contents {
    public $tag;
    public $content;
    public $message;

    public function __construct($tag, $content, $message = '') {
        $this->tag = $tag;
        $this->content = $content;
        $this->message = $message;
    }

}

class question_check_specified_fields_expectation {
    public $expect;
    public $message;

    function __construct($expected, $message = '') {
        $this->expect = $expected;
        $this->message = $message;
    }
}


class question_contains_select_expectation {
    public $name;
    public $choices;
    public $selected;
    public $enabled;
    public $message;

    public function __construct($name, $choices, $selected = null, $enabled = null, $message = '') {
        $this->name = $name;
        $this->choices = $choices;
        $this->selected = $selected;
        $this->enabled = $enabled;
        $this->message = $message;
    }
}


class question_does_not_contain_tag_with_attributes {
    public $tag;
    public $attributes;
    public $message;

    public function __construct($tag, $attributes, $message = '') {
        $this->tag = $tag;
        $this->attributes = $attributes;
        $this->message = $message;
    }
}


class question_contains_tag_with_attribute {
    public $tag;
    public $attribute;
    public $value;
    public $message;

    public function __construct($tag, $attribute, $value, $message = '') {
        $this->tag = $tag;
        $this->attribute = $attribute;
        $this->value = $value;
        $this->message = $message;
    }
}


class question_contains_tag_with_attributes {
    public $tag;
    public $expectedvalues = array();
    public $forbiddenvalues = array();
    public $message;

    public function __construct($tag, $expectedvalues, $forbiddenvalues=array(), $message = '') {
        $this->tag = $tag;
        $this->expectedvalues = $expectedvalues;
        $this->forbiddenvalues = $forbiddenvalues;
        $this->message = $message;
    }
}


class question_pattern_expectation {
    public $pattern;
    public $message;

    public function __construct($pattern, $message = '') {
        $this->pattern = $pattern;
        $this->message = $message;
    }
}


class question_no_pattern_expectation {
    public $pattern;
    public $message;

    public function __construct($pattern, $message = '') {
        $this->pattern = $pattern;
        $this->message = $message;
    }
}


/**
 * Helper base class for tests that walk a question through a sequents of
 * interactions under the control of a particular behaviour.
 *
 * @copyright  2009 The Open University
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
abstract class qbehaviour_walkthrough_test_base extends question_testcase {
    /** @var question_display_options */
    protected $displayoptions;
    /** @var question_usage_by_activity */
    protected $quba;
    /** @var unknown_type integer */
    protected $slot;

    protected function setUp() {
        parent::setUp();
        $this->resetAfterTest(true);

        $this->displayoptions = new question_display_options();
        $this->quba = question_engine::make_questions_usage_by_activity('unit_test',
            get_context_instance(CONTEXT_SYSTEM));
    }

    protected function tearDown() {
        $this->displayoptions = null;
        $this->quba = null;
        parent::tearDown();
    }

    protected function start_attempt_at_question($question, $preferredbehaviour,
                                                 $maxmark = null, $variant = 1) {
        $this->quba->set_preferred_behaviour($preferredbehaviour);
        $this->slot = $this->quba->add_question($question, $maxmark);
        $this->quba->start_question($this->slot, $variant);
    }
    protected function process_submission($data) {
        $this->quba->process_action($this->slot, $data);
    }

    protected function manual_grade($comment, $mark) {
        $this->quba->manual_grade($this->slot, $comment, $mark);
    }

    protected function check_current_state($state) {
        $this->assertEquals($state, $this->quba->get_question_state($this->slot),
            'Questions is in the wrong state.');
    }

    protected function check_current_mark($mark) {
        if (is_null($mark)) {
            $this->assertNull($this->quba->get_question_mark($this->slot));
        } else {
            if ($mark == 0) {
                // PHP will think a null mark and a mark of 0 are equal,
                // so explicity check not null in this case.
                $this->assertNotNull($this->quba->get_question_mark($this->slot));
            }
            $this->assertEquals($mark, $this->quba->get_question_mark($this->slot),
                'Expected mark and actual mark differ.', 0.000001);
        }
    }

    /**
     * @param $condition one or more Expectations. (users varargs).
     */
    protected function check_current_output() {
        $html = $this->quba->render_question($this->slot, $this->displayoptions);
        foreach (func_get_args() as $condition) {
            $this->assert($condition, $html);
        }
    }

    protected function get_question_attempt() {
        return $this->quba->get_question_attempt($this->slot);
    }

    protected function get_step_count() {
        return $this->get_question_attempt()->get_num_steps();
    }

    protected function check_step_count($expectednumsteps) {
        $this->assertEquals($expectednumsteps, $this->get_step_count());
    }

    protected function get_step($stepnum) {
        return $this->get_question_attempt()->get_step($stepnum);
    }

    protected function get_contains_question_text_expectation($question) {
        return new question_pattern_expectation('/' . preg_quote($question->questiontext) . '/');
    }

    protected function get_contains_general_feedback_expectation($question) {
        return new question_pattern_expectation('/' . preg_quote($question->generalfeedback) . '/');
    }

    protected function get_does_not_contain_correctness_expectation() {
        return new question_no_pattern_expectation('/class=\"correctness/');
    }

    protected function get_contains_correct_expectation() {
        return new question_pattern_expectation('/' . preg_quote(get_string('correct', 'question')) . '/');
    }

    protected function get_contains_partcorrect_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(get_string('partiallycorrect', 'question')) . '/');
    }

    protected function get_contains_incorrect_expectation() {
        return new question_pattern_expectation('/' . preg_quote(get_string('incorrect', 'question')) . '/');
    }

    protected function get_contains_standard_correct_combined_feedback_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(test_question_maker::STANDARD_OVERALL_CORRECT_FEEDBACK) . '/');
    }

    protected function get_contains_standard_partiallycorrect_combined_feedback_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(test_question_maker::STANDARD_OVERALL_PARTIALLYCORRECT_FEEDBACK) . '/');
    }

    protected function get_contains_standard_incorrect_combined_feedback_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(test_question_maker::STANDARD_OVERALL_INCORRECT_FEEDBACK) . '/');
    }

    protected function get_does_not_contain_feedback_expectation() {
        return new question_no_pattern_expectation('/class="feedback"/');
    }

    protected function get_does_not_contain_num_parts_correct() {
        return new question_no_pattern_expectation('/class="numpartscorrect"/');
    }

    protected function get_contains_num_parts_correct($num) {
        $a = new stdClass();
        $a->num = $num;
        return new question_pattern_expectation('/<div class="numpartscorrect">' .
            preg_quote(get_string('yougotnright', 'question', $a)) . '/');
    }

    protected function get_does_not_contain_specific_feedback_expectation() {
        return new question_no_pattern_expectation('/class="specificfeedback"/');
    }

    protected function get_contains_validation_error_expectation() {
        return new question_contains_tag_with_attribute('div', 'class', 'validationerror');
    }

    protected function get_does_not_contain_validation_error_expectation() {
        return new question_no_pattern_expectation('/class="validationerror"/');
    }

    protected function get_contains_mark_summary($mark) {
        $a = new stdClass();
        $a->mark = format_float($mark, $this->displayoptions->markdp);
        $a->max = format_float($this->quba->get_question_max_mark($this->slot),
            $this->displayoptions->markdp);
        return new question_pattern_expectation('/' .
            preg_quote(get_string('markoutofmax', 'question', $a)) . '/');
    }

    protected function get_contains_marked_out_of_summary() {
        $max = format_float($this->quba->get_question_max_mark($this->slot),
            $this->displayoptions->markdp);
        return new question_pattern_expectation('/' .
            preg_quote(get_string('markedoutofmax', 'question', $max)) . '/');
    }

    protected function get_does_not_contain_mark_summary() {
        return new question_no_pattern_expectation('/<div class="grade">/');
    }

    protected function get_contains_checkbox_expectation($baseattr, $enabled, $checked) {
        $expectedattributes = $baseattr;
        $forbiddenattributes = array();
        $expectedattributes['type'] = 'checkbox';
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        if ($checked === true) {
            $expectedattributes['checked'] = 'checked';
        } else if ($checked === false) {
            $forbiddenattributes['checked'] = 'checked';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_contains_mc_checkbox_expectation($index, $enabled = null,
                                                            $checked = null) {
        return $this->get_contains_checkbox_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . $index,
            'value' => 1,
        ), $enabled, $checked);
    }

    protected function get_contains_radio_expectation($baseattr, $enabled, $checked) {
        $expectedattributes = $baseattr;
        $forbiddenattributes = array();
        $expectedattributes['type'] = 'radio';
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        if ($checked === true) {
            $expectedattributes['checked'] = 'checked';
        } else if ($checked === false) {
            $forbiddenattributes['checked'] = 'checked';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_contains_mc_radio_expectation($index, $enabled = null, $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . 'answer',
            'value' => $index,
        ), $enabled, $checked);
    }

    protected function get_contains_hidden_expectation($name, $value = null) {
        $expectedattributes = array('type' => 'hidden', 'name' => s($name));
        if (!is_null($value)) {
            $expectedattributes['value'] = s($value);
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes);
    }

    protected function get_does_not_contain_hidden_expectation($name, $value = null) {
        $expectedattributes = array('type' => 'hidden', 'name' => s($name));
        if (!is_null($value)) {
            $expectedattributes['value'] = s($value);
        }
        return new question_does_not_contain_tag_with_attributes('input', $expectedattributes);
    }

    protected function get_contains_tf_true_radio_expectation($enabled = null, $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . 'answer',
            'value' => 1,
        ), $enabled, $checked);
    }

    protected function get_contains_tf_false_radio_expectation($enabled = null, $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . 'answer',
            'value' => 0,
        ), $enabled, $checked);
    }

    protected function get_contains_cbm_radio_expectation($certainty, $enabled = null,
                                                          $checked = null) {
        return $this->get_contains_radio_expectation(array(
            'name' => $this->quba->get_field_prefix($this->slot) . '-certainty',
            'value' => $certainty,
        ), $enabled, $checked);
    }

    protected function get_contains_button_expectation($name, $value = null, $enabled = null) {
        $expectedattributes = array(
            'type' => 'submit',
            'name' => $name,
        );
        $forbiddenattributes = array();
        if (!is_null($value)) {
            $expectedattributes['value'] = $value;
        }
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_contains_submit_button_expectation($enabled = null) {
        return $this->get_contains_button_expectation(
            $this->quba->get_field_prefix($this->slot) . '-submit', null, $enabled);
    }

    protected function get_tries_remaining_expectation($n) {
        return new question_pattern_expectation('/' .
            preg_quote(get_string('triesremaining', 'qbehaviour_interactive', $n)) . '/');
    }

    protected function get_invalid_answer_expectation() {
        return new question_pattern_expectation('/' .
            preg_quote(get_string('invalidanswer', 'question')) . '/');
    }

    protected function get_contains_try_again_button_expectation($enabled = null) {
        $expectedattributes = array(
            'type' => 'submit',
            'name' => $this->quba->get_field_prefix($this->slot) . '-tryagain',
        );
        $forbiddenattributes = array();
        if ($enabled === true) {
            $forbiddenattributes['disabled'] = 'disabled';
        } else if ($enabled === false) {
            $expectedattributes['disabled'] = 'disabled';
        }
        return new question_contains_tag_with_attributes('input', $expectedattributes, $forbiddenattributes);
    }

    protected function get_does_not_contain_try_again_button_expectation() {
        return new question_no_pattern_expectation('/name="' .
            $this->quba->get_field_prefix($this->slot) . '-tryagain"/');
    }

    protected function get_contains_select_expectation($name, $choices,
                                                       $selected = null, $enabled = null) {
        $fullname = $this->quba->get_field_prefix($this->slot) . $name;
        return new question_contains_select_expectation($fullname, $choices, $selected, $enabled);
    }

    protected function get_mc_right_answer_index($mc) {
        $order = $mc->get_order($this->get_question_attempt());
        foreach ($order as $i => $ansid) {
            if ($mc->answers[$ansid]->fraction == 1) {
                return $i;
            }
        }
        $this->fail('This multiple choice question does not seem to have a right answer!');
    }

    protected function get_no_hint_visible_expectation() {
        return new question_no_pattern_expectation('/class="hint"/');
    }

    protected function get_contains_hint_expectation($hinttext) {
        // Does not currently verify hint text.
        return new question_contains_tag_with_attribute('div', 'class', 'hint');
    }
}

/**
 * Simple class that implements the {@link moodle_recordset} API based on an
 * array of test data.
 *
 *  See the {@link question_attempt_step_db_test} class in
 *  question/engine/tests/testquestionattemptstep.php for an example of how
 *  this is used.
 *
 * @copyright  2011 The Open University
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class question_test_recordset extends moodle_recordset {
    protected $records;

    /**
     * Constructor
     * @param $table as for {@link testing_db_record_builder::build_db_records()}
     *      but does not need a unique first column.
     */
    public function __construct(array $table) {
        $columns = array_shift($table);
        $this->records = array();
        foreach ($table as $row) {
            if (count($row) != count($columns)) {
                throw new coding_exception("Row contains the wrong number of fields.");
            }
            $rec = array();
            foreach ($columns as $i => $name) {
                $rec[$name] = $row[$i];
            }
            $this->records[] = $rec;
        }
        reset($this->records);
    }

    public function __destruct() {
        $this->close();
    }

    public function current() {
        return (object) current($this->records);
    }

    public function key() {
        if (is_null(key($this->records))) {
            return false;
        }
        $current = current($this->records);
        return reset($current);
    }

    public function next() {
        next($this->records);
    }

    public function valid() {
        return !is_null(key($this->records));
    }

    public function close() {
        $this->records = null;
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_RETURN
                                (NULL))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (AST_ARRAY_ELEM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR)))
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_FOREACH
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR)
                                            (AST_VAR)
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_PROP
                                                        (AST_VAR)))
                                                (AST_ASSIGN
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (AST_VAR))
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_ARRAY
                                                            (AST_ARRAY_ELEM
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (SCALAR))
                                                            (AST_ARRAY_ELEM
                                                                (AST_VAR)
                                                                (SCALAR)))
                                                        (AST_VAR)
                                                        (AST_VAR)))))
                                        (AST_RETURN
                                            (NULL))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))
                                                    (SCALAR))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_ARRAY
                                                            (AST_ARRAY_ELEM
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_PROP
                                                                    (AST_VAR)))))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_ARRAY
                                                                (AST_ARRAY_ELEM
                                                                    (AST_PROP
                                                                        (AST_VAR))
                                                                    (SCALAR))
                                                                (AST_ARRAY_ELEM
                                                                    (AST_VAR)
                                                                    (SCALAR)))
                                                            (AST_VAR)
                                                            (AST_VAR)))
                                                    (AST_RETURN
                                                        (NULL))))
                                            (AST_IF_ELEM
                                                (NULL)
                                                (
                                                    (AST_IF
                                                        (AST_IF_ELEM
                                                            (AST_BINARY_OP
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR)))
                                                                (SCALAR))
                                                            (
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR)
                                                                    (
                                                                        (AST_ARRAY
                                                                            (AST_ARRAY_ELEM
                                                                                (AST_PROP
                                                                                    (AST_VAR))
                                                                                (SCALAR))
                                                                            (AST_ARRAY_ELEM
                                                                                (AST_PROP
                                                                                    (AST_VAR))
                                                                                (SCALAR)))
                                                                        (AST_VAR)
                                                                        (AST_VAR)))
                                                                (AST_RETURN
                                                                    (NULL))))
                                                        (AST_IF_ELEM
                                                            (NULL)
                                                            (
                                                                (AST_IF
                                                                    (AST_IF_ELEM
                                                                        (AST_BINARY_OP
                                                                            (AST_CALL
                                                                                (
                                                                                    (AST_VAR)))
                                                                            (SCALAR))
                                                                        (
                                                                            (AST_ASSIGN
                                                                                (AST_VAR)
                                                                                (AST_ARRAY
                                                                                    (AST_ARRAY_ELEM
                                                                                        (SCALAR)
                                                                                        (SCALAR))
                                                                                    (AST_ARRAY_ELEM
                                                                                        (AST_ARRAY
                                                                                            (AST_ARRAY_ELEM
                                                                                                (AST_PROP
                                                                                                    (AST_VAR))
                                                                                                (SCALAR)))
                                                                                        (SCALAR))
                                                                                    (AST_ARRAY_ELEM
                                                                                        (AST_ARRAY
                                                                                            (AST_ARRAY_ELEM
                                                                                                (AST_CALL
                                                                                                    (
                                                                                                        (AST_PROP
                                                                                                            (AST_VAR))))
                                                                                                (SCALAR)))
                                                                                        (SCALAR))))
                                                                            (AST_IF
                                                                                (AST_IF_ELEM
                                                                                    (AST_BINARY_OP
                                                                                        (AST_PROP
                                                                                            (AST_VAR))
                                                                                        (AST_CONST))
                                                                                    (
                                                                                        (AST_ASSIGN
                                                                                            (AST_DIM
                                                                                                (AST_DIM
                                                                                                    (AST_VAR)
                                                                                                    (SCALAR))
                                                                                                (SCALAR))
                                                                                            (SCALAR))))
                                                                                (AST_IF_ELEM
                                                                                    (NULL)
                                                                                    (
                                                                                        (AST_IF
                                                                                            (AST_IF_ELEM
                                                                                                (AST_BINARY_OP
                                                                                                    (AST_PROP
                                                                                                        (AST_VAR))
                                                                                                    (AST_CONST)))))))
                                                                            (AST_FOREACH
                                                                                (AST_CALL
                                                                                    (
                                                                                        (AST_PROP
                                                                                            (AST_VAR))))
                                                                                (AST_VAR)
                                                                                (NULL)
                                                                                (
                                                                                    (AST_IF
                                                                                        (AST_IF_ELEM
                                                                                            (AST_BINARY_OP
                                                                                                (AST_PROP
                                                                                                    (AST_VAR))
                                                                                                (AST_VAR))
                                                                                            (
                                                                                                (AST_ASSIGN
                                                                                                    (AST_DIM
                                                                                                        (AST_VAR)
                                                                                                        (SCALAR))
                                                                                                    (AST_ARRAY
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (SCALAR)
                                                                                                            (SCALAR))
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (AST_ARRAY
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_VAR)
                                                                                                                    (SCALAR))
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (SCALAR)
                                                                                                                    (SCALAR)))
                                                                                                            (SCALAR))))))
                                                                                        (AST_IF_ELEM
                                                                                            (NULL)
                                                                                            (
                                                                                                (AST_ASSIGN
                                                                                                    (AST_DIM
                                                                                                        (AST_VAR)
                                                                                                        (SCALAR))
                                                                                                    (AST_ARRAY
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (SCALAR)
                                                                                                            (SCALAR))
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (AST_ARRAY
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_VAR)
                                                                                                                    (SCALAR)))
                                                                                                            (SCALAR)))))))))
                                                                            (AST_METHOD_CALL
                                                                                (AST_VAR)
                                                                                (
                                                                                    (AST_VAR)
                                                                                    (AST_VAR)
                                                                                    (AST_BINARY_OP
                                                                                        (SCALAR)
                                                                                        (AST_VAR))))
                                                                            (AST_RETURN
                                                                                (NULL))))
                                                                    (AST_IF_ELEM
                                                                        (NULL)
                                                                        (
                                                                            (AST_IF
                                                                                (AST_IF_ELEM
                                                                                    (AST_BINARY_OP
                                                                                        (AST_CALL
                                                                                            (
                                                                                                (AST_VAR)))
                                                                                        (SCALAR))
                                                                                    (
                                                                                        (AST_ASSIGN
                                                                                            (AST_VAR)
                                                                                            (AST_CAST
                                                                                                (AST_PROP
                                                                                                    (AST_VAR))))
                                                                                        (AST_ASSIGN
                                                                                            (AST_VAR)
                                                                                            (AST_CAST
                                                                                                (AST_VAR)))
                                                                                        (AST_FOREACH
                                                                                            (AST_VAR)
                                                                                            (AST_VAR)
                                                                                            (AST_VAR)
                                                                                            (
                                                                                                (AST_IF
                                                                                                    (AST_IF_ELEM
                                                                                                        (AST_UNARY_OP
                                                                                                            (AST_CALL
                                                                                                                (
                                                                                                                    (AST_VAR)
                                                                                                                    (AST_VAR))))
                                                                                                        (
                                                                                                            (AST_IF
                                                                                                                (AST_IF_ELEM
                                                                                                                    (AST_UNARY_OP
                                                                                                                        (AST_VAR))
                                                                                                                    (
                                                                                                                        (AST_ASSIGN
                                                                                                                            (AST_VAR)
                                                                                                                            (AST_ENCAPS_LIST
                                                                                                                                (SCALAR)
                                                                                                                                (AST_VAR)
                                                                                                                                (SCALAR))))))
                                                                                                            (AST_METHOD_CALL
                                                                                                                (AST_VAR)
                                                                                                                (
                                                                                                                    (AST_VAR))))))
                                                                                                (AST_IF
                                                                                                    (AST_IF_ELEM
                                                                                                        (AST_BINARY_OP
                                                                                                            (AST_VAR)
                                                                                                            (AST_DIM
                                                                                                                (AST_VAR)
                                                                                                                (AST_VAR)))
                                                                                                        (
                                                                                                            (AST_IF
                                                                                                                (AST_IF_ELEM
                                                                                                                    (AST_UNARY_OP
                                                                                                                        (AST_VAR))
                                                                                                                    (
                                                                                                                        (AST_ASSIGN
                                                                                                                            (AST_VAR)
                                                                                                                            (AST_ENCAPS_LIST
                                                                                                                                (SCALAR)
                                                                                                                                (AST_VAR)
                                                                                                                                (SCALAR))))))
                                                                                                            (AST_METHOD_CALL
                                                                                                                (AST_VAR)
                                                                                                                (
                                                                                                                    (AST_VAR))))))))
                                                                                        (AST_METHOD_CALL
                                                                                            (AST_VAR)
                                                                                            (
                                                                                                (AST_CONST)))
                                                                                        (AST_RETURN
                                                                                            (NULL))))
                                                                                (AST_IF_ELEM
                                                                                    (NULL)
                                                                                    (
                                                                                        (AST_IF
                                                                                            (AST_IF_ELEM
                                                                                                (AST_BINARY_OP
                                                                                                    (AST_CALL
                                                                                                        (
                                                                                                            (AST_VAR)))
                                                                                                    (SCALAR))
                                                                                                (
                                                                                                    (AST_METHOD_CALL
                                                                                                        (AST_VAR)
                                                                                                        (
                                                                                                            (AST_ARRAY
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_PROP
                                                                                                                        (AST_VAR))
                                                                                                                    (SCALAR))
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_PROP
                                                                                                                        (AST_VAR))
                                                                                                                    (SCALAR)))
                                                                                                            (AST_VAR)
                                                                                                            (AST_VAR)))
                                                                                                    (AST_RETURN
                                                                                                        (NULL))))))))))))))))))))))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_VAR))))
                (AST_RETURN
                    (NULL))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_VAR))))
                            (AST_RETURN
                                (NULL))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (AST_ARRAY_ELEM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR)))
                                                (AST_VAR)
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_BINARY_OP
                                                                    (SCALAR)
                                                                    (AST_PROP
                                                                        (AST_VAR)))
                                                                (SCALAR))
                                                            (AST_STATIC_CALL
                                                                (
                                                                    (AST_PROP
                                                                        (AST_VAR)))))
                                                        (SCALAR))
                                                    (AST_VAR))))
                                        (AST_FOREACH
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR)
                                            (AST_VAR)
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_PROP
                                                        (AST_VAR)))
                                                (AST_ASSIGN
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (AST_VAR))
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_ARRAY
                                                            (AST_ARRAY_ELEM
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (SCALAR))
                                                            (AST_ARRAY_ELEM
                                                                (AST_VAR)
                                                                (SCALAR)))
                                                        (AST_VAR)
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_BINARY_OP
                                                                    (AST_BINARY_OP
                                                                        (AST_PROP
                                                                            (AST_VAR))
                                                                        (SCALAR))
                                                                    (AST_VAR))
                                                                (SCALAR))
                                                            (AST_VAR))))))
                                        (AST_RETURN
                                            (NULL))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))
                                                    (SCALAR))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_ARRAY
                                                            (AST_ARRAY_ELEM
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_PROP
                                                                    (AST_VAR)))))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_ARRAY
                                                                (AST_ARRAY_ELEM
                                                                    (AST_PROP
                                                                        (AST_VAR))
                                                                    (SCALAR))
                                                                (AST_ARRAY_ELEM
                                                                    (AST_VAR)
                                                                    (SCALAR)))
                                                            (AST_VAR)
                                                            (AST_BINARY_OP
                                                                (AST_BINARY_OP
                                                                    (AST_BINARY_OP
                                                                        (AST_BINARY_OP
                                                                            (AST_BINARY_OP
                                                                                (SCALAR)
                                                                                (AST_PROP
                                                                                    (AST_VAR)))
                                                                            (SCALAR))
                                                                        (AST_STATIC_CALL
                                                                            (
                                                                                (AST_VAR))))
                                                                    (SCALAR))
                                                                (AST_VAR))))
                                                    (AST_RETURN
                                                        (NULL))))
                                            (AST_IF_ELEM
                                                (NULL)
                                                (
                                                    (AST_IF
                                                        (AST_IF_ELEM
                                                            (AST_BINARY_OP
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR)))
                                                                (SCALAR))
                                                            (
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR)
                                                                    (
                                                                        (AST_ARRAY
                                                                            (AST_ARRAY_ELEM
                                                                                (AST_PROP
                                                                                    (AST_VAR))
                                                                                (SCALAR))
                                                                            (AST_ARRAY_ELEM
                                                                                (AST_PROP
                                                                                    (AST_VAR))
                                                                                (SCALAR)))
                                                                        (AST_VAR)
                                                                        (AST_BINARY_OP
                                                                            (AST_BINARY_OP
                                                                                (AST_BINARY_OP
                                                                                    (AST_BINARY_OP
                                                                                        (AST_BINARY_OP
                                                                                            (SCALAR)
                                                                                            (AST_PROP
                                                                                                (AST_VAR)))
                                                                                        (SCALAR))
                                                                                    (AST_STATIC_CALL
                                                                                        (
                                                                                            (AST_PROP
                                                                                                (AST_VAR)))))
                                                                                (SCALAR))
                                                                            (AST_VAR))))
                                                                (AST_RETURN
                                                                    (NULL))))
                                                        (AST_IF_ELEM
                                                            (NULL)
                                                            (
                                                                (AST_IF
                                                                    (AST_IF_ELEM
                                                                        (AST_BINARY_OP
                                                                            (AST_CALL
                                                                                (
                                                                                    (AST_VAR)))
                                                                            (SCALAR))
                                                                        (
                                                                            (AST_ASSIGN
                                                                                (AST_VAR)
                                                                                (AST_ARRAY
                                                                                    (AST_ARRAY_ELEM
                                                                                        (SCALAR)
                                                                                        (SCALAR))
                                                                                    (AST_ARRAY_ELEM
                                                                                        (AST_ARRAY
                                                                                            (AST_ARRAY_ELEM
                                                                                                (AST_PROP
                                                                                                    (AST_VAR))
                                                                                                (SCALAR)))
                                                                                        (SCALAR))
                                                                                    (AST_ARRAY_ELEM
                                                                                        (AST_ARRAY
                                                                                            (AST_ARRAY_ELEM
                                                                                                (AST_CALL
                                                                                                    (
                                                                                                        (AST_PROP
                                                                                                            (AST_VAR))))
                                                                                                (SCALAR)))
                                                                                        (SCALAR))))
                                                                            (AST_IF
                                                                                (AST_IF_ELEM
                                                                                    (AST_BINARY_OP
                                                                                        (AST_PROP
                                                                                            (AST_VAR))
                                                                                        (AST_CONST))
                                                                                    (
                                                                                        (AST_ASSIGN
                                                                                            (AST_DIM
                                                                                                (AST_DIM
                                                                                                    (AST_VAR)
                                                                                                    (SCALAR))
                                                                                                (SCALAR))
                                                                                            (SCALAR))))
                                                                                (AST_IF_ELEM
                                                                                    (NULL)
                                                                                    (
                                                                                        (AST_IF
                                                                                            (AST_IF_ELEM
                                                                                                (AST_BINARY_OP
                                                                                                    (AST_PROP
                                                                                                        (AST_VAR))
                                                                                                    (AST_CONST)))))))
                                                                            (AST_FOREACH
                                                                                (AST_CALL
                                                                                    (
                                                                                        (AST_PROP
                                                                                            (AST_VAR))))
                                                                                (AST_VAR)
                                                                                (NULL)
                                                                                (
                                                                                    (AST_IF
                                                                                        (AST_IF_ELEM
                                                                                            (AST_BINARY_OP
                                                                                                (AST_PROP
                                                                                                    (AST_VAR))
                                                                                                (AST_VAR))
                                                                                            (
                                                                                                (AST_ASSIGN
                                                                                                    (AST_DIM
                                                                                                        (AST_VAR)
                                                                                                        (SCALAR))
                                                                                                    (AST_ARRAY
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (SCALAR)
                                                                                                            (SCALAR))
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (AST_ARRAY
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_VAR)
                                                                                                                    (SCALAR))
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (SCALAR)
                                                                                                                    (SCALAR)))
                                                                                                            (SCALAR))))))
                                                                                        (AST_IF_ELEM
                                                                                            (NULL)
                                                                                            (
                                                                                                (AST_ASSIGN
                                                                                                    (AST_DIM
                                                                                                        (AST_VAR)
                                                                                                        (SCALAR))
                                                                                                    (AST_ARRAY
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (SCALAR)
                                                                                                            (SCALAR))
                                                                                                        (AST_ARRAY_ELEM
                                                                                                            (AST_ARRAY
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_VAR)
                                                                                                                    (SCALAR)))
                                                                                                            (SCALAR)))))))))
                                                                            (AST_METHOD_CALL
                                                                                (AST_VAR)
                                                                                (
                                                                                    (AST_VAR)
                                                                                    (AST_VAR)
                                                                                    (AST_BINARY_OP
                                                                                        (SCALAR)
                                                                                        (AST_VAR))))
                                                                            (AST_RETURN
                                                                                (NULL))))
                                                                    (AST_IF_ELEM
                                                                        (NULL)
                                                                        (
                                                                            (AST_IF
                                                                                (AST_IF_ELEM
                                                                                    (AST_BINARY_OP
                                                                                        (AST_CALL
                                                                                            (
                                                                                                (AST_VAR)))
                                                                                        (SCALAR))
                                                                                    (
                                                                                        (AST_ASSIGN
                                                                                            (AST_VAR)
                                                                                            (AST_CAST
                                                                                                (AST_PROP
                                                                                                    (AST_VAR))))
                                                                                        (AST_ASSIGN
                                                                                            (AST_VAR)
                                                                                            (AST_CAST
                                                                                                (AST_VAR)))
                                                                                        (AST_FOREACH
                                                                                            (AST_VAR)
                                                                                            (AST_VAR)
                                                                                            (AST_VAR)
                                                                                            (
                                                                                                (AST_IF
                                                                                                    (AST_IF_ELEM
                                                                                                        (AST_UNARY_OP
                                                                                                            (AST_CALL
                                                                                                                (
                                                                                                                    (AST_VAR)
                                                                                                                    (AST_VAR))))
                                                                                                        (
                                                                                                            (AST_IF
                                                                                                                (AST_IF_ELEM
                                                                                                                    (AST_UNARY_OP
                                                                                                                        (AST_VAR))
                                                                                                                    (
                                                                                                                        (AST_ASSIGN
                                                                                                                            (AST_VAR)
                                                                                                                            (AST_ENCAPS_LIST
                                                                                                                                (SCALAR)
                                                                                                                                (AST_VAR)
                                                                                                                                (SCALAR))))))
                                                                                                            (AST_METHOD_CALL
                                                                                                                (AST_VAR)
                                                                                                                (
                                                                                                                    (AST_VAR))))))
                                                                                                (AST_IF
                                                                                                    (AST_IF_ELEM
                                                                                                        (AST_BINARY_OP
                                                                                                            (AST_VAR)
                                                                                                            (AST_DIM
                                                                                                                (AST_VAR)
                                                                                                                (AST_VAR)))
                                                                                                        (
                                                                                                            (AST_IF
                                                                                                                (AST_IF_ELEM
                                                                                                                    (AST_UNARY_OP
                                                                                                                        (AST_VAR))
                                                                                                                    (
                                                                                                                        (AST_ASSIGN
                                                                                                                            (AST_VAR)
                                                                                                                            (AST_ENCAPS_LIST
                                                                                                                                (SCALAR)
                                                                                                                                (AST_VAR)
                                                                                                                                (SCALAR))))))
                                                                                                            (AST_METHOD_CALL
                                                                                                                (AST_VAR)
                                                                                                                (
                                                                                                                    (AST_VAR))))))))
                                                                                        (AST_METHOD_CALL
                                                                                            (AST_VAR)
                                                                                            (
                                                                                                (AST_CONST)))
                                                                                        (AST_RETURN
                                                                                            (NULL))))
                                                                                (AST_IF_ELEM
                                                                                    (NULL)
                                                                                    (
                                                                                        (AST_IF
                                                                                            (AST_IF_ELEM
                                                                                                (AST_BINARY_OP
                                                                                                    (AST_CALL
                                                                                                        (
                                                                                                            (AST_VAR)))
                                                                                                    (SCALAR))
                                                                                                (
                                                                                                    (AST_METHOD_CALL
                                                                                                        (AST_VAR)
                                                                                                        (
                                                                                                            (AST_ARRAY
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_PROP
                                                                                                                        (AST_VAR))
                                                                                                                    (SCALAR))
                                                                                                                (AST_ARRAY_ELEM
                                                                                                                    (AST_PROP
                                                                                                                        (AST_VAR))
                                                                                                                    (SCALAR)))
                                                                                                            (AST_VAR)
                                                                                                            (AST_BINARY_OP
                                                                                                                (AST_BINARY_OP
                                                                                                                    (AST_BINARY_OP
                                                                                                                        (AST_BINARY_OP
                                                                                                                            (AST_BINARY_OP
                                                                                                                                (SCALAR)
                                                                                                                                (AST_PROP
                                                                                                                                    (AST_VAR)))
                                                                                                                            (SCALAR))
                                                                                                                        (AST_PROP
                                                                                                                            (AST_VAR)))
                                                                                                                    (SCALAR))
                                                                                                                (AST_VAR))))
                                                                                                    (AST_RETURN
                                                                                                        (NULL))))))))))))))))))))))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))))