||||||||    function export() {
        global $CFG;
        $this->directory = $CFG->dataroot.'/temp';
        // write all templates, but not the xml yet

        $template_files = $this->get_template_files();
        foreach ($template_files as $var => $file) {
            $handle = fopen($this->directory . '/' . $file, 'w');
            fwrite($handle, $this->$var);
            fclose($handle);
        }

        /* All the display data is now done. Now assemble preset.xml */
        $fields = get_records('data_fields', 'dataid', $this->data->id);
        $presetfile = fopen($this->directory.'/preset.xml', 'w');
        $presetxml = "<preset>\n\n";

        /* Database settings first. Name not included? */
        $settingssaved = array('intro',
                               'comments',
                               'requiredentries',
                               'requiredentriestoview',
                               'maxentries',
                               'rssarticles',
                               'approval',
                               'scale',
                               'assessed',
                               'defaultsort',
                               'defaultsortdir',
                               'editany');

        $presetxml .= "<settings>\n";
        foreach ($settingssaved as $setting) {
            $presetxml .= "<$setting>{$this->data->$setting}</$setting>\n";
        }
        $presetxml .= "</settings>\n\n";

        /* Now for the fields. Grabs all settings that are non-empty */
        if (!empty($fields)) {
            foreach ($fields as $field) {
                $presetxml .= "<field>\n";
                foreach ($field as $key => $value) {
                    if ($value != '' && $key != 'id' && $key != 'dataid') {
                        $presetxml .= "<$key>$value</$key>\n";
                    }
                }
                $presetxml .= "</field>\n\n";
            }
        }

        $presetxml .= "</preset>";
        fwrite($presetfile, $presetxml);
        fclose($presetfile);

        /* Check all is well */
        if (is_array($missing_files = $this->has_all_required_files())) {
            $missing_files = implode(', ', $missing_files);
            print_error('filesnotgenerated', 'data', null, $missing_files);
        }

        // Remove export.zip
        @unlink($this->directory.'/export.zip');

        $filelist = array();
        foreach ($this->required_files as $file) {
            $filelist[$file] = $this->directory . '/' . $file;
        }

        // zip_files is part of moodlelib
        $status = zip_files($filelist, $this->directory.'/export.zip');

        /* made the zip... now return the filename for storage.*/
        return $this->directory.'/export.zip';
    }


    /**
    * Loads the contents of the preset folder to initialise this Preset object.
    * TODO document
    */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR)))
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))
                                        (
                                            (AST_ASSIGN_OP
                                                (AST_VAR)
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR))))))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)
                        (AST_VAR))))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR))))