||||||||    public function test_set_pagelayout() {
        // Exercise SUT
        $this->testpage->set_pagelayout('type');
        // Validate
        $this->assertEqual('type', $this->testpage->pagelayout);
    }
}

/**
 * Test functions that rely on the context table.
 */
class moodle_page_with_context_table_test extends UnitTestCaseUsingDatabase {
    protected $testpage;
    protected $originalcourse;

    public function setUp() {
        global $COURSE;
        parent::setUp();
        $this->originalcourse = $COURSE;
        $this->testpage = new moodle_page();
        $this->create_test_table('context', 'lib');
        $this->switch_to_test_db();
    }

    public function tearDown() {
        global $COURSE;
        $this->testpage = NULL;
        $COURSE = $this->originalcourse;
        parent::tearDown();
    }

    /** Creates an object with all the fields you would expect a $course object to have. */
    protected function create_a_course_with_context() {
        $course = new stdClass;
        $course->id = 13;
        $course->category = 2;
        $course->fullname = 'Anonymous test course';
        $course->shortname = 'ANON';
        $course->summary = '';

        $context = new stdClass;
        $context->contextlevel = CONTEXT_COURSE;
        $context->instanceid = $course->id;
        $context->path = 'not initialised';
        $context->depth = '13';
        $this->testdb->insert_record('context', $context);

        return $course;
    }

    public function test_setting_course_sets_context() {
        // Setup fixture
        $course = $this->create_a_course_with_context();
        // Exercise SUT
        $this->testpage->set_course($course);
        // Validate
        $expectedcontext = new stdClass;
        $expectedcontext->contextlevel = CONTEXT_COURSE;
        $expectedcontext->instanceid = $course->id;
        $this->assert(new CheckSpecifiedFieldsExpectation($expectedcontext), $this->testpage->context);
    }
}

/**
 * Test functions that rely on the context table.
 */
class moodle_page_categories_test extends UnitTestCaseUsingDatabase {
    protected $testpage;
    protected $originalcourse;

    public function setUp() {
        global $COURSE, $SITE;
        parent::setUp();
        $this->originalcourse = $COURSE;
        $this->testpage = new moodle_page();
        $this->create_test_tables(array('course_categories', 'context'), 'lib');
        $this->switch_to_test_db();

        $context = new stdClass;
        $context->contextlevel = CONTEXT_COURSE;
        $context->instanceid = $SITE->id;
        $context->path = 'not initialised';
        $context->depth = '13';
        $this->testdb->insert_record('context', $context);
    }

    public function tearDown() {
        global $COURSE;
        $this->testpage = NULL;
        $COURSE = $this->originalcourse;
        parent::tearDown();
    }

    /** Creates an object with all the fields you would expect a $course object to have. */
    protected function create_a_category_with_context($parentid = 0) {
        if ($parentid) {
            $parent = $this->testdb->get_record('course_categories', array('id' => $parentid));
        } else {
            $parent = new stdClass;
            $parent->depth = 0;
            $parent->path = '';
        }
        $cat = new stdClass;
        $cat->name = 'Anonymous test category';
        $cat->description = '';
        $cat->parent = $parentid;
        $cat->depth = $parent->depth + 1;
        $cat->id = $this->testdb->insert_record('course_categories', $cat);
        $cat->path = $parent->path . '/' . $cat->id;
        $this->testdb->set_field('course_categories', 'path', $cat->path, array('id' => $cat->id));

        $context = new stdClass;
        $context->contextlevel = CONTEXT_COURSECAT;
        $context->instanceid = $cat->id;
        $context->path = 'not initialised';
        $context->depth = '13';
        $this->testdb->insert_record('context', $context);

        return $cat;
    }

    public function test_set_category_top_level() {
        // Setup fixture
        $cat = $this->create_a_category_with_context();
        // Exercise SUT
        $this->testpage->set_category_by_id($cat->id);
        // Validate
        $this->assert(new CheckSpecifiedFieldsExpectation($cat), $this->testpage->category);
        $expectedcontext = new stdClass; // Test it sets the context.
        $expectedcontext->contextlevel = CONTEXT_COURSECAT;
        $expectedcontext->instanceid = $cat->id;
        $this->assert(new CheckSpecifiedFieldsExpectation($expectedcontext), $this->testpage->context);
    }

    public function test_set_nested_categories() {
        // Setup fixture
        $topcat = $this->create_a_category_with_context();
        $subcat = $this->create_a_category_with_context($topcat->id);
        // Exercise SUT
        $this->testpage->set_category_by_id($subcat->id);
        // Validate
        $categories = $this->testpage->categories;
        $this->assertEqual(2, count($categories));
        $this->assert(new CheckSpecifiedFieldsExpectation($topcat), array_pop($categories));
        $this->assert(new CheckSpecifiedFieldsExpectation($subcat), array_pop($categories));
    }
}

/**
 * Test functions that rely on the context table.
 */
class moodle_page_cm_test extends UnitTestCaseUsingDatabase {
    protected $testpage;
    protected $originalcourse;

    public function setUp() {
        global $COURSE, $SITE;
        parent::setUp();
        $this->originalcourse = $COURSE;
        $this->testpage = new moodle_page();
        $this->create_test_tables(array('course', 'context'), 'lib');
        $this->create_test_table('forum', 'mod/forum');
        $this->switch_to_test_db();

        $context = new stdClass;
        $context->contextlevel = CONTEXT_COURSE;
        $context->instanceid = $SITE->id;
        $context->path = 'not initialised';
        $context->depth = '13';
        $this->testdb->insert_record('context', $context);
    }

    public function tearDown() {
        global $COURSE;
        $this->testpage = NULL;
        $COURSE = $this->originalcourse;
        parent::tearDown();
    }

    /** Creates an object with all the fields you would expect a $course object to have. */
    protected function create_a_forum_with_context() {
        $course = new stdClass;
        $course->category = 2;
        $course->fullname = 'Anonymous test course';
        $course->shortname = 'ANON';
        $course->summary = '';
        $course->id = $this->testdb->insert_record('course', $course);

        $forum = new stdClass;
        $forum->course = $course->id;
        $forum->name = 'Anonymouse test forum';
        $forum->intro = '';
        $forum->id = $this->testdb->insert_record('forum', $forum);

        $cm = new stdClass;
        $cm->id = 13;
        $cm->course = $course->id;
        $cm->instance = $forum->id;
        $cm->modname = 'forum';
        $cm->name = $forum->name;

        $context = new stdClass;
        $context->contextlevel = CONTEXT_MODULE;
        $context->instanceid = $cm->id;
        $context->path = 'not initialised';
        $context->depth = '13';
        $this->testdb->insert_record('context', $context);

        return array($cm, $course, $forum);
    }

    public function test_cm_null_initially() {
        // Validate
        $this->assertNull($this->testpage->cm);
    }

    public function test_set_cm() {
        // Setup fixture
        list($cm) = $this->create_a_forum_with_context();
        // Exercise SUT
        $this->testpage->set_cm($cm);
        // Validate
        $this->assert(new CheckSpecifiedFieldsExpectation($cm), $this->testpage->cm);
    }

    public function test_cannot_set_cm_without_name() {
        // Setup fixture
        list($cm) = $this->create_a_forum_with_context();
        // Set expectation
        $this->expectException();
        // Exercise SUT
        unset($cm->name);
        $this->testpage->set_cm($cm);
    }

    public function test_cannot_set_cm_without_modname() {
        // Setup fixture
        list($cm) = $this->create_a_forum_with_context();
        // Set expectation
        $this->expectException();
        // Exercise SUT
        unset($cm->modname);
        $this->testpage->set_cm($cm);
    }

    public function test_cannot_set_activity_record_before_cm() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        // Set expectation
        $this->expectException();
        // Exercise SUT
        $this->testpage->set_activity_record($forum);
    }

    public function test_setting_cm_sets_context() {
        // Setup fixture
        list($cm) = $this->create_a_forum_with_context();
        // Exercise SUT
        $this->testpage->set_cm($cm);
        // Validate
        $expectedcontext = new stdClass;
        $expectedcontext->contextlevel = CONTEXT_MODULE;
        $expectedcontext->instanceid = $cm->id;
        $this->assert(new CheckSpecifiedFieldsExpectation($expectedcontext), $this->testpage->context);
    }

    public function test_activity_record_loaded_if_not_set() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        // Exercise SUT
        $this->testpage->set_cm($cm);
        // Validate
        $this->assert(new CheckSpecifiedFieldsExpectation($forum), $this->testpage->activityrecord);
    }

    public function test_set_activity_record() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        $this->testpage->set_cm($cm);
        // Exercise SUT
        $this->testpage->set_activity_record($forum);
        // Validate
        $this->assert(new CheckSpecifiedFieldsExpectation($forum), $this->testpage->activityrecord);
    }

    public function test_cannot_set_inconsistent_activity_record_course() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        $this->testpage->set_cm($cm);
        // Set expectation
        $this->expectException();
        // Exercise SUT
        $forum->course = 13;
        $this->testpage->set_activity_record($forum);
    }

    public function test_cannot_set_inconsistent_activity_record_instance() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        $this->testpage->set_cm($cm);
        // Set expectation
        $this->expectException();
        // Exercise SUT
        $forum->id = 13;
        $this->testpage->set_activity_record($forum);
    }

    public function test_settin_cm_sets_course() {
        // Setup fixture
        list($cm, $course) = $this->create_a_forum_with_context();
        // Exercise SUT
        $this->testpage->set_cm($cm);
        // Validate
        $this->assert(new CheckSpecifiedFieldsExpectation($course), $this->testpage->course);
    }

    public function test_set_cm_with_course_and_activity_no_db() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        $this->drop_test_table('forum');
        $this->drop_test_table('course');
        // Exercise SUT
        $this->testpage->set_cm($cm, $course, $forum);
        // Validate
        $this->assert(new CheckSpecifiedFieldsExpectation($cm), $this->testpage->cm);
        $this->assert(new CheckSpecifiedFieldsExpectation($course), $this->testpage->course);
        $this->assert(new CheckSpecifiedFieldsExpectation($forum), $this->testpage->activityrecord);
    }

    public function test_cannot_set_cm_with_inconsistent_course() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        // Set expectation
        $this->expectException();
        // Exercise SUT
        $cm->course = 13;
        $this->testpage->set_cm($cm, $course);
    }

    public function test_get_activity_name() {
        // Setup fixture
        list($cm, $course, $forum) = $this->create_a_forum_with_context();
        // Exercise SUT
        $this->testpage->set_cm($cm, $course, $forum);
        // Validate
        $this->assertEqual('forum', $this->testpage->activityname);
    }
}

/**
 * Test functions that affect filter_active table with contextid = $syscontextid.
 */
class moodle_page_editing_test extends UnitTestCase {
    protected $testpage;
    protected $originaluserediting;

    public function setUp() {
        global $USER;
        $this->originaluserediting = !empty($USER->editing);
        $this->testpage = new testable_moodle_page();
        $this->testpage->set_context(get_context_instance(CONTEXT_SYSTEM));
    }

    public function tearDown() {
        global $USER;
        $this->testpage = NULL;
        $USER->editing = $this->originaluserediting;
    }

    // We are relying on the fact that unit tests are alwyas run by admin, to
    // ensure the user_allows_editing call returns true.
    public function test_user_is_editing_on() {
        // Setup fixture
        global $USER;
        $USER->editing = true;
        // Validate
        $this->assertTrue($this->testpage->user_is_editing());
    }

    // We are relying on the fact that unit tests are alwyas run by admin, to
    // ensure the user_allows_editing call returns true.
    public function test_user_is_editing_off() {
        // Setup fixture
        global $USER;
        $USER->editing = false;
        // Validate
        $this->assertFalse($this->testpage->user_is_editing());
    }

    public function test_default_editing_capabilities() {
        // Validate
        $this->assertEqual(array('moodle/site:manageblocks'), $this->testpage->all_editing_caps());
    }

    public function test_other_block_editing_cap() {
        // Exercise SUT
        $this->testpage->set_blocks_editing_capability('moodle/my:manageblocks');
        // Validate
        $this->assertEqual(array('moodle/my:manageblocks'), $this->testpage->all_editing_caps());
    }

    public function test_other_editing_cap() {
        // Exercise SUT
        $this->testpage->set_other_editing_capability('moodle/course:manageactivities');
        // Validate
        $actualcaps = $this->testpage->all_editing_caps();
        $expectedcaps = array('moodle/course:manageactivities', 'moodle/site:manageblocks');
        $this->assert(new ArraysHaveSameValuesExpectation($expectedcaps), $actualcaps);
    }

    public function test_other_editing_caps() {
        // Exercise SUT
        $this->testpage->set_other_editing_capability(array('moodle/course:manageactivities', 'moodle/site:other'));
        // Validate
        $actualcaps = $this->testpage->all_editing_caps();
        $expectedcaps = array('moodle/course:manageactivities', 'moodle/site:other', 'moodle/site:manageblocks');
        $this->assert(new ArraysHaveSameValuesExpectation($expectedcaps), $actualcaps);
    }
}
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))))