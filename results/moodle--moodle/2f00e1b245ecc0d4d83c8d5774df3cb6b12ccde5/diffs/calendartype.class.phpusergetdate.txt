||||||||    function usergetdate($time, $timezone) {
        // Save input timezone, required for dst offset check.
        $passedtimezone = $timezone;

        $timezone = get_user_timezone_offset($timezone);

        if (abs($timezone) > 13) { // Server time.
            return getdate($time);
        }

        // Add daylight saving offset for string timezones only, as we can't get dst for
        // float values. if timezone is 99 (user default timezone), then try update dst.
        if ($passedtimezone == 99 || !is_numeric($passedtimezone)) {
            $time += dst_offset_on($time, $passedtimezone);
        }

        $time += intval((float)$timezone * HOURSECS);

        $datestring = gmstrftime('%B_%A_%j_%Y_%m_%w_%d_%H_%M_%S', $time);

        // Be careful to ensure the returned array matches that produced by getdate() above.
        list (
            $getdate['month'],
            $getdate['weekday'],
            $getdate['yday'],
            $getdate['year'],
            $getdate['mon'],
            $getdate['wday'],
            $getdate['mday'],
            $getdate['hours'],
            $getdate['minutes'],
            $getdate['seconds']
            ) = explode('_', $datestring);

        // Set correct datatype to match with getdate().
        $getdate['seconds'] = (int) $getdate['seconds'];
        $getdate['yday'] = (int) $getdate['yday'] - 1;
        $getdate['year'] = (int) $getdate['year'];
        $getdate['mon'] = (int) $getdate['mon'];
        $getdate['wday'] = (int) $getdate['wday'];
        $getdate['mday'] = (int) $getdate['mday'];
        $getdate['hours'] = (int) $getdate['hours'];
        $getdate['minutes']  = (int) $getdate['minutes'];

        return $getdate;
    }
}

/**
 * Class calendar_type_plugin_factory.
 *
 * Factory class producing required subclasses of {@link calendar_type_plugin_base}.
 */
class calendar_type_plugin_factory {

    /**
     * Returns an instance of the currently used calendar type.
     *
     * @return calendar_type_plugin_* the created calendar_type class
     * @throws coding_exception if the calendar type file could not be loaded
     */
    static function factory() {
        global $CFG;

        $type = self::get_calendar_type();
        $file = 'calendar/type/' . $type . '/lib.php';
        $fullpath = $CFG->dirroot . '/' . $file;
        if (is_readable($fullpath)) {
            require_once($fullpath);
            $class = "calendar_type_plugin_$type";
            return new $class();
        } else {
            throw new coding_exception("The calendar type file $file could not be initialised, check that it exists
                and that the web server has permission to read it.");
        }
    }

    /**
     * Returns a list of calendar typess available for use.
     *
     * @return array the list of calendar types
     */
    static function get_list_of_calendar_types() {
        $calendars = array();
        $calendardirs = core_component::get_plugin_list('calendartype');

        foreach ($calendardirs as $name => $location) {
            $calendars[$name] = get_string('name', "calendartype_{$name}");
        }

        return $calendars;
    }

    /**
     * Returns the current calendar type in use.
     *
     * @return string the current calendar type being used
     */
    static function get_calendar_type() {
        global $CFG, $USER, $SESSION, $COURSE;

        if (!empty($COURSE->id) and $COURSE->id != SITEID and !empty($COURSE->calendartype)) { // Course calendartype can override all other settings for this page.
            $return = $COURSE->calendartype;
        } else if (!empty($SESSION->calendartype)) { // Session calendartype can override other settings.
            $return = $SESSION->calendartype;
        } else if (!empty($USER->calendartype)) {
            $return = $USER->calendartype;
        } else if (!empty($CFG->calendartype)) {
            $return = $CFG->calendartype;
        } else {
            $return = 'gregorian';
        }

        return $return;
    }
}
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CAST
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_BINARY_OP
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_RETURN
        (AST_VAR)))