    public static function make($page, $text, $module='moodle', $linktext=false) {
        $helpicon = new moodle_help_icon();
        $helpicon->page = $page;
        $helpicon->text = $text;
        $helpicon->module = $module;
        $helpicon->linktext = $linktext;
        return $helpicon;
    }

||||||||    public static function make($totalcount, $page, $perpage, $baseurl) {
        $pagingbar = new moodle_paging_bar();
        $pagingbar->totalcount = $totalcount;
        $pagingbar->page = $page;
        $pagingbar->perpage = $perpage;
        $pagingbar->baseurl = $baseurl;
        return $pagingbar;
    }
}


/**
 * Component representing a user picture.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class user_picture extends html_image {
    /**
     * @var mixed $user A user object with at least fields id, picture, imagealt, firstname and lastname set.
     */
    public $user;
    /**
     * @var int $courseid The course id. Used when constructing the link to the user's profile,
     * page course id used if not specified.
     */
    public $courseid;
    /**
     * @var bool $link add course profile link to image
     */
    public $link = true;
    /**
     * @var int $size Size in pixels. Special values are (true/1 = 100px) and (false/0 = 35px) for backward compatibility
     */
    public $size = 35;
    /**
     * @var boolean $alttext add non-blank alt-text to the image.
     * Default true, set to false when image alt just duplicates text in screenreaders.
     */
    public $alttext = true;
    /**
     * @var boolean $popup Whether or not to open the link in a popup window.
     */
    public $popup = false;

    /**
     * @var link to profile if link requested
     */
    public $url;

    /**
     * User picture constructor.
     *
     * @param object $user user record with at least id, picture, imagealt, firstname and lastname set.
     * @param array $options such as link, size, link, ...
     */
    public function __construct(stdClass $user = null, array $options = null) {
        parent::__construct(null, $options);

        if ($user) {
            $this->user = $user;
        }
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        global $CFG, $DB;

        if (empty($this->user)) {
            throw new coding_exception('A user_picture object must have a $user object before being rendered.');
        }

        if (empty($this->user->id)) {
            throw new coding_exception('User id missing in $user object.');
        }

        if (empty($this->courseid)) {
            $courseid = $page->course->id;
        } else {
            $courseid = $this->courseid;
        }

        // only touch the DB if we are missing data and complain loudly...
        $needrec = false;

        if (!array_key_exists('picture', $this->user)) {
            $needrec = true;
            debugging('Missing picture property in $user object, this is a performance problem that needs to be fixed by a developer.', DEBUG_DEVELOPER);
        }
        if ($this->alttext) {
            if (!array_key_exists('firstname', $this->user) || !array_key_exists('lastname', $this->user) || !array_key_exists('imagealt', $this->user)) {
                $needrec = true;
                debugging('Missing firstname, lastname or imagealt property in $user object, this is a performance problem that needs to be fixed by a developer.', DEBUG_DEVELOPER);
            }
        }

        if ($needrec) {
            $this->user = $DB->get_record('user', array('id'=>$this->user->id), 'id, firstname, lastname, imagealt');
        }

        if ($this->alttext) {
            if (!empty($user->imagealt)) {
                $this->alt = $user->imagealt;
            } else {
                $this->alt = get_string('pictureof', '', fullname($this->user));
            }
        } else {
            $this->alt = HTML_ATTR_EMPTY;
        }

        if ($this->link) {
            $this->url = new moodle_url('/user/view.php', array('id' => $this->user->id, 'course' => $courseid));
        } else {
            $this->url = null;
            $this->popup = false;
        }

        if (empty($this->size)) {
            $file = 'f2';
            $this->size = 35;
        } else if ($this->size === true or $this->size == 1) {
            $file = 'f1';
            $this->size = 100;
        } else if ($this->size >= 50) {
            $file = 'f1';
        } else {
            $file = 'f2';
        }

        if (!empty($this->size)) {
            $this->width = $this->size;
            $this->height = $this->size;
        }

        $this->add_class('userpicture');

        if (!empty($this->user->picture)) {
            require_once($CFG->libdir.'/filelib.php');
            $this->src = new moodle_url(get_file_url($this->user->id.'/'.$file.'.jpg', null, 'user'));
        } else { // Print default user pictures (use theme version if available)
            $this->add_class('defaultuserpic');
            $this->src = $output->pix_url('u/' . $file);
        }

        parent::prepare($output, $page, $target);
    }
}


/**
 * Component representing a help icon.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class help_icon extends html_image {
    public $page;
    /**
     * @var string $module Which module is the page defined in
     */
    /**
     * @var string $text A descriptive text
     */
    public $text;
    /**
     * @var string $page  The keyword that defines a help page
     */
    public $component = 'moodle';
    /**
     * @var boolean $linktext Whether or not to show text next to the icon
     */
    public $linktext = false;

    /**
     * @var html_link $link A html_link object that will hold the URL info
     */
    public $link;

    /**
     * Constructor: sets up the other components in case they are needed
     * @param string $page  The keyword that defines a help page
     * @param string $text A descriptive text
     * @param string $component
     * @param bool $linktext add extra text to icon
     * @return void
     */
    public function __construct($helppage, $text, $component='moodle', $linktext=false) {
        global $CFG;

        if (empty($helppage)) {
            throw new coding_exception('A help_icon object requires a $helppage parameter');
        }

        if (empty($text)) {
            throw new coding_exception('A help_icon object requires a $text parameter');
        }

        parent::__construct(null, array('class'=>'iconhelp'));

        $this->helppage  = $helppage;
        $this->text      = $text;
        $this->component = $component;
        $this->linktext  = $linktext;

        $this->link = new html_link();
        $this->link->url = new moodle_url($CFG->wwwroot.'/help.php', array('module' => $this->component, 'file' => $this->helppage .'.html'));
        // Warn users about new window for Accessibility
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        global $CFG;

        if (empty($this->link->title)) {
            $this->link->title = get_string('helpprefix2', '', trim($this->text, ". \t")) .' ('.get_string('newwindow').')';
        }

        if (empty($this->src)) {
            $this->src = $output->pix_url('help');
        }

        if ($this->linktext) {
            $this->image->alt = get_string('helpwiththis');
        } else {
            $this->image->alt = $this->text;
        }

        $popup = new popup_action('click', $this->link->url);
        $this->link->add_action($popup);

        parent::prepare($output, $page, $target);
    }
}


/**
 * Component representing an icon linking to a Moodle page.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class moodle_action_icon extends labelled_html_component {
    /**
     * @var string $linktext Optional text to display next to the icon
     */
    public $linktext;
    /**
     * @var html_image $image The icon
     */
    public $image;
    /**
     * @var html_link $link The link
     */
    public $link;

    /**
     * Constructor: sets up the other components in case they are needed
     * @return void
     */
    public function __construct() {
        $this->image = new html_image();
        $this->link = new html_link();
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        $this->image->add_class('action-icon');

        if (!empty($this->actions)) {
            foreach ($this->actions as $action) {
                $this->link->add_action($action);
            }
            unset($this->actions);
        }

        parent::prepare($output, $page, $target);

        if (empty($this->image->src)) {
            throw new coding_exception('moodle_action_icon->image->src must not be empty');
        }

        if (empty($this->image->alt) && !empty($this->linktext)) {
            $this->image->alt = $this->linktext;
        } else if (empty($this->image->alt)) {
            debugging('moodle_action_icon->image->alt should not be empty.', DEBUG_DEVELOPER);
        }
    }
}


/**
 * This class represents how a block appears on a page.
 *
 * During output, each block instance is asked to return a block_contents object,
 * those are then passed to the $OUTPUT->block function for display.
 *
 * {@link $contents} should probably be generated using a moodle_block_..._renderer.
 *
 * Other block-like things that need to appear on the page, for example the
 * add new block UI, are also represented as block_contents objects.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class block_contents extends html_component {
    /** @var int used to set $skipid. */
    protected static $idcounter = 1;

    const NOT_HIDEABLE = 0;
    const VISIBLE = 1;
    const HIDDEN = 2;

    /**
     * @param integer $skipid All the blocks (or things that look like blocks)
     * printed on a page are given a unique number that can be used to construct
     * id="" attributes. This is set automatically be the {@link prepare()} method.
     * Do not try to set it manually.
     */
    public $skipid;

    /**
     * @var integer If this is the contents of a real block, this should be set to
     * the block_instance.id. Otherwise this should be set to 0.
     */
    public $blockinstanceid = 0;

    /**
     * @var integer if this is a real block instance, and there is a corresponding
     * block_position.id for the block on this page, this should be set to that id.
     * Otherwise it should be 0.
     */
    public $blockpositionid = 0;

    /**
     * @param array $attributes an array of attribute => value pairs that are put on the
     * outer div of this block. {@link $id} and {@link $classes} attributes should be set separately.
     */
    public $attributes = array();

    /**
     * @param string $title The title of this block. If this came from user input,
     * it should already have had format_string() processing done on it. This will
     * be output inside <h2> tags. Please do not cause invalid XHTML.
     */
    public $title = '';

    /**
     * @param string $content HTML for the content
     */
    public $content = '';

    /**
     * @param array $list an alternative to $content, it you want a list of things with optional icons.
     */
    public $footer = '';

    /**
     * Any small print that should appear under the block to explain to the
     * teacher about the block, for example 'This is a sticky block that was
     * added in the system context.'
     * @var string
     */
    public $annotation = '';

    /**
     * @var integer one of the constants NOT_HIDEABLE, VISIBLE, HIDDEN. Whether
     * the user can toggle whether this block is visible.
     */
    public $collapsible = self::NOT_HIDEABLE;

    /**
     * A (possibly empty) array of editing controls. Each element of this array
     * should be an array('url' => $url, 'icon' => $icon, 'caption' => $caption).
     * $icon is the icon name. Fed to $OUTPUT->pix_url.
     * @var array
     */
    public $controls = array();

    /**
     * @see html_component::prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        $this->skipid = self::$idcounter;
        self::$idcounter += 1;
        $this->add_class('sideblock');
        if (empty($this->blockinstanceid) || !strip_tags($this->title)) {
            $this->collapsible = self::NOT_HIDEABLE;
        }
        if ($this->collapsible == self::HIDDEN) {
            $this->add_class('hidden');
        }
        if (!empty($this->controls)) {
            $this->add_class('block_with_controls');
        }
        parent::prepare($output, $page, $target);
    }
}


/**
 * This class represents a target for where a block can go when it is being moved.
 *
 * This needs to be rendered as a form with the given hidden from fields, and
 * clicking anywhere in the form should submit it. The form action should be
 * $PAGE->url.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class block_move_target extends html_component {
    /**
     * List of hidden form fields.
     * @var array
     */
    public $url = array();
    /**
     * List of hidden form fields.
     * @var array
     */
    public $text = '';
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))