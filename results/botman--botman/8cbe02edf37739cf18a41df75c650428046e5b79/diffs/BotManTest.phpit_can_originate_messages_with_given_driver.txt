    public function it_can_originate_messages_with_given_driver()
    {
        $driver = m::mock(NullDriver::class);
        $driver->shouldReceive('reply')
            ->once()
            ->withArgs(function ($message, $match, $arguments) {
                return $message === 'foo' && $match->getChannel() === 'channel' && $arguments === [];
            });

        $mock = \Mockery::mock('alias:Mpociot\BotMan\DriverManager');
        $mock->shouldReceive('loadFromName')
            ->once()
            ->with('Slack', [])
            ->andReturn($driver);

        $botman = m::mock(BotMan::class)->makePartial();
        $botman->say('foo', 'channel', SlackDriver::DRIVER_NAME);
    }

    /**
     * @test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
||||||||    public function it_can_originate_messages_with_given_driver()
    {
        $driver = m::mock(NullDriver::class);
        $driver->shouldReceive('buildServicePayload')
            ->once()
            ->withArgs(function ($message, $match, $arguments) {
                return $message === 'foo' && $match->getChannel() === 'channel' && $arguments === [];
            });
        $driver->shouldReceive('sendPayload')
            ->once();

        $mock = \Mockery::mock('alias:Mpociot\BotMan\DriverManager');
        $mock->shouldReceive('loadFromName')
            ->once()
            ->with('Slack', [])
            ->andReturn($driver);

        $botman = m::mock(BotMan::class)->makePartial();
        $botman->say('foo', 'channel', SlackDriver::DRIVER_NAME);
    }

    /**
     * @test
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_ARRAY))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (SCALAR)
                (AST_ARRAY)))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_ARRAY))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (SCALAR)
                (AST_ARRAY)))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR)))))