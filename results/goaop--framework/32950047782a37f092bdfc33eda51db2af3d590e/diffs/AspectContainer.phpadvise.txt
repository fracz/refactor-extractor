||||||||    public static function advise($class)
    {
        $classAdvices = array();
        if (!$class instanceof ReflectionClass && !$class instanceof ParsedReflectionClass) {
            $class = new ReflectionClass($class);
        }
        foreach (self::$advisors as $advisor) {
            if ($advisor instanceof PointcutAdvisor) {
                /** @var $advisor PointcutAdvisor */
                /** @var $pointcut Pointcut */
                $pointcut = $advisor->getPointcut();
                if ($pointcut->getClassFilter()->matches($class)) {
                    $pointFilter = $pointcut->getPointFilter();
                    $classAdvices = array_merge_recursive($classAdvices, self::getClassAdvices($class, $advisor, $pointFilter));
                }
            }
        }
        return $classAdvices;
    }

    /**
     * Returns list of advices for joinpoints
     *
     * @param ReflectionClass|ParsedReflectionClass|string $class Class to inject advices
     * @param PointcutAdvisor $advisor Advisor for class
     * @param PointFilter $filter Filter for points
     *
     * @return array
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR)
                                                        (AST_VAR))))))))))))))
    (AST_RETURN
        (AST_VAR)))