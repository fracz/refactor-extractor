    public function load(AspectContainer $container, Aspect $aspect, $reflection, $metaInformation = null)
    {
        $pointcut       = $this->parsePointcut($aspect, $reflection, $metaInformation);
        $methodId       = get_class($aspect).'->'.$reflection->name;
        $adviceCallback = Framework\BaseAdvice::fromAspectReflection($aspect, $reflection);

        if (isset($metaInformation->scope) && $metaInformation->scope !== 'aspect') {
            $scope = $metaInformation->scope;
            $adviceCallback = Framework\BaseAdvice::createScopeCallback($aspect, $adviceCallback, $scope);
        }

        $isPointFilter  = $pointcut instanceof PointFilter;
        switch (true) {
            // Register a pointcut by its name
            case ($metaInformation instanceof Annotation\Pointcut):
                $container->registerPointcut($pointcut, $methodId);
                break;

            case ($isPointFilter && ($pointcut->getKind() & PointFilter::KIND_METHOD)):
                $advice = $this->getMethodInterceptor($metaInformation, $adviceCallback);
                if ($pointcut instanceof Support\DynamicMethodMatcher) {
                    $advice = new Framework\DynamicMethodMatcherInterceptor(
                        $pointcut,
                        $advice
                    );
                }
                $container->registerAdvisor(new DefaultPointcutAdvisor($pointcut, $advice), $methodId);
                break;

            case ($isPointFilter && ($pointcut->getKind() & PointFilter::KIND_PROPERTY)):
                $advice = $this->getPropertyInterceptor($metaInformation, $adviceCallback);
                $container->registerAdvisor(new DefaultPointcutAdvisor($pointcut, $advice), $methodId);
                break;

            case ($isPointFilter && ($pointcut->getKind() & PointFilter::KIND_FUNCTION)):
                $advice = $this->getFunctionInterceptor($metaInformation, $adviceCallback);
                $container->registerAdvisor(new DefaultPointcutAdvisor($pointcut, $advice), $methodId);
                break;

            default:
                throw new \UnexpectedValueException("Unsupported pointcut class: " . get_class($pointcut));
        }
    }

    /**
     * @param $metaInformation
     * @param $adviceCallback
     * @return \Go\Aop\Intercept\MethodInterceptor
     * @throws \UnexpectedValueException
     */
||||||||    public function load(AspectContainer $container, Aspect $aspect, $reflection, $metaInformation = null)
    {
        $pointcut       = $this->parsePointcut($aspect, $reflection, $metaInformation);
        $methodId       = get_class($aspect).'->'.$reflection->name;
        $adviceCallback = Framework\BaseAdvice::fromAspectReflection($aspect, $reflection);

        if (isset($metaInformation->scope) && $metaInformation->scope !== 'aspect') {
            $scope = $metaInformation->scope;
            $adviceCallback = Framework\BaseAdvice::createScopeCallback($aspect, $adviceCallback, $scope);
        }

        $isPointFilter  = $pointcut instanceof PointFilter;
        switch (true) {
            // Register a pointcut by its name
            case ($metaInformation instanceof Annotation\Pointcut):
                $container->registerPointcut($pointcut, $methodId);
                break;

            case ($isPointFilter && ($pointcut->getKind() & PointFilter::KIND_METHOD)):
                $advice = $this->getMethodInterceptor($metaInformation, $adviceCallback);
                if ($pointcut->getKind() & PointFilter::KIND_DYNAMIC) {
                    $advice = new Framework\DynamicMethodMatcherInterceptor(
                        $pointcut,
                        $advice
                    );
                }
                $container->registerAdvisor(new DefaultPointcutAdvisor($pointcut, $advice), $methodId);
                break;

            case ($isPointFilter && ($pointcut->getKind() & PointFilter::KIND_PROPERTY)):
                $advice = $this->getPropertyInterceptor($metaInformation, $adviceCallback);
                $container->registerAdvisor(new DefaultPointcutAdvisor($pointcut, $advice), $methodId);
                break;

            case ($isPointFilter && ($pointcut->getKind() & PointFilter::KIND_FUNCTION)):
                $advice = $this->getFunctionInterceptor($metaInformation, $adviceCallback);
                $container->registerAdvisor(new DefaultPointcutAdvisor($pointcut, $advice), $methodId);
                break;

            default:
                throw new \UnexpectedValueException("Unsupported pointcut class: " . get_class($pointcut));
        }
    }

    /**
     * @param $metaInformation
     * @param $adviceCallback
     * @return \Go\Aop\Intercept\MethodInterceptor
     * @throws \UnexpectedValueException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_INSTANCEOF
            (AST_VAR)))
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_INSTANCEOF
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_INSTANCEOF
                                (AST_VAR))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_INSTANCEOF
            (AST_VAR)))
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_INSTANCEOF
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))))))))