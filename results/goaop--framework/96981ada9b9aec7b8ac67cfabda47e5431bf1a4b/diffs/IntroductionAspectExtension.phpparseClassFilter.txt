    private function parseClassFilter($metaInformation)
    {
        // Go\Aspects\Blog\Package\** : This will match all classes of Go\Aspects\Blog\Package and its sub packages.
        // Go\Aspects\Blog\Package\DemoClass : This will match DemoClass.
        // DemoInterface+ : This will match all classes which implement DemoInterface.
        static $classReg = '/
            ^
                (?P<class>[\w\\\*]+)
                (?P<children>\+?)
            $/x';

        if (preg_match($classReg, $metaInformation->value, $matches)) {
            $className = $matches['class'];
            if (!$matches['children']) {
                $classFilter = new Support\SimpleClassFilter($className);
            } elseif (strpos($className, '*') === false) {
                $classFilter = new Support\InheritanceClassFilter($className);
            } else {
                throw new \InvalidArgumentException("Can not use children selector with class mask");
            }

            return $classFilter;
        }

        throw new \UnexpectedValueException("Unsupported class filter: {$metaInformation->value}");
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR)))))))||||||||