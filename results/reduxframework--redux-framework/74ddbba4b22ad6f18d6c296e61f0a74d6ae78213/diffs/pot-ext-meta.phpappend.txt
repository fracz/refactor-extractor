	function append( $ext_filename, $pot_filename, $headers = null ) {
		if ( $headers )
			$this->headers = (array) $headers;
		if ( is_dir( $ext_filename ) ) {
			$pot = implode('', array_map(array(&$this, 'load_from_file'), glob("$ext_filename/*.php")));
		} else {
			$pot = $this->load_from_file($ext_filename);
		}
		$potf = '-' == $pot_filename? STDOUT : fopen( $pot_filename, 'a' );
		if (!$potf) return false;
		fwrite($potf, $pot);
		if ('-' != $pot_filename) fclose($potf);
		return true;
	}
}

$included_files = get_included_files();
if ( $included_files[0] == __FILE__ ) {

	/**
	 * Note: this file is locked by default since it should not be publicly accessible
	 * on a live website. You can unlock it by temporarily removing the following line.
	 */
	exit( 'Locked' );

	ini_set('display_errors', 1);
	$potextmeta = new PotExtMeta;
	if (!isset($argv[1])) {
		$potextmeta->usage();
	}
	$potextmeta->append( $argv[1], isset( $argv[2] ) ? $argv[2] : '-', isset( $argv[3] ) ? $argv[3] : null );
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CAST
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))
                                    (AST_CALL
                                        (
                                            (AST_ENCAPS_LIST
                                                (AST_VAR)
                                                (SCALAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_CONST)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))||||||||