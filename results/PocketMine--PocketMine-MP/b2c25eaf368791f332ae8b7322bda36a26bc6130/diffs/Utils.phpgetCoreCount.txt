||||||||	public static function getCoreCount(){
		$processors = 0;
		switch(Utils::getOS()){
			case "linux":
			case "android":
				if(file_exists("/proc/cpuinfo")){
					foreach(file("/proc/cpuinfo") as $l){
						if(preg_match('/^processor[ \t]*:[ \t]*[0-9]+$/m', $l) > 0){
							++$processors;
						}
					}
				}
				break;
			case "bsd":
				$processors = (int) `sysctl hw.ncpu | awk '{ print $2+1 }'`;
				break;
			case "mac":
				$processors = (int) `sysctl hw.availcpu | awk '{ print $2+1 }'`;
				break;
			case "win":
				$processors = (int) getenv("NUMBER_OF_PROCESSORS");
				break;
		}
		return $processors;
	}

	/**
	 * Returns a prettified hexdump
	 *
	 * @param string $bin
	 *
	 * @return string
	 */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_SWITCH
        (AST_STATIC_CALL)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (
                                (AST_FOREACH
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (AST_VAR)
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_CALL
                                                        (
                                                            (SCALAR)
                                                            (AST_VAR)))
                                                    (SCALAR))
                                                (
                                                    (AST_PRE_INC
                                                        (AST_VAR))))))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CAST
                            (AST_SHELL_EXEC
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CAST
                            (AST_SHELL_EXEC
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CAST
                            (AST_CALL
                                (
                                    (SCALAR)))))
                    (AST_BREAK
                        (NULL))))))
    (AST_RETURN
        (AST_VAR)))