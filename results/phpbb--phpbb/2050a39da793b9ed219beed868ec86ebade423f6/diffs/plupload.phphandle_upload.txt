||||||||	public function handle_upload($form_name)
	{
		$chunks_expected = $this->request->variable('chunks', 0);

		// If chunking is disabled or we are not using plupload, just return
		// and handle the file as usual
		if ($chunks_expected < 2)
		{
			return;
		}

		$file_name = $this->request->variable('name', '');
		$chunk = $this->request->variable('chunk', 0);

		$this->user->add_lang('plupload');
		$this->prepare_temporary_directory();

		$file_path = $this->temporary_filepath($file_name);
		$this->integrate_uploaded_file($form_name, $chunk, $file_path);

		// If we are done with all the chunks, strip the .part suffix and then
		// handle the resulting file as normal, otherwise die and await the
		// next chunk.
		if ($chunk == $chunks_expected - 1)
		{
			rename("{$file_path}.part", $file_path);

			$file_info = new \Symfony\Component\HttpFoundation\File\File($file_path);

			// Need to modify some of the $_FILES values to reflect the new file
			return array(
				'tmp_name' => $file_path,
				'name' => $this->request->variable('real_filename', ''),
				'size' => filesize($file_path),
				'type' => $file_info->getMimeType($file_path),
			);
		}
		else
		{
			$json_response = new \phpbb\json_response();
			$json_response->send(array(
				'jsonrpc' => '2.0',
				'id' => 'id',
				'result' => null,
			));
		}
	}

	/**
	* Fill in the plupload configuration options in the template
	*
	* @param \phpbb\cache\service		$cache
	* @param \phpbb\template\template	$template
	* @param string						$s_action The URL to submit the POST data to
	* @param int						$forum_id The ID of the forum
	*
	* @return null
	*/
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR)))))))))