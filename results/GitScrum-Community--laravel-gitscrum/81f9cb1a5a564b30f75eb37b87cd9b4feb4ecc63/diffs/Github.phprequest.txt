    private function request($url, $auth = true, $customRequest = null, $postFields = null)
    {
        $user = Auth::user();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0');
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_AUTOREFERER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

        if (!is_null($postFields)) {
            $postFields = json_encode($postFields);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
            curl_setopt($ch, CURLOPT_HTTPHEADER,  ['Content-Type: application/json',
                'Content-Length: '.strlen($postFields), ]);
        }

        if (!is_null($customRequest)) {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest); //'PATCH'
        }

        if ($auth) {
            curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            curl_setopt($ch, CURLOPT_USERPWD, $user->username.':'.$user->token);
        }

        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $result = curl_exec($ch);
        curl_close($ch);

        return json_decode($result);
    }

    /*
    public function organizations(){
        $this->request('https://api.github.com/user/orgs');
    }

    public function repositories($org){
        ///orgs/:org/repos
        return $this->request('https://api.github.com/orgs/'.$org.'/repos');
    }
    */

||||||||    private function request($url, $auth = true, $customRequest = null, $postFields = null)
    {
        $user = Auth::user();
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0');
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_AUTOREFERER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

        if (!is_null($postFields)) {
            $postFields = json_encode($postFields);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);
            curl_setopt($ch, CURLOPT_HTTPHEADER,  ['Content-Type: application/json',
                'Content-Length: '.strlen($postFields), ]);
        }

        if (!is_null($customRequest)) {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $customRequest); //'PATCH'
        }

        if ($auth && isset($user->username)) {
            curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            curl_setopt($ch, CURLOPT_USERPWD, $user->username.':'.$user->token);
        }

        $status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $result = curl_exec($ch);
        curl_close($ch);

        return json_decode($result);
    }

    /*
    public function organizations(){
        $this->request('https://api.github.com/user/orgs');
    }

    public function repositories($org){
        ///orgs/:org/repos
        return $this->request('https://api.github.com/orgs/'.$org.'/repos');
    }
    */

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (NULL))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (NULL))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))