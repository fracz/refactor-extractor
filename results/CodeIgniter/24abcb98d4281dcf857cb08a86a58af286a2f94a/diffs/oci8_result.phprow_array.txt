||||||||	public function row_array($n = 0)
	{
		// Make sure $n is not a string
		if ( ! is_int($n))
		{
			$n = (int) $n;
		}

		/* If row_data is initialized, it means that we've already tried
		 * (at least) to fetch some data, so ... check if we already have
		 * this row.
		*/
		if (is_array($this->row_data))
		{
			/* If we already have row_data[$n] - return it.
			 *
			 * If we enter the elseif, there's a number of reasons to
			 * return an empty array:
			 *
			 *	- count($this->row_data) === 0 means there are no results
			 *	- num_rows being set, result_array and/or result_object
			 *	  having count() > 0 means that we've already fetched all
			 *	  data and $n is greater than our highest row index available
			 *	- $n < $this->current_row means that if such row existed,
			 *	  we would've already returned it, therefore $n is an
			 *	  invalid index
			 */
			if (isset($this->row_data[$n])) // We already have this row
			{
				$this->current_row = $n;
				return $this->row_data[$n];
			}
			elseif (count($this->row_data) === 0 OR is_int($this->num_rows)
				OR count($this->result_array) > 0 OR count($this->result_object) > 0
				OR $n < $this->current_row)
			{
				// No such row exists
				return array();
			}

			// Get the next row index that would actually need to be fetched
			$current_row = ($this->current_row < count($this->row_data)) ? count($this->row_data) : $this->current_row + 1;
		}
		else
		{
			$current_row = $this->current_row = 0;
			$this->row_data = array();
		}

		/* Fetch more data, if available
		 *
		 * NOTE: Operator precedence is important here, if you change
		 *	 'AND' with '&&' - it WILL BREAK the results, as
		 *	 $row will be assigned the scalar value of both
		 *	 expressions!
		 */
		while ($row = $this->_fetch_assoc() AND $current_row <= $n)
		{
			$this->row_data[$current_row++] = $row;
		}

		// This would mean that there's no (more) data to fetch
		if ( ! is_array($this->row_data) OR ! isset($this->row_data[$n]))
		{
			// Cache what we already have
			if (is_array($this->row_data))
			{
				$this->num_rows = count($this->row_data);
				/* Usually, row_data could have less elements than result_array,
				 * but at this point - they should be exactly the same.
				 */
				$this->result_array = $this->row_data;
			}
			else
			{
				$this->num_rows = 0;
			}

			return array();
		}

		$this->current_row = $n;
		return $this->row_data[$n];
	}

	// --------------------------------------------------------------------

	/* Single row result. Object version.
	 *
	 * @param	int	row index
	 * @return	mixed	object if row found; empty array if not
	 */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_RETURN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR))
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (SCALAR)))
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))))
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_ARRAY)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_POST_INC
                        (AST_VAR)))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_UNARY_OP
                    (AST_ISSET
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))))