    public function testICanAggregatesResults() {

        $collection = new ResultCollection();
        $collection->push(new ResultSet('/root1/folder1/file1.php'));
        $collection->push(new ResultSet('/root1/folder1/file2.php'));
        $collection->push(new ResultSet('/root1/folder1/file3.php'));
        $collection->push(new ResultSet('/root1/folder2/file1.php'));
        $collection->push(new ResultSet('/root2/file1.php'));

        $aggregator = new DirectoryRecursiveAggregator(0);
        $results = $aggregator->aggregates($collection);


        $this->assertEquals(2, sizeof($results, COUNT_NORMAL), 'root');
        $this->assertArrayHasKey('root1', $results);
        $this->assertEquals(2, sizeof($results['root1'], COUNT_NORMAL), 'first level');
        $this->assertArrayHasKey('folder1', $results['root1']);
        $this->assertEquals(3, sizeof($results['root1']['folder1'], COUNT_NORMAL), 'second level');
        $this->assertEquals(1, sizeof($results['root1']['folder2'], COUNT_NORMAL), 'second level B');
        $this->assertEquals(1, sizeof($results['root2'], COUNT_NORMAL), 'fist level B');

    }
}||||||||    public function testICanAggregatesResults() {

        $collection = new ResultCollection();
        $collection->push(new ResultSet('/root1/folder1/file1.php'));
        $collection->push(new ResultSet('/root1/folder1/file2.php'));
        $collection->push(new ResultSet('/root1/folder1/file3.php'));
        $collection->push(new ResultSet('/root1/folder2/file1.php'));
        $collection->push(new ResultSet('/root2/file1.php'));

        $aggregator = new DirectoryRecursiveAggregator(0);
        $results = $aggregator->aggregates($collection);


        $this->assertArrayHasKey('.', $results);
        $results = $results['.'];
        $this->assertEquals(2, sizeof($results, COUNT_NORMAL), 'root');
        $this->assertArrayHasKey('root1', $results);
        $this->assertEquals(2, sizeof($results['root1'], COUNT_NORMAL), 'first level');
        $this->assertArrayHasKey('folder1', $results['root1']);
        $this->assertEquals(3, sizeof($results['root1']['folder1'], COUNT_NORMAL), 'second level');
        $this->assertEquals(1, sizeof($results['root1']['folder2'], COUNT_NORMAL), 'second level B');
        $this->assertEquals(1, sizeof($results['root2'], COUNT_NORMAL), 'fist level B');

    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))
            (SCALAR))))