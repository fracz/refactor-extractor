    public function execute(ResultCollection $collection, ResultCollection $aggregatedResults) {

        $this->output->write(str_pad("\x0DGrouping results by package/directory. This will take few minutes...", 80, "\x20"));

        // Aggregates results
        $groupedResults = $this->aggregator->aggregates($collection);

        // metrics tools
        $abstractness = new Abstractness();
        $bounds = new Bounds();
        $instability = new Instability();

        foreach($groupedResults as $namespace => $results) {
            $resultAggregate = new ResultAggregate($namespace);
            $resultAggregate
                ->setAbstractness($abstractness->calculate($results))
                ->setInstability($instability->calculate($results))
                ->setBounds($bounds->calculate($results))
            ;


            $aggregatedResults->push($resultAggregate);
        }
    }

}||||||||    public function execute(ResultCollection $collection, ResultCollection $aggregatedResults) {

        $this->output->write(str_pad("\x0DGrouping results by package/directory. This will take few minutes...", 80, "\x20"));

        // Aggregates results
        $groupedResults = $this->aggregator->aggregates($collection);

        // metrics tools
        $abstractness = new Abstractness();
        $bounds = new Bounds();
        $instability = new Instability();

        foreach($groupedResults as $namespace => $results) {

            // we filter aggregates to conserve only direct results
            $childs = new ResultCollection();
            foreach($results as $r) {
                if($namespace === dirname($r->getName())) {
                    $childs->push($r);
                }
            }
            $resultAggregate = new ResultAggregate($namespace);
            $resultAggregate
                ->setAbstractness($abstractness->calculate($results))
                ->setInstability($instability->calculate($results))
                ->setBounds($bounds->calculate($results))
                ->setChilds($childs)
            ;

            $aggregatedResults->push($resultAggregate);
        }
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))