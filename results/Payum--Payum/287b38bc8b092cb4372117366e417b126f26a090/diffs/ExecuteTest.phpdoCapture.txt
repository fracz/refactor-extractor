  public function doCapture()
  {
    if (false == isset($GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_USERNAME'])) {
      $this->markTestSkipped('Please configure __PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_USERNAME in your phpunit.xml');
    }
    if (false == isset($GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_PASSWORD'])) {
      $this->markTestSkipped('Please configure __PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_PASSWORD in your phpunit.xml');
    }
    if (false == isset($GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_PARTNER'])) {
      $this->markTestSkipped('Please configure __PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_PARTNER in your phpunit.xml');
    }
    if (false == isset($GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_VENDOR'])) {
      $this->markTestSkipped('Please configure __PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_VENDOR in your phpunit.xml');
    }


    //@testo:start
    $payment = PaymentFactory::create(new Api(new Curl, array(
        'username' => $GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_USERNAME'],
        'password' => $GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_PASSWORD'],
        'partner' => $GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_PARTNER'],
        'vendor' => $GLOBALS['__PAYUM_PAYPAL_PRO_CHECKOUT_NVP_API_VENDOR'],
        'sandbox' => true
    )));

    $instruction = new PaymentDetails();
    $instruction->setCurrency('USD');
    $instruction->setAmt('1.00');
    $instruction->setAcct('5105105105105100');
    $instruction->setExpDate('1214');
    $instruction->setCvv2('123');
    $instruction->setBillToFirstName('John');
    $instruction->setBillToLastName('Doe');
    $instruction->setBillToStreet('123 Main St.');
    $instruction->setBillToCity('San Jose');
    $instruction->setBillToState('CA');
    $instruction->setBillToZip('95101');
    $instruction->setBillToCountry('US');

    $captureRequest = new CaptureRequest($instruction);
    $payment->execute($captureRequest);

    $statusRequest = new BinaryMaskStatusRequest($captureRequest->getModel());
    $payment->execute($statusRequest);

    $response = $instruction->getResponse();
    // ...
    //@testo:end
    $this->assertNotEmpty($response);
    $this->assertArrayHasKey('RESULT', $response);
    $this->assertEquals(Api::RESULT_SUCCESS, $response['RESULT']);
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_NEW
                    (
                        (AST_NEW)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR)))))||||||||