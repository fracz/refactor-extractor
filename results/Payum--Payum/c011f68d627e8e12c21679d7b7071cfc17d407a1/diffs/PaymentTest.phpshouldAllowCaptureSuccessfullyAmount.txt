  public function shouldAllowCaptureSuccessfullyAmount()
  {
    if (false == isset($GLOBALS['__PAYUM_AUTHORIZE_NET_AIM_API_LOGIN_ID'])) {
      $this->markTestSkipped('Please configure __PAYUM_AUTHORIZE_NET_AIM_API_LOGIN_ID in your phpunit.xml');
    }
    if (false == isset($GLOBALS['__PAYUM_AUTHORIZE_NET_AIM_API_TRANSACTION_KEY'])) {
      $this->markTestSkipped('Please configure __PAYUM_AUTHORIZE_NET_AIM_API_TRANSACTION_KEY in your phpunit.xml');
    }

    $authorizeNet = new AuthorizeNetAIM(
      $GLOBALS['__PAYUM_AUTHORIZE_NET_AIM_API_LOGIN_ID'],
      $GLOBALS['__PAYUM_AUTHORIZE_NET_AIM_API_TRANSACTION_KEY']
    );
    $authorizeNet->setSandbox(true);

    $payment = PaymentFactory::create($authorizeNet);

    $payment->execute($captureRequest = new CaptureRequest(array(
        'amount' => 10,
        'card_num' => '4111111111111111',
        'exp_date' => date('Y') . '-' . date('n'),
        'duplicate_window' => 1, // prevents "A duplicate transaction has been submitted." error
      )));

    $statusRequest = new BinaryMaskStatusRequest($captureRequest->getModel());
    $payment->execute($statusRequest);

    $model = $statusRequest->getModel();

    $this->assertTrue($statusRequest->isSuccess(), $model['response_reason_text']);
    $this->assertNotEmpty($model['transaction_id']);
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)))
                                        (SCALAR))
                                    (AST_CALL
                                        (
                                            (SCALAR))))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR)))))||||||||