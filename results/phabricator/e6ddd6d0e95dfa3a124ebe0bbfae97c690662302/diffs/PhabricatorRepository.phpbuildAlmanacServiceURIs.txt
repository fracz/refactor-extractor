||||||||  private function buildAlmanacServiceURIs() {
    $service = $this->loadAlmanacService();
    if (!$service) {
      return null;
    }

    $bindings = $service->getActiveBindings();
    if (!$bindings) {
      throw new Exception(
        pht(
          'The Almanac service for this repository is not bound to any '.
          'interfaces.'));
    }

    $uris = array();
    foreach ($bindings as $binding) {
      $iface = $binding->getInterface();

      $uri = $this->getClusterRepositoryURIFromBinding($binding);
      $protocol = $uri->getProtocol();
      $device_name = $iface->getDevice()->getName();

      $uris[] = array(
        'protocol' => $protocol,
        'uri' => (string)$uri,
        'device' => $device_name,
      );
    }

    return $uris;
  }

  /**
   * Build a new Conduit client in order to make a service call to this
   * repository.
   *
   * If the repository is hosted locally, this method may return `null`. The
   * caller should use `ConduitCall` or other local logic to complete the
   * request.
   *
   * By default, we will return a @{class:ConduitClient} for any repository with
   * a service, even if that service is on the current device.
   *
   * We do this because this configuration does not make very much sense in a
   * production context, but is very common in a test/development context
   * (where the developer's machine is both the web host and the repository
   * service). By proxying in development, we get more consistent behavior
   * between development and production, and don't have a major untested
   * codepath.
   *
   * The `$never_proxy` parameter can be used to prevent this local proxying.
   * If the flag is passed:
   *
   *   - The method will return `null` (implying a local service call)
   *     if the repository service is hosted on the current device.
   *   - The method will throw if it would need to return a client.
   *
   * This is used to prevent loops in Conduit: the first request will proxy,
   * even in development, but the second request will be identified as a
   * cluster request and forced not to proxy.
   *
   * For lower-level service resolution, see @{method:getAlmanacServiceURI}.
   *
   * @param PhabricatorUser Viewing user.
   * @param bool `true` to throw if a client would be returned.
   * @return ConduitClient|null Client, or `null` for local repositories.
   */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CAST
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))