  public static function getEngine($ruleset = 'default') {
    static $engines = array();
    if (isset($engines[$ruleset])) {
      return $engines[$ruleset];
    }

    $engine = null;
    switch ($ruleset) {
      case 'default':
        $engine = self::newMarkupEngine(array());
        break;
      default:
        throw new Exception("Unknown engine ruleset: {$ruleset}!");
    }

    $engines[$ruleset] = $engine;
    return $engine;
  }

  /**
   * @task engine
   */
||||||||  public static function getEngine($ruleset = 'default') {
    static $engines = array();
    if (isset($engines[$ruleset])) {
      return $engines[$ruleset];
    }

    $engine = null;
    switch ($ruleset) {
      case 'default':
        $engine = self::newMarkupEngine(array());
        break;
      case 'diviner':
        $engine = self::newMarkupEngine(array());
        $engine->setConfig('preserve-linebreaks', false);
  //    $engine->setConfig('diviner.renderer', new DivinerDefaultRenderer());
        $engine->setConfig('header.generate-toc', true);
        break;
      default:
        throw new Exception("Unknown engine ruleset: {$ruleset}!");
    }

    $engines[$ruleset] = $engine;
    return $engine;
  }

  /**
   * @task engine
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_ARRAY))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_ARRAY))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_ARRAY))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))