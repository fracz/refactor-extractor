  private function renderResultMarkup(
    PhabricatorSlowvotePoll $poll,
    array $options,
    array $choices,
    array $viewer_choices,
    array $choices_by_option,
    array $handles,
    array $objects) {
    assert_instances_of($options, 'PhabricatorSlowvoteOption');
    assert_instances_of($choices, 'PhabricatorSlowvoteChoice');
    assert_instances_of($viewer_choices, 'PhabricatorSlowvoteChoice');
    assert_instances_of($handles, 'PhabricatorObjectHandle');
    assert_instances_of($objects, 'PhabricatorLiskDAO');

    $viewer_phid = $this->getRequest()->getUser()->getPHID();

    $can_see_responses = false;
    $need_vote = false;
    switch ($poll->getResponseVisibility()) {
      case PhabricatorSlowvotePoll::RESPONSES_VISIBLE:
        $can_see_responses = true;
        break;
      case PhabricatorSlowvotePoll::RESPONSES_VOTERS:
        $can_see_responses = (bool)$viewer_choices;
        $need_vote = true;
        break;
      case PhabricatorSlowvotePoll::RESPONSES_OWNER:
        $can_see_responses = ($viewer_phid == $poll->getAuthorPHID());
        break;
    }

    $result_markup = id(new AphrontFormLayoutView())
      ->appendChild(phutil_tag('h1', array(), pht('Ongoing Deliberation')));

    if (!$can_see_responses) {
      if ($need_vote) {
        $reason = pht("You must vote to see the results.");
      } else {
        $reason = pht("The results are not public.");
      }
      $result_markup
        ->appendChild(hsprintf(
          '<p class="aphront-form-instructions"><em>%s</em></p>',
          $reason));
      return $result_markup;
    }

    foreach ($options as $option) {
      $id = $option->getID();

      $chosen = idx($choices_by_option, $id, array());
      $users = array_select_keys($handles, mpull($chosen, 'getAuthorPHID'));
      if ($users) {
        $user_markup = array();
        foreach ($users as $handle) {
          $object = idx($objects, $handle->getPHID());
          if (!$object) {
            continue;
          }

          $profile_image = $handle->getImageURI();

          $user_markup[] = phutil_tag(
            'a',
            array(
              'href'  => $handle->getURI(),
              'class' => 'phabricator-slowvote-facepile',
            ),
            phutil_tag(
              'img',
              array(
                'src' => $profile_image,
              )));
        }
      } else {
        $user_markup = pht('This option has failed to appeal to anyone.');
      }

      $vote_count = $this->renderVoteCount(
        $poll,
        $choices,
        $chosen);

      $result_markup->appendChild(hsprintf(
        '<div>'.
          '<div class="phabricator-slowvote-count">%s</div>'.
          '<h1>%s</h1>'.
          '<hr class="phabricator-slowvote-hr" />'.
          '%s'.
          '<div style="clear: both;"></div>'.
          '<hr class="phabricator-slowvote-hr" />'.
        '</div>',
        $vote_count,
        $option->getName(),
        phutil_tag('div', array(), $user_markup)));
    }

    return $result_markup;
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_SWITCH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CAST
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_BREAK
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY)
                        (AST_CALL
                            (
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_ARRAY))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_VAR))
                                        (
                                            (AST_CONTINUE
                                                (NULL)))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR)))
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_ARRAY
                                                        (AST_ARRAY_ELEM
                                                            (AST_VAR)
                                                            (SCALAR))))))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (SCALAR))
                                                    (SCALAR))
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))||||||||