  private function renderVoteCount(
    PhabricatorSlowvotePoll $poll,
    array $choices,
    array $chosen) {
    assert_instances_of($choices, 'PhabricatorSlowvoteChoice');
    assert_instances_of($chosen, 'PhabricatorSlowvoteChoice');

    switch ($poll->getMethod()) {
      case PhabricatorSlowvotePoll::METHOD_PLURALITY:
        $out_of_total = count($choices);
        break;
      case PhabricatorSlowvotePoll::METHOD_APPROVAL:
        // Count unique respondents for approval votes.
        $out_of_total = count(mpull($choices, null, 'getAuthorPHID'));
        break;
      default:
        throw new Exception("Unknown poll method!");
    }

    return sprintf(
      '%d / %d (%d%%)',
      number_format(count($chosen)),
      number_format($out_of_total),
      $out_of_total
        ? round(100 * count($chosen) / $out_of_total)
        : 0);
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_SWITCH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST)
                                        (SCALAR))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (AST_VAR))))
                    (SCALAR))))))||||||||