  private function validateEditParameters(
    PhabricatorLiskDAO $object,
    array $xactions) {

    if (!$this->getContentSource()) {
      throw new Exception(
        "Call setContentSource() before applyTransactions()!");
    }

    // Do a bunch of sanity checks that the incoming transactions are fresh.
    // They should be unsaved and have only "transactionType" and "newValue"
    // set.

    $types = array_fill_keys($this->getTransactionTypes(), true);

    assert_instances_of($xactions, 'PhabricatorApplicationTransaction');
    foreach ($xactions as $xaction) {
      if ($xaction->getPHID() || $xaction->getID()) {
        throw new Exception(
          "You can not apply transactions which already have IDs/PHIDs!");
      }
      if ($xaction->getObjectPHID()) {
        throw new Exception(
          "You can not apply transactions which already have objectPHIDs!");
      }
      if ($xaction->getAuthorPHID()) {
        throw new Exception(
          "You can not apply transactions which already have authorPHIDs!");
      }
      if ($xaction->getCommentPHID()) {
        throw new Exception(
          "You can not apply transactions which already have commentPHIDs!");
      }
      if ($xaction->getCommentVersion() !== 0) {
        throw new Exception(
          "You can not apply transactions which already have commentVersions!");
      }
      if ($xaction->getOldValue() !== null) {
        throw new Exception(
          "You can not apply transactions which already have oldValue!");
      }

      $type = $xaction->getTransactionType();
      if (empty($types[$type])) {
        throw new Exception("Transaction has unknown type '{$type}'.");
      }
    }

    // The actor must have permission to view and edit the object.

    $actor = $this->requireActor();

    PhabricatorPolicyFilter::requireCapability(
      $actor,
      $xaction,
      PhabricatorPolicyCapability::CAN_VIEW);

    PhabricatorPolicyFilter::requireCapability(
      $actor,
      $xaction,
      PhabricatorPolicyCapability::CAN_EDIT);
  }

||||||||  private function validateEditParameters(
    PhabricatorLiskDAO $object,
    array $xactions) {

    if (!$this->getContentSource()) {
      throw new Exception(
        "Call setContentSource() before applyTransactions()!");
    }

    // Do a bunch of sanity checks that the incoming transactions are fresh.
    // They should be unsaved and have only "transactionType" and "newValue"
    // set.

    $types = array_fill_keys($this->getTransactionTypes(), true);

    assert_instances_of($xactions, 'PhabricatorApplicationTransaction');
    foreach ($xactions as $xaction) {
      if ($xaction->getPHID() || $xaction->getID()) {
        throw new Exception(
          "You can not apply transactions which already have IDs/PHIDs!");
      }
      if ($xaction->getObjectPHID()) {
        throw new Exception(
          "You can not apply transactions which already have objectPHIDs!");
      }
      if ($xaction->getAuthorPHID()) {
        throw new Exception(
          "You can not apply transactions which already have authorPHIDs!");
      }
      if ($xaction->getCommentPHID()) {
        throw new Exception(
          "You can not apply transactions which already have commentPHIDs!");
      }
      if ($xaction->getCommentVersion() !== 0) {
        throw new Exception(
          "You can not apply transactions which already have commentVersions!");
      }

      $custom_field_type = PhabricatorTransactions::TYPE_CUSTOMFIELD;
      if ($xaction->getTransactionType() != $custom_field_type) {
        if ($xaction->getOldValue() !== null) {
          throw new Exception(
            "You can not apply transactions which already have oldValue!");
        }
      }

      $type = $xaction->getTransactionType();
      if (empty($types[$type])) {
        throw new Exception("Transaction has unknown type '{$type}'.");
      }
    }

    // The actor must have permission to view and edit the object.

    $actor = $this->requireActor();

    PhabricatorPolicyFilter::requireCapability(
      $actor,
      $xaction,
      PhabricatorPolicyCapability::CAN_VIEW);

    PhabricatorPolicyFilter::requireCapability(
      $actor,
      $xaction,
      PhabricatorPolicyCapability::CAN_EDIT);
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR)))))