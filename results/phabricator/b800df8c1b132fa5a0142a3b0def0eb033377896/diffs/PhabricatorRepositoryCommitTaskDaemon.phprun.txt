  final public function run() {
    do {
      $iterator = new PhabricatorTimelineIterator('cmittask', array('cmit'));
      foreach ($iterator as $event) {
        $data = $event->getData();

        if (!$data) {
          // TODO: This event can't be processed, provide some way to
          // communicate that?
          continue;
        }

        $commit = id(new PhabricatorRepositoryCommit())->load($data['id']);
        if (!$commit) {
          // TODO: Same as above.
          continue;
        }

        // TODO: Cache these.
        $repository = id(new PhabricatorRepository())->load(
          $commit->getRepositoryID());
        if (!$repository) {
          // TODO: As above, although this almost certainly means the user just
          // deleted the repository and we're correct to ignore the event in
          // the timeline.
          continue;
        }

        $vcs = $repository->getVersionControlSystem();
        switch ($vcs) {
          case PhabricatorRepositoryType::REPOSITORY_TYPE_GIT:
            $class = 'PhabricatorRepositoryGitCommitMessageParserWorker';
            break;
          case PhabricatorRepositoryType::REPOSITORY_TYPE_SVN:
            $class = 'PhabricatorRepositorySvnCommitMessageParserWorker';
            break;
          case PhabricatorRepositoryType::REPOSITORY_TYPE_MERCURIAL:
            $class = 'PhabricatorRepositoryMercurialCommitMessageParserWorker';
            break;
          default:
            throw new Exception("Unknown repository type.");
        }

        $task = new PhabricatorWorkerTask();
        $task->setTaskClass($class);
        $task->setData(
          array(
            'commitID' => $commit->getID(),
          ));
        $task->save();

        $this->stillWorking();
      }
      sleep(1);
      $this->stillWorking();
    } while (true);
  }

}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_DO_WHILE
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_CALL
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CONST)))||||||||