||||||||  final protected function shouldSkipImportStep() {
    // If this step has already been performed and this is a "natural" task
    // which was queued by the normal daemons, decline to do the work again.
    // This mitigates races if commits are rapidly deleted and revived.
    $flag = $this->getImportStepFlag();
    if (!$flag) {
      // This step doesn't have an associated flag.
      return false;
    }

    $commit = $this->commit;
    if (!$commit->isPartiallyImported($flag)) {
      // This commit doesn't have the flag set yet.
      return false;
    }


    if (!$this->shouldQueueFollowupTasks()) {
      // This task was queued by administrative tools, so do the work even
      // if it duplicates existing work.
      return false;
    }

    $this->log(
      "%s\n",
      pht(
        'Skipping import step; this step was previously completed for '.
        'this commit.'));

    return true;
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_CONST)))