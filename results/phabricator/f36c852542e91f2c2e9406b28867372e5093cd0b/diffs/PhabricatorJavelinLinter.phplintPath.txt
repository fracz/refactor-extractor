  public function lintPath($path) {

    list($uses, $installs) = $this->getUsedAndInstalledSymbolsForPath($path);
    foreach ($uses as $symbol => $line) {
      $parts = explode('.', $symbol);
      foreach ($parts as $part) {
        if ($part[0] == '_' && $part[1] != '_') {
          $base = implode('.', array_slice($parts, 0, 2));
          if (!array_key_exists($base, $installs)) {
            $this->raiseLintAtLine(
              $line,
              0,
              self::LINT_PRIVATE_ACCESS,
              "This file accesses private symbol '{$symbol}' across file ".
              "boundaries. You may only access private members and methods ".
              "from the file where they are defined.");
          }
          break;
        }
      }
    }

    if ($this->getEngine()->getCommitHookMode()) {
      // Don't do the dependency checks in commit-hook mode because we won't
      // have an available working copy.
      return;
    }

    $external_classes = array();
    foreach ($uses as $symbol => $line) {
      $parts = explode('.', $symbol);
      $class = implode('.', array_slice($parts, 0, 2));
      if (!array_key_exists($class, $external_classes) &&
          !array_key_exists($class, $installs)) {
        $external_classes[$class] = $line;
      }
    }

    $celerity = CelerityResourceMap::getInstance();

    $path = preg_replace(
      '@^externals/javelin/src/@',
      'webroot/rsrc/js/javelin/',
      $path);
    $info = $celerity->lookupFileInformation(substr($path, strlen('webroot')));

    $need = $external_classes;

    $requires = $info['requires'];

    foreach ($requires as $key => $name) {
      $symbol_info = $celerity->lookupSymbolInformation($name);
      if (!$symbol_info) {
        $this->raiseLintAtLine(
          0,
          0,
          self::LINT_UNKNOWN_DEPENDENCY,
          "This file @requires component '{$name}', but it does not ".
          "exist. You may need to rebuild the Celerity map.");
        unset($requires[$key]);
        continue;
      }

      $symbol_path = 'webroot'.$symbol_info['disk'];
      list($ignored, $req_install) = $this->getUsedAndInstalledSymbolsForPath(
        $symbol_path);
      if (array_intersect_key($req_install, $external_classes)) {
        $need = array_diff_key($need, $req_install);
        unset($requires[$key]);
      }
    }

    foreach ($need as $class => $line) {
      $this->raiseLintAtLine(
        $line,
        0,
        self::LINT_MISSING_DEPENDENCY,
        "This file uses '{$class}' but does not @requires the component ".
        "which installs it. You may need to rebuild the Celerity map.");
    }

    foreach ($requires as $component) {
      $this->raiseLintAtLine(
        0,
        0,
        self::LINT_UNNECESSARY_DEPENDENCY,
        "This file @requires component '{$component}' but does not use ".
        "anything it provides.");
    }
  }

||||||||  public function lintPath($path) {

    if (!$this->haveSymbolsBinary) {
      if (!$this->haveWarnedAboutBinary) {
        $this->haveWarnedAboutBinary = true;
        // TODO: Write build documentation for the Javelin binaries and point
        // the user at it.
        $this->raiseLintAtLine(
          0,
          0,
          self::LINT_MISSING_BINARY,
          "The 'javelinsymbols' binary in the Javelin project has not been ".
          "built, so the Javelin linter can't run. This isn't a big concern, ".
          "but means some Javelin problems can't be automatically detected.");
      }
      return;
    }

    list($uses, $installs) = $this->getUsedAndInstalledSymbolsForPath($path);
    foreach ($uses as $symbol => $line) {
      $parts = explode('.', $symbol);
      foreach ($parts as $part) {
        if ($part[0] == '_' && $part[1] != '_') {
          $base = implode('.', array_slice($parts, 0, 2));
          if (!array_key_exists($base, $installs)) {
            $this->raiseLintAtLine(
              $line,
              0,
              self::LINT_PRIVATE_ACCESS,
              "This file accesses private symbol '{$symbol}' across file ".
              "boundaries. You may only access private members and methods ".
              "from the file where they are defined.");
          }
          break;
        }
      }
    }

    if ($this->getEngine()->getCommitHookMode()) {
      // Don't do the dependency checks in commit-hook mode because we won't
      // have an available working copy.
      return;
    }

    $external_classes = array();
    foreach ($uses as $symbol => $line) {
      $parts = explode('.', $symbol);
      $class = implode('.', array_slice($parts, 0, 2));
      if (!array_key_exists($class, $external_classes) &&
          !array_key_exists($class, $installs)) {
        $external_classes[$class] = $line;
      }
    }

    $celerity = CelerityResourceMap::getInstance();

    $path = preg_replace(
      '@^externals/javelin/src/@',
      'webroot/rsrc/js/javelin/',
      $path);
    $info = $celerity->lookupFileInformation(substr($path, strlen('webroot')));

    $need = $external_classes;

    $requires = $info['requires'];

    foreach ($requires as $key => $name) {
      $symbol_info = $celerity->lookupSymbolInformation($name);
      if (!$symbol_info) {
        $this->raiseLintAtLine(
          0,
          0,
          self::LINT_UNKNOWN_DEPENDENCY,
          "This file @requires component '{$name}', but it does not ".
          "exist. You may need to rebuild the Celerity map.");
        unset($requires[$key]);
        continue;
      }

      $symbol_path = 'webroot'.$symbol_info['disk'];
      list($ignored, $req_install) = $this->getUsedAndInstalledSymbolsForPath(
        $symbol_path);
      if (array_intersect_key($req_install, $external_classes)) {
        $need = array_diff_key($need, $req_install);
        unset($requires[$key]);
      }
    }

    foreach ($need as $class => $line) {
      $this->raiseLintAtLine(
        $line,
        0,
        self::LINT_MISSING_DEPENDENCY,
        "This file uses '{$class}' but does not @requires the component ".
        "which installs it. You may need to rebuild the Celerity map.");
    }

    foreach ($requires as $component) {
      $this->raiseLintAtLine(
        0,
        0,
        self::LINT_UNNECESSARY_DEPENDENCY,
        "This file @requires component '{$component}' but does not use ".
        "anything it provides.");
    }
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (SCALAR))))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_CLASS_CONST
                                                        (SCALAR))
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_ENCAPS_LIST
                                                                (SCALAR)
                                                                (AST_VAR)
                                                                (SCALAR))
                                                            (SCALAR))
                                                        (SCALAR)))))))
                                (AST_BREAK
                                    (NULL)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))))
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR)))))))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (SCALAR))))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_CLASS_CONST
                                                        (SCALAR))
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_ENCAPS_LIST
                                                                (SCALAR)
                                                                (AST_VAR)
                                                                (SCALAR))
                                                            (SCALAR))
                                                        (SCALAR)))))))
                                (AST_BREAK
                                    (NULL)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))))
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))))))