||||||||  private function verifyRemotePermissions($viewer, $revision, $repository) {
    $github_user = $this->account->getUsername();
    $github_repo = $this->findGitHubRepo($repository);

    $uri = urisprintf(
      'https://api.github.com/repos/%s/collaborators/%s',
      $github_repo,
      $github_user);

    $uri = new PhutilURI($uri);
    $uri->setQueryParam('access_token', $this->getAccessToken());
    list($status, $body, $headers) = id(new HTTPSFuture($uri))->resolve();

    // Likely status codes:
    // 204 No Content: Has permissions. Token might be too weak.
    // 404 Not Found: Not a collaborator.
    // 401 Unauthorized: Token is bad/revoked.

    $no_permission = ($status->getStatusCode() == 404);

    if ($no_permission) {
      throw new Exception(
        "You don't have permission to push to this repository. \n".
        "Push permissions for this repository are managed on GitHub.");
    }

    $scopes = BaseHTTPFuture::getHeader($headers, 'X-OAuth-Scopes');
    if (strpos($scopes, 'public_repo') === false) {
      $provider_key = $this->provider->getProviderKey();
      $refresh_token_uri = new PhutilURI("/auth/refresh/{$provider_key}/");
      $refresh_token_uri->setQueryParam('scope', 'public_repo');

      return id(new AphrontDialogView())
        ->setUser($viewer)
        ->setTitle(pht('Stronger token needed'))
        ->appendChild(pht(
            'In order to complete this action, you need a '.
            'stronger GitHub token.'))
        ->setSubmitURI($refresh_token_uri)
        ->addCancelButton('/D'.$revision->getId())
        ->addSubmitButton(pht('Refresh Account Link'));
    }
  }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_CALL
                                                (
                                                    (AST_NEW)))
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)))))
                                    (
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (SCALAR))))))
                                (
                                    (AST_VAR)))
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (
                            (AST_CALL
                                (
                                    (SCALAR))))))))))