  public function buildSavedQueryFromRequest(AphrontRequest $request) {
    $saved = new PhabricatorSavedQuery();

    $revisions = $this->readPHIDsFromRequest(
      $request,
      'revisions',
      array(
        DifferentialPHIDTypeRevision::TYPECONST,
      ));

    $repositories = $this->readPHIDsFromRequest(
      $request,
      'repositories',
      array(
        PhabricatorRepositoryPHIDTypeRepository::TYPECONST,
      ));

    $container_phids = array_merge($revisions, $repositories);
    $saved->setParameter('containerPHIDs', $container_phids);

    $commits = $this->readPHIDsFromRequest(
      $request,
      'commits',
      array(
        PhabricatorRepositoryPHIDTypeCommit::TYPECONST,
      ));

    $diffs = $this->readListFromRequest($request, 'diffs');
    if ($diffs) {
      $diffs = id(new DifferentialDiffQuery())
        ->setViewer($this->requireViewer())
        ->withIDs($diffs)
        ->execute();
      $diffs = mpull($diffs, 'getPHID', 'getPHID');
    }

    $buildable_phids = array_merge($commits, $diffs);
    $saved->setParameter('buildablePHIDs', $buildable_phids);


    return $saved;
  }

||||||||  public function buildSavedQueryFromRequest(AphrontRequest $request) {
    $saved = new PhabricatorSavedQuery();

    $revisions = $this->readPHIDsFromRequest(
      $request,
      'revisions',
      array(
        DifferentialPHIDTypeRevision::TYPECONST,
      ));

    $repositories = $this->readPHIDsFromRequest(
      $request,
      'repositories',
      array(
        PhabricatorRepositoryPHIDTypeRepository::TYPECONST,
      ));

    $container_phids = array_merge($revisions, $repositories);
    $saved->setParameter('containerPHIDs', $container_phids);

    $commits = $this->readPHIDsFromRequest(
      $request,
      'commits',
      array(
        PhabricatorRepositoryPHIDTypeCommit::TYPECONST,
      ));

    $diffs = $this->readListFromRequest($request, 'diffs');
    if ($diffs) {
      $diffs = id(new DifferentialDiffQuery())
        ->setViewer($this->requireViewer())
        ->withIDs($diffs)
        ->execute();
      $diffs = mpull($diffs, 'getPHID', 'getPHID');
    }

    $buildable_phids = array_merge($commits, $diffs);
    $saved->setParameter('buildablePHIDs', $buildable_phids);

    $saved->setParameter(
      'manual',
      $this->readBoolFromRequest($request, 'manual'));

    return $saved;
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))