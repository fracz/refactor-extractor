||||||||  public function loadLastModifiedCommitID($commit_id, $path_id, $time = 0.5) {
    $commit_id = (int)$commit_id;
    $path_id = (int)$path_id;

    $bucket_data = null;
    $data_key = null;
    $seen = array();

    $t_start = microtime(true);
    $iterations = 0;
    while (true) {
      $bucket_key = $this->getBucketKey($commit_id);

      if (($data_key != $bucket_key) || $bucket_data === null) {
        $bucket_data = $this->getBucketData($bucket_key);
        $data_key = $bucket_key;
      }

      if (empty($bucket_data[$commit_id])) {
        // Rebuild the cache bucket, since the commit might be a very recent
        // one that we'll pick up by rebuilding.

        $bucket_data = $this->getBucketData($bucket_key, $bucket_data);
        if (empty($bucket_data[$commit_id])) {
          // A rebuild didn't help. This can occur legitimately if the commit
          // is new and hasn't parsed yet.
          return false;
        }

        // Otherwise, the rebuild gave us the data, so we can keep going.
      }

      // Sanity check so we can survive and recover from bad data.
      if (isset($seen[$commit_id])) {
        phlog(pht('Unexpected infinite loop in RepositoryGraphCache!'));
        return false;
      } else {
        $seen[$commit_id] = true;
      }

      // `$data` is a list: the commit's parent IDs, followed by `null`,
      // followed by the modified paths in ascending order. We figure out the
      // first parent first, then check if the path was touched. If the path
      // was touched, this is the commit we're after. If not, walk backward
      // in the tree.

      $items = $bucket_data[$commit_id];
      $size = count($items);

      // Walk past the parent information.
      $parent_id = null;
      for ($ii = 0;            ; ++$ii) {
        if ($items[$ii] === null) {
          break;
        }
        if ($parent_id === null) {
          $parent_id = $items[$ii];
        }
      }

      // Look for a modification to the path.
      for (; $ii < $size; ++$ii) {
        $item = $items[$ii];
        if ($item > $path_id) {
          break;
        }
        if ($item === $path_id) {
          return $commit_id;
        }
      }

      if ($parent_id) {
        $commit_id = $parent_id;

        // Periodically check if we've spent too long looking for a result
        // in the cache, and return so we can fall back to a VCS operation. This
        // keeps us from having a degenerate worst case if, e.g., the cache
        // is cold and we need to inspect a very large number of blocks
        // to satisfy the query.

        if (((++$iterations) % 64) === 0) {
          $t_end = microtime(true);
          if (($t_end - $t_start) > $time) {
            return false;
          }
        }
        continue;
      }

      // If we have an explicit 0, that means this commit really has no parents.
      // Usually, it is the first commit in the repository.
      if ($parent_id === 0) {
        return null;
      }

      // If we didn't find a parent, the parent data isn't available. We fail
      // to find an answer in the cache and fall back to querying the VCS.
      return false;
    }
  }


/* -(  Cache Internals  )---------------------------------------------------- */


  /**
   * Get the bucket key for a given commit ID.
   *
   * @param   int   Commit ID.
   * @return  int   Bucket key.
   * @task cache
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_CONST)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_EMPTY
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))
                                (
                                    (AST_RETURN
                                        (AST_CONST))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))))
                        (AST_RETURN
                            (AST_CONST))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_FOR
                (AST_EXPR_LIST
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR)))
                (NULL)
                (AST_EXPR_LIST
                    (AST_PRE_INC
                        (AST_VAR)))
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_CONST))
                            (
                                (AST_BREAK
                                    (NULL)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))))))))
            (AST_FOR
                (NULL)
                (AST_EXPR_LIST
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_EXPR_LIST
                    (AST_PRE_INC
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (
                                (AST_BREAK
                                    (NULL)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_PRE_INC
                                            (AST_VAR))
                                        (SCALAR))
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_CONST))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_VAR))
                                                (AST_VAR))
                                            (
                                                (AST_RETURN
                                                    (AST_CONST))))))))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_RETURN
                (AST_CONST)))))