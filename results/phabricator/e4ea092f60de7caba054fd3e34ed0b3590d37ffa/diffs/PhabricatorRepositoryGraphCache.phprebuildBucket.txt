||||||||  private function rebuildBucket($bucket_key, array $current_data) {
    $bucket_min = ($bucket_key * $this->getBucketSize());
    $bucket_max = ($bucket_min + $this->getBucketSize()) - 1;

    // We need to reload all of the commits in the bucket because there is
    // no guarantee that they'll get parsed in order, so we can fill large
    // commit IDs before small ones. Later on, we'll ignore the commits we
    // already know about.

    $table_commit = new PhabricatorRepositoryCommit();
    $table_repository = new PhabricatorRepository();
    $conn_r = $table_commit->establishConnection('r');

    // Find all the Git and Mercurial commits in the block which have completed
    // change import. We can't fill the cache accurately for commits which have
    // not completed change import, so just pretend we don't know about them.
    // In these cases, we will will ultimately fall back to VCS queries.

    $commit_rows = queryfx_all(
      $conn_r,
      'SELECT c.id FROM %T c
        JOIN %T r ON c.repositoryID = r.id AND r.versionControlSystem IN (%Ls)
        WHERE c.id BETWEEN %d AND %d
          AND (c.importStatus & %d) = %d',
      $table_commit->getTableName(),
      $table_repository->getTableName(),
      array(
        PhabricatorRepositoryType::REPOSITORY_TYPE_GIT,
        PhabricatorRepositoryType::REPOSITORY_TYPE_MERCURIAL,
      ),
      $bucket_min,
      $bucket_max,
      PhabricatorRepositoryCommit::IMPORTED_CHANGE,
      PhabricatorRepositoryCommit::IMPORTED_CHANGE);

    // If we don't have any data, just return the existing data.
    if (!$commit_rows) {
      return $current_data;
    }

    // Remove the commits we already have data for. We don't need to rebuild
    // these. If there's nothing left, return the existing data.

    $commit_ids = ipull($commit_rows, 'id', 'id');
    $commit_ids = array_diff_key($commit_ids, $current_data);

    if (!$commit_ids) {
      return $current_data;
    }

    // Find all the path changes for the new commits.
    $path_changes = queryfx_all(
      $conn_r,
      'SELECT commitID, pathID FROM %T
        WHERE commitID IN (%Ld)
        AND (isDirect = 1 OR changeType = %d)',
      PhabricatorRepository::TABLE_PATHCHANGE,
      $commit_ids,
      DifferentialChangeType::TYPE_CHILD);
    $path_changes = igroup($path_changes, 'commitID');

    // Find all the parents for the new commits.
    $parents = queryfx_all(
      $conn_r,
      'SELECT childCommitID, parentCommitID FROM %T
        WHERE childCommitID IN (%Ld)
        ORDER BY id ASC',
      PhabricatorRepository::TABLE_PARENTS,
      $commit_ids);
    $parents = igroup($parents, 'childCommitID');

    // Build the actual data for the cache.
    foreach ($commit_ids as $commit_id) {
      $parent_ids = array();
      if (isset($parents[$commit_id])) {
        foreach ($parents[$commit_id] as $row) {
          $parent_ids[] = (int)$row['parentCommitID'];
        }
      }

      if (isset($path_changes[$commit_id])) {
        $path_ids = $path_changes[$commit_id];
        foreach ($path_ids as $key => $path_id) {
          $path_ids[$key] = (int)$path_id['pathID'];
        }
        sort($path_ids);
      } else {
        $path_ids = array();
      }

      $value = $parent_ids;
      $value[] = null;
      foreach ($path_ids as $path_id) {
        $value[] = $path_id;
      }

      $current_data[$commit_id] = $value;
    }

    return $current_data;
  }

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL)))
                (AST_VAR)
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_FOREACH
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_CAST
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CAST
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))))))
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CONST))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))