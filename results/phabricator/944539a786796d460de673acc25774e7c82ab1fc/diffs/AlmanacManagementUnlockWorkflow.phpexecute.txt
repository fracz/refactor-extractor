  public function execute(PhutilArgumentParser $args) {
    $console = PhutilConsole::getConsole();

    $services = $this->loadServices($args->getArg('services'));
    if (!$services) {
      throw new PhutilArgumentUsageException(
        pht('Specify at least one service to unlock.'));
    }

    foreach ($services as $service) {
      if (!$service->getIsLocked()) {
        throw new PhutilArgumentUsageException(
          pht(
            'Service "%s" is not locked!',
            $service->getName()));
      }
    }

    foreach ($services as $service) {
      $this->updateServiceLock($service, false);

      $console->writeOut(
        "**<bg:green> %s </bg>** %s\n",
        pht('UNLOCKED'),
        pht('Service "%s" was unlocked.', $service->getName()));
    }

    return 0;
  }

}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_RETURN
        (SCALAR)))||||||||