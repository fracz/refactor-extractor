  public static function waitForLeases(array $leases) {
    assert_instances_of($leases, 'DrydockLease');

    $task_ids = array_filter(mpull($leases, 'getTaskID'));
    PhabricatorWorker::waitForTasks($task_ids);

    $unresolved = $leases;
    while (true) {
      foreach ($unresolved as $key => $lease) {
        $lease->reload();
        switch ($lease->getStatus()) {
          case DrydockLeaseStatus::STATUS_ACTIVE:
            unset($unresolved[$key]);
            break;
          case DrydockLeaseStatus::STATUS_RELEASED:
          case DrydockLeaseStatus::STATUS_EXPIRED:
          case DrydockLeaseStatus::STATUS_BROKEN:
            throw new Exception("Lease will never become active!");
          case DrydockLeaseStatus::STATUS_PENDING:
            break;
        }
      }

      if ($unresolved) {
        sleep(1);
      } else {
        break;
      }
    }

    foreach ($leases as $lease) {
      $lease->attachResource($lease->loadResource());
    }
  }

||||||||  public static function waitForLeases(array $leases) {
    assert_instances_of($leases, 'DrydockLease');

    $task_ids = array_filter(mpull($leases, 'getTaskID'));

    PhabricatorWorker::waitForTasks($task_ids);

    $unresolved = $leases;
    while (true) {
      foreach ($unresolved as $key => $lease) {
        $lease->reload();
        switch ($lease->getStatus()) {
          case DrydockLeaseStatus::STATUS_ACTIVE:
            unset($unresolved[$key]);
            break;
          case DrydockLeaseStatus::STATUS_RELEASED:
            throw new Exception("Lease has already been released!");
          case DrydockLeaseStatus::STATUS_EXPIRED:
            throw new Exception("Lease has already expired!");
          case DrydockLeaseStatus::STATUS_BROKEN:
            throw new Exception("Lease has been broken!");
          case DrydockLeaseStatus::STATUS_PENDING:
            break;
        }
      }

      if ($unresolved) {
        sleep(1);
      } else {
        break;
      }
    }

    foreach ($leases as $lease) {
      $lease->attachResource($lease->loadResource());
    }
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_WHILE
        (AST_CONST)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_SWITCH
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_UNSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_BREAK
                                        (NULL))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_BREAK
                            (NULL)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_WHILE
        (AST_CONST)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_SWITCH
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_UNSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))
                            (AST_SWITCH_CASE
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (
                                    (AST_BREAK
                                        (NULL))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_BREAK
                            (NULL)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)))))))