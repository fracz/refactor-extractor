  final public static function waitForTasks(array $task_ids) {
    $task_table = new PhabricatorWorkerActiveTask();

    $waiting = array_combine($task_ids, $task_ids);
    while ($waiting) {
      $conn_w = $task_table->establishConnection('w');

      // Check if any of the tasks we're waiting on are still queued. If they
      // are not, we're done waiting.
      $row = queryfx_one(
        $conn_w,
        'SELECT COUNT(*) N FROM %T WHERE id IN (%Ld)',
        $task_table->getTableName(),
        $waiting);
      if (!$row['N']) {
        // Nothing is queued anymore. Stop waiting.
        break;
      }

      $tasks = id(new PhabricatorWorkerLeaseQuery())
        ->withIDs($waiting)
        ->setLimit(1)
        ->execute();

      if (!$tasks) {
        // We were not successful in leasing anything. Sleep for a bit and
        // see if we have better luck later.
        sleep(1);
        continue;
      }

      $task = head($tasks)->executeTask();
    }
  }

}||||||||  final public static function waitForTasks(array $task_ids) {
    $task_table = new PhabricatorWorkerActiveTask();

    $waiting = array_combine($task_ids, $task_ids);
    while ($waiting) {
      $conn_w = $task_table->establishConnection('w');

      // Check if any of the tasks we're waiting on are still queued. If they
      // are not, we're done waiting.
      $row = queryfx_one(
        $conn_w,
        'SELECT COUNT(*) N FROM %T WHERE id IN (%Ld)',
        $task_table->getTableName(),
        $waiting);
      if (!$row['N']) {
        // Nothing is queued anymore. Stop waiting.
        break;
      }

      $tasks = id(new PhabricatorWorkerLeaseQuery())
        ->withIDs($waiting)
        ->setLimit(1)
        ->execute();

      if (!$tasks) {
        // We were not successful in leasing anything. Sleep for a bit and
        // see if we have better luck later.
        sleep(1);
        continue;
      }

      $task = head($tasks)->executeTask();

      $ex = $task->getExecutionException();
      if ($ex) {
        throw $ex;
      }
    }

    $tasks = id(new PhabricatorWorkerArchiveTask())->loadAllWhere(
      'id IN (%Ld)',
      $task_ids);

    foreach ($tasks as $task) {
      if ($task->getResult() != PhabricatorWorkerArchiveTask::RESULT_SUCCESS) {
        throw new Exception("Task ".$task->getID()." failed!");
      }
    }
  }

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_WHILE
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_BREAK
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_WHILE
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_BREAK
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_THROW
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW)))
            (
                (SCALAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (SCALAR)))))))))))