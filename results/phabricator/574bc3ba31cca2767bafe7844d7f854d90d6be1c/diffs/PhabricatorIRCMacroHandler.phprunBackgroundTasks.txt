  public function runBackgroundTasks() {
    if (microtime(true) < $this->next) {
      return;
    }

    foreach ($this->buffer as $channel => $lines) {
      if (empty($lines)) {
        unset($this->buffer[$channel]);
        continue;
      }
      foreach ($lines as $key => $line) {
        $this->write('PRIVMSG', "{$channel} :{$line}");
        unset($this->buffer[$channel][$key]);
        break 2;
      }
    }

    $sleep = $this->getConfig('macro.sleep', 0.25);
    $this->next = microtime(true) + ((mt_rand(75, 150) / 100) * $sleep);
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CONST)))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_VAR))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR))))
                    (AST_UNSET
                        (AST_DIM
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_VAR)))
                    (AST_BREAK
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_CONST)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_VAR)))))||||||||