  public function getPublicRemoteURI() {
    $uri = new PhutilURI($this->getRemoteURI());

    // Make sure we don't leak anything if this repo is using HTTP Basic Auth
    // with the credentials in the URI or something zany like that.
    $uri->setUser(null);
    $uri->setPass(null);

    return $uri;
  }

||||||||  public function getPublicRemoteURI() {
    $uri = $this->getURIObject();

    // Make sure we don't leak anything if this repo is using HTTP Basic Auth
    // with the credentials in the URI or something zany like that.

    if ($uri instanceof PhutilGitURI) {
      $uri->setUser(null);
    } else {
      $uri->setUser(null);
      $uri->setPass(null);
    }

    return (string)$uri;
  }


  /**
   * Get the protocol for the repository's remote.
   *
   * @return string Protocol, like "ssh" or "git".
   * @task uri
   */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_RETURN
        (AST_CAST
            (AST_VAR))))