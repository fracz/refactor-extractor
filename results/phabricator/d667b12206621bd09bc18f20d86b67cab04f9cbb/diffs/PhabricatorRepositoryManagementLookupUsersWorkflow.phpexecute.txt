||||||||  public function execute(PhutilArgumentParser $args) {
    $commits = $this->loadCommits($args, 'commits');
    if (!$commits) {
      throw new PhutilArgumentUsageException(
        "Specify one or more commits to resolve users for.");
    }

    $console = PhutilConsole::getConsole();
    foreach ($commits as $commit) {
      $repo = $commit->getRepository();
      $name =  $repo->formatCommitName($commit->getCommitIdentifier());

      $console->writeOut(
        "%s\n",
        pht("Examining commit %s...", $name));

      $ref = id(new DiffusionLowLevelCommitQuery())
        ->setRepository($repo)
        ->withIdentifier($commit->getCommitIdentifier())
        ->execute();

      $author = $ref->getAuthor();
      $console->writeOut(
        "%s\n",
        pht('Raw author string: %s', coalesce($author, 'null')));

      if ($author !== null) {
        $handle = $this->resolveUser($commit, $author);
        if ($handle) {
          $console->writeOut(
            "%s\n",
            pht('Phabricator user: %s', $handle->getFullName()));
        } else {
          $console->writeOut(
            "%s\n",
            pht('Unable to resolve a corresponding Phabricator user.'));
        }
      }

      $committer = $ref->getCommitter();
      $console->writeOut(
        "%s\n",
        pht('Raw committer string: %s', coalesce($committer, 'null')));

      if ($committer !== null) {
        $handle = $this->resolveUser($commit, $committer);
        if ($handle) {
          $console->writeOut(
            "%s\n",
            pht('Phabricator user: %s', $handle->getFullName()));
        } else {
          $console->writeOut(
            "%s\n",
            pht('Unable to resolve a corresponding Phabricator user.'));
        }
      }
    }

    return 0;
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_VAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (SCALAR)))))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (SCALAR)))))))))))))
    (AST_RETURN
        (SCALAR)))