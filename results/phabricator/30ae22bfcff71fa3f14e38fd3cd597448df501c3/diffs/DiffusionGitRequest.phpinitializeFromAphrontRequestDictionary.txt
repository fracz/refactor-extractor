  protected function initializeFromAphrontRequestDictionary(array $data) {
    parent::initializeFromAphrontRequestDictionary($data);

    $path = $this->path;
    $parts = explode('/', $path);

    $branch = array_shift($parts);
    if ($branch != ':') {
      $this->branch = $this->decodeBranchName($branch);
    }

    foreach ($parts as $key => $part) {
      // Prevent any hyjinx since we're ultimately shipping this to the
      // filesystem under a lot of git workflows.
      if ($part == '..') {
        unset($parts[$key]);
      }
    }

    $this->path = implode('/', $parts);

    if ($this->repository) {
      $repository = $this->repository;

      // TODO: This is not terribly efficient and does not produce terribly
      // good error messages, but it seems better to put error handling code
      // here than to try to do it in every query.

      $branch = $this->getBranch();

      // TODO: Here, particularly, we should give the user a specific error
      // message to indicate whether they've typed in some bogus branch and/or
      // followed a bad link, or misconfigured the default branch in the
      // Repository tool.
      list($this->stableCommitName) = $repository->execxLocalCommand(
        'rev-parse --verify %s/%s',
        DiffusionBranchInformation::DEFAULT_GIT_REMOTE,
        $branch);

      if ($this->commit) {
        list($commit) = $repository->execxLocalCommand(
          'rev-parse --verify %s',
          $this->commit);

        // Beyond verifying them, expand commit short forms to full 40-character
        // hashes.
        $this->commit = trim($commit);

        // If we have a commit, overwrite the branch commit with the more
        // specific commit.
        $this->stableCommitName = $this->commit;

/*

  TODO: Unclear if this is actually a good idea or not; it breaks commit views
  at the very least.

        list($contains) = $repository->execxLocalCommand(
          'branch --contains %s',
          $this->commit);
        $contains = array_filter(explode("\n", $contains));
        $found = false;
        foreach ($contains as $containing_branch) {
          $containing_branch = trim($containing_branch, "* \n");
          if ($containing_branch == $branch) {
            $found = true;
            break;
          }
        }
        if (!$found) {
          throw new Exception(
            "Commit does not exist on this branch!");
        }
*/

      }
    }


  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))))))))||||||||