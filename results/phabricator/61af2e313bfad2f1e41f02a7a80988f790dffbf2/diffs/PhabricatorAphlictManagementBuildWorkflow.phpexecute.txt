  public function execute(PhutilArgumentParser $args) {
    $console = PhutilConsole::getConsole();
    $root = dirname(__FILE__).'/../../../..';

    if (!Filesystem::binaryExists('mxmlc')) {
      $console->writeErr('`mxmlc` is not installed.');
      return 1;
    }

    $argv = array(
      "-source-path=$root/externals/vegas/src",
      '-static-link-runtime-shared-libraries=true',
      '-warnings=true',
      '-strict=true',
    );

    if ($args->getArg('debug')) {
      $argv[] = '-debug=true';
    }

    list ($err, $stdout, $stderr) = exec_manual('mxmlc %Ls -output=%s %s',
      $argv,
      $root.'/webroot/rsrc/swf/aphlict.swf',
      $root.'/support/aphlict/client/src/AphlictClient.as');

    if ($err) {
      $console->writeErr($stderr);
      return 1;
    }

    $console->writeOut("Done.\n");
    return 0;
  }

}||||||||  public function execute(PhutilArgumentParser $args) {
    $console = PhutilConsole::getConsole();
    $root = dirname(__FILE__).'/../../../..';

    if (!Filesystem::binaryExists('mxmlc')) {
      throw new PhutilArgumentUsageException(
        pht(
          "The `mxmlc` binary was not found in PATH. This compiler binary ".
          "is required to rebuild the Aphlict client.\n\n".
          "Adjust your PATH, or install the Flex SDK from:\n\n".
          "    http://flex.apache.org\n\n".
          "You may also be able to install it with `npm`:\n\n".
          "    $ npm install flex-sdk\n\n".
          "(Note: you should only need to rebuild Aphlict if you are ".
          "developing Phabricator.)"));
    }

    $argv = array(
      "-source-path=$root/externals/vegas/src",
      '-static-link-runtime-shared-libraries=true',
      '-warnings=true',
      '-strict=true',
    );

    if ($args->getArg('debug')) {
      $argv[] = '-debug=true';
    }

    list ($err, $stdout, $stderr) = exec_manual('mxmlc %Ls -output=%s %s',
      $argv,
      $root.'/webroot/rsrc/swf/aphlict.swf',
      $root.'/support/aphlict/client/src/AphlictClient.as');

    if ($err) {
      $console->writeErr($stderr);
      return 1;
    }

    $console->writeOut("Done.\n");
    return 0;
  }

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_MAGIC_CONST)))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_RETURN
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_MAGIC_CONST)))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (SCALAR)
                                                                (SCALAR))
                                                            (SCALAR))
                                                        (SCALAR))
                                                    (SCALAR))
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_RETURN
        (SCALAR)))