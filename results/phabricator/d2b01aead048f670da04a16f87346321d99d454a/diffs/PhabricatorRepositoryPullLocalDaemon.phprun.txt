  public function run() {

    // Each repository has an individual pull frequency; after we pull it,
    // wait that long to pull it again. When we start up, try to pull everything
    // serially.
    $retry_after = array();

    while (true) {
      $repositories = $this->loadRepositories();

      // Shuffle the repositories, then re-key the array since shuffle()
      // discards keys. This is mostly for startup, we'll use soft priorities
      // later.
      shuffle($repositories);
      $repositories = mpull($repositories, null, 'getID');

      // If any repositories were deleted, remove them from the retry timer map
      // so we don't end up with a retry timer that never gets updated and
      // causes us to sleep for the minimum amount of time.
      $retry_after = array_select_keys(
        $retry_after,
        array_keys($repositories));

      // Assign soft priorities to repositories based on how frequently they
      // should pull again.
      asort($retry_after);
      $repositories = array_select_keys(
        $repositories,
        array_keys($retry_after)) + $repositories;

      foreach ($repositories as $id => $repository) {
        $after = idx($retry_after, $id, 0);
        if ($after >= time()) {
          continue;
        }

        try {
          self::pullRepository($repository);
          $sleep_for = $repository->getDetail('pull-frequency', 15);
          $retry_after[$id] = time() + $sleep_for;
        } catch (Exception $ex) {
          $retry_after[$id] = time() + 15;
          phlog($ex);
        }
      }

      $sleep_until = max(min($retry_after), time() + 15);
      sleep($sleep_until - time());
    }
  }


  /**
   * @task pull
   */
||||||||  public function run() {
    $argv = $this->getArgv();
    array_unshift($argv, __CLASS__);
    $args = new PhutilArgumentParser($argv);
    $args->parse(
      array(
        array(
          'name'      => 'no-discovery',
          'help'      => 'Pull only, without discovering commits.',
        ),
        array(
          'name'      => 'not',
          'param'     => 'repository',
          'repeat'    => true,
          'help'      => 'Do not pull __repository__.',
        ),
        array(
          'name'      => 'repositories',
          'wildcard'  => true,
          'help'      => 'Pull specific __repositories__ instead of all.',
        ),
      ));

    $no_discovery   = $args->getArg('no-discovery');
    $repo_names     = $args->getArg('repositories', array());
    $exclude_names  = $args->getArg('not', array());

    // Each repository has an individual pull frequency; after we pull it,
    // wait that long to pull it again. When we start up, try to pull everything
    // serially.
    $retry_after = array();

    $min_sleep = 15;

    while (true) {
      $repositories = $this->loadRepositories($repo_names);
      if ($exclude_names) {
        $exclude = $this->loadRepositories($exclude_names);
        $repositories = array_diff_key($repositories, $exclude);
      }

      // Shuffle the repositories, then re-key the array since shuffle()
      // discards keys. This is mostly for startup, we'll use soft priorities
      // later.
      shuffle($repositories);
      $repositories = mpull($repositories, null, 'getID');

      // If any repositories were deleted, remove them from the retry timer map
      // so we don't end up with a retry timer that never gets updated and
      // causes us to sleep for the minimum amount of time.
      $retry_after = array_select_keys(
        $retry_after,
        array_keys($repositories));

      // Assign soft priorities to repositories based on how frequently they
      // should pull again.
      asort($retry_after);
      $repositories = array_select_keys(
        $repositories,
        array_keys($retry_after)) + $repositories;

      foreach ($repositories as $id => $repository) {
        $after = idx($retry_after, $id, 0);
        if ($after > time()) {
          continue;
        }

        $tracked = $repository->isTracked();
        if (!$tracked) {
          continue;
        }

        try {
          self::pullRepository($repository);

          if (!$no_discovery) {
            // TODO: It would be nice to discover only if we pulled something,
            // but this isn't totally trivial.
            self::discoverRepository($repository);
          }

          $sleep_for = $repository->getDetail('pull-frequency', $min_sleep);
          $retry_after[$id] = time() + $sleep_for;
        } catch (Exception $ex) {
          $retry_after[$id] = time() + $min_sleep;
          phlog($ex);
        }

        $this->stillWorking();
      }

      if ($retry_after) {
        $sleep_until = max(min($retry_after), time() + $min_sleep);
      } else {
        $sleep_until = time() + $min_sleep;
      }

      $this->sleep($sleep_until - time());
    }
  }


  /**
   * @task pull
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_WHILE
        (AST_CONST)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (AST_VAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (SCALAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CALL))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_TRY
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_CALL)
                                    (AST_VAR))))
                        (AST_CATCH_LIST
                            (AST_CATCH
                                (AST_NAME_LIST)
                                (AST_VAR)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_BINARY_OP
                                            (AST_CALL)
                                            (SCALAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_CALL)
                            (SCALAR)))))
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_CONST)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (AST_VAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (SCALAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CALL))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_TRY
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_VAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_CALL)
                                    (AST_VAR))))
                        (AST_CATCH_LIST
                            (AST_CATCH
                                (AST_NAME_LIST)
                                (AST_VAR)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_BINARY_OP
                                            (AST_CALL)
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))
                        (NULL))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_BINARY_OP
                                        (AST_CALL)
                                        (AST_VAR)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL)
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL)))))))