||||||||  public static function executeGitVerifySameOrigin($remote, $expect, $where) {
    $remote_uri = PhabricatorRepository::newPhutilURIFromGitURI($remote);
    $expect_uri = PhabricatorRepository::newPhutilURIFromGitURI($expect);

    $remote_path = $remote_uri->getPath();
    $expect_path = $expect_uri->getPath();

    $remote_match = self::executeGitNormalizePath($remote_path);
    $expect_match = self::executeGitNormalizePath($expect_path);

    if ($remote_match != $expect_match) {
      throw new Exception(
        "Working copy at '{$where}' has a mismatched origin URL. It has ".
        "origin URL '{$remote}' (with remote path '{$remote_path}'), but the ".
        "configured URL '{$expect}' (with remote path '{$expect_path}') is ".
        "expected. Refusing to proceed because this may indicate that the ".
        "working copy is actually some other repository.");
    }
  }


  /**
   * @task git
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR)))
                                    (SCALAR))
                                (SCALAR)))))))))