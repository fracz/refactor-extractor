    public function storeUpload($name, $filename=null)
    {
        if (!$name || !is_string($name) ||
            !$_FILES || !$_FILES[ $name ]) {
            return false;
        }

        $tmp = $_FILES[ $name ]["tmp_name"];
        if ($filename) {
            $name = "$filename";
        } else {
            $name = $_FILES[ $name ]["name"];
        }

        $this->storeFile($tmp);

        // make the filename more paletable
        $coll              = $this->_db->selectCollection($this->_prefix . ".files");
        $obj               = $coll->findOne(array("filename" => $tmp));
        $obj[ "filename" ] = $name;
        $coll->update(array("filename" => $tmp), $obj);

        return $obj[ "_id" ];
    }
}

/**
 * Utilities for getting information about files from the database.
 *
 * @category Database
 * @package  Mongo
 * @author   Kristina Chodorow <kristina@10gen.com>
 * @license  http://www.apache.org/licenses/LICENSE-2.0  Apache License 2
 * @link     http://www.mongodb.org
 */
class MongoGridfsFile
{
    private $_file;

    /**
     * Create a new Gridfs file.
     * These should usually be created by MongoGridfs.
     *
     * @param gridfile $file a file from the database
     */
    public function __construct($file)
    {
        $this->_file = $file;
    }

    /**
     * Returns this file's filename.
     *
     * @return string the filename
     */
    public function getFilename()
    {
        return mongo_gridfile_filename($this->_file);
    }

    /**
     * Returns this file's size.
     *
     * @return int the file size
     */
    public function getSize()
    {
        return mongo_gridfile_size($this->_file);
    }

    /**
     * Writes this file to the filesystem.
     *
     * @param string $filename the location to which to write the file
     *
     * @return int the number of bytes written
     */
    public function write($filename = null)
    {
        if (!$filename) {
            $filename = $this->getFilename();
        }
        return mongo_gridfile_write($this->_file, $filename);
    }
}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (AST_UNARY_OP
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))
            (AST_VAR)))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))||||||||