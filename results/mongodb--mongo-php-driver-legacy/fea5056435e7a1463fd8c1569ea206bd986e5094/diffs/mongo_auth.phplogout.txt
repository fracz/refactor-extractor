    public function logout()
    {
        $data   = array(MongoUtil::$LOGOUT => 1);
        $result = MongoUtil::dbCommand($this->connection, $data, $this->db);

        if (!$result[ "ok" ]) {
            // trapped in the system forever
            return false;
        }

        return true;
    }

}

/**
 * Gets an admin database connection.
 *
 * @category Database
 * @package  Mongo
 * @author   Kristina Chodorow <kristina@10gen.com>
 * @license  http://www.apache.org/licenses/LICENSE-2.0  Apache License 2
 * @link     http://www.mongodb.org
 */
class MongoAdmin extends MongoAuth
{

    /**
     * Creates a new admin session.
     *
     * @param string $username  username
     * @param string $password  password
     * @param bool   $plaintext in plaintext, vs. encrypted
     * @param string $host      hostname
     * @param string $port      port
     */
    public function __construct($username,
                                $password,
                                $plaintext=true,
                                $host=null,
                                $port=null)
    {
        parent::__construct("admin", $username, $password, $plaintext, $host, $port);
    }

    /**
     * Lists all of the databases.
     *
     * @return Array each database with its size and name
     */
    public function listDBs()
    {
        $data   = array(MongoUtil::$LIST_DATABASES => 1);
        $result = MongoUtil::dbCommand($this->connection, $data, $this->db);
        if ($result) {
            return $result[ "databases" ];
        } else {
            return false;
        }
    }

    /**
     * Shuts down the database.
     *
     * @return bool if the database was successfully shut down
     */
    public function shutdown()
    {
        $result = MongoUtil::dbCommand($this->connection,
                                       array(MongoUtil::$SHUTDOWN => 1 ),
                                       $this->db);
        return $result[ "ok" ];
    }

    /**
     * Turns logging on/off.
     *
     * @param int $level logging level
     *
     * @return bool if the logging level was set
     */
    public function setLogging($level )
    {
        $result = MongoUtil::dbCommand($this->connection,
                                       array(MongoUtil::$LOGGING => (int)$level ),
                                       $this->db);
        return $result[ "ok" ];
    }

    /**
     * Sets tracing level.
     *
     * @param int $level trace level
     *
     * @return bool if the tracing level was set
     */
    public function setTracing($level )
    {
        $result = MongoUtil::dbCommand($this->connection,
                                       array(MongoUtil::$TRACING => (int)$level ),
                                       $this->db);
        return $result[ "ok" ];
    }

    /**
     * Sets only the query tracing level.
     *
     * @param int $level trace level
     *
     * @return bool if the tracing level was set
     */
    public function setQueryTracing($level )
    {
        $result = MongoUtil::dbCommand($this->connection,
                                       array(MongoUtil::$QUERY_TRACING => (int)$level ),
                                       $this->db);
        return $result[ "ok" ];
    }

}

define("MONGO_LOG_OFF", 0);
define("MONGO_LOG_W", 1);
define("MONGO_LOG_R", 2);
define("MONGO_LOG_RW", 3);

define("MONGO_TRACE_OFF", 0);
define("MONGO_TRACE_SOME", 1);
define("MONGO_TRACE_ON", 2);


?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||