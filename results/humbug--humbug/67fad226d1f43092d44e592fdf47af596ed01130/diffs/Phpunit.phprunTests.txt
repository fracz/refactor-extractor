    public function runTests(Container $container, $useStdout = true,
    $firstRun = false, $mutantFile = null, array $testCases = [],
    $interceptFile = null)
    {

        $jobopts = [
            'testdir'       => $container->getTestRunDirectory(),
            'basedir'       => $container->getBaseDirectory(),
            'timeout'       => $container->getTimeout(),
            'cachedir'      => $container->getCacheDirectory(),
            'cliopts'       => $container->getAdapterOptions(),
            'constraints'   => $container->getAdapterConstraints()
        ];

        if(!$useStdout) {
            array_unshift($jobopts['cliopts'], '--stderr');
        }

        array_unshift($jobopts['cliopts'], '--tap');

        /*
         * We only need a single fail!
         */
        if (!in_array('--stop-on-failure', $jobopts['cliopts'])) {
            array_unshift($jobopts['cliopts'], '--stop-on-failure');
        }

        /**
         * Setup a PHPUnit XML config file for the purposes of explicitly setting
         * test case order (this will preserve anything else from the original)
         *
         * On first runs we log to junit XML so we can sort tests by performance.
         *
         * TODO: Assemble config just once if no coverage data available!
         */
        $configFile = null;
        if (count($testCases) > 0) {
            $configFile = self::assembleConfiguration($container, $testCases);
        } elseif ($firstRun) {
            $configFile = self::assembleConfiguration(
                $container,
                [],
                $container->getCacheDirectory() . '/junitlog.humbug.xml',
                true
            );
            $coverageFile = $container->getCacheDirectory() . '/coverage.humbug.php';
            array_unshift($jobopts['cliopts'], $coverageFile);
            array_unshift($jobopts['cliopts'], '--coverage-php');
        }
        if (!is_null($configFile)) {
            foreach ($jobopts['cliopts'] as $key => $value) {
                if ($value == '--configuration' || $value == '-C') {
                    unset($jobopts['cliopts'][$key]);
                    unset($jobopts['cliopts'][$key+1]);
                }
            }
            array_unshift($jobopts['cliopts'], $configFile);
            array_unshift($jobopts['cliopts'], '--configuration');
        }

        /**
         * Initial command is expected, of course.
         */
        array_unshift($jobopts['cliopts'], 'phpunit');

        /**
         * Log the first run so we can analyse test times to make future
         * runs more efficient in terms of deferring slow test classes to last
         */
        $timeout = 0;
        if ($firstRun) {
            $jobopts['cliopts'] = array_merge(
                $jobopts['cliopts'],
                explode(' ', $jobopts['constraints'])
            );
        } else {
            $timeout = $container->getTimeout();
        }

        $job = Job::generate(
            $mutantFile,
            $jobopts,
            $container->getBootstrap(),
            $interceptFile
        );

        $process = new PhpProcess($job, null, $_ENV);
        $process->setTimeout($timeout);

        return $process;
    }

    /**
     * Executed in a separate process spawned from the execute() method above.
     *
     * Uses an instance of PHPUnit_TextUI_Command to execute the PHPUnit
     * tests and simulate any Humbug supported command line options suitable
     * for PHPUnit. At present, we merely dissect a generic 'options' string
     * equivalant to anything typed into a console after a normal 'phpunit'
     * command. The adapter captures the TextUI output for further processing.
     *
     * @param string $arguments PHP serialised set of arguments to pass to PHPUnit
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY)
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))
                                (
                                    (AST_UNSET
                                        (AST_DIM
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_VAR)))
                                    (AST_UNSET
                                        (AST_DIM
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))))))))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_CONST)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||