||||||||    public static function assemble(Container $container, array $cases = [], $log = false, $addMissingTests = false)
    {
        self::$container = $container;
        self::$hasBootstrap = false;

        /**
         * Basically a carbon copy of how PHPUnit finds its shit
         */
        $conf = null;
        $dir = null;
        $testDir = self::$container->getTestRunDirectory();
        if (!empty($testDir)) {
            $dir = $testDir;
            $conf = $dir . '/phpunit.xml';
        } elseif (!file_exists($conf)) {
            $dir = self::$container->getBaseDirectory();
            $conf = $dir . '/phpunit.xml';
        }
        if (file_exists($conf)) {
            $conf = realpath($conf);
        } elseif (file_exists($conf . '.dist')) {
            $conf = realpath($conf . '.dist');
        } else {
            throw new RuntimeException('Unable to locate phpunit.xml(.dist) file. This is required by Humbug.');
        }
        if (!empty($dir)) {
            $dir .= '/';
        }

        /**
         * Start the DOMmobile
         */
        $oldValue = libxml_disable_entity_loader(true);
        self::$dom = new \DOMDocument;
        self::$dom->preserveWhitespace = false;
        self::$dom->formatOutput = true;
        self::$dom->loadXML(file_get_contents($conf));
        self::$root = self::$dom->documentElement;
        libxml_disable_entity_loader($oldValue);

        static::handleRootAttributes($conf);

        self::$xpath = new \DOMXPath(self::$dom);

        /**
         * On first runs collect a test log and also generate code coverage
         */
        if ($log === true) {
            static::handleLogging();
        }

        $suites = self::$xpath->query('/phpunit/testsuites/testsuite');
        foreach ($suites as $suite) {
            foreach ($suite->childNodes as $node) {
                if ($node instanceof \DOMElement
                && ($node->tagName == 'directory'
                || $node->tagName == 'exclude'
                || $node->tagName == 'file')) {
                    if (0 === count(glob($node->nodeValue))) {
                        throw new RuntimeException('Unable to locate file specified in testsuites: ' . $node->nodeValue);
                    }

                    $node->nodeValue = static::makeAbsolutePath($node->nodeValue, dirname($conf));
                }
            }
        }

        self::$xpath = new \DOMXPath(self::$dom);

        /**
         * Set any remaining file & directory references to realpaths
         */
        $directories = self::$xpath->query('//directory');
        foreach ($directories as $directory) {
            $directory->nodeValue = static::makeAbsolutePath($directory->nodeValue, dirname($conf));
        }
        $files = self::$xpath->query('//file');
        foreach ($files as $file) {
            $file->nodeValue = static::makeAbsolutePath($file->nodeValue, dirname($conf));
        }

        if (!empty($cases)) {
            // TODO: Handle > 1 suites (likely combine them?)
            $suite1 = self::$xpath->query('/phpunit/testsuites/testsuite')->item(0);
            if (is_a($suite1, 'DOMElement')) {
                static::handleSuite($suite1, $conf, $cases, $addMissingTests);
            }
        } else {
            // TODO: Handle >1 test suites
            $suite1 = self::$xpath->query('/phpunit/testsuites/testsuite')->item(0);
            if (is_a($suite1, 'DOMElement')) {
                foreach ($suite1->childNodes as $child) {
                    // phpunit.xml may omit bootstrap location but grab it if we can
                    if (self::$hasBootstrap === false && $child instanceof \DOMElement && $child->tagName == 'directory') {
                        $bootstrapDir = static::makeAbsolutePath($child->nodeValue, dirname($conf));
                        if (file_exists($bootstrapDir . '/bootstrap.php')) {
                            self::$root->setAttribute('bootstrap', $bootstrapDir . '/bootstrap.php');
                            self::$container->setBootstrap($bootstrapDir . '/bootstrap.php');
                            self::$hasBootstrap = true;
                        }
                    }
                }
            }
        }


        $saveFile = self::$container->getCacheDirectory() . '/phpunit.humbug.xml';
        self::$dom->save($saveFile);
        return $saveFile;
    }

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_PROP))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_PROP))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_PROP
            (AST_STATIC_PROP)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_CALL
                                                        (
                                                            (AST_PROP
                                                                (AST_VAR)))))))
                                        (
                                            (AST_THROW
                                                (AST_NEW
                                                    (
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_PROP
                                                                (AST_VAR)))))))))
                                (AST_ASSIGN
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_STATIC_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_STATIC_PROP)
                            (
                                (SCALAR)))
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_STATIC_PROP)
                            (
                                (SCALAR)))
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_STATIC_PROP)
                                                        (AST_CONST))
                                                    (AST_INSTANCEOF
                                                        (AST_VAR)))
                                                (AST_BINARY_OP
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (SCALAR)))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR))))))
                                                (AST_IF
                                                    (AST_IF_ELEM
                                                        (AST_CALL
                                                            (
                                                                (AST_BINARY_OP
                                                                    (AST_VAR)
                                                                    (SCALAR))))
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_STATIC_PROP)
                                                                (
                                                                    (SCALAR)
                                                                    (AST_BINARY_OP
                                                                        (AST_VAR)
                                                                        (SCALAR))))
                                                            (AST_METHOD_CALL
                                                                (AST_STATIC_PROP)
                                                                (
                                                                    (AST_BINARY_OP
                                                                        (AST_VAR)
                                                                        (SCALAR))))
                                                            (AST_ASSIGN
                                                                (AST_STATIC_PROP)
                                                                (AST_CONST))))))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_STATIC_PROP))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))