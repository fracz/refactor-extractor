    public function run() {
        try {
            $this->applyHook('slim.before');
            ob_start();
            $this->applyHook('slim.before.router');
            $dispatched = false;
            foreach( $this->router->getMatchedRoutes() as $route ) {
                try {
                    $this->applyHook('slim.before.dispatch');
                    $dispatched = $route->dispatch();
                    $this->applyHook('slim.after.dispatch');
                    if ( $dispatched ) {
                        break;
                    }
                } catch ( Slim_Exception_Pass $e ) {
                    continue;
                }
            }
            if ( !$dispatched ) {
                $this->notFound();
            }
            $this->response()->write(ob_get_clean());
            $this->applyHook('slim.after.router');
            $this->view->getData('flash')->save();
            session_write_close();
            $this->response->send();
            $this->applyHook('slim.after');
        } catch ( Slim_Exception_RequestSlash $e ) {
            $this->redirect($this->request->getRootUri() . $this->request->getResourceUri() . '/', 301);
        }
    }

}||||||||    public function run() {
        try {
            $this->applyHook('slim.before');
            ob_start();
            $this->applyHook('slim.before.router');
            $dispatched = false;
            foreach( $this->router->getMatchedRoutes() as $route ) {
                try {
                    $this->applyHook('slim.before.dispatch');
                    $dispatched = $route->dispatch();
                    $this->applyHook('slim.after.dispatch');
                    if ( $dispatched ) {
                        break;
                    }
                } catch ( Slim_Exception_Pass $e ) {
                    continue;
                }
            }
            if ( !$dispatched ) {
                $this->notFound();
            }
            $this->response()->write(ob_get_clean());
            $this->applyHook('slim.after.router');
            $this->view->getData('flash')->save();
            session_write_close();
            $this->response->send();
            $this->applyHook('slim.after');
        } catch ( Slim_Exception_RequestSlash $e ) {
            $this->redirect($this->request->getRootUri() . $this->request->getResourceUri() . '/', 301);
        } catch ( Slim_Exception_Stop $e ) {
            //Exit application context
        } catch ( Exception $e ) {
            $this->getLog()->error($e);
            if ( $this->config('debug') === true ) {
                $this->halt(500, self::generateErrorMarkup($e->getMessage(), $e->getFile(), $e->getLine(), $e->getTraceAsString()));
            } else {
                $this->error();
            }
        }
    }

    /***** EXCEPTION AND ERROR HANDLING *****/

    /**
     * Handle errors
     *
     * This is the global Error handler that will catch reportable Errors
     * and convert them into ErrorExceptions that are caught and handled
     * by each Slim application.
     *
     * @param   int     $errno      The numeric type of the Error
     * @param   string  $errstr     The error message
     * @param   string  $errfile    The absolute path to the affected file
     * @param   int     $errline    The line number of the error in the affected file
     * @return  true
     * @throws  ErrorException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_CALL)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_TRY
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_VAR)
                                    (
                                        (AST_BREAK
                                            (NULL))))))
                        (AST_CATCH_LIST
                            (AST_CATCH
                                (AST_NAME_LIST)
                                (AST_VAR)
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (NULL))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_CALL)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (AST_CALL)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))))
                                (SCALAR))
                            (SCALAR))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_CALL)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_TRY
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_VAR)
                                    (
                                        (AST_BREAK
                                            (NULL))))))
                        (AST_CATCH_LIST
                            (AST_CATCH
                                (AST_NAME_LIST)
                                (AST_VAR)
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (NULL))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_CALL)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (AST_CALL)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))))
                                (SCALAR))
                            (SCALAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))
                                (AST_CONST))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_STATIC_CALL
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL)))