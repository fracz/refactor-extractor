	public function getHtmlAttribute()
	{
		/* Will overwright _attributes['class'] with string Therefore you cannot
		 * delete or add classes once getHtmlAttribute() has been called. */
		if (empty($this->_attributes['class'])) {
			$this->removeAttribute('class');
		} else {
			$this->_attributes['class'] = $this->getClasses();
		}

		$attributes = '';
		foreach ($this->_attributes as $key => $value) {
			$attributes .= ' ' . $key . (isset($value) ? '="' . htmlspecialchars($value) . '"' : '');
		}

		return $attributes;
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (SCALAR))
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||