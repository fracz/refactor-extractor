||||||||	protected function hasNested($relations, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
	{
		$relations = explode('.', $relations);

		// In order to nest "has", we need to add count relation constraints
		// on the callback closure. We will do this by simply passing to
		// closure its own reference, so it calls itself recursively.
		$closure = function ($q) use (&$closure, &$relations, $operator, $count, $boolean, $callback)
		{
			// If the "relation" is specified using dot notation, we will assume
			// that developer wants to check simple "has" on the intermediate
			// relations and add constraints only on the furthermost query.
			if (count($relations) > 1)
			{
				$q->whereHas(array_shift($relations), $closure);
			}
			else
			{
				$q->has(array_shift($relations), $operator, $count, $boolean, $callback);
			}
		};

		return $this->whereHas(array_shift($relations), $closure);
	}

	/**
	 * Add a relationship count condition to the query.
	 *
	 * @param  string  $relation
	 * @param  string  $boolean
	 * @param  \Closure|null  $callback
	 * @return \Illuminate\Database\Eloquent\Builder|static
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)))))