	function parse($content, $template) {
		// parse content
		$rules = $this->content_parser->parse($content);
		// parse template
		echo $this->template_parser->parse($template, $rules);
	}

}

?>||||||||	function parse($file) {
		$file = file_get_contents($file);
		preg_match('/([\S\s]*)foreach[\S\s]*{([\S\s]*)}([\S\s]*)/', $file, $matches);
		return array($matches[1], $matches[2], $matches[3]);
	}

}

class NavigationPartial extends Partial {

	var $dir = "../content/";
	var $partial_file = "./templates/partials/navigation.html";

	function render($page) {
		$wrappers = $this->parse($this->partial_file);

		if($dh = opendir($this->dir)) {
			while (($file = readdir($dh)) !== false) {
				if(!is_dir($file) && $file != ".DS_Store" && !preg_match('/index/', $file)) {
					$files[] = $file;
					$file_name_clean = preg_replace(array('/^\d+?\./', '/\.txt/'), '', $file);
					$file_vars[] = array(
						"/@url/" => $file_name_clean,
						"/@name/" => ucfirst(preg_replace('/-/', ' ', $file_name_clean)),
					);
				}
			}
		}

		asort($files, SORT_NUMERIC);
		$html .= $wrappers[0];
		$p = new ProjectsPartial;
		foreach($files as $key => $file) {
			$html .= preg_replace(array_keys($file_vars[$key]), array_values($file_vars[$key]), $wrappers[1]);
			if(preg_match('/projects$/', $file)) $html .= $p->render($page);
		}
		$html .= $wrappers[2];

		return $html;
	}

}

class ImagesPartial extends Partial {

	var $dir;
	var $partial_file = "./templates/partials/images.html";

	function render($dir) {

		$wrappers = $this->parse($this->partial_file);

		if(is_dir($dir)) {
		 	if($dh = opendir($dir)) {
		 		while (($file = readdir($dh)) !== false) {
		 			if(!is_dir($file) && preg_match("/\.[gif|jpg|png|jpeg]/i", $file) && !preg_match("/thumb\.[gif|jpg|png|jpeg]/i", $file)) {
						$files[] = $file;
						$file_vars[] = array(
							"/@url/" => preg_replace('/\.\.\//', '/', $dir)."/".$file,
						);
					}
				}
			}
			closedir($dh);
			if(count($files) > 0) {
				asort($files, SORT_NUMERIC);
				$html = $wrappers[0];
				foreach($files as $key => $file) $html .= preg_replace(array_keys($file_vars[$key]), array_values($file_vars[$key]), $wrappers[1]);
				$html .= $wrappers[2];
			}
		}
		return $html;
	}

}

class ProjectsPartial extends Partial {

	var $dir;
	var $partial_file = "./templates/partials/projects.html";

	function render($page) {
		$this->dir = "../content/".$page->projects_folder_unclean;
		$wrappers = $this->parse($this->partial_file);

		if(is_dir($this->dir)) {
		 	if($dh = opendir($this->dir)) {
		 		while (($file = readdir($dh)) !== false) {
		 			if(!is_dir($file) && file_exists($this->dir."/".$file."/information.txt")) {
						$files[] = $file;
						preg_match("/project_title:(.+)/", file_get_contents($this->dir."/".$file."/information.txt"), $matches);
						$file_vars[] = array(
							"/@project_title/" => $matches[1],
							"/@url/" => preg_replace('/^\d+?\./', '', $file),
							"/@thumb/" => $this->check_thumb($dir, $file),
						);
					}
				}
			}
			closedir($dh);
			asort($files, SORT_NUMERIC);
			$html = $wrappers[0];
			foreach($files as $key => $file) $html .= preg_replace(array_keys($file_vars[$key]), array_values($file_vars[$key]), $wrappers[1]);
			$html .= $wrappers[2];
		}

		return $html;
	}

}

?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL)))))