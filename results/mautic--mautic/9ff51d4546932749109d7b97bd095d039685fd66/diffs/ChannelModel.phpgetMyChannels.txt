    public function getMyChannels()
    {
        return $this->getRepository()->getUserChannels(
            $this->factory->getUser()
        );
    }

    /**
     * {@inheritdoc}
     *
     * @param      $entity
     * @param      $formFactory
     * @param null $action
     * @param array $options
     * @return mixed
     */
||||||||    public function getMyChannels($search = '', $limit = 10, $start = 0, $usePreference = false)
    {
        $repo = $this->getRepository();
        if ($usePreference) {
            $settings = $this->getSettings();

            //force user preferences
            $search = $settings['visible'];

            if (empty($search)) {
                //prevent showing any channels until subscribed
                $search[] = 0;
            }

            $limit  = $start = 0;
        }

        $results = $repo->getUserChannels($this->factory->getUser(), $search, $limit, $start);
        $ids     = array_keys($results['channels']);

        //compare user preference with returned Ids and update if applicable
        if ($usePreference) {
            $diff = array_diff($settings['visible'], $ids);

            if (count($diff)) {
                $settings['visible'] = $ids;
                $this->setSettings($settings);
            }
        }

        $unread = $this->getChannelsWithUnreadMessages();

        //set the unread count
        $listedUnread = 0;
        $hasUnread    = array();
        foreach ($results['channels'] as $r) {
            if (!isset($unread[$r['id']])) {
                $unread[$r['id']] = 0;
            } else {
                $unread[$r['id']] = (int)$unread[$r['id']];
            }

            if ($unread[$r['id']] > 0) {
                $hasUnread[] = $r['id'];
            }
            $listedUnread += $unread[$r['id']];
        }

        //total unread count
        $totalUnread       = array_sum($unread);
        $results['unread'] = array(
            'count'     => $totalUnread,
            'hidden'    => $totalUnread - $listedUnread,
            'channels'  => $unread,
            'hasUnread' => $hasUnread
        );

        return $results;
    }

    /**
     * Get channels with unread messages
     *
     * @param bool $includeIdList
     *
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CAST
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_RETURN
        (AST_VAR)))