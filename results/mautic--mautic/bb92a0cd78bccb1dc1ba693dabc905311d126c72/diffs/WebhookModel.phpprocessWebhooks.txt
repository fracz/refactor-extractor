    public function processWebhooks($webhooks)
    {
        $http = new Http();
        /** @var \Mautic\WebhookBundle\Entity\Webhook $webhook */
        foreach ($webhooks as $webhook)
        {
            $payload = ($this->getWebhookPayload($webhook));
            $response = $http->post($webhook->getWebhookUrl(), json_encode($payload));
            $this->addLog($webhook, $response);
        }
    }

    /*
     * Add a log for the webhook response and save it
     */
||||||||    public function processWebhooks($webhooks)
    {
        $http = new Http();


        foreach ($webhooks as $webhook)
        {
            $this->processWebhook($webhook, $http);
        }
    }

    /*
     * Execute a single webhook post
     *
     * @param Webhook $webhook
     * @var   Http    $http
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))))