    public function regenerateListLeads(LeadList $entity, $isNew = false, $persist = true)
    {
        $id          = $entity->getId();
        $newLeadList = $this->getLeadsByList(array('id' => $id, 'filters' => $entity->getFilters()), true, true);

        if (!$isNew) {
            $oldLeadList = $this->getLeadsByList(array('id' => $id), true);

            $addLeads    = array_diff($newLeadList[$id], $oldLeadList[$id]);
            $removeLeads = array_diff($oldLeadList[$id], $newLeadList[$id]);
        } else {
            $addLeads    = $newLeadList[$id];
            $removeLeads = array();
        }

        foreach ($addLeads as $l) {
            $this->addLead($l, $entity);
        }

        if (isset($manuallyAdded)) {
            foreach ($manuallyAdded as $l) {
                $this->addLead($l, $entity, true);
            }
        }

        foreach ($removeLeads as $l) {
            $this->removeLead($l, $entity);
        }

        if ($persist) {
            $this->getRepository()->saveEntity($entity);
        }
    }

    /**
     * {@inheritdoc}
     *
     * @param      $entity
     * @param      $formFactory
     * @param null $action
     * @param array $options
     * @return mixed
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
||||||||    public function regenerateListLeads(LeadList $entity, $limit = 1000)
    {
        defined('MAUTIC_REGENERATING_LEAD_LISTS') or define('MAUTIC_REGENERATING_LEAD_LISTS', 1);

        // Set SQL logging to null or else will hit memory limits in dev for sure
        $this->em->getConnection()->getConfiguration()->setSQLLogger(null);

        $id   = $entity->getId();
        $list = array('id' => $id, 'filters' => $entity->getFilters());

        $batchLimiters = array(
            'dateTime' => $this->factory->getDate()->toUtcString()
        );

        // Get a count of leads to add
        $newLeadsCount = $this->getLeadsByList(
            $list,
            true,
            array(
                'countOnly'     => true,
                'dynamic'       => true,
                'includeManual' => false
            )
        );

        // Ensure the same list is used each batch
        $batchLimiters['maxId'] = $newLeadsCount[$id]['maxId'];

        // Store IDs for remove comparison
        $allLeadIds = array();

        // Handle by batches
        $start = 0;

        // Try to save some memory
        gc_enable();

        // Add leads
        while ($start < $newLeadsCount[$id]['count']) {
            // Keep CPU down
            sleep(2);

            $newLeadList = $this->getLeadsByList(
                $list,
                true,
                array(
                    'dynamic'       => true,
                    'noteExists'    => true,
                    'includeManual' => false,
                    'start'         => $start,
                    'limit'         => $limit,
                    'batchLimiters' => $batchLimiters
                )
            );

            $start += $limit;

            foreach ($newLeadList[$id] as $l) {
                // Keep RAM down
                usleep(500);

                $this->addLead($l['id'], $entity, false, true, $l['assigned']);

                // To prevent remove from filtering the new ones
                $allLeadIds[] = $l['id'];

                unset($l);
            }

            // Dispatch batch event
            if ($this->dispatcher->hasListeners(LeadEvents::LEAD_LIST_BATCH_CHANGE)) {
                // Keep RAM down
                sleep(2);

                $event = new ListChangeEvent($newLeadList[$id], $entity, true);
                $this->dispatcher->dispatch(LeadEvents::LEAD_LIST_BATCH_CHANGE, $event);

                unset($event);
            }

            unset($newLeadList);

            // Free some memory
            gc_collect_cycles();
        }

        // Get a count of leads to be removed
        $removeLeadCount = $this->getLeadsByList(
            $list,
            true,
            array(
                'countOnly'     => true,
                'filterOutNew'  => $allLeadIds,
                'batchLimiters' => $batchLimiters
            )
        );

        // Restart batching
        $start = 0;

        // Remove leads
        while ($start < $removeLeadCount[$id]['count']) {
            // Keep CPU down
            sleep(2);

            $removeLeadList = $this->getLeadsByList(
                $list,
                true,
                array(
                    'start'         => $start,
                    'limit'         => $limit,
                    'filterOutNew'  => $allLeadIds,
                    'batchLimiters' => $batchLimiters
                )
            );

            foreach ($removeLeadList[$id] as $l) {
                // Keep RAM down
                usleep(500);

                $this->removeLead($l, $entity, false, true, true);
            }

            $start += $limit;

            // Dispatch batch event
            if ($this->dispatcher->hasListeners(LeadEvents::LEAD_LIST_BATCH_CHANGE)) {
                // Keep RAM down
                sleep(2);

                $event = new ListChangeEvent($removeLeadList[$id], $entity, false);
                $this->dispatcher->dispatch(LeadEvents::LEAD_LIST_BATCH_CHANGE, $event);

                unset($event);
            }

            unset($removeLeadList);

            // Free some memory
            gc_collect_cycles();
        }

        unset($allLeadIds);
    }

    /**
     * Add lead to lists
     *
     * @param      $lead
     * @param      $lists
     * @param bool $manuallyAdded
     * @param bool $batchProcess
     * @param bool $skipFindOne
     *
     * @throws \Doctrine\ORM\ORMException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (AST_CONST)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_CONST))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_BINARY_OP
        (AST_CALL
            (
                (SCALAR)))
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CONST)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_CALL)
    (AST_WHILE
        (AST_BINARY_OP
            (AST_VAR)
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR)))
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_CALL
                        (
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_UNSET
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_CONST))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_UNSET
                            (AST_VAR)))))
            (AST_UNSET
                (AST_VAR))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CONST)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_VAR)
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR)))
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_CALL
                        (
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_CONST)))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_CONST))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_UNSET
                            (AST_VAR)))))
            (AST_UNSET
                (AST_VAR))
            (AST_CALL)))
    (AST_UNSET
        (AST_VAR)))