||||||||	public function sendMailWithPHPMailer($user_email, $from_email, $from_name, $subject, $body)
	{
		$mail = new PHPMailer;

		// if you want to send mail via PHPMailer using SMTP credentials
		if (EMAIL_USE_SMTP) {
			// set PHPMailer to use SMTP
			$mail->IsSMTP();
			// 0 = off, 1 = commands, 2 = commands and data, perfect to see SMTP errors
			$mail->SMTPDebug = 0;
			// enable SMTP authentication
			$mail->SMTPAuth = EMAIL_SMTP_AUTH;
			// enable encryption, usually SSL/TLS
			if (defined('EMAIL_SMTP_ENCRYPTION')) {
				$mail->SMTPSecure = EMAIL_SMTP_ENCRYPTION;
			}
			// set SMTP provider's credentials
			$mail->Host = EMAIL_SMTP_HOST;
			$mail->Username = EMAIL_SMTP_USERNAME;
			$mail->Password = EMAIL_SMTP_PASSWORD;
			$mail->Port = EMAIL_SMTP_PORT;
		}

		// if you want to send mail via PHPMailer using native mail()
		if (!EMAIL_USE_SMTP) {
			$mail->IsMail();
		}

		// fill mail with data
		$mail->From = $from_email;
		$mail->FromName = $from_name;
		$mail->AddAddress($user_email);
		$mail->Subject = $subject;
		$mail->Body = $body;

		// send mail
		$mail_sent = $mail->Send();
		if ($mail) {
			return true;
		}

		// if not successful, copy errors into Mail's error property
		$this->error = $mail->ErrorInfo;
		return false;
	}

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_CONST)
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))