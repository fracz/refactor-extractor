    public function sendRequest(FacebookRequest $request)
    {
        $returnResponse = new FacebookResponse($request, $this->response, 0, []);

        if ($returnResponse->isError()) {
            throw $returnResponse->getThrownException();
        }

        return $returnResponse;
    }
}

class FacebookResumableUploaderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FacebookApp
     */
    private $fbApp;

    /**
     * @var FooFacebookClientForResumableUpload
     */
    private $client;

    /**
     * @var FacebookFile
     */
    private $file;

    public function setUp()
    {
        $this->fbApp = new FacebookApp('app_id', 'app_secret');
        $this->client = new FooFacebookClientForResumableUpload();
        $this->file = new FacebookFile(__DIR__.'/../foo.txt');
    }

    public function testResumableUploadCanStartTransferAndFinish()
    {
        $this->client->setSuccessfulStartResponse();
        $uploader = new FacebookResumableUploader($this->fbApp, $this->client, 'access_token', 'v2.4');
        $endpoint = '/me/videos';
        $chunk = $uploader->start($endpoint, $this->file);
        $this->assertInstanceOf('Facebook\FileUpload\FacebookTransferChunk', $chunk);
        $this->assertEquals('42', $chunk->getUploadSessionId());
        $this->assertEquals('1337', $chunk->getVideoId());

        $this->client->setSuccessfulTransferResponse();
        $newChunk = $uploader->transfer($endpoint, $chunk);
        $this->assertEquals('124', $newChunk->getStartOffset());
        $this->assertNotSame($newChunk, $chunk);

        $this->client->setSuccessfulFinishResponse();
        $finalResponse = $uploader->finish($endpoint, $chunk->getUploadSessionId(), []);
        $this->assertTrue($finalResponse);
    }

    /**
     * @expectedException \Facebook\Exceptions\FacebookResponseException
     */
    public function testStartWillLetErrorResponsesThrow()
    {
        $this->client->setFailedStartResponse();
        $uploader = new FacebookResumableUploader($this->fbApp, $this->client, 'access_token', 'v2.4');

        $chunk = $uploader->start('/me/videos', $this->file);
    }

    public function testFailedResumableTransferWillNotThrowAndReturnSameChunk()
    {
        $this->client->setFailedTransferResponse();
        $uploader = new FacebookResumableUploader($this->fbApp, $this->client, 'access_token', 'v2.4');

        $chunk = new FacebookTransferChunk($this->file, '1', '2', '3', '4');
        $newChunk = $uploader->transfer('/me/videos', $chunk);
        $this->assertSame($newChunk, $chunk);
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (AST_ARRAY))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_THROW
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||