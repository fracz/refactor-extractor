    public function testMaxingOutRetriesWillFail()
    {
        $chunk = new FacebookTransferChunk(new FacebookFile(__DIR__.'/foo.txt'), '1', '2', '3', '4');

        $uploader = m::mock('Facebook\FileUpload\FacebookResumableUploader');
        $uploader->shouldReceive('transfer')
                 ->twice()
                 ->andReturn($chunk);
        $uploader->shouldReceive('transfer')
                 ->once()
                 ->andReturn('Final fail');

        $fb = new Facebook($this->config);
        $newChunk = $fb->maxTriesTransfer($uploader, '/me/videos', $chunk, 3);

        $this->assertEquals('Final fail', $newChunk);
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_NEW
                    (
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR))))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))||||||||