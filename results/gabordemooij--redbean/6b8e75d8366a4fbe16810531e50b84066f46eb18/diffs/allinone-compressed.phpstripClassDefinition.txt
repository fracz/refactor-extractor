class RedBean_Tools { private static $class_definitions; private static $remove_whitespaces; public static function walk_dir( $root, $callback, $recursive = true ) { $root = realpath($root); $dh = @opendir( $root ); if( false === $dh ) { return false; } while(false !== ($file = readdir($dh))) { if( "." == $file || ".." == $file ) { continue; } call_user_func( $callback, "{$root}/{$file}" ); if( false !== $recursive && is_dir( "{$root}/{$file}" )) { Redbean_Tools::walk_dir( "{$root}/{$file}", $callback, $recursive ); } } closedir($dh); return true; } public static function compile($file = '', $removeWhiteSpaces = true) { self::$remove_whitespaces = $removeWhiteSpaces; self::$class_definitions = ''; $base = dirname(__FILE__) . '/'; self::walk_dir($base,'Redbean_Tools::stripClassDefinition'); $content = str_replace("\r\n","\n", ' ' . "\n" . file_get_contents($base . 'license.txt') . "\n" . self::$class_definitions); if(!empty($file)) { file_put_contents($file, $content); } return $content; } private static function stripClassDefinition($file) { if(is_file($file) && substr($file, -4) == '.php') { if(self::$remove_whitespaces) { self::$class_definitions .= "\n" . trim(str_replace('', '', php_strip_whitespace($file))); } else { self::$class_definitions .= "\n" . trim(str_replace('', '', trim(file_get_contents($file)))); } } } }
class RedBean_Validator_AlphaNumeric implements RedBean_Validator { public function check( $v ) { return (bool) preg_match('/^[A-Za-z0-9]+$/', $v); } }
interface RedBean_Validator { public function check( $property ); }||||||||class RedBean_Tools { private static $class_definitions; private static $remove_whitespaces; public static function walk_dir( $root, $callback, $recursive = true ) { $root = realpath($root); $dh = @opendir( $root ); if( false === $dh ) { return false; } while(false !== ($file = readdir($dh))) { if( "." == $file || ".." == $file ) { continue; } call_user_func( $callback, "{$root}/{$file}" ); if( false !== $recursive && is_dir( "{$root}/{$file}" )) { Redbean_Tools::walk_dir( "{$root}/{$file}", $callback, $recursive ); } } closedir($dh); return true; } public static function compile($file = '', $removeWhiteSpaces = true) { self::$remove_whitespaces = $removeWhiteSpaces; self::$class_definitions = ''; $base = dirname(__FILE__) . '/'; self::walk_dir($base,'Redbean_Tools::stripClassDefinition'); $content = str_replace("\r\n","\n", ' ' . "\n" . file_get_contents($base . 'license.txt') . "\n" . self::$class_definitions); if(!empty($file)) { file_put_contents($file, $content); } return $content; } private static function stripClassDefinition($file) { if(is_file($file) && substr($file, -4) == '.php') { echo "\n including.. $file "; if(self::$remove_whitespaces) { self::$class_definitions .= "\n" . trim(str_replace('', '', php_strip_whitespace($file))); } else { self::$class_definitions .= "\n" . trim(str_replace('', '', trim(file_get_contents($file)))); } } } }
class RedBean_Validator_AlphaNumeric implements RedBean_Validator { public function check( $v ) { return (bool) preg_match('/^[A-Za-z0-9]+$/', $v); } }
interface RedBean_Validator { public function check( $property ); }||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR))))))))))))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_ECHO
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR))))))))))))))))))