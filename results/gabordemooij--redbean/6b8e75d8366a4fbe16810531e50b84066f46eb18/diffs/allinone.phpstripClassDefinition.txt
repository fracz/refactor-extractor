    private static function stripClassDefinition($file)
    {
        if(is_file($file) && substr($file, -4) == '.php')
        {
            if(self::$remove_whitespaces)
            {
                self::$class_definitions .= "\n" . trim(str_replace('', '', php_strip_whitespace($file)));
            }
            else
            {
                self::$class_definitions .= "\n" . trim(str_replace('', '', trim(file_get_contents($file))));
            }
        }
    }
}
/**
 * RedBean Validator Alphanumeric
 * @package 		RedBean/Validator/AlphaNumeric.php
 * @description		Checks whether a value is alpha numeric
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_Validator_AlphaNumeric implements RedBean_Validator {
	/**
	 * (non-PHPdoc)
	 * @see RedBean/RedBean_Validator#check()
	 */
	public function check( $v ) {
		return (bool) preg_match('/^[A-Za-z0-9]+$/', $v);
	}
}
/**
 * Interface RedBean Validator
 * @package 		RedBean/Validator.php
 * @description		API for Validators
 * @author			Gabor de Mooij
 * @license			BSD
 */
interface RedBean_Validator {
	/**
	 *
	 * @param $property
	 * @return unknown_type
	 */
	public function check( $property );
}||||||||    private static function stripClassDefinition($file)
    {
        if(is_file($file) && substr($file, -4) == '.php')
        {
            echo "\n including.. $file ";

            if(self::$remove_whitespaces)
            {
                self::$class_definitions .= "\n" . trim(str_replace('', '', php_strip_whitespace($file)));
            }
            else
            {
                self::$class_definitions .= "\n" . trim(str_replace('', '', trim(file_get_contents($file))));
            }
        }
    }
}
/**
 * RedBean Validator Alphanumeric
 * @package 		RedBean/Validator/AlphaNumeric.php
 * @description		Checks whether a value is alpha numeric
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_Validator_AlphaNumeric implements RedBean_Validator {
	/**
	 * (non-PHPdoc)
	 * @see RedBean/RedBean_Validator#check()
	 */
	public function check( $v ) {
		return (bool) preg_match('/^[A-Za-z0-9]+$/', $v);
	}
}
/**
 * Interface RedBean Validator
 * @package 		RedBean/Validator.php
 * @description		API for Validators
 * @author			Gabor de Mooij
 * @license			BSD
 */
interface RedBean_Validator {
	/**
	 *
	 * @param $property
	 * @return unknown_type
	 */
	public function check( $property );
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR))))))))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))))
                    (SCALAR)))
            (
                (AST_ECHO
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN_OP
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR))))))))))))))))))