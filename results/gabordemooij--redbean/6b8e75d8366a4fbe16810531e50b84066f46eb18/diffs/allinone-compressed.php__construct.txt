class RedBean_OODB { private $locktime = 10; private $db; private $locking = true; public $pkey = false; private $rollback = false; private $me = null; private $engine = "myisam"; private $frozen = false; private $writer; private $beanchecker; private $gc; private $classGenerator; private $filter; private function __construct( $filter = false ) { $this->filter = new RedBean_Mod_Filter_Strict(); $this->beanchecker = new RedBean_Mod_BeanChecker(); $this->gc = new RedBean_Mod_GarbageCollector(); $this->classGenerator = new RedBean_Mod_ClassGenerator( $this ); } public function getFilter() { return $this->filter; } public function setFilter( RedBean_Mod_Filter $filter ) { $this->filter = $filter; } public function __destruct() { $this->releaseAllLocks(); $this->db->exec( $this->writer->getQuery("destruct", array("engine"=>$this->engine,"rollback"=>$this->rollback)) ); } public function setLocking( $tf ) { $this->locking = $tf; } public function getDatabase() { return $this->db; } public function setDatabase( RedBean_DBAdapter $db ) { $this->db = $db; } public function getLocking() { return $this->locking; } public function setOptimizerActive( $bool ) { $this->optimizer = (boolean) $bool; } public function getOptimizerActive() { return $this->optimizer; } private static $instance = null; public function getInstance() { if (self::$instance === null) { self::$instance = new RedBean_OODB; } return self::$instance; } public function checkBean(RedBean_OODBBean $bean) { if (!$this->db) { throw new RedBean_Exception_Security("No database object. Have you used kickstart to initialize RedBean?"); } return $this->beanchecker->check( $bean ); } public function checkBeanForAssoc( $bean ) { $this->checkBean($bean); if (intval($bean->id) < 1) { $bean->id = $this->set( $bean ); } return $bean; } public function getEngine() { return $this->engine; } public function setEngine( $engine ) { if ($engine=="myisam" || $engine=="innodb") { $this->engine = $engine; } else { throw new Exception("Unsupported database engine"); } return $this->engine; } public function rollback() { $this->rollback = true; } public function set( RedBean_OODBBean $bean ) { $this->checkBean($bean); $db = $this->db; $table = $db->escape($bean->type); if (!$this->frozen) { $tables = $this->showTables(); if (!in_array($table, $tables)) { $createtableSQL = $this->writer->getQuery("create_table", array( "engine"=>$this->engine, "table"=>$table )); $db->exec( $createtableSQL ); $this->addTable( $table ); } $columnsRaw = $this->writer->getTableColumns($table, $db) ; $columns = array(); foreach($columnsRaw as $r) { $columns[$r["Field"]]=$r["Type"]; } $insertvalues = array(); $insertcolumns = array(); $updatevalues = array(); foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $typeno = $this->inferType($v); if (isset($columns[$p])) { $sqlt = $this->getType($columns[$p]); if ($typeno > $sqlt) { $changecolumnSQL = $this->writer->getQuery( "widen_column", array( "table" => $table, "column" => $p, "newtype" => $this->writer->typeno_sqltype[$typeno] ) ); $db->exec( $changecolumnSQL ); } } else { $addcolumnSQL = $this->writer->getQuery("add_column",array( "table"=>$table, "column"=>$p, "type"=> $this->writer->typeno_sqltype[$typeno] )); $db->exec( $addcolumnSQL ); } $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } else { foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } if ($bean->id) { $this->openBean($bean, true); if (count($updatevalues)>0) { $updateSQL = $this->writer->getQuery("update", array( "table"=>$table, "updatevalues"=>$updatevalues, "id"=>$bean->id )); $db->exec( $updateSQL ); } } else { if (count($insertvalues)>0) { $insertSQL = $this->writer->getQuery("insert",array( "table"=>$table, "insertcolumns"=>$insertcolumns, "insertvalues"=>$insertvalues )); } else { $insertSQL = $this->writer->getQuery("create", array("table"=>$table)); } $db->exec( $insertSQL ); $bean->id = $db->getInsertID(); $this->openBean($bean); } return $bean->id; } public function inferType( $v ) { $db = $this->db; $rawv = $v; $checktypeSQL = $this->writer->getQuery("infertype", array( "value"=> $this->db->escape(strval($v)) )); $db->exec( $checktypeSQL ); $id = $db->getInsertID(); $readtypeSQL = $this->writer->getQuery("readtype",array( "id"=>$id )); $row=$db->getRow($readtypeSQL); $db->exec( $this->writer->getQuery("reset_dtyp") ); $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($rawv)) { return $tp; } $tp++; } return $tp; } public function getType( $sqlType ) { if (in_array($sqlType,$this->writer->sqltype_typeno)) { $typeno = $this->writer->sqltype_typeno[$sqlType]; } else { $typeno = -1; } return $typeno; } public function init( RedBean_QueryWriter $querywriter, $dontclose = false ) { $this->writer = $querywriter; if ($this->engine === "innodb") { $this->db->exec($this->writer->getQuery("prepare_innodb")); $this->db->exec($this->writer->getQuery("starttransaction")); } else if ($this->engine === "myisam"){ $this->db->exec($this->writer->getQuery("prepare_myisam")); } if (!$this->frozen) { $this->db->exec($this->writer->getQuery("clear_dtyp")); $this->db->exec($this->writer->getQuery("setup_dtyp")); $this->db->exec($this->writer->getQuery("setup_locking")); $this->db->exec($this->writer->getQuery("setup_tables")); } if (!$this->pkey) { $this->pkey = str_replace(".","",microtime(true)."".mt_rand()); } return true; } public function freeze() { $this->frozen = true; } public function unfreeze() { $this->frozen = false; } public function showTables( $all=false ) { $db = $this->db; if ($all && $this->frozen) { $alltables = $db->getCol($this->writer->getQuery("show_tables")); return $alltables; } else { $alltables = $db->getCol($this->writer->getQuery("show_rtables")); return $alltables; } } public function addTable( $tablename ) { $db = $this->db; $tablename = $db->escape( $tablename ); $db->exec($this->writer->getQuery("register_table",array("table"=>$tablename))); } public function dropTable( $tablename ) { $db = $this->db; $tablename = $db->escape( $tablename ); $db->exec($this->writer->getQuery("unregister_table",array("table"=>$tablename))); } public function releaseAllLocks() { $this->db->exec($this->writer->getQuery("release",array("key"=>$this->pkey))); } public function openBean( $bean, $mustlock=false) { $this->checkBean( $bean ); if (!$this->locking || $bean->id === 0) return true; $db = $this->db; $removeExpiredSQL = $this->writer->getQuery("remove_expir_lock", array( "locktime"=>$this->locktime )); $db->exec($removeExpiredSQL); $tbl = $db->escape( $bean->type ); $id = intval( $bean->id ); $checkopenSQL = $this->writer->getQuery("get_lock",array( "id"=>$id, "table"=>$tbl, "key"=>$this->pkey )); $row = $db->getRow($checkopenSQL); if ($row && is_array($row) && count($row)>0) { $updateexpstamp = $this->writer->getQuery("update_expir_lock",array( "time"=>time(), "id"=>$row["id"] )); $db->exec($updateexpstamp); return true; } if ($mustlock) { throw new RedBean_Exception_FailedAccessBean("Could not acquire a lock for bean $tbl . $id "); return false; } $openSQL = $this->writer->getQuery("aq_lock", array( "table"=>$tbl, "id"=>$id, "key"=>$this->pkey, "time"=>time() )); $trials = 0; $aff = 0; while( $aff < 1 && $trials < 5 ) { $db->exec($openSQL); $aff = $db->getAffectedRows(); $trials++; if ($aff < 1) usleep(500000); } if ($trials > 4) { return false; } else { return true; } } private function sync( $toggle ) { $bean = $this->dispense("_syncmethod"); $bean->id = 0; if ($toggle) { $this->openBean( $bean ); } else { $this->closeBean( $bean ); } } public function getById($type, $id, $data=false) { $bean = $this->dispense( $type ); $db = $this->db; $table = $db->escape( $type ); $id = abs( intval( $id ) ); $bean->id = $id; $this->openBean($bean); if (!$data) { $getSQL = $this->writer->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $db->getRow( $getSQL ); } else { $row = $data; } if ($row && is_array($row) && count($row)>0) { foreach($row as $p=>$v) { $bean->$p = $v; } } else { throw new RedBean_Exception_FailedAccessBean("bean not found"); } return $bean; } public function exists($type,$id) { $db = $this->db; $id = intval( $id ); $type = $db->escape( $type ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return false; } else { $no = $db->getCell( $this->writer->getQuery("bean_exists",array( "type"=>$type, "id"=>$id )) ); if (intval($no)) { return true; } else { return false; } } } public function numberof($type) { $db = $this->db; $type = $this->filter->table( $db->escape( $type ) ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell( $this->writer->getQuery("count",array( "type"=>$type ))); return intval( $no ); } } function distinct($type, $field) { $db = $this->db; $type = $this->filter->table( $db->escape( $type ) ); $field = $db->escape( $field ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return array(); } else { $ids = $db->getCol( $this->writer->getQuery("distinct",array( "type"=>$type, "field"=>$field ))); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->getById( $type, $id , false); } } return $beans; } } private function stat($type,$field,$stat="sum") { $db = $this->db; $type = $this->filter->table( $db->escape( $type ) ); $field = $this->filter->property( $db->escape( $field ) ); $stat = $db->escape( $stat ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell($this->writer->getQuery("stat",array( "stat"=>$stat, "field"=>$field, "type"=>$type ))); return floatval( $no ); } } public function sumof($type,$field) { return $this->stat( $type, $field, "sum"); } public function avgof($type,$field) { return $this->stat( $type, $field, "avg"); } public function minof($type,$field) { return $this->stat( $type, $field, "min"); } public function maxof($type,$field) { return $this->stat( $type, $field, "max"); } public function resetAll() { $sql = $this->writer->getQuery("releaseall"); $this->db->exec( $sql ); return true; } public function processQuerySlots($sql, $slots) { $db = $this->db; $code = sha1(rand(1,1000)*time()); foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$key."}", "{".$code.$key."}" ,$sql ); } foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$code.$key."}", $this->writer->getQuote().$db->escape( $value ).$this->writer->getQuote(),$sql ); } return $sql; } public function fastLoader( $type, $ids ) { $db = $this->db; $sql = $this->writer->getQuery("fastload", array( "type"=>$type, "ids"=>$ids )); return $db->get( $sql ); } public function getBySQL( $rawsql, $slots, $table, $max=0 ) { $db = $this->db; $sql = $rawsql; if (is_array($slots)) { $sql = $this->processQuerySlots( $sql, $slots ); } $sql = str_replace('@ifexists:','', $sql); $rs = $db->getCol( $this->writer->getQuery("where",array( "table"=>$table )) . $sql ); $err = $db->getErrorMsg(); if (!$this->frozen && strpos($err,"Unknown column")!==false && $max<10) { $matches = array(); if (preg_match("/Unknown\scolumn\s'(.*?)'/",$err,$matches)) { if (count($matches)==2 && strpos($rawsql,'@ifexists')!==false){ $rawsql = str_replace('@ifexists:`'.$matches[1].'`','NULL', $rawsql); $rawsql = str_replace('@ifexists:'.$matches[1].'','NULL', $rawsql); return $this->getBySQL( $rawsql, $slots, $table, ++$max); } } return array(); } else { if (is_array($rs)) { return $rs; } else { return array(); } } } public function find(RedBean_OODBBean $bean, $searchoperators = array(), $start=0, $end=100, $orderby="id ASC", $extraSQL=false) { $this->checkBean( $bean ); $db = $this->db; $tbl = $db->escape( $bean->type ); $findSQL = $this->writer->getQuery("find",array( "searchoperators"=>$searchoperators, "bean"=>$bean, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL, "tbl"=>$tbl )); $ids = $db->getCol( $findSQL ); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->getById( $bean->type, $id , false); } } return $beans; } public function listAll($type, $start=false, $end=false, $orderby="id ASC", $extraSQL = false) { $db = $this->db; $listSQL = $this->writer->getQuery("list",array( "type"=>$type, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL )); return $db->get( $listSQL ); } public function associate( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { $db = $this->db; $bean1 = $this->checkBeanForAssoc($bean1); $bean2 = $this->checkBeanForAssoc($bean2); $this->openBean( $bean1, true ); $this->openBean( $bean2, true ); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2){ $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); if (!$this->frozen) { $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; } $assoccreateSQL = $this->writer->getQuery("create_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2, "engine"=>$this->engine )); $db->exec( $assoccreateSQL ); $db->exec( $this->writer->getQuery("add_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2 )) ); $this->addTable( $assoctable ); } } $assocSQL = $this->writer->getQuery("add_assoc_now", array( "id1"=>$id1, "id2"=>$id2, "assoctable"=>$assoctable )); $db->exec( $assocSQL ); } public function unassociate(RedBean_OODBBean $bean1, RedBean_OODBBean $bean2) { $db = $this->db; $bean1 = $this->checkBeanForAssoc($bean1); $bean2 = $this->checkBeanForAssoc($bean2); $this->openBean( $bean1, true ); $this->openBean( $bean2, true ); $idx1 = intval($bean1->id); $idx2 = intval($bean2->id); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2){ $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->showTables(); if (in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; $unassocSQL = $this->writer->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t2, "t2"=>$t1, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } $unassocSQL = $this->writer->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t1, "t2"=>$t2, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } if ($tp1==$tp2) { $assoctable2 = "pc_".$db->escape( $bean1->type )."_".$db->escape( $bean1->type ); $alltables = $this->showTables(); if (in_array($assoctable2, $alltables)) { $unassocSQL = $this->writer->getQuery("untree", array( "assoctable2"=>$assoctable2, "idx1"=>$idx1, "idx2"=>$idx2 )); $db->exec($unassocSQL); } } } public function getAssoc(RedBean_OODBBean $bean, $targettype) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $id = intval($bean->id); $t1 = $db->escape( $this->filter->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { if ($t1==$t2) { $t2.="2"; } $getassocSQL = $this->writer->getQuery("get_assoc",array( "t1"=>$t1, "t2"=>$t2, "assoctable"=>$assoctable, "id"=>$id )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function trash( RedBean_OODBBean $bean ) { $this->checkBean( $bean ); if (intval($bean->id)===0) return; $this->deleteAllAssoc( $bean ); $this->openBean($bean); $table = $this->db->escape($bean->type); $id = intval($bean->id); $this->db->exec( $this->writer->getQuery("trash",array( "table"=>$table, "id"=>$id )) ); } public function deleteAllAssoc( $bean ) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $this->openBean( $bean, true ); $id = intval( $bean->id ); $alltables = $this->showTables(); $t = $db->escape($bean->type); $checktables = array(); foreach( $alltables as $table ) { if (strpos($table,$t."_")!==false || strpos($table,"_".$t)!==false){ $checktables[] = $table; } } foreach($checktables as $table) { if (strpos($table,"pc_")===0){ $db->exec( $this->writer->getQuery("deltree",array( "id"=>$id, "table"=>$table )) ); } else { $db->exec( $this->writer->getQuery("unassoc_all_t1",array("table"=>$table,"t"=>$t,"id"=>$id)) ); $db->exec( $this->writer->getQuery("unassoc_all_t2",array("table"=>$table,"t"=>$t,"id"=>$id)) ); } } return true; } public function deleteAllAssocType( $targettype, $bean ) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $this->openBean( $bean, true ); $id = intval( $bean->id ); $t1 = $db->escape( $this->filter->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $availabletables = $this->showTables(); if (in_array('pc_'.$assoctable,$availabletables)){ $db->exec( $this->writer->getQuery("deltreetype",array( "assoctable"=>'pc_'.$assoctable, "id"=>$id )) ); } if (in_array($assoctable,$availabletables)) { $db->exec( $this->writer->getQuery("unassoctype1",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); $db->exec( $this->writer->getQuery("unassoctype2",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); } return true; } public function dispense( $type="StandardBean" ) { $oBean = new RedBean_OODBBean(); $oBean->type = $type; $oBean->id = 0; return $oBean; } public function addChild( RedBean_OODBBean $parent, RedBean_OODBBean $child ) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $child = $this->checkBeanForAssoc($child); $this->openBean( $parent, true ); $this->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $pid = intval($parent->id); $cid = intval($child->id); $assoctable = "pc_".$db->escape($parent->type."_".$parent->type); if (!$this->frozen) { $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { $assoccreateSQL = $this->writer->getQuery("create_tree",array( "engine"=>$this->engine, "assoctable"=>$assoctable )); $db->exec( $assoccreateSQL ); $db->exec( $this->writer->getQuery("unique", array( "assoctable"=>$assoctable )) ); $this->addTable( $assoctable ); } } $assocSQL = $this->writer->getQuery("add_child",array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec( $assocSQL ); } public function getChildren( RedBean_OODBBean $parent ) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $pid = intval($parent->id); $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $parent->type; $getassocSQL = $this->writer->getQuery("get_children", array( "assoctable"=>$assoctable, "pid"=>$pid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function getParent( RedBean_OODBBean $child ) { $db = $this->db; $child = $this->checkBeanForAssoc($child); $cid = intval($child->id); $assoctable = "pc_".$db->escape( $child->type . "_" . $child->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $child->type; $getassocSQL = $this->writer->getQuery("get_parent", array( "assoctable"=>$assoctable, "cid"=>$cid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function removeChild(RedBean_OODBBean $parent, RedBean_OODBBean $child) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $child = $this->checkBeanForAssoc($child); $this->openBean( $parent, true ); $this->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return true; } else { $pid = intval($parent->id); $cid = intval($child->id); $unassocSQL = $this->writer->getQuery("remove_child", array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec($unassocSQL); } } public function numofRelated( $type, RedBean_OODBBean $bean ) { $db = $this->db; $t2 = $this->filter->table( $db->escape( $type ) ); $this->checkBean( $bean ); $t1 = $this->filter->table( $bean->type ); $tref = $this->filter->table( $db->escape( $bean->type ) ); $id = intval( $bean->id ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $tables = $this->showTables(); if ($tables && is_array($tables) && count($tables) > 0) { if (in_array( $t1, $tables ) && in_array($t2, $tables)){ $sqlCountRelations = $this->writer->getQuery( "num_related", array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id ) ); return (int) $db->getCell( $sqlCountRelations ); } } else { return 0; } } public function generate( $classes, $prefix = false, $suffix = false ) { return $this->classGenerator->generate($classes,$prefix,$suffix); } public function setLockingTime( $timeInSecs ) { if (is_int($timeInSecs) && $timeInSecs >= 0) { $this->locktime = $timeInSecs; } else { throw new RedBean_Exception_InvalidArgument( "time must be integer >= 0" ); } } public function clean() { if ($this->frozen) { return false; } $db = $this->db; $tables = $db->getCol( $this->writer->getQuery("show_rtables") ); foreach($tables as $key=>$table) { $tables[$key] = $this->writer->getEscape().$table.$this->writer->getEscape(); } $sqlcleandatabase = $this->writer->getQuery("drop_tables",array( "tables"=>$tables )); $db->exec( $sqlcleandatabase ); $db->exec( $this->writer->getQuery("truncate_rtables") ); $this->resetAll(); return true; } public function removeUnused( ) { if ($this->frozen) { return false; } return $this->gc->removeUnused( $this, $this->db, $this->writer ); } public function dropColumn( $table, $property ) { if ($this->frozen) { return false; } $db = $this->db; $db->exec( $this->writer->getQuery("drop_column", array( "table"=>$table, "property"=>$property )) ); } public function trashAll($type) { $this->db->exec( $this->writer->getQuery("drop_type",array("type"=>$this->filter->table($type)))); } public function keepInShapeNS( $gc = false ,$stdTable=false, $stdCol=false) { if ($this->frozen) { return false; } $db = $this->db; $tables = $this->showTables(); if ($tables && is_array($tables) && count($tables) > 0) { if ($gc) $this->removeUnused( $tables ); $table = $tables[array_rand( $tables, 1 )]; } else { return; } if ($stdTable) $table = $stdTable; $table = $db->escape( $table ); if (strpos($table,'_')!==false) return; $cols = $this->writer->getTableColumns( $table, $db ); if (count($cols)<1) return; $colr = $cols[array_rand( $cols )]; $col = $db->escape( $colr["Field"] ); if ($stdCol){ $exists = false; $col = $stdCol; foreach($cols as $cl){ if ($cl["Field"]==$col) { $exists = $cl; } } if (!$exists) { return; } else { $colr = $exists; } } if ($col=="id" || strpos($col,"_id")!==false) { return; } if ($gc && !intval($db->getCell( $this->writer->getQuery("get_null",array( "table"=>$table, "col"=>$col ) )))) { $db->exec( $this->writer->getQuery("drop_column",array("table"=>$table,"property"=>$col))); return; } $currenttype = $this->writer->sqltype_typeno[$colr["Type"]]; if ($currenttype > 0) { $trytype = rand(0,$currenttype - 1); $db->exec($this->writer->getQuery("test_column",array( "type"=>$this->writer->typeno_sqltype[$trytype], "table"=>$table ) )); $db->exec($this->writer->getQuery("update_test",array( "table"=>$table, "col"=>$col ))); $delta = $db->getCell($this->writer->getQuery("measure",array( "table"=>$table, "col"=>$col ))); if (intval($delta)===0) { $sql = $this->writer->getQuery("remove_test",array( "table"=>$table, "col"=>$col, "type"=>$this->writer->typeno_sqltype[$trytype] )); $db->exec($sql); } $db->exec( $this->writer->getQuery("drop_test",array( "table"=>$table )) ); } if ( strpos($colr["Type"],"TEXT")!==false || strpos($colr["Type"],"LONGTEXT")!==false ) { return; } $variance = $db->getCell($this->writer->getQuery("variance",array( "col"=>$col, "table"=>$table ))); $records = $db->getCell($this->writer->getQuery("count",array("type"=>$table))); if ($records) { $relvar = intval($variance) / intval($records); $indexname = "reddex_".$col; if ($records > 1 && $relvar > 0.85) { $sqladdindex=$this->writer->getQuery("index1",array( "table"=>$table, "indexname"=>$indexname, "col"=>$col )); $db->exec( $sqladdindex ); } else { $sqldropindex = $this->writer->getQuery("index2",array("table"=>$table,"indexname"=>$indexname)); $db->exec( $sqldropindex ); } } return true; } public static function gen($arg, $prefix = false, $suffix = false) { return self::getInstance()->generate($arg, $prefix, $suffix); } public static function keepInShape($gc = false ,$stdTable=false, $stdCol=false) { return self::getInstance()->keepInShapeNS($gc, $stdTable, $stdCol); } public function getInstOf( $className, $id=0 ) { if (!class_exists($className)) throw new Exception("Class does not Exist"); $object = new $className($id); return $object; } }
class RedBean_OODBBean { }
||||||||class RedBean_OODB { private $locktime = 10; private $db; private $locking = true; public $pkey = false; private $rollback = false; private $me = null; private $engine = "myisam"; private $frozen = false; private $writer; private $beanchecker; private $gc; private $classGenerator; private $filter; private $search; private $optimizer; private $beanstore; private function __construct( $filter = false ) { $this->filter = new RedBean_Mod_Filter_Strict(); $this->beanchecker = new RedBean_Mod_BeanChecker(); $this->gc = new RedBean_Mod_GarbageCollector(); $this->classGenerator = new RedBean_Mod_ClassGenerator( $this ); $this->search = new RedBean_Mod_Search( $this ); $this->optimizer = new RedBean_Mod_Optimizer( $this ); $this->beanstore = new RedBean_Mod_BeanStore( $this ); } public function getFilter() { return $this->filter; } public function setFilter( RedBean_Mod_Filter $filter ) { $this->filter = $filter; } public function getWriter() { return $this->writer; } public function isFrozen() { return (boolean) $this->freeze; } public function __destruct() { $this->releaseAllLocks(); $this->db->exec( $this->writer->getQuery("destruct", array("engine"=>$this->engine,"rollback"=>$this->rollback)) ); } public function setLocking( $tf ) { $this->locking = $tf; } public function getDatabase() { return $this->db; } public function setDatabase( RedBean_DBAdapter $db ) { $this->db = $db; } public function getLocking() { return $this->locking; } public function setOptimizerActive( $bool ) { $this->optimizer = (boolean) $bool; } public function getOptimizerActive() { return $this->optimizer; } private static $instance = null; public function getInstance() { if (self::$instance === null) { self::$instance = new RedBean_OODB; } return self::$instance; } public function checkBean(RedBean_OODBBean $bean) { if (!$this->db) { throw new RedBean_Exception_Security("No database object. Have you used kickstart to initialize RedBean?"); } return $this->beanchecker->check( $bean ); } public function checkBeanForAssoc( $bean ) { $this->checkBean($bean); if (intval($bean->id) < 1) { $bean->id = $this->set( $bean ); } return $bean; } public function getEngine() { return $this->engine; } public function setEngine( $engine ) { if ($engine=="myisam" || $engine=="innodb") { $this->engine = $engine; } else { throw new Exception("Unsupported database engine"); } return $this->engine; } public function rollback() { $this->rollback = true; } public function set( RedBean_OODBBean $bean ) { return $this->beanstore->set($bean); } public function inferType( $v ) { $db = $this->db; $rawv = $v; $checktypeSQL = $this->writer->getQuery("infertype", array( "value"=> $this->db->escape(strval($v)) )); $db->exec( $checktypeSQL ); $id = $db->getInsertID(); $readtypeSQL = $this->writer->getQuery("readtype",array( "id"=>$id )); $row=$db->getRow($readtypeSQL); $db->exec( $this->writer->getQuery("reset_dtyp") ); $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($rawv)) { return $tp; } $tp++; } return $tp; } public function getType( $sqlType ) { if (in_array($sqlType,$this->writer->sqltype_typeno)) { $typeno = $this->writer->sqltype_typeno[$sqlType]; } else { $typeno = -1; } return $typeno; } public function init( RedBean_QueryWriter $querywriter, $dontclose = false ) { $this->writer = $querywriter; if ($this->engine === "innodb") { $this->db->exec($this->writer->getQuery("prepare_innodb")); $this->db->exec($this->writer->getQuery("starttransaction")); } else if ($this->engine === "myisam"){ $this->db->exec($this->writer->getQuery("prepare_myisam")); } if (!$this->frozen) { $this->db->exec($this->writer->getQuery("clear_dtyp")); $this->db->exec($this->writer->getQuery("setup_dtyp")); $this->db->exec($this->writer->getQuery("setup_locking")); $this->db->exec($this->writer->getQuery("setup_tables")); } if (!$this->pkey) { $this->pkey = str_replace(".","",microtime(true)."".mt_rand()); } return true; } public function freeze() { $this->frozen = true; } public function unfreeze() { $this->frozen = false; } public function showTables( $all=false ) { $db = $this->db; if ($all && $this->frozen) { $alltables = $db->getCol($this->writer->getQuery("show_tables")); return $alltables; } else { $alltables = $db->getCol($this->writer->getQuery("show_rtables")); return $alltables; } } public function addTable( $tablename ) { $db = $this->db; $tablename = $db->escape( $tablename ); $db->exec($this->writer->getQuery("register_table",array("table"=>$tablename))); } public function dropTable( $tablename ) { $db = $this->db; $tablename = $db->escape( $tablename ); $db->exec($this->writer->getQuery("unregister_table",array("table"=>$tablename))); } public function releaseAllLocks() { $this->db->exec($this->writer->getQuery("release",array("key"=>$this->pkey))); } public function openBean( $bean, $mustlock=false) { $this->checkBean( $bean ); if (!$this->locking || $bean->id === 0) return true; $db = $this->db; $removeExpiredSQL = $this->writer->getQuery("remove_expir_lock", array( "locktime"=>$this->locktime )); $db->exec($removeExpiredSQL); $tbl = $db->escape( $bean->type ); $id = intval( $bean->id ); $checkopenSQL = $this->writer->getQuery("get_lock",array( "id"=>$id, "table"=>$tbl, "key"=>$this->pkey )); $row = $db->getRow($checkopenSQL); if ($row && is_array($row) && count($row)>0) { $updateexpstamp = $this->writer->getQuery("update_expir_lock",array( "time"=>time(), "id"=>$row["id"] )); $db->exec($updateexpstamp); return true; } if ($mustlock) { throw new RedBean_Exception_FailedAccessBean("Could not acquire a lock for bean $tbl . $id "); return false; } $openSQL = $this->writer->getQuery("aq_lock", array( "table"=>$tbl, "id"=>$id, "key"=>$this->pkey, "time"=>time() )); $trials = 0; $aff = 0; while( $aff < 1 && $trials < 5 ) { $db->exec($openSQL); $aff = $db->getAffectedRows(); $trials++; if ($aff < 1) usleep(500000); } if ($trials > 4) { return false; } else { return true; } } private function sync( $toggle ) { $bean = $this->dispense("_syncmethod"); $bean->id = 0; if ($toggle) { $this->openBean( $bean ); } else { $this->closeBean( $bean ); } } public function getById($type, $id, $data=false) { $bean = $this->dispense( $type ); $db = $this->db; $table = $db->escape( $type ); $id = abs( intval( $id ) ); $bean->id = $id; $this->openBean($bean); if (!$data) { $getSQL = $this->writer->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $db->getRow( $getSQL ); } else { $row = $data; } if ($row && is_array($row) && count($row)>0) { foreach($row as $p=>$v) { $bean->$p = $v; } } else { throw new RedBean_Exception_FailedAccessBean("bean not found"); } return $bean; } public function exists($type,$id) { $db = $this->db; $id = intval( $id ); $type = $db->escape( $type ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return false; } else { $no = $db->getCell( $this->writer->getQuery("bean_exists",array( "type"=>$type, "id"=>$id )) ); if (intval($no)) { return true; } else { return false; } } } public function numberof($type) { $db = $this->db; $type = $this->filter->table( $db->escape( $type ) ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell( $this->writer->getQuery("count",array( "type"=>$type ))); return intval( $no ); } } function distinct($type, $field) { $db = $this->db; $type = $this->filter->table( $db->escape( $type ) ); $field = $db->escape( $field ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return array(); } else { $ids = $db->getCol( $this->writer->getQuery("distinct",array( "type"=>$type, "field"=>$field ))); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->getById( $type, $id , false); } } return $beans; } } private function stat($type,$field,$stat="sum") { $db = $this->db; $type = $this->filter->table( $db->escape( $type ) ); $field = $this->filter->property( $db->escape( $field ) ); $stat = $db->escape( $stat ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell($this->writer->getQuery("stat",array( "stat"=>$stat, "field"=>$field, "type"=>$type ))); return floatval( $no ); } } public function sumof($type,$field) { return $this->stat( $type, $field, "sum"); } public function avgof($type,$field) { return $this->stat( $type, $field, "avg"); } public function minof($type,$field) { return $this->stat( $type, $field, "min"); } public function maxof($type,$field) { return $this->stat( $type, $field, "max"); } public function resetAll() { $sql = $this->writer->getQuery("releaseall"); $this->db->exec( $sql ); return true; } public function fastLoader( $type, $ids ) { $db = $this->db; $sql = $this->writer->getQuery("fastload", array( "type"=>$type, "ids"=>$ids )); return $db->get( $sql ); } public function getBySQL( $rawsql, $slots, $table, $max=0 ) { return $this->search->sql( $rawsql, $slots, $table, $max ); } public function find(RedBean_OODBBean $bean, $searchoperators = array(), $start=0, $end=100, $orderby="id ASC", $extraSQL=false) { $this->checkBean( $bean ); $db = $this->db; $tbl = $db->escape( $bean->type ); $findSQL = $this->writer->getQuery("find",array( "searchoperators"=>$searchoperators, "bean"=>$bean, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL, "tbl"=>$tbl )); $ids = $db->getCol( $findSQL ); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->getById( $bean->type, $id , false); } } return $beans; } public function listAll($type, $start=false, $end=false, $orderby="id ASC", $extraSQL = false) { $db = $this->db; $listSQL = $this->writer->getQuery("list",array( "type"=>$type, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL )); return $db->get( $listSQL ); } public function associate( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { $db = $this->db; $bean1 = $this->checkBeanForAssoc($bean1); $bean2 = $this->checkBeanForAssoc($bean2); $this->openBean( $bean1, true ); $this->openBean( $bean2, true ); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2){ $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); if (!$this->frozen) { $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; } $assoccreateSQL = $this->writer->getQuery("create_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2, "engine"=>$this->engine )); $db->exec( $assoccreateSQL ); $db->exec( $this->writer->getQuery("add_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2 )) ); $this->addTable( $assoctable ); } } $assocSQL = $this->writer->getQuery("add_assoc_now", array( "id1"=>$id1, "id2"=>$id2, "assoctable"=>$assoctable )); $db->exec( $assocSQL ); } public function unassociate(RedBean_OODBBean $bean1, RedBean_OODBBean $bean2) { $db = $this->db; $bean1 = $this->checkBeanForAssoc($bean1); $bean2 = $this->checkBeanForAssoc($bean2); $this->openBean( $bean1, true ); $this->openBean( $bean2, true ); $idx1 = intval($bean1->id); $idx2 = intval($bean2->id); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2){ $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->showTables(); if (in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; $unassocSQL = $this->writer->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t2, "t2"=>$t1, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } $unassocSQL = $this->writer->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t1, "t2"=>$t2, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } if ($tp1==$tp2) { $assoctable2 = "pc_".$db->escape( $bean1->type )."_".$db->escape( $bean1->type ); $alltables = $this->showTables(); if (in_array($assoctable2, $alltables)) { $unassocSQL = $this->writer->getQuery("untree", array( "assoctable2"=>$assoctable2, "idx1"=>$idx1, "idx2"=>$idx2 )); $db->exec($unassocSQL); } } } public function getAssoc(RedBean_OODBBean $bean, $targettype) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $id = intval($bean->id); $t1 = $db->escape( $this->filter->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { if ($t1==$t2) { $t2.="2"; } $getassocSQL = $this->writer->getQuery("get_assoc",array( "t1"=>$t1, "t2"=>$t2, "assoctable"=>$assoctable, "id"=>$id )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function trash( RedBean_OODBBean $bean ) { $this->checkBean( $bean ); if (intval($bean->id)===0) return; $this->deleteAllAssoc( $bean ); $this->openBean($bean); $table = $this->db->escape($bean->type); $id = intval($bean->id); $this->db->exec( $this->writer->getQuery("trash",array( "table"=>$table, "id"=>$id )) ); } public function deleteAllAssoc( $bean ) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $this->openBean( $bean, true ); $id = intval( $bean->id ); $alltables = $this->showTables(); $t = $db->escape($bean->type); $checktables = array(); foreach( $alltables as $table ) { if (strpos($table,$t."_")!==false || strpos($table,"_".$t)!==false){ $checktables[] = $table; } } foreach($checktables as $table) { if (strpos($table,"pc_")===0){ $db->exec( $this->writer->getQuery("deltree",array( "id"=>$id, "table"=>$table )) ); } else { $db->exec( $this->writer->getQuery("unassoc_all_t1",array("table"=>$table,"t"=>$t,"id"=>$id)) ); $db->exec( $this->writer->getQuery("unassoc_all_t2",array("table"=>$table,"t"=>$t,"id"=>$id)) ); } } return true; } public function deleteAllAssocType( $targettype, $bean ) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $this->openBean( $bean, true ); $id = intval( $bean->id ); $t1 = $db->escape( $this->filter->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $availabletables = $this->showTables(); if (in_array('pc_'.$assoctable,$availabletables)){ $db->exec( $this->writer->getQuery("deltreetype",array( "assoctable"=>'pc_'.$assoctable, "id"=>$id )) ); } if (in_array($assoctable,$availabletables)) { $db->exec( $this->writer->getQuery("unassoctype1",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); $db->exec( $this->writer->getQuery("unassoctype2",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); } return true; } public function dispense( $type="StandardBean" ) { $oBean = new RedBean_OODBBean(); $oBean->type = $type; $oBean->id = 0; return $oBean; } public function addChild( RedBean_OODBBean $parent, RedBean_OODBBean $child ) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $child = $this->checkBeanForAssoc($child); $this->openBean( $parent, true ); $this->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $pid = intval($parent->id); $cid = intval($child->id); $assoctable = "pc_".$db->escape($parent->type."_".$parent->type); if (!$this->frozen) { $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { $assoccreateSQL = $this->writer->getQuery("create_tree",array( "engine"=>$this->engine, "assoctable"=>$assoctable )); $db->exec( $assoccreateSQL ); $db->exec( $this->writer->getQuery("unique", array( "assoctable"=>$assoctable )) ); $this->addTable( $assoctable ); } } $assocSQL = $this->writer->getQuery("add_child",array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec( $assocSQL ); } public function getChildren( RedBean_OODBBean $parent ) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $pid = intval($parent->id); $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $parent->type; $getassocSQL = $this->writer->getQuery("get_children", array( "assoctable"=>$assoctable, "pid"=>$pid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function getParent( RedBean_OODBBean $child ) { $db = $this->db; $child = $this->checkBeanForAssoc($child); $cid = intval($child->id); $assoctable = "pc_".$db->escape( $child->type . "_" . $child->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $child->type; $getassocSQL = $this->writer->getQuery("get_parent", array( "assoctable"=>$assoctable, "cid"=>$cid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function removeChild(RedBean_OODBBean $parent, RedBean_OODBBean $child) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $child = $this->checkBeanForAssoc($child); $this->openBean( $parent, true ); $this->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return true; } else { $pid = intval($parent->id); $cid = intval($child->id); $unassocSQL = $this->writer->getQuery("remove_child", array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec($unassocSQL); } } public function numofRelated( $type, RedBean_OODBBean $bean ) { $db = $this->db; $t2 = $this->filter->table( $db->escape( $type ) ); $this->checkBean( $bean ); $t1 = $this->filter->table( $bean->type ); $tref = $this->filter->table( $db->escape( $bean->type ) ); $id = intval( $bean->id ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $tables = $this->showTables(); if ($tables && is_array($tables) && count($tables) > 0) { if (in_array( $t1, $tables ) && in_array($t2, $tables)){ $sqlCountRelations = $this->writer->getQuery( "num_related", array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id ) ); return (int) $db->getCell( $sqlCountRelations ); } } else { return 0; } } public function generate( $classes, $prefix = false, $suffix = false ) { return $this->classGenerator->generate($classes,$prefix,$suffix); } public function setLockingTime( $timeInSecs ) { if (is_int($timeInSecs) && $timeInSecs >= 0) { $this->locktime = $timeInSecs; } else { throw new RedBean_Exception_InvalidArgument( "time must be integer >= 0" ); } } public function clean() { if ($this->frozen) { return false; } $db = $this->db; $tables = $db->getCol( $this->writer->getQuery("show_rtables") ); foreach($tables as $key=>$table) { $tables[$key] = $this->writer->getEscape().$table.$this->writer->getEscape(); } $sqlcleandatabase = $this->writer->getQuery("drop_tables",array( "tables"=>$tables )); $db->exec( $sqlcleandatabase ); $db->exec( $this->writer->getQuery("truncate_rtables") ); $this->resetAll(); return true; } public function removeUnused( ) { if ($this->frozen) { return false; } return $this->gc->removeUnused( $this, $this->db, $this->writer ); } public function dropColumn( $table, $property ) { if ($this->frozen) { return false; } $db = $this->db; $db->exec( $this->writer->getQuery("drop_column", array( "table"=>$table, "property"=>$property )) ); } public function trashAll($type) { $this->db->exec( $this->writer->getQuery("drop_type",array("type"=>$this->filter->table($type)))); } public static function gen($arg, $prefix = false, $suffix = false) { return self::getInstance()->generate($arg, $prefix, $suffix); } public static function keepInShape($gc = false ,$stdTable=false, $stdCol=false) { return self::getInstance()->optimizer->run($gc, $stdTable, $stdCol); } public function getInstOf( $className, $id=0 ) { if (!class_exists($className)) throw new Exception("Class does not Exist"); $object = new $className($id); return $object; } }
class RedBean_OODBBean { }
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)))))