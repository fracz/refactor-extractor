||||||||    public function sql($rawsql, $slots, $table, $max=0) {

        $db = $this->provider->getDatabase();

        $sql = $rawsql;

        if (is_array($slots)) {
            $sql = $this->processQuerySlots( $sql, $slots );
        }

        $sql = str_replace('@ifexists:','', $sql);
        $rs = $db->getCol( $this->provider->getWriter()->getQuery("where",array(
            "table"=>$table
            )) . $sql );

        $err = $db->getErrorMsg();
        if (!$this->frozen && strpos($err,"Unknown column")!==false && $max<10) {
            $matches = array();
            if (preg_match("/Unknown\scolumn\s'(.*?)'/",$err,$matches)) {
                if (count($matches)==2 && strpos($rawsql,'@ifexists')!==false) {
                    $rawsql = str_replace('@ifexists:`'.$matches[1].'`','NULL', $rawsql);
                    $rawsql = str_replace('@ifexists:'.$matches[1].'','NULL', $rawsql);
                    return $this->sql( $rawsql, $slots, $table, ++$max);
                }
            }
            return array();
        }
        else {
            if (is_array($rs)) {
                return $rs;
            }
            else {
                return array();
            }
        }


    }
}
abstract class RedBean_Mod {

    protected $provider;

    public function __construct(RedBean_OODB $provider) {
        $this->provider = $provider;
    }

}
/**
 * Observable
 * Base class for Observables
 * @package 		RedBean/Observable.php
 * @description		Part of the observer pattern in RedBean
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_Observable {
	/**
	 *
	 * @var array
	 */
	private $observers = array();

	/**
	 * Adds a listener to this instance
	 * @param $eventname
	 * @param $observer
	 * @return unknown_type
	 */
	public function addEventListener( $eventname, RedBean_Observer $observer ) {

		if (!isset($this->observers[ $eventname ])) {
			$this->observers[ $eventname ] = array();
		}

		$this->observers[ $eventname ][] = $observer;
	}

	/**
	 * Sends an event (signal) to the registered listeners
	 * @param $eventname
	 * @return unknown_type
	 */
	public function signal( $eventname ) {

		if (!isset($this->observers[ $eventname ])) {
			$this->observers[ $eventname ] = array();
		}

		foreach($this->observers[$eventname] as $observer) {
			$observer->onEvent( $eventname, $this );
		}

	}


}
/**
 * Observer
 * @package 		RedBean/Observer.php
 * @description		Part of the observer pattern in RedBean
 * @author			Gabor de Mooij
 * @license			BSD
 */
interface RedBean_Observer {

	/**
	 * Handles the event send by a RedBean Observable
	 * @param string $eventname
	 * @param RedBean_Observable $observable
	 * @return unknown_type
	 */
	public function onEvent( $eventname, RedBean_Observable $o );
}
/**
 * RedBean OODB (object oriented database)
 * @package 		RedBean/OODB.php
 * @description		Core class for the RedBean ORM pack
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_OODB {


	/**
	 * Indicates how long one can lock an item,
	 * defaults to ten minutes
	 * If a user opens a bean and he or she does not
	 * perform any actions on it others cannot modify the
	 * bean during this time interval.
	 * @var unknown_type
	 */
	private $locktime = 10;

	/**
	 * a standard adapter for use with RedBean's MYSQL Database wrapper or
	 * ADO library
	 * @var RedBean_DBAdapter
	 */
	private $db;

	/**
	 *
	 * @var boolean
	 */
	private $locking = true;



		/**
		 *
		 * @var string $pkey - a fingerprint for locking
		 */
		public $pkey = false;

		/**
		 * Indicates that a rollback is required
		 * @var unknown_type
		 */
		private $rollback = false;

		/**
		 *
		 * @var $this
		 */
		private $me = null;

		/**
		 *
		 * Indicates the current engine
		 * @var string
		 */
		private $engine = "myisam";

		/**
		 * @var boolean $frozen - indicates whether the db may be adjusted or not
		 */
		private $frozen = false;

		/**
		 * @var QueryWriter
		 */
		private $writer;


                private $beanchecker;
                private $gc;
                private $classGenerator;
                private $filter;
                private $search;
                private $optimizer;
                private $beanstore;

                private function __construct( $filter = false ) {
                    $this->filter = new RedBean_Mod_Filter_Strict();
                    $this->beanchecker = new RedBean_Mod_BeanChecker();
                    $this->gc = new RedBean_Mod_GarbageCollector();
                    $this->classGenerator = new RedBean_Mod_ClassGenerator( $this );
                    $this->search = new RedBean_Mod_Search( $this );
                    $this->optimizer = new RedBean_Mod_Optimizer( $this );
                    $this->beanstore = new RedBean_Mod_BeanStore( $this );
                }

                public function getFilter() {
                    return $this->filter;
                }

                public function setFilter( RedBean_Mod_Filter $filter ) {
                    $this->filter = $filter;
                }

                public function getWriter() {
                    return $this->writer;
                }

                public function isFrozen() {
                    return (boolean) $this->freeze;
                }

		/**
		 * Closes and unlocks the bean
		 * @return unknown_type
		 */
		public function __destruct() {

			$this->releaseAllLocks();

			$this->db->exec(
				$this->writer->getQuery("destruct", array("engine"=>$this->engine,"rollback"=>$this->rollback))
			);

		}




		/**
		 * Toggles Forward Locking
		 * @param $tf
		 * @return unknown_type
		 */
		public function setLocking( $tf ) {
			$this->locking = $tf;
		}

		public function getDatabase() {
			return $this->db;
		}

		public function setDatabase( RedBean_DBAdapter $db ) {
			$this->db = $db;
		}

		/**
		 * Gets the current locking mode (on or off)
		 * @return unknown_type
		 */
		public function getLocking() {
			return $this->locking;
		}


		/**
		 * Toggles optimizer
		 * @param $bool
		 * @return unknown_type
		 */
		public function setOptimizerActive( $bool ) {
			$this->optimizer = (boolean) $bool;
		}

		/**
		 * Returns state of the optimizer
		 * @param $bool
		 * @return unknown_type
		 */
		public function getOptimizerActive() {
			return $this->optimizer;
		}

		/**
		 * keeps the current instance
		 * @var RedBean_OODB
		 */
		private static $instance = null;

		/**
		 * Singleton
		 * @return unknown_type
		 */
		public function getInstance() {
			if (self::$instance === null) {
				self::$instance = new RedBean_OODB;
			}
			return self::$instance;
		}

		/**
		 * Checks whether a bean is valid
		 * @param $bean
		 * @return unknown_type
		 */
		public function checkBean(RedBean_OODBBean $bean) {
                    if (!$this->db) {
                        throw new RedBean_Exception_Security("No database object. Have you used kickstart to initialize RedBean?");
                    }
                    return $this->beanchecker->check( $bean );
		}

		/**
		 * same as check bean, but does additional checks for associations
		 * @param $bean
		 * @return unknown_type
		 */
		public function checkBeanForAssoc( $bean ) {

			//check the bean
			$this->checkBean($bean);

			//make sure it has already been saved to the database, else we have no id.
			if (intval($bean->id) < 1) {
				//if it's not saved, save it
				$bean->id = $this->set( $bean );
			}

			return $bean;

		}

		/**
		 * Returns the current engine
		 * @return unknown_type
		 */
		public function getEngine() {
			return $this->engine;
		}

		/**
		 * Sets the current engine
		 * @param $engine
		 * @return unknown_type
		 */
		public function setEngine( $engine ) {

			if ($engine=="myisam" || $engine=="innodb") {
				$this->engine = $engine;
			}
			else {
				throw new Exception("Unsupported database engine");
			}

			return $this->engine;

		}

		/**
		 * Will perform a rollback at the end of the script
		 * @return unknown_type
		 */
		public function rollback() {
			$this->rollback = true;
		}

		public function set( RedBean_OODBBean $bean ) {
                    return $this->beanstore->set($bean);
                }


		/**
		 * Infers the SQL type of a bean
		 * @param $v
		 * @return $type the SQL type number constant
		 */
		public function inferType( $v ) {

			$db = $this->db;
			$rawv = $v;

			$checktypeSQL = $this->writer->getQuery("infertype", array(
				"value"=> $this->db->escape(strval($v))
			));


			$db->exec( $checktypeSQL );
			$id = $db->getInsertID();

			$readtypeSQL = $this->writer->getQuery("readtype",array(
				"id"=>$id
			));

			$row=$db->getRow($readtypeSQL);


			$db->exec( $this->writer->getQuery("reset_dtyp") );

			$tp = 0;
			foreach($row as $t=>$tv) {
				if (strval($tv) === strval($rawv)) {
					return $tp;
				}
				$tp++;
			}
			return $tp;
		}

		/**
		 * Returns the RedBean type const for an SQL type
		 * @param $sqlType
		 * @return $typeno
		 */
		public function getType( $sqlType ) {

			if (in_array($sqlType,$this->writer->sqltype_typeno)) {
				$typeno = $this->writer->sqltype_typeno[$sqlType];
			}
			else {
				$typeno = -1;
			}

			return $typeno;
		}

		/**
		 * Initializes RedBean
		 * @return bool $true
		 */
		public function init( RedBean_QueryWriter $querywriter, $dontclose = false ) {

			$this->writer = $querywriter;


			//prepare database
			if ($this->engine === "innodb") {
				$this->db->exec($this->writer->getQuery("prepare_innodb"));
				$this->db->exec($this->writer->getQuery("starttransaction"));
			}
			else if ($this->engine === "myisam"){
				$this->db->exec($this->writer->getQuery("prepare_myisam"));
			}


			//generate the basic redbean tables
			//Create the RedBean tables we need -- this should only happen once..
			if (!$this->frozen) {

				$this->db->exec($this->writer->getQuery("clear_dtyp"));

				$this->db->exec($this->writer->getQuery("setup_dtyp"));

				$this->db->exec($this->writer->getQuery("setup_locking"));

				$this->db->exec($this->writer->getQuery("setup_tables"));
			}

			//generate a key
			if (!$this->pkey) {
				$this->pkey = str_replace(".","",microtime(true)."".mt_rand());
			}

			return true;
		}

		/**
		 * Freezes the database so it won't be changed anymore
		 * @return unknown_type
		 */
		public function freeze() {
			$this->frozen = true;
		}

		/**
		 * UNFreezes the database so it won't be changed anymore
		 * @return unknown_type
		 */
		public function unfreeze() {
			$this->frozen = false;
		}

		/**
		 * Returns all redbean tables or all tables in the database
		 * @param $all if set to true this function returns all tables instead of just all rb tables
		 * @return array $listoftables
		 */
		public function showTables( $all=false ) {

			$db = $this->db;

			if ($all && $this->frozen) {
				$alltables = $db->getCol($this->writer->getQuery("show_tables"));
				return $alltables;
			}
			else {
				$alltables = $db->getCol($this->writer->getQuery("show_rtables"));
				return $alltables;
			}

		}

		/**
		 * Registers a table with RedBean
		 * @param $tablename
		 * @return void
		 */
		public function addTable( $tablename ) {

			$db = $this->db;

			$tablename = $db->escape( $tablename );

			$db->exec($this->writer->getQuery("register_table",array("table"=>$tablename)));

		}

		/**
		 * UNRegisters a table with RedBean
		 * @param $tablename
		 * @return void
		 */
		public function dropTable( $tablename ) {

			$db = $this->db;

			$tablename = $db->escape( $tablename );

			$db->exec($this->writer->getQuery("unregister_table",array("table"=>$tablename)));


		}

		/**
		 * Quick and dirty way to release all locks
		 * @return unknown_type
		 */
		public function releaseAllLocks() {

			$this->db->exec($this->writer->getQuery("release",array("key"=>$this->pkey)));

		}


		/**
		 * Opens and locks a bean
		 * @param $bean
		 * @return unknown_type
		 */
		public function openBean( $bean, $mustlock=false) {

			$this->checkBean( $bean );

			//If locking is turned off, or the bean has no persistance yet (not shared) life is always a success!
			if (!$this->locking || $bean->id === 0) return true;
                        $db = $this->db;

			//remove locks that have been expired...
			$removeExpiredSQL = $this->writer->getQuery("remove_expir_lock", array(
				"locktime"=>$this->locktime
			));

			$db->exec($removeExpiredSQL);

			$tbl = $db->escape( $bean->type );
			$id = intval( $bean->id );

			//Is the bean already opened for us?
			$checkopenSQL = $this->writer->getQuery("get_lock",array(
				"id"=>$id,
				"table"=>$tbl,
				"key"=>$this->pkey
			));

			$row = $db->getRow($checkopenSQL);
			if ($row && is_array($row) && count($row)>0) {
				$updateexpstamp = $this->writer->getQuery("update_expir_lock",array(
					"time"=>time(),
					"id"=>$row["id"]
				));
				$db->exec($updateexpstamp);
				return true; //bean is locked for us!
			}

			//If you must lock a bean then the bean must have been locked by a previous call.
			if ($mustlock) {
				throw new RedBean_Exception_FailedAccessBean("Could not acquire a lock for bean $tbl . $id ");
				return false;
			}

			//try to get acquire lock on the bean
			$openSQL = $this->writer->getQuery("aq_lock", array(
				"table"=>$tbl,
				"id"=>$id,
				"key"=>$this->pkey,
				"time"=>time()
			));

			$trials = 0;
			$aff = 0;
			while( $aff < 1 && $trials < 5 ) {
				$db->exec($openSQL);
				$aff = $db->getAffectedRows();
				$trials++;
				if ($aff < 1) usleep(500000); //half a sec
			}

			if ($trials > 4) {
				return false;
			}
			else {
				return true;
			}
		}

		/**
		 * For internal use, synchronizes a block of code
		 * @param $toggle
		 * @return unknown_type
		 */
		private function sync( $toggle ) {

			$bean = $this->dispense("_syncmethod");
			$bean->id = 0;

			if ($toggle) {
				$this->openBean( $bean );
			}
			else {
				$this->closeBean( $bean );
			}
		}

		/**
		 * Gets a bean by its primary ID
		 * @param $type
		 * @param $id
		 * @return RedBean_OODBBean $bean
		 */
		public function getById($type, $id, $data=false) {

			$bean = $this->dispense( $type );
			$db = $this->db;
			$table = $db->escape( $type );
			$id = abs( intval( $id ) );
			$bean->id = $id;

			//try to open the bean
			$this->openBean($bean);

			//load the bean using sql
			if (!$data) {

				$getSQL = $this->writer->getQuery("get_bean",array(
					"type"=>$type,
					"id"=>$id
				));
				$row = $db->getRow( $getSQL );
			}
			else {
				$row = $data;
			}

			if ($row && is_array($row) && count($row)>0) {
				foreach($row as $p=>$v) {
					//populate the bean with the database row
					$bean->$p = $v;
				}
			}
			else {
				throw new RedBean_Exception_FailedAccessBean("bean not found");
			}

			return $bean;

		}

		/**
		 * Checks whether a type-id combination exists
		 * @param $type
		 * @param $id
		 * @return unknown_type
		 */
		public function exists($type,$id) {

			$db = $this->db;
			$id = intval( $id );
			$type = $db->escape( $type );

			//$alltables = $db->getCol("show tables");
			$alltables = $this->showTables();

			if (!in_array($type, $alltables)) {
				return false;
			}
			else {
				$no = $db->getCell( $this->writer->getQuery("bean_exists",array(
					"type"=>$type,
					"id"=>$id
				)) );
				if (intval($no)) {
					return true;
				}
				else {
					return false;
				}
			}
		}

		/**
		 * Counts occurences of  a bean
		 * @param $type
		 * @return integer $i
		 */
		public function numberof($type) {

			$db = $this->db;
			$type = $this->filter->table( $db->escape( $type ) );

			$alltables = $this->showTables();

			if (!in_array($type, $alltables)) {
				return 0;
			}
			else {
				$no = $db->getCell( $this->writer->getQuery("count",array(
					"type"=>$type
				)));
				return intval( $no );
			}
		}

		/**
		 * Gets all beans of $type, grouped by $field.
		 *
		 * @param String Object type e.g. "user" (lowercase!)
		 * @param String Field/parameter e.g. "zip"
		 * @return Array list of beans with distinct values of $field. Uses GROUP BY
		 * @author Alan J. Hogan
		 **/
		function distinct($type, $field)
		{
			//TODO: Consider if GROUP BY (equivalent meaning) is more portable
			//across DB types?
			$db = $this->db;
			$type = $this->filter->table( $db->escape( $type ) );
			$field = $db->escape( $field );

			$alltables = $this->showTables();

			if (!in_array($type, $alltables)) {
				return array();
			}
			else {
				$ids = $db->getCol( $this->writer->getQuery("distinct",array(
					"type"=>$type,
					"field"=>$field
				)));
				$beans = array();
				if (is_array($ids) && count($ids)>0) {
					foreach( $ids as $id ) {
						$beans[ $id ] = $this->getById( $type, $id , false);
					}
				}
				return $beans;
			}
		}

		/**
		 * Simple statistic
		 * @param $type
		 * @param $field
		 * @return integer $i
		 */
		private function stat($type,$field,$stat="sum") {

			$db = $this->db;
			$type = $this->filter->table( $db->escape( $type ) );
			$field = $this->filter->property( $db->escape( $field ) );
			$stat = $db->escape( $stat );

			$alltables = $this->showTables();

			if (!in_array($type, $alltables)) {
				return 0;
			}
			else {
				$no = $db->getCell($this->writer->getQuery("stat",array(
					"stat"=>$stat,
					"field"=>$field,
					"type"=>$type
				)));
				return floatval( $no );
			}
		}

		/**
		 * Sum
		 * @param $type
		 * @param $field
		 * @return float $i
		 */
		public function sumof($type,$field) {
			return $this->stat( $type, $field, "sum");
		}

		/**
		 * AVG
		 * @param $type
		 * @param $field
		 * @return float $i
		 */
		public function avgof($type,$field) {
			return $this->stat( $type, $field, "avg");
		}

		/**
		 * minimum
		 * @param $type
		 * @param $field
		 * @return float $i
		 */
		public function minof($type,$field) {
			return $this->stat( $type, $field, "min");
		}

		/**
		 * maximum
		 * @param $type
		 * @param $field
		 * @return float $i
		 */
		public function maxof($type,$field) {
			return $this->stat( $type, $field, "max");
		}


		/**
		 * Unlocks everything
		 * @return unknown_type
		 */
		public function resetAll() {
			$sql = $this->writer->getQuery("releaseall");
			$this->db->exec( $sql );
			return true;
		}

		/**
		 * Loads a collection of beans -fast-
		 * @param $type
		 * @param $ids
		 * @return unknown_type
		 */
		public function fastLoader( $type, $ids ) {

			$db = $this->db;


			$sql = $this->writer->getQuery("fastload", array(
				"type"=>$type,
				"ids"=>$ids
			));

			return $db->get( $sql );

		}

		/**
		 * Allows you to fetch an array of beans using plain
		 * old SQL.
		 * @param $rawsql
		 * @param $slots
		 * @param $table
		 * @param $max
		 * @return array $beans
		 */
		public function getBySQL( $rawsql, $slots, $table, $max=0 ) {

                        return $this->search->sql( $rawsql, $slots, $table, $max );

		}


     /**
     * Finds a bean using search parameters
     * @param $bean
     * @param $searchoperators
     * @param $start
     * @param $end
     * @param $orderby
     * @return unknown_type
     */
    public function find(RedBean_OODBBean $bean, $searchoperators = array(), $start=0, $end=100, $orderby="id ASC", $extraSQL=false) {

      $this->checkBean( $bean );
      $db = $this->db;
      $tbl = $db->escape( $bean->type );

      $findSQL = $this->writer->getQuery("find",array(
      	"searchoperators"=>$searchoperators,
      	"bean"=>$bean,
      	"start"=>$start,
      	"end"=>$end,
      	"orderby"=>$orderby,
      	"extraSQL"=>$extraSQL,
      	"tbl"=>$tbl
      ));

      $ids = $db->getCol( $findSQL );
      $beans = array();

      if (is_array($ids) && count($ids)>0) {
          foreach( $ids as $id ) {
            $beans[ $id ] = $this->getById( $bean->type, $id , false);
        }
      }

      return $beans;

    }


		/**
		 * Returns a plain and simple array filled with record data
		 * @param $type
		 * @param $start
		 * @param $end
		 * @param $orderby
		 * @return unknown_type
		 */
		public function listAll($type, $start=false, $end=false, $orderby="id ASC", $extraSQL = false) {

			$db = $this->db;

			$listSQL = $this->writer->getQuery("list",array(
				"type"=>$type,
				"start"=>$start,
				"end"=>$end,
				"orderby"=>$orderby,
				"extraSQL"=>$extraSQL
			));


			return $db->get( $listSQL );

		}


		/**
		 * Associates two beans
		 * @param $bean1
		 * @param $bean2
		 * @return unknown_type
		 */
		public function associate( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { //@associate

			//get a database
			$db = $this->db;

			//first we check the beans whether they are valid
			$bean1 = $this->checkBeanForAssoc($bean1);
			$bean2 = $this->checkBeanForAssoc($bean2);

			$this->openBean( $bean1, true );
			$this->openBean( $bean2, true );

			//sort the beans
			$tp1 = $bean1->type;
			$tp2 = $bean2->type;
			if ($tp1==$tp2){
				$arr = array( 0=>$bean1, 1 =>$bean2 );
			}
			else {
				$arr = array( $tp1=>$bean1, $tp2 =>$bean2 );
			}
			ksort($arr);
			$bean1 = array_shift( $arr );
			$bean2 = array_shift( $arr );

			$id1 = intval($bean1->id);
			$id2 = intval($bean2->id);

			//infer the association table
			$tables = array();
			array_push( $tables, $db->escape( $bean1->type ) );
			array_push( $tables, $db->escape( $bean2->type ) );
			//sort the table names to make sure we only get one assoc table
			sort($tables);
			$assoctable = $db->escape( implode("_",$tables) );

			//check whether this assoctable already exists
			if (!$this->frozen) {
				$alltables = $this->showTables();
				if (!in_array($assoctable, $alltables)) {
					//no assoc table does not exist, create it..
					$t1 = $tables[0];
					$t2 = $tables[1];

					if ($t1==$t2) {
						$t2.="2";
					}

					$assoccreateSQL = $this->writer->getQuery("create_assoc",array(
						"assoctable"=> $assoctable,
						"t1" =>$t1,
						"t2" =>$t2,
						"engine"=>$this->engine
					));

					$db->exec( $assoccreateSQL );

					//add a unique constraint
					$db->exec( $this->writer->getQuery("add_assoc",array(
						"assoctable"=> $assoctable,
						"t1" =>$t1,
						"t2" =>$t2
					)) );

					$this->addTable( $assoctable );
				}
			}

			//now insert the association record
			$assocSQL = $this->writer->getQuery("add_assoc_now", array(
				"id1"=>$id1,
				"id2"=>$id2,
				"assoctable"=>$assoctable
			));

			$db->exec( $assocSQL );


		}

		/**
		 * Breaks the association between a pair of beans
		 * @param $bean1
		 * @param $bean2
		 * @return unknown_type
		 */
		public function unassociate(RedBean_OODBBean $bean1, RedBean_OODBBean $bean2) {

			//get a database
			$db = $this->db;

			//first we check the beans whether they are valid
			$bean1 = $this->checkBeanForAssoc($bean1);
			$bean2 = $this->checkBeanForAssoc($bean2);


			$this->openBean( $bean1, true );
			$this->openBean( $bean2, true );


			$idx1 = intval($bean1->id);
			$idx2 = intval($bean2->id);

			//sort the beans
			$tp1 = $bean1->type;
			$tp2 = $bean2->type;

			if ($tp1==$tp2){
				$arr = array( 0=>$bean1, 1 =>$bean2 );
			}
			else {
				$arr = array( $tp1=>$bean1, $tp2 =>$bean2 );
			}

			ksort($arr);
			$bean1 = array_shift( $arr );
			$bean2 = array_shift( $arr );

			$id1 = intval($bean1->id);
			$id2 = intval($bean2->id);

			//infer the association table
			$tables = array();
			array_push( $tables, $db->escape( $bean1->type ) );
			array_push( $tables, $db->escape( $bean2->type ) );
			//sort the table names to make sure we only get one assoc table
			sort($tables);


			$assoctable = $db->escape( implode("_",$tables) );

			//check whether this assoctable already exists
			$alltables = $this->showTables();

			if (in_array($assoctable, $alltables)) {
				$t1 = $tables[0];
				$t2 = $tables[1];
				if ($t1==$t2) {
					$t2.="2";
					$unassocSQL = $this->writer->getQuery("unassoc",array(
					"assoctable"=>$assoctable,
					"t1"=>$t2,
					"t2"=>$t1,
					"id1"=>$id1,
					"id2"=>$id2
					));
					//$unassocSQL = "DELETE FROM `$assoctable` WHERE ".$t2."_id = $id1 AND ".$t1."_id = $id2 ";
					$db->exec($unassocSQL);
				}

				//$unassocSQL = "DELETE FROM `$assoctable` WHERE ".$t1."_id = $id1 AND ".$t2."_id = $id2 ";

				$unassocSQL = $this->writer->getQuery("unassoc",array(
					"assoctable"=>$assoctable,
					"t1"=>$t1,
					"t2"=>$t2,
					"id1"=>$id1,
					"id2"=>$id2
				));

				$db->exec($unassocSQL);
			}
			if ($tp1==$tp2) {
				$assoctable2 = "pc_".$db->escape( $bean1->type )."_".$db->escape( $bean1->type );
				//echo $assoctable2;
				//check whether this assoctable already exists
				$alltables = $this->showTables();
				if (in_array($assoctable2, $alltables)) {

					//$id1 = intval($bean1->id);
					//$id2 = intval($bean2->id);
					$unassocSQL = $this->writer->getQuery("untree", array(
						"assoctable2"=>$assoctable2,
						"idx1"=>$idx1,
						"idx2"=>$idx2
					));

					$db->exec($unassocSQL);
				}
			}
		}

		/**
		 * Fetches all beans of type $targettype assoiciated with $bean
		 * @param $bean
		 * @param $targettype
		 * @return array $beans
		 */
		public function getAssoc(RedBean_OODBBean $bean, $targettype) {
			//get a database
			$db = $this->db;
			//first we check the beans whether they are valid
			$bean = $this->checkBeanForAssoc($bean);

			$id = intval($bean->id);


			//obtain the table names
			$t1 = $db->escape( $this->filter->table($bean->type) );
			$t2 = $db->escape( $targettype );

			//infer the association table
			$tables = array();
			array_push( $tables, $t1 );
			array_push( $tables, $t2 );
			//sort the table names to make sure we only get one assoc table
			sort($tables);
			$assoctable = $db->escape( implode("_",$tables) );

			//check whether this assoctable exists
			$alltables = $this->showTables();

			if (!in_array($assoctable, $alltables)) {
				return array(); //nope, so no associations...!
			}
			else {
				if ($t1==$t2) {
					$t2.="2";
				}

				$getassocSQL = $this->writer->getQuery("get_assoc",array(
					"t1"=>$t1,
					"t2"=>$t2,
					"assoctable"=>$assoctable,
					"id"=>$id
				));


				$rows = $db->getCol( $getassocSQL );
				$beans = array();
				if ($rows && is_array($rows) && count($rows)>0) {
					foreach($rows as $i) {
						$beans[$i] = $this->getById( $targettype, $i, false);
					}
				}
				return $beans;
			}


		}


		/**
		 * Removes a bean from the database and breaks associations if required
		 * @param $bean
		 * @return unknown_type
		 */
		public function trash( RedBean_OODBBean $bean ) {

			$this->checkBean( $bean );
			if (intval($bean->id)===0) return;
			$this->deleteAllAssoc( $bean );
			$this->openBean($bean);
			$table = $this->db->escape($bean->type);
			$id = intval($bean->id);
			$this->db->exec( $this->writer->getQuery("trash",array(
				"table"=>$table,
				"id"=>$id
			)) );

		}

		/**
		 * Breaks all associations of a perticular bean $bean
		 * @param $bean
		 * @return unknown_type
		 */
		public function deleteAllAssoc( $bean ) {

			$db = $this->db;
			$bean = $this->checkBeanForAssoc($bean);

			$this->openBean( $bean, true );


			$id = intval( $bean->id );

			//get all tables
			$alltables = $this->showTables();

			//are there any possible associations?
			$t = $db->escape($bean->type);
			$checktables = array();
			foreach( $alltables as $table ) {
				if (strpos($table,$t."_")!==false || strpos($table,"_".$t)!==false){
					$checktables[] = $table;
				}
			}

			//remove every possible association
			foreach($checktables as $table) {
				if (strpos($table,"pc_")===0){

					$db->exec( $this->writer->getQuery("deltree",array(
						"id"=>$id,
						"table"=>$table
					)) );
				}
				else {

					$db->exec( $this->writer->getQuery("unassoc_all_t1",array("table"=>$table,"t"=>$t,"id"=>$id)) );
					$db->exec( $this->writer->getQuery("unassoc_all_t2",array("table"=>$table,"t"=>$t,"id"=>$id)) );
				}


			}
			return true;
		}

		/**
		 * Breaks all associations of a perticular bean $bean
		 * @param $bean
		 * @return unknown_type
		 */
		public function deleteAllAssocType( $targettype, $bean ) {

			$db = $this->db;
			$bean = $this->checkBeanForAssoc($bean);
			$this->openBean( $bean, true );

			$id = intval( $bean->id );

			//obtain the table names
			$t1 = $db->escape( $this->filter->table($bean->type) );
			$t2 = $db->escape( $targettype );

			//infer the association table
			$tables = array();
			array_push( $tables, $t1 );
			array_push( $tables, $t2 );
			//sort the table names to make sure we only get one assoc table
			sort($tables);
			$assoctable = $db->escape( implode("_",$tables) );

			$availabletables = $this->showTables();


			if (in_array('pc_'.$assoctable,$availabletables)){
				$db->exec( $this->writer->getQuery("deltreetype",array(
					"assoctable"=>'pc_'.$assoctable,
					"id"=>$id
				)) );
			}
			if (in_array($assoctable,$availabletables)) {
				$db->exec( $this->writer->getQuery("unassoctype1",array(
					"assoctable"=>$assoctable,
					"t1"=>$t1,
					"id"=>$id
				)) );
				$db->exec( $this->writer->getQuery("unassoctype2",array(
					"assoctable"=>$assoctable,
					"t1"=>$t1,
					"id"=>$id
				)) );

			}

			return true;
		}


		/**
		 * Dispenses; creates a new OODB bean of type $type
		 * @param $type
		 * @return RedBean_OODBBean $bean
		 */
		public function dispense( $type="StandardBean" ) {

			$oBean = new RedBean_OODBBean();
			$oBean->type = $type;
			$oBean->id = 0;
			return $oBean;
		}


		/**
		 * Adds a child bean to a parent bean
		 * @param $parent
		 * @param $child
		 * @return unknown_type
		 */
		public function addChild( RedBean_OODBBean $parent, RedBean_OODBBean $child ) {

			//get a database
			$db = $this->db;

			//first we check the beans whether they are valid
			$parent = $this->checkBeanForAssoc($parent);
			$child = $this->checkBeanForAssoc($child);

			$this->openBean( $parent, true );
			$this->openBean( $child, true );


			//are parent and child of the same type?
			if ($parent->type !== $child->type) {
				throw new RedBean_Exception_InvalidParentChildCombination();
			}

			$pid = intval($parent->id);
			$cid = intval($child->id);

			//infer the association table
			$assoctable = "pc_".$db->escape($parent->type."_".$parent->type);

			//check whether this assoctable already exists
			if (!$this->frozen) {
				$alltables = $this->showTables();
				if (!in_array($assoctable, $alltables)) {
					//no assoc table does not exist, create it..
					$assoccreateSQL = $this->writer->getQuery("create_tree",array(
						"engine"=>$this->engine,
						"assoctable"=>$assoctable
					));
					$db->exec( $assoccreateSQL );
					//add a unique constraint
					$db->exec( $this->writer->getQuery("unique", array(
						"assoctable"=>$assoctable
					)) );
					$this->addTable( $assoctable );
				}
			}

			//now insert the association record
			$assocSQL = $this->writer->getQuery("add_child",array(
				"assoctable"=>$assoctable,
				"pid"=>$pid,
				"cid"=>$cid
			));
			$db->exec( $assocSQL );

		}

		/**
		 * Returns all child beans of parent bean $parent
		 * @param $parent
		 * @return array $beans
		 */
		public function getChildren( RedBean_OODBBean $parent ) {

			//get a database
			$db = $this->db;

			//first we check the beans whether they are valid
			$parent = $this->checkBeanForAssoc($parent);

			$pid = intval($parent->id);

			//infer the association table
			$assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type );

			//check whether this assoctable exists
			$alltables = $this->showTables();
			if (!in_array($assoctable, $alltables)) {
				return array(); //nope, so no children...!
			}
			else {
				$targettype = $parent->type;
				$getassocSQL = $this->writer->getQuery("get_children", array(
					"assoctable"=>$assoctable,
					"pid"=>$pid
				));
				$rows = $db->getCol( $getassocSQL );
				$beans = array();
				if ($rows && is_array($rows) && count($rows)>0) {
					foreach($rows as $i) {
						$beans[$i] = $this->getById( $targettype, $i, false);
					}
				}
				return $beans;
			}

		}

		/**
		 * Fetches the parent bean of child bean $child
		 * @param $child
		 * @return RedBean_OODBBean $parent
		 */
		public function getParent( RedBean_OODBBean $child ) {


			//get a database
			$db = $this->db;

			//first we check the beans whether they are valid
			$child = $this->checkBeanForAssoc($child);

			$cid = intval($child->id);

			//infer the association table
			$assoctable = "pc_".$db->escape( $child->type . "_" . $child->type );
			//check whether this assoctable exists
			$alltables = $this->showTables();
			if (!in_array($assoctable, $alltables)) {
				return array(); //nope, so no children...!
			}
			else {
				$targettype = $child->type;

				$getassocSQL = $this->writer->getQuery("get_parent", array(
					"assoctable"=>$assoctable,
					"cid"=>$cid
				));

				$rows = $db->getCol( $getassocSQL );
				$beans = array();
				if ($rows && is_array($rows) && count($rows)>0) {
					foreach($rows as $i) {
						$beans[$i] = $this->getById( $targettype, $i, false);
					}
				}

				return $beans;
			}

		}

		/**
		 * Removes a child bean from a parent-child association
		 * @param $parent
		 * @param $child
		 * @return unknown_type
		 */
		public function removeChild(RedBean_OODBBean $parent, RedBean_OODBBean $child) {

			//get a database
			$db = $this->db;

			//first we check the beans whether they are valid
			$parent = $this->checkBeanForAssoc($parent);
			$child = $this->checkBeanForAssoc($child);

			$this->openBean( $parent, true );
			$this->openBean( $child, true );


			//are parent and child of the same type?
			if ($parent->type !== $child->type) {
				throw new RedBean_Exception_InvalidParentChildCombination();
			}

			//infer the association table
			$assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type );

			//check whether this assoctable already exists
			$alltables = $this->showTables();
			if (!in_array($assoctable, $alltables)) {
				return true; //no association? then nothing to do!
			}
			else {
				$pid = intval($parent->id);
				$cid = intval($child->id);
				$unassocSQL = $this->writer->getQuery("remove_child", array(
					"assoctable"=>$assoctable,
					"pid"=>$pid,
					"cid"=>$cid
				));
				$db->exec($unassocSQL);
			}
		}

		/**
		 * Counts the associations between a type and a bean
		 * @param $type
		 * @param $bean
		 * @return integer $numberOfRelations
		 */
		public function numofRelated( $type, RedBean_OODBBean $bean ) {

			//get a database
			$db = $this->db;

			$t2 = $this->filter->table( $db->escape( $type ) );

			//is this bean valid?
			$this->checkBean( $bean );
			$t1 = $this->filter->table( $bean->type  );
			$tref = $this->filter->table( $db->escape( $bean->type ) );
			$id = intval( $bean->id );

			//infer the association table
			$tables = array();
			array_push( $tables, $t1 );
			array_push( $tables, $t2 );

			//sort the table names to make sure we only get one assoc table
			sort($tables);
			$assoctable = $db->escape( implode("_",$tables) );

			//get all tables
			$tables = $this->showTables();

			if ($tables && is_array($tables) && count($tables) > 0) {
				if (in_array( $t1, $tables ) && in_array($t2, $tables)){
					$sqlCountRelations = $this->writer->getQuery(
						"num_related", array(
							"assoctable"=>$assoctable,
							"t1"=>$t1,
							"id"=>$id
						)
					);

					return (int) $db->getCell( $sqlCountRelations );
				}
			}
			else {
				return 0;
			}
		}

		/**
		 * Accepts a comma separated list of class names and
		 * creates a default model for each classname mentioned in
		 * this list. Note that you should not gen() classes
		 * for which you already created a model (by inheriting
		 * from ReadBean_Decorator).
		 * @param string $classes
		 * @param string $prefix prefix for framework integration (optional, constant is used otherwise)
		 * @param string $suffix suffix for framework integration (optional, constant is used otherwise)
		 * @return unknown_type
		 */

		public function generate( $classes, $prefix = false, $suffix = false ) {
			return $this->classGenerator->generate($classes,$prefix,$suffix);
                }




		/**
		 * Changes the locktime, this time indicated how long
		 * a user can lock a bean in the database.
		 * @param $timeInSecs
		 * @return unknown_type
		 */
		public function setLockingTime( $timeInSecs ) {

			if (is_int($timeInSecs) && $timeInSecs >= 0) {
				$this->locktime = $timeInSecs;
			}
			else {
				throw new RedBean_Exception_InvalidArgument( "time must be integer >= 0" );
			}
		}



		/**
		 * Cleans the entire redbean database, this will not affect
		 * tables that are not managed by redbean.
		 * @return unknown_type
		 */
		public function clean() {

			if ($this->frozen) {
				return false;
			}

			$db = $this->db;

			$tables = $db->getCol( $this->writer->getQuery("show_rtables") );

			foreach($tables as $key=>$table) {
				$tables[$key] = $this->writer->getEscape().$table.$this->writer->getEscape();
			}

			$sqlcleandatabase = $this->writer->getQuery("drop_tables",array(
				"tables"=>$tables
			));

			$db->exec( $sqlcleandatabase );

			$db->exec( $this->writer->getQuery("truncate_rtables") );
			$this->resetAll();
			return true;

		}


		/**
		 * Removes all tables from redbean that have
		 * no classes
		 * @return unknown_type
		 */
		public function removeUnused( ) {

			//oops, we are frozen, so no change..
			if ($this->frozen) {
				return false;
			}

                        return $this->gc->removeUnused( $this, $this->db, $this->writer );


		}
		/**
		 * Drops a specific column
		 * @param $table
		 * @param $property
		 * @return unknown_type
		 */
		public function dropColumn( $table, $property ) {

			//oops, we are frozen, so no change..
			if ($this->frozen) {
				return false;
			}

			//get a database
			$db = $this->db;

			$db->exec( $this->writer->getQuery("drop_column", array(
				"table"=>$table,
				"property"=>$property
			)) );

		}

		/**
	     * Removes all beans of a particular type
	     * @param $type
	     * @return nothing
	     */
	    public function trashAll($type) {
	        $this->db->exec( $this->writer->getQuery("drop_type",array("type"=>$this->filter->table($type))));
	    }



		public static function gen($arg, $prefix = false, $suffix = false) {
			return self::getInstance()->generate($arg, $prefix, $suffix);
		}

		public static function keepInShape($gc = false ,$stdTable=false, $stdCol=false) {
			return self::getInstance()->optimizer->run($gc, $stdTable, $stdCol);
		}

                public function getInstOf( $className, $id=0 ) {
                    if (!class_exists($className)) throw new Exception("Class does not Exist");
                    $object = new $className($id);
                    return $object;
                }
}
/**
 * RedBean_OODBBean (Object Oriented DataBase Bean)
 * @package 		RedBean/RedBean_OODBBean.php
 * @description		The Bean class used for passing information
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_OODBBean {
}
/**
 * Querylogger
 * @package 		RedBean/QueryLogger.php
 * @description		Simple Audit Logger
 * @author			Gabor de Mooij
 * @license			BSD
 */
class Redbean_Querylogger implements RedBean_Observer
{

	/**
	 * @var string
	 */
	private $path = "";

	/**
	 *
	 * @var integer
	 */
	private $userid = 0;

	private function getFilename() {
		return $this->path . "audit_".date("m_d_y").".log";
	}

	/**
	 * Logs a piece of SQL code
	 * @param $sql
	 * @return void
	 */
	public function logSCQuery( $sql, $db )
    {
		$sql = addslashes($sql);
		$line = "\n".date("H:i:s")."|".$_SERVER["REMOTE_ADDR"]."|UID=".$this->userid."|".$sql;
		file_put_contents( $this->getFilename(), $line, FILE_APPEND );
		return null;
	}

	/**
	 * Inits the logger
	 * @param $path
	 * @param $userid
	 * @return unknown_type
	 */
	public static function init($path="",$userid=0) {

		$logger = new self;
		$logger->userid = $userid;
		$logger->path = $path;
		if (!file_exists($logger->getFilename())) {
			file_put_contents($logger->getFilename(),"begin logging");
		}

		RedBean_OODB::getInstance()->getDatabase()->addEventListener( "sql_exec", $logger );

	}

	/**
	 * (non-PHPdoc)
	 * @see RedBean/RedBean_Observer#onEvent()
	 */
	public function onEvent( $event, RedBean_Observable $db ) {

		$this->logSCQuery( $db->getSQL(), $db );
	}


}
/**
 * RedBean MySQLWriter
 * @package 		RedBean/QueryWriter/MySQL.php
 * @description		Writes Queries for MySQL Databases
 * @author			Gabor de Mooij
 * @license			BSD
 */
class QueryWriter_MySQL implements RedBean_QueryWriter {
	/**
	 * @var array all allowed sql types
	 */
	public $typeno_sqltype = array(
		" TINYINT(3) UNSIGNED ",
		" INT(11) UNSIGNED ",
		" BIGINT(20) ",
		" VARCHAR(255) ",
		" TEXT ",
		" LONGTEXT "
		);

		/**
		 *
		 * @var array all allowed sql types
		 */
		public $sqltype_typeno = array(
		"tinyint(3) unsigned"=>0,
		"int(11) unsigned"=>1,
		"bigint(20)"=>2,
		"varchar(255)"=>3,
		"text"=>4,
		"longtext"=>5
		);

		/**
		 * @var array all dtype types
		 */
		public $dtypes = array(
		"tintyintus","intus","ints","varchar255","text","ltext"
		);

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryCreateTable( $options=array() ) {

			$engine = $options["engine"];
			$table = $options["table"];

			if ($engine=="myisam") {

				//this fellow has no table yet to put his beer on!
				$createtableSQL = "
			 CREATE TABLE `$table` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = MYISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
			";
			}
			else {
				$createtableSQL = "
			 CREATE TABLE `$table` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
			";

			}
			return $createtableSQL;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryWiden( $options ) {
			extract($options);
			return "ALTER TABLE `$table` CHANGE `$column` `$column` $newtype ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryAddColumn( $options ) {
			extract($options);
			return "ALTER TABLE `$table` ADD `$column` $type ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUpdate( $options ) {
			extract($options);
			$update = array();
			foreach($updatevalues as $u) {
				$update[] = " `".$u["property"]."` = \"".$u["value"]."\" ";
			}
			return "UPDATE `$table` SET ".implode(",",$update)." WHERE id = ".$id;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryInsert( $options ) {

			extract($options);

			foreach($insertcolumns as $k=>$v) {
				$insertcolumns[$k] = "`".$v."`";
			}

			foreach($insertvalues as $k=>$v) {
				$insertvalues[$k] = "\"".$v."\"";
			}

			$insertSQL = "INSERT INTO `$table`
					  ( id, ".implode(",",$insertcolumns)." )
					  VALUES( null, ".implode(",",$insertvalues)." ) ";
			return $insertSQL;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryCreate( $options ) {
			extract($options);
			return "INSERT INTO `$table` (id) VALUES(null) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryInferType( $options ) {
			extract($options);
			$v = "\"".$value."\"";
			$checktypeSQL = "insert into dtyp VALUES(null,$v,$v,$v,$v,$v )";
			return $checktypeSQL;
		}

		/**
		 *
		 * @return string $query
		 */
		private function getQueryResetDTYP() {
			return "truncate table dtyp";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryRegisterTable( $options ) {
			extract( $options );
			return "replace into redbeantables values (null, \"$table\") ";
		}
		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUnregisterTable( $options ) {
			extract( $options );
			return "delete from redbeantables where tablename = \"$table\" ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryRelease( $options ) {
			extract( $options );
			return "DELETE FROM locking WHERE fingerprint=\"".$key."\" ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryRemoveExpirLock( $options ) {
			extract( $options );
			return "DELETE FROM locking WHERE expire <= ".(time()-$locktime);
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUpdateExpirLock( $options ) {
			extract( $options );
			return "UPDATE locking SET expire=".$time." WHERE id =".$id;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryAQLock( $options ) {
			extract($options);
			return "INSERT INTO locking VALUES(\"$table\",$id,\"".$key."\",\"".$time."\") ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryDistinct($options) {
			extract($options);
			return "SELECT id FROM `$type` GROUP BY $field";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryFastLoad( $options ) {
			extract( $options );
			return "SELECT * FROM `$type` WHERE id IN ( ".implode(",", $ids)." ) ORDER BY FIELD(id,".implode(",", $ids).") ASC		";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryWhere($options) {
			extract($options);
			return "select `$table`.id from $table where ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryFind($options) {

			extract($options);
			$db = RedBean_OODB::getInstance()->getDatabase();
			$findSQL = "SELECT id FROM `$tbl` WHERE ";


			foreach($bean as $p=>$v) {
				if ($p === "type" || $p === "id") continue;
				$p = $db->escape($p);
				$v = $db->escape($v);
				if (isset($searchoperators[$p])) {
					if ($searchoperators[$p]==="LIKE") {
						$part[] = " `$p`LIKE \"%$v%\" ";
					}
					else {
						$part[] = " `$p` ".$searchoperators[$p]." \"$v\" ";
					}
				}
				else {
				}
			}
			if ($extraSQL) {
				$findSQL .= @implode(" AND ",$part) . $extraSQL;
			}
			else {
				$findSQL .= @implode(" AND ",$part) . " ORDER BY $orderby LIMIT $start, $end ";
			}
			return $findSQL;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryList($options) {
			extract($options);
			$db = RedBean_OODB::getInstance()->getDatabase();
			if ($extraSQL) {
				$listSQL = "SELECT * FROM ".$db->escape($type)." ".$extraSQL;
			}
			else {
				$listSQL = "SELECT * FROM ".$db->escape($type)."
			ORDER BY ".$orderby;
				if ($end !== false && $start===false) {
					$listSQL .= " LIMIT ".intval($end);
				}
				if ($start !== false && $end !== false) {
					$listSQL .= " LIMIT ".intval($start).", ".intval($end);
				}
				if ($start !== false && $end===false) {
					$listSQL .= " LIMIT ".intval($start).", 18446744073709551615 ";
				}
			}
			return $listSQL;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryAddAssocNow( $options ) {
			extract($options);
			return "REPLACE INTO `$assoctable` VALUES(null,$id1,$id2) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUnassoc( $options ) {
			extract($options);
			return "DELETE FROM `$assoctable` WHERE ".$t1."_id = $id1 AND ".$t2."_id = $id2 ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryCreateAssoc($options) {

			extract($options);

			return "
			 CREATE TABLE `$assoctable` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			`".$t1."_id` INT( 11 ) UNSIGNED NOT NULL,
			`".$t2."_id` INT( 11 ) UNSIGNED NOT NULL,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = ".$engine.";
			";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUntree( $options ) {
			extract($options);
			return "DELETE FROM `$assoctable2` WHERE
				(parent_id = $idx1 AND child_id = $idx2) OR
				(parent_id = $idx2 AND child_id = $idx1) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryAddAssoc($options) {
			extract( $options );
			return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`".$t1."_id`, `".$t2."_id` ) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryDeltreeType($options) {
			extract( $options );
			return "DELETE FROM $assoctable WHERE parent_id = $id  OR child_id = $id ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryCreateTree( $options ) {
			extract( $options );
			return "
				 CREATE TABLE `$assoctable` (
				`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				`parent_id` INT( 11 ) UNSIGNED NOT NULL,
				`child_id` INT( 11 ) UNSIGNED NOT NULL,
				 PRIMARY KEY ( `id` )
				 ) ENGINE = ".$engine.";
				";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUnique( $options ) {
			extract( $options );
			return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`parent_id`, `child_id` ) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryAddChild( $options ) {
			extract( $options );
			return "REPLACE INTO `$assoctable` VALUES(null,$pid,$cid) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryRemoveChild( $options ) {
			extract( $options );
			return "DELETE FROM `$assoctable` WHERE
				( parent_id = $pid AND child_id = $cid ) ";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryDescribe( $options ) {
			extract( $options );
			return "describe `$table`";
		}


		/**
	     * Returns an array of table Columns
	     * @return array
	     */
	    public function getTableColumns($tbl, RedBean_DBAdapter $db) {
	        $rs = $db->get($this->getQuery("describe",array(
	            "table"=>$tbl
	        )));

	        return $rs;
	    }


		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryDropTables( $options ) {
			extract($options);
			return "drop tables ".implode(",",$tables);
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryDropColumn( $options ) {
			extract($options);
			return "ALTER TABLE `$table` DROP `$property`";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryTestColumn( $options ) {
			extract($options);
			return "alter table `$table` add __test  ".$type;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryUpdateTest( $options ) {
			extract($options);
			return "update `$table` set __test=`$col`";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryMeasure( $options ) {
			extract($options);
			return "select count(*) as df from `$table` where
				strcmp(`$col`,__test) != 0 AND `$col` IS NOT NULL";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryRemoveTest($options) {
			extract($options);
			return "alter table `$table` change `$col` `$col` ".$type;
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getQueryDropTest($options) {
			extract($options);
			return "alter table `$table` drop __test";
		}


		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getIndex1($options) {
			extract($options);
			return "ALTER IGNORE TABLE `$table` ADD INDEX $indexname (`$col`)";
		}

		/**
		 *
		 * @param $options
		 * @return string $query
		 */
		private function getIndex2($options) {
			extract($options);
			return "ALTER IGNORE TABLE `$table` DROP INDEX $indexname";
		}

		/**
		 * Get SQL for destructors
		 * @param $options
		 * @return string $query
		 */
		private function getDestruct($options) {
			extract($options);
			if ($rollback) return;
			if ($engine=="innodb") return "COMMIT"; else return "";
		}

		/**
		 * Gets a basic SQL query
		 * @param array $options
		 * @param string $sql_type
		 * @return string $sql
		 */
		private function getBasicQuery( $options, $sql_type="SELECT" ) {
			extract($options);
			if (isset($fields)){
				$sqlfields = array();
				foreach($fields as $field) {
					$sqlfields[] = " `$field` ";
				}
				$field = implode(",", $fields);
			}
			if (!isset($field)) $field="";
			$sql = "$sql_type ".$field." FROM `$table` ";
			if (isset($where)) {
				if (is_array($where)) {
					$crit = array();
					foreach($where as $w=>$v) {
						$crit[] = " `$w` = \"".$v."\"";
					}
					$sql .= " WHERE ".implode(" AND ",$crit);
				}
				else {
					$sql .= " WHERE ".$where;
				}
			}
			return $sql;
		}


		/**
		 * (non-PHPdoc)
		 * @see RedBean/QueryWriter#getQuery()
		 */
		public function getQuery( $queryname, $params=array() ) {
			//echo "<br><b style='color:yellow'>$queryname</b>";
			switch($queryname) {
				case "create_table":
					return $this->getQueryCreateTable($params);
					break;
				case "widen_column":
					return $this->getQueryWiden($params);
					break;
				case "add_column":
					return $this->getQueryAddColumn($params);
					break;
				case "update":
					return $this->getQueryUpdate($params);
					break;
				case "insert":
					return $this->getQueryInsert($params);
					break;
				case "create":
					return $this->getQueryCreate($params);
					break;
				case "infertype":
					return $this->getQueryInferType($params);
					break;
				case "readtype":
		 			return $this->getBasicQuery(
		 				array("fields"=>array("tinyintus","intus","ints","varchar255","text"),
		 					"table" =>"dtyp",
		 					"where"=>array("id"=>$params["id"])));
		 			break;
				case "reset_dtyp":
					return $this->getQueryResetDTYP();
					break;
				case "prepare_innodb":
					return "SET autocommit=0";
					break;
				case "prepare_myisam":
					return "SET autocommit=1";
					break;
				case "starttransaction":
					return "START TRANSACTION";
					break;
				case "setup_dtyp":
					$engine = RedBean_OODB::getInstance()->getEngine();
					return "
				CREATE TABLE IF NOT EXISTS `dtyp` (
				  `id` int(11) unsigned NOT NULL auto_increment,
				  `tinyintus` tinyint(3) unsigned NOT NULL,
				  `intus` int(11) unsigned NOT NULL,
				  `ints` bigint(20) NOT NULL,
				  `varchar255` varchar(255) NOT NULL,
				  `text` text NOT NULL,
				  PRIMARY KEY  (`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				";
					break;
				case "clear_dtyp":
					return "drop tables dtyp";
					break;
				case "setup_locking":
					$engine = RedBean_OODB::getInstance()->getEngine();
					return "
				CREATE TABLE IF NOT EXISTS `locking` (
				  `tbl` varchar(255) NOT NULL,
				  `id` bigint(20) NOT NULL,
				  `fingerprint` varchar(255) NOT NULL,
				  `expire` int(11) NOT NULL,
				  UNIQUE KEY `tbl` (`tbl`,`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				";
					break;
				case "setup_tables":
					$engine = RedBean_OODB::getInstance()->getEngine();
					return "
				 CREATE TABLE IF NOT EXISTS `redbeantables` (
				 `id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				 `tablename` VARCHAR( 255 ) NOT NULL ,
				 PRIMARY KEY ( `id` ),
				 UNIQUE KEY `tablename` (`tablename`)
				 ) ENGINE = $engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				";
					break;
				case "show_tables":
					return "show tables";
					break;
				case "show_rtables":
					return "select tablename from redbeantables";
					break;
				case "register_table":
					return $this->getQueryRegisterTable( $params );
					break;
				case "unregister_table":
					return $this->getQueryUnregisterTable( $params );
					break;
				case "release":
					return $this->getQueryRelease( $params );
					break;
				case "remove_expir_lock":
					return $this->getQueryRemoveExpirLock( $params );
					break;
				case "update_expir_lock":
					return $this->getQueryUpdateExpirLock( $params );
					break;
				case "aq_lock":
					return $this->getQueryAQLock( $params );
					break;
				case "get_lock":
					return $this->getBasicQuery(array("fields"=>array("id"),"table"=>"locking","where"=>array("id"=>$params["id"],"tbl"=>$params["table"],"fingerprint"=>$params["key"])));
					break;
				case "get_bean":
					return $this->getBasicQuery(array("field"=>"*","table"=>$params["type"],"where"=>array("id"=>$params["id"])));
					break;
				case "bean_exists":
					return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"],"where"=>array("id"=>$params["id"])));
					break;
				case "count":
					return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"]));
					break;
				case "distinct":
					return $this->getQueryDistinct($params);
					break;
				case "stat":
					return $this->getBasicQuery(array("field"=>$params["stat"]."(`".$params["field"]."`)","table"=>$params["type"]));
					break;
				case "releaseall":
					return "TRUNCATE locking";
					break;
				case "fastload":
					return $this->getQueryFastLoad($params);
					break;
				case "where":
					return $this->getQueryWhere($params);
					break;
				case "find":
					return $this->getQueryFind( $params);
					break;
				case "list":
					return $this->getQueryList( $params);
					break;
				case "create_assoc":
					return $this->getQueryCreateAssoc( $params );
					break;
				case "add_assoc":
					return $this->getQueryAddAssoc( $params );
					break;
				case "add_assoc_now":
					return $this->getQueryAddAssocNow( $params );
					break;
				case "unassoc":
					return $this->getQueryUnassoc( $params );
					break;
				case "untree":
					return $this->getQueryUntree( $params );
					break;
				case "get_assoc":
					$col = $params["t1"]."_id";
					return $this->getBasicQuery(array(
						"table"=>$params["assoctable"],
						"fields"=>array( $params["t2"]."_id" ),
						"where"=>array( $col=>$params["id"])
					));
					break;
				case "trash":
					return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array("id"=>$params["id"])),"DELETE");
					break;
				case "deltree":
					return $this->getBasicQuery(array("table"=>$params["table"],"where"=>" parent_id = ".$params["id"]." OR child_id = ".$params["id"]),"DELETE");
					break;
				case "unassoc_all_t1":
					$col = $params["t"]."_id";
					return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE");
					break;
				case "unassoc_all_t2":
					$col = $params["t"]."2_id";
					return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE");
					break;
				case "deltreetype":
					return $this->getQueryDeltreeType( $params );
					break;
				case "unassoctype1":
					$col = $params["t1"]."_id";
					$r = $this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE");
					//echo "<hr>$r";
					return $r;
					break;
				case "unassoctype2":
					$col = $params["t1"]."2_id";
					$r =$this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE");
					//echo "<hr>$r";
					return $r;
					break;
				case "create_tree":
					return $this->getQueryCreateTree( $params );
					break;
				case "unique":
					return $this->getQueryUnique( $params );
					break;
				case "add_child":
					return $this->getQueryAddChild( $params );
					break;
				case "get_children":
					return $this->getBasicQuery(array("table"=>$params["assoctable"],"fields"=>array("child_id"),
						"where"=>array("parent_id"=>$params["pid"])));
					break;
				case "get_parent":
					return $this->getBasicQuery(array( "where"=>array("child_id"=>$params["cid"]),"fields"=>array("parent_id"),"table"=>$params["assoctable"]	));
					break;
				case "remove_child":
					return $this->getQueryRemoveChild( $params );
					break;
				case "num_related":
					$col = $params["t1"]."_id";
					return $this->getBasicQuery(array("field"=>"COUNT(1)","table"=>$params["assoctable"],"where"=>array($col=>$params["id"])));
					break;
				case "drop_tables":
					return $this->getQueryDropTables( $params );
					break;
				case "truncate_rtables":
					return "truncate redbeantables";
					break;
				case "drop_column":
					return $this->getQueryDropColumn( $params );
					break;
				case "describe":
					return $this->getQueryDescribe( $params );
					break;
				case "get_null":
					return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["table"],"where"=>" `".$params["col"]."` IS NOT NULL "));
					return $this->getQueryGetNull( $params );
					break;
				case "test_column":
					return $this->getQueryTestColumn( $params );
					break;
				case "update_test":
					return $this->getQueryUpdateTest( $params );
					break;
				case "measure":
					return $this->getQueryMeasure( $params );
					break;
				case "remove_test":
					return $this->getQueryRemoveTest($params);
					break;
				case "drop_test":
					return $this->getQueryDropTest($params);
					break;
				case "variance":
					return $this->getBasicQuery(array("field"=>"count(distinct `".$params["col"]."`)","table"=>$params["table"]));
					break;
				case "index1":
					return $this->getIndex1($params);
					break;
				case "index2":
					return $this->getIndex2($params);
					break;
				case "drop_type":
					return $this->getBasicQuery(array("table"=>$params["type"]),"DELETE");
					break;
				case "destruct":
					return $this->getDestruct($params);
					break;
				default:
					throw new Exception("QueryWriter has no support for Query:".$queryname);
			}
		}

		/**
		 * @return string $query
		 */
		public function getQuote() {
			return "\"";
		}

		/**
		 * @return string $query
		 */
		public function getEscape() {
			return "`";
		}
}
/**
 * QueryWriter
 * Interface for QueryWriters
 * @package 		RedBean/QueryWriter.php
 * @description		Describes the API for a QueryWriter
 * @author			Gabor de Mooij
 * @license			BSD
 */
interface RedBean_QueryWriter {

	/**
	 * Returns the requested query if the writer has any
	 * @param $queryname
	 * @param $params
	 * @return mixed $sql_query
	 */
	public function getQuery( $queryname, $params=array() );

	/**
	 * Gets the quote-escape symbol of this writer
	 * @return unknown_type
	 */
	public function getQuote();

	/**
	 * Gets the backtick for this writer
	 * @return unknown_type
	 */
	public function getEscape();


	/**
	 *
	 * @param string $tbl
	 * @param RedBean_DBAdapter $db
	 * @return array $arr( array('Field'=>$string, 'Type'=>$string) )
	 */
	public function getTableColumns( $tbl, RedBean_DBAdapter $db );

}
//For framework intergration if you can specify a class prefix for models
if (!defined("RedBean_Setup_Namespace_PRFX")) define("RedBean_Setup_Namespace_PRFX","");
if (!defined("RedBean_Setup_Namespace_SFFX")) define("RedBean_Setup_Namespace_SFFX","");

/**
 * RedBean Setup
 * Helper class to quickly setup RedBean for you
 * @package 		RedBean/Setup.php
 * @description		Helper class to quickly setup RedBean for you
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_Setup {

	/**
	 * Kickstarts RedBean :)
	 * @param $dsn
	 * @param $username
	 * @param $password
	 * @param $freeze
	 * @param $engine
	 * @param $debugmode
	 * @param $unlockall
	 * @return unknown_type
	 */
	public static function kickstart( $dsn="mysql:host=localhost;dbname=oodb",
									  $username='root',
									  $password='',
									  $freeze=false,
  									  $engine="innodb",
									  $debugmode=false,
									  $unlockall=false) {

		//This is no longer configurable
		if (!class_exists("R")) {
			eval("
				class R extends RedBean_OODB { }
			");

			eval("
				class RD extends RedBean_Decorator { }
			");
		}


		//get an instance of the MySQL database
		if (strpos($dsn,"embmysql")===0) {
			//try to parse emb string
			$dsn .= ';';
			$matches = array();
			preg_match('/host=(.+?);/',$dsn,$matches);
			$matches2 = array();
			preg_match('/dbname=(.+?);/',$dsn,$matches2);
			if (count($matches)==2 && count($matches2)==2) {
				$db = RedBean_Driver_MySQL::getInstance( $matches[1], $username, $password, $matches2[1] );
			}
			else {
				throw new Exception("Could not parse MySQL DSN");
			}
		}
		else{
			$db = new Redbean_Driver_PDO( $dsn, $username, $password, null );
		}

		if ($debugmode) {
			$db->setDebugMode(1);
		}

		$oldconn = RedBean_OODB::getInstance()->getInstance()->getDatabase();
		$conn = new RedBean_DBAdapter($db);//Wrap ADO in RedBean's adapter
		RedBean_OODB::getInstance()->setDatabase( $conn );


		RedBean_OODB::getInstance()->setEngine($engine); //select a database driver
		RedBean_OODB::getInstance()->init( new QueryWriter_MySQL() ); //Init RedBean

		if ($unlockall) {


			RedBean_OODB::getInstance()->resetAll(); //Release all locks
		}

		if ($freeze) {
			RedBean_OODB::getInstance()->freeze(); //Decide whether to freeze the database
		}

		return $oldconn;
	}

	/**
	 * Kickstarter for development phase
	 * @param $gen
	 * @param $dsn
	 * @param $username
	 * @param $password
	 * @param $debug
	 * @return unknown_type
	 */
	public static function kickstartDev( $gen, $dsn, $username="root", $password="", $debug=false ) {

		//kickstart for development
		self::kickstart( $dsn, $username, $password, false, "innodb", $debug, false);

		//generate classes
		RedBean_OODB::getInstance()->gen( $gen );
                return RedBean_OODB::getInstance();
	}

	/**
	 * Kickstarter for deployment phase and testing
	 * @param $dsn
	 * @param $username
	 * @param $password
	 * @param $gen
	 * @return unknown_type
	 */
	public static function kickstartFrozen( $gen, $dsn, $username="root", $password="" ) {

		//kickstart for development
		self::kickstart( $dsn, $username, $password, true, "innodb", false, false);

		//generate classes
		RedBean_OODB::getInstance()->gen( $gen );
                return RedBean_OODB::getInstance();
	}


	public static function reconnect( RedBean_DBAdapter $new ) {
		$old = RedBean_OODB::getInstance()->getInstance()->getDatabase();
		RedBean_OODB::getInstance()->getInstance()->setDatabase( $new );
		return $old;
	}

}
/**
 * Sieve
 * @package 		RedBean/Sieve.php
 * @description		Filters a bean
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_Sieve {

	/**
	 *
	 * @var array
	 */
	private $vals;

	/**
	 *
	 * @var array
	 */
	private $report = array();

	/**
	 *
	 * @var boolean
	 */
	private $succes = true;

	/**
	 *
	 * @param $validations
	 * @return unknown_type
	 */
	public static function make( $validations ) {

		$sieve = new self;
		$sieve->vals = $validations;
		return $sieve;

	}

	/**
	 *
	 * @param $deco
	 * @return unknown_type
	 */
	public function valid( RedBean_Decorator $deco ) {

		foreach($this->vals as $p => $v) {
			if (class_exists($v)) {
				$validator = new $v( $deco, $report );
				if ($validator instanceof RedBean_Validator) {
					$message = $validator->check( $deco->$p );
					if ($message !== true) {
						$this->succes = false;
					}
					if (!isset($this->report[$v])) {
						$this->report[$v]=array();
					}
					$this->report[ $v ][ $p ] = $message;

				}
			}
		}
		return $this->succes;
	}

	/**
	 *
	 * @param $deco
	 * @param $key
	 * @return unknown_type
	 */
	public function validAndReport( RedBean_Decorator $deco, $key=false ) {
		$this->valid( $deco );
		if ($key) {
			if (isset($this->report[$key])) {
				return $this->report[$key];
			}
		}
		return $this->report;
	}

	/**
	 *
	 * @return unknown_type
	 */
	public function getReport() {
		return $this->report;
	}


}
/**
 * RedBean Tools
 * Tool Collection for RedBean
 * @package 		RedBean/Tools.php
 * @description		A series of Tools of RedBean
 * @author			Desfrenes
 * @license			BSD
 */
class RedBean_Tools
{
	/**
	 *
	 * @var unknown_type
	 */
    private static $class_definitions;

    /**
     *
     * @var unknown_type
     */
    private static $remove_whitespaces;

    /**
     *
     * @param $root
     * @param $callback
     * @param $recursive
     * @return unknown_type
     */
    public static function walk_dir( $root, $callback, $recursive = true )
    {
        $root = realpath($root);
        $dh   = @opendir( $root );
        if( false === $dh )
        {
            return false;
        }
        while(false !==  ($file = readdir($dh)))
        {
            if( "." == $file || ".." == $file )
            {
                continue;
            }
            call_user_func( $callback, "{$root}/{$file}" );
            if( false !== $recursive && is_dir( "{$root}/{$file}" ))
            {
                Redbean_Tools::walk_dir( "{$root}/{$file}", $callback, $recursive );
            }
        }
        closedir($dh);
        return true;
    }

    /**
     *
     * @param $file
     * @param $removeWhiteSpaces
     * @return unknown_type
     */
    public static function compile($file = '', $removeWhiteSpaces = true)
    {
        self::$remove_whitespaces = $removeWhiteSpaces;
        self::$class_definitions = '';
        $base = dirname(__FILE__) . '/';
        self::walk_dir($base,'Redbean_Tools::stripClassDefinition');
        $content = str_replace("\r\n","\n", ' ' . "\n" . file_get_contents($base . 'license.txt') . "\n" . self::$class_definitions);
        if(!empty($file))
        {
            file_put_contents($file, $content);
        }
        return $content;
    }

    /**
     *
     * @param $file
     * @return unknown_type
     */
    private static function stripClassDefinition($file)
    {
        if(is_file($file) && substr($file, -4) == '.php')
        {
            echo "\n including.. $file ";

            if(self::$remove_whitespaces)
            {
                self::$class_definitions .= "\n" . trim(str_replace('', '', php_strip_whitespace($file)));
            }
            else
            {
                self::$class_definitions .= "\n" . trim(str_replace('', '', trim(file_get_contents($file))));
            }
        }
    }
}
/**
 * RedBean Validator Alphanumeric
 * @package 		RedBean/Validator/AlphaNumeric.php
 * @description		Checks whether a value is alpha numeric
 * @author			Gabor de Mooij
 * @license			BSD
 */
class RedBean_Validator_AlphaNumeric implements RedBean_Validator {
	/**
	 * (non-PHPdoc)
	 * @see RedBean/RedBean_Validator#check()
	 */
	public function check( $v ) {
		return (bool) preg_match('/^[A-Za-z0-9]+$/', $v);
	}
}
/**
 * Interface RedBean Validator
 * @package 		RedBean/Validator.php
 * @description		API for Validators
 * @author			Gabor de Mooij
 * @license			BSD
 */
interface RedBean_Validator {
	/**
	 *
	 * @param $property
	 * @return unknown_type
	 */
	public function check( $property );
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (AST_CONST)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)))
                                            (AST_CONST)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_DIM
                                                                (AST_VAR)
                                                                (SCALAR)))
                                                        (SCALAR))
                                                    (SCALAR)
                                                    (AST_VAR))))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_DIM
                                                                (AST_VAR)
                                                                (SCALAR)))
                                                        (SCALAR))
                                                    (SCALAR)
                                                    (AST_VAR))))
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_PRE_INC
                                                        (AST_VAR)))))))))))
                (AST_RETURN
                    (AST_ARRAY))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_ARRAY)))))))))