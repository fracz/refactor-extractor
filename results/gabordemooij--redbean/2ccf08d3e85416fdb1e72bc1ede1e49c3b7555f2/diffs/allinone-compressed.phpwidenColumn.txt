||||||||                    "; $this->adapter->exec( $sql ); } public function getColumns( $table ) { $columnsRaw = $this->adapter->get("DESCRIBE `$table`"); foreach($columnsRaw as $r) { $columns[$r["Field"]]=$r["Type"]; } return $columns; } public function scanType( $value ) { $this->adapter->exec( $this->getQuery("reset_dtyp") ); $checktypeSQL = $this->getQuery("infertype", array( "value"=> $this->escape(strval($value)) )); $this->adapter->exec( $checktypeSQL ); $id = $this->adapter->getInsertID(); $readtypeSQL = $this->getQuery("readtype",array( "id"=>$id )); $row = $this->adapter->getRow($readtypeSQL);; $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($value)) { return $tp; } $tp++; } return $tp; } public function addColumn( $table, $column, $type ) { $sql = $this->getQuery("add_column",array( "table"=>$table, "column"=>$column, "type"=> $this->typeno_sqltype[$type] )); $this->adapter->exec( $sql ); } public function code( $typedescription ) { return $this->sqltype_typeno[$typedescription]; } public function widenColumn( $table, $column, $type ) { $changecolumnSQL = $this->getQuery( "widen_column", array( "table" => $table, "column" => $column, "newtype" => $this->typeno_sqltype[$type] ) ); $this->adapter->exec( $changecolumnSQL ); } public function updateRecord( $table, $updatevalues, $id) { $updateSQL = $this->getQuery("update", array( "table"=>$table, "updatevalues"=>$updatevalues, "id"=>$id )); $this->adapter->exec( $updateSQL ); } public function insertRecord( $table, $insertcolumns, $insertvalues ) { if (count($insertvalues)>0){ $insertSQL = $this->getQuery("insert",array( "table"=>$table, "insertcolumns"=>$insertcolumns, "insertvalues"=>$insertvalues )); $this->adapter->exec( $insertSQL ); return $this->adapter->getInsertID(); } else { $this->adapter->exec( $this->getQuery("create", array("table"=>$table))); return $this->adapter->getInsertID(); } } public function selectRecord($type, $id) { $getSQL = $this->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $this->adapter->getRow( $getSQL ); if ($row && is_array($row) && count($row)>0) { return $row; } else { throw RedBean_Exception_Security("Could not find bean"); } } public function deleteRecord( $table, $id ) { $this->adapter->exec("DELETE FROM `$table` WHERE id = $id "); } }
class RedBean_ToolBox_ModHub extends RedBean_ToolBox { private $facade; public function getDatabase() { return $this->give("database"); } public function getWriter() { return $this->give("writer"); } public function getFilter() { return $this->give("filter"); } public function setFacade( $facade ) { $this->facade = $facade; } public function getFacade() { return $this->facade; } public function __call( $who, $args=array() ) { $tool = strtolower(substr($who,3)); if ($this->has($tool)) { return $this->give( $tool ); } else { throw new Exception(" $tool not available "); } } public function __get($v) { throw new Exception("getter not allowed"); } public function __set($v,$i) { throw new Exception("setter not allowed"); } }
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))