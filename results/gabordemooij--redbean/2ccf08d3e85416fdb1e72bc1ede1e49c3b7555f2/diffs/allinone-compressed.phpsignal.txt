class RedBean_Observable { private $observers = array(); public function addEventListener( $eventname, RedBean_Observer $observer ) { if (!isset($this->observers[ $eventname ])) { $this->observers[ $eventname ] = array(); } $this->observers[ $eventname ][] = $observer; } public function signal( $eventname ) { if (!isset($this->observers[ $eventname ])) { $this->observers[ $eventname ] = array(); } foreach($this->observers[$eventname] as $observer) { $observer->onEvent( $eventname, $this ); } } }
interface RedBean_Observer { public function onEvent( $eventname, RedBean_Observable $o ); }
class RedBean_OODB { public $pkey = false; private $rollback = false; private static $me = null; private $engine = "myisam"; private $frozen = false; private $toolbox = null; public function initWithToolBox( RedBean_ToolBox_ModHub $toolbox ) { $this->toolbox = $toolbox; $db = $this->toolbox->getDatabase(); $writer = $this->toolbox->getWriter(); if ($this->engine === "innodb") { $db->exec($writer->getQuery("prepare_innodb")); $db->exec($writer->getQuery("starttransaction")); } else if ($this->engine === "myisam") { $db->exec($writer->getQuery("prepare_myisam")); } if (!$this->frozen) { $db->exec($writer->getQuery("clear_dtyp")); $db->exec($writer->getQuery("setup_dtyp")); $db->exec($writer->getQuery("setup_locking")); $db->exec($writer->getQuery("setup_tables")); } return true; } public function __destruct() { $this->getToolBox()->getLockManager()->unlockAll(); $this->toolbox->getDatabase()->exec( $this->toolbox->getWriter()->getQuery("destruct", array("engine"=>$this->engine,"rollback"=>$this->rollback)) ); } public function isFrozen() { return (boolean) $this->frozen; } public static function getInstance( RedBean_ToolBox_ModHub $toolbox = NULL ) { if (self::$me === null) { self::$me = new RedBean_OODB; } if ($toolbox) self::$me->initWithToolBox( $toolbox ); return self::$me; } public function getToolBox() { return $this->toolbox; } public function getEngine() { return $this->engine; } public function setEngine( $engine ) { if ($engine=="myisam" || $engine=="innodb") { $this->engine = $engine; } else { throw new Exception("Unsupported database engine"); } return $this->engine; } public static function rollback() { $this->rollback = true; } public function freeze() { $this->frozen = true; } public function unfreeze() { $this->frozen = false; } public function generate( $classes, $prefix = false, $suffix = false ) { return $this->toolbox->getClassGenerator()->generate($classes,$prefix,$suffix); } public static function gen($arg, $prefix = false, $suffix = false) { return self::getInstance()->generate($arg, $prefix, $suffix); } public static function keepInShape($gc = false ,$stdTable=false, $stdCol=false) { return self::getInstance()->getToolBox()->getOptimizer()->run($gc, $stdTable, $stdCol); } public static function kickstartDev( $gen, $dsn, $username="root", $password="", $debug=false ) { return RedBean_Setup::kickstartDev( $gen, $dsn, $username, $password, $debug ); } public static function kickstartFrozen( $gen, $dsn, $username="root", $password="" ) { return RedBean_Setip::kickstartFrozen( $gen, $dsn, $username, $password); } }
class RedBean_OODBBean { }
class Redbean_Querylogger implements RedBean_Observer { private $path = ""; private $userid = 0; private function getFilename() { return $this->path . "audit_".date("m_d_y").".log"; } public function logSCQuery( $sql, $db ) { $sql = addslashes($sql); $line = "\n".date("H:i:s")."|".$_SERVER["REMOTE_ADDR"]."|UID=".$this->userid."|".$sql; file_put_contents( $this->getFilename(), $line, FILE_APPEND ); return null; } public static function init($path="",$userid=0) { $logger = new self; $logger->userid = $userid; $logger->path = $path; if (!file_exists($logger->getFilename())) { file_put_contents($logger->getFilename(),"begin logging"); } RedBean_OODB::getInstance()->getToolBox()->getDatabase()->addEventListener( "sql_exec", $logger ); } public function onEvent( $event, RedBean_Observable $db ) { $this->logSCQuery( $db->getSQL(), $db ); } }
interface RedBean_QueryWriter { public function getQuery( $queryname, $params=array() ); public function getQuote(); public function getEscape(); public function getTableColumns( $tbl, RedBean_DBAdapter $db ); }
if (!defined("RedBean_Setup_Namespace_PRFX")) define("RedBean_Setup_Namespace_PRFX",""); if (!defined("RedBean_Setup_Namespace_SFFX")) define("RedBean_Setup_Namespace_SFFX",""); class RedBean_Setup { public static function kickstart( $dsn="mysql:host=localhost;dbname=oodb", $username='root', $password='', $freeze=false, $engine="innodb", $debugmode=false, $unlockall=false) { if (!class_exists("R")) { eval("
				class R extends RedBean_OODB { }
			"); eval("
				class RD extends RedBean_Decorator { }
			"); } if (strpos($dsn,"embmysql")===0) { $dsn .= ';'; $matches = array(); preg_match('/host=(.+?);/',$dsn,$matches); $matches2 = array(); preg_match('/dbname=(.+?);/',$dsn,$matches2); if (count($matches)==2 && count($matches2)==2) { $db = RedBean_Driver_MySQL::getInstance( $matches[1], $username, $password, $matches2[1] ); } else { throw new Exception("Could not parse MySQL DSN"); } } else{ $db = new Redbean_Driver_PDO( $dsn, $username, $password, null ); } if ($debugmode) { $db->setDebugMode(1); } $conn = new RedBean_DBAdapter($db); $writer = new QueryWriter_MySQL(); $toolbox = new RedBean_ToolBox_ModHub(); $toolbox->add("database", $conn); $toolbox->add("writer", $writer); $toolbox->add("filter",new RedBean_Mod_Filter_Strict($toolbox)); $toolbox->add("beanchecker",new RedBean_Mod_BeanChecker($toolbox)); $toolbox->add("gc",new RedBean_Mod_GarbageCollector($toolbox)); $toolbox->add("classgenerator",new RedBean_Mod_ClassGenerator($toolbox)); $toolbox->add("search",new RedBean_Mod_Search($toolbox)); $toolbox->add("optimizer",new RedBean_Mod_Optimizer($toolbox)); $toolbox->add("beanstore",new RedBean_Mod_BeanStore($toolbox)); $toolbox->add("association",new RedBean_Mod_Association($toolbox)); $toolbox->add("lockmanager",new RedBean_Mod_LockManager($toolbox)); $toolbox->add("tree",new RedBean_Mod_Tree($toolbox)); $toolbox->add("tableregister",new RedBean_Mod_TableRegister($toolbox)); $toolbox->add("finder",new RedBean_Mod_Finder($toolbox)); $toolbox->add("dispenser",new RedBean_Mod_Dispenser($toolbox)); $toolbox->add("scanner",new RedBean_Mod_Scanner($toolbox)); $toolbox->add("lister",new RedBean_Mod_Lister($toolbox)); $redbean = RedBean_OODB::getInstance( $toolbox ); $toolbox->setFacade( $redbean ); $redbean->setEngine($engine); if ($unlockall) { $redbean->getLockManager()->reset(); } if ($freeze) { $redbean->freeze(); } return $redbean; } public static function kickstartDev( $gen, $dsn, $username="root", $password="", $debug=false ) { return self::kickstart( $dsn, $username, $password, false, "innodb", $debug, false); } public static function kickstartFrozen( $gen, $dsn, $username="root", $password="" ) { return self::kickstart( $dsn, $username, $password, true, "innodb", false, false); } public static function reconnect( RedBean_DBAdapter $newDatabase ) { $oldToolBox = RedBean_OODB::getInstance()->getToolBox(); $oldDatabase = $oldToolBox->getDatabase(); $oldToolBox->add("database", $newDatabase); return $oldDatabase; } }
class RedBean_Sieve { private $vals; private $report = array(); private $succes = true; public static function make( $validations ) { $sieve = new self; $sieve->vals = $validations; return $sieve; } public function valid( RedBean_Decorator $deco ) { foreach($this->vals as $p => $v) { if (class_exists($v)) { $validator = new $v( $deco, $report ); if ($validator instanceof RedBean_Validator) { $message = $validator->check( $deco->$p ); if ($message !== true) { $this->succes = false; } if (!isset($this->report[$v])) { $this->report[$v]=array(); } $this->report[ $v ][ $p ] = $message; } } } return $this->succes; } public function validAndReport( RedBean_Decorator $deco, $key=false ) { $this->valid( $deco ); if ($key) { if (isset($this->report[$key])) { return $this->report[$key]; } } return $this->report; } public function getReport() { return $this->report; } }
interface RedBean_Tool { }
abstract class RedBean_ToolBox { private $tools = array(); protected function give( $toolname ) { if ($this->has($toolname)) { return $this->tools[$toolname]; } else { throw new Exception("Module or tool $toolname has not been installed."); } } public function has( $toolname ) { return (isset($this->tools[$toolname])); } public function add( $label, RedBean_Tool $tool ) { $this->tools[$label] = $tool; } }
class RedBean_Tools { private static $class_definitions = array(); private static $remove_whitespaces; private static $count = 0; public static function walk_dir( $root, $callback, $recursive = true ) { $root = realpath($root); $dh = @opendir( $root ); if( false === $dh ) { return false; } while(false !== ($file = readdir($dh))) { if( "." == $file || ".." == $file ) { continue; } call_user_func( $callback, "{$root}/{$file}" ); if( false !== $recursive && is_dir( "{$root}/{$file}" )) { Redbean_Tools::walk_dir( "{$root}/{$file}", $callback, $recursive ); } } closedir($dh); return true; } public static function compile($file = '', $removeWhiteSpaces = true) { self::$remove_whitespaces = $removeWhiteSpaces; self::$class_definitions = array(); $base = dirname(__FILE__) . '/'; self::walk_dir($base,'Redbean_Tools::stripClassDefinition'); $str =''; ksort(self::$class_definitions); foreach( self::$class_definitions as $k=>$v){ $str .= $v; } $content = str_replace("\r\n","\n", ' ' . "\n" . file_get_contents($base . 'license.txt') . "\n" . $str); if(!empty($file)) { file_put_contents($file, $content); } return $content; } private static function stripClassDefinition($file) { if(is_file($file) && substr($file, -4) == '.php') { $index = (substr_count($file, "/") * 1000) + (++self::$count); if(self::$remove_whitespaces) { self::$class_definitions[$index] = "\n" . trim(str_replace('', '', php_strip_whitespace($file))); } else { self::$class_definitions[$index] = "\n" . trim(str_replace('', '', trim(file_get_contents($file)))); } } } }
interface RedBean_Validator { public function check( $property ); }
class RedBean_Driver_MySQL implements RedBean_Driver { private static $me = null; public $Insert_ID; private $debug = false; private $rs = null; private function __construct(){} public static function getInstance( $host, $user, $pass, $dbname ) { if (!self::$me) { mysql_connect( $host, $user, $pass ); mysql_selectdb( $dbname ); self::$me = new RedBean_Driver_MySQL(); } return self::$me; } public function GetAll( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; $arr = array(); while( $r = @mysql_fetch_assoc($rs) ) { $arr[] = $r; } if ($this->debug) { if (count($arr) > 0) { echo "<br><b style='color:green'>resultset: ".count($arr)." rows</b>"; } $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } return $arr; } public function GetCol( $sql ) { $rows = $this->GetAll($sql); $cols = array(); foreach( $rows as $row ) { $cols[] = array_shift( $row ); } return $cols; } public function GetCell( $sql ) { $arr = $this->GetAll( $sql ); $row1 = array_shift( $arr ); $col1 = array_shift( $row1 ); return $col1; } public function GetRow( $sql ) { $arr = $this->GetAll( $sql ); return array_shift( $arr ); } public function ErrorNo() { return mysql_errno(); } public function Errormsg() { return mysql_error(); } public function Execute( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; if ($this->debug) { $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } $this->Insert_ID = $this->GetInsertID(); return intval( mysql_affected_rows()); } public function Escape( $str ) { return mysql_real_escape_string( $str ); } public function GetInsertID() { return intval( mysql_insert_id()); } public function Affected_Rows() { return mysql_affected_rows(); } public function setDebugMode($tf) { $this->debug = $tf; } public function GetRaw() { return $this->rs; } }
class Redbean_Driver_PDO implements RedBean_Driver { private static $instance; private $debug = false; private $pdo; private $affected_rows; private $rs; private $exc =0; public static function getInstance($dsn, $user, $pass, $dbname) { if(is_null(self::$instance)) { self::$instance = new Redbean_Driver_PDO($dsn, $user, $pass); } return self::$instance; } public function __construct($dsn, $user, $pass) { $this->pdo = new PDO( $dsn, $user, $pass, array(1002 => 'SET NAMES utf8', PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC) ); } public function GetAll( $sql ) { $this->exc = 0; try{ if ($this->debug) { echo "<HR>" . $sql; } $rs = $this->pdo->query($sql); $this->rs = $rs; $rows = $rs->fetchAll(); if(!$rows) { $rows = array(); } if ($this->debug) { if (count($rows) > 0) { echo "<br><b style='color:green'>resultset: " . count($rows) . " rows</b>"; } } } catch(Exception $e){ $this->exc = 1; if ($this->debug){ $str = $this->Errormsg(); if ($str != "") { echo "<br><b style='color:red'>" . $str . "</b>"; } } return array(); } return $rows; } public function GetCol($sql) { $this->exc = 0; try{ $rows = $this->GetAll($sql); $cols = array(); if ($rows && is_array($rows) && count($rows)>0){ foreach ($rows as $row) { $cols[] = array_shift($row); } } } catch(Exception $e){ $this->exc = 1; return array(); } return $cols; } public function GetCell($sql) { $this->exc = 0; try{ $arr = $this->GetAll($sql); $row1 = array_shift($arr); $col1 = array_shift($row1); } catch(Exception $e){ $this->exc = 1; } return $col1; } public function GetRow($sql) { $this->exc = 0; try{ $arr = $this->GetAll($sql); } catch(Exception $e){ $this->exc = 1; return array(); } return array_shift($arr); } public function ErrorNo() { if (!$this->exc) return 0; $infos = $this->pdo->errorInfo(); return $infos[1]; } public function Errormsg() { if (!$this->exc) return ""; $infos = $this->pdo->errorInfo(); return $infos[2]; } public function Execute( $sql ) { $this->exc = 0; try{ if ($this->debug) { echo "<HR>" . $sql; } $this->affected_rows = $this->pdo->exec($sql); } catch(Exception $e){ $this->exc = 1; if ($this->debug) { $str = $this->Errormsg(); if ($str != "") { echo "<br><b style='color:red'>" . $str . "</b>"; } } return 0; } return $this->affected_rows; } public function Escape( $str ) { return substr(substr($this->pdo->quote($str), 1), 0, -1); } public function GetInsertID() { return (int) $this->pdo->lastInsertId(); } public function Affected_Rows() { return (int) $this->affected_rows; } public function setDebugMode( $tf ) { $this->debug = (bool)$tf; } public function GetRaw() { return $this->rs; } }
class RedBean_Exception_FailedAccessBean extends Exception{}
class RedBean_Exception_InvalidArgument extends RedBean_Exception {}
class RedBean_Exception_InvalidParentChildCombination extends RedBean_Exception{}
class RedBean_Exception_Security extends RedBean_Exception {}
class RedBean_Exception_SQL extends RedBean_Exception {};
class RedBean_Mod_Association extends RedBean_Mod { public function link( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { $db = $this->provider->getDatabase(); $bean1 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean1); $bean2 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean2); $this->provider->getLockManager()->openBean( $bean1, true ); $this->provider->getLockManager()->openBean( $bean2, true ); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2) { $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); if (!$this->provider->getFacade()->isFrozen()) { $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; } $assoccreateSQL = $this->provider->getWriter()->getQuery("create_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2, "engine"=>$this->provider->getFacade()->getEngine() )); $db->exec( $assoccreateSQL ); $db->exec( $this->provider->getWriter()->getQuery("add_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2 )) ); $this->provider->getTableRegister()->register( $assoctable ); } } $assocSQL = $this->provider->getWriter()->getQuery("add_assoc_now", array( "id1"=>$id1, "id2"=>$id2, "assoctable"=>$assoctable )); $db->exec( $assocSQL ); } public function breakLink(RedBean_OODBBean $bean1, RedBean_OODBBean $bean2) { $db = $this->provider->getDatabase(); $bean1 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean1); $bean2 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean2); $this->provider->getLockManager()->openBean( $bean1, true ); $this->provider->getLockManager()->openBean( $bean2, true ); $idx1 = intval($bean1->id); $idx2 = intval($bean2->id); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2) { $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->provider->getTableRegister()->getTables(); if (in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; $unassocSQL = $this->provider->getWriter()->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t2, "t2"=>$t1, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } $unassocSQL = $this->provider->getWriter()->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t1, "t2"=>$t2, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } if ($tp1==$tp2) { $assoctable2 = "pc_".$db->escape( $bean1->type )."_".$db->escape( $bean1->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (in_array($assoctable2, $alltables)) { $unassocSQL = $this->provider->getWriter()->getQuery("untree", array( "assoctable2"=>$assoctable2, "idx1"=>$idx1, "idx2"=>$idx2 )); $db->exec($unassocSQL); } } } public function get( RedBean_OODBBean $bean, $targettype ) { $db = $this->provider->getDatabase(); $bean = $this->provider->getBeanChecker()->checkBeanForAssoc($bean); $id = intval($bean->id); $t1 = $db->escape( $this->provider->getFilter()->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { if ($t1==$t2) { $t2.="2"; } $getassocSQL = $this->provider->getWriter()->getQuery("get_assoc",array( "t1"=>$t1, "t2"=>$t2, "assoctable"=>$assoctable, "id"=>$id )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->provider->getBeanStore()->get( $targettype, $i, false); } } return $beans; } } public function deleteAllAssoc( $bean ) { $db = $this->provider->getDatabase(); $bean = $this->provider->getBeanChecker()->checkBeanForAssoc($bean); $this->provider->getLockManager()->openBean( $bean, true ); $id = intval( $bean->id ); $alltables = $this->provider->getTableRegister()->getTables(); $t = $db->escape($bean->type); $checktables = array(); foreach( $alltables as $table ) { if (strpos($table,$t."_")!==false || strpos($table,"_".$t)!==false) { $checktables[] = $table; } } foreach($checktables as $table) { if (strpos($table,"pc_")===0) { $db->exec( $this->provider->getWriter()->getQuery("deltree",array( "id"=>$id, "table"=>$table )) ); } else { $db->exec( $this->provider->getWriter()->getQuery("unassoc_all_t1",array("table"=>$table,"t"=>$t,"id"=>$id)) ); $db->exec( $this->provider->getWriter()->getQuery("unassoc_all_t2",array("table"=>$table,"t"=>$t,"id"=>$id)) ); } } return true; } public function deleteAllAssocType( $targettype, $bean ) { $db = $this->provider->getDatabase(); $bean = $this->provider->getBeanChecker()->checkBeanForAssoc($bean); $this->provider->getLockManager()->openBean( $bean, true ); $id = intval( $bean->id ); $t1 = $db->escape( $this->provider->getFilter()->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $availabletables = $this->provider->getTableRegister()->getTables(); if (in_array('pc_'.$assoctable,$availabletables)) { $db->exec( $this->provider->getWriter()->getQuery("deltreetype",array( "assoctable"=>'pc_'.$assoctable, "id"=>$id )) ); } if (in_array($assoctable,$availabletables)) { $db->exec( $this->provider->getWriter()->getQuery("unassoctype1",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); $db->exec( $this->provider->getWriter()->getQuery("unassoctype2",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); } return true; } public function numOfRelated( $type, RedBean_OODBBean $bean ) { $db = $this->provider->getDatabase(); $t2 = $this->provider->getFilter()->table( $db->escape( $type ) ); $this->provider->getBeanChecker()->check( $bean ); $t1 = $this->provider->getFilter()->table( $bean->type ); $tref = $this->provider->getFilter()->table( $db->escape( $bean->type ) ); $id = intval( $bean->id ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $tables = $this->provider->getTableRegister()->getTables(); if ($tables && is_array($tables) && count($tables) > 0) { if (in_array( $t1, $tables ) && in_array($t2, $tables)){ $sqlCountRelations = $this->provider->getWriter()->getQuery( "num_related", array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id ) ); return (int) $db->getCell( $sqlCountRelations ); } } else { return 0; } } }
class RedBean_Mod_BeanChecker extends RedBean_Mod { public function check( RedBean_OODBBean $bean ) { if (!$this->provider->getDatabase()) { throw new RedBean_Exception_Security("No database object. Have you used kickstart to initialize RedBean?"); } foreach($bean as $prop=>$value) { if (preg_match('/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/',$prop)) { throw new RedBean_Exception_Security("Invalid Characters in property $prop "); } $prop = preg_replace('/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/',"",$prop); if (strlen(trim($prop))===0) { throw new RedBean_Exception_Security("Invalid Characters in property"); } else { if (is_array($value)) { throw new RedBean_Exception_Security("Cannot store an array, use composition instead or serialize first."); } if (is_object($value)) { throw new RedBean_Exception_Security("Cannot store an object, use composition instead or serialize first."); } $bean->$prop = $value; } } if (!isset($bean->id)) { throw new RedBean_Exception_Security("Invalid bean, no id"); } if (!is_numeric($bean->id) || $bean->id < 0 || (round($bean->id)!=$bean->id)) { throw new RedBean_Exception_Security("Invalid bean, id not numeric"); } if (!isset($bean->type)) { throw new RedBean_Exception_Security("Invalid bean, no type"); } if (!is_string($bean->type) || is_numeric($bean->type) || strlen($bean->type)<3) { throw new RedBean_Exception_Security("Invalid bean, wrong type"); } if ($bean->type==="locking" || $bean->type==="dtyp" || $bean->type==="redbeantables") { throw new RedBean_Exception_Security("Beantype is reserved table"); } if (strpos($bean->type,"_")!==false && ctype_alnum($bean->type)) { throw new RedBean_Exception_Security("Beantype contains illegal characters"); } } public function checkBeanForAssoc( $bean ) { $this->check($bean); if (intval($bean->id) < 1) { $bean->id = $this->provider->getBeanStore()->set( $bean ); } return $bean; } }
class RedBean_Mod_BeanStore extends RedBean_Mod { public function set( RedBean_OODBBean $bean ) { $this->provider->getBeanChecker()->check($bean); $db = $this->provider->getDatabase(); $table = $db->escape($bean->type); if (!$this->provider->getFacade()->isFrozen()) { $tables = $this->provider->getTableRegister()->getTables(); if (!in_array($table, $tables)) { $createtableSQL = $this->provider->getWriter()->getQuery("create_table", array( "engine"=>$this->provider->getFacade()->getEngine(), "table"=>$table )); $db->exec( $createtableSQL ); $this->provider->getTableRegister()->register( $table ); } $columnsRaw = $this->provider->getWriter()->getTableColumns($table, $db) ; $columns = array(); foreach($columnsRaw as $r) { $columns[$r["Field"]]=$r["Type"]; } $insertvalues = array(); $insertcolumns = array(); $updatevalues = array(); foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $typeno = $this->provider->getScanner()->type($v); if (isset($columns[$p])) { $sqlt = $this->provider->getScanner()->code($columns[$p]); if ($typeno > $sqlt) { $changecolumnSQL = $this->provider->getWriter()->getQuery( "widen_column", array( "table" => $table, "column" => $p, "newtype" => $this->provider->getWriter()->typeno_sqltype[$typeno] ) ); $db->exec( $changecolumnSQL ); } } else { $addcolumnSQL = $this->provider->getWriter()->getQuery("add_column",array( "table"=>$table, "column"=>$p, "type"=> $this->provider->getWriter()->typeno_sqltype[$typeno] )); $db->exec( $addcolumnSQL ); } $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } else { foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } if ($bean->id) { $this->provider->getLockManager()->openBean($bean, true); if (count($updatevalues)>0) { $updateSQL = $this->provider->getWriter()->getQuery("update", array( "table"=>$table, "updatevalues"=>$updatevalues, "id"=>$bean->id )); $db->exec( $updateSQL ); } } else { if (count($insertvalues)>0) { $insertSQL = $this->provider->getWriter()->getQuery("insert",array( "table"=>$table, "insertcolumns"=>$insertcolumns, "insertvalues"=>$insertvalues )); } else { $insertSQL = $this->provider->getWriter()->getQuery("create", array("table"=>$table)); } $db->exec( $insertSQL ); $bean->id = $db->getInsertID(); $this->provider->getLockManager()->openBean($bean); } return $bean->id; } public function get($type, $id, $data=false) { $bean = $this->provider->getDispenser()->dispense( $type ); $db = $this->provider->getDatabase(); $table = $db->escape( $type ); $id = abs( intval( $id ) ); $bean->id = $id; $this->provider->getLockManager()->openBean($bean); if (!$data) { $getSQL = $this->provider->getWriter()->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $db->getRow( $getSQL ); } else { $row = $data; } if ($row && is_array($row) && count($row)>0) { foreach($row as $p=>$v) { $bean->$p = $v; } } else { throw new RedBean_Exception_FailedAccessBean("bean not found"); } return $bean; } public function trash( RedBean_OODBBean $bean ) { $this->provider->getBeanChecker()->check( $bean ); if (intval($bean->id)===0) return; $this->provider->getAssociation()->deleteAllAssoc( $bean ); $this->provider->getLockManager()->openBean($bean); $table = $this->provider->getDatabase()->escape($bean->type); $id = intval($bean->id); $this->provider->getDatabase()->exec( $this->provider->getWriter()->getQuery("trash",array( "table"=>$table, "id"=>$id )) ); } public function exists($type,$id) { $db = $this->provider->getDatabase(); $id = intval( $id ); $type = $db->escape( $type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return false; } else { $no = $db->getCell( $this->provider->getWriter()->getQuery("bean_exists",array( "type"=>$type, "id"=>$id )) ); if (intval($no)) { return true; } else { return false; } } } public function numberof($type) { $db = $this->provider->getDatabase(); $type = $this->provider->getFilter()->table( $db->escape( $type ) ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell( $this->provider->getWriter()->getQuery("count",array( "type"=>$type ))); return intval( $no ); } } public function fastloader($type, $ids) { $db = $this->provider->getDatabase(); $sql = $this->provider->getWriter()->getQuery("fastload", array( "type"=>$type, "ids"=>$ids )); return $db->get( $sql ); } public function trashAll($type) { $this->provider->getDatabase()->exec( $this->provider->getWriter()->getQuery("drop_type",array("type"=>$this->provider->getFilter()->table($type)))); } }
class RedBean_Mod_ClassGenerator extends RedBean_Mod { public function generate( $classes, $prefix = false, $suffix = false ) { if (!$prefix) { $prefix = RedBean_Setup_Namespace_PRFX; } if (!$suffix) { $suffix = RedBean_Setup_Namespace_SFFX; } $classes = explode(",",$classes); foreach($classes as $c) { $ns = ''; $names = explode('\\', $c); $className = trim(end($names)); if(count($names) > 1) { $namespacestring = implode('\\', array_slice($names, 0, -1)); $ns = 'namespace ' . $namespacestring . " { "; } if ($c!=="" && $c!=="null" && !class_exists($c) && preg_match("/^\s*[A-Za-z_][A-Za-z0-9_]*\s*$/",$className)){ $tablename = $className; $fullname = $prefix.$className.$suffix; $toeval = $ns . " class ".$fullname." extends ". (($ns=='') ? '' : '\\' ) . "RedBean_Decorator {
                                        private static \$__static_property_type = \"".$this->provider->getFilter()->table($tablename)."\";

                                        public function __construct(\$id=0, \$lock=false) {

                                                parent::__construct( RedBean_OODB::getInstance(), '".$this->provider->getFilter()->table($tablename)."',\$id,\$lock);
                                        }

                                        public static function where( \$sql, \$slots=array() ) {
                                                return new RedBean_Can( RedBean_OODB::getInstance()->getToolBox(), self::\$__static_property_type,
                                                RedBean_OODB::getInstance()->getToolBox()->getSearch()->sql( \$sql, \$slots, self::\$__static_property_type ));
                                        }

                                        public static function listAll(\$start=false,\$end=false,\$orderby=' id ASC ',\$sql=false) {
                                                return RedBean_OODB::getInstance()->getToolBox()->getLister()->get(self::\$__static_property_type,\$start,\$end,\$orderby,\$sql);
                                        }

                                        public static function getReadOnly(\$id) {
                                                RedBean_OODB::getInstance()->getToolBox()->getLockManager()->setLocking( false );
                                                \$me = new self( \$id );
                                                RedBean_OODB::getInstance()->getToolBox()->getLockManager()->setLocking( true );
                                                return \$me;
                                        }

                                        public static function exists( \$id ) {
                                            return  RedBean_OODB::getInstance()->getToolBox()->getBeanStore()->exists(self::\$__static_property_type, \$id);
                                        }



                                }"; if(count($names) > 1) { $toeval .= "}"; } $teststring = (($ns!="") ? '\\'.$namespacestring.'\\'.$fullname : $fullname); eval($toeval); if (!class_exists( $teststring )) { throw new Exception("Failed to generate class"); } } else { return false; } } return true; } }
class RedBean_Mod_Dispenser extends RedBean_Mod { public function dispense($type ) { $oBean = new RedBean_OODBBean(); $oBean->type = $type; $oBean->id = 0; return $oBean; } }
interface RedBean_Mod_Filter { public function property( $name, $forReading = false ); public function table( $name ); }
class RedBean_Mod_Finder extends RedBean_Mod { public function find(RedBean_OODBBean $bean, $searchoperators = array(), $start=0, $end=100, $orderby="id ASC", $extraSQL=false) { $this->provider->getBeanChecker()->check( $bean ); $db = $this->provider->getDatabase(); $tbl = $db->escape( $bean->type ); $findSQL = $this->provider->getWriter()->getQuery("find",array( "searchoperators"=>$searchoperators, "bean"=>$bean, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL, "tbl"=>$tbl )); $ids = $db->getCol( $findSQL ); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->provider->getBeanStore()->get( $bean->type, $id , false); } } return $beans; } }
class RedBean_Mod_GarbageCollector extends RedBean_Mod { public function removeUnused() { if ($this->provider->getFacade()->isFrozen()) return; $toolbox = $this->provider; $db = $toolbox->getDatabase(); $writer = $toolbox->getWriter(); $tables = $this->provider->getTableRegister()->getTables(); foreach($tables as $table) { if (strpos($table,"_")!==false) { $tables = explode("_", $table); $classname1 = RedBean_Setup_Namespace_PRFX . $tables[0] . RedBean_Setup_Namespace_SFFX; $classname2 = RedBean_Setup_Namespace_PRFX . $tables[1] . RedBean_Setup_Namespace_SFFX; if(!class_exists( $classname1 , true) || !class_exists( $classname2 , true)) { $db->exec( $writer->getQuery("drop_tables",array("tables"=>array($table))) ); $db->exec($writer->getQuery("unregister_table",array("table"=>$table))); } } else { $classname = RedBean_Setup_Namespace_PRFX . $table . RedBean_Setup_Namespace_SFFX; if(!class_exists( $classname , true)) { $db->exec( $writer->getQuery("drop_tables",array("tables"=>array($table))) ); $db->exec($writer->getQuery("unregister_table",array("table"=>$table))); } } } } public function dropColumn($table,$property) { if ($this->provider->getFacade()->isFrozen()) { return false; } $db = $this->provider->getDatabase(); $db->exec( $this->provider->getWriter()->getQuery("drop_column", array( "table"=>$table, "property"=>$property )) ); } public function clean() { if ($this->provider->getFacade()->isFrozen()) { return false; } $db = $this->provider->getDatabase(); $tables = $db->getCol( $this->provider->getWriter()->getQuery("show_rtables") ); foreach($tables as $key=>$table) { $tables[$key] = $this->provider->getWriter()->getEscape().$table.$this->provider->getWriter()->getEscape(); } $sqlcleandatabase = $this->provider->getWriter()->getQuery("drop_tables",array( "tables"=>$tables )); $db->exec( $sqlcleandatabase ); $db->exec( $this->provider->getWriter()->getQuery("truncate_rtables") ); $this->provider->getLockManager()->reset(); return true; } }
class RedBean_Mod_Lister extends RedBean_Mod { public function get($type, $start=false, $end=false, $orderby="id ASC", $extraSQL = false) { $db = $this->provider->getDatabase(); $listSQL = $this->provider->getWriter()->getQuery("list",array( "type"=>$type, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL )); return $db->get( $listSQL ); } public function distinct($type,$field){ $db = $this->provider->getDatabase(); $type = $this->provider->getFilter()->table( $db->escape( $type ) ); $field = $db->escape( $field ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return array(); } else { $ids = $db->getCol( $this->provider->getWriter()->getQuery("distinct",array( "type"=>$type, "field"=>$field ))); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->provider->getBeanStore()->get( $type, $id , false); } } return $beans; } } public function stat( $stat, $type, $field ) { $db = $this->provider->getDatabase(); $type = $this->provider->getFilter()->table( $db->escape( $type ) ); $field = $this->provider->getFilter()->property( $db->escape( $field ) ); $stat = $db->escape( $stat ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell($this->provider->getWriter()->getQuery("stat",array( "stat"=>$stat, "field"=>$field, "type"=>$type ))); return floatval( $no ); } } }
class RedBean_Mod_LockManager extends RedBean_Mod { private $locking = true; private $locktime = 10; private $pkey = null; public function __construct(RedBean_ToolBox_ModHub $provider) { $this->pkey = str_replace(".","",microtime(true)."".mt_rand()); parent::__construct($provider); } public function getLockingTime() { return $this->locktime; } public function setLockingTime( $timeInSecs ) { if (is_int($timeInSecs) && $timeInSecs >= 0) { $this->locktime = $timeInSecs; } else { throw new RedBean_Exception_InvalidArgument( "time must be integer >= 0" ); } } public function openBean($bean, $mustlock = false) { $this->provider->getBeanChecker()->check( $bean); if (!$this->getLocking() || $bean->id === 0) return true; $db = $this->provider->getDatabase(); $removeExpiredSQL = $this->provider->getWriter()->getQuery("remove_expir_lock", array( "locktime"=>$this->getLockingTime() )); $db->exec($removeExpiredSQL); $tbl = $db->escape( $bean->type ); $id = intval( $bean->id ); $checkopenSQL = $this->provider->getWriter()->getQuery("get_lock",array( "id"=>$id, "table"=>$tbl, "key"=>$this->pkey )); $row = $db->getRow($checkopenSQL); if ($row && is_array($row) && count($row)>0) { $updateexpstamp = $this->provider->getWriter()->getQuery("update_expir_lock",array( "time"=>time(), "id"=>$row["id"] )); $db->exec($updateexpstamp); return true; } if ($mustlock) { throw new RedBean_Exception_FailedAccessBean("Could not acquire a lock for bean $tbl . $id "); return false; } $openSQL = $this->provider->getWriter()->getQuery("aq_lock", array( "table"=>$tbl, "id"=>$id, "key"=>$this->pkey, "time"=>time() )); $trials = 0; $aff = 0; while( $aff < 1 && $trials < 5 ) { $db->exec($openSQL); $aff = $db->getAffectedRows(); $trials++; if ($aff < 1) usleep(500000); } if ($trials > 4) { return false; } else { return true; } } public function setLocking( $tf ) { $this->locking = $tf; } public function getLocking() { return $this->locking; } public function unlockAll() { $this->provider->getDatabase()->exec($this->provider->getWriter()->getQuery("release",array("key"=>$this->pkey))); } public function reset() { $sql = $this->provider->getWriter()->getQuery("releaseall"); $this->provider->getDatabase()->exec( $sql ); return true; } public function getKey() { return $this->pkey; } public function setKey($key) { $this->pkey = $key; } }
class RedBean_Mod_Optimizer extends RedBean_Mod { public function run( $gc = false ,$stdTable=false, $stdCol=false) { if ($this->provider->getFacade()->isFrozen()) { return false; } $db = $this->provider->getDatabase(); $tables = $this->provider->getTableRegister()->getTables(); if ($tables && is_array($tables) && count($tables) > 0) { if ($gc) $this->provider->getGC()->removeUnused( $tables ); $table = $tables[array_rand( $tables, 1 )]; } else { return; } if ($stdTable) $table = $stdTable; $table = $db->escape( $table ); if (strpos($table,'_')!==false) return; $cols = $this->provider->getWriter()->getTableColumns( $table, $db ); if (count($cols)<1) return; $colr = $cols[array_rand( $cols )]; $col = $db->escape( $colr["Field"] ); if ($stdCol) { $exists = false; $col = $stdCol; foreach($cols as $cl) { if ($cl["Field"]==$col) { $exists = $cl; } } if (!$exists) { return; } else { $colr = $exists; } } if ($col=="id" || strpos($col,"_id")!==false) { return; } if ($gc && !intval($db->getCell( $this->provider->getWriter()->getQuery("get_null",array( "table"=>$table, "col"=>$col ) )))) { $db->exec( $this->provider->getWriter()->getQuery("drop_column",array("table"=>$table,"property"=>$col))); return; } $currenttype = $this->provider->getWriter()->sqltype_typeno[$colr["Type"]]; if ($currenttype > 0) { $trytype = rand(0,$currenttype - 1); $db->exec($this->provider->getWriter()->getQuery("test_column",array( "type"=>$this->provider->getWriter()->typeno_sqltype[$trytype], "table"=>$table ) )); $db->exec($this->provider->getWriter()->getQuery("update_test",array( "table"=>$table, "col"=>$col ))); $delta = $db->getCell($this->provider->getWriter()->getQuery("measure",array( "table"=>$table, "col"=>$col ))); if (intval($delta)===0) { $sql = $this->provider->getWriter()->getQuery("remove_test",array( "table"=>$table, "col"=>$col, "type"=>$this->provider->getWriter()->typeno_sqltype[$trytype] )); $db->exec($sql); } $db->exec( $this->provider->getWriter()->getQuery("drop_test",array( "table"=>$table )) ); } if ( strpos($colr["Type"],"TEXT")!==false || strpos($colr["Type"],"LONGTEXT")!==false ) { return; } $variance = $db->getCell($this->provider->getWriter()->getQuery("variance",array( "col"=>$col, "table"=>$table ))); $records = $db->getCell($this->provider->getWriter()->getQuery("count",array("type"=>$table))); if ($records) { $relvar = intval($variance) / intval($records); $indexname = "reddex_".$col; if ($records > 1 && $relvar > 0.85) { $sqladdindex=$this->provider->getWriter()->getQuery("index1",array( "table"=>$table, "indexname"=>$indexname, "col"=>$col )); $db->exec( $sqladdindex ); } else { $sqldropindex = $this->provider->getWriter()->getQuery("index2",array("table"=>$table,"indexname"=>$indexname)); $db->exec( $sqldropindex ); } } return true; } }
class RedBean_Mod_Scanner extends RedBean_Mod { public function type( $value ) { $v = $value; $db = $this->provider->getDatabase(); $rawv = $v; $checktypeSQL = $this->provider->getWriter()->getQuery("infertype", array( "value"=> $db->escape(strval($v)) )); $db->exec( $checktypeSQL ); $id = $db->getInsertID(); $readtypeSQL = $this->provider->getWriter()->getQuery("readtype",array( "id"=>$id )); $row=$db->getRow($readtypeSQL); $db->exec( $this->provider->getWriter()->getQuery("reset_dtyp") ); $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($rawv)) { return $tp; } $tp++; } return $tp; } public function code( $sqlType ) { if (in_array($sqlType,$this->provider->getWriter()->sqltype_typeno)) { $typeno = $this->provider->getWriter()->sqltype_typeno[$sqlType]; } else { $typeno = -1; } return $typeno; } }
class RedBean_Mod_Search extends RedBean_Mod { public function processQuerySlots($sql, $slots) { $db = $this->provider->getDatabase(); $code = sha1(rand(1,1000)*time()); foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$key."}", "{".$code.$key."}" ,$sql ); } foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$code.$key."}", $this->provider->getWriter()->getQuote().$db->escape( $value ).$this->provider->getWriter()->getQuote(),$sql ); } return $sql; } public function sql($rawsql, $slots, $table, $max=0) { $db = $this->provider->getDatabase(); $sql = $rawsql; if (is_array($slots)) { $sql = $this->processQuerySlots( $sql, $slots ); } $sql = str_replace('@ifexists:','', $sql); $rs = $db->getCol( $this->provider->getWriter()->getQuery("where",array( "table"=>$table )) . $sql ); $err = $db->getErrorMsg(); if (!$this->provider->getFacade()->isFrozen() && strpos($err,"Unknown column")!==false && $max<10) { $matches = array(); if (preg_match("/Unknown\scolumn\s'(.*?)'/",$err,$matches)) { if (count($matches)==2 && strpos($rawsql,'@ifexists')!==false) { $rawsql = str_replace('@ifexists:`'.$matches[1].'`','NULL', $rawsql); $rawsql = str_replace('@ifexists:'.$matches[1].'','NULL', $rawsql); return $this->sql( $rawsql, $slots, $table, ++$max); } } return array(); } else { if (is_array($rs)) { return $rs; } else { return array(); } } } }
class RedBean_Mod_TableRegister extends RedBean_Mod { public function getTables( $all=false ) { $db = $this->provider->getDatabase(); if ($all && $this->provider->getFacade()->isFrozen()) { $alltables = $db->getCol($this->provider->getWriter()->getQuery("show_tables")); return $alltables; } else { $alltables = $db->getCol($this->provider->getWriter()->getQuery("show_rtables")); return $alltables; } } public function register( $tablename ) { $db = $this->provider->getDatabase(); $tablename = $db->escape( $tablename ); $db->exec($this->provider->getWriter()->getQuery("register_table",array("table"=>$tablename))); } public function unregister( $tablename ) { $db = $this->provider->getDatabase(); $tablename = $db->escape( $tablename ); $db->exec($this->provider->getWriter()->getQuery("unregister_table",array("table"=>$tablename))); } }
class RedBean_Mod_Tree extends RedBean_Mod { public function add( RedBean_OODBBean $parent, RedBean_OODBBean $child ) { $db = $this->provider->getDatabase(); $parent = $this->provider->getBeanChecker()->checkBeanForAssoc($parent); $child = $this->provider->getBeanChecker()->checkBeanForAssoc($child); $this->provider->getLockManager()->openBean( $parent, true ); $this->provider->getLockManager()->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $pid = intval($parent->id); $cid = intval($child->id); $assoctable = "pc_".$db->escape($parent->type."_".$parent->type); if (!$this->provider->getFacade()->isFrozen()) { $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { $assoccreateSQL = $this->provider->getWriter()->getQuery("create_tree",array( "engine"=>$this->provider->getFacade()->getEngine(), "assoctable"=>$assoctable )); $db->exec( $assoccreateSQL ); $db->exec( $this->provider->getWriter()->getQuery("unique", array( "assoctable"=>$assoctable )) ); $this->provider->getTableRegister()->register( $assoctable ); } } $assocSQL = $this->provider->getWriter()->getQuery("add_child",array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec( $assocSQL ); } public function getChildren( RedBean_OODBBean $parent ) { $db = $this->provider->getDatabase(); $parent = $this->provider->getBeanChecker()->checkBeanForAssoc($parent); $pid = intval($parent->id); $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $parent->type; $getassocSQL = $this->provider->getWriter()->getQuery("get_children", array( "assoctable"=>$assoctable, "pid"=>$pid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->provider->getBeanStore()->get( $targettype, $i, false); } } return $beans; } } public function getParent( RedBean_OODBBean $child ) { $db = $this->provider->getDatabase(); $child = $this->provider->getBeanChecker()->checkBeanForAssoc($child); $cid = intval($child->id); $assoctable = "pc_".$db->escape( $child->type . "_" . $child->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $child->type; $getassocSQL = $this->provider->getWriter()->getQuery("get_parent", array( "assoctable"=>$assoctable, "cid"=>$cid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->provider->getBeanStore()->get( $targettype, $i, false); } } return $beans; } } public function removeChild(RedBean_OODBBean $parent, RedBean_OODBBean $child) { $db = $this->provider->getDatabase(); $parent = $this->provider->getBeanChecker()->checkBeanForAssoc($parent); $child = $this->provider->getBeanChecker()->checkBeanForAssoc($child); $this->provider->getLockManager()->openBean( $parent, true ); $this->provider->getLockManager()->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return true; } else { $pid = intval($parent->id); $cid = intval($child->id); $unassocSQL = $this->provider->getWriter()->getQuery("remove_child", array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec($unassocSQL); } } }
class QueryWriter_MySQL implements RedBean_QueryWriter, RedBean_Tool { public $typeno_sqltype = array( " TINYINT(3) UNSIGNED ", " INT(11) UNSIGNED ", " BIGINT(20) ", " VARCHAR(255) ", " TEXT ", " LONGTEXT " ); public $sqltype_typeno = array( "tinyint(3) unsigned"=>0, "int(11) unsigned"=>1, "bigint(20)"=>2, "varchar(255)"=>3, "text"=>4, "longtext"=>5 ); public $dtypes = array( "tintyintus","intus","ints","varchar255","text","ltext" ); private function getQueryCreateTable( $options=array() ) { $engine = $options["engine"]; $table = $options["table"]; if ($engine=="myisam") { $createtableSQL = "
			 CREATE TABLE `$table` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = MYISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
			"; } else { $createtableSQL = "
			 CREATE TABLE `$table` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
			"; } return $createtableSQL; } private function getQueryWiden( $options ) { extract($options); return "ALTER TABLE `$table` CHANGE `$column` `$column` $newtype "; } private function getQueryAddColumn( $options ) { extract($options); return "ALTER TABLE `$table` ADD `$column` $type "; } private function getQueryUpdate( $options ) { extract($options); $update = array(); foreach($updatevalues as $u) { $update[] = " `".$u["property"]."` = \"".$u["value"]."\" "; } return "UPDATE `$table` SET ".implode(",",$update)." WHERE id = ".$id; } private function getQueryInsert( $options ) { extract($options); foreach($insertcolumns as $k=>$v) { $insertcolumns[$k] = "`".$v."`"; } foreach($insertvalues as $k=>$v) { $insertvalues[$k] = "\"".$v."\""; } $insertSQL = "INSERT INTO `$table`
					  ( id, ".implode(",",$insertcolumns)." )
					  VALUES( null, ".implode(",",$insertvalues)." ) "; return $insertSQL; } private function getQueryCreate( $options ) { extract($options); return "INSERT INTO `$table` (id) VALUES(null) "; } private function getQueryInferType( $options ) { extract($options); $v = "\"".$value."\""; $checktypeSQL = "insert into dtyp VALUES(null,$v,$v,$v,$v,$v )"; return $checktypeSQL; } private function getQueryResetDTYP() { return "truncate table dtyp"; } private function getQueryRegisterTable( $options ) { extract( $options ); return "replace into redbeantables values (null, \"$table\") "; } private function getQueryUnregisterTable( $options ) { extract( $options ); return "delete from redbeantables where tablename = \"$table\" "; } private function getQueryRelease( $options ) { extract( $options ); return "DELETE FROM locking WHERE fingerprint=\"".$key."\" "; } private function getQueryRemoveExpirLock( $options ) { extract( $options ); return "DELETE FROM locking WHERE expire <= ".(time()-$locktime); } private function getQueryUpdateExpirLock( $options ) { extract( $options ); return "UPDATE locking SET expire=".$time." WHERE id =".$id; } private function getQueryAQLock( $options ) { extract($options); return "INSERT INTO locking VALUES(\"$table\",$id,\"".$key."\",\"".$time."\") "; } private function getQueryDistinct($options) { extract($options); return "SELECT id FROM `$type` GROUP BY $field"; } private function getQueryFastLoad( $options ) { extract( $options ); return "SELECT * FROM `$type` WHERE id IN ( ".implode(",", $ids)." ) ORDER BY FIELD(id,".implode(",", $ids).") ASC		"; } private function getQueryWhere($options) { extract($options); return "select `$table`.id from $table where "; } private function getQueryFind($options) { extract($options); $db = RedBean_OODB::getInstance()->getToolBox()->getDatabase(); $findSQL = "SELECT id FROM `$tbl` WHERE "; foreach($bean as $p=>$v) { if ($p === "type" || $p === "id") continue; $p = $db->escape($p); $v = $db->escape($v); if (isset($searchoperators[$p])) { if ($searchoperators[$p]==="LIKE") { $part[] = " `$p`LIKE \"%$v%\" "; } else { $part[] = " `$p` ".$searchoperators[$p]." \"$v\" "; } } else { } } if ($extraSQL) { $findSQL .= @implode(" AND ",$part) . $extraSQL; } else { $findSQL .= @implode(" AND ",$part) . " ORDER BY $orderby LIMIT $start, $end "; } return $findSQL; } private function getQueryList($options) { extract($options); $db = RedBean_OODB::getInstance()->getToolBox()->getDatabase(); if ($extraSQL) { $listSQL = "SELECT * FROM ".$db->escape($type)." ".$extraSQL; } else { $listSQL = "SELECT * FROM ".$db->escape($type)."
			ORDER BY ".$orderby; if ($end !== false && $start===false) { $listSQL .= " LIMIT ".intval($end); } if ($start !== false && $end !== false) { $listSQL .= " LIMIT ".intval($start).", ".intval($end); } if ($start !== false && $end===false) { $listSQL .= " LIMIT ".intval($start).", 18446744073709551615 "; } } return $listSQL; } private function getQueryAddAssocNow( $options ) { extract($options); return "REPLACE INTO `$assoctable` VALUES(null,$id1,$id2) "; } private function getQueryUnassoc( $options ) { extract($options); return "DELETE FROM `$assoctable` WHERE ".$t1."_id = $id1 AND ".$t2."_id = $id2 "; } private function getQueryCreateAssoc($options) { extract($options); return "
			 CREATE TABLE `$assoctable` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			`".$t1."_id` INT( 11 ) UNSIGNED NOT NULL,
			`".$t2."_id` INT( 11 ) UNSIGNED NOT NULL,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = ".$engine.";
			"; } private function getQueryUntree( $options ) { extract($options); return "DELETE FROM `$assoctable2` WHERE
				(parent_id = $idx1 AND child_id = $idx2) OR
				(parent_id = $idx2 AND child_id = $idx1) "; } private function getQueryAddAssoc($options) { extract( $options ); return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`".$t1."_id`, `".$t2."_id` ) "; } private function getQueryDeltreeType($options) { extract( $options ); return "DELETE FROM $assoctable WHERE parent_id = $id  OR child_id = $id "; } private function getQueryCreateTree( $options ) { extract( $options ); return "
				 CREATE TABLE `$assoctable` (
				`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				`parent_id` INT( 11 ) UNSIGNED NOT NULL,
				`child_id` INT( 11 ) UNSIGNED NOT NULL,
				 PRIMARY KEY ( `id` )
				 ) ENGINE = ".$engine.";
				"; } private function getQueryUnique( $options ) { extract( $options ); return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`parent_id`, `child_id` ) "; } private function getQueryAddChild( $options ) { extract( $options ); return "REPLACE INTO `$assoctable` VALUES(null,$pid,$cid) "; } private function getQueryRemoveChild( $options ) { extract( $options ); return "DELETE FROM `$assoctable` WHERE
				( parent_id = $pid AND child_id = $cid ) "; } private function getQueryDescribe( $options ) { extract( $options ); return "describe `$table`"; } public function getTableColumns($tbl, RedBean_DBAdapter $db) { $rs = $db->get($this->getQuery("describe",array( "table"=>$tbl ))); return $rs; } private function getQueryDropTables( $options ) { extract($options); return "drop tables ".implode(",",$tables); } private function getQueryDropColumn( $options ) { extract($options); return "ALTER TABLE `$table` DROP `$property`"; } private function getQueryTestColumn( $options ) { extract($options); return "alter table `$table` add __test  ".$type; } private function getQueryUpdateTest( $options ) { extract($options); return "update `$table` set __test=`$col`"; } private function getQueryMeasure( $options ) { extract($options); return "select count(*) as df from `$table` where
				strcmp(`$col`,__test) != 0 AND `$col` IS NOT NULL"; } private function getQueryRemoveTest($options) { extract($options); return "alter table `$table` change `$col` `$col` ".$type; } private function getQueryDropTest($options) { extract($options); return "alter table `$table` drop __test"; } private function getIndex1($options) { extract($options); return "ALTER IGNORE TABLE `$table` ADD INDEX $indexname (`$col`)"; } private function getIndex2($options) { extract($options); return "ALTER IGNORE TABLE `$table` DROP INDEX $indexname"; } private function getDestruct($options) { extract($options); if ($rollback) return; if ($engine=="innodb") return "COMMIT"; else return ""; } private function getBasicQuery( $options, $sql_type="SELECT" ) { extract($options); if (isset($fields)){ $sqlfields = array(); foreach($fields as $field) { $sqlfields[] = " `$field` "; } $field = implode(",", $fields); } if (!isset($field)) $field=""; $sql = "$sql_type ".$field." FROM `$table` "; if (isset($where)) { if (is_array($where)) { $crit = array(); foreach($where as $w=>$v) { $crit[] = " `$w` = \"".$v."\""; } $sql .= " WHERE ".implode(" AND ",$crit); } else { $sql .= " WHERE ".$where; } } return $sql; } public function getQuery( $queryname, $params=array() ) { switch($queryname) { case "create_table": return $this->getQueryCreateTable($params); break; case "widen_column": return $this->getQueryWiden($params); break; case "add_column": return $this->getQueryAddColumn($params); break; case "update": return $this->getQueryUpdate($params); break; case "insert": return $this->getQueryInsert($params); break; case "create": return $this->getQueryCreate($params); break; case "infertype": return $this->getQueryInferType($params); break; case "readtype": return $this->getBasicQuery( array("fields"=>array("tinyintus","intus","ints","varchar255","text"), "table" =>"dtyp", "where"=>array("id"=>$params["id"]))); break; case "reset_dtyp": return $this->getQueryResetDTYP(); break; case "prepare_innodb": return "SET autocommit=0"; break; case "prepare_myisam": return "SET autocommit=1"; break; case "starttransaction": return "START TRANSACTION"; break; case "setup_dtyp": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				CREATE TABLE IF NOT EXISTS `dtyp` (
				  `id` int(11) unsigned NOT NULL auto_increment,
				  `tinyintus` tinyint(3) unsigned NOT NULL,
				  `intus` int(11) unsigned NOT NULL,
				  `ints` bigint(20) NOT NULL,
				  `varchar255` varchar(255) NOT NULL,
				  `text` text NOT NULL,
				  PRIMARY KEY  (`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "clear_dtyp": return "drop tables dtyp"; break; case "setup_locking": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				CREATE TABLE IF NOT EXISTS `locking` (
				  `tbl` varchar(255) NOT NULL,
				  `id` bigint(20) NOT NULL,
				  `fingerprint` varchar(255) NOT NULL,
				  `expire` int(11) NOT NULL,
				  UNIQUE KEY `tbl` (`tbl`,`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "setup_tables": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				 CREATE TABLE IF NOT EXISTS `redbeantables` (
				 `id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				 `tablename` VARCHAR( 255 ) NOT NULL ,
				 PRIMARY KEY ( `id` ),
				 UNIQUE KEY `tablename` (`tablename`)
				 ) ENGINE = $engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "show_tables": return "show tables"; break; case "show_rtables": return "select tablename from redbeantables"; break; case "register_table": return $this->getQueryRegisterTable( $params ); break; case "unregister_table": return $this->getQueryUnregisterTable( $params ); break; case "release": return $this->getQueryRelease( $params ); break; case "remove_expir_lock": return $this->getQueryRemoveExpirLock( $params ); break; case "update_expir_lock": return $this->getQueryUpdateExpirLock( $params ); break; case "aq_lock": return $this->getQueryAQLock( $params ); break; case "get_lock": return $this->getBasicQuery(array("fields"=>array("id"),"table"=>"locking","where"=>array("id"=>$params["id"],"tbl"=>$params["table"],"fingerprint"=>$params["key"]))); break; case "get_bean": return $this->getBasicQuery(array("field"=>"*","table"=>$params["type"],"where"=>array("id"=>$params["id"]))); break; case "bean_exists": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"],"where"=>array("id"=>$params["id"]))); break; case "count": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"])); break; case "distinct": return $this->getQueryDistinct($params); break; case "stat": return $this->getBasicQuery(array("field"=>$params["stat"]."(`".$params["field"]."`)","table"=>$params["type"])); break; case "releaseall": return "TRUNCATE locking"; break; case "fastload": return $this->getQueryFastLoad($params); break; case "where": return $this->getQueryWhere($params); break; case "find": return $this->getQueryFind( $params); break; case "list": return $this->getQueryList( $params); break; case "create_assoc": return $this->getQueryCreateAssoc( $params ); break; case "add_assoc": return $this->getQueryAddAssoc( $params ); break; case "add_assoc_now": return $this->getQueryAddAssocNow( $params ); break; case "unassoc": return $this->getQueryUnassoc( $params ); break; case "untree": return $this->getQueryUntree( $params ); break; case "get_assoc": $col = $params["t1"]."_id"; return $this->getBasicQuery(array( "table"=>$params["assoctable"], "fields"=>array( $params["t2"]."_id" ), "where"=>array( $col=>$params["id"]) )); break; case "trash": return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array("id"=>$params["id"])),"DELETE"); break; case "deltree": return $this->getBasicQuery(array("table"=>$params["table"],"where"=>" parent_id = ".$params["id"]." OR child_id = ".$params["id"]),"DELETE"); break; case "unassoc_all_t1": $col = $params["t"]."_id"; return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE"); break; case "unassoc_all_t2": $col = $params["t"]."2_id"; return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE"); break; case "deltreetype": return $this->getQueryDeltreeType( $params ); break; case "unassoctype1": $col = $params["t1"]."_id"; $r = $this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE"); return $r; break; case "unassoctype2": $col = $params["t1"]."2_id"; $r =$this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE"); return $r; break; case "create_tree": return $this->getQueryCreateTree( $params ); break; case "unique": return $this->getQueryUnique( $params ); break; case "add_child": return $this->getQueryAddChild( $params ); break; case "get_children": return $this->getBasicQuery(array("table"=>$params["assoctable"],"fields"=>array("child_id"), "where"=>array("parent_id"=>$params["pid"]))); break; case "get_parent": return $this->getBasicQuery(array( "where"=>array("child_id"=>$params["cid"]),"fields"=>array("parent_id"),"table"=>$params["assoctable"] )); break; case "remove_child": return $this->getQueryRemoveChild( $params ); break; case "num_related": $col = $params["t1"]."_id"; return $this->getBasicQuery(array("field"=>"COUNT(1)","table"=>$params["assoctable"],"where"=>array($col=>$params["id"]))); break; case "drop_tables": return $this->getQueryDropTables( $params ); break; case "truncate_rtables": return "truncate redbeantables"; break; case "drop_column": return $this->getQueryDropColumn( $params ); break; case "describe": return $this->getQueryDescribe( $params ); break; case "get_null": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["table"],"where"=>" `".$params["col"]."` IS NOT NULL ")); return $this->getQueryGetNull( $params ); break; case "test_column": return $this->getQueryTestColumn( $params ); break; case "update_test": return $this->getQueryUpdateTest( $params ); break; case "measure": return $this->getQueryMeasure( $params ); break; case "remove_test": return $this->getQueryRemoveTest($params); break; case "drop_test": return $this->getQueryDropTest($params); break; case "variance": return $this->getBasicQuery(array("field"=>"count(distinct `".$params["col"]."`)","table"=>$params["table"])); break; case "index1": return $this->getIndex1($params); break; case "index2": return $this->getIndex2($params); break; case "drop_type": return $this->getBasicQuery(array("table"=>$params["type"]),"DELETE"); break; case "destruct": return $this->getDestruct($params); break; default: throw new Exception("QueryWriter has no support for Query:".$queryname); } } public function getQuote() { return "\""; } public function getEscape() { return "`"; } }
class RedBean_ToolBox_ModHub extends RedBean_ToolBox { private $facade; public function getDatabase() { return $this->give("database"); } public function getWriter() { return $this->give("writer"); } public function getFilter() { return $this->give("filter"); } public function setFacade( $facade ) { $this->facade = $facade; } public function getFacade() { return $this->facade; } public function __call( $who, $args=array() ) { $tool = strtolower(substr($who,3)); if ($this->has($tool)) { return $this->give( $tool ); } else { throw new Exception(" $tool not available "); } } public function __get($v) { throw new Exception("getter not allowed"); } public function __set($v,$i) { throw new Exception("setter not allowed"); } }
class RedBean_Validator_AlphaNumeric implements RedBean_Validator { public function check( $v ) { return (bool) preg_match('/^[A-Za-z0-9]+$/', $v); } }
class RedBean_Mod_Filter_NullFilter extends RedBean_Mod implements RedBean_Mod_Filter { public function __construct(){} public function property( $name, $forReading = false ) { return $name; } public function table( $name ) { return $name; } }
class RedBean_Mod_Filter_Strict extends RedBean_Mod implements RedBean_Mod_Filter { public function __construct(){} public function property( $name, $forReading = false ) { $name = strtolower($name); if (!$forReading) { if ($name=="type") { throw new RedBean_Exception_Security("type is a reserved property to identify the table, pleae use another name for this property."); } if ($name=="id") { throw new RedBean_Exception_Security("id is a reserved property to identify the record, pleae use another name for this property."); } } $name = trim(preg_replace("/[^abcdefghijklmnopqrstuvwxyz0123456789]/","",$name)); if (strlen($name)===0) { throw new RedBean_Exception_Security("Empty property is not allowed"); } return $name; } public function table( $name ) { $name = strtolower(trim(preg_replace("/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]/","",$name))); if (strlen($name)===0) { throw new RedBean_Exception_Security("Empty property is not allowed"); } return $name; } }||||||||class RedBean_Observable { private $observers = array(); public function addEventListener( $eventname, RedBean_Observer $observer ) { if (!isset($this->observers[ $eventname ])) { $this->observers[ $eventname ] = array(); } $this->observers[ $eventname ][] = $observer; } public function signal( $eventname, $info ) { if (!isset($this->observers[ $eventname ])) { $this->observers[ $eventname ] = array(); } foreach($this->observers[$eventname] as $observer) { $observer->onEvent( $eventname, $info ); } } }
interface RedBean_Observer { public function onEvent( $eventname, $info ); }
class RedBean_OODB extends RedBean_Observable { private $writer; private $isFrozen = false; public function __construct( RedBean_QueryWriter $writer ) { $this->writer = $writer; $this->tableRegister = new RedBean_TableRegister( $writer ); } public function freeze( $tf ) { $isFrozen = (bool) $tf; } public function dispense($type ) { $bean = new RedBean_Bean(); $bean->__info = array( "type"=>$type ); $bean->id = 0; $this->check( $bean ); return $bean; } public function check( RedBean_OODBBean $bean ) { if (!isset($bean->__info)) { throw new RedBean_Exception_Security("Bean has no Meta Information"); } if (!isset($bean->id) || !isset($bean->__info["type"])) { throw new RedBean_Exception_Security("Bean has incomplete Meta Information"); } $pattern = '/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/'; if (preg_match($pattern,$bean->__info["type"])) { throw new RedBean_Exception_Security("Bean Type is invalid"); } foreach($bean as $prop=>$value) { if ( ($prop != "__info") && ( is_array($value) || is_object($value) || strlen($prop)<1 || preg_match($pattern,$prop) ) ) { throw new RedBean_Exception_Security("Invalid Bean: property $prop OR value $value "); } } } public function store( RedBean_OODBBean $bean ) { $this->signal( "update", $bean ); $this->check($bean); $table = $this->writer->escape($bean->__info["type"]); if (!$this->isFrozen) { $tables = $this->writer->getTables(); if (!in_array($table, $tables)) { $this->writer->createTable( $table ); } $columns = $this->writer->getColumns($table) ; $insertvalues = array(); $insertcolumns = array(); $updatevalues = array(); foreach( $bean as $p=>$v) { if ($p!="__info" && $p!="id") { $typeno = $this->writer->scanType($v); if (isset($columns[$p])) { $sqlt = $this->writer->code($columns[$p]); if ($typeno > $sqlt) { $this->writer->widenColumn( $table, $p, $typeno ); } } else { $this->writer->addColumn($table, $p, $typeno); } $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } if ($bean->id) { if (count($updatevalues)>0) { $this->writer->updateRecord( $table, $updatevalues, $bean->id ); } return (int) $bean->id; } else { $id = $this->writer->insertRecord( $table, $insertcolumns, $insertvalues ); $bean->id = $id; return (int) $id; } } } public function load($type, $id) { $bean = $this->dispense( $type ); $row = $this->writer->selectRecord($type,$id); foreach($row as $p=>$v) { $bean->$p = $v; } $this->signal( "open", $bean ); return $bean; } public function trash( $bean ) { $this->check( $bean ); $this->writer->deleteRecord( $bean->__info["type"], $bean->id ); } }
interface RedBean_OODBBean { } class RedBean_Bean implements RedBean_OODBBean { }

interface RedBean_QueryWriter { }
if (!defined("RedBean_Setup_Namespace_PRFX")) define("RedBean_Setup_Namespace_PRFX",""); if (!defined("RedBean_Setup_Namespace_SFFX")) define("RedBean_Setup_Namespace_SFFX",""); class RedBean_Setup { public static function kickstart( $dsn="mysql:host=localhost;dbname=oodb", $username='root', $password='', $freeze=false, $engine="innodb", $debugmode=false, $unlockall=false) { if (!class_exists("R")) { eval("
				class R extends RedBean_OODB { }
			"); eval("
				class RD extends RedBean_Decorator { }
			"); } if (strpos($dsn,"embmysql")===0) { $dsn .= ';'; $matches = array(); preg_match('/host=(.+?);/',$dsn,$matches); $matches2 = array(); preg_match('/dbname=(.+?);/',$dsn,$matches2); if (count($matches)==2 && count($matches2)==2) { $db = RedBean_Driver_MySQL::getInstance( $matches[1], $username, $password, $matches2[1] ); } else { throw new Exception("Could not parse MySQL DSN"); } } else{ $db = new Redbean_Driver_PDO( $dsn, $username, $password, null ); } if ($debugmode) { $db->setDebugMode(1); } $conn = new RedBean_DBAdapter($db); $writer = new QueryWriter_MySQL(); $toolbox = new RedBean_ToolBox_ModHub(); $toolbox->add("database", $conn); $toolbox->add("writer", $writer); $toolbox->add("filter",new RedBean_Mod_Filter_Strict($toolbox)); $toolbox->add("beanchecker",new RedBean_Mod_BeanChecker($toolbox)); $toolbox->add("gc",new RedBean_Mod_GarbageCollector($toolbox)); $toolbox->add("classgenerator",new RedBean_Mod_ClassGenerator($toolbox)); $toolbox->add("search",new RedBean_Mod_Search($toolbox)); $toolbox->add("optimizer",new RedBean_Mod_Optimizer($toolbox)); $toolbox->add("beanstore",new RedBean_Mod_BeanStore($toolbox)); $toolbox->add("association",new RedBean_Mod_Association($toolbox)); $toolbox->add("lockmanager",new RedBean_Mod_LockManager($toolbox)); $toolbox->add("tree",new RedBean_Mod_Tree($toolbox)); $toolbox->add("tableregister",new RedBean_Mod_TableRegister($toolbox)); $toolbox->add("finder",new RedBean_Mod_Finder($toolbox)); $toolbox->add("dispenser",new RedBean_Mod_Dispenser($toolbox)); $toolbox->add("scanner",new RedBean_Mod_Scanner($toolbox)); $toolbox->add("lister",new RedBean_Mod_Lister($toolbox)); $redbean = RedBean_OODB::getInstance( $toolbox ); $toolbox->setFacade( $redbean ); $redbean->setEngine($engine); if ($unlockall) { $redbean->getLockManager()->reset(); } if ($freeze) { $redbean->freeze(); } return $redbean; } public static function kickstartDev( $gen, $dsn, $username="root", $password="", $debug=false ) { return self::kickstart( $dsn, $username, $password, false, "innodb", $debug, false); } public static function kickstartFrozen( $gen, $dsn, $username="root", $password="" ) { return self::kickstart( $dsn, $username, $password, true, "innodb", false, false); } public static function reconnect( RedBean_DBAdapter $newDatabase ) { $oldToolBox = RedBean_OODB::getInstance()->getToolBox(); $oldDatabase = $oldToolBox->getDatabase(); $oldToolBox->add("database", $newDatabase); return $oldDatabase; } }
class RedBean_Sieve { private $vals; private $report = array(); private $succes = true; public static function make( $validations ) { $sieve = new self; $sieve->vals = $validations; return $sieve; } public function valid( RedBean_Decorator $deco ) { foreach($this->vals as $p => $v) { if (class_exists($v)) { $validator = new $v( $deco, $report ); if ($validator instanceof RedBean_Validator) { $message = $validator->check( $deco->$p ); if ($message !== true) { $this->succes = false; } if (!isset($this->report[$v])) { $this->report[$v]=array(); } $this->report[ $v ][ $p ] = $message; } } } return $this->succes; } public function validAndReport( RedBean_Decorator $deco, $key=false ) { $this->valid( $deco ); if ($key) { if (isset($this->report[$key])) { return $this->report[$key]; } } return $this->report; } public function getReport() { return $this->report; } }
class RedBean_TableRegister { private $writer; public function __construct( RedBean_QueryWriter $adapter ) { $this->writer = $adapter; } public function getTables( $all=false ) { $db = $this->provider->getDatabase(); if ($all && $this->provider->getFacade()->isFrozen()) { $alltables = $db->getCol($this->provider->getWriter()->getQuery("show_tables")); return $alltables; } else { $alltables = $db->getCol($this->provider->getWriter()->getQuery("show_rtables")); return $alltables; } } public function register( $tablename ) { $db = $this->provider->getDatabase(); $tablename = $db->escape( $tablename ); $db->exec($this->provider->getWriter()->getQuery("register_table",array("table"=>$tablename))); } public function unregister( $tablename ) { $db = $this->provider->getDatabase(); $tablename = $db->escape( $tablename ); $db->exec($this->provider->getWriter()->getQuery("unregister_table",array("table"=>$tablename))); } }
interface RedBean_Tool { }
abstract class RedBean_ToolBox { private $tools = array(); protected function give( $toolname ) { if ($this->has($toolname)) { return $this->tools[$toolname]; } else { throw new Exception("Module or tool $toolname has not been installed."); } } public function has( $toolname ) { return (isset($this->tools[$toolname])); } public function add( $label, RedBean_Tool $tool ) { $this->tools[$label] = $tool; } }
class RedBean_Tools { private static $class_definitions = array(); private static $remove_whitespaces; private static $count = 0; public static function walk_dir( $root, $callback, $recursive = true ) { $root = realpath($root); $dh = @opendir( $root ); if( false === $dh ) { return false; } while(false !== ($file = readdir($dh))) { if( "." == $file || ".." == $file ) { continue; } call_user_func( $callback, "{$root}/{$file}" ); if( false !== $recursive && is_dir( "{$root}/{$file}" )) { Redbean_Tools::walk_dir( "{$root}/{$file}", $callback, $recursive ); } } closedir($dh); return true; } public static function compile($file = '', $removeWhiteSpaces = true) { self::$remove_whitespaces = $removeWhiteSpaces; self::$class_definitions = array(); $base = dirname(__FILE__) . '/'; self::walk_dir($base,'Redbean_Tools::stripClassDefinition'); $str =''; ksort(self::$class_definitions); foreach( self::$class_definitions as $k=>$v){ $str .= $v; } $content = str_replace("\r\n","\n", ' ' . "\n" . file_get_contents($base . 'license.txt') . "\n" . $str); if(!empty($file)) { file_put_contents($file, $content); } return $content; } private static function stripClassDefinition($file) { if(is_file($file) && substr($file, -4) == '.php') { $index = (substr_count($file, "/") * 1000) + (++self::$count); if(self::$remove_whitespaces) { self::$class_definitions[$index] = "\n" . trim(str_replace('', '', php_strip_whitespace($file))); } else { self::$class_definitions[$index] = "\n" . trim(str_replace('', '', trim(file_get_contents($file)))); } } } }
interface RedBean_Validator { public function check( $property ); }
class RedBean_Driver_MySQL implements RedBean_Driver { private static $me = null; public $Insert_ID; private $debug = false; private $rs = null; private function __construct(){} public static function getInstance( $host, $user, $pass, $dbname ) { if (!self::$me) { mysql_connect( $host, $user, $pass ); mysql_selectdb( $dbname ); self::$me = new RedBean_Driver_MySQL(); } return self::$me; } public function GetAll( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; $arr = array(); while( $r = @mysql_fetch_assoc($rs) ) { $arr[] = $r; } if ($this->debug) { if (count($arr) > 0) { echo "<br><b style='color:green'>resultset: ".count($arr)." rows</b>"; } $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } return $arr; } public function GetCol( $sql ) { $rows = $this->GetAll($sql); $cols = array(); foreach( $rows as $row ) { $cols[] = array_shift( $row ); } return $cols; } public function GetCell( $sql ) { $arr = $this->GetAll( $sql ); $row1 = array_shift( $arr ); $col1 = array_shift( $row1 ); return $col1; } public function GetRow( $sql ) { $arr = $this->GetAll( $sql ); return array_shift( $arr ); } public function ErrorNo() { return mysql_errno(); } public function Errormsg() { return mysql_error(); } public function Execute( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; if ($this->debug) { $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } $this->Insert_ID = $this->GetInsertID(); return intval( mysql_affected_rows()); } public function Escape( $str ) { return mysql_real_escape_string( $str ); } public function GetInsertID() { return intval( mysql_insert_id()); } public function Affected_Rows() { return mysql_affected_rows(); } public function setDebugMode($tf) { $this->debug = $tf; } public function GetRaw() { return $this->rs; } }
class Redbean_Driver_PDO implements RedBean_Driver { private static $instance; private $debug = false; private $pdo; private $affected_rows; private $rs; private $exc =0; public static function getInstance($dsn, $user, $pass, $dbname) { if(is_null(self::$instance)) { self::$instance = new Redbean_Driver_PDO($dsn, $user, $pass); } return self::$instance; } public function __construct($dsn, $user, $pass) { $this->pdo = new PDO( $dsn, $user, $pass, array(1002 => 'SET NAMES utf8', PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC) ); } public function GetAll( $sql ) { $this->exc = 0; try{ if ($this->debug) { echo "<HR>" . $sql; } $rs = $this->pdo->query($sql); $this->rs = $rs; $rows = $rs->fetchAll(); if(!$rows) { $rows = array(); } if ($this->debug) { if (count($rows) > 0) { echo "<br><b style='color:green'>resultset: " . count($rows) . " rows</b>"; } } } catch(Exception $e){ $this->exc = 1; if ($this->debug){ $str = $this->Errormsg(); if ($str != "") { echo "<br><b style='color:red'>" . $str . "</b>"; } } return array(); } return $rows; } public function GetCol($sql) { $this->exc = 0; try{ $rows = $this->GetAll($sql); $cols = array(); if ($rows && is_array($rows) && count($rows)>0){ foreach ($rows as $row) { $cols[] = array_shift($row); } } } catch(Exception $e){ $this->exc = 1; return array(); } return $cols; } public function GetCell($sql) { $this->exc = 0; try{ $arr = $this->GetAll($sql); $row1 = array_shift($arr); $col1 = array_shift($row1); } catch(Exception $e){ $this->exc = 1; } return $col1; } public function GetRow($sql) { $this->exc = 0; try{ $arr = $this->GetAll($sql); } catch(Exception $e){ $this->exc = 1; return array(); } return array_shift($arr); } public function ErrorNo() { if (!$this->exc) return 0; $infos = $this->pdo->errorInfo(); return $infos[1]; } public function Errormsg() { if (!$this->exc) return ""; $infos = $this->pdo->errorInfo(); return $infos[2]; } public function Execute( $sql ) { $this->exc = 0; try{ if ($this->debug) { echo "<HR>" . $sql; } $this->affected_rows = $this->pdo->exec($sql); } catch(Exception $e){ $this->exc = 1; if ($this->debug) { $str = $this->Errormsg(); if ($str != "") { echo "<br><b style='color:red'>" . $str . "</b>"; } } return 0; } return $this->affected_rows; } public function Escape( $str ) { return substr(substr($this->pdo->quote($str), 1), 0, -1); } public function GetInsertID() { return (int) $this->pdo->lastInsertId(); } public function Affected_Rows() { return (int) $this->affected_rows; } public function setDebugMode( $tf ) { $this->debug = (bool)$tf; } public function GetRaw() { return $this->rs; } }
class RedBean_Exception_FailedAccessBean extends Exception{}
class RedBean_Exception_InvalidArgument extends RedBean_Exception {}
class RedBean_Exception_InvalidParentChildCombination extends RedBean_Exception{}
class RedBean_Exception_Security extends RedBean_Exception {}
class RedBean_Exception_SQL extends RedBean_Exception {};
class RedBean_Mod_Association extends RedBean_Mod { public function link( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { $db = $this->provider->getDatabase(); $bean1 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean1); $bean2 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean2); $this->provider->getLockManager()->openBean( $bean1, true ); $this->provider->getLockManager()->openBean( $bean2, true ); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2) { $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); if (!$this->provider->getFacade()->isFrozen()) { $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; } $assoccreateSQL = $this->provider->getWriter()->getQuery("create_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2, "engine"=>$this->provider->getFacade()->getEngine() )); $db->exec( $assoccreateSQL ); $db->exec( $this->provider->getWriter()->getQuery("add_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2 )) ); $this->provider->getTableRegister()->register( $assoctable ); } } $assocSQL = $this->provider->getWriter()->getQuery("add_assoc_now", array( "id1"=>$id1, "id2"=>$id2, "assoctable"=>$assoctable )); $db->exec( $assocSQL ); } public function breakLink(RedBean_OODBBean $bean1, RedBean_OODBBean $bean2) { $db = $this->provider->getDatabase(); $bean1 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean1); $bean2 = $this->provider->getBeanChecker()->checkBeanForAssoc($bean2); $this->provider->getLockManager()->openBean( $bean1, true ); $this->provider->getLockManager()->openBean( $bean2, true ); $idx1 = intval($bean1->id); $idx2 = intval($bean2->id); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2) { $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->provider->getTableRegister()->getTables(); if (in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; $unassocSQL = $this->provider->getWriter()->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t2, "t2"=>$t1, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } $unassocSQL = $this->provider->getWriter()->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t1, "t2"=>$t2, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } if ($tp1==$tp2) { $assoctable2 = "pc_".$db->escape( $bean1->type )."_".$db->escape( $bean1->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (in_array($assoctable2, $alltables)) { $unassocSQL = $this->provider->getWriter()->getQuery("untree", array( "assoctable2"=>$assoctable2, "idx1"=>$idx1, "idx2"=>$idx2 )); $db->exec($unassocSQL); } } } public function get( RedBean_OODBBean $bean, $targettype ) { $db = $this->provider->getDatabase(); $bean = $this->provider->getBeanChecker()->checkBeanForAssoc($bean); $id = intval($bean->id); $t1 = $db->escape( $this->provider->getFilter()->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { if ($t1==$t2) { $t2.="2"; } $getassocSQL = $this->provider->getWriter()->getQuery("get_assoc",array( "t1"=>$t1, "t2"=>$t2, "assoctable"=>$assoctable, "id"=>$id )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->provider->getBeanStore()->get( $targettype, $i, false); } } return $beans; } } public function deleteAllAssoc( $bean ) { $db = $this->provider->getDatabase(); $bean = $this->provider->getBeanChecker()->checkBeanForAssoc($bean); $this->provider->getLockManager()->openBean( $bean, true ); $id = intval( $bean->id ); $alltables = $this->provider->getTableRegister()->getTables(); $t = $db->escape($bean->type); $checktables = array(); foreach( $alltables as $table ) { if (strpos($table,$t."_")!==false || strpos($table,"_".$t)!==false) { $checktables[] = $table; } } foreach($checktables as $table) { if (strpos($table,"pc_")===0) { $db->exec( $this->provider->getWriter()->getQuery("deltree",array( "id"=>$id, "table"=>$table )) ); } else { $db->exec( $this->provider->getWriter()->getQuery("unassoc_all_t1",array("table"=>$table,"t"=>$t,"id"=>$id)) ); $db->exec( $this->provider->getWriter()->getQuery("unassoc_all_t2",array("table"=>$table,"t"=>$t,"id"=>$id)) ); } } return true; } public function deleteAllAssocType( $targettype, $bean ) { $db = $this->provider->getDatabase(); $bean = $this->provider->getBeanChecker()->checkBeanForAssoc($bean); $this->provider->getLockManager()->openBean( $bean, true ); $id = intval( $bean->id ); $t1 = $db->escape( $this->provider->getFilter()->table($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $availabletables = $this->provider->getTableRegister()->getTables(); if (in_array('pc_'.$assoctable,$availabletables)) { $db->exec( $this->provider->getWriter()->getQuery("deltreetype",array( "assoctable"=>'pc_'.$assoctable, "id"=>$id )) ); } if (in_array($assoctable,$availabletables)) { $db->exec( $this->provider->getWriter()->getQuery("unassoctype1",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); $db->exec( $this->provider->getWriter()->getQuery("unassoctype2",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); } return true; } public function numOfRelated( $type, RedBean_OODBBean $bean ) { $db = $this->provider->getDatabase(); $t2 = $this->provider->getFilter()->table( $db->escape( $type ) ); $this->provider->getBeanChecker()->check( $bean ); $t1 = $this->provider->getFilter()->table( $bean->type ); $tref = $this->provider->getFilter()->table( $db->escape( $bean->type ) ); $id = intval( $bean->id ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $tables = $this->provider->getTableRegister()->getTables(); if ($tables && is_array($tables) && count($tables) > 0) { if (in_array( $t1, $tables ) && in_array($t2, $tables)){ $sqlCountRelations = $this->provider->getWriter()->getQuery( "num_related", array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id ) ); return (int) $db->getCell( $sqlCountRelations ); } } else { return 0; } } }
class RedBean_Mod_BeanChecker extends RedBean_Mod { public function check( RedBean_OODBBean $bean ) { if (!$this->provider->getDatabase()) { throw new RedBean_Exception_Security("No database object. Have you used kickstart to initialize RedBean?"); } foreach($bean as $prop=>$value) { if (preg_match('/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/',$prop)) { throw new RedBean_Exception_Security("Invalid Characters in property $prop "); } $prop = preg_replace('/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/',"",$prop); if (strlen(trim($prop))===0) { throw new RedBean_Exception_Security("Invalid Characters in property"); } else { if (is_array($value)) { throw new RedBean_Exception_Security("Cannot store an array, use composition instead or serialize first."); } if (is_object($value)) { throw new RedBean_Exception_Security("Cannot store an object, use composition instead or serialize first."); } $bean->$prop = $value; } } if (!isset($bean->id)) { throw new RedBean_Exception_Security("Invalid bean, no id"); } if (!is_numeric($bean->id) || $bean->id < 0 || (round($bean->id)!=$bean->id)) { throw new RedBean_Exception_Security("Invalid bean, id not numeric"); } if (!isset($bean->type)) { throw new RedBean_Exception_Security("Invalid bean, no type"); } if (!is_string($bean->type) || is_numeric($bean->type) || strlen($bean->type)<3) { throw new RedBean_Exception_Security("Invalid bean, wrong type"); } if ($bean->type==="locking" || $bean->type==="dtyp" || $bean->type==="redbeantables") { throw new RedBean_Exception_Security("Beantype is reserved table"); } if (strpos($bean->type,"_")!==false && ctype_alnum($bean->type)) { throw new RedBean_Exception_Security("Beantype contains illegal characters"); } } public function checkBeanForAssoc( $bean ) { $this->check($bean); if (intval($bean->id) < 1) { $bean->id = $this->provider->getBeanStore()->set( $bean ); } return $bean; } }
class RedBean_Mod_BeanStore extends RedBean_Mod { public function set( RedBean_OODBBean $bean ) { $this->provider->getBeanChecker()->check($bean); $db = $this->provider->getDatabase(); $table = $db->escape($bean->type); if (!$this->provider->getFacade()->isFrozen()) { $tables = $this->provider->getTableRegister()->getTables(); if (!in_array($table, $tables)) { $createtableSQL = $this->provider->getWriter()->getQuery("create_table", array( "engine"=>$this->provider->getFacade()->getEngine(), "table"=>$table )); $db->exec( $createtableSQL ); $this->provider->getTableRegister()->register( $table ); } $columnsRaw = $this->provider->getWriter()->getTableColumns($table, $db) ; $columns = array(); foreach($columnsRaw as $r) { $columns[$r["Field"]]=$r["Type"]; } $insertvalues = array(); $insertcolumns = array(); $updatevalues = array(); foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $typeno = $this->provider->getScanner()->type($v); if (isset($columns[$p])) { $sqlt = $this->provider->getScanner()->code($columns[$p]); if ($typeno > $sqlt) { $changecolumnSQL = $this->provider->getWriter()->getQuery( "widen_column", array( "table" => $table, "column" => $p, "newtype" => $this->provider->getWriter()->typeno_sqltype[$typeno] ) ); $db->exec( $changecolumnSQL ); } } else { $addcolumnSQL = $this->provider->getWriter()->getQuery("add_column",array( "table"=>$table, "column"=>$p, "type"=> $this->provider->getWriter()->typeno_sqltype[$typeno] )); $db->exec( $addcolumnSQL ); } $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } else { foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } if ($bean->id) { $this->provider->getLockManager()->openBean($bean, true); if (count($updatevalues)>0) { $updateSQL = $this->provider->getWriter()->getQuery("update", array( "table"=>$table, "updatevalues"=>$updatevalues, "id"=>$bean->id )); $db->exec( $updateSQL ); } } else { if (count($insertvalues)>0) { $insertSQL = $this->provider->getWriter()->getQuery("insert",array( "table"=>$table, "insertcolumns"=>$insertcolumns, "insertvalues"=>$insertvalues )); } else { $insertSQL = $this->provider->getWriter()->getQuery("create", array("table"=>$table)); } $db->exec( $insertSQL ); $bean->id = $db->getInsertID(); $this->provider->getLockManager()->openBean($bean); } return $bean->id; } public function get($type, $id, $data=false) { $bean = $this->provider->getDispenser()->dispense( $type ); $db = $this->provider->getDatabase(); $table = $db->escape( $type ); $id = abs( intval( $id ) ); $bean->id = $id; $this->provider->getLockManager()->openBean($bean); if (!$data) { $getSQL = $this->provider->getWriter()->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $db->getRow( $getSQL ); } else { $row = $data; } if ($row && is_array($row) && count($row)>0) { foreach($row as $p=>$v) { $bean->$p = $v; } } else { throw new RedBean_Exception_FailedAccessBean("bean not found"); } return $bean; } public function trash( RedBean_OODBBean $bean ) { $this->provider->getBeanChecker()->check( $bean ); if (intval($bean->id)===0) return; $this->provider->getAssociation()->deleteAllAssoc( $bean ); $this->provider->getLockManager()->openBean($bean); $table = $this->provider->getDatabase()->escape($bean->type); $id = intval($bean->id); $this->provider->getDatabase()->exec( $this->provider->getWriter()->getQuery("trash",array( "table"=>$table, "id"=>$id )) ); } public function exists($type,$id) { $db = $this->provider->getDatabase(); $id = intval( $id ); $type = $db->escape( $type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return false; } else { $no = $db->getCell( $this->provider->getWriter()->getQuery("bean_exists",array( "type"=>$type, "id"=>$id )) ); if (intval($no)) { return true; } else { return false; } } } public function numberof($type) { $db = $this->provider->getDatabase(); $type = $this->provider->getFilter()->table( $db->escape( $type ) ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell( $this->provider->getWriter()->getQuery("count",array( "type"=>$type ))); return intval( $no ); } } public function fastloader($type, $ids) { $db = $this->provider->getDatabase(); $sql = $this->provider->getWriter()->getQuery("fastload", array( "type"=>$type, "ids"=>$ids )); return $db->get( $sql ); } public function trashAll($type) { $this->provider->getDatabase()->exec( $this->provider->getWriter()->getQuery("drop_type",array("type"=>$this->provider->getFilter()->table($type)))); } }
class RedBean_Mod_ClassGenerator extends RedBean_Mod { public function generate( $classes, $prefix = false, $suffix = false ) { if (!$prefix) { $prefix = RedBean_Setup_Namespace_PRFX; } if (!$suffix) { $suffix = RedBean_Setup_Namespace_SFFX; } $classes = explode(",",$classes); foreach($classes as $c) { $ns = ''; $names = explode('\\', $c); $className = trim(end($names)); if(count($names) > 1) { $namespacestring = implode('\\', array_slice($names, 0, -1)); $ns = 'namespace ' . $namespacestring . " { "; } if ($c!=="" && $c!=="null" && !class_exists($c) && preg_match("/^\s*[A-Za-z_][A-Za-z0-9_]*\s*$/",$className)){ $tablename = $className; $fullname = $prefix.$className.$suffix; $toeval = $ns . " class ".$fullname." extends ". (($ns=='') ? '' : '\\' ) . "RedBean_Decorator {
                                        private static \$__static_property_type = \"".$this->provider->getFilter()->table($tablename)."\";

                                        public function __construct(\$id=0, \$lock=false) {

                                                parent::__construct( RedBean_OODB::getInstance(), '".$this->provider->getFilter()->table($tablename)."',\$id,\$lock);
                                        }

                                        public static function where( \$sql, \$slots=array() ) {
                                                return new RedBean_Can( RedBean_OODB::getInstance()->getToolBox(), self::\$__static_property_type,
                                                RedBean_OODB::getInstance()->getToolBox()->getSearch()->sql( \$sql, \$slots, self::\$__static_property_type ));
                                        }

                                        public static function listAll(\$start=false,\$end=false,\$orderby=' id ASC ',\$sql=false) {
                                                return RedBean_OODB::getInstance()->getToolBox()->getLister()->get(self::\$__static_property_type,\$start,\$end,\$orderby,\$sql);
                                        }

                                        public static function getReadOnly(\$id) {
                                                RedBean_OODB::getInstance()->getToolBox()->getLockManager()->setLocking( false );
                                                \$me = new self( \$id );
                                                RedBean_OODB::getInstance()->getToolBox()->getLockManager()->setLocking( true );
                                                return \$me;
                                        }

                                        public static function exists( \$id ) {
                                            return  RedBean_OODB::getInstance()->getToolBox()->getBeanStore()->exists(self::\$__static_property_type, \$id);
                                        }



                                }"; if(count($names) > 1) { $toeval .= "}"; } $teststring = (($ns!="") ? '\\'.$namespacestring.'\\'.$fullname : $fullname); eval($toeval); if (!class_exists( $teststring )) { throw new Exception("Failed to generate class"); } } else { return false; } } return true; } }
class RedBean_Mod_Dispenser extends RedBean_Mod { public function dispense($type ) { $oBean = new RedBean_OODBBean(); $oBean->type = $type; $oBean->id = 0; return $oBean; } }
interface RedBean_Mod_Filter { public function property( $name, $forReading = false ); public function table( $name ); }
class RedBean_Mod_Finder extends RedBean_Mod { public function find(RedBean_OODBBean $bean, $searchoperators = array(), $start=0, $end=100, $orderby="id ASC", $extraSQL=false) { $this->provider->getBeanChecker()->check( $bean ); $db = $this->provider->getDatabase(); $tbl = $db->escape( $bean->type ); $findSQL = $this->provider->getWriter()->getQuery("find",array( "searchoperators"=>$searchoperators, "bean"=>$bean, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL, "tbl"=>$tbl )); $ids = $db->getCol( $findSQL ); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->provider->getBeanStore()->get( $bean->type, $id , false); } } return $beans; } }
class RedBean_Mod_GarbageCollector extends RedBean_Mod { public function removeUnused() { if ($this->provider->getFacade()->isFrozen()) return; $toolbox = $this->provider; $db = $toolbox->getDatabase(); $writer = $toolbox->getWriter(); $tables = $this->provider->getTableRegister()->getTables(); foreach($tables as $table) { if (strpos($table,"_")!==false) { $tables = explode("_", $table); $classname1 = RedBean_Setup_Namespace_PRFX . $tables[0] . RedBean_Setup_Namespace_SFFX; $classname2 = RedBean_Setup_Namespace_PRFX . $tables[1] . RedBean_Setup_Namespace_SFFX; if(!class_exists( $classname1 , true) || !class_exists( $classname2 , true)) { $db->exec( $writer->getQuery("drop_tables",array("tables"=>array($table))) ); $db->exec($writer->getQuery("unregister_table",array("table"=>$table))); } } else { $classname = RedBean_Setup_Namespace_PRFX . $table . RedBean_Setup_Namespace_SFFX; if(!class_exists( $classname , true)) { $db->exec( $writer->getQuery("drop_tables",array("tables"=>array($table))) ); $db->exec($writer->getQuery("unregister_table",array("table"=>$table))); } } } } public function dropColumn($table,$property) { if ($this->provider->getFacade()->isFrozen()) { return false; } $db = $this->provider->getDatabase(); $db->exec( $this->provider->getWriter()->getQuery("drop_column", array( "table"=>$table, "property"=>$property )) ); } public function clean() { if ($this->provider->getFacade()->isFrozen()) { return false; } $db = $this->provider->getDatabase(); $tables = $db->getCol( $this->provider->getWriter()->getQuery("show_rtables") ); foreach($tables as $key=>$table) { $tables[$key] = $this->provider->getWriter()->getEscape().$table.$this->provider->getWriter()->getEscape(); } $sqlcleandatabase = $this->provider->getWriter()->getQuery("drop_tables",array( "tables"=>$tables )); $db->exec( $sqlcleandatabase ); $db->exec( $this->provider->getWriter()->getQuery("truncate_rtables") ); $this->provider->getLockManager()->reset(); return true; } }
class RedBean_Mod_Lister extends RedBean_Mod { public function get($type, $start=false, $end=false, $orderby="id ASC", $extraSQL = false) { $db = $this->provider->getDatabase(); $listSQL = $this->provider->getWriter()->getQuery("list",array( "type"=>$type, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL )); return $db->get( $listSQL ); } public function distinct($type,$field){ $db = $this->provider->getDatabase(); $type = $this->provider->getFilter()->table( $db->escape( $type ) ); $field = $db->escape( $field ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return array(); } else { $ids = $db->getCol( $this->provider->getWriter()->getQuery("distinct",array( "type"=>$type, "field"=>$field ))); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->provider->getBeanStore()->get( $type, $id , false); } } return $beans; } } public function stat( $stat, $type, $field ) { $db = $this->provider->getDatabase(); $type = $this->provider->getFilter()->table( $db->escape( $type ) ); $field = $this->provider->getFilter()->property( $db->escape( $field ) ); $stat = $db->escape( $stat ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell($this->provider->getWriter()->getQuery("stat",array( "stat"=>$stat, "field"=>$field, "type"=>$type ))); return floatval( $no ); } } }
class RedBean_Mod_LockManager extends RedBean_Mod { private $locking = true; private $locktime = 10; private $pkey = null; public function __construct(RedBean_ToolBox_ModHub $provider) { $this->pkey = str_replace(".","",microtime(true)."".mt_rand()); parent::__construct($provider); } public function getLockingTime() { return $this->locktime; } public function setLockingTime( $timeInSecs ) { if (is_int($timeInSecs) && $timeInSecs >= 0) { $this->locktime = $timeInSecs; } else { throw new RedBean_Exception_InvalidArgument( "time must be integer >= 0" ); } } public function openBean($bean, $mustlock = false) { $this->provider->getBeanChecker()->check( $bean); if (!$this->getLocking() || $bean->id === 0) return true; $db = $this->provider->getDatabase(); $removeExpiredSQL = $this->provider->getWriter()->getQuery("remove_expir_lock", array( "locktime"=>$this->getLockingTime() )); $db->exec($removeExpiredSQL); $tbl = $db->escape( $bean->type ); $id = intval( $bean->id ); $checkopenSQL = $this->provider->getWriter()->getQuery("get_lock",array( "id"=>$id, "table"=>$tbl, "key"=>$this->pkey )); $row = $db->getRow($checkopenSQL); if ($row && is_array($row) && count($row)>0) { $updateexpstamp = $this->provider->getWriter()->getQuery("update_expir_lock",array( "time"=>time(), "id"=>$row["id"] )); $db->exec($updateexpstamp); return true; } if ($mustlock) { throw new RedBean_Exception_FailedAccessBean("Could not acquire a lock for bean $tbl . $id "); return false; } $openSQL = $this->provider->getWriter()->getQuery("aq_lock", array( "table"=>$tbl, "id"=>$id, "key"=>$this->pkey, "time"=>time() )); $trials = 0; $aff = 0; while( $aff < 1 && $trials < 5 ) { $db->exec($openSQL); $aff = $db->getAffectedRows(); $trials++; if ($aff < 1) usleep(500000); } if ($trials > 4) { return false; } else { return true; } } public function setLocking( $tf ) { $this->locking = $tf; } public function getLocking() { return $this->locking; } public function unlockAll() { $this->provider->getDatabase()->exec($this->provider->getWriter()->getQuery("release",array("key"=>$this->pkey))); } public function reset() { $sql = $this->provider->getWriter()->getQuery("releaseall"); $this->provider->getDatabase()->exec( $sql ); return true; } public function getKey() { return $this->pkey; } public function setKey($key) { $this->pkey = $key; } }
class RedBean_Mod_Optimizer extends RedBean_Mod { public function run( $gc = false ,$stdTable=false, $stdCol=false) { if ($this->provider->getFacade()->isFrozen()) { return false; } $db = $this->provider->getDatabase(); $tables = $this->provider->getTableRegister()->getTables(); if ($tables && is_array($tables) && count($tables) > 0) { if ($gc) $this->provider->getGC()->removeUnused( $tables ); $table = $tables[array_rand( $tables, 1 )]; } else { return; } if ($stdTable) $table = $stdTable; $table = $db->escape( $table ); if (strpos($table,'_')!==false) return; $cols = $this->provider->getWriter()->getTableColumns( $table, $db ); if (count($cols)<1) return; $colr = $cols[array_rand( $cols )]; $col = $db->escape( $colr["Field"] ); if ($stdCol) { $exists = false; $col = $stdCol; foreach($cols as $cl) { if ($cl["Field"]==$col) { $exists = $cl; } } if (!$exists) { return; } else { $colr = $exists; } } if ($col=="id" || strpos($col,"_id")!==false) { return; } if ($gc && !intval($db->getCell( $this->provider->getWriter()->getQuery("get_null",array( "table"=>$table, "col"=>$col ) )))) { $db->exec( $this->provider->getWriter()->getQuery("drop_column",array("table"=>$table,"property"=>$col))); return; } $currenttype = $this->provider->getWriter()->sqltype_typeno[$colr["Type"]]; if ($currenttype > 0) { $trytype = rand(0,$currenttype - 1); $db->exec($this->provider->getWriter()->getQuery("test_column",array( "type"=>$this->provider->getWriter()->typeno_sqltype[$trytype], "table"=>$table ) )); $db->exec($this->provider->getWriter()->getQuery("update_test",array( "table"=>$table, "col"=>$col ))); $delta = $db->getCell($this->provider->getWriter()->getQuery("measure",array( "table"=>$table, "col"=>$col ))); if (intval($delta)===0) { $sql = $this->provider->getWriter()->getQuery("remove_test",array( "table"=>$table, "col"=>$col, "type"=>$this->provider->getWriter()->typeno_sqltype[$trytype] )); $db->exec($sql); } $db->exec( $this->provider->getWriter()->getQuery("drop_test",array( "table"=>$table )) ); } if ( strpos($colr["Type"],"TEXT")!==false || strpos($colr["Type"],"LONGTEXT")!==false ) { return; } $variance = $db->getCell($this->provider->getWriter()->getQuery("variance",array( "col"=>$col, "table"=>$table ))); $records = $db->getCell($this->provider->getWriter()->getQuery("count",array("type"=>$table))); if ($records) { $relvar = intval($variance) / intval($records); $indexname = "reddex_".$col; if ($records > 1 && $relvar > 0.85) { $sqladdindex=$this->provider->getWriter()->getQuery("index1",array( "table"=>$table, "indexname"=>$indexname, "col"=>$col )); $db->exec( $sqladdindex ); } else { $sqldropindex = $this->provider->getWriter()->getQuery("index2",array("table"=>$table,"indexname"=>$indexname)); $db->exec( $sqldropindex ); } } return true; } }
class RedBean_Mod_Scanner extends RedBean_Mod { public function type( $value ) { $v = $value; $db = $this->provider->getDatabase(); $rawv = $v; $checktypeSQL = $this->provider->getWriter()->getQuery("infertype", array( "value"=> $db->escape(strval($v)) )); $db->exec( $checktypeSQL ); $id = $db->getInsertID(); $readtypeSQL = $this->provider->getWriter()->getQuery("readtype",array( "id"=>$id )); $row=$db->getRow($readtypeSQL); $db->exec( $this->provider->getWriter()->getQuery("reset_dtyp") ); $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($rawv)) { return $tp; } $tp++; } return $tp; } public function code( $sqlType ) { if (in_array($sqlType,$this->provider->getWriter()->sqltype_typeno)) { $typeno = $this->provider->getWriter()->sqltype_typeno[$sqlType]; } else { $typeno = -1; } return $typeno; } }
class RedBean_Mod_Search extends RedBean_Mod { public function processQuerySlots($sql, $slots) { $db = $this->provider->getDatabase(); $code = sha1(rand(1,1000)*time()); foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$key."}", "{".$code.$key."}" ,$sql ); } foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$code.$key."}", $this->provider->getWriter()->getQuote().$db->escape( $value ).$this->provider->getWriter()->getQuote(),$sql ); } return $sql; } public function sql($rawsql, $slots, $table, $max=0) { $db = $this->provider->getDatabase(); $sql = $rawsql; if (is_array($slots)) { $sql = $this->processQuerySlots( $sql, $slots ); } $sql = str_replace('@ifexists:','', $sql); $rs = $db->getCol( $this->provider->getWriter()->getQuery("where",array( "table"=>$table )) . $sql ); $err = $db->getErrorMsg(); if (!$this->provider->getFacade()->isFrozen() && strpos($err,"Unknown column")!==false && $max<10) { $matches = array(); if (preg_match("/Unknown\scolumn\s'(.*?)'/",$err,$matches)) { if (count($matches)==2 && strpos($rawsql,'@ifexists')!==false) { $rawsql = str_replace('@ifexists:`'.$matches[1].'`','NULL', $rawsql); $rawsql = str_replace('@ifexists:'.$matches[1].'','NULL', $rawsql); return $this->sql( $rawsql, $slots, $table, ++$max); } } return array(); } else { if (is_array($rs)) { return $rs; } else { return array(); } } } }
class RedBean_Mod_TableRegister extends RedBean_Mod { public function getTables( $all=false ) { $db = $this->provider->getDatabase(); if ($all && $this->provider->getFacade()->isFrozen()) { $alltables = $db->getCol($this->provider->getWriter()->getQuery("show_tables")); return $alltables; } else { $alltables = $db->getCol($this->provider->getWriter()->getQuery("show_rtables")); return $alltables; } } public function register( $tablename ) { $db = $this->provider->getDatabase(); $tablename = $db->escape( $tablename ); $db->exec($this->provider->getWriter()->getQuery("register_table",array("table"=>$tablename))); } public function unregister( $tablename ) { $db = $this->provider->getDatabase(); $tablename = $db->escape( $tablename ); $db->exec($this->provider->getWriter()->getQuery("unregister_table",array("table"=>$tablename))); } }
class RedBean_Mod_Tree extends RedBean_Mod { public function add( RedBean_OODBBean $parent, RedBean_OODBBean $child ) { $db = $this->provider->getDatabase(); $parent = $this->provider->getBeanChecker()->checkBeanForAssoc($parent); $child = $this->provider->getBeanChecker()->checkBeanForAssoc($child); $this->provider->getLockManager()->openBean( $parent, true ); $this->provider->getLockManager()->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $pid = intval($parent->id); $cid = intval($child->id); $assoctable = "pc_".$db->escape($parent->type."_".$parent->type); if (!$this->provider->getFacade()->isFrozen()) { $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { $assoccreateSQL = $this->provider->getWriter()->getQuery("create_tree",array( "engine"=>$this->provider->getFacade()->getEngine(), "assoctable"=>$assoctable )); $db->exec( $assoccreateSQL ); $db->exec( $this->provider->getWriter()->getQuery("unique", array( "assoctable"=>$assoctable )) ); $this->provider->getTableRegister()->register( $assoctable ); } } $assocSQL = $this->provider->getWriter()->getQuery("add_child",array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec( $assocSQL ); } public function getChildren( RedBean_OODBBean $parent ) { $db = $this->provider->getDatabase(); $parent = $this->provider->getBeanChecker()->checkBeanForAssoc($parent); $pid = intval($parent->id); $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $parent->type; $getassocSQL = $this->provider->getWriter()->getQuery("get_children", array( "assoctable"=>$assoctable, "pid"=>$pid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->provider->getBeanStore()->get( $targettype, $i, false); } } return $beans; } } public function getParent( RedBean_OODBBean $child ) { $db = $this->provider->getDatabase(); $child = $this->provider->getBeanChecker()->checkBeanForAssoc($child); $cid = intval($child->id); $assoctable = "pc_".$db->escape( $child->type . "_" . $child->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $child->type; $getassocSQL = $this->provider->getWriter()->getQuery("get_parent", array( "assoctable"=>$assoctable, "cid"=>$cid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->provider->getBeanStore()->get( $targettype, $i, false); } } return $beans; } } public function removeChild(RedBean_OODBBean $parent, RedBean_OODBBean $child) { $db = $this->provider->getDatabase(); $parent = $this->provider->getBeanChecker()->checkBeanForAssoc($parent); $child = $this->provider->getBeanChecker()->checkBeanForAssoc($child); $this->provider->getLockManager()->openBean( $parent, true ); $this->provider->getLockManager()->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->provider->getTableRegister()->getTables(); if (!in_array($assoctable, $alltables)) { return true; } else { $pid = intval($parent->id); $cid = intval($child->id); $unassocSQL = $this->provider->getWriter()->getQuery("remove_child", array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec($unassocSQL); } } }
class RedBean_QueryWriter_MySQL implements RedBean_QueryWriter { public $typeno_sqltype = array( " TINYINT(3) UNSIGNED ", " INT(11) UNSIGNED ", " BIGINT(20) ", " VARCHAR(255) ", " TEXT ", " LONGTEXT " ); public $sqltype_typeno = array( "tinyint(3) unsigned"=>0, "int(11) unsigned"=>1, "bigint(20)"=>2, "varchar(255)"=>3, "text"=>4, "longtext"=>5 ); public $dtypes = array( "tintyintus","intus","ints","varchar255","text","ltext" ); private $adapter; public function __construct( RedBean_DBAdapter $adapter ) { $this->adapter = $adapter; $this->adapter->exec("
				CREATE TABLE IF NOT EXISTS `dtyp` (
				  `id` int(11) unsigned NOT NULL auto_increment,
				  `tinyintus` tinyint(3) unsigned NOT NULL,
				  `intus` int(11) unsigned NOT NULL,
				  `ints` bigint(20) NOT NULL,
				  `varchar255` varchar(255) NOT NULL,
				  `text` text NOT NULL,
				  PRIMARY KEY  (`id`)
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"); } private function getQueryWiden( $options ) { extract($options); return "ALTER TABLE `$table` CHANGE `$column` `$column` $newtype "; } private function getQueryAddColumn( $options ) { extract($options); return "ALTER TABLE `$table` ADD `$column` $type "; } private function getQueryUpdate( $options ) { extract($options); $update = array(); foreach($updatevalues as $u) { $update[] = " `".$u["property"]."` = \"".$u["value"]."\" "; } return "UPDATE `$table` SET ".implode(",",$update)." WHERE id = ".$id; } private function getQueryInsert( $options ) { extract($options); foreach($insertcolumns as $k=>$v) { $insertcolumns[$k] = "`".$v."`"; } foreach($insertvalues as $k=>$v) { $insertvalues[$k] = "\"".$v."\""; } $insertSQL = "INSERT INTO `$table`
					  ( id, ".implode(",",$insertcolumns)." )
					  VALUES( null, ".implode(",",$insertvalues)." ) "; return $insertSQL; } private function getQueryCreate( $options ) { extract($options); return "INSERT INTO `$table` (id) VALUES(null) "; } private function getQueryInferType( $options ) { extract($options); $v = "\"".$value."\""; $checktypeSQL = "insert into dtyp VALUES(null,$v,$v,$v,$v,$v )"; return $checktypeSQL; } private function getQueryResetDTYP() { return "truncate table dtyp"; } private function getQueryRegisterTable( $options ) { extract( $options ); return "replace into redbeantables values (null, \"$table\") "; } private function getQueryUnregisterTable( $options ) { extract( $options ); return "delete from redbeantables where tablename = \"$table\" "; } private function getQueryRelease( $options ) { extract( $options ); return "DELETE FROM locking WHERE fingerprint=\"".$key."\" "; } private function getQueryRemoveExpirLock( $options ) { extract( $options ); return "DELETE FROM locking WHERE expire <= ".(time()-$locktime); } private function getQueryUpdateExpirLock( $options ) { extract( $options ); return "UPDATE locking SET expire=".$time." WHERE id =".$id; } private function getQueryAQLock( $options ) { extract($options); return "INSERT INTO locking VALUES(\"$table\",$id,\"".$key."\",\"".$time."\") "; } private function getQueryDistinct($options) { extract($options); return "SELECT id FROM `$type` GROUP BY $field"; } private function getQueryFastLoad( $options ) { extract( $options ); return "SELECT * FROM `$type` WHERE id IN ( ".implode(",", $ids)." ) ORDER BY FIELD(id,".implode(",", $ids).") ASC		"; } private function getQueryWhere($options) { extract($options); return "select `$table`.id from $table where "; } private function getQueryFind($options) { extract($options); $db = RedBean_OODB::getInstance()->getToolBox()->getDatabase(); $findSQL = "SELECT id FROM `$tbl` WHERE "; foreach($bean as $p=>$v) { if ($p === "type" || $p === "id") continue; $p = $db->escape($p); $v = $db->escape($v); if (isset($searchoperators[$p])) { if ($searchoperators[$p]==="LIKE") { $part[] = " `$p`LIKE \"%$v%\" "; } else { $part[] = " `$p` ".$searchoperators[$p]." \"$v\" "; } } else { } } if ($extraSQL) { $findSQL .= @implode(" AND ",$part) . $extraSQL; } else { $findSQL .= @implode(" AND ",$part) . " ORDER BY $orderby LIMIT $start, $end "; } return $findSQL; } private function getQueryList($options) { extract($options); $db = RedBean_OODB::getInstance()->getToolBox()->getDatabase(); if ($extraSQL) { $listSQL = "SELECT * FROM ".$db->escape($type)." ".$extraSQL; } else { $listSQL = "SELECT * FROM ".$db->escape($type)."
			ORDER BY ".$orderby; if ($end !== false && $start===false) { $listSQL .= " LIMIT ".intval($end); } if ($start !== false && $end !== false) { $listSQL .= " LIMIT ".intval($start).", ".intval($end); } if ($start !== false && $end===false) { $listSQL .= " LIMIT ".intval($start).", 18446744073709551615 "; } } return $listSQL; } private function getQueryAddAssocNow( $options ) { extract($options); return "REPLACE INTO `$assoctable` VALUES(null,$id1,$id2) "; } private function getQueryUnassoc( $options ) { extract($options); return "DELETE FROM `$assoctable` WHERE ".$t1."_id = $id1 AND ".$t2."_id = $id2 "; } private function getQueryCreateAssoc($options) { extract($options); return "
			 CREATE TABLE `$assoctable` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			`".$t1."_id` INT( 11 ) UNSIGNED NOT NULL,
			`".$t2."_id` INT( 11 ) UNSIGNED NOT NULL,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = ".$engine.";
			"; } private function getQueryUntree( $options ) { extract($options); return "DELETE FROM `$assoctable2` WHERE
				(parent_id = $idx1 AND child_id = $idx2) OR
				(parent_id = $idx2 AND child_id = $idx1) "; } private function getQueryAddAssoc($options) { extract( $options ); return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`".$t1."_id`, `".$t2."_id` ) "; } private function getQueryDeltreeType($options) { extract( $options ); return "DELETE FROM $assoctable WHERE parent_id = $id  OR child_id = $id "; } private function getQueryCreateTree( $options ) { extract( $options ); return "
				 CREATE TABLE `$assoctable` (
				`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				`parent_id` INT( 11 ) UNSIGNED NOT NULL,
				`child_id` INT( 11 ) UNSIGNED NOT NULL,
				 PRIMARY KEY ( `id` )
				 ) ENGINE = ".$engine.";
				"; } private function getQueryUnique( $options ) { extract( $options ); return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`parent_id`, `child_id` ) "; } private function getQueryAddChild( $options ) { extract( $options ); return "REPLACE INTO `$assoctable` VALUES(null,$pid,$cid) "; } private function getQueryRemoveChild( $options ) { extract( $options ); return "DELETE FROM `$assoctable` WHERE
				( parent_id = $pid AND child_id = $cid ) "; } private function getQueryDescribe( $options ) { extract( $options ); return "describe `$table`"; } public function getTableColumns($tbl, RedBean_DBAdapter $db) { $rs = $db->get($this->getQuery("describe",array( "table"=>$tbl ))); return $rs; } private function getQueryDropTables( $options ) { extract($options); return "drop tables ".implode(",",$tables); } private function getQueryDropColumn( $options ) { extract($options); return "ALTER TABLE `$table` DROP `$property`"; } private function getQueryTestColumn( $options ) { extract($options); return "alter table `$table` add __test  ".$type; } private function getQueryUpdateTest( $options ) { extract($options); return "update `$table` set __test=`$col`"; } private function getQueryMeasure( $options ) { extract($options); return "select count(*) as df from `$table` where
				strcmp(`$col`,__test) != 0 AND `$col` IS NOT NULL"; } private function getQueryRemoveTest($options) { extract($options); return "alter table `$table` change `$col` `$col` ".$type; } private function getQueryDropTest($options) { extract($options); return "alter table `$table` drop __test"; } private function getIndex1($options) { extract($options); return "ALTER IGNORE TABLE `$table` ADD INDEX $indexname (`$col`)"; } private function getIndex2($options) { extract($options); return "ALTER IGNORE TABLE `$table` DROP INDEX $indexname"; } private function getDestruct($options) { extract($options); if ($rollback) return; if ($engine=="innodb") return "COMMIT"; else return ""; } private function getBasicQuery( $options, $sql_type="SELECT" ) { extract($options); if (isset($fields)){ $sqlfields = array(); foreach($fields as $field) { $sqlfields[] = " `$field` "; } $field = implode(",", $fields); } if (!isset($field)) $field=""; $sql = "$sql_type ".$field." FROM `$table` "; if (isset($where)) { if (is_array($where)) { $crit = array(); foreach($where as $w=>$v) { $crit[] = " `$w` = \"".$v."\""; } $sql .= " WHERE ".implode(" AND ",$crit); } else { $sql .= " WHERE ".$where; } } return $sql; } private function getQuery( $queryname, $params=array() ) { switch($queryname) { case "create_table": return $this->getQueryCreateTable($params); break; case "widen_column": return $this->getQueryWiden($params); break; case "add_column": return $this->getQueryAddColumn($params); break; case "update": return $this->getQueryUpdate($params); break; case "insert": return $this->getQueryInsert($params); break; case "create": return $this->getQueryCreate($params); break; case "infertype": return $this->getQueryInferType($params); break; case "readtype": return $this->getBasicQuery( array("fields"=>array("tinyintus","intus","ints","varchar255","text"), "table" =>"dtyp", "where"=>array("id"=>$params["id"]))); break; case "reset_dtyp": return $this->getQueryResetDTYP(); break; case "prepare_innodb": return "SET autocommit=0"; break; case "prepare_myisam": return "SET autocommit=1"; break; case "starttransaction": return "START TRANSACTION"; break; case "setup_dtyp": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				CREATE TABLE IF NOT EXISTS `dtyp` (
				  `id` int(11) unsigned NOT NULL auto_increment,
				  `tinyintus` tinyint(3) unsigned NOT NULL,
				  `intus` int(11) unsigned NOT NULL,
				  `ints` bigint(20) NOT NULL,
				  `varchar255` varchar(255) NOT NULL,
				  `text` text NOT NULL,
				  PRIMARY KEY  (`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "clear_dtyp": return "drop tables dtyp"; break; case "setup_locking": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				CREATE TABLE IF NOT EXISTS `locking` (
				  `tbl` varchar(255) NOT NULL,
				  `id` bigint(20) NOT NULL,
				  `fingerprint` varchar(255) NOT NULL,
				  `expire` int(11) NOT NULL,
				  UNIQUE KEY `tbl` (`tbl`,`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "setup_tables": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				 CREATE TABLE IF NOT EXISTS `redbeantables` (
				 `id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				 `tablename` VARCHAR( 255 ) NOT NULL ,
				 PRIMARY KEY ( `id` ),
				 UNIQUE KEY `tablename` (`tablename`)
				 ) ENGINE = $engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "show_tables": return "show tables"; break; case "show_rtables": return "select tablename from redbeantables"; break; case "register_table": return $this->getQueryRegisterTable( $params ); break; case "unregister_table": return $this->getQueryUnregisterTable( $params ); break; case "release": return $this->getQueryRelease( $params ); break; case "remove_expir_lock": return $this->getQueryRemoveExpirLock( $params ); break; case "update_expir_lock": return $this->getQueryUpdateExpirLock( $params ); break; case "aq_lock": return $this->getQueryAQLock( $params ); break; case "get_lock": return $this->getBasicQuery(array("fields"=>array("id"),"table"=>"locking","where"=>array("id"=>$params["id"],"tbl"=>$params["table"],"fingerprint"=>$params["key"]))); break; case "get_bean": return $this->getBasicQuery(array("field"=>"*","table"=>$params["type"],"where"=>array("id"=>$params["id"]))); break; case "bean_exists": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"],"where"=>array("id"=>$params["id"]))); break; case "count": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"])); break; case "distinct": return $this->getQueryDistinct($params); break; case "stat": return $this->getBasicQuery(array("field"=>$params["stat"]."(`".$params["field"]."`)","table"=>$params["type"])); break; case "releaseall": return "TRUNCATE locking"; break; case "fastload": return $this->getQueryFastLoad($params); break; case "where": return $this->getQueryWhere($params); break; case "find": return $this->getQueryFind( $params); break; case "list": return $this->getQueryList( $params); break; case "create_assoc": return $this->getQueryCreateAssoc( $params ); break; case "add_assoc": return $this->getQueryAddAssoc( $params ); break; case "add_assoc_now": return $this->getQueryAddAssocNow( $params ); break; case "unassoc": return $this->getQueryUnassoc( $params ); break; case "untree": return $this->getQueryUntree( $params ); break; case "get_assoc": $col = $params["t1"]."_id"; return $this->getBasicQuery(array( "table"=>$params["assoctable"], "fields"=>array( $params["t2"]."_id" ), "where"=>array( $col=>$params["id"]) )); break; case "trash": return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array("id"=>$params["id"])),"DELETE"); break; case "deltree": return $this->getBasicQuery(array("table"=>$params["table"],"where"=>" parent_id = ".$params["id"]." OR child_id = ".$params["id"]),"DELETE"); break; case "unassoc_all_t1": $col = $params["t"]."_id"; return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE"); break; case "unassoc_all_t2": $col = $params["t"]."2_id"; return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE"); break; case "deltreetype": return $this->getQueryDeltreeType( $params ); break; case "unassoctype1": $col = $params["t1"]."_id"; $r = $this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE"); return $r; break; case "unassoctype2": $col = $params["t1"]."2_id"; $r =$this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE"); return $r; break; case "create_tree": return $this->getQueryCreateTree( $params ); break; case "unique": return $this->getQueryUnique( $params ); break; case "add_child": return $this->getQueryAddChild( $params ); break; case "get_children": return $this->getBasicQuery(array("table"=>$params["assoctable"],"fields"=>array("child_id"), "where"=>array("parent_id"=>$params["pid"]))); break; case "get_parent": return $this->getBasicQuery(array( "where"=>array("child_id"=>$params["cid"]),"fields"=>array("parent_id"),"table"=>$params["assoctable"] )); break; case "remove_child": return $this->getQueryRemoveChild( $params ); break; case "num_related": $col = $params["t1"]."_id"; return $this->getBasicQuery(array("field"=>"COUNT(1)","table"=>$params["assoctable"],"where"=>array($col=>$params["id"]))); break; case "drop_tables": return $this->getQueryDropTables( $params ); break; case "truncate_rtables": return "truncate redbeantables"; break; case "drop_column": return $this->getQueryDropColumn( $params ); break; case "describe": return $this->getQueryDescribe( $params ); break; case "get_null": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["table"],"where"=>" `".$params["col"]."` IS NOT NULL ")); return $this->getQueryGetNull( $params ); break; case "test_column": return $this->getQueryTestColumn( $params ); break; case "update_test": return $this->getQueryUpdateTest( $params ); break; case "measure": return $this->getQueryMeasure( $params ); break; case "remove_test": return $this->getQueryRemoveTest($params); break; case "drop_test": return $this->getQueryDropTest($params); break; case "variance": return $this->getBasicQuery(array("field"=>"count(distinct `".$params["col"]."`)","table"=>$params["table"])); break; case "index1": return $this->getIndex1($params); break; case "index2": return $this->getIndex2($params); break; case "drop_type": return $this->getBasicQuery(array("table"=>$params["type"]),"DELETE"); break; case "destruct": return $this->getDestruct($params); break; default: throw new Exception("QueryWriter has no support for Query:".$queryname); } } public function getQuote() { return "\""; } public function getEscape() { return "`"; } public function escape( $value ) { return $this->adapter->escape( $value ); } public function getTables() { return $this->adapter->getCol( "show tables" ); } public function createTable( $table ) { $sql = "
                     CREATE TABLE `$table` (
                    `id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
                     PRIMARY KEY ( `id` )
                     ) ENGINE = InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
                    "; $this->adapter->exec( $sql ); } public function getColumns( $table ) { $columnsRaw = $this->adapter->get("DESCRIBE `$table`"); foreach($columnsRaw as $r) { $columns[$r["Field"]]=$r["Type"]; } return $columns; } public function scanType( $value ) { $this->adapter->exec( $this->getQuery("reset_dtyp") ); $checktypeSQL = $this->getQuery("infertype", array( "value"=> $this->escape(strval($value)) )); $this->adapter->exec( $checktypeSQL ); $id = $this->adapter->getInsertID(); $readtypeSQL = $this->getQuery("readtype",array( "id"=>$id )); $row = $this->adapter->getRow($readtypeSQL);; $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($value)) { return $tp; } $tp++; } return $tp; } public function addColumn( $table, $column, $type ) { $sql = $this->getQuery("add_column",array( "table"=>$table, "column"=>$column, "type"=> $this->typeno_sqltype[$type] )); $this->adapter->exec( $sql ); } public function code( $typedescription ) { return $this->sqltype_typeno[$typedescription]; } public function widenColumn( $table, $column, $type ) { $changecolumnSQL = $this->getQuery( "widen_column", array( "table" => $table, "column" => $column, "newtype" => $this->typeno_sqltype[$type] ) ); $this->adapter->exec( $changecolumnSQL ); } public function updateRecord( $table, $updatevalues, $id) { $updateSQL = $this->getQuery("update", array( "table"=>$table, "updatevalues"=>$updatevalues, "id"=>$id )); $this->adapter->exec( $updateSQL ); } public function insertRecord( $table, $insertcolumns, $insertvalues ) { if (count($insertvalues)>0){ $insertSQL = $this->getQuery("insert",array( "table"=>$table, "insertcolumns"=>$insertcolumns, "insertvalues"=>$insertvalues )); $this->adapter->exec( $insertSQL ); return $this->adapter->getInsertID(); } else { $this->adapter->exec( $this->getQuery("create", array("table"=>$table))); return $this->adapter->getInsertID(); } } public function selectRecord($type, $id) { $getSQL = $this->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $this->adapter->getRow( $getSQL ); if ($row && is_array($row) && count($row)>0) { return $row; } else { throw RedBean_Exception_Security("Could not find bean"); } } public function deleteRecord( $table, $id ) { $this->adapter->exec("DELETE FROM `$table` WHERE id = $id "); } }
class RedBean_ToolBox_ModHub extends RedBean_ToolBox { private $facade; public function getDatabase() { return $this->give("database"); } public function getWriter() { return $this->give("writer"); } public function getFilter() { return $this->give("filter"); } public function setFacade( $facade ) { $this->facade = $facade; } public function getFacade() { return $this->facade; } public function __call( $who, $args=array() ) { $tool = strtolower(substr($who,3)); if ($this->has($tool)) { return $this->give( $tool ); } else { throw new Exception(" $tool not available "); } } public function __get($v) { throw new Exception("getter not allowed"); } public function __set($v,$i) { throw new Exception("setter not allowed"); } }
class RedBean_Validator_AlphaNumeric implements RedBean_Validator { public function check( $v ) { return (bool) preg_match('/^[A-Za-z0-9]+$/', $v); } }
class RedBean_Mod_Filter_NullFilter extends RedBean_Mod implements RedBean_Mod_Filter { public function __construct(){} public function property( $name, $forReading = false ) { return $name; } public function table( $name ) { return $name; } }
class RedBean_Mod_Filter_Strict extends RedBean_Mod implements RedBean_Mod_Filter { public function __construct(){} public function property( $name, $forReading = false ) { $name = strtolower($name); if (!$forReading) { if ($name=="type") { throw new RedBean_Exception_Security("type is a reserved property to identify the table, pleae use another name for this property."); } if ($name=="id") { throw new RedBean_Exception_Security("id is a reserved property to identify the record, pleae use another name for this property."); } } $name = trim(preg_replace("/[^abcdefghijklmnopqrstuvwxyz0123456789]/","",$name)); if (strlen($name)===0) { throw new RedBean_Exception_Security("Empty property is not allowed"); } return $name; } public function table( $name ) { $name = strtolower(trim(preg_replace("/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]/","",$name))); if (strlen($name)===0) { throw new RedBean_Exception_Security("Empty property is not allowed"); } return $name; } }||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_ARRAY)))))
    (AST_FOREACH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_ARRAY)))))
    (AST_FOREACH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))))