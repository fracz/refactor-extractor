class Redbean_Querylogger implements RedBean_Observer { private $path = ""; private $userid = 0; private function getFilename() { return $this->path . "audit_".date("m_d_y").".log"; } public function logSCQuery( $sql, $db ) { $sql = addslashes($sql); $line = "\n".date("H:i:s")."|".$_SERVER["REMOTE_ADDR"]."|UID=".$this->userid."|".$sql; file_put_contents( $this->getFilename(), $line, FILE_APPEND ); return null; } public static function init($path="",$userid=0) { $logger = new self; $logger->userid = $userid; $logger->path = $path; if (!file_exists($logger->getFilename())) { file_put_contents($logger->getFilename(),"begin logging"); } RedBean_OODB::getInstance()->getToolBox()->getDatabase()->addEventListener( "sql_exec", $logger ); } public function onEvent( $event, RedBean_Observable $db ) { $this->logSCQuery( $db->getSQL(), $db ); } }
interface RedBean_QueryWriter { public function getQuery( $queryname, $params=array() ); public function getQuote(); public function getEscape(); public function getTableColumns( $tbl, RedBean_DBAdapter $db ); }
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR))))||||||||