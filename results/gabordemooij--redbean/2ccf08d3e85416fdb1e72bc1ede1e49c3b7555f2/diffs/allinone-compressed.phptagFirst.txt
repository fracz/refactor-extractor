||||||||class RedBean_Association implements RedBean_OODBBean { private $bean1; private $bean2; public function __construct( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { $this->bean1 = $bean1; $this->bean2 = $bean2; if (!isset($this->bean1->__info)) { throw new Exception("Invalid Meta Information"); } if (!isset($this->bean1->__info["id"])) { throw new Exception("Invalid Meta Information"); } if (!isset($this->bean2->__info)) { throw new Exception("Invalid Meta Information"); } if (!isset($this->bean2->__info["id"])) { throw new Exception("Invalid Meta Information"); } if ((int)$this->bean1->__info["id"]<1) { throw new Exception("Invalid Meta Information"); } if ((int)$this->bean2->__info["id"]<1) { throw new Exception("Invalid Meta Information"); } if (!isset($this->bean1->__info["tag"])) $this->bean1->__info["tag"] = ""; if (!isset($this->bean2->__info["tag"])) $this->bean2->__info["tag"] = ""; } public function tagFirst( $tagName ) { $this->bean1->__info["tag"] = $tagName; } public function tagSecond( $tagName ) { $this->bean2->__info["tag"] = $tagName; } public function getBeans() { return array( 1=>$this->bean1, 2=>$this->bean2 ); } }
class RedBean_Can implements Iterator , ArrayAccess , SeekableIterator , Countable { private $collectionIDs = null; private $type = null; private $pointer = 0; private $num = 0; private $provider = null; public function __construct( RedBean_ToolBox_ModHub $provider, $type="", $collection = array() ) { $this->provider=$provider; $this->collectionIDs = $collection; $this->type = $type; $this->num = count( $this->collectionIDs ); } public function wrap( $bean, $prefix=false, $suffix=false ) { if (!$prefix) { $prefix = RedBean_Setup_Namespace_PRFX; } if (!$suffix) { $suffix = RedBean_Setup_Namespace_SFFX; } $dclass = $prefix.$this->type.$suffix; $deco = new $dclass( floatval( $bean->id ) ); $deco->setData( $bean ); return $deco; } public function count() { return $this->num; } public function getBeans() { $rows = $this->provider->getBeanStore()->fastloader( $this->type, $this->collectionIDs ); $beans = array(); if (is_array($rows)) { foreach( $rows as $row ) { $beans[] = $this->wrap( $this->provider->getBeanStore()->get( $this->type, $row["id"] , $row) ); } } return $beans; } public function slice( $begin=0, $end=0 ) { $this->collectionIDs = array_slice( $this->collectionIDs, $begin, $end); $this->num = count( $this->collectionIDs ); } public function current() { if (isset($this->collectionIDs[$this->pointer])) { $id = $this->collectionIDs[$this->pointer]; return $this->wrap( $this->provider->getBeanStore()->get( $this->type, $id ) ); } else { return null; } } public function key() { return $this->pointer; } public function next() { return ++$this->pointer; } public function prev() { if ($this->pointer > 0) { return ++$this->pointer; }else { return 0; } } public function rewind() { $this->pointer=0; return 0; } public function seek( $seek ) { $this->pointer = (int) $seek; return $this; } public function valid() { return ($this->num > ($this->pointer+1)); } public function hasMoreBeans() { return $this->valid(); } public function offsetSet($offset, $value) { $this->collectionIDs[$offset] = $value; } public function offsetExists($offset) { return isset($this->collectionIDs[$offset]); } public function offsetUnset($offset) { unset($this->collectionIDs[$offset]); } public function offsetGet($offset) { if (isset($this->collectionIDs[$offset])) { $id = $this->collectionIDs[$offset]; return $this->wrap( $this->provider->getBeanStore()->get( $this->type, $id ) ); } else { return null; } } public function getList() { $list = array(); $beans = $this->getBeans(); foreach($beans as $bean) { $list[] = $bean->exportAsArr(); } return $list; } public function reverse() { $this->collectionIDs = array_reverse($this->collectionIDs, false); return $this; } }
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (AST_VAR)))