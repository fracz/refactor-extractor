	public function connect()
	{
		if ( $this->isConnected ) return;
		try {
			$user = $this->connectInfo['user'];
			$pass = $this->connectInfo['pass'];

			$this->pdo = new\PDO(
				$this->dsn,
				$user,
				$pass,
				array(\PDO::ATTR_ERRMODE            =>\PDO::ERRMODE_EXCEPTION,
					  \PDO::ATTR_DEFAULT_FETCH_MODE =>\PDO::FETCH_ASSOC,
				)
			);

			$this->setEncoding();
			$this->pdo->setAttribute(\PDO::ATTR_STRINGIFY_FETCHES, TRUE );

			$this->isConnected = TRUE;
		} catch (\PDOException $exception ) {
			$matches = array();

			$dbname  = ( preg_match( '/dbname=(\w+)/', $this->dsn, $matches ) ) ? $matches[1] : '?';

			throw new\PDOException( 'Could not connect to database (' . $dbname . ').', $exception->getCode() );
		}
	}

	/**
	 * Directly sets PDO instance into driver.
	 * This method might improve performance, however since the driver does
	 * not configure this instance terrible things may happen... only use
	 * this method if you are an expert on RedBeanPHP, PDO and UTF8 connections and
	 * you know your database server VERY WELL.
	 *
	 * @param PDO $pdo PDO instance
	 *
	 * @return void
	 */
||||||||	public function connect()
	{
		if ( $this->isConnected ) return;
		try {
			$user = $this->connectInfo['user'];
			$pass = $this->connectInfo['pass'];

			$this->pdo = new\PDO(
				$this->dsn,
				$user,
				$pass
			);

			$this->setEncoding();
			$this->pdo->setAttribute(\PDO::ATTR_STRINGIFY_FETCHES, TRUE );
			//cant pass these as argument to constructor, CUBRID driver does not understand...
			$this->pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
			$this->pdo->setAttribute(\PDO::ATTR_DEFAULT_FETCH_MODE,\PDO::FETCH_ASSOC);

			$this->isConnected = TRUE;
		} catch (\PDOException $exception ) {
			$matches = array();

			$dbname  = ( preg_match( '/dbname=(\w+)/', $this->dsn, $matches ) ) ? $matches[1] : '?';

			throw new\PDOException( 'Could not connect to database (' . $dbname . ').', $exception->getCode() );
		}
	}

	/**
	 * Directly sets PDO instance into driver.
	 * This method might improve performance, however since the driver does
	 * not configure this instance terrible things may happen... only use
	 * this method if you are an expert on RedBeanPHP, PDO and UTF8 connections and
	 * you know your database server VERY WELL.
	 *
	 * @param PDO $pdo PDO instance
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_CONST)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL)))