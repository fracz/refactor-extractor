<?php

//BRNRDPROJECT-REDBEAN - SOURCE CODE

/**

--- welcome to

                   .______.
_______   ____   __| _/\_ |__   ____ _____    ____
\_  __ \_/ __ \ / __ |  | __ \_/ __ \\__  \  /    \
 |  | \/\  ___// /_/ |  | \_\ \  ___/ / __ \|   |  \
 |__|    \___  >____ |  |___  /\___  >____  /___|  /
             \/     \/      \/     \/     \/     \/



|RedBean Database Objects -
|Written by Gabor de Mooij (c) copyright 2009


|List of Contributors:
|Sean Hess
|Alan Hogan
|Desfrenes
|Xwisdom

======================================================
|						       RedBean is Licensed BSD
------------------------------------------------------
|RedBean is a OOP Database Simulation Middleware layer
|for php.
------------------------------------------------------
|Loosely based on an idea by Erik Roelofs - thanks man

VERSION 0.6

======================================================
Official GIT HUB:
git://github.com/buurtnerd/redbean.git
http://github.com/buurtnerd/redbean/tree/master
======================================================



Copyright (c) 2009, G.J.G.T (Gabor) de Mooij
All rights reserved.

a Buurtnerd project


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the <organization> nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written permission.

All advertising materials mentioning features or use of this software
are encouraged to display the following acknowledgement:
This product is powered by RedBean written by Gabor de Mooij (http://www.redbeanphp.com)


----




THIS SOFTWARE IS PROVIDED BY GABOR DE MOOIJ ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL GABOR DE MOOIJ BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



WARNING
THIS IS AN PRE-BETA VERSION, DONT USE THIS CODE ON PRODUCTION SERVERS

*/

class RedBean_Can implements Iterator , ArrayAccess , SeekableIterator , Countable { private $collectionIDs = null; private $type = null; private $pointer = 0; private $num = 0; private $provider = null; public function __construct( RedBean_OODB $provider, $type="", $collection = array() ) { $this->provider=$provider; $this->collectionIDs = $collection; $this->type = $type; $this->num = count( $this->collectionIDs ); } public function wrap( $bean, $prefix=false, $suffix=false ) { if (!$prefix) { $prefix = RedBean_Setup_Namespace_PRFX; } if (!$suffix) { $suffix = RedBean_Setup_Namespace_SFFX; } $dclass = $prefix.$this->type.$suffix; $deco = new $dclass( floatval( $bean->id ) ); $deco->setData( $bean ); return $deco; } public function count() { return $this->num; } public function getBeans() { $rows = $this->provider->fastloader( $this->type, $this->collectionIDs ); $beans = array(); if (is_array($rows)) { foreach( $rows as $row ) { $beans[] = $this->wrap( $this->provider->getById( $this->type, $row["id"] , $row) ); } } return $beans; } public function slice( $begin=0, $end=0 ) { $this->collectionIDs = array_slice( $this->collectionIDs, $begin, $end); $this->num = count( $this->collectionIDs ); } public function current() { if (isset($this->collectionIDs[$this->pointer])) { $id = $this->collectionIDs[$this->pointer]; return $this->wrap( $this->provider->getById( $this->type, $id ) ); } else { return null; } } public function key() { return $this->pointer; } public function next() { return ++$this->pointer; } public function prev() { if ($this->pointer > 0) { return ++$this->pointer; }else { return 0; } } public function rewind() { $this->pointer=0; return 0; } public function seek( $seek ) { $this->pointer = (int) $seek; return $this; } public function valid() { return ($this->num > ($this->pointer+1)); } public function hasMoreBeans() { return $this->valid(); } public function offsetSet($offset, $value) { $this->collectionIDs[$offset] = $value; } public function offsetExists($offset) { return isset($this->collectionIDs[$offset]); } public function offsetUnset($offset) { unset($this->collectionIDs[$offset]); } public function offsetGet($offset) { if (isset($this->collectionIDs[$offset])) { $id = $this->collectionIDs[$offset]; return $this->wrap( $this->provider->getById( $this->type, $id ) ); } else { return null; } } public function getList() { $list = array(); $beans = $this->getBeans(); foreach($beans as $bean) { $list[] = $bean->exportAsArr(); } return $list; } public function reverse() { $this->collectionIDs = array_reverse($this->collectionIDs, false); return $this; } }
class RedBean_DBAdapter extends RedBean_Observable { private $db = null; private $sql = ""; public function __construct($database) { $this->db = $database; } public function getSQL() { return $this->sql; } public function escape( $sqlvalue ) { return $this->db->Escape($sqlvalue); } public function exec( $sql , $noevent=false) { if (!$noevent){ $this->sql = $sql; $this->signal("sql_exec", $this); } return $this->db->Execute( $sql ); } public function get( $sql ) { $this->sql = $sql; $this->signal("sql_exec", $this); return $this->db->GetAll( $sql ); } public function getRow( $sql ) { $this->sql = $sql; $this->signal("sql_exec", $this); return $this->db->GetRow( $sql ); } public function getCol( $sql ) { $this->sql = $sql; $this->signal("sql_exec", $this); return $this->db->GetCol( $sql ); } public function getCell( $sql ) { $this->sql = $sql; $this->signal("sql_exec", $this); $arr = $this->db->GetCol( $sql ); if ($arr && is_array($arr)) return ($arr[0]); else return false; } public function getInsertID() { return $this->db->getInsertID(); } public function getAffectedRows() { return $this->db->Affected_Rows(); } public function getDatabase() { return $this->db; } public function getErrorMsg() { return $this->db->Errormsg(); } }
class RedBean_Decorator extends RedBean_Observable implements IteratorAggregate { protected $data = null; protected $type = ""; protected $problems = array(); protected $provider = null; public function __construct( RedBean_OODB $provider, $type=false, $id=0) { $this->provider = $provider; $id = floatval( $id ); if (!$type) { throw new Exception("Undefined bean type"); } else { $this->type = preg_replace( "[\W_]","", strtolower($type)); if ($id > 0) { $this->data = $this->provider->getById( $this->type, $id); } else { $this->data = $this->provider->dispense( $this->type ); } } } private static function getStaticProvider() { return RedBean_OODB::getInstance(); } public function free( $property ) { $this->signal("deco_free", $this); $this->provider->dropColumn( $this->type, $property ); } public function importFromPost( $selection=null ) { $this->signal("deco_importpost", $this); if (!$selection) { $selection = array_keys($_POST); } if (is_string($selection)) { $selection = explode(",",$selection); } if ($selection && is_array($selection) && count($selection) > 0) { foreach( $selection as $field ) { $setter = "set".ucfirst( $field ); if (isset( $_POST[$field] )) { $resp = $this->$setter( $_POST[ $field ] ); } } } return $this; } public function import( $arr ) { $this->signal("deco_import", $this); foreach( $arr as $key=>$val ) { $setter = "set".ucfirst( $key ); $resp = $this->$setter( $val ); } return $this; } public function __call( $method, $arguments ) { return $this->command( $method, $arguments ); } private function filterProperty( $name, $forReading = false ) { $name = strtolower($name); if (!$forReading) { if ($name=="type") { throw new RedBean_Exception_Security("type is a reserved property to identify the table, pleae use another name for this property."); } if ($name=="id") { throw new RedBean_Exception_Security("id is a reserved property to identify the record, pleae use another name for this property."); } } $name = trim(preg_replace("/[^abcdefghijklmnopqrstuvwxyz0123456789]/","",$name)); if (strlen($name)===0) { throw new RedBean_Exception_Security("Empty property is not allowed"); } return $name; } public function __get( $name ) { $this->signal("deco_get", $this); $name = $this->filterProperty($name, true); return isset($this->data->$name) ? $this->data->$name : null; } public function __set( $name, $value ) { $this->signal("deco_set", $this); $name = $this->filterProperty($name); $this->data->$name = $value; } public function command( $method, $arguments ) { if (strpos( $method,"set" ) === 0) { $prop = substr( $method, 3 ); $prop = $this->filterProperty($prop); $this->$prop = $arguments[0]; return $this; } elseif (strpos($method,"getRelated")===0) { $this->signal("deco_get", $this); $prop = strtolower( substr( $method, 10 ) ); $beans = $this->provider->getAssoc( $this->data, $prop ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$prop.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } return $decos; } elseif (strpos( $method, "get" ) === 0) { $prop = substr( $method, 3 ); $prop = $this->filterProperty($prop, true); return $this->$prop; } elseif (strpos( $method, "is" ) === 0) { $prop = strtolower( substr( $method, 2 ) ); if (!isset($this->data->$prop)) { $this->signal("deco_get",$this); return false; } return ($this->data->$prop ? TRUE : FALSE); } else if (strpos($method,"add") === 0) { $this->signal("deco_add",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->associate($this->data, $bean); return $this; } else if (strpos($method,"remove")===0) { $this->signal("deco_remove",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->unassociate($this->data, $bean); return $this; } else if (strpos($method,"attach")===0) { $this->signal("deco_attach",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->addChild($this->data, $bean); return $this; } else if (strpos($method,"clearRelated")===0) { $this->signal("deco_clearrelated",$this); $type = strtolower( substr( $method, 12 ) ); $this->provider->deleteAllAssocType($type, $this->data); return $this; } else if (strpos($method,"numof")===0) { $this->signal("deco_numof",$this); $type = strtolower( substr( $method, 5 ) ); return $this->provider->numOfRelated($type, $this->data); } } public function belongsTo( $deco ) { $this->signal("deco_belongsto", $this); $this->provider->deleteAllAssocType($deco->getType(), $this->data); $this->provider->associate($this->data, $deco->getData()); } public function exclusiveAdd( $deco ) { $this->signal("deco_exclusiveadd", $this); $this->provider->deleteAllAssocType($this->type,$deco->getData()); $this->provider->associate($deco->getData(), $this->data); } public function parent() { $this->signal("deco_parent", $this); $beans = $this->provider->getParent( $this->data ); if (count($beans) > 0 ) $bean = array_pop($beans); else return null; $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; $deco = new $dclass(); $deco->setData( $bean ); return $deco; } public function siblings() { $this->signal("deco_siblings", $this); $beans = $this->provider->getParent( $this->data ); if (count($beans) > 0 ) { $bean = array_pop($beans); } else { return null; } $beans = $this->provider->getChildren( $bean ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { if ($b->id != $this->data->id) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } } return $decos; } public function children() { $this->signal("deco_children", $this); $beans = $this->provider->getChildren( $this->data ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } return $decos; } public function hasParent( $deco ) { $me = $this; while( $parent = $me->parent() ) { if ($deco->getID() == $parent->getID()) { return true; } else { $me = $parent; } } return false; } public function hasChild( $deco ) { $nodes = array($this); while($node = array_shift($nodes)) { if ($node->getID() == $deco->getID() && ($node->getID() != $this->getID())) { return true; } if ($children = $node->children()) { $nodes = array_merge($nodes, $children); } } return false; } public function hasSibling( $deco ) { $siblings = $this->siblings(); foreach( $siblings as $sibling ) { if ($sibling->getID() == $deco->getID()) { return true; } } return false; } public function copy() { $this->signal("deco_copy", $this); $clone = new self( $this->provider, $this->type, 0 ); $clone->setData( $this->getData() ); return $clone; } public function clearAllRelations() { $this->signal("deco_clearrelations", $this); $this->provider->deleteAllAssoc( $this->getData() ); } public function getData() { return $this->data; } public function setData( $data ) { $this->data = $data; } public function save() { $this->signal("deco_save", $this); return $this->provider->set( $this->data ); } public static function delete( $deco ) { self::getStaticProvider()->trash( $deco->getData() ); } public function destroy() { $this->provider->trash( $this->getData() ); } public function lock() { $this->provider->openBean($this->getData()); } public function unlock() { $this->provider->closeBean( $this->getData()); } public static function close( $deco ) { self::getStaticProvider()->closeBean( $deco->getData() ); } public static function make( $type="", $id ){ return new RedBean_Decorator( self::getStaticProvider(), $type, $id ); } public function exportTo( &$bean, $overridebean=false ) { foreach($this->data as $prop=>$value) { if (is_object($overridebean) && isset($overridebean->$prop)) { $value = $overridebean->$prop; } elseif (is_array($overridebean) && isset($overridebean[$prop])) { $value = $overridebean[$prop]; } if (is_object($value)){ $value = $value->getID(); } if (is_object($bean)) { $bean->$prop = $value; } elseif (is_array($bean)) { $bean[$prop] = $value; } } return $bean; } public function exportAsArr() { $arr = array(); foreach($this->data as $prop=>$value) { if ($value instanceof RedBean_Decorator){ $value = $value->getID(); } $arr[ $prop ] = $value; } return $arr; } public static function find( $deco, $filter, $start=0, $end=100, $orderby=" id ASC ", $extraSQL=false ) { if (!is_array($filter)) { return array(); } if (count($filter)<1) { return array(); } $filters = array(); foreach($filter as $key=>$f) { $filters[strtolower($key)] =$f; if (!in_array($f,array("=","!=","<",">","<=",">=","like","LIKE"))) { throw new ExceptionInvalidFindOperator(); } } $beans = self::getStaticProvider()->find( $deco->getData(), $filters, $start, $end, $orderby, $extraSQL ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$deco->type.RedBean_Setup_Namespace_SFFX; foreach( $beans as $bean ) { $decos[ $bean->id ] = new $dclass( floatval( $bean->id ) ); $decos[ $bean->id ]->setData( $bean ); } return $decos; } public function getIterator() { $o = new ArrayObject($this->data); return $o->getIterator(); } public function isReadOnly() { try{ $this->provider->openBean($this->data, true); } catch(RedBean_Exception_FailedAccessBean $e){ return true; } return false; } }
class RedBean_Driver_MySQL implements RedBean_Driver { private static $me = null; public $Insert_ID; private $debug = false; private $rs = null; private function __construct(){} public static function getInstance( $host, $user, $pass, $dbname ) { if (!self::$me) { mysql_connect( $host, $user, $pass ); mysql_selectdb( $dbname ); self::$me = new RedBean_Driver_MySQL(); } return self::$me; } public function GetAll( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; $arr = array(); while( $r = @mysql_fetch_assoc($rs) ) { $arr[] = $r; } if ($this->debug) { if (count($arr) > 0) { echo "<br><b style='color:green'>resultset: ".count($arr)." rows</b>"; } $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } return $arr; } public function GetCol( $sql ) { $rows = $this->GetAll($sql); $cols = array(); foreach( $rows as $row ) { $cols[] = array_shift( $row ); } return $cols; } public function GetCell( $sql ) { $arr = $this->GetAll( $sql ); $row1 = array_shift( $arr ); $col1 = array_shift( $row1 ); return $col1; } public function GetRow( $sql ) { $arr = $this->GetAll( $sql ); return array_shift( $arr ); } public function ErrorNo() { return mysql_errno(); } public function Errormsg() { return mysql_error(); } public function Execute( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; if ($this->debug) { $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } $this->Insert_ID = $this->GetInsertID(); return intval( mysql_affected_rows()); } public function Escape( $str ) { return mysql_real_escape_string( $str ); } public function GetInsertID() { return intval( mysql_insert_id()); } public function Affected_Rows() { return mysql_affected_rows(); } public function setDebugMode($tf) { $this->debug = $tf; } public function getRaw() { return $this->rs; } }
class Redbean_Driver_PDO implements RedBean_Driver { private static $instance; private $debug = false; private $pdo; private $affected_rows; private $rs; private $exc =0; public static function getInstance($dsn, $user, $pass, $dbname) { if(is_null(self::$instance)) { self::$instance = new Redbean_Driver_PDO($dsn, $user, $pass); } return self::$instance; } public function __construct($dsn, $user, $pass) { $this->pdo = new PDO( $dsn, $user, $pass, array(1002 => 'SET NAMES utf8', PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC) ); } public function GetAll( $sql ) { $this->exc = 0; try{ if ($this->debug) { echo "<HR>" . $sql; } $rs = $this->pdo->query($sql); $this->rs = $rs; $rows = $rs->fetchAll(); if(!$rows) { $rows = array(); } if ($this->debug) { if (count($rows) > 0) { echo "<br><b style='color:green'>resultset: " . count($rows) . " rows</b>"; } } } catch(Exception $e){ $this->exc = 1; if ($this->debug){ $str = $this->Errormsg(); if ($str != "") { echo "<br><b style='color:red'>" . $str . "</b>"; } } return array(); } return $rows; } public function GetCol($sql) { $this->exc = 0; try{ $rows = $this->GetAll($sql); $cols = array(); if ($rows && is_array($rows) && count($rows)>0){ foreach ($rows as $row) { $cols[] = array_shift($row); } } } catch(Exception $e){ $this->exc = 1; return array(); } return $cols; } public function GetCell($sql) { $this->exc = 0; try{ $arr = $this->GetAll($sql); $row1 = array_shift($arr); $col1 = array_shift($row1); } catch(Exception $e){ $this->exc = 1; } return $col1; } public function GetRow($sql) { $this->exc = 0; try{ $arr = $this->GetAll($sql); } catch(Exception $e){ $this->exc = 1; return array(); } return array_shift($arr); } public function ErrorNo() { if (!$this->exc) return 0; $infos = $this->pdo->errorInfo(); return $infos[1]; } public function Errormsg() { if (!$this->exc) return ""; $infos = $this->pdo->errorInfo(); return $infos[2]; } public function Execute( $sql ) { $this->exc = 0; try{ if ($this->debug) { echo "<HR>" . $sql; } $this->affected_rows = $this->pdo->exec($sql); } catch(Exception $e){ $this->exc = 1; if ($this->debug) { $str = $this->Errormsg(); if ($str != "") { echo "<br><b style='color:red'>" . $str . "</b>"; } } return 0; } return $this->affected_rows; } public function Escape( $str ) { return substr(substr($this->pdo->quote($str), 1), 0, -1); } public function GetInsertID() { return (int) $this->pdo->lastInsertId(); } public function Affected_Rows() { return (int) $this->affected_rows; } public function setDebugMode( $tf ) { $this->debug = (bool)$tf; } public function GetRaw() { return $this->rs; } }
interface RedBean_Driver { public static function getInstance( $host, $user, $pass, $dbname ); public function GetAll( $sql ); public function GetCol( $sql ); public function GetCell( $sql ); public function GetRow( $sql ); public function ErrorNo(); public function Errormsg(); public function Execute( $sql ); public function Escape( $str ); public function GetInsertID(); public function Affected_Rows(); public function setDebugMode( $tf ); public function GetRaw(); }
class RedBean_Exception_FailedAccessBean extends Exception{}
class RedBean_Exception_InvalidArgument extends RedBean_Exception {}
class RedBean_Exception_InvalidParentChildCombination extends RedBean_Exception{}
class RedBean_Exception_Security extends RedBean_Exception {}
class RedBean_Exception_SQL extends RedBean_Exception {};
class Redbean_Exception extends Exception{}
class RedBean_Mod_BeanChecker { public function check( RedBean_OODBBean $bean ) { foreach($bean as $prop=>$value) { if (preg_match('/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/',$prop)) { throw new RedBean_Exception_Security("Invalid Characters in property $prop "); } $prop = preg_replace('/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/',"",$prop); if (strlen(trim($prop))===0) { throw new RedBean_Exception_Security("Invalid Characters in property"); } else { if (is_array($value)) { throw new RedBean_Exception_Security("Cannot store an array, use composition instead or serialize first."); } if (is_object($value)) { throw new RedBean_Exception_Security("Cannot store an object, use composition instead or serialize first."); } $bean->$prop = $value; } } if (!isset($bean->id)) { throw new RedBean_Exception_Security("Invalid bean, no id"); } if (!is_numeric($bean->id) || $bean->id < 0 || (round($bean->id)!=$bean->id)) { throw new RedBean_Exception_Security("Invalid bean, id not numeric"); } if (!isset($bean->type)) { throw new RedBean_Exception_Security("Invalid bean, no type"); } if (!is_string($bean->type) || is_numeric($bean->type) || strlen($bean->type)<3) { throw new RedBean_Exception_Security("Invalid bean, wrong type"); } if ($bean->type==="locking" || $bean->type==="dtyp" || $bean->type==="redbeantables") { throw new RedBean_Exception_Security("Beantype is reserved table"); } if (strpos($bean->type,"_")!==false && ctype_alnum($bean->type)) { throw new RedBean_Exception_Security("Beantype contains illegal characters"); } } }
class RedBean_Mod_ClassGenerator { public function generate( $classes, $prefix = false, $suffix = false ) { if (!$prefix) { $prefix = RedBean_Setup_Namespace_PRFX; } if (!$suffix) { $suffix = RedBean_Setup_Namespace_SFFX; } $classes = explode(",",$classes); foreach($classes as $c) { $ns = ''; $names = explode('\\', $c); $className = trim(end($names)); if(count($names) > 1) { $namespacestring = implode('\\', array_slice($names, 0, -1)); $ns = 'namespace ' . $namespacestring . " { "; } if ($c!=="" && $c!=="null" && !class_exists($c) && preg_match("/^\s*[A-Za-z_][A-Za-z0-9_]*\s*$/",$className)){ $tablename = preg_replace("/_/","",$className); $fullname = $prefix.$className.$suffix; $toeval = $ns . " class ".$fullname." extends ". (($ns=='') ? '' : '\\' ) . "RedBean_Decorator {
                                        private static \$__static_property_type = \"".strtolower($tablename)."\";

                                        public function __construct(\$id=0, \$lock=false) {

                                                parent::__construct( RedBean_OODB::getInstance(), '".strtolower($tablename)."',\$id,\$lock);
                                        }

                                        public static function where( \$sql, \$slots=array() ) {
                                                return new RedBean_Can( RedBean_OODB::getInstance(), self::\$__static_property_type, RedBean_OODB::getInstance()->getBySQL( \$sql, \$slots, self::\$__static_property_type) );
                                        }

                                        public static function listAll(\$start=false,\$end=false,\$orderby=' id ASC ',\$sql=false) {
                                                return RedBean_OODB::getInstance()->listAll(self::\$__static_property_type,\$start,\$end,\$orderby,\$sql);
                                        }

                                        public static function getReadOnly(\$id) {
                                                RedBean_OODB::getInstance()->setLocking( false );
                                                \$me = new self( \$id );
                                                RedBean_OODB::getInstance()->setLocking( true );
                                                return \$me;
                                        }

                                        public function whereNS( \$sql, \$slots=array() ) {
                                                return self::where( \$sql, \$slots );
                                        }

                                        public function listAllNS(\$start=false,\$end=false,\$orderby=' id ASC ',\$sql=false) {
                                                self::listAll(\$start,\$end,\$orderby,\$sql);
                                        }
                                        public function getReadOnlyNS(\$id) {
                                                return self::getReadOnly(\$id);
                                        }

                                }"; if(count($names) > 1) { $toeval .= "}"; } $teststring = (($ns!="") ? '\\'.$namespacestring.'\\'.$fullname : $fullname); eval($toeval); if (!class_exists( $teststring )) { throw new Exception("Failed to generate class"); } } else { return false; } } return true; } }
class RedBean_Mod_GarbageCollector { public function removeUnused( RedBean_OODB $oodb, RedBean_DBAdapter $db, RedBean_QueryWriter $writer ) { $tables = $oodb->showTables(); foreach($tables as $table) { if (strpos($table,"_")!==false) { $tables = explode("_", $table); $classname1 = RedBean_Setup_Namespace_PRFX . $tables[0] . RedBean_Setup_Namespace_SFFX; $classname2 = RedBean_Setup_Namespace_PRFX . $tables[1] . RedBean_Setup_Namespace_SFFX; if(!class_exists( $classname1 , true) || !class_exists( $classname2 , true)) { $db->exec( $writer->getQuery("drop_tables",array("tables"=>array($table))) ); $db->exec($writer->getQuery("unregister_table",array("table"=>$table))); } } else { $classname = RedBean_Setup_Namespace_PRFX . $table . RedBean_Setup_Namespace_SFFX; if(!class_exists( $classname , true)) { $db->exec( $writer->getQuery("drop_tables",array("tables"=>array($table))) ); $db->exec($writer->getQuery("unregister_table",array("table"=>$table))); } } } } }
class RedBean_Observable { private $observers = array(); public function addEventListener( $eventname, RedBean_Observer $observer ) { if (!isset($this->observers[ $eventname ])) { $this->observers[ $eventname ] = array(); } $this->observers[ $eventname ][] = $observer; } public function signal( $eventname ) { if (!isset($this->observers[ $eventname ])) { $this->observers[ $eventname ] = array(); } foreach($this->observers[$eventname] as $observer) { $observer->onEvent( $eventname, $this ); } } }
interface RedBean_Observer { public function onEvent( $eventname, RedBean_Observable $o ); }
class RedBean_OODB { private $locktime = 10; private $db; private $locking = true; public $pkey = false; private $rollback = false; private $me = null; private $engine = "myisam"; private $frozen = false; private $writer; private $beanchecker; private $gc; private $classGenerator; public function __construct() { $this->beanchecker = new RedBean_Mod_BeanChecker(); $this->gc = new RedBean_Mod_GarbageCollector(); $this->classGenerator = new RedBean_Mod_ClassGenerator(); } public function __destruct() { $this->releaseAllLocks(); $this->db->exec( $this->writer->getQuery("destruct", array("engine"=>$this->engine,"rollback"=>$this->rollback)) ); } public function setLocking( $tf ) { $this->locking = $tf; } public function getDatabase() { return $this->db; } public function setDatabase( RedBean_DBAdapter $db ) { $this->db = $db; } public function getLocking() { return $this->locking; } public function setOptimizerActive( $bool ) { $this->optimizer = (boolean) $bool; } public function getOptimizerActive() { return $this->optimizer; } private static $instance = null; public function getInstance() { if (self::$instance === null) { self::$instance = new RedBean_OODB; } return self::$instance; } public function checkBean(RedBean_OODBBean $bean) { if (!$this->db) { throw new RedBean_Exception_Security("No database object. Have you used kickstart to initialize RedBean?"); } return $this->beanchecker->check( $bean ); } public function checkBeanForAssoc( $bean ) { $this->checkBean($bean); if (intval($bean->id) < 1) { $bean->id = $this->set( $bean ); } return $bean; } public function getEngine() { return $this->engine; } public function setEngine( $engine ) { if ($engine=="myisam" || $engine=="innodb") { $this->engine = $engine; } else { throw new Exception("Unsupported database engine"); } return $this->engine; } public function rollback() { $this->rollback = true; } public function set( RedBean_OODBBean $bean ) { $this->checkBean($bean); $db = $this->db; $table = $db->escape($bean->type); if (!$this->frozen) { $tables = $this->showTables(); if (!in_array($table, $tables)) { $createtableSQL = $this->writer->getQuery("create_table", array( "engine"=>$this->engine, "table"=>$table )); $db->exec( $createtableSQL ); $this->addTable( $table ); } $columnsRaw = $this->writer->getTableColumns($table, $db) ; $columns = array(); foreach($columnsRaw as $r) { $columns[$r["Field"]]=$r["Type"]; } $insertvalues = array(); $insertcolumns = array(); $updatevalues = array(); foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $typeno = $this->inferType($v); if (isset($columns[$p])) { $sqlt = $this->getType($columns[$p]); if ($typeno > $sqlt) { $changecolumnSQL = $this->writer->getQuery( "widen_column", array( "table" => $table, "column" => $p, "newtype" => $this->writer->typeno_sqltype[$typeno] ) ); $db->exec( $changecolumnSQL ); } } else { $addcolumnSQL = $this->writer->getQuery("add_column",array( "table"=>$table, "column"=>$p, "type"=> $this->writer->typeno_sqltype[$typeno] )); $db->exec( $addcolumnSQL ); } $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } else { foreach( $bean as $p=>$v) { if ($p!="type" && $p!="id") { $p = $db->escape($p); $v = $db->escape($v); $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } } if ($bean->id) { $this->openBean($bean, true); if (count($updatevalues)>0) { $updateSQL = $this->writer->getQuery("update", array( "table"=>$table, "updatevalues"=>$updatevalues, "id"=>$bean->id )); $db->exec( $updateSQL ); } } else { if (count($insertvalues)>0) { $insertSQL = $this->writer->getQuery("insert",array( "table"=>$table, "insertcolumns"=>$insertcolumns, "insertvalues"=>$insertvalues )); } else { $insertSQL = $this->writer->getQuery("create", array("table"=>$table)); } $db->exec( $insertSQL ); $bean->id = $db->getInsertID(); $this->openBean($bean); } return $bean->id; } public function inferType( $v ) { $db = $this->db; $rawv = $v; $checktypeSQL = $this->writer->getQuery("infertype", array( "value"=> $this->db->escape(strval($v)) )); $db->exec( $checktypeSQL ); $id = $db->getInsertID(); $readtypeSQL = $this->writer->getQuery("readtype",array( "id"=>$id )); $row=$db->getRow($readtypeSQL); $db->exec( $this->writer->getQuery("reset_dtyp") ); $tp = 0; foreach($row as $t=>$tv) { if (strval($tv) === strval($rawv)) { return $tp; } $tp++; } return $tp; } public function getType( $sqlType ) { if (in_array($sqlType,$this->writer->sqltype_typeno)) { $typeno = $this->writer->sqltype_typeno[$sqlType]; } else { $typeno = -1; } return $typeno; } public function init( RedBean_QueryWriter $querywriter, $dontclose = false ) { $this->writer = $querywriter; if ($this->engine === "innodb") { $this->db->exec($this->writer->getQuery("prepare_innodb")); $this->db->exec($this->writer->getQuery("starttransaction")); } else if ($this->engine === "myisam"){ $this->db->exec($this->writer->getQuery("prepare_myisam")); } if (!$this->frozen) { $this->db->exec($this->writer->getQuery("clear_dtyp")); $this->db->exec($this->writer->getQuery("setup_dtyp")); $this->db->exec($this->writer->getQuery("setup_locking")); $this->db->exec($this->writer->getQuery("setup_tables")); } if (!$this->pkey) { $this->pkey = str_replace(".","",microtime(true)."".mt_rand()); } return true; } public function freeze() { $this->frozen = true; } public function unfreeze() { $this->frozen = false; } public function showTables( $all=false ) { $db = $this->db; if ($all && $this->frozen) { $alltables = $db->getCol($this->writer->getQuery("show_tables")); return $alltables; } else { $alltables = $db->getCol($this->writer->getQuery("show_rtables")); return $alltables; } } public function addTable( $tablename ) { $db = $this->db; $tablename = $db->escape( $tablename ); $db->exec($this->writer->getQuery("register_table",array("table"=>$tablename))); } public function dropTable( $tablename ) { $db = $this->db; $tablename = $db->escape( $tablename ); $db->exec($this->writer->getQuery("unregister_table",array("table"=>$tablename))); } public function releaseAllLocks() { $this->db->exec($this->writer->getQuery("release",array("key"=>$this->pkey))); } public function openBean( $bean, $mustlock=false) { $this->checkBean( $bean ); if (!$this->locking || $bean->id === 0) return true; $db = $this->db; $removeExpiredSQL = $this->writer->getQuery("remove_expir_lock", array( "locktime"=>$this->locktime )); $db->exec($removeExpiredSQL); $tbl = $db->escape( $bean->type ); $id = intval( $bean->id ); $checkopenSQL = $this->writer->getQuery("get_lock",array( "id"=>$id, "table"=>$tbl, "key"=>$this->pkey )); $row = $db->getRow($checkopenSQL); if ($row && is_array($row) && count($row)>0) { $updateexpstamp = $this->writer->getQuery("update_expir_lock",array( "time"=>time(), "id"=>$row["id"] )); $db->exec($updateexpstamp); return true; } if ($mustlock) { throw new RedBean_Exception_FailedAccessBean("Could not acquire a lock for bean $tbl . $id "); return false; } $openSQL = $this->writer->getQuery("aq_lock", array( "table"=>$tbl, "id"=>$id, "key"=>$this->pkey, "time"=>time() )); $trials = 0; $aff = 0; while( $aff < 1 && $trials < 5 ) { $db->exec($openSQL); $aff = $db->getAffectedRows(); $trials++; if ($aff < 1) usleep(500000); } if ($trials > 4) { return false; } else { return true; } } private function sync( $toggle ) { $bean = $this->dispense("_syncmethod"); $bean->id = 0; if ($toggle) { $this->openBean( $bean ); } else { $this->closeBean( $bean ); } } public function getById($type, $id, $data=false) { $bean = $this->dispense( $type ); $db = $this->db; $table = $db->escape( $type ); $id = abs( intval( $id ) ); $bean->id = $id; $this->openBean($bean); if (!$data) { $getSQL = $this->writer->getQuery("get_bean",array( "type"=>$type, "id"=>$id )); $row = $db->getRow( $getSQL ); } else { $row = $data; } if ($row && is_array($row) && count($row)>0) { foreach($row as $p=>$v) { $bean->$p = $v; } } else { throw new RedBean_Exception_FailedAccessBean("bean not found"); } return $bean; } public function exists($type,$id) { $db = $this->db; $id = intval( $id ); $type = $db->escape( $type ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return false; } else { $no = $db->getCell( $this->writer->getQuery("bean_exists",array( "type"=>$type, "id"=>$id )) ); if (intval($no)) { return true; } else { return false; } } } public function numberof($type) { $db = $this->db; $type = strtolower( $db->escape( $type ) ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell( $this->writer->getQuery("count",array( "type"=>$type ))); return intval( $no ); } } function distinct($type, $field) { $db = $this->db; $type = strtolower( $db->escape( $type ) ); $field = $db->escape( $field ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return array(); } else { $ids = $db->getCol( $this->writer->getQuery("distinct",array( "type"=>$type, "field"=>$field ))); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->getById( $type, $id , false); } } return $beans; } } private function stat($type,$field,$stat="sum") { $db = $this->db; $type = strtolower( $db->escape( $type ) ); $field = strtolower( $db->escape( $field ) ); $stat = $db->escape( $stat ); $alltables = $this->showTables(); if (!in_array($type, $alltables)) { return 0; } else { $no = $db->getCell($this->writer->getQuery("stat",array( "stat"=>$stat, "field"=>$field, "type"=>$type ))); return floatval( $no ); } } public function sumof($type,$field) { return $this->stat( $type, $field, "sum"); } public function avgof($type,$field) { return $this->stat( $type, $field, "avg"); } public function minof($type,$field) { return $this->stat( $type, $field, "min"); } public function maxof($type,$field) { return $this->stat( $type, $field, "max"); } public function resetAll() { $sql = $this->writer->getQuery("releaseall"); $this->db->exec( $sql ); return true; } public function processQuerySlots($sql, $slots) { $db = $this->db; $code = sha1(rand(1,1000)*time()); foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$key."}", "{".$code.$key."}" ,$sql ); } foreach( $slots as $key=>$value ) { $sql = str_replace( "{".$code.$key."}", $this->writer->getQuote().$db->escape( $value ).$this->writer->getQuote(),$sql ); } return $sql; } public function fastLoader( $type, $ids ) { $db = $this->db; $sql = $this->writer->getQuery("fastload", array( "type"=>$type, "ids"=>$ids )); return $db->get( $sql ); } public function getBySQL( $rawsql, $slots, $table, $max=0 ) { $db = $this->db; $sql = $rawsql; if (is_array($slots)) { $sql = $this->processQuerySlots( $sql, $slots ); } $sql = str_replace('@ifexists:','', $sql); $rs = $db->getCol( $this->writer->getQuery("where",array( "table"=>$table )) . $sql ); $err = $db->getErrorMsg(); if (!$this->frozen && strpos($err,"Unknown column")!==false && $max<10) { $matches = array(); if (preg_match("/Unknown\scolumn\s'(.*?)'/",$err,$matches)) { if (count($matches)==2 && strpos($rawsql,'@ifexists')!==false){ $rawsql = str_replace('@ifexists:`'.$matches[1].'`','NULL', $rawsql); $rawsql = str_replace('@ifexists:'.$matches[1].'','NULL', $rawsql); return $this->getBySQL( $rawsql, $slots, $table, ++$max); } } return array(); } else { if (is_array($rs)) { return $rs; } else { return array(); } } } public function find(RedBean_OODBBean $bean, $searchoperators = array(), $start=0, $end=100, $orderby="id ASC", $extraSQL=false) { $this->checkBean( $bean ); $db = $this->db; $tbl = $db->escape( $bean->type ); $findSQL = $this->writer->getQuery("find",array( "searchoperators"=>$searchoperators, "bean"=>$bean, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL, "tbl"=>$tbl )); $ids = $db->getCol( $findSQL ); $beans = array(); if (is_array($ids) && count($ids)>0) { foreach( $ids as $id ) { $beans[ $id ] = $this->getById( $bean->type, $id , false); } } return $beans; } public function listAll($type, $start=false, $end=false, $orderby="id ASC", $extraSQL = false) { $db = $this->db; $listSQL = $this->writer->getQuery("list",array( "type"=>$type, "start"=>$start, "end"=>$end, "orderby"=>$orderby, "extraSQL"=>$extraSQL )); return $db->get( $listSQL ); } public function associate( RedBean_OODBBean $bean1, RedBean_OODBBean $bean2 ) { $db = $this->db; $bean1 = $this->checkBeanForAssoc($bean1); $bean2 = $this->checkBeanForAssoc($bean2); $this->openBean( $bean1, true ); $this->openBean( $bean2, true ); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2){ $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); if (!$this->frozen) { $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; } $assoccreateSQL = $this->writer->getQuery("create_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2, "engine"=>$this->engine )); $db->exec( $assoccreateSQL ); $db->exec( $this->writer->getQuery("add_assoc",array( "assoctable"=> $assoctable, "t1" =>$t1, "t2" =>$t2 )) ); $this->addTable( $assoctable ); } } $assocSQL = $this->writer->getQuery("add_assoc_now", array( "id1"=>$id1, "id2"=>$id2, "assoctable"=>$assoctable )); $db->exec( $assocSQL ); } public function unassociate(RedBean_OODBBean $bean1, RedBean_OODBBean $bean2) { $db = $this->db; $bean1 = $this->checkBeanForAssoc($bean1); $bean2 = $this->checkBeanForAssoc($bean2); $this->openBean( $bean1, true ); $this->openBean( $bean2, true ); $idx1 = intval($bean1->id); $idx2 = intval($bean2->id); $tp1 = $bean1->type; $tp2 = $bean2->type; if ($tp1==$tp2){ $arr = array( 0=>$bean1, 1 =>$bean2 ); } else { $arr = array( $tp1=>$bean1, $tp2 =>$bean2 ); } ksort($arr); $bean1 = array_shift( $arr ); $bean2 = array_shift( $arr ); $id1 = intval($bean1->id); $id2 = intval($bean2->id); $tables = array(); array_push( $tables, $db->escape( $bean1->type ) ); array_push( $tables, $db->escape( $bean2->type ) ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->showTables(); if (in_array($assoctable, $alltables)) { $t1 = $tables[0]; $t2 = $tables[1]; if ($t1==$t2) { $t2.="2"; $unassocSQL = $this->writer->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t2, "t2"=>$t1, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } $unassocSQL = $this->writer->getQuery("unassoc",array( "assoctable"=>$assoctable, "t1"=>$t1, "t2"=>$t2, "id1"=>$id1, "id2"=>$id2 )); $db->exec($unassocSQL); } if ($tp1==$tp2) { $assoctable2 = "pc_".$db->escape( $bean1->type )."_".$db->escape( $bean1->type ); $alltables = $this->showTables(); if (in_array($assoctable2, $alltables)) { $unassocSQL = $this->writer->getQuery("untree", array( "assoctable2"=>$assoctable2, "idx1"=>$idx1, "idx2"=>$idx2 )); $db->exec($unassocSQL); } } } public function getAssoc(RedBean_OODBBean $bean, $targettype) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $id = intval($bean->id); $t1 = $db->escape( strtolower($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { if ($t1==$t2) { $t2.="2"; } $getassocSQL = $this->writer->getQuery("get_assoc",array( "t1"=>$t1, "t2"=>$t2, "assoctable"=>$assoctable, "id"=>$id )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function trash( RedBean_OODBBean $bean ) { $this->checkBean( $bean ); if (intval($bean->id)===0) return; $this->deleteAllAssoc( $bean ); $this->openBean($bean); $table = $this->db->escape($bean->type); $id = intval($bean->id); $this->db->exec( $this->writer->getQuery("trash",array( "table"=>$table, "id"=>$id )) ); } public function deleteAllAssoc( $bean ) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $this->openBean( $bean, true ); $id = intval( $bean->id ); $alltables = $this->showTables(); $t = $db->escape($bean->type); $checktables = array(); foreach( $alltables as $table ) { if (strpos($table,$t."_")!==false || strpos($table,"_".$t)!==false){ $checktables[] = $table; } } foreach($checktables as $table) { if (strpos($table,"pc_")===0){ $db->exec( $this->writer->getQuery("deltree",array( "id"=>$id, "table"=>$table )) ); } else { $db->exec( $this->writer->getQuery("unassoc_all_t1",array("table"=>$table,"t"=>$t,"id"=>$id)) ); $db->exec( $this->writer->getQuery("unassoc_all_t2",array("table"=>$table,"t"=>$t,"id"=>$id)) ); } } return true; } public function deleteAllAssocType( $targettype, $bean ) { $db = $this->db; $bean = $this->checkBeanForAssoc($bean); $this->openBean( $bean, true ); $id = intval( $bean->id ); $t1 = $db->escape( strtolower($bean->type) ); $t2 = $db->escape( $targettype ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $availabletables = $this->showTables(); if (in_array('pc_'.$assoctable,$availabletables)){ $db->exec( $this->writer->getQuery("deltreetype",array( "assoctable"=>'pc_'.$assoctable, "id"=>$id )) ); } if (in_array($assoctable,$availabletables)) { $db->exec( $this->writer->getQuery("unassoctype1",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); $db->exec( $this->writer->getQuery("unassoctype2",array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id )) ); } return true; } public function dispense( $type="StandardBean" ) { $oBean = new RedBean_OODBBean(); $oBean->type = $type; $oBean->id = 0; return $oBean; } public function addChild( RedBean_OODBBean $parent, RedBean_OODBBean $child ) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $child = $this->checkBeanForAssoc($child); $this->openBean( $parent, true ); $this->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $pid = intval($parent->id); $cid = intval($child->id); $assoctable = "pc_".$db->escape($parent->type."_".$parent->type); if (!$this->frozen) { $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { $assoccreateSQL = $this->writer->getQuery("create_tree",array( "engine"=>$this->engine, "assoctable"=>$assoctable )); $db->exec( $assoccreateSQL ); $db->exec( $this->writer->getQuery("unique", array( "assoctable"=>$assoctable )) ); $this->addTable( $assoctable ); } } $assocSQL = $this->writer->getQuery("add_child",array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec( $assocSQL ); } public function getChildren( RedBean_OODBBean $parent ) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $pid = intval($parent->id); $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $parent->type; $getassocSQL = $this->writer->getQuery("get_children", array( "assoctable"=>$assoctable, "pid"=>$pid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function getParent( RedBean_OODBBean $child ) { $db = $this->db; $child = $this->checkBeanForAssoc($child); $cid = intval($child->id); $assoctable = "pc_".$db->escape( $child->type . "_" . $child->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return array(); } else { $targettype = $child->type; $getassocSQL = $this->writer->getQuery("get_parent", array( "assoctable"=>$assoctable, "cid"=>$cid )); $rows = $db->getCol( $getassocSQL ); $beans = array(); if ($rows && is_array($rows) && count($rows)>0) { foreach($rows as $i) { $beans[$i] = $this->getById( $targettype, $i, false); } } return $beans; } } public function removeChild(RedBean_OODBBean $parent, RedBean_OODBBean $child) { $db = $this->db; $parent = $this->checkBeanForAssoc($parent); $child = $this->checkBeanForAssoc($child); $this->openBean( $parent, true ); $this->openBean( $child, true ); if ($parent->type !== $child->type) { throw new RedBean_Exception_InvalidParentChildCombination(); } $assoctable = "pc_".$db->escape( $parent->type . "_" . $parent->type ); $alltables = $this->showTables(); if (!in_array($assoctable, $alltables)) { return true; } else { $pid = intval($parent->id); $cid = intval($child->id); $unassocSQL = $this->writer->getQuery("remove_child", array( "assoctable"=>$assoctable, "pid"=>$pid, "cid"=>$cid )); $db->exec($unassocSQL); } } public function numofRelated( $type, RedBean_OODBBean $bean ) { $db = $this->db; $t2 = strtolower( $db->escape( $type ) ); $this->checkBean( $bean ); $t1 = strtolower( $bean->type ); $tref = strtolower( $db->escape( $bean->type ) ); $id = intval( $bean->id ); $tables = array(); array_push( $tables, $t1 ); array_push( $tables, $t2 ); sort($tables); $assoctable = $db->escape( implode("_",$tables) ); $tables = $this->showTables(); if ($tables && is_array($tables) && count($tables) > 0) { if (in_array( $t1, $tables ) && in_array($t2, $tables)){ $sqlCountRelations = $this->writer->getQuery( "num_related", array( "assoctable"=>$assoctable, "t1"=>$t1, "id"=>$id ) ); return (int) $db->getCell( $sqlCountRelations ); } } else { return 0; } } public function generate( $classes, $prefix = false, $suffix = false ) { return $this->classGenerator->generate($classes,$prefix,$suffix); } public function setLockingTime( $timeInSecs ) { if (is_int($timeInSecs) && $timeInSecs >= 0) { $this->locktime = $timeInSecs; } else { throw new RedBean_Exception_InvalidArgument( "time must be integer >= 0" ); } } public function clean() { if ($this->frozen) { return false; } $db = $this->db; $tables = $db->getCol( $this->writer->getQuery("show_rtables") ); foreach($tables as $key=>$table) { $tables[$key] = $this->writer->getEscape().$table.$this->writer->getEscape(); } $sqlcleandatabase = $this->writer->getQuery("drop_tables",array( "tables"=>$tables )); $db->exec( $sqlcleandatabase ); $db->exec( $this->writer->getQuery("truncate_rtables") ); $this->resetAll(); return true; } public function removeUnused( ) { if ($this->frozen) { return false; } return $this->gc->removeUnused( $this, $this->db, $this->writer ); } public function dropColumn( $table, $property ) { if ($this->frozen) { return false; } $db = $this->db; $db->exec( $this->writer->getQuery("drop_column", array( "table"=>$table, "property"=>$property )) ); } public function trashAll($type) { $this->db->exec( $this->writer->getQuery("drop_type",array("type"=>strtolower($type)))); } public function keepInShapeNS( $gc = false ,$stdTable=false, $stdCol=false) { if ($this->frozen) { return false; } $db = $this->db; $tables = $this->showTables(); if ($tables && is_array($tables) && count($tables) > 0) { if ($gc) $this->removeUnused( $tables ); $table = $tables[array_rand( $tables, 1 )]; } else { return; } if ($stdTable) $table = $stdTable; $table = $db->escape( $table ); if (strpos($table,'_')!==false) return; $cols = $this->writer->getTableColumns( $table, $db ); if (count($cols)<1) return; $colr = $cols[array_rand( $cols )]; $col = $db->escape( $colr["Field"] ); if ($stdCol){ $exists = false; $col = $stdCol; foreach($cols as $cl){ if ($cl["Field"]==$col) { $exists = $cl; } } if (!$exists) { return; } else { $colr = $exists; } } if ($col=="id" || strpos($col,"_id")!==false) { return; } if ($gc && !intval($db->getCell( $this->writer->getQuery("get_null",array( "table"=>$table, "col"=>$col ) )))) { $db->exec( $this->writer->getQuery("drop_column",array("table"=>$table,"property"=>$col))); return; } $currenttype = $this->writer->sqltype_typeno[$colr["Type"]]; if ($currenttype > 0) { $trytype = rand(0,$currenttype - 1); $db->exec($this->writer->getQuery("test_column",array( "type"=>$this->writer->typeno_sqltype[$trytype], "table"=>$table ) )); $db->exec($this->writer->getQuery("update_test",array( "table"=>$table, "col"=>$col ))); $delta = $db->getCell($this->writer->getQuery("measure",array( "table"=>$table, "col"=>$col ))); if (intval($delta)===0) { $sql = $this->writer->getQuery("remove_test",array( "table"=>$table, "col"=>$col, "type"=>$this->writer->typeno_sqltype[$trytype] )); $db->exec($sql); } $db->exec( $this->writer->getQuery("drop_test",array( "table"=>$table )) ); } if ( strpos($colr["Type"],"TEXT")!==false || strpos($colr["Type"],"LONGTEXT")!==false ) { return; } $variance = $db->getCell($this->writer->getQuery("variance",array( "col"=>$col, "table"=>$table ))); $records = $db->getCell($this->writer->getQuery("count",array("type"=>$table))); if ($records) { $relvar = intval($variance) / intval($records); $indexname = "reddex_".$col; if ($records > 1 && $relvar > 0.85) { $sqladdindex=$this->writer->getQuery("index1",array( "table"=>$table, "indexname"=>$indexname, "col"=>$col )); $db->exec( $sqladdindex ); } else { $sqldropindex = $this->writer->getQuery("index2",array("table"=>$table,"indexname"=>$indexname)); $db->exec( $sqldropindex ); } } return true; } public static function gen($arg, $prefix = false, $suffix = false) { return self::getInstance()->generate($arg, $prefix, $suffix); } public static function keepInShape($gc = false ,$stdTable=false, $stdCol=false) { return self::getInstance()->keepInShapeNS($gc, $stdTable, $stdCol); } public function getInstOf( $className, $id=0 ) { if (!class_exists($className)) throw new Exception("Class does not Exist"); $object = new $className($id); return $object; } }
class RedBean_OODBBean { }
class Redbean_Querylogger implements RedBean_Observer { private $path = ""; private $userid = 0; private function getFilename() { return $this->path . "audit_".date("m_d_y").".log"; } public function logSCQuery( $sql, $db ) { $sql = addslashes($sql); $line = "\n".date("H:i:s")."|".$_SERVER["REMOTE_ADDR"]."|UID=".$this->userid."|".$sql; file_put_contents( $this->getFilename(), $line, FILE_APPEND ); return null; } public static function init($path="",$userid=0) { $logger = new self; $logger->userid = $userid; $logger->path = $path; if (!file_exists($logger->getFilename())) { file_put_contents($logger->getFilename(),"begin logging"); } RedBean_OODB::getInstance()->getDatabase()->addEventListener( "sql_exec", $logger ); } public function onEvent( $event, RedBean_Observable $db ) { $this->logSCQuery( $db->getSQL(), $db ); } }
class QueryWriter_MySQL implements RedBean_QueryWriter { public $typeno_sqltype = array( " TINYINT(3) UNSIGNED ", " INT(11) UNSIGNED ", " BIGINT(20) ", " VARCHAR(255) ", " TEXT ", " LONGTEXT " ); public $sqltype_typeno = array( "tinyint(3) unsigned"=>0, "int(11) unsigned"=>1, "bigint(20)"=>2, "varchar(255)"=>3, "text"=>4, "longtext"=>5 ); public $dtypes = array( "tintyintus","intus","ints","varchar255","text","ltext" ); private function getQueryCreateTable( $options=array() ) { $engine = $options["engine"]; $table = $options["table"]; if ($engine=="myisam") { $createtableSQL = "
			 CREATE TABLE `$table` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = MYISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
			"; } else { $createtableSQL = "
			 CREATE TABLE `$table` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
			"; } return $createtableSQL; } private function getQueryWiden( $options ) { extract($options); return "ALTER TABLE `$table` CHANGE `$column` `$column` $newtype "; } private function getQueryAddColumn( $options ) { extract($options); return "ALTER TABLE `$table` ADD `$column` $type "; } private function getQueryUpdate( $options ) { extract($options); $update = array(); foreach($updatevalues as $u) { $update[] = " `".$u["property"]."` = \"".$u["value"]."\" "; } return "UPDATE `$table` SET ".implode(",",$update)." WHERE id = ".$id; } private function getQueryInsert( $options ) { extract($options); foreach($insertcolumns as $k=>$v) { $insertcolumns[$k] = "`".$v."`"; } foreach($insertvalues as $k=>$v) { $insertvalues[$k] = "\"".$v."\""; } $insertSQL = "INSERT INTO `$table`
					  ( id, ".implode(",",$insertcolumns)." )
					  VALUES( null, ".implode(",",$insertvalues)." ) "; return $insertSQL; } private function getQueryCreate( $options ) { extract($options); return "INSERT INTO `$table` (id) VALUES(null) "; } private function getQueryInferType( $options ) { extract($options); $v = "\"".$value."\""; $checktypeSQL = "insert into dtyp VALUES(null,$v,$v,$v,$v,$v )"; return $checktypeSQL; } private function getQueryResetDTYP() { return "truncate table dtyp"; } private function getQueryRegisterTable( $options ) { extract( $options ); return "replace into redbeantables values (null, \"$table\") "; } private function getQueryUnregisterTable( $options ) { extract( $options ); return "delete from redbeantables where tablename = \"$table\" "; } private function getQueryRelease( $options ) { extract( $options ); return "DELETE FROM locking WHERE fingerprint=\"".$key."\" "; } private function getQueryRemoveExpirLock( $options ) { extract( $options ); return "DELETE FROM locking WHERE expire <= ".(time()-$locktime); } private function getQueryUpdateExpirLock( $options ) { extract( $options ); return "UPDATE locking SET expire=".$time." WHERE id =".$id; } private function getQueryAQLock( $options ) { extract($options); return "INSERT INTO locking VALUES(\"$table\",$id,\"".$key."\",\"".$time."\") "; } private function getQueryDistinct($options) { extract($options); return "SELECT id FROM `$type` GROUP BY $field"; } private function getQueryFastLoad( $options ) { extract( $options ); return "SELECT * FROM `$type` WHERE id IN ( ".implode(",", $ids)." ) ORDER BY FIELD(id,".implode(",", $ids).") ASC		"; } private function getQueryWhere($options) { extract($options); return "select `$table`.id from $table where "; } private function getQueryFind($options) { extract($options); $db = RedBean_OODB::getInstance()->getDatabase(); $findSQL = "SELECT id FROM `$tbl` WHERE "; foreach($bean as $p=>$v) { if ($p === "type" || $p === "id") continue; $p = $db->escape($p); $v = $db->escape($v); if (isset($searchoperators[$p])) { if ($searchoperators[$p]==="LIKE") { $part[] = " `$p`LIKE \"%$v%\" "; } else { $part[] = " `$p` ".$searchoperators[$p]." \"$v\" "; } } else { } } if ($extraSQL) { $findSQL .= @implode(" AND ",$part) . $extraSQL; } else { $findSQL .= @implode(" AND ",$part) . " ORDER BY $orderby LIMIT $start, $end "; } return $findSQL; } private function getQueryList($options) { extract($options); $db = RedBean_OODB::getInstance()->getDatabase(); if ($extraSQL) { $listSQL = "SELECT * FROM ".$db->escape($type)." ".$extraSQL; } else { $listSQL = "SELECT * FROM ".$db->escape($type)."
			ORDER BY ".$orderby; if ($end !== false && $start===false) { $listSQL .= " LIMIT ".intval($end); } if ($start !== false && $end !== false) { $listSQL .= " LIMIT ".intval($start).", ".intval($end); } if ($start !== false && $end===false) { $listSQL .= " LIMIT ".intval($start).", 18446744073709551615 "; } } return $listSQL; } private function getQueryAddAssocNow( $options ) { extract($options); return "REPLACE INTO `$assoctable` VALUES(null,$id1,$id2) "; } private function getQueryUnassoc( $options ) { extract($options); return "DELETE FROM `$assoctable` WHERE ".$t1."_id = $id1 AND ".$t2."_id = $id2 "; } private function getQueryCreateAssoc($options) { extract($options); return "
			 CREATE TABLE `$assoctable` (
			`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
			`".$t1."_id` INT( 11 ) UNSIGNED NOT NULL,
			`".$t2."_id` INT( 11 ) UNSIGNED NOT NULL,
			 PRIMARY KEY ( `id` )
			 ) ENGINE = ".$engine.";
			"; } private function getQueryUntree( $options ) { extract($options); return "DELETE FROM `$assoctable2` WHERE
				(parent_id = $idx1 AND child_id = $idx2) OR
				(parent_id = $idx2 AND child_id = $idx1) "; } private function getQueryAddAssoc($options) { extract( $options ); return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`".$t1."_id`, `".$t2."_id` ) "; } private function getQueryDeltreeType($options) { extract( $options ); return "DELETE FROM $assoctable WHERE parent_id = $id  OR child_id = $id "; } private function getQueryCreateTree( $options ) { extract( $options ); return "
				 CREATE TABLE `$assoctable` (
				`id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				`parent_id` INT( 11 ) UNSIGNED NOT NULL,
				`child_id` INT( 11 ) UNSIGNED NOT NULL,
				 PRIMARY KEY ( `id` )
				 ) ENGINE = ".$engine.";
				"; } private function getQueryUnique( $options ) { extract( $options ); return "ALTER TABLE `$assoctable` ADD UNIQUE INDEX `u_$assoctable` (`parent_id`, `child_id` ) "; } private function getQueryAddChild( $options ) { extract( $options ); return "REPLACE INTO `$assoctable` VALUES(null,$pid,$cid) "; } private function getQueryRemoveChild( $options ) { extract( $options ); return "DELETE FROM `$assoctable` WHERE
				( parent_id = $pid AND child_id = $cid ) "; } private function getQueryDescribe( $options ) { extract( $options ); return "describe `$table`"; } public function getTableColumns($tbl, RedBean_DBAdapter $db) { $rs = $db->get($this->getQuery("describe",array( "table"=>$tbl ))); return $rs; } private function getQueryDropTables( $options ) { extract($options); return "drop tables ".implode(",",$tables); } private function getQueryDropColumn( $options ) { extract($options); return "ALTER TABLE `$table` DROP `$property`"; } private function getQueryTestColumn( $options ) { extract($options); return "alter table `$table` add __test  ".$type; } private function getQueryUpdateTest( $options ) { extract($options); return "update `$table` set __test=`$col`"; } private function getQueryMeasure( $options ) { extract($options); return "select count(*) as df from `$table` where
				strcmp(`$col`,__test) != 0 AND `$col` IS NOT NULL"; } private function getQueryRemoveTest($options) { extract($options); return "alter table `$table` change `$col` `$col` ".$type; } private function getQueryDropTest($options) { extract($options); return "alter table `$table` drop __test"; } private function getIndex1($options) { extract($options); return "ALTER IGNORE TABLE `$table` ADD INDEX $indexname (`$col`)"; } private function getIndex2($options) { extract($options); return "ALTER IGNORE TABLE `$table` DROP INDEX $indexname"; } private function getDestruct($options) { extract($options); if ($rollback) return; if ($engine=="innodb") return "COMMIT"; else return ""; } private function getBasicQuery( $options, $sql_type="SELECT" ) { extract($options); if (isset($fields)){ $sqlfields = array(); foreach($fields as $field) { $sqlfields[] = " `$field` "; } $field = implode(",", $fields); } if (!isset($field)) $field=""; $sql = "$sql_type ".$field." FROM `$table` "; if (isset($where)) { if (is_array($where)) { $crit = array(); foreach($where as $w=>$v) { $crit[] = " `$w` = \"".$v."\""; } $sql .= " WHERE ".implode(" AND ",$crit); } else { $sql .= " WHERE ".$where; } } return $sql; } public function getQuery( $queryname, $params=array() ) { switch($queryname) { case "create_table": return $this->getQueryCreateTable($params); break; case "widen_column": return $this->getQueryWiden($params); break; case "add_column": return $this->getQueryAddColumn($params); break; case "update": return $this->getQueryUpdate($params); break; case "insert": return $this->getQueryInsert($params); break; case "create": return $this->getQueryCreate($params); break; case "infertype": return $this->getQueryInferType($params); break; case "readtype": return $this->getBasicQuery( array("fields"=>array("tinyintus","intus","ints","varchar255","text"), "table" =>"dtyp", "where"=>array("id"=>$params["id"]))); break; case "reset_dtyp": return $this->getQueryResetDTYP(); break; case "prepare_innodb": return "SET autocommit=0"; break; case "prepare_myisam": return "SET autocommit=1"; break; case "starttransaction": return "START TRANSACTION"; break; case "setup_dtyp": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				CREATE TABLE IF NOT EXISTS `dtyp` (
				  `id` int(11) unsigned NOT NULL auto_increment,
				  `tinyintus` tinyint(3) unsigned NOT NULL,
				  `intus` int(11) unsigned NOT NULL,
				  `ints` bigint(20) NOT NULL,
				  `varchar255` varchar(255) NOT NULL,
				  `text` text NOT NULL,
				  PRIMARY KEY  (`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "clear_dtyp": return "drop tables dtyp"; break; case "setup_locking": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				CREATE TABLE IF NOT EXISTS `locking` (
				  `tbl` varchar(255) NOT NULL,
				  `id` bigint(20) NOT NULL,
				  `fingerprint` varchar(255) NOT NULL,
				  `expire` int(11) NOT NULL,
				  UNIQUE KEY `tbl` (`tbl`,`id`)
				) ENGINE=$engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "setup_tables": $engine = RedBean_OODB::getInstance()->getEngine(); return "
				 CREATE TABLE IF NOT EXISTS `redbeantables` (
				 `id` INT( 11 ) UNSIGNED NOT NULL AUTO_INCREMENT ,
				 `tablename` VARCHAR( 255 ) NOT NULL ,
				 PRIMARY KEY ( `id` ),
				 UNIQUE KEY `tablename` (`tablename`)
				 ) ENGINE = $engine DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci
				"; break; case "show_tables": return "show tables"; break; case "show_rtables": return "select tablename from redbeantables"; break; case "register_table": return $this->getQueryRegisterTable( $params ); break; case "unregister_table": return $this->getQueryUnregisterTable( $params ); break; case "release": return $this->getQueryRelease( $params ); break; case "remove_expir_lock": return $this->getQueryRemoveExpirLock( $params ); break; case "update_expir_lock": return $this->getQueryUpdateExpirLock( $params ); break; case "aq_lock": return $this->getQueryAQLock( $params ); break; case "get_lock": return $this->getBasicQuery(array("fields"=>array("id"),"table"=>"locking","where"=>array("id"=>$params["id"],"tbl"=>$params["table"],"fingerprint"=>$params["key"]))); break; case "get_bean": return $this->getBasicQuery(array("field"=>"*","table"=>$params["type"],"where"=>array("id"=>$params["id"]))); break; case "bean_exists": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"],"where"=>array("id"=>$params["id"]))); break; case "count": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["type"])); break; case "distinct": return $this->getQueryDistinct($params); break; case "stat": return $this->getBasicQuery(array("field"=>$params["stat"]."(`".$params["field"]."`)","table"=>$params["type"])); break; case "releaseall": return "TRUNCATE locking"; break; case "fastload": return $this->getQueryFastLoad($params); break; case "where": return $this->getQueryWhere($params); break; case "find": return $this->getQueryFind( $params); break; case "list": return $this->getQueryList( $params); break; case "create_assoc": return $this->getQueryCreateAssoc( $params ); break; case "add_assoc": return $this->getQueryAddAssoc( $params ); break; case "add_assoc_now": return $this->getQueryAddAssocNow( $params ); break; case "unassoc": return $this->getQueryUnassoc( $params ); break; case "untree": return $this->getQueryUntree( $params ); break; case "get_assoc": $col = $params["t1"]."_id"; return $this->getBasicQuery(array( "table"=>$params["assoctable"], "fields"=>array( $params["t2"]."_id" ), "where"=>array( $col=>$params["id"]) )); break; case "trash": return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array("id"=>$params["id"])),"DELETE"); break; case "deltree": return $this->getBasicQuery(array("table"=>$params["table"],"where"=>" parent_id = ".$params["id"]." OR child_id = ".$params["id"]),"DELETE"); break; case "unassoc_all_t1": $col = $params["t"]."_id"; return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE"); break; case "unassoc_all_t2": $col = $params["t"]."2_id"; return $this->getBasicQuery(array("table"=>$params["table"],"where"=>array($col=>$params["id"])),"DELETE"); break; case "deltreetype": return $this->getQueryDeltreeType( $params ); break; case "unassoctype1": $col = $params["t1"]."_id"; $r = $this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE"); return $r; break; case "unassoctype2": $col = $params["t1"]."2_id"; $r =$this->getBasicQuery(array("table"=>$params["assoctable"],"where"=>array($col=>$params["id"])),"DELETE"); return $r; break; case "create_tree": return $this->getQueryCreateTree( $params ); break; case "unique": return $this->getQueryUnique( $params ); break; case "add_child": return $this->getQueryAddChild( $params ); break; case "get_children": return $this->getBasicQuery(array("table"=>$params["assoctable"],"fields"=>array("child_id"), "where"=>array("parent_id"=>$params["pid"]))); break; case "get_parent": return $this->getBasicQuery(array( "where"=>array("child_id"=>$params["cid"]),"fields"=>array("parent_id"),"table"=>$params["assoctable"] )); break; case "remove_child": return $this->getQueryRemoveChild( $params ); break; case "num_related": $col = $params["t1"]."_id"; return $this->getBasicQuery(array("field"=>"COUNT(1)","table"=>$params["assoctable"],"where"=>array($col=>$params["id"]))); break; case "drop_tables": return $this->getQueryDropTables( $params ); break; case "truncate_rtables": return "truncate redbeantables"; break; case "drop_column": return $this->getQueryDropColumn( $params ); break; case "describe": return $this->getQueryDescribe( $params ); break; case "get_null": return $this->getBasicQuery(array("field"=>"count(*)","table"=>$params["table"],"where"=>" `".$params["col"]."` IS NOT NULL ")); return $this->getQueryGetNull( $params ); break; case "test_column": return $this->getQueryTestColumn( $params ); break; case "update_test": return $this->getQueryUpdateTest( $params ); break; case "measure": return $this->getQueryMeasure( $params ); break; case "remove_test": return $this->getQueryRemoveTest($params); break; case "drop_test": return $this->getQueryDropTest($params); break; case "variance": return $this->getBasicQuery(array("field"=>"count(distinct `".$params["col"]."`)","table"=>$params["table"])); break; case "index1": return $this->getIndex1($params); break; case "index2": return $this->getIndex2($params); break; case "drop_type": return $this->getBasicQuery(array("table"=>$params["type"]),"DELETE"); break; case "destruct": return $this->getDestruct($params); break; default: throw new Exception("QueryWriter has no support for Query:".$queryname); } } public function getQuote() { return "\""; } public function getEscape() { return "`"; } }
interface RedBean_QueryWriter { public function getQuery( $queryname, $params=array() ); public function getQuote(); public function getEscape(); public function getTableColumns( $tbl, RedBean_DBAdapter $db ); }
if (!defined("RedBean_Setup_Namespace_PRFX")) define("RedBean_Setup_Namespace_PRFX",""); if (!defined("RedBean_Setup_Namespace_SFFX")) define("RedBean_Setup_Namespace_SFFX",""); class RedBean_Setup { public static function kickstart( $dsn="mysql:host=localhost;dbname=oodb", $username='root', $password='', $freeze=false, $engine="innodb", $debugmode=false, $unlockall=false) { if (!class_exists("R")) { eval("
				class R extends RedBean_OODB { }
			"); eval("
				class RD extends RedBean_Decorator { }
			"); } if (strpos($dsn,"embmysql")===0) { $dsn .= ';'; $matches = array(); preg_match('/host=(.+?);/',$dsn,$matches); $matches2 = array(); preg_match('/dbname=(.+?);/',$dsn,$matches2); if (count($matches)==2 && count($matches2)==2) { $db = RedBean_Driver_MySQL::getInstance( $matches[1], $username, $password, $matches2[1] ); } else { throw new Exception("Could not parse MySQL DSN"); } } else{ $db = new Redbean_Driver_PDO( $dsn, $username, $password, null ); } if ($debugmode) { $db->setDebugMode(1); } $oldconn = RedBean_OODB::getInstance()->getInstance()->getDatabase(); $conn = new RedBean_DBAdapter($db); RedBean_OODB::getInstance()->setDatabase( $conn ); RedBean_OODB::getInstance()->setEngine($engine); RedBean_OODB::getInstance()->init( new QueryWriter_MySQL() ); if ($unlockall) { RedBean_OODB::getInstance()->resetAll(); } if ($freeze) { RedBean_OODB::getInstance()->freeze(); } return $oldconn; } public static function kickstartDev( $gen, $dsn, $username="root", $password="", $debug=false ) { self::kickstart( $dsn, $username, $password, false, "innodb", $debug, false); RedBean_OODB::getInstance()->gen( $gen ); return RedBean_OODB::getInstance(); } public static function kickstartFrozen( $gen, $dsn, $username="root", $password="" ) { self::kickstart( $dsn, $username, $password, true, "innodb", false, false); RedBean_OODB::getInstance()->gen( $gen ); return RedBean_OODB::getInstance(); } public static function reconnect( RedBean_DBAdapter $new ) { $old = RedBean_OODB::getInstance()->getInstance()->getDatabase(); RedBean_OODB::getInstance()->getInstance()->setDatabase( $new ); return $old; } }
class RedBean_Sieve { private $vals; private $report = array(); private $succes = true; public static function make( $validations ) { $sieve = new self; $sieve->vals = $validations; return $sieve; } public function valid( RedBean_Decorator $deco ) { foreach($this->vals as $p => $v) { if (class_exists($v)) { $validator = new $v( $deco, $report ); if ($validator instanceof RedBean_Validator) { $message = $validator->check( $deco->$p ); if ($message !== true) { $this->succes = false; } if (!isset($this->report[$v])) { $this->report[$v]=array(); } $this->report[ $v ][ $p ] = $message; } } } return $this->succes; } public function validAndReport( RedBean_Decorator $deco, $key=false ) { $this->valid( $deco ); if ($key) { if (isset($this->report[$key])) { return $this->report[$key]; } } return $this->report; } public function getReport() { return $this->report; } }
class RedBean_Tools { private static $class_definitions; private static $remove_whitespaces; public static function walk_dir( $root, $callback, $recursive = true ) { $root = realpath($root); $dh = @opendir( $root ); if( false === $dh ) { return false; } while(false !== ($file = readdir($dh))) { if( "." == $file || ".." == $file ) { continue; } call_user_func( $callback, "{$root}/{$file}" ); if( false !== $recursive && is_dir( "{$root}/{$file}" )) { Redbean_Tools::walk_dir( "{$root}/{$file}", $callback, $recursive ); } } closedir($dh); return true; } public static function compile($file = '', $removeWhiteSpaces = true) { self::$remove_whitespaces = $removeWhiteSpaces; self::$class_definitions = ''; $base = dirname(__FILE__) . '/'; self::walk_dir($base,'Redbean_Tools::stripClassDefinition'); $content = str_replace("\r\n","\n", ' ' . "\n" . file_get_contents($base . 'license.txt') . "\n" . self::$class_definitions); if(!empty($file)) { file_put_contents($file, $content); } return $content; } private static function stripClassDefinition($file) { if(is_file($file) && substr($file, -4) == '.php') { if(self::$remove_whitespaces) { self::$class_definitions .= "\n" . trim(str_replace('', '', php_strip_whitespace($file))); } else { self::$class_definitions .= "\n" . trim(str_replace('', '', trim(file_get_contents($file)))); } } } }
class RedBean_Validator_AlphaNumeric implements RedBean_Validator { public function check( $v ) { return (bool) preg_match('/^[A-Za-z0-9]+$/', $v); } }
interface RedBean_Validator { public function check( $property ); }