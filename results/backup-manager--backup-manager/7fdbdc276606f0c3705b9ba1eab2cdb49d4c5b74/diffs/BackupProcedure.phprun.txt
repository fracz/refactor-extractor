    public function run($databaseName, $destinationType, $destinationPath)
    {
        $tempFile = $this->getTempFilename();
        $compressedTempFile = "{$tempFile}.gz";

        $this->add(new Commands\Database\DumpDatabase($this->databaseProvider->getType($databaseName), $tempFile, $this->shellProcessor));
        $this->add(new Commands\Archiving\GzipFile($tempFile, $this->shellProcessor));
        $this->add(new Commands\Storage\TransferFile(
            $this->filesystemProvider->getType('local'), $compressedTempFile,
            $this->filesystemProvider->getType($destinationType), $destinationPath
        ));
        $this->add(new Commands\Storage\DeleteFile($this->filesystemProvider->getType('local'), $compressedTempFile));

        $this->execute();
    }

||||||||    public function run($database, $destination, $destinationPath, $compression)
    {
        // begin the life of a new working file
        $workingFile = $this->getWorkingFile();

        // dump the database
        $this->add(new Commands\Database\DumpDatabase(
            // database connection
            $this->database->get($database),
            // output file path
            $workingFile,
            // shell command processor
            $this->shellProcessor
        ));

        // archive the dump
        $compressor = $this->compressor->get($compression);
        $this->add(new Commands\Compression\CompressFile(
            // compression type
            $compressor,
            // source file path
            $workingFile,
            // shell command processor
            $this->shellProcessor
        ));
        $workingFile = $compressor->getCompressedPath($workingFile);

        // upload the archive
        $this->add(new Commands\Storage\TransferFile(
            // source fs and path
            $this->filesystem->get('local'), $workingFile,
            // destination fs and path
            $this->filesystem->get($destination), $destinationPath
        ));

        // cleanup the local archive
        $this->add(new Commands\Storage\DeleteFile(
            // storage fs
            $this->filesystem->get('local'),
            // path
            $workingFile
        ));

        $this->execute();
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)))