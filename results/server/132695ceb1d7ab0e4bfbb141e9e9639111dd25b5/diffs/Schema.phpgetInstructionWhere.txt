    function getInstructionWhere($instruction, $fields_definition = array())
    {
        $where = '';
        if (!empty($instruction['where'])) {
            $where = 'WHERE '.$this->getExpression($instruction['where'], $fields_definition);
        }
        return $where;
    }

    // }}}
    // {{{ createSequence()

    /**
     * Create a sequence
     *
     * @param string $sequence_name name of the sequence to be created
     * @param array  $sequence      multi dimensional array that contains the
     *                              structure and optional data of the table
     * @param bool   $overwrite     if the sequence should be overwritten if it already exists
     *
     * @return bool|MDB2_Error MDB2_OK or error object
     * @access public
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||