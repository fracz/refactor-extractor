||||||||    function clearConfig($varname = null)
    {
        if (isset($varname)) {
            unset($this->config_vars[$varname]);
            return;
        } else {
            $this->config_vars = array();
            return;
        }
    }

}

/**
 * class for the Smarty data object
 *
 * The Smarty data object will hold Smarty variables in the current scope
 *
 * @param object $parent tpl_vars next higher level of Smarty variables
 */
class Smarty_Data extends Smarty_Internal_Data {
    // array of variable objects
    public $tpl_vars = array();
    // back pointer to parent object
    public $parent = null;
    // config vars
    public $config_vars = array();
    // Smarty object
    public $smarty = null;
    /**
     * create Smarty data object
     */
    public function __construct ($_parent = null, $smarty = null)
    {
        $this->smarty = $smarty;
        if (is_object($_parent)) {
            // when object set up back pointer
            $this->parent = $_parent;
        } elseif (is_array($_parent)) {
            // set up variable values
            foreach ($_parent as $_key => $_val) {
                $this->tpl_vars[$_key] = new Smarty_variable($_val);
            }
        } elseif ($_parent != null) {
            throw new SmartyException("Wrong type for template variables");
        }
    }
}
/**
 * class for the Smarty variable object
 *
 * This class defines the Smarty variable object
 */
class Smarty_Variable {
    // template variable
    public $value;
    public $nocache;
    public $scope;
    /**
     * create Smarty variable object
     *
     * @param mixed $value the value to assign
     * @param boolean $nocache if true any output of this variable will be not cached
     * @param boolean $scope the scope the variable will have  (local,parent or root)
     */
    public function __construct ($value = null, $nocache = false, $scope = Smarty::SCOPE_LOCAL)
    {
        $this->value = $value;
        $this->nocache = $nocache;
        $this->scope = $scope;
    }

    public function __toString ()
    {
        return $this->value;
    }
}

/**
 * class for undefined variable object
 *
 * This class defines an object for undefined variable handling
 */
class Undefined_Smarty_Variable {
    // return always false
    public function __get ($name)
    {
        if ($name == 'nocache') {
            return false;
        } else {
            return null;
        }
    }
}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_UNSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_RETURN
                    (NULL))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY))
                (AST_RETURN
                    (NULL))))))