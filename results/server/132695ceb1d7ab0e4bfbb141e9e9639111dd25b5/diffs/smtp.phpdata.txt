    function data($data)
    {
        /*
         * RFC 1870, section 3, subsection 3 states "a value of zero indicates
         * that no fixed maximum message size is in force".  Furthermore, it
         * says that if "the parameter is omitted no information is conveyed
         * about the server's fixed maximum message size".
         */
        if (isset($this->_esmtp['SIZE']) && ($this->_esmtp['SIZE'] > 0)) {
            if (strlen($data) >= $this->_esmtp['SIZE']) {
                $this->disconnect();
                return new PEAR_Error('Message size excedes the server limit');
            }
        }

        /* Quote the data based on the SMTP standards. */
        $this->quotedata($data);

        if (PEAR::isError($error = $this->_put('DATA'))) {
            return $error;
        }
        if (PEAR::isError($error = $this->_parseResponse(354))) {
            return $error;
        }

        if (PEAR::isError($this->_send($data . "\r\n.\r\n"))) {
            return new PEAR_Error('write to socket failed');
        }
        if (PEAR::isError($error = $this->_parseResponse(250))) {
            return $error;
        }

        return true;
    }

    /**
     * Send the SEND FROM: command.
     *
     * @param string The reverse path to send.
     *
     * @return mixed Returns a PEAR_Error with an error message on any
     *               kind of failure, or true on success.
     * @access public
     * @since  1.2.6
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_RETURN
                                (AST_NEW
                                    (
                                        (SCALAR))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))))))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CONST)))||||||||