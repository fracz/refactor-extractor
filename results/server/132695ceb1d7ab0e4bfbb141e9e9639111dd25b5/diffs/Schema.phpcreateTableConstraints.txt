    function createTableConstraints($table_name, $constraints, $overwrite = false)
    {
        if (!$this->db->supports('indexes')) {
            $this->db->debug('Indexes are not supported', __FUNCTION__);
            return MDB2_OK;
        }

        $errorcodes = array(MDB2_ERROR_UNSUPPORTED, MDB2_ERROR_NOT_CAPABLE);
        foreach ($constraints as $constraint_name => $constraint) {

            // Does the foreign key already exist, and if so, should it be overwritten?
            $create_constraint = true;
            $this->db->expectError($errorcodes);
            $current_constraints = $this->db->manager->listTableConstraints($table_name);
            $this->db->popExpect();
            if (PEAR::isError($current_constraints)) {
                if (!MDB2::isError($current_constraints, $errorcodes)) {
                    return $current_constraints;
                }
            } elseif (is_array($current_constraints) && in_array($constraint_name, $current_constraints)) {
                if (!$overwrite) {
                    $this->db->debug('Foreign key already exists: '.$constraint_name, __FUNCTION__);
                    $create_constraint = false;
                } else {
                    $this->db->debug('Preparing to overwrite foreign key: '.$constraint_name, __FUNCTION__);
                    $result = $this->db->manager->dropConstraint($table_name, $constraint_name);
                    if (PEAR::isError($result)) {
                        return $result;
                    }
                }
            }

            // Should the foreign key be created?
            if ($create_constraint) {
                $result = $this->db->manager->createConstraint($table_name, $constraint_name, $constraint);
                if (PEAR::isError($result)) {
                    return $result;
                }
            }
        }
        return MDB2_OK;
    }

    // }}}
    // {{{ createTable()

    /**
     * Create a table and inititialize the table if data is available
     *
     * @param string $table_name name of the table to be created
     * @param array  $table      multi dimensional array that contains the
     *                           structure and optional data of the table
     * @param bool   $overwrite  if the table/index should be overwritten if it already exists
     * @param array  $options    an array of options to be passed to the database specific driver
     *                           version of MDB2_Driver_Manager_Common::createTable().
     *
     * @return bool|MDB2_Error MDB2_OK or error object
     * @access public
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (AST_MAGIC_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CONST)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))
                                (
                                    (AST_RETURN
                                        (AST_VAR)))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (AST_MAGIC_CONST)))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (AST_MAGIC_CONST)))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_VAR)))
                                            (
                                                (AST_RETURN
                                                    (AST_VAR)))))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_RETURN
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||