    function writeTestClass($destination = './', $addTest = TRUE) {
        // Check for something to write to file.
        if (!isset($this->testClass)) {
            $this->_handleErrors('Noting to write.', PHPUS_WARNING);
            return;
        }

        // Open the destination file.
        $fp = fopen($destination . $this->className . 'Test.php', 'w');
        fwrite($fp, "<?php\n");

        // Write the test class.
        fwrite($fp, $this->testClass);

        // Add the call to test the class in the file if we were asked to.
        if ($addTest) {
            fwrite($fp, $this->_createTest());
        }

        // Close the file.
        fwrite($fp, "?>\n");
        fclose($fp);
    }

    /**
     * Error handler.
     *
     * This method should be rewritten to use the prefered error
     * handling method. (PEAR_ErrorStack)
     *
     * @access private
     * @param  string  $message The error message.
     * @param  integer $type    An indication of the severity of the error.
     * @return void             Code may cause PHP to exit.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR))
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR))))||||||||