    function _mkpath($path, $mode = 0700)
    {
        static $depth = 0;

        /* Guard against potentially infinite recursion. */
        if ($depth++ > 25) {
            trigger_error("_mkpath(): Maximum recursion depth (25) exceeded",
                          E_USER_WARNING);
            return false;
        }

        /* We're only interested in the directory component of the path. */
        $path = dirname($path);

        /* If the directory already exists, return success immediately. */
        if (is_dir($path)) {
            $depth = 0;
            return true;
        }

        /*
         * In order to understand recursion, you must first understand
         * recursion ...
         */
        if ($this->_mkpath($path, $mode) === false) {
            return false;
        }

        return @mkdir($path, $mode);
    }

    /**
     * Opens the log file for output.  If the specified log file does not
     * already exist, it will be created.  By default, new log entries are
     * appended to the end of the log file.
     *
     * This is implicitly called by log(), if necessary.
     *
     * @access public
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_POST_INC
                    (AST_VAR))
                (SCALAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR))))))||||||||