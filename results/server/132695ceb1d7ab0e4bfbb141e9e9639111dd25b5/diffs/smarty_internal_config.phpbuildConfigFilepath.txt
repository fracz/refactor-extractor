||||||||    public function buildConfigFilepath ()
    {
        foreach((array)$this->smarty->config_dir as $_config_dir) {
            if (strpos('/\\', substr($_config_dir, -1)) === false) {
                $_config_dir .= DS;
            }

            $_filepath = $_config_dir . $this->config_resource_name;
            if (file_exists($_filepath))
                return $_filepath;
        }
        // check for absolute path
        if (file_exists($this->config_resource_name))
            return $this->config_resource_name;
        // no tpl file found
        throw new SmartyException("Unable to load config file \"{$this->config_resource_name}\"");
        return false;
    }
    /**
     * Read config file source
     *
     * @return string content of source file
     */
    /**
     * Returns the template source code
     *
     * The template source is being read by the actual resource handler
     *
     * @return string the template source
     */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_FOREACH
        (AST_CAST
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_UNARY_OP
                                            (SCALAR))))))
                        (AST_CONST))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONST)))