    function _sortPkgDepsRev($p1, $p2)
    {
        $p1name = $p1['info']['package'];
        $p2name = $p2['info']['package'];
        $p1deps = $this->_getRevPkgDeps($p1);
        $p2deps = $this->_getRevPkgDeps($p2);
        if (!count($p1deps) && !count($p2deps)) {
            return 0; // order makes no difference
        }
        if (!count($p1deps)) {
            return 1; // package 2 has dependencies, package 1 doesn't
        }
        if (!count($p2deps)) {
            return -1; // package 2 has dependencies, package 1 doesn't
        }
        // both have dependencies
        if (in_array($p1name, $p2deps)) {
            return 1; // put package 1 last
        }
        if (in_array($p2name, $p1deps)) {
            return -1; // put package 2 last
        }
        if ($this->_removedDependency($p1name, $p2name)) {
            return 1; // put package 1 last: package 2 depends on packages that depend on package 1
        }
        if ($this->_removedDependency($p2name, $p1name)) {
            return -1; // put package 2 last: package 1 depends on packages that depend on package 2
        }
        // doesn't really matter if neither depends on the other
        return 0;
    }

    // }}}
    // {{{ _getPkgDeps()

    /**
     * get an array of package dependency names
     * @param array
     * @return array
     * @access private
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_UNARY_OP
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_UNARY_OP
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_UNARY_OP
                        (SCALAR))))))
    (AST_RETURN
        (SCALAR)))||||||||