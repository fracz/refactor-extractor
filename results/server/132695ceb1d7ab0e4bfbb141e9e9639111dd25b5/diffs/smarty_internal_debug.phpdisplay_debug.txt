||||||||	public static function display_debug($obj)
	{
		// prepare information of assigned variables
		$ptr = self::get_debug_vars($obj);
		if ($obj instanceof Smarty) {
			$smarty = $obj;
		} else {
			$smarty = $obj->smarty;
		}
		$_assigned_vars = $ptr->tpl_vars;
		ksort($_assigned_vars);
		$_config_vars = $ptr->config_vars;
		ksort($_config_vars);
		$ldelim = $smarty->left_delimiter;
		$rdelim = $smarty->right_delimiter;
		$smarty->left_delimiter = '{';
		$smarty->right_delimiter = '}';
		$_template = new Smarty_Internal_Template ($smarty->debug_tpl, $smarty);
		$_template->caching = false;
		$_template->force_compile = false;
		$_template->disableSecurity();
		$_template->cache_id = null;
		$_template->compile_id = null;
		if ($obj instanceof Smarty_Internal_Template) {
			$_template->assign('template_name',$obj->resource_type.':'.$obj->resource_name);
		}
		if ($obj instanceof Smarty) {
			$_template->assign('template_data', self::$template_data);
		} else {
			$_template->assign('template_data', null);
		}
		$_template->assign('assigned_vars', $_assigned_vars);
		$_template->assign('config_vars', $_config_vars);
		$_template->assign('execution_time', microtime(true) - $smarty->start_time);
		echo $_template->getRenderedTemplate();
		$smarty->left_delimiter = $ldelim;
		$smarty->right_delimiter = $rdelim;
	}
	/*
	* Recursively gets variables from all template/data scopes
	*/
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_STATIC_PROP)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CONST)))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))