	function setUp()
	{
		// reset backend
		\OC_User::clearBackends();
		\OC_User::useBackend('database');

		\OC_FileProxy::$enabled = false;

		// set content for encrypting / decrypting in tests
		$this->dataLong = file_get_contents(realpath(dirname(__FILE__) . '/../lib/crypt.php'));
		$this->dataShort = 'hats';
		$this->dataUrl = realpath(dirname(__FILE__) . '/../lib/crypt.php');
		$this->legacyData = realpath(dirname(__FILE__) . '/legacy-text.txt');
		$this->legacyEncryptedData = realpath(dirname(__FILE__) . '/legacy-encrypted-text.txt');
		$this->randomKey = Encryption\Crypt::generateKey();

		$keypair = Encryption\Crypt::createKeypair();
		$this->genPublicKey = $keypair['publicKey'];
		$this->genPrivateKey = $keypair['privateKey'];

		$this->view = new \OC_FilesystemView('/');

		\OC_User::setUserId('admin');
		$this->userId = 'admin';
		$this->pass = 'admin';

		$userHome = \OC_User::getHome($this->userId);
		$this->dataDir = str_replace('/' . $this->userId, '', $userHome);

		// Filesystem related hooks
		\OCA\Encryption\Helper::registerFilesystemHooks();

		\OC_FileProxy::register(new OCA\Encryption\Proxy());

		// remember files_trashbin state
		$this->stateFilesTrashbin = OC_App::isEnabled('files_trashbin');

		// we don't want to tests with app files_trashbin enabled
		\OC_App::disable('files_trashbin');

		\OC_Util::tearDownFS();
		\OC_User::setUserId('');
		\OC\Files\Filesystem::tearDown();
		\OC_Util::setupFS($this->userId);
		\OC_User::setUserId($this->userId);

		$params['uid'] = $this->userId;
		$params['password'] = $this->pass;
		OCA\Encryption\Hooks::login($params);
	}

||||||||	function setUp() {
		// set content for encrypting / decrypting in tests
		$this->dataLong = file_get_contents( realpath( dirname( __FILE__ ) . '/../lib/crypt.php' ) );
		$this->dataShort = 'hats';
		$this->dataUrl = realpath( dirname( __FILE__ ) . '/../lib/crypt.php' );
		$this->legacyData = realpath( dirname( __FILE__ ) . '/legacy-text.txt' );
		$this->legacyEncryptedData = realpath( dirname( __FILE__ ) . '/legacy-encrypted-text.txt' );
		$this->randomKey = Encryption\Crypt::generateKey();

		$keypair = Encryption\Crypt::createKeypair();
		$this->genPublicKey = $keypair['publicKey'];
		$this->genPrivateKey = $keypair['privateKey'];

		$this->view = new \OC_FilesystemView( '/' );

		\OC_User::setUserId( 'admin' );
		$this->userId = 'admin';
		$this->pass = 'admin';

		$userHome = \OC_User::getHome( $this->userId );
		$this->dataDir = str_replace( '/' . $this->userId, '', $userHome );

		// remember files_trashbin state
		$this->stateFilesTrashbin = OC_App::isEnabled( 'files_trashbin' );

		// we don't want to tests with app files_trashbin enabled
		\OC_App::disable( 'files_trashbin' );
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_MAGIC_CONST)))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (AST_VAR))))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_PROP
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_MAGIC_CONST)))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR))))