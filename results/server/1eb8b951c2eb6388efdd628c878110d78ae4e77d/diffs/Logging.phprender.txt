	public function render() {
		$logType = $this->config->getSystemValue('log_type', 'file');
		$showLog = ($logType === 'file' || $logType === 'owncloud');

		$numEntriesToLoad = 5;
		$entries = LogFile::getEntries($numEntriesToLoad + 1);
		$entriesRemaining = count($entries) > $numEntriesToLoad;
		$entries = array_slice($entries, 0, $numEntriesToLoad);

		$logFileExists = file_exists(LogFile::getLogFilePath()) ;
		$logFileSize = $logFileExists ? filesize(LogFile::getLogFilePath()) : 0;

		$parameters = [
			'loglevel'         => $this->config->getSystemValue('loglevel', 2),
			'entries'          => $entries,
			'entriesremain'    => $entriesRemaining,
			'doesLogFileExist' => $logFileExists,
			'logFileSize'      => $logFileSize,
			'showLog'          => $showLog,
		];

		$form = new Template('settings', 'admin/logging');
		foreach ($parameters as $key => $value) {
			$form->assign($key, $value);
		}
		return $form;
	}

	/**
	 * @return string the section ID, e.g. 'sharing'
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CALL
                (
                    (AST_STATIC_CALL)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||