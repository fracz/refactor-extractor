	public static function trashbinPreviewRouter() {
		if(!\OC_App::isEnabled('files_trashbin')){
			exit;
		}
		\OC_Util::checkLoggedIn();

		$file = '';
		$maxX = 0;
		$maxY = 0;
		$scalingup = true;

		if(array_key_exists('file', $_GET)) $file = (string) urldecode($_GET['file']);
		if(array_key_exists('x', $_GET)) $maxX = (int) $_GET['x'];
		if(array_key_exists('y', $_GET)) $maxY = (int) $_GET['y'];
		if(array_key_exists('scalingup', $_GET)) $scalingup = (bool) $_GET['scalingup'];

		if($file !== '' && $maxX !== 0 && $maxY !== 0) {
			try{
				$preview = new Preview(\OC_User::getUser(), 'files_trashbin/files', $file, $maxX, $maxY, $scalingup);
				$preview->showPreview();
			}catch(\Exception $e) {
				\OC_Response::setStatus(404);
				\OC_Log::write('core', $e->getmessage(), \OC_Log::ERROR);
				exit;
			}
		}else{
			\OC_Response::setStatus(404);
			exit;
		}
	}

||||||||	public static function trashbinPreviewRouter() {
		\OC_Util::checkLoggedIn();

		if(!\OC_App::isEnabled('files_trashbin')){
			exit;
		}

		$file = array_key_exists('file', $_GET) ? (string) urldecode($_GET['file']) : '';
		$maxX = array_key_exists('x', $_GET) ? (int) $_GET['x'] : '44';
		$maxY = array_key_exists('y', $_GET) ? (int) $_GET['y'] : '44';
		$scalingup = array_key_exists('scalingup', $_GET) ? (bool) $_GET['scalingup'] : true;

		if($file === '') {
			\OC_Response::setStatus(400); //400 Bad Request
			\OC_Log::write('core-preview', 'No file parameter was passed', \OC_Log::DEBUG);
			self::showErrorPreview();
			exit;
		}

		if($maxX === 0 || $maxY === 0) {
			\OC_Response::setStatus(400); //400 Bad Request
			\OC_Log::write('core-preview', 'x and/or y set to 0', \OC_Log::DEBUG);
			self::showErrorPreview();
			exit;
		}

		try{
			$preview = new Preview(\OC_User::getUser(), 'files_trashbin/files');
			$preview->setFile($file);
			$preview->setMaxX($maxX);
			$preview->setMaxY($maxY);
			$preview->setScalingUp($scalingup);

			$preview->showPreview();
		}catch(\Exception $e) {
			\OC_Response::setStatus(500);
			\OC_Log::write('core', $e->getmessage(), \OC_Log::ERROR);
			self::showErrorPreview();
			exit;
		}
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_EXIT
                    (NULL)))))
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_STATIC_CALL)
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_CLASS_CONST
                                            (SCALAR))))
                                (AST_EXIT
                                    (NULL)))))
                    (NULL))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (NULL))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_EXIT
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_CAST
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_STATIC_CALL)
                (AST_EXIT
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_STATIC_CALL)
                (AST_EXIT
                    (NULL)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_STATIC_CALL)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_STATIC_CALL)
                    (AST_EXIT
                        (NULL)))))
        (NULL)))