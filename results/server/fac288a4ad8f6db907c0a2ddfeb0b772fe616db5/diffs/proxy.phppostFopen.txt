    public function postFopen( $path, &$result ){

        if ( !$result ) {

			return $result;

		}

        // Reformat path for use with OC_FSV
		$path_split = explode( '/', $path );
		$path_f = implode( '/', array_slice( $path_split, 3 ) );

		// Disable encryption proxy to prevent recursive calls
		\OC_FileProxy::$enabled = false;

		$meta = stream_get_meta_data( $result );

		$view = new \OC_FilesystemView( '' );

		$util = new Util( $view, \OCP\USER::getUser());

		// If file is already encrypted, decrypt using crypto protocol
		if (
			Crypt::mode() == 'server'
			&& $util->isEncryptedPath( $path )
		) {

			// Close the original encrypted file
			fclose( $result );

			// Open the file using the crypto stream wrapper
			// protocol and let it do the decryption work instead
			$result = fopen( 'crypt://' . $path_f, $meta['mode'] );


		} elseif (
			self::shouldEncrypt( $path )
			and $meta ['mode'] != 'r'
			and $meta['mode'] != 'rb'
		) {
		// If the file is not yet encrypted, but should be
		// encrypted when it's saved (it's not read only)

		// NOTE: this is the case for new files saved via WebDAV

			if (
			$view->file_exists( $path )
			and $view->filesize( $path ) > 0
			) {
				$x = $view->file_get_contents( $path );

				$tmp = tmpfile();

// 				// Make a temporary copy of the original file
// 				\OCP\Files::streamCopy( $result, $tmp );
//
// 				// Close the original stream, we'll return another one
// 				fclose( $result );
//
// 				$view->file_put_contents( $path_f, $tmp );
//
// 				fclose( $tmp );

			}

            $result = fopen( 'crypt://'.$path_f, $meta['mode'] );

		}

		// Re-enable the proxy
		\OC_FileProxy::$enabled = true;

		return $result;

	}

||||||||    public function postFopen( $path, &$result ){

        if ( !$result ) {

			return $result;

		}

        // Reformat path for use with OC_FSV
		$path_split = explode( '/', $path );
		$path_f = implode( '/', array_slice( $path_split, 3 ) );

		// Disable encryption proxy to prevent recursive calls
        $proxyStatus = \OC_FileProxy::$enabled;
        \OC_FileProxy::$enabled = false;

        $meta = stream_get_meta_data( $result );

		$view = new \OC_FilesystemView( '' );

		$util = new Util( $view, \OCP\USER::getUser());

		// If file is already encrypted, decrypt using crypto protocol
		if (
			Crypt::mode() == 'server'
			&& $util->isEncryptedPath( $path )
		) {

			// Close the original encrypted file
			fclose( $result );

			// Open the file using the crypto stream wrapper
			// protocol and let it do the decryption work instead
			$result = fopen( 'crypt://' . $path_f, $meta['mode'] );


		} elseif (
			self::shouldEncrypt( $path )
			and $meta ['mode'] != 'r'
			and $meta['mode'] != 'rb'
		) {
		// If the file is not yet encrypted, but should be
		// encrypted when it's saved (it's not read only)

		// NOTE: this is the case for new files saved via WebDAV

//			if (
//			$view->file_exists( $path )
//			and $view->filesize( $path ) > 0
//			) {
//				$x = $view->file_get_contents( $path );
//
//				$tmp = tmpfile();

// 				// Make a temporary copy of the original file
// 				\OCP\Files::streamCopy( $result, $tmp );
//
// 				// Close the original stream, we'll return another one
// 				fclose( $result );
//
// 				$view->file_put_contents( $path_f, $tmp );
//
// 				fclose( $tmp );

//			}

            $result = fopen( 'crypt://'.$path_f, $meta['mode'] );

		}

		// Re-enable the proxy
		\OC_FileProxy::$enabled = $proxyStatus;

		return $result;

	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_STATIC_CALL)
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_STATIC_CALL)
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))