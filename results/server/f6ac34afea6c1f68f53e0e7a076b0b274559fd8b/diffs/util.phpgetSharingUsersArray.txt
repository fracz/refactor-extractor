	public function getSharingUsersArray( $sharingEnabled, $filePath ) {

		// Check if key recovery is enabled
		$recoveryEnabled = $this->recoveryEnabled();

		// Make sure that a share key is generated for the owner too
		list($owner, $ownerPath) = $this->getUidAndFilename($filePath);

		//$userIds = array( $this->userId );
		$userIds = array();

		if ( $sharingEnabled ) {

			// Find out who, if anyone, is sharing the file
			$shareUids = \OCP\Share::getUsersSharingFile( $ownerPath, $owner,true, true, true );

			$userIds = array_merge( $userIds, $shareUids );

		}

		// If recovery is enabled, add the
		// Admin UID to list of users to share to
		if ( $recoveryEnabled ) {

			// FIXME: Create a separate admin user purely for recovery, and create method in util for fetching this id from DB?
			$adminUid = 'recoveryAdmin';

			$userIds[] = $adminUid;

		}

		// Remove duplicate UIDs
		$uniqueUserIds = array_unique ( $userIds );

		return $uniqueUserIds;

	}

	/**
	 * @brief get uid of the owners of the file and the path to the file
	 * @param $path Path of the file to check
	 * @note $shareFilePath must be relative to data/UID/files. Files
	 *       relative to /Shared are also acceptable
	 * @return array
	 */
||||||||	public function getSharingUsersArray( $sharingEnabled, $filePath, $currentUserId = false ) {

		// Check if key recovery is enabled
		$recoveryEnabled = $this->recoveryEnabled();

		// Make sure that a share key is generated for the owner too
		list($owner, $ownerPath) = $this->getUidAndFilename($filePath);

		//$userIds = array( $this->userId );
		$userIds = array();

		if ( $sharingEnabled ) {

			// Find out who, if anyone, is sharing the file
			$shareUids = \OCP\Share::getUsersSharingFile( $ownerPath, $owner,true, true, true );

			$userIds = array_merge( $userIds, $shareUids );

		}

		// If recovery is enabled, add the
		// Admin UID to list of users to share to
		if ( $recoveryEnabled ) {

			// FIXME: Create a separate admin user purely for recovery, and create method in util for fetching this id from DB?
			$adminUid = 'recoveryAdmin';

			$userIds[] = $adminUid;

		}

        // add current user if given
        if($currentUserId != false) {
            $userIds[] = $currentUserId;
        }

		// Remove duplicate UIDs
		$uniqueUserIds = array_unique ( $userIds );

		return $uniqueUserIds;

	}

	/**
	 * @brief get uid of the owners of the file and the path to the file
	 * @param $path Path of the file to check
	 * @note $shareFilePath must be relative to data/UID/files. Files
	 *       relative to /Shared are also acceptable
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))