	function testSymmetricStreamEncryptLongFileContent() {

		// Generate a a random filename
		$filename = 'tmp-'.time().'.test';

		// Save long data as encrypted file using stream wrapper
		$cryptedFile = file_put_contents( 'crypt://' . $filename, $this->dataLong.$this->dataLong );

		// Test that data was successfully written
		$this->assertTrue( is_int( $cryptedFile ) );

		// Disable encryption proxy to prevent recursive calls
        $proxyStatus = \OC_FileProxy::$enabled;
        \OC_FileProxy::$enabled = false;

        // Get file contents without using any wrapper to get it's actual contents on disk
        $retreivedCryptedFile = $this->view->file_get_contents($this->userId . '/files/' . $filename);

        // Re-enable proxy - our work is done
        \OC_FileProxy::$enabled = $proxyStatus;


        // Check that the file was encrypted before being written to disk
		$this->assertNotEquals( $this->dataLong.$this->dataLong, $retreivedCryptedFile );

		// Manuallly split saved file into separate IVs and encrypted chunks
		$r = preg_split('/(00iv00.{16,18})/', $retreivedCryptedFile, NULL, PREG_SPLIT_DELIM_CAPTURE);

		//print_r($r);

		// Join IVs and their respective data chunks
		$e = array( $r[0].$r[1], $r[2].$r[3], $r[4].$r[5], $r[6].$r[7], $r[8].$r[9], $r[10].$r[11], $r[12].$r[13] );//.$r[11], $r[12].$r[13], $r[14] );

		//print_r($e);

        // Get the encrypted keyfile
        $encKeyfile = Encryption\Keymanager::getFileKey( $this->view, $this->userId, $filename );

        // Attempt to fetch the user's shareKey
        $shareKey = Encryption\Keymanager::getShareKey( $this->view, $this->userId, $filename );

        // get session
        $session = new Encryption\Session( $this->view );

        // get private key
        $privateKey = $session->getPrivateKey( $this->userId );

        // Decrypt keyfile with shareKey
        $plainKeyfile = Encryption\Crypt::multiKeyDecrypt( $encKeyfile, $shareKey, $privateKey );

		// Set var for reassembling decrypted content
		$decrypt = '';

		// Manually decrypt chunk
		foreach ($e as $e) {

			$chunkDecrypt = Encryption\Crypt::symmetricDecryptFileContent( $e, $plainKeyfile );

			// Assemble decrypted chunks
			$decrypt .= $chunkDecrypt;

		}

		$this->assertEquals( $this->dataLong.$this->dataLong, $decrypt );

		// Teardown

		$this->view->unlink( $filename );

		Encryption\Keymanager::deleteFileKey( $this->view, $this->userId, $filename );

	}

	/**
	 * @brief Test that data that is read by the crypto stream wrapper
	 */
||||||||	function testSymmetricStreamEncryptLongFileContent() {

		// Generate a a random filename
		$filename = 'tmp-'.time().'.test';

		// Save long data as encrypted file using stream wrapper
		$cryptedFile = file_put_contents( 'crypt://' . $filename, $this->dataLong.$this->dataLong );

		// Test that data was successfully written
		$this->assertTrue( is_int( $cryptedFile ) );

		// Disable encryption proxy to prevent recursive calls
        $proxyStatus = \OC_FileProxy::$enabled;
        \OC_FileProxy::$enabled = false;

        // Get file contents without using any wrapper to get it's actual contents on disk
        $retreivedCryptedFile = $this->view->file_get_contents($this->userId . '/files/' . $filename);

        // Re-enable proxy - our work is done
        \OC_FileProxy::$enabled = $proxyStatus;


        // Check that the file was encrypted before being written to disk
		$this->assertNotEquals( $this->dataLong.$this->dataLong, $retreivedCryptedFile );

		// Manuallly split saved file into separate IVs and encrypted chunks
		$r = preg_split('/(00iv00.{16,18})/', $retreivedCryptedFile, NULL, PREG_SPLIT_DELIM_CAPTURE);

		//print_r($r);

		// Join IVs and their respective data chunks
		$e = array( $r[0].$r[1], $r[2].$r[3], $r[4].$r[5], $r[6].$r[7], $r[8].$r[9], $r[10].$r[11], $r[12].$r[13] );//.$r[11], $r[12].$r[13], $r[14] );

		//print_r($e);

        // Get the encrypted keyfile
        $encKeyfile = Encryption\Keymanager::getFileKey( $this->view, $this->userId, $filename );

        // Attempt to fetch the user's shareKey
        $shareKey = Encryption\Keymanager::getShareKey( $this->view, $this->userId, $filename );

        // get session
        $session = new Encryption\Session( $this->view );

        // get private key
        $privateKey = $session->getPrivateKey( $this->userId );

        // Decrypt keyfile with shareKey
        $plainKeyfile = Encryption\Crypt::multiKeyDecrypt( $encKeyfile, $shareKey, $privateKey );

		// Set var for reassembling decrypted content
		$decrypt = '';

		// Manually decrypt chunk
		foreach ($e as $e) {

			$chunkDecrypt = Encryption\Crypt::symmetricDecryptFileContent( $e, $plainKeyfile );

			// Assemble decrypted chunks
			$decrypt .= $chunkDecrypt;

		}

		$this->assertEquals( $this->dataLong.$this->dataLong, $decrypt );

		// Teardown

		$this->view->unlink( $this->userId . '/files/' . $filename );

		Encryption\Keymanager::deleteFileKey( $this->view, $this->userId, $filename );

	}

	/**
	 * @brief Test that data that is read by the crypto stream wrapper
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_VAR))))