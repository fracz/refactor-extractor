	private static function shouldEncrypt($path, $mode = 'w') {

		$userId = Helper::getUser($path);

		// don't call the crypt stream wrapper, if...
		if (
				\OCP\App::isEnabled('files_encryption') === false // encryption is disabled
				|| Crypt::mode() !== 'server'   // we are not in server-side-encryption mode
				|| strpos($path, '/' . $userId . '/files') !== 0 // path is not in files/
				|| substr($path, 0, 8) === 'crypt://' // we are already in crypt mode
		) {
			return false;
		}

		$view = new \OC_FilesystemView('');
		$util = new Util($view, $userId);

		// for write operation we always encrypt the files, for read operations
		// we check if the existing file is encrypted or not decide if it needs to
		// decrypt it.
		if (($mode !== 'r' && $mode !== 'rb') || $util->isEncryptedPath($path)) {
			return true;
		}

		return false;
	}

	/**
	 * @param $path
	 * @param $data
	 * @return bool
	 */
||||||||	private static function shouldEncrypt($path, $mode = 'w') {

		$userId = Helper::getUser($path);
		$session = new Session(new \OC\Files\View());

		// don't call the crypt stream wrapper, if...
		if (
				$session->getInitialized() !== Session::INIT_SUCCESSFUL // encryption successful initialized
				|| Crypt::mode() !== 'server'   // we are not in server-side-encryption mode
				|| strpos($path, '/' . $userId . '/files') !== 0 // path is not in files/
				|| substr($path, 0, 8) === 'crypt://' // we are already in crypt mode
		) {
			return false;
		}

		$view = new \OC_FilesystemView('');
		$util = new Util($view, $userId);

		// for write operation we always encrypt the files, for read operations
		// we check if the existing file is encrypted or not decide if it needs to
		// decrypt it.
		if (($mode !== 'r' && $mode !== 'rb') || $util->isEncryptedPath($path)) {
			return true;
		}

		return false;
	}

	/**
	 * @param $path
	 * @param $data
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_CONST))
                        (AST_BINARY_OP
                            (AST_STATIC_CALL)
                            (SCALAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_NEW))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_STATIC_CALL)
                            (SCALAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))