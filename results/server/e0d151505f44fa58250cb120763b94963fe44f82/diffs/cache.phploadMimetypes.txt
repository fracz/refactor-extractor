	public function loadMimetypes() {
		self::$mimetypeIds = self::$mimetypes = array();

		$result = \OC_DB::executeAudited('SELECT `id`, `mimetype` FROM `*PREFIX*mimetypes`', array());
		if ($result) {
			while ($row = $result->fetchRow()) {
				self::$mimetypeIds[$row['mimetype']] = $row['id'];
				self::$mimetypes[$row['id']] = $row['mimetype'];
			}
		}
	}

	/**
	 * get the stored metadata of a file or folder
	 *
	 * @param string /int $file
	 * @return array|false
	 */
||||||||	public function loadMimetypes() {
		self::$mimetypeIds = self::$mimetypes = array();

		$result = \OC_DB::executeAudited('SELECT `id`, `mimetype` FROM `*PREFIX*mimetypes`', array());
		if ($result) {
			while ($row = $result->fetchRow()) {
				self::$mimetypeIds[$row['mimetype']] = $row['id'];
				self::$mimetypes[$row['id']] = $row['mimetype'];
			}
		}
	}

	/**
	 * get the stored metadata of a file or folder
	 *
	 * the returned cache entry contains at least the following values:
	 * [
	 * 		'fileid' => int, the numeric id of a file (see getId)
	 * 		'storage' => int, the numeric id of the storage the file is stored on
	 * 		'path' => string, the path of the file within the storage ('foo/bar.txt')
	 * 		'name' => string, the basename of a file ('bar.txt)
	 * 		'mimetype' => string, the full mimetype of the file ('text/plain')
	 * 		'mimepart' => string, the first half of the mimetype ('text')
	 * 		'size' => int, the size of the file or folder in bytes
	 * 		'mtime' => int, the last modified date of the file as unix timestamp as shown in the ui
	 * 		'storage_mtime' => int, the last modified date of the file as unix timestamp as stored on the storage
	 * 			Note that when a file is updated we also update the mtime of all parent folders to make it visible to the user which folder has had updates most recently
	 * 			This can differ from the mtime on the underlying storage which usually only changes when a direct child is added, removed or renamed
	 * 		'etag' => string, the etag for the file
	 * 			An etag is used for change detection of files and folders, an etag of a file changes whenever the content of the file changes
	 * 			Etag for folders change whenever a file in the folder has changed
	 * 		'permissions' int, the permissions for the file stored as bitwise combination of \OCP\PERMISSION_READ, \OCP\PERMISSION_CREATE
	 * 			\OCP\PERMISSION_UPDATE, \OCP\PERMISSION_DELETE and \OCP\PERMISSION_SHARE
	 * ]
	 *
	 * @param string | int $file either the path of a file or folder or the file id for a file or folder
	 * @return array|false the cache entry as array of false if the file is not found in the cache
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ASSIGN
            (AST_STATIC_PROP)
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_ARRAY))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_WHILE
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ASSIGN
            (AST_STATIC_PROP)
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_ARRAY))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_WHILE
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))))))