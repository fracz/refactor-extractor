||||||||	function isAllowed($role = self::ALL, $resource = self::ALL, $privilege = self::ALL)
	{
		return $role === 'admin' && strpos($resource, 'jany') === FALSE;
	}

}


// delete cookies
$_COOKIE = array();

$user = new User;

// guest
echo "isAuthenticated?\n";
Debug::dump($user->isAuthenticated());

echo "getRoles()\n";
Debug::dump($user->getRoles());

echo "is admin?\n";
Debug::dump($user->isInRole('admin'));

echo "is guest?\n";
Debug::dump($user->isInRole('guest'));


// authenticated
$handler = new AuthenticationHandler;
$user->setAuthenticationHandler($handler);

echo "authenticate as john\n";
$user->authenticate('john', 'xxx');

echo "isAuthenticated?\n";
Debug::dump($user->isAuthenticated());

echo "getRoles()\n";
Debug::dump($user->getRoles());

echo "is admin?\n";
Debug::dump($user->isInRole('admin'));

echo "is guest?\n";
Debug::dump($user->isInRole('guest'));



// authorization
try {
	echo "authorize without handler\n";
	Debug::dump($user->isAllowed('delete_file'));
} catch (Exception $e) {
	echo get_class($e), ': ', $e->getMessage(), "\n\n";
}

$handler = new AuthorizationHandler;
$user->setAuthorizationHandler($handler);

echo "isAllowed('delete_file')?\n";
Debug::dump($user->isAllowed('delete_file'));

echo "isAllowed('sleep_with_jany')?\n";
Debug::dump($user->isAllowed('sleep_with_jany'));


// sign out
echo "signing out...\n";
$user->signOut(FALSE);

echo "isAllowed('delete_file')?\n";
Debug::dump($user->isAllowed('delete_file'));||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST)))))