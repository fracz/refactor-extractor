||||||||function
initForeignKeys(){throw
new
NotImplementedException;}}class
DibiColumnInfo
extends
DibiObject{private$driver;private$info;public
function
__construct(IDibiDriver$driver,array$info){$this->driver=$driver;$this->info=$info;}public
function
getName(){return$this->info['name'];}public
function
getTable(){if(empty($this->info['table'])){throw
new
DibiException("Table name is unknown.");}return
new
DibiTableInfo($this->driver,array('name'=>$this->info['table']));}public
function
getType(){return
isset($this->info['type'])?$this->info['type']:NULL;}public
function
getNativeType(){return
isset($this->info['nativetype'])?$this->info['nativetype']:NULL;}public
function
getSize(){return
isset($this->info['size'])?(int)$this->info['size']:NULL;}public
function
getPrecision(){return
isset($this->info['precision'])?(int)$this->info['precision']:NULL;}public
function
getScale(){return
isset($this->info['scale'])?(int)$this->info['scale']:NULL;}public
function
isNullable(){return!empty($this->info['nullable']);}public
function
isAutoIncrement(){return!empty($this->info['autoincrement']);}public
function
getDefaultValue(){return
isset($this->info['default'])?$this->info['default']:NULL;}}class
DibiForeignKeyInfo
extends
DibiObject{private$name;private$references;public
function
__construct($name,array$references){$this->name=$name;$this->references=$references;}public
function
getName(){return$this->name;}public
function
getReferences(){return$this->references;}}class
DibiIndexInfo
extends
DibiObject{private$name;private$columns;private$unique;public
function
__construct($name,array$columns,$unique){$this->name=$name;$this->columns=$columns;$this->unique=(bool)$unique;}public
function
getName(){return$this->name;}public
function
getColumns(){return$this->columns;}public
function
isUnique(){return$this->unique;}}class
dibi{const
FIELD_TEXT='s',FIELD_BINARY='bin',FIELD_BOOL='b',FIELD_INTEGER='i',FIELD_FLOAT='f',FIELD_DATE='d',FIELD_DATETIME='t',IDENTIFIER='n';const
VERSION='0.9',REVISION='153 released on 2008/10/10 19:39:33';const
RESULT_WITH_TABLES='resultWithTables';private
static$registry=array();private
static$connection;private
static$substs=array();private
static$substFallBack;private
static$handlers=array();public
static$sql;public
static$elapsedTime;public
static$totalTime;public
static$numOfQueries=0;public
static$defaultDriver='mysql';final
public
function
__construct(){throw
new
LogicException("Cannot instantiate static class ".get_class($this));}public
static
function
connect($config=array(),$name=0){return
self::$connection=self::$registry[$name]=new
DibiConnection($config,$name);}public
static
function
disconnect(){self::getConnection()->disconnect();}public
static
function
isConnected(){return(self::$connection!==NULL)&&self::$connection->isConnected();}public
static
function
getConnection($name=NULL){if($name===NULL){if(self::$connection===NULL){throw
new
DibiException('Dibi is not connected to database.');}return
self::$connection;}if(!isset(self::$registry[$name])){throw
new
DibiException("There is no connection named '$name'.");}return
self::$registry[$name];}public
static
function
activate($name){self::$connection=self::getConnection($name);}public
static
function
query($args){$args=func_get_args();return
self::getConnection()->query($args);}public
static
function
nativeQuery($sql){return
self::getConnection()->nativeQuery($sql);}public
static
function
test($args){$args=func_get_args();return
self::getConnection()->test($args);}public
static
function
fetch($args){$args=func_get_args();return
self::getConnection()->query($args)->fetch();}public
static
function
fetchAll($args){$args=func_get_args();return
self::getConnection()->query($args)->fetchAll();}public
static
function
fetchSingle($args){$args=func_get_args();return
self::getConnection()->query($args)->fetchSingle();}public
static
function
fetchPairs($args){$args=func_get_args();return
self::getConnection()->query($args)->fetchPairs();}public
static
function
affectedRows(){return
self::getConnection()->affectedRows();}public
static
function
insertId($sequence=NULL){return
self::getConnection()->insertId($sequence);}public
static
function
begin(){self::getConnection()->begin();}public
static
function
commit(){self::getConnection()->commit();}public
static
function
rollback(){self::getConnection()->rollback();}public
static
function
getDatabaseInfo(){return
self::getConnection()->getDatabaseInfo();}public
static
function
loadFile($file){return
self::getConnection()->loadFile($file);}public
static
function
__callStatic($name,$args){return
call_user_func_array(array(self::getConnection(),$name),$args);}public
static
function
command(){return
self::getConnection()->command();}public
static
function
select($args){$args=func_get_args();return
self::getConnection()->command()->__call('select',$args);}public
static
function
update($table,array$args){return
self::getConnection()->update($table,$args);}public
static
function
insert($table,array$args){return
self::getConnection()->insert($table,$args);}public
static
function
delete($table){return
self::getConnection()->delete($table);}public
static
function
datetime($time=NULL){if($time===NULL){$time=time();}elseif(is_string($time)){$time=strtotime($time);}else{$time=(int)$time;}return
new
DibiVariable($time,dibi::FIELD_DATETIME);}public
static
function
date($date=NULL){$var=self::datetime($date);$var->modifier=dibi::FIELD_DATE;return$var;}public
static
function
addSubst($expr,$subst){self::$substs[$expr]=$subst;}public
static
function
setSubstFallback($callback){if(!is_callable($callback)){throw
new
InvalidArgumentException("Invalid callback.");}self::$substFallBack=$callback;}public
static
function
removeSubst($expr){if($expr===TRUE){self::$substs=array();}else{unset(self::$substs[':'.$expr.':']);}}public
static
function
substitute($value){if(strpos($value,':')===FALSE){return$value;}else{return
preg_replace_callback('#:(.*):#U',array('dibi','subCb'),$value);}}private
static
function
subCb($m){$m=$m[1];if(isset(self::$substs[$m])){return
self::$substs[$m];}elseif(self::$substFallBack){return
self::$substs[$m]=call_user_func(self::$substFallBack,$m);}else{return$m;}}public
static
function
addHandler($callback){if(!is_callable($callback)){throw
new
InvalidArgumentException("Invalid callback.");}self::$handlers[]=$callback;}public
static
function
notify(DibiConnection$connection=NULL,$event,$arg=NULL){foreach(self::$handlers
as$handler){call_user_func($handler,$connection,$event,$arg);}}public
static
function
startLogger($file,$logQueries=FALSE){$logger=new
DibiLogger($file);$logger->logQueries=$logQueries;self::addHandler(array($logger,'handler'));return$logger;}public
static
function
dump($sql=NULL,$return=FALSE){ob_start();if($sql
instanceof
DibiResult){$sql->dump();}else{if($sql===NULL)$sql=self::$sql;static$keywords1='SELECT|UPDATE|INSERT(?:\s+INTO)?|REPLACE(?:\s+INTO)?|DELETE|FROM|WHERE|HAVING|GROUP\s+BY|ORDER\s+BY|LIMIT|SET|VALUES|LEFT\s+JOIN|INNER\s+JOIN|TRUNCATE';static$keywords2='ALL|DISTINCT|DISTINCTROW|AS|USING|ON|AND|OR|IN|IS|NOT|NULL|LIKE|TRUE|FALSE';$sql=' '.$sql;$sql=preg_replace("#(?<=[\\s,(])($keywords1)(?=[\\s,)])#i","\n\$1",$sql);$sql=preg_replace('#[ \t]{2,}#'," ",$sql);$sql=wordwrap($sql,100);$sql=htmlSpecialChars($sql);$sql=preg_replace("#\n{2,}#","\n",$sql);$sql=preg_replace_callback("#(/\\*.+?\\*/)|(\\*\\*.+?\\*\\*)|(?<=[\\s,(])($keywords1)(?=[\\s,)])|(?<=[\\s,(=])($keywords2)(?=[\\s,)=])#is",array('dibi','highlightCallback'),$sql);$sql=trim($sql);echo'<pre class="dump">',$sql,"</pre>\n";}if($return){return
ob_get_clean();}else{ob_end_flush();}}private
static
function
highlightCallback($matches){if(!empty($matches[1]))return'<em style="color:gray">'.$matches[1].'</em>';if(!empty($matches[2]))return'<strong style="color:red">'.$matches[2].'</strong>';if(!empty($matches[3]))return'<strong style="color:blue">'.$matches[3].'</strong>';if(!empty($matches[4]))return'<strong style="color:green">'.$matches[4].'</strong>';}public
static
function
getColophon($sender=NULL){$arr=array('Number of SQL queries: '.dibi::$numOfQueries.(dibi::$totalTime===NULL?'':', elapsed time: '.sprintf('%0.3f',dibi::$totalTime*1000).' ms'));if($sender==='bluescreen'){$arr[]='dibi '.dibi::VERSION.' (revision '.dibi::REVISION.')';}return$arr;}}final
class
DibiLogger
extends
DibiObject{private$file;public$logErrors=TRUE;public$logQueries=TRUE;public
function
__construct($file){$this->file=$file;}public
function
handler($connection,$event,$arg){if($event==='afterQuery'&&$this->logQueries){$this->write("OK: ".dibi::$sql.($arg
instanceof
DibiResult?";\n-- rows: ".count($arg):'')."\n-- takes: ".sprintf('%0.3f',dibi::$elapsedTime*1000).' ms'."\n-- driver: ".$connection->getConfig('driver')."\n-- ".date('Y-m-d H:i:s')."\n\n");return;}if($event==='exception'&&$this->logErrors){$message=$arg->getMessage();$code=$arg->getCode();if($code){$message="[$code] $message";}$this->write("ERROR: $message"."\n-- SQL: ".dibi::$sql."\n-- driver: ".";\n-- ".date('Y-m-d H:i:s')."\n\n");return;}}private
function
write($message){$handle=fopen($this->file,'a');if(!$handle)return;flock($handle,LOCK_EX);fwrite($handle,$message);fclose($handle);}}class
DibiMsSqlDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;public
function
__construct(){if(!extension_loaded('mssql')){throw
new
DibiDriverException("PHP extension 'mssql' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'username','user');DibiConnection::alias($config,'password','pass');DibiConnection::alias($config,'host','hostname');if(empty($config['persistent'])){$this->connection=@mssql_connect($config['host'],$config['username'],$config['password'],TRUE);}else{$this->connection=@mssql_pconnect($config['host'],$config['username'],$config['password']);}if(!is_resource($this->connection)){throw
new
DibiDriverException("Can't connect to DB.");}if(isset($config['database'])&&!@mssql_select_db($config['database'],$this->connection)){throw
new
DibiDriverException("Can't select DB '$config[database]'.");}}public
function
disconnect(){mssql_close($this->connection);}public
function
query($sql){$this->resultSet=@mssql_query($sql,$this->connection);if($this->resultSet===FALSE){throw
new
DibiDriverException('Query error',0,$sql);}return
is_resource($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){return
mssql_rows_affected($this->connection);}public
function
insertId($sequence){throw
new
NotSupportedException('MS SQL does not support autoincrementing.');}public
function
begin(){$this->query('BEGIN TRANSACTION');}public
function
commit(){$this->query('COMMIT');}public
function
rollback(){$this->query('ROLLBACK');}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:case
dibi::FIELD_BINARY:return"'".str_replace("'","''",$value)."'";case
dibi::IDENTIFIER:$value=str_replace(array('[',']'),array('[[',']]'),$value);return'['.str_replace('.','].[',$value).']';case
dibi::FIELD_BOOL:return$value?-1:0;case
dibi::FIELD_DATE:return
date("'Y-m-d'",$value);case
dibi::FIELD_DATETIME:return
date("'Y-m-d H:i:s'",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){if($limit>=0){$sql='SELECT TOP '.(int)$limit.' * FROM ('.$sql.')';}if($offset){throw
new
NotImplementedException('Offset is not implemented.');}}public
function
rowCount(){return
mssql_num_rows($this->resultSet);}public
function
fetch($assoc){return
mssql_fetch_array($this->resultSet,$assoc?MSSQL_ASSOC:MSSQL_NUM);}public
function
seek($row){return
mssql_data_seek($this->resultSet,$row);}public
function
free(){mssql_free_result($this->resultSet);$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=mssql_num_fields($this->resultSet);$meta=array();for($i=0;$i<$count;$i++){$info=(array)mssql_fetch_field($this->resultSet,$i);$info['table']=$info['column_source'];$info['nativetype']=$info['type'];$meta[]=$info;}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){throw
new
NotImplementedException;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiMySqlDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$buffered;public
function
__construct(){if(!extension_loaded('mysql')){throw
new
DibiDriverException("PHP extension 'mysql' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'username','user');DibiConnection::alias($config,'password','pass');DibiConnection::alias($config,'host','hostname');DibiConnection::alias($config,'options');if(!isset($config['username']))$config['username']=ini_get('mysql.default_user');if(!isset($config['password']))$config['password']=ini_get('mysql.default_password');if(!isset($config['host'])){$host=ini_get('mysql.default_host');if($host){$config['host']=$host;$config['port']=ini_get('mysql.default_port');}else{if(!isset($config['socket']))$config['socket']=ini_get('mysql.default_socket');$config['host']=NULL;}}if(empty($config['socket'])){$host=$config['host'].(empty($config['port'])?'':':'.$config['port']);}else{$host=':'.$config['socket'];}if(empty($config['persistent'])){$this->connection=@mysql_connect($host,$config['username'],$config['password'],TRUE,$config['options']);}else{$this->connection=@mysql_pconnect($host,$config['username'],$config['password'],$config['options']);}if(!is_resource($this->connection)){throw
new
DibiDriverException(mysql_error(),mysql_errno());}if(isset($config['charset'])){$ok=FALSE;if(function_exists('mysql_set_charset')){$ok=@mysql_set_charset($config['charset'],$this->connection);}if(!$ok){$ok=@mysql_query("SET NAMES '$config[charset]'",$this->connection);if(!$ok){throw
new
DibiDriverException(mysql_error($this->connection),mysql_errno($this->connection));}}}if(isset($config['database'])){if(!@mysql_select_db($config['database'],$this->connection)){throw
new
DibiDriverException(mysql_error($this->connection),mysql_errno($this->connection));}}if(isset($config['sqlmode'])){if(!@mysql_query("SET sql_mode='$config[sqlmode]'",$this->connection)){throw
new
DibiDriverException(mysql_error($this->connection),mysql_errno($this->connection));}}$this->buffered=empty($config['unbuffered']);}public
function
disconnect(){mysql_close($this->connection);}public
function
query($sql){if($this->buffered){$this->resultSet=@mysql_query($sql,$this->connection);}else{$this->resultSet=@mysql_unbuffered_query($sql,$this->connection);}if(mysql_errno($this->connection)){throw
new
DibiDriverException(mysql_error($this->connection),mysql_errno($this->connection),$sql);}return
is_resource($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){return
mysql_affected_rows($this->connection);}public
function
insertId($sequence){return
mysql_insert_id($this->connection);}public
function
begin(){$this->query('START TRANSACTION');}public
function
commit(){$this->query('COMMIT');}public
function
rollback(){$this->query('ROLLBACK');}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:case
dibi::FIELD_BINARY:return"'".mysql_real_escape_string($value,$this->connection)."'";case
dibi::IDENTIFIER:$value=str_replace('`','``',$value);return'`'.str_replace('.','`.`',$value).'`';case
dibi::FIELD_BOOL:return$value?1:0;case
dibi::FIELD_DATE:return
date("'Y-m-d'",$value);case
dibi::FIELD_DATETIME:return
date("'Y-m-d H:i:s'",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){if($limit<0&&$offset<1)return;$sql.=' LIMIT '.($limit<0?'18446744073709551615':(int)$limit).($offset>0?' OFFSET '.(int)$offset:'');}public
function
rowCount(){if(!$this->buffered){throw
new
DibiDriverException('Row count is not available for unbuffered queries.');}return
mysql_num_rows($this->resultSet);}public
function
fetch($assoc){return
mysql_fetch_array($this->resultSet,$assoc?MYSQL_ASSOC:MYSQL_NUM);}public
function
seek($row){if(!$this->buffered){throw
new
DibiDriverException('Cannot seek an unbuffered result set.');}return
mysql_data_seek($this->resultSet,$row);}public
function
free(){mysql_free_result($this->resultSet);$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=mysql_num_fields($this->resultSet);$meta=array();for($i=0;$i<$count;$i++){$info=(array)mysql_fetch_field($this->resultSet,$i);$info['nativetype']=$info['type'];$meta[]=$info;}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){$this->query("SHOW TABLES");$res=array();while($row=mysql_fetch_array($this->resultSet,MYSQL_NUM)){$res[]=array('name'=>$row[0]);}$this->free();return$res;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiMySqliDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$buffered;public
function
__construct(){if(!extension_loaded('mysqli')){throw
new
DibiDriverException("PHP extension 'mysqli' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'username','user');DibiConnection::alias($config,'password','pass');DibiConnection::alias($config,'host','hostname');DibiConnection::alias($config,'options');DibiConnection::alias($config,'database');if(!isset($config['username']))$config['username']=ini_get('mysqli.default_user');if(!isset($config['password']))$config['password']=ini_get('mysqli.default_pw');if(!isset($config['socket']))$config['socket']=ini_get('mysqli.default_socket');if(!isset($config['port']))$config['port']=NULL;if(!isset($config['host'])){$host=ini_get('mysqli.default_host');if($host){$config['host']=$host;$config['port']=ini_get('mysqli.default_port');}else{$config['host']=NULL;$config['port']=NULL;}}$this->connection=mysqli_init();@mysqli_real_connect($this->connection,$config['host'],$config['username'],$config['password'],$config['database'],$config['port'],$config['socket'],$config['options']);if($errno=mysqli_connect_errno()){throw
new
DibiDriverException(mysqli_connect_error(),$errno);}if(isset($config['charset'])){$ok=FALSE;if(version_compare(PHP_VERSION,'5.1.5','>=')){$ok=@mysqli_set_charset($this->connection,$config['charset']);}if(!$ok){$ok=@mysqli_query($this->connection,"SET NAMES '$config[charset]'");if(!$ok){throw
new
DibiDriverException(mysqli_error($this->connection),mysqli_errno($this->connection));}}}if(isset($config['sqlmode'])){if(!@mysqli_query($this->connection,"SET sql_mode='$config[sqlmode]'")){throw
new
DibiDriverException(mysqli_error($this->connection),mysqli_errno($this->connection));}}$this->buffered=empty($config['unbuffered']);}public
function
disconnect(){mysqli_close($this->connection);}public
function
query($sql){$this->resultSet=@mysqli_query($this->connection,$sql,$this->buffered?MYSQLI_STORE_RESULT:MYSQLI_USE_RESULT);if(mysqli_errno($this->connection)){throw
new
DibiDriverException(mysqli_error($this->connection),mysqli_errno($this->connection),$sql);}return
is_object($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){return
mysqli_affected_rows($this->connection);}public
function
insertId($sequence){return
mysqli_insert_id($this->connection);}public
function
begin(){$this->query('START TRANSACTION');}public
function
commit(){$this->query('COMMIT');}public
function
rollback(){$this->query('ROLLBACK');}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:case
dibi::FIELD_BINARY:return"'".mysqli_real_escape_string($this->connection,$value)."'";case
dibi::IDENTIFIER:$value=str_replace('`','``',$value);return'`'.str_replace('.','`.`',$value).'`';case
dibi::FIELD_BOOL:return$value?1:0;case
dibi::FIELD_DATE:return
date("'Y-m-d'",$value);case
dibi::FIELD_DATETIME:return
date("'Y-m-d H:i:s'",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){if($limit<0&&$offset<1)return;$sql.=' LIMIT '.($limit<0?'18446744073709551615':(int)$limit).($offset>0?' OFFSET '.(int)$offset:'');}public
function
rowCount(){if(!$this->buffered){throw
new
DibiDriverException('Row count is not available for unbuffered queries.');}return
mysqli_num_rows($this->resultSet);}public
function
fetch($assoc){return
mysqli_fetch_array($this->resultSet,$assoc?MYSQLI_ASSOC:MYSQLI_NUM);}public
function
seek($row){if(!$this->buffered){throw
new
DibiDriverException('Cannot seek an unbuffered result set.');}return
mysqli_data_seek($this->resultSet,$row);}public
function
free(){mysqli_free_result($this->resultSet);$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=mysqli_num_fields($this->resultSet);$meta=array();for($i=0;$i<$count;$i++){$info=(array)mysqli_fetch_field_direct($this->resultSet,$i);$info['nativetype']=$info['type'];$meta[]=$info;}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){$this->query("SHOW TABLES");$res=array();while($row=mysqli_fetch_array($this->resultSet,MYSQLI_NUM)){$res[]=array('name'=>$row[0]);}$this->free();return$res;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiOdbcDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$row=0;public
function
__construct(){if(!extension_loaded('odbc')){throw
new
DibiDriverException("PHP extension 'odbc' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'username','user');DibiConnection::alias($config,'password','pass');if(!isset($config['username']))$config['username']=ini_get('odbc.default_user');if(!isset($config['password']))$config['password']=ini_get('odbc.default_pw');if(!isset($config['dsn']))$config['dsn']=ini_get('odbc.default_db');if(empty($config['persistent'])){$this->connection=@odbc_connect($config['dsn'],$config['username'],$config['password']);}else{$this->connection=@odbc_pconnect($config['dsn'],$config['username'],$config['password']);}if(!is_resource($this->connection)){throw
new
DibiDriverException(odbc_errormsg().' '.odbc_error());}}public
function
disconnect(){odbc_close($this->connection);}public
function
query($sql){$this->resultSet=@odbc_exec($this->connection,$sql);if($this->resultSet===FALSE){throw
new
DibiDriverException(odbc_errormsg($this->connection).' '.odbc_error($this->connection),0,$sql);}return
is_resource($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){return
odbc_num_rows($this->resultSet);}public
function
insertId($sequence){throw
new
NotSupportedException('ODBC does not support autoincrementing.');}public
function
begin(){if(!odbc_autocommit($this->connection,FALSE)){throw
new
DibiDriverException(odbc_errormsg($this->connection).' '.odbc_error($this->connection));}}public
function
commit(){if(!odbc_commit($this->connection)){throw
new
DibiDriverException(odbc_errormsg($this->connection).' '.odbc_error($this->connection));}odbc_autocommit($this->connection,TRUE);}public
function
rollback(){if(!odbc_rollback($this->connection)){throw
new
DibiDriverException(odbc_errormsg($this->connection).' '.odbc_error($this->connection));}odbc_autocommit($this->connection,TRUE);}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:case
dibi::FIELD_BINARY:return"'".str_replace("'","''",$value)."'";case
dibi::IDENTIFIER:$value=str_replace(array('[',']'),array('[[',']]'),$value);return'['.str_replace('.','].[',$value).']';case
dibi::FIELD_BOOL:return$value?-1:0;case
dibi::FIELD_DATE:return
date("#m/d/Y#",$value);case
dibi::FIELD_DATETIME:return
date("#m/d/Y H:i:s#",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){if($limit>=0){$sql='SELECT TOP '.(int)$limit.' * FROM ('.$sql.')';}if($offset)throw
new
InvalidArgumentException('Offset is not implemented in driver odbc.');}public
function
rowCount(){return
odbc_num_rows($this->resultSet);}public
function
fetch($assoc){if($assoc){return
odbc_fetch_array($this->resultSet,++$this->row);}else{$set=$this->resultSet;if(!odbc_fetch_row($set,++$this->row))return
FALSE;$count=odbc_num_fields($set);$cols=array();for($i=1;$i<=$count;$i++)$cols[]=odbc_result($set,$i);return$cols;}}public
function
seek($row){$this->row=$row;return
TRUE;}public
function
free(){odbc_free_result($this->resultSet);$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=odbc_num_fields($this->resultSet);$meta=array();for($i=1;$i<=$count;$i++){$meta[]=array('name'=>odbc_field_name($this->resultSet,$i),'table'=>NULL,'nativetype'=>odbc_field_type($this->resultSet,$i),'length'=>odbc_field_len($this->resultSet,$i),'scale'=>odbc_field_scale($this->resultSet,$i),'precision'=>odbc_field_precision($this->resultSet,$i));}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){$result=odbc_tables($this->connection);$res=array();while(odbc_fetch_row($result)){$res[]=array('name'=>odbc_result($result,'TABLE_NAME'));}return$res;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiOracleDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$autocommit=TRUE;public
function
__construct(){if(!extension_loaded('oci8')){throw
new
DibiDriverException("PHP extension 'oci8' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'username','user');DibiConnection::alias($config,'password','pass');DibiConnection::alias($config,'database','db');DibiConnection::alias($config,'charset');$this->connection=@oci_new_connect($config['username'],$config['password'],$config['database'],$config['charset']);if(!$this->connection){$err=oci_error();throw
new
DibiDriverException($err['message'],$err['code']);}}public
function
disconnect(){oci_close($this->connection);}public
function
query($sql){$this->resultSet=oci_parse($this->connection,$sql);if($this->resultSet){oci_execute($this->resultSet,$this->autocommit?OCI_COMMIT_ON_SUCCESS:OCI_DEFAULT);$err=oci_error($this->resultSet);if($err){throw
new
DibiDriverException($err['message'],$err['code'],$sql);}}else{$err=oci_error($this->connection);throw
new
DibiDriverException($err['message'],$err['code'],$sql);}return
is_resource($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){throw
new
NotImplementedException;}public
function
insertId($sequence){throw
new
NotSupportedException('Oracle does not support autoincrementing.');}public
function
begin(){$this->autocommit=FALSE;}public
function
commit(){if(!oci_commit($this->connection)){$err=oci_error($this->connection);throw
new
DibiDriverException($err['message'],$err['code']);}$this->autocommit=TRUE;}public
function
rollback(){if(!oci_rollback($this->connection)){$err=oci_error($this->connection);throw
new
DibiDriverException($err['message'],$err['code']);}$this->autocommit=TRUE;}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:case
dibi::FIELD_BINARY:return"'".str_replace("'","''",$value)."'";case
dibi::IDENTIFIER:$value=str_replace('"','""',$value);return'"'.str_replace('.','"."',$value).'"';case
dibi::FIELD_BOOL:return$value?1:0;case
dibi::FIELD_DATE:return
date("U",$value);case
dibi::FIELD_DATETIME:return
date("U",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){if($limit<0&&$offset<1)return;$sql.=' LIMIT '.$limit.($offset>0?' OFFSET '.(int)$offset:'');}public
function
rowCount(){return
oci_num_rows($this->resultSet);}public
function
fetch($assoc){return
oci_fetch_array($this->resultSet,($assoc?OCI_ASSOC:OCI_NUM)|OCI_RETURN_NULLS);}public
function
seek($row){throw
new
NotImplementedException;}public
function
free(){oci_free_statement($this->resultSet);$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=oci_num_fields($this->resultSet);$meta=array();for($i=1;$i<=$count;$i++){$meta[]=array('name'=>oci_field_name($this->resultSet,$i),'table'=>NULL,'nativetype'=>oci_field_type($this->resultSet,$i),'size'=>oci_field_size($this->resultSet,$i),'scale'=>oci_field_scale($this->resultSet,$i),'precision'=>oci_field_precision($this->resultSet,$i));}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){throw
new
NotImplementedException;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiPdoDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$affectedRows=FALSE;public
function
__construct(){if(!extension_loaded('pdo')){throw
new
DibiDriverException("PHP extension 'pdo' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'username','user');DibiConnection::alias($config,'password','pass');DibiConnection::alias($config,'dsn');DibiConnection::alias($config,'pdo');DibiConnection::alias($config,'options');if($config['pdo']instanceof
PDO){$this->connection=$config['pdo'];}else
try{$this->connection=new
PDO($config['dsn'],$config['username'],$config['password'],$config['options']);}catch(PDOException$e){throw
new
DibiDriverException($e->getMessage(),$e->getCode());}if(!$this->connection){throw
new
DibiDriverException('Connecting error.');}}public
function
disconnect(){$this->connection=NULL;}public
function
query($sql){$cmd=strtoupper(substr(ltrim($sql),0,6));$list=array('UPDATE'=>1,'DELETE'=>1,'INSERT'=>1,'REPLAC'=>1);if(isset($list[$cmd])){$this->resultSet=NULL;$this->affectedRows=$this->connection->exec($sql);if($this->affectedRows===FALSE){$err=$this->connection->errorInfo();throw
new
DibiDriverException("SQLSTATE[$err[0]]: $err[2]",$err[1],$sql);}return
NULL;}else{$this->resultSet=$this->connection->query($sql);$this->affectedRows=FALSE;if($this->resultSet===FALSE){$err=$this->connection->errorInfo();throw
new
DibiDriverException("SQLSTATE[$err[0]]: $err[2]",$err[1],$sql);}return
clone$this;}}public
function
affectedRows(){return$this->affectedRows;}public
function
insertId($sequence){return$this->connection->lastInsertId();}public
function
begin(){if(!$this->connection->beginTransaction()){$err=$this->connection->errorInfo();throw
new
DibiDriverException("SQLSTATE[$err[0]]: $err[2]",$err[1]);}}public
function
commit(){if(!$this->connection->commit()){$err=$this->connection->errorInfo();throw
new
DibiDriverException("SQLSTATE[$err[0]]: $err[2]",$err[1]);}}public
function
rollback(){if(!$this->connection->rollBack()){$err=$this->connection->errorInfo();throw
new
DibiDriverException("SQLSTATE[$err[0]]: $err[2]",$err[1]);}}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:return$this->connection->quote($value,PDO::PARAM_STR);case
dibi::FIELD_BINARY:return$this->connection->quote($value,PDO::PARAM_LOB);case
dibi::IDENTIFIER:switch($this->connection->getAttribute(PDO::ATTR_DRIVER_NAME)){case'mysql':$value=str_replace('`','``',$value);return'`'.str_replace('.','`.`',$value).'`';case'pgsql':$a=strrpos($value,'.');if($a===FALSE){return'"'.str_replace('"','""',$value).'"';}else{return
substr($value,0,$a).'."'.str_replace('"','""',substr($value,$a+1)).'"';}case'sqlite':case'sqlite2':$value=strtr($value,'[]','  ');case'odbc':case'oci':case'mssql':$value=str_replace(array('[',']'),array('[[',']]'),$value);return'['.str_replace('.','].[',$value).']';default:return$value;}case
dibi::FIELD_BOOL:return$this->connection->quote($value,PDO::PARAM_BOOL);case
dibi::FIELD_DATE:return
date("'Y-m-d'",$value);case
dibi::FIELD_DATETIME:return
date("'Y-m-d H:i:s'",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){throw
new
NotSupportedException('PDO does not support applying limit or offset.');}public
function
rowCount(){throw
new
DibiDriverException('Row count is not available for unbuffered queries.');}public
function
fetch($assoc){return$this->resultSet->fetch($assoc?PDO::FETCH_ASSOC:PDO::FETCH_NUM);}public
function
seek($row){throw
new
DibiDriverException('Cannot seek an unbuffered result set.');}public
function
free(){$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=$this->resultSet->columnCount();$meta=array();for($i=0;$i<$count;$i++){$info=@$this->resultSet->getColumnsMeta($i);if($info===FALSE){throw
new
DibiDriverException('Driver does not support meta data.');}$info['nativetype']=$info['native_type'];$meta[]=$info;}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){throw
new
NotImplementedException;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiPostgreDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$escMethod=FALSE;public
function
__construct(){if(!extension_loaded('pgsql')){throw
new
DibiDriverException("PHP extension 'pgsql' is not loaded.");}}public
function
connect(array&$config){if(isset($config['string'])){$string=$config['string'];}else{$string='';foreach(array('host','hostaddr','port','dbname','user','password','connect_timeout','options','sslmode','service')as$key){if(isset($config[$key]))$string.=$key.'='.$config[$key].' ';}}DibiDriverException::tryError();if(isset($config['persistent'])){$this->connection=pg_connect($string,PGSQL_CONNECT_FORCE_NEW);}else{$this->connection=pg_pconnect($string,PGSQL_CONNECT_FORCE_NEW);}if(DibiDriverException::catchError($msg)){throw
new
DibiDriverException($msg,0);}if(!is_resource($this->connection)){throw
new
DibiDriverException('Connecting error.');}if(isset($config['charset'])){DibiDriverException::tryError();pg_set_client_encoding($this->connection,$config['charset']);if(DibiDriverException::catchError($msg)){throw
new
DibiDriverException($msg,0);}}if(isset($config['schema'])){$this->query('SET search_path TO '.$config['schema']);}$this->escMethod=version_compare(PHP_VERSION,'5.2.0','>=');}public
function
disconnect(){pg_close($this->connection);}public
function
query($sql){$this->resultSet=@pg_query($this->connection,$sql);if($this->resultSet===FALSE){throw
new
DibiDriverException(pg_last_error($this->connection),0,$sql);}return
is_resource($this->resultSet)&&pg_num_fields($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){return
pg_affected_rows($this->resultSet);}public
function
insertId($sequence){if($sequence===NULL){$has=$this->query("SELECT LASTVAL()");}else{$has=$this->query("SELECT CURRVAL('$sequence')");}if(!$has)return
FALSE;$row=$this->fetch(FALSE);$this->free();return
is_array($row)?$row[0]:FALSE;}public
function
begin(){$this->query('START TRANSACTION');}public
function
commit(){$this->query('COMMIT');}public
function
rollback(){$this->query('ROLLBACK');}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:if($this->escMethod){return"'".pg_escape_string($this->connection,$value)."'";}else{return"'".pg_escape_string($value)."'";}case
dibi::FIELD_BINARY:if($this->escMethod){return"'".pg_escape_bytea($this->connection,$value)."'";}else{return"'".pg_escape_bytea($value)."'";}case
dibi::IDENTIFIER:$a=strrpos($value,'.');if($a===FALSE){return'"'.str_replace('"','""',$value).'"';}else{return
substr($value,0,$a).'."'.str_replace('"','""',substr($value,$a+1)).'"';}case
dibi::FIELD_BOOL:return$value?'TRUE':'FALSE';case
dibi::FIELD_DATE:return
date("'Y-m-d'",$value);case
dibi::FIELD_DATETIME:return
date("'Y-m-d H:i:s'",$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){switch($type){case
dibi::FIELD_BINARY:return
pg_unescape_bytea($value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
applyLimit(&$sql,$limit,$offset){if($limit>=0)$sql.=' LIMIT '.(int)$limit;if($offset>0)$sql.=' OFFSET '.(int)$offset;}public
function
rowCount(){return
pg_num_rows($this->resultSet);}public
function
fetch($assoc){return
pg_fetch_array($this->resultSet,NULL,$assoc?PGSQL_ASSOC:PGSQL_NUM);}public
function
seek($row){return
pg_result_seek($this->resultSet,$row);}public
function
free(){pg_free_result($this->resultSet);$this->resultSet=NULL;}public
function
getColumnsMeta(){$hasTable=version_compare(PHP_VERSION,'5.2.0','>=');$count=pg_num_fields($this->resultSet);$meta=array();for($i=0;$i<$count;$i++){$meta[]=array('name'=>pg_field_name($this->resultSet,$i),'table'=>$hasTable?pg_field_table($this->resultSet,$i):NULL,'nativetype'=>pg_field_type($this->resultSet,$i),'size'=>pg_field_size($this->resultSet,$i),'prtlen'=>pg_field_prtlen($this->resultSet,$i));}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){throw
new
NotImplementedException;}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}class
DibiSqliteDriver
extends
DibiObject
implements
IDibiDriver{private$connection;private$resultSet;private$buffered;private$fmtDate,$fmtDateTime;public
function
__construct(){if(!extension_loaded('sqlite')){throw
new
DibiDriverException("PHP extension 'sqlite' is not loaded.");}}public
function
connect(array&$config){DibiConnection::alias($config,'database','file');$this->fmtDate=isset($config['formatDate'])?$config['formatDate']:'U';$this->fmtDateTime=isset($config['formatDateTime'])?$config['formatDateTime']:'U';$errorMsg='';if(empty($config['persistent'])){$this->connection=@sqlite_open($config['database'],0666,$errorMsg);}else{$this->connection=@sqlite_popen($config['database'],0666,$errorMsg);}if(!$this->connection){throw
new
DibiDriverException($errorMsg);}$this->buffered=empty($config['unbuffered']);}public
function
disconnect(){sqlite_close($this->connection);}public
function
query($sql){DibiDriverException::tryError();if($this->buffered){$this->resultSet=sqlite_query($this->connection,$sql);}else{$this->resultSet=sqlite_unbuffered_query($this->connection,$sql);}if(DibiDriverException::catchError($msg)){throw
new
DibiDriverException($msg,sqlite_last_error($this->connection),$sql);}return
is_resource($this->resultSet)?clone$this:NULL;}public
function
affectedRows(){return
sqlite_changes($this->connection);}public
function
insertId($sequence){return
sqlite_last_insert_rowid($this->connection);}public
function
begin(){$this->query('BEGIN');}public
function
commit(){$this->query('COMMIT');}public
function
rollback(){$this->query('ROLLBACK');}public
function
getResource(){return$this->connection;}public
function
escape($value,$type){switch($type){case
dibi::FIELD_TEXT:case
dibi::FIELD_BINARY:return"'".sqlite_escape_string($value)."'";case
dibi::IDENTIFIER:return'['.str_replace('.','].[',strtr($value,'[]','  ')).']';case
dibi::FIELD_BOOL:return$value?1:0;case
dibi::FIELD_DATE:return
date($this->fmtDate,$value);case
dibi::FIELD_DATETIME:return
date($this->fmtDateTime,$value);default:throw
new
InvalidArgumentException('Unsupported type.');}}public
function
unescape($value,$type){throw
new
InvalidArgumentException('Unsupported type.');}public
function
applyLimit(&$sql,$limit,$offset){if($limit<0&&$offset<1)return;$sql.=' LIMIT '.$limit.($offset>0?' OFFSET '.(int)$offset:'');}public
function
rowCount(){if(!$this->buffered){throw
new
DibiDriverException('Row count is not available for unbuffered queries.');}return
sqlite_num_rows($this->resultSet);}public
function
fetch($assoc){$row=sqlite_fetch_array($this->resultSet,$assoc?SQLITE_ASSOC:SQLITE_NUM);if($assoc&&$row){$tmp=array();foreach($row
as$k=>$v){$tmp[str_replace(array('[',']'),'',$k)]=$v;}return$tmp;}return$row;}public
function
seek($row){if(!$this->buffered){throw
new
DibiDriverException('Cannot seek an unbuffered result set.');}return
sqlite_seek($this->resultSet,$row);}public
function
free(){$this->resultSet=NULL;}public
function
getColumnsMeta(){$count=sqlite_num_fields($this->resultSet);$meta=array();for($i=0;$i<$count;$i++){$pair=explode('.',str_replace(array('[',']'),'',sqlite_field_name($this->resultSet,$i)));if(!isset($pair[1])){array_unshift($pair,NULL);}$meta[]=array('name'=>$pair[1],'table'=>$pair[0]);}return$meta;}public
function
getResultResource(){return$this->resultSet;}public
function
getTables(){$this->query("
			SELECT name FROM sqlite_master WHERE type='table'
			UNION ALL SELECT name FROM sqlite_temp_master WHERE type='table' ORDER BY name
		");return
sqlite_fetch_all($this->resultSet,SQLITE_ASSOC);}public
function
getColumns($table){throw
new
NotImplementedException;}public
function
getIndexes($table){throw
new
NotImplementedException;}public
function
getForeignKeys($table){throw
new
NotImplementedException;}}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_THROW
        (AST_NEW)))