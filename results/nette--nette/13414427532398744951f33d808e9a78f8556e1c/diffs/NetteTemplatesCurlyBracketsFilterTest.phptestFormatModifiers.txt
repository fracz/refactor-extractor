||||||||	public function testFormatModifiers()
	{
		// special
		$this->assertEquals('@', CurlyBracketsFilter::formatModifiers('@', ''));
		$this->assertEquals('@', CurlyBracketsFilter::formatModifiers('@', ':'));
		$this->assertEquals('@', CurlyBracketsFilter::formatModifiers('@', '|'));
		$this->assertEquals('$template->mod(@)', CurlyBracketsFilter::formatModifiers('@', 'mod::||:|'));

		// common
		$this->assertEquals('$template->mod(@)', CurlyBracketsFilter::formatModifiers('@', 'mod'));
		$this->assertEquals('$template->mod3($template->mod2($template->mod1(@)))', CurlyBracketsFilter::formatModifiers('@', 'mod1|mod2|mod3'));

		// arguments
		$this->assertEquals('$template->mod(@, \'arg1\', 2)', CurlyBracketsFilter::formatModifiers('@', 'mod:arg1:2'));
		$this->assertEquals('$template->mod(@, " :a:b:c", "", 3, "")', CurlyBracketsFilter::formatModifiers('@', 'mod:" :a:b:c":"":3:""'));
		$this->assertEquals('$template->mod(@, "\":a:b:c")', CurlyBracketsFilter::formatModifiers('@', 'mod:"\\":a:b:c"'));
		$this->assertEquals("\$template->mod(@, '\':a:b:c')", CurlyBracketsFilter::formatModifiers('@', "mod:'\\':a:b:c'"));
		$this->assertEquals("\$template->mod(@, '\\\\', 'a', 'b', 'c', 'arg2')", CurlyBracketsFilter::formatModifiers('@', "mod:'\\\\':a:b:c':arg2"));
	}

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR))))))