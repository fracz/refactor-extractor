	public function __construct()
	{
		$this->macros = self::$defaultMacros;

		self::$tokenizer = new Nette\Tokenizer(array(
			self::T_WHITESPACE => '\s+',
			self::T_COMMENT => '/\*.*?\*/',
			LatteFilter::RE_STRING,
			'true|false|null|and|or|xor|clone|new|instanceof',
			self::T_VARIABLE => '\$[_a-z0-9\x7F-\xFF]+',
			self::T_NUMBER => '[+-]?[0-9]+(?:\.[0-9]+)?(?:e[0-9]+)?',
			self::T_SYMBOL => '[_a-z0-9\x7F-\xFF]+(?:-[_a-z0-9\x7F-\xFF]+)*',
			'::|=>|[^"\']', // =>, any char except quotes
		), 'i');
	}



	/**
	 * Initializes parsing.
	 * @param  LatteFilter
	 * @param  string
	 * @return void
	 */
||||||||	public function __construct()
	{
		$this->macros = self::$defaultMacros;

		$this->tokenizer = new Nette\Tokenizer(array(
			self::T_WHITESPACE => '\s+',
			self::T_COMMENT => '/\*.*?\*/',
			LatteFilter::RE_STRING,
			'true|false|null|and|or|xor|clone|new|instanceof',
			self::T_VARIABLE => '\$[_a-z0-9\x7F-\xFF]+',
			self::T_NUMBER => '[+-]?[0-9]+(?:\.[0-9]+)?(?:e[0-9]+)?',
			self::T_SYMBOL => '[_a-z0-9\x7F-\xFF]+(?:-[_a-z0-9\x7F-\xFF]+)*',
			'::|=>|[^"\']', // =>, any char except quotes
		), 'i');
	}



	/**
	 * Initializes parsing.
	 * @param  LatteFilter
	 * @param  string
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR)))))