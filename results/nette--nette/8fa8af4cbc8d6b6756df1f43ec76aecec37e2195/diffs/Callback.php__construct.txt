||||||||	public function __construct($t, $m = NULL)
	{
		if ($m === NULL) {
			$this->cb = $t;
		} else {
			$this->cb = array($t, $m);
		}

		/*5.2*
		// __invoke support
		if (is_object($this->cb)) {
			$this->cb = array($this->cb, '__invoke');

		} elseif (PHP_VERSION_ID < 50202) {
			// explode 'Class::method' into array
			if (is_string($this->cb) && strpos($this->cb, ':')) {
				$this->cb = explode('::', $this->cb);
			}

			// remove class namespace
			if (is_array($this->cb) && is_string($this->cb[0]) && $a = strrpos($this->cb[0], '\\')) {
				$this->cb[0] = substr($this->cb[0], $a + 1);
			}

		} else {
			// remove class namespace
			if (is_string($this->cb) && $a = strrpos($this->cb, '\\')) {
				$this->cb = substr($this->cb, $a + 1);

			} elseif (is_array($this->cb) && is_string($this->cb[0]) && $a = strrpos($this->cb[0], '\\')) {
				$this->cb[0] = substr($this->cb[0], $a + 1);
			}
		}
		*/

		if (!is_callable($this->cb, TRUE)) {
			throw new \InvalidArgumentException("Invalid callback.");
		}
	}



	/**
	 * Invokes callback. Do not call directly.
	 * @return mixed
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR))))))))