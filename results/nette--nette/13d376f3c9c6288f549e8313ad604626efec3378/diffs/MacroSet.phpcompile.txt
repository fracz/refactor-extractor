	private function compile(MacroNode $node, $def)
	{
		$writer = new Latte\PhpWriter;
		if (is_string($def)/*5.2* && substr($def, 0, 1) !== "\0"*/) {
			$code = str_replace('%%', $writer->formatArgs($node->args), $def);
		} else {
			$code = callback($def)->invoke($node, $writer);
			if ($code === FALSE) {
				return FALSE;
			}
		}
		return "<?php $code ?>";
	}

}||||||||	private function compile(MacroNode $node, $def)
	{
		$writer = Latte\PhpWriter::using($node, $this->parser->escape);
		if (is_string($def)/*5.2* && substr($def, 0, 1) !== "\0"*/) {
			$code = str_replace('%%', $writer->formatArgs(), $def);
		} else {
			$code = callback($def)->invoke($node, $writer);
			if ($code === FALSE) {
				return FALSE;
			}
		}
		return "<?php $code ?>";
	}

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR))))