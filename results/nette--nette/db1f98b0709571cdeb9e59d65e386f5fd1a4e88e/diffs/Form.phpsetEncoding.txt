	public function setEncoding($value)
	{
		$this->encoding = empty($value) ? 'UTF-8' : $value;
	}



	/**
	 * Returns the encoding.
	 * @return string
	 */
||||||||	public function setEncoding($value)
	{
		$this->encoding = empty($value) ? 'UTF-8' : strtoupper($value);
		if ($this->encoding !== 'UTF-8' && !extension_loaded('mbstring')) {
			throw new /*::*/Exception("The PHP extension 'mbstring' is required for this encoding but is not loaded.");
		}
	}



	/**
	 * Returns the encoding.
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (SCALAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR))))))))