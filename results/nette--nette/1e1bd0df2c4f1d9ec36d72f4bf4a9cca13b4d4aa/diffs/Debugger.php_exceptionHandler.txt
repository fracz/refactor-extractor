	public static function _exceptionHandler(\Exception $exception)
	{
		if (!headers_sent()) { // for PHP < 5.2.4
			header('HTTP/1.1 500 Internal Server Error');
		}

		$htmlMode = !self::$ajaxDetected && !preg_match('#^Content-Type: (?!text/html)#im', implode("\n", headers_list()));

		try {
			if (self::$productionMode) {
				self::log($exception, self::ERROR);

				if (self::$consoleMode) {
					echo "ERROR: the server encountered an internal error and was unable to complete your request.\n";

				} elseif ($htmlMode) {
					require __DIR__ . '/templates/error.phtml';
				}

			} else {
				if (self::$consoleMode) { // dump to console
					echo "$exception\n";

				} elseif ($htmlMode) { // dump to browser
					self::$blueScreen->render($exception);
					if (self::$bar) {
						self::$bar->render();
					}

				} elseif (!self::fireLog($exception, self::ERROR)) { // AJAX or non-HTML mode
					self::log($exception);
				}
			}

			foreach (self::$onFatalError as $handler) {
				call_user_func($handler, $exception);
			}
		} catch (\Exception $e) {
			echo "\nNette\\Debug FATAL ERROR: thrown ", get_class($e), ': ', $e->getMessage(),
				"\nwhile processing ", get_class($exception), ': ', $exception->getMessage(), "\n";
		}
		self::$enabled = FALSE; // un-register shutdown function
		exit(255);
	}



	/**
	 * Handler to catch warnings and notices.
	 * @param  int    level of the error raised
	 * @param  string error message
	 * @param  string file that the error was raised in
	 * @param  int    line number the error was raised at
	 * @param  array  an array of variables that existed in the scope the error was triggered in
	 * @return bool   FALSE to call normal error handler, NULL otherwise
	 * @throws Nette\FatalErrorException
	 * @internal
	 */
||||||||	public static function _exceptionHandler(\Exception $exception)
	{
		if (!headers_sent()) { // for PHP < 5.2.4
			header('HTTP/1.1 500 Internal Server Error');
		}

		try {
			if (self::$productionMode) {
				self::log($exception, self::ERROR);

				if (self::$consoleMode) {
					echo "ERROR: the server encountered an internal error and was unable to complete your request.\n";

				} elseif (self::isHtmlMode()) {
					require __DIR__ . '/templates/error.phtml';
				}

			} else {
				if (self::$consoleMode) { // dump to console
					echo "$exception\n";

				} elseif (self::isHtmlMode()) { // dump to browser
					self::$blueScreen->render($exception);
					if (self::$bar) {
						self::$bar->render();
					}

				} elseif (!self::fireLog($exception, self::ERROR)) { // AJAX or non-HTML mode
					self::log($exception);
				}
			}

			foreach (self::$onFatalError as $handler) {
				call_user_func($handler, $exception);
			}
		} catch (\Exception $e) {
			echo "\nNette\\Debug FATAL ERROR: thrown ", get_class($e), ': ', $e->getMessage(),
				"\nwhile processing ", get_class($exception), ': ', $exception->getMessage(), "\n";
		}
		self::$enabled = FALSE; // un-register shutdown function
		exit(255);
	}



	/**
	 * Handler to catch warnings and notices.
	 * @param  int    level of the error raised
	 * @param  string error message
	 * @param  string file that the error was raised in
	 * @param  int    line number the error was raised at
	 * @param  array  an array of variables that existed in the scope the error was triggered in
	 * @return bool   FALSE to call normal error handler, NULL otherwise
	 * @throws Nette\FatalErrorException
	 * @internal
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL))
            (
                (AST_CALL
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_UNARY_OP
                (AST_STATIC_PROP))
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL))))))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_PROP)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (SCALAR))))
                            (AST_IF_ELEM
                                (AST_VAR)
                                (
                                    (AST_INCLUDE_OR_EVAL
                                        (AST_BINARY_OP
                                            (AST_MAGIC_CONST)
                                            (SCALAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR)))))
                            (AST_IF_ELEM
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_STATIC_PROP)
                                        (
                                            (AST_VAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_STATIC_PROP)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_STATIC_PROP)))))))
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))))
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))))))))
            (AST_FOREACH
                (AST_STATIC_PROP)
                (AST_VAR)
                (NULL)
                (
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ECHO
                        (SCALAR)))))
        (NULL))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_EXIT
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL))
            (
                (AST_CALL
                    (
                        (SCALAR))))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_PROP)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (SCALAR))))
                            (AST_IF_ELEM
                                (AST_STATIC_CALL)
                                (
                                    (AST_INCLUDE_OR_EVAL
                                        (AST_BINARY_OP
                                            (AST_MAGIC_CONST)
                                            (SCALAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR)))))
                            (AST_IF_ELEM
                                (AST_STATIC_CALL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_STATIC_PROP)
                                        (
                                            (AST_VAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_STATIC_PROP)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_STATIC_PROP)))))))
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))))
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))))))))
            (AST_FOREACH
                (AST_STATIC_PROP)
                (AST_VAR)
                (NULL)
                (
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ECHO
                        (SCALAR))
                    (AST_ECHO
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ECHO
                        (SCALAR)))))
        (NULL))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_EXIT
        (SCALAR)))