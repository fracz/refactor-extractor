	public static function curlyBrackets($template, $s)
	{
		// snippets support
		if (isset($template->control) &&
			$template->control instanceof /*Nette::Application::*/IPartiallyRenderable) {
			$s = '<?php if ($control->isOutputAllowed()) { ?>' . $s . '<?php } ?>';
		}
		$s = preg_replace(
			'#@(\\{[^}]+?\\})#s',
			'<?php } ?>$1<?php if ($control->isOutputAllowed()) { ?>',
			$s
		);

		// remove comments
		$s = preg_replace('#\\{\\*.*?\\*\\}#s', '', $s);

		// simple replace
		$s = str_replace(
			array_keys(self::$curlyXlatSimple),
			array_values(self::$curlyXlatSimple),
			$s
		);

		// smarter replace
		$k = implode("\x0", array_keys(self::$curlyXlatMask));
		$k = preg_quote($k, '#');
		$k = str_replace('\000', '|', $k);
		$s = preg_replace_callback(
			'#\\{(' . $k . ')([^}]*?)(?:\\|([a-z][a-zA-Z0-9|:]*))?\\}()#s',
			array(__CLASS__, 'curlyCb'),
			$s
		);

		return $s;
	}



	/** @var array */
	public static $curlyXlatSimple = array(
		'{else}' => '<?php else: ?>',
		'{/if}' => '<?php endif ?>',
		'{/foreach}' => '<?php endforeach ?>',
		'{/for}' => '<?php endfor ?>',
		'{debugbreak}' => '<?php if (function_exists("debugbreak")) debugbreak() ?>',
||||||||	public static function curlyBrackets($template, $s)
	{
		// snippets support
		if (isset($template->control) &&
			$template->control instanceof /*Nette::Application::*/IPartiallyRenderable) {
			$s = '<?php if ($control->isOutputAllowed()) { ?>' . $s . '<?php } ?>';
		}
		$s = preg_replace(
			'#@(\\{[^}]+?\\})#s',
			'<?php } ?>$1<?php if ($control->isOutputAllowed()) { ?>',
			$s
		);

		// remove comments
		$s = preg_replace('#\\{\\*.*?\\*\\}#s', '', $s);

		// simple replace
		$s = str_replace(
			array_keys(self::$curlyXlatSimple),
			array_values(self::$curlyXlatSimple),
			$s
		);

		// smarter replace
		self::$curlyBlocks = array();
		$k = implode("\x0", array_keys(self::$curlyXlatMask));
		$k = preg_quote($k, '#');
		$k = str_replace('\000', '|', $k);
		$s = preg_replace_callback(
			'#\\{(' . $k . ')([^}]*?)(?:\\|([a-z][a-zA-Z0-9|:]*))?\\}()#s',
			array(__CLASS__, 'curlyCb'),
			$s
		);

		return $s;
	}



	/** @var array */
	public static $curlyXlatSimple = array(
		'{else}' => '<?php else: ?>',
		'{/if}' => '<?php endif ?>',
		'{/foreach}' => '<?php endforeach ?>',
		'{/for}' => '<?php endfor ?>',
		'{debugbreak}' => '<?php if (function_exists("debugbreak")) debugbreak() ?>',
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_STATIC_PROP)))
                (AST_CALL
                    (
                        (AST_STATIC_PROP)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_MAGIC_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_STATIC_PROP)))
                (AST_CALL
                    (
                        (AST_STATIC_PROP)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_MAGIC_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))