	public static function curlyBrackets($template, $s)
	{
		// remove comments
		$s = preg_replace('#\\{\\*.*?\\*\\}#s', '', $s);

		// simple replace
		$s = str_replace(
			array('{else}', '{/if}', '{/foreach}', '{/for}'), // or <%else%>, <%/if%>, <%/foreach%> ?
			array('<?php else:?>', '<?php endif?>', '<?php endforeach?>', '<?php endfor?>'),
			$s
		);

		// smarter replace
		$s = preg_replace_callback(
			'#\\{(if |elseif |foreach |for |include |\\$|!=|~=|=|!|~)([^}]+?)\\}#s',
			array(__CLASS__, 'curlyCb'),
			$s
		);

		//$s = preg_replace('#<?(php|=|)(.*)? >#s', '', $s);  // PHP
		return $s;
	}



	/** @var array */
	public static $curlyXlat = array(
		'$' => '<?php echo $template->escape($#)?>',
		'!' => '<?php echo $#?>',
		'~' => '<?php echo $template->translate($#)?>',
		'=' => '<?php echo $template->escape(#)?>',
		'!=' => '<?php echo #?>',
		'~=' => '<?php echo $template->translate(#)?>',
		'%' => '<?php echo $template->escape(Environment::getVariable(\'#\'))?>',
		'if ' => '<?php if (#):?>',
		/*'ifset ' => '<?php if (!empty(#)):?>',*/
		'elseif ' => '<?php elseif (#):?>',
		/*'elseifset ' => '<?php elseif (!empty(#)):?>',*/
		'foreach ' => '<?php foreach (#):?>',
		'for ' => '<?php for (#):?>',
		'include ' => '<?php $template->render(#)?>',
||||||||	public static function curlyBrackets($template, $s)
	{
		// remove comments
		$s = preg_replace('#\\{\\*.*?\\*\\}#s', '', $s);

		// simple replace
		$s = str_replace(
			array_keys(self::$curlyXlatSimple),
			array_values(self::$curlyXlatSimple),
			$s
		);

		// smarter replace
		$k = implode("\x0", array_keys(self::$curlyXlatMask));
		$k = preg_quote($k, '#');
		$k = str_replace('\000', '|', $k);
		$s = preg_replace_callback(
			'#\\{(' . $k . ')([^}]+?)\\}#s',
			array(__CLASS__, 'curlyCb'),
			$s
		);

		return $s;
	}



	/** @var array */
	public static $curlyXlatSimple = array(
		'{else}' => '<?php else:?>', // or <%else%>, <%/if%>, <%/foreach%> ?
		'{/if}' => '<?php endif?>',
		'{/foreach}' => '<?php endforeach?>',
		'{/for}' => '<?php endfor?>',
		'{debugbreak}' => '<?php if (function_exists("debugbreak")) debugbreak()?>',
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_MAGIC_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_STATIC_PROP)))
                (AST_CALL
                    (
                        (AST_STATIC_PROP)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_MAGIC_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))