	protected function renderError(Exception $exception)
	{
		$httpResponse = Environment::getHttpResponse();

		if ($this->isPartialMode()) {
			$httpResponse->setContentType('application/x-javascript', 'utf-8');
			$httpResponse->expire(FALSE);
			echo "nette.error(", json_encode((string) $exception), ");\n";

		} else {
			if (/*Nette::*/Debug::isEnabled()) throw $exception;

			$code = /*Nette::Web::*/HttpResponse::S500_INTERNAL_SERVER_ERROR;
			$httpResponse->setCode($code);

			$title = 'Redirect';
			$message = '';
			require dirname(__FILE__) . '/templates/error.phtml';
		}

		$this->renderFinished = TRUE;
	}



	/**
	 * @param  string
	 * @param  int
	 * @return void
	 */
||||||||	protected function renderError(Exception $exception)
	{
		if ($this->isPartialMode()) {
			$this->httpResponse->setContentType('application/x-javascript', 'utf-8');
			$this->httpResponse->expire(FALSE);
			echo "nette.error(", json_encode((string) $exception), ");\n";

		} else {
			if (/*Nette::*/Debug::isEnabled()) throw $exception;

			$code = /*Nette::Web::*/IHttpResponse::S500_INTERNAL_SERVER_ERROR;
			$this->httpResponse->setCode($code);

			$title = 'Error';
			$message = '';
			require dirname(__FILE__) . '/templates/error.phtml';
		}

		$this->renderFinished = TRUE;
	}

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_CALL
                        (
                            (AST_CAST
                                (AST_VAR)))))
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_CALL)
                        (
                            (AST_THROW
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CONST)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_CALL
                        (
                            (AST_CAST
                                (AST_VAR)))))
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_CALL)
                        (
                            (AST_THROW
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST)))