	protected function __call($name, $args)
	{
		if ($name === '') {
			throw new /*::*/MemberAccessException("Call to method without name.");
		}

		$class = get_class($this);

		// event functionality
		if (self::hasEvent($class, $name)) {
			$list = $this->$name;
			if (is_array($list) || $list instanceof Traversable) {
				foreach ($list as $handler) {
					call_user_func_array($handler, $args);
				}
			}
			return;
		}

		// object prototypes support Class__method()
		// (or use class Class__method { static function ... } with autoloading?)
		$cl = $class;
		do {
			if (function_exists($nm = $cl . '_prototype_' . $name)) {
				array_unshift($args, $this);
				return call_user_func_array($nm, $args);
			}
		} while ($cl = get_parent_class($cl));

		throw new /*::*/MemberAccessException("Call to undefined method $class::$name().");
	}



	/**
	 * Call to undefined static method.
	 *
	 * @param  string  method name (in lower case!)
	 * @param  array   arguments
	 * @return mixed
	 * @throws ::MemberAccessException
	 */
||||||||	protected function __call($name, $args)
	{
		$class = get_class($this);

		if ($name === '') {
			throw new /*::*/MemberAccessException("Call to class '$class' method without name.");
		}

		// event functionality
		if (self::hasEvent($class, $name)) {
			$list = $this->$name;
			if (is_array($list) || $list instanceof Traversable) {
				foreach ($list as $handler) {
					call_user_func_array($handler, $args);
				}
			}
			return;
		}

		// object prototypes support Class__method()
		// (or use class Class__method { static function ... } with autoloading?)
		$cl = $class;
		do {
			if (function_exists($nm = $cl . '_prototype_' . $name)) {
				array_unshift($args, $this);
				return call_user_func_array($nm, $args);
			}
		} while ($cl = get_parent_class($cl));

		throw new /*::*/MemberAccessException("Call to undefined method $class::$name().");
	}



	/**
	 * Call to undefined static method.
	 *
	 * @param  string  method name (in lower case!)
	 * @param  array   arguments
	 * @return mixed
	 * @throws ::MemberAccessException
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_INSTANCEOF
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_DO_WHILE
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_INSTANCEOF
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_DO_WHILE
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))))))