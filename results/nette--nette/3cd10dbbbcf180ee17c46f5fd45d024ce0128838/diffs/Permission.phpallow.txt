	public function allow($roles = self::ALL, $resources = self::ALL, $privileges = self::ALL, IPermissionAssertion $assert = NULL)
	{
		return $this->setRule(self::ADD, self::ALLOW, $roles, $resources, $privileges, $assert);
	}



	/**
	 * Adds a "deny" rule to the list.
	 *
	 * @param  string|array|self::ALL  roles
	 * @param  string|array|self::ALL  resources
	 * @param  string|array|self::ALL  privileges
	 * @param  IPermissionAssertion  $assert
	 * @return Permission  provides a fluent interface
	 */
||||||||	public function allow($roles = self::ALL, $resources = self::ALL, $privileges = self::ALL, IPermissionAssertion $assertion = NULL)
	{
		$this->setRule(TRUE, self::ALLOW, $roles, $resources, $privileges, $assertion);
		return $this;
	}



	/**
	 * Adds a "deny" rule to the list. A rule is added that would deny one
	 * or more Roles access to [certain $privileges upon] the specified Resource(s).
	 *
	 * If either $roles or $resources is Permission::ALL, then the rule applies to all Roles or all Resources,
	 * respectively. Both may be Permission::ALL in order to work with the default rule of the ACL.
	 *
	 * The $privileges parameter may be used to further specify that the rule applies only
	 * to certain privileges upon the Resource(s) in question. This may be specified to be a single
	 * privilege with a string, and multiple privileges may be specified as an array of strings.
	 *
	 * If $assertion is provided, then its assert() method must return TRUE in order for
	 * the rule to apply. If $assertion is provided with $roles, $resources, and $privileges all
	 * equal to NULL, then a rule will imply a type of ALLOW when the rule's assertion fails.
	 *
	 * @param  string|array|Permission::ALL  roles
	 * @param  string|array|Permission::ALL  resources
	 * @param  string|array|Permission::ALL  privileges
	 * @param  IPermissionAssertion  assertion
	 * @return Permission  provides a fluent interface
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))