    public function tryLoad($type)
    {
        if (strpbrk($type, './;\\|') !== FALSE) {
            throw new /*::*/InvalidArgumentException("Invalid class/interface name '$type'.");
        }

        $file = str_replace('::', '/', $type) . '.php';

        /*
        if (strncmp($type, 'Nette::', 7) === 0) {
            $file = dirname(dirname(dirname(__FILE__))) . '/' . $file;
        }
        */

        @self::includeOnce($file);
    }

}||||||||    public function tryLoad($type)
    {
        if (strpbrk($type, './;\\|') !== FALSE) {
            throw new /*::*/InvalidArgumentException("Invalid class/interface name '$type'.");
        }

        $file = str_replace('::', '/', $type) . '.php';

        /*
        if (strncmp($type, 'Nette::', 7) === 0) {
            $file = dirname(dirname(dirname(__FILE__))) . '/' . $file;
        }
        */

        @self::includeOnce($file);
        self::$count++;
    }

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_VAR)))
            (SCALAR)))
    (AST_UNARY_OP
        (AST_STATIC_CALL
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_VAR)))
            (SCALAR)))
    (AST_UNARY_OP
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_POST_INC
        (AST_STATIC_PROP)))