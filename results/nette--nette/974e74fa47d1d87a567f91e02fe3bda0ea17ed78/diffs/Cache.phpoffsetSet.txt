    public function offsetSet($key, $data)
    {
        if (!is_string($key)) { // prevents NULL
            throw new /*::*/InvalidArgumentException('Key must be a string.');
        }

        $this->storage->write($key, $data, NULL, 0, NULL);
    }



    /**
     * Retrieves the specified item from the cache or NULL if the key is not found (::ArrayAccess implementation).
     * @param  string key
     * @return mixed|NULL
     * @throws ::InvalidArgumentException
     */
||||||||    public function offsetSet($key, $data)
    {
        if (!is_string($key)) { // prevents NULL
            throw new /*::*/InvalidArgumentException('Key must be a string.');
        }

        $this->key = $this->data = NULL;
        if ($data === NULL) {
            $this->storage->remove($this->namespace . $key);
        } else {
            $this->storage->write($this->namespace . $key, $data, array());
        }
    }



    /**
     * Retrieves the specified item from the cache or NULL if the key is not found (::ArrayAccess implementation).
     * @param  string key
     * @return mixed|NULL
     * @throws ::InvalidArgumentException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)
            (SCALAR)
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_PROP
                (AST_VAR))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_VAR)
                        (AST_ARRAY)))))))