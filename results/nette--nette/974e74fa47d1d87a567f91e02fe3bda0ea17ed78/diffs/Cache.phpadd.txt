    public function add($key, $data, $tags = NULL, $lifeTime = 0)
    {
        if (!is_string($key)) { // prevents NULL
            throw new /*::*/InvalidArgumentException('Key must be a string.');
        }

        $cache = $this->offsetGet($key);
        if ($cache === NULL) {
            $this->storage->write($key, $data, $tags, $lifeTime, NULL);
            return NULL;

        } else {
            return $cache;
        }
    }



    /**
     * Inserts (replaces) item into the cache.
     * @param  string key
     * @param  mixed
     * @param  array
     * @param  int
     * @return void
     * @throws ::InvalidArgumentException
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_VAR))))))||||||||