    public static function loadConfig($file = '%appDir%/config.ini')
    {
        require_once dirname(__FILE__) . '/Config.php';
        $useCache = FALSE;

        if ($useCache) {
            $cache = self::getCache();
            $cacheKey = __CLASS__ . '-' . self::getName();
        } else {
            $cache = $cacheKey = NULL;
        }

        if (isset($cache[$cacheKey])) {
            list(self::$vars, self::$config, self::$locator) = $cache[$cacheKey];
            $cfg = self::$config;

        } else {
            /* DISCUSS
            if ($file instanceof Config) {
                self::$config = $file;

            } else*/ {
                // do not expand, do not make read-only
                self::$config = Config::fromFile(self::expand($file), self::getName(), 0);
            }

            $cfg = self::$config;

            // process environment variables
            if ($cfg->variable instanceof Config) {
                foreach ($cfg->variable as $key => $value) {
                    self::setVariable($key, $value);
                }
            }

            if (isset($cfg->set->include_path)) {
                $cfg->set->include_path = strtr($cfg->set->include_path, ';', PATH_SEPARATOR);
            }

            $cfg->expand();
            $cfg->setReadOnly();

            // process services
            $locator = self::getServiceLocator();
            if ($cfg->service instanceof Config) {
                foreach ($cfg->service as $key => $value) {
                    $locator->addService($value, $key);
                }
            }

            // save cache
            if ($useCache) {
                $cache[$cacheKey] = array(self::$vars, self::$config, self::$locator);
            }
        }


        // check temporary directory
        $dir = self::getVariable('tempDir');
        if ($dir && !(is_dir($dir) && is_writable($dir))) {
            trigger_error("Temporary directory '$dir' is not writable", E_USER_NOTICE);
        }

        // process ini settings
        if ($cfg->set instanceof Config) {
            if (!function_exists('ini_set')) {
                throw new NotSupportedException('Function ini_set() is not enabled.');

                /* or try to use workaround?
                "date.timezone" => "date_default_timezone_set($value);",
                "iconv.internal_encoding" => "iconv_set_encoding('internal_encoding', $value);",
                "mbstring.internal_encoding" => "mb_internal_encoding($value);",
                "include_path" => "set_include_path(strtr($value, ';', PATH_SEPARATOR));",

                if (isset($wa[$key])) {
                    eval($wa[$key]);
                } else {
                    throw new NotSupportedException(...);
                }
                */
            }

            foreach ($cfg->set as $key => $value) {
                ini_set($key, $value);
            }
        }

        // execute services
        /*
        if ($cfg->run) {
            $run = $cfg->run->toArray();
            ksort($run);
            foreach ($run as $value) {
                $a = strrpos($value, ':');
                $service = substr($value, 0, $a - 1);
                $service = $locator->getService($service);
                $method = substr($value, $a + 1);
                $service->$method();
            }
        }
        */

        return $cfg;
    }



    /**
     * Returns the global configuration.
     * @return Config
     */
||||||||    public static function loadConfig($file = NULL, $useCache = NULL)
    {
        if ($file === NULL) {
            $file = '%appDir%/config.ini';
        }

        $name = self::getName();

        if ($useCache === NULL) {
            $useCache = $name === self::PRODUCTION;
        }

        $cache = $useCache ? self::getCache('Nette:Environment') : NULL;

        if (isset($cache[$name])) {
            list(self::$vars, self::$config, self::$locator) = $cache[$name];
            $cfg = self::$config;

        } else {
            if ($file instanceof Config) {
                self::$config = $file;
                $file = NULL;
            } else {
                $file = self::expand($file);
                self::$config = Config::fromFile($file, $name, 0);
            }

            $cfg = self::$config;

            // process environment variables
            if ($cfg->variable instanceof Config) {
                foreach ($cfg->variable as $key => $value) {
                    self::setVariable($key, $value);
                }
            }

            if (isset($cfg->set->include_path)) {
                $cfg->set->include_path = strtr($cfg->set->include_path, ';', PATH_SEPARATOR);
            }

            $cfg->expand();
            $cfg->setReadOnly();

            // process services
            $locator = self::getServiceLocator();
            if ($cfg->service instanceof Config) {
                foreach ($cfg->service as $key => $value) {
                    $locator->addService($value, $key);
                }
            }

            // save cache
            if ($cache) {
                $cache->save($name, array(self::$vars, self::$config, self::$locator), array('files' => $file));
            }
        }


        // check temporary directory - TODO: discuss
        /*
        $dir = self::getVariable('tempDir');
        if ($dir && !(is_dir($dir) && is_writable($dir))) {
            trigger_error("Temporary directory '$dir' is not writable", E_USER_NOTICE);
        }
        */

        // process ini settings
        if ($cfg->set instanceof Config) {
            if (!function_exists('ini_set')) {
                throw new /*::*/NotSupportedException('Function ini_set() is not enabled.');
                /* or try to use workaround?
                "date.timezone" => "date_default_timezone_set($value);",
                "iconv.internal_encoding" => "iconv_set_encoding('internal_encoding', $value);",
                "mbstring.internal_encoding" => "mb_internal_encoding($value);",
                "include_path" => "set_include_path(strtr($value, ';', PATH_SEPARATOR));",
                */
            }

            foreach ($cfg->set as $key => $value) {
                ini_set($key, $value);
            }
        }

        // execute services - TODO: discuss
        /*
        if ($cfg->run) {
            $run = $cfg->run->toArray();
            ksort($run);
            foreach ($run as $value) {
                $a = strrpos($value, ':');
                $service = substr($value, 0, $a - 1);
                $service = $locator->getService($service);
                $method = substr($value, $a + 1);
                $service->$method();
            }
        }
        */

        return $cfg;
    }



    /**
     * Returns the global configuration.
     * @return Config
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_MAGIC_CONST)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR))
                        (AST_STATIC_CALL)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_STATIC_PROP)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_STATIC_PROP)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_STATIC_PROP)
                            (NULL)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_PROP))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_STATIC_CALL)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_PROP))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR)
                                        (AST_CONST)))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_STATIC_PROP)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_STATIC_PROP)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_STATIC_PROP)
                                        (NULL))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_STATIC_PROP)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_STATIC_PROP)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_STATIC_PROP)
                            (NULL)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_PROP))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_STATIC_PROP)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_PROP))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR)
                                        (AST_CONST)))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_STATIC_PROP)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (AST_STATIC_PROP)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (AST_STATIC_PROP)
                                            (NULL)))
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))