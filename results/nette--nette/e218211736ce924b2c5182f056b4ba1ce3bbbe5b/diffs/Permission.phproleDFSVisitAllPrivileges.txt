	private function roleDFSVisitAllPrivileges($role, $resource, &$dfs)
	{
		if (NULL !== ($rules = $this->getRules($resource, $role))) {
			foreach ($rules['byPrivilege'] as $privilege => $rule) {
				if (self::DENY === $this->getRuleType($resource, $role, $privilege)) {
					return self::DENY;
				}
			}
			if (NULL !== ($type = $this->getRuleType($resource, $role, NULL))) {
				return self::ALLOW === $type;
			}
		}

		$dfs['visited'][$role] = TRUE;
		foreach ($this->roles[$role]['parents'] as $roleParent => $foo) {
			$dfs['stack'][] = $roleParent;
		}

		return NULL;
	}



	/**
	 * Performs a depth-first search of the Role DAG, starting at $role, in order to find a rule.
	 * allowing/denying $role access to a $privilege upon $resource
	 *
	 * This method returns TRUE if a rule is found and allows access. If a rule exists and denies access,
	 * then this method returns FALSE. If no applicable rule is found, then this method returns NULL.
	 *
	 * @param  string  role
	 * @param  string  resource
	 * @param  string  privilege
	 * @return bool|NULL
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))
            (
                (AST_FOREACH
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_VAR))))
                                (
                                    (AST_RETURN
                                        (AST_CLASS_CONST
                                            (SCALAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_CONST)))))
                        (
                            (AST_RETURN
                                (AST_BINARY_OP
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_VAR))
        (AST_CONST))
    (AST_FOREACH
        (AST_DIM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (NULL))
                (AST_VAR))))
    (AST_RETURN
        (AST_CONST)))||||||||