	protected function notification(/*Nette::*/IComponent $sender, $message)
	{
		parent::notification($sender, $message);

		$presenter = $this->getPresenter(FALSE);
		if ($message === self::HIERARCHY_ATTACH && $presenter !== NULL) {
			$id = $this->lookupPath('Nette::Application::IPresenter');
			$presenter->registerComponent($id, $this);
			$this->setAction(new Link(
				$presenter,
				'this!',
				array(Presenter::SIGNAL_KEY => "$id-submit")
			));

		} elseif ($message === self::HIERARCHY_DETACH && $presenter !== NULL) {
			// is called before sender's parent is about to be detached
			$presenter->unregisterComponent($this);
		}
	}



	/**
	 * Detects form submission and loads PresenterRequest values.
	 * @return void
	 */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CLASS_CONST
                                            (SCALAR))))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))))||||||||