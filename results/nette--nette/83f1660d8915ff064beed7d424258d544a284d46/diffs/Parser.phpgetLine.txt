	public function getLine()
	{
		return substr_count($this->input, "\n", 0, $this->offset);
	}



	/**
	 * Changes macro delimiters.
	 * @param  string  left regular expression
	 * @param  string  right regular expression
	 * @return Engine  provides a fluent interface
	 */
||||||||	public function getLine()
	{
		return $this->input && $this->offset ? substr_count($this->input, "\n", 0, $this->offset) + 1 : NULL;
	}



	/**
	 * Changes macro delimiters.
	 * @param  string  left regular expression
	 * @param  string  right regular expression
	 * @return Engine  provides a fluent interface
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_CONST))))