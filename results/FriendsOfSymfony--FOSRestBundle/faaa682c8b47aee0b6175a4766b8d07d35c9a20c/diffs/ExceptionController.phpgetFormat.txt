    protected function getFormat(Request $request, $format)
    {
        $priorities = $this->container->getParameter('fos_rest.default_priorities');
        $preferExtension = $this->container->getParameter('fos_rest.prefer_extension');
        $formatNegotiator = $this->container->get('fos_rest.format_negotiator');

        $format = $formatNegotiator->getBestFormat($request, $priorities, $preferExtension) ?: $format;
        $request->attributes->set('_format', $format);

        return $format;
    }

    /**
     * Determine the parameters to pass to the view layer.
     *
     * Overwrite it in a custom ExceptionController class to add additionally parameters
     * that should be passed to the view layer.
     *
     * @param ViewHandler          $viewHandler    The view handler instance
     * @param string               $currentContent The current content in the output buffer
     * @param integer              $code           An HTTP response code
     * @param FlattenException     $exception      A FlattenException instance
     * @param DebugLoggerInterface $logger         A DebugLoggerInterface instance
     * @param string               $format         The format to use for rendering (html, xml, ...)
     *
     * @return array Template parameters
     */
||||||||    protected function getFormat(Request $request, $format)
    {
        $formatNegotiator = $this->container->get('fos_rest.format_negotiator');
        $format = $formatNegotiator->getBestFormat($request) ?: $format;
        $request->attributes->set('_format', $format);

        return $format;
    }

    /**
     * Determine the parameters to pass to the view layer.
     *
     * Overwrite it in a custom ExceptionController class to add additionally parameters
     * that should be passed to the view layer.
     *
     * @param ViewHandler          $viewHandler    The view handler instance
     * @param string               $currentContent The current content in the output buffer
     * @param integer              $code           An HTTP response code
     * @param FlattenException     $exception      A FlattenException instance
     * @param DebugLoggerInterface $logger         A DebugLoggerInterface instance
     * @param string               $format         The format to use for rendering (html, xml, ...)
     *
     * @return array Template parameters
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)))
            (NULL)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (NULL)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))