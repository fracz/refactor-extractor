    public function testPrefixIsResetForEachController()
    {
      // we can't use the getControllerLoader method because we need to verify that the prefix
      // is reset when using the same ControllerLoader for both Controllers.
      $loader = $this->getControllerLoader();

      // get the pattern for the prefixed controller, and verify it is prefixed
      $collection = $loader->load(self::CONTROLLER_FIXTURES . 'AnnotatedPrefixedController', 'rest');
      $prefixedRoute = $collection->get('get_something');
      $this->assertTrue(substr($prefixedRoute->getPattern(), 0, 9) == '/aprefix/');

      // get the pattern for the non-prefixed controller, and verify it's not prefixed
      $collection2 = $loader->load(self::CONTROLLER_FIXTURES . 'UsersController', 'rest');
      $nonPrefixedRoute = $collection2->get('get_users');
      $this->assertFalse(substr($prefixedRoute->getPattern(), 0, 9) == '/aprefix/');
    }

    /**
     * Load routes collection from fixture class under Tests\Fixtures directory.
     *
     * @param   string  $fixtureName    name of the class fixture
     */
||||||||    public function testPrefixIsResetForEachController()
    {
      // we can't use the getControllerLoader method because we need to verify that the prefix
      // is reset when using the same ControllerLoader for both Controllers.
      $loader = $this->getControllerLoader();

      // get the pattern for the prefixed controller, and verify it is prefixed
      $collection = $loader->load('FOS\RestBundle\Tests\Fixtures\Controller\AnnotatedPrefixedController', 'rest');
      $prefixedRoute = $collection->get('get_something');
      $this->assertTrue(substr($prefixedRoute->getPattern(), 0, 9) == '/aprefix/');

      // get the pattern for the non-prefixed controller, and verify it's not prefixed
      $collection2 = $loader->load('FOS\RestBundle\Tests\Fixtures\Controller\UsersController', 'rest');
      $nonPrefixedRoute = $collection2->get('get_users');
      $this->assertFalse(substr($prefixedRoute->getPattern(), 0, 9) == '/aprefix/');
    }

    /**
     * Load routes collection from fixture class under Tests\Fixtures directory.
     *
     * @param   string  $fixtureName    name of the class fixture
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_CLASS_CONST
                        (SCALAR))
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_CLASS_CONST
                        (SCALAR))
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)
                        (SCALAR)))
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)
                        (SCALAR)))
                (SCALAR)))))