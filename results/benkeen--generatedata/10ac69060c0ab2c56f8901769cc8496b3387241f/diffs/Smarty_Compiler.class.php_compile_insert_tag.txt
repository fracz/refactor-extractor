    function _compile_insert_tag($tag_args)
    {
        $attrs = $this->_parse_attrs($tag_args);
        $name = $this->_dequote($attrs['name']);

        if (empty($name)) {
            return $this->_syntax_error("missing insert name", E_USER_ERROR, __FILE__, __LINE__);
        }

        if (!preg_match('~^\w+$~', $name)) {
            return $this->_syntax_error("'insert: 'name' must be an insert function name", E_USER_ERROR, __FILE__, __LINE__);
        }

        if (!empty($attrs['script'])) {
            $delayed_loading = true;
        } else {
            $delayed_loading = false;
        }

        foreach ($attrs as $arg_name => $arg_value) {
            if (is_bool($arg_value))
                $arg_value = $arg_value ? 'true' : 'false';
            $arg_list[] = "'$arg_name' => $arg_value";
        }

        $this->_add_plugin('insert', $name, $delayed_loading);

        $_params = "array('args' => array(".implode(', ', (array)$arg_list)."))";

        return "<?php require_once(SMARTY_CORE_DIR . 'core.run_insert_handler.php');\necho smarty_core_run_insert_handler($_params, \$this); ?>" . $this->_additional_newline;
    }

    /**
     * Compile {include ...} tag
     *
     * @param string $tag_args
     * @return string
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_MAGIC_CONST)
                            (AST_MAGIC_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_MAGIC_CONST)
                            (AST_MAGIC_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONDITIONAL
                                (AST_VAR)
                                (SCALAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CAST
                            (AST_VAR)))))
            (SCALAR)))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))
            (AST_PROP
                (AST_VAR)))))||||||||