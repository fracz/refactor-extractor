||||||||	private function createDataSetTemplate($hash) {
		$numCols  = $hash["gdNumCols"];
		$rowOrder = $hash["gdRowOrder"];
		$rowNums = explode(",", $rowOrder);

		// find out what the user wants to generate
		$templatesByProcessOrder = array();
		$order = 1;
		foreach ($rowNums as $i) {
			$title    = $hash["gdTitle_$i"];
			$dataType = $hash["gdDataType_$i"];

			// if there's no data type, the row wasn't filled in so we just ignore it
			if (empty($dataType)) {
				continue;
			}

			$dataTypeFolder = preg_replace("/^data-type-/", "", $dataType);
			$currDataType = $this->dataTypes[$dataTypeFolder];
			$processOrder = $currDataType->getProcessOrder();
			$options = $currDataType->getRowGenerationOptions($this, $hash, $i, $numCols);

			// the only time $options is false is if this Data Type explicitly returned it, meaning
			// that it was unable to determine the options needed. This could occur if the user didn't enter in
			// appropriate values in the UI and the Data Type failed to catch it via the JS validation
			if ($options !== false) {
				if (!array_key_exists("$processOrder", $templatesByProcessOrder)) {
					$templatesByProcessOrder["$processOrder"] = array();
				}
				$templatesByProcessOrder["$processOrder"][] = array(
					"title"             => $title,
				    "colNum"            => $order,
					"dataTypeFolder"    => $dataTypeFolder,
					"generationOptions" => $options,
					"columnMetadata"    => $currDataType->getDataTypeMetaData()
				);
			}

			$order++;
		}

		// sort by process order and return
		ksort($templatesByProcessOrder, SORT_NUMERIC);
		$this->template = $templatesByProcessOrder;
	}


	/**
	 * This is a helper function for use by the Export Types. It sifts through all the data and returns a hash containing
	 * the information most likely to be needed for generation, namely:
	 * 	  array(
	 *       "isFirstBatch" => (boolean),
	 *       "isLastBatch" => (boolean),
	 *       "colData" => ordered array of the column names,
	 *       "rowData" => an array of arrays. Each top level array
	 *    );
	 *
	 * Using this function is completely optional - it's just provided for convenience.
	 * @return array
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_VAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_ENCAPS_LIST
                                                (AST_VAR))
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_ENCAPS_LIST
                                                (AST_VAR)))
                                        (AST_ARRAY)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_ENCAPS_LIST
                                        (AST_VAR)))
                                (NULL))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))))))
            (AST_POST_INC
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))