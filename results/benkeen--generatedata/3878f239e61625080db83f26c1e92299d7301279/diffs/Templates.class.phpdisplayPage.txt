||||||||	static function displayPage($template, $pageVars = array(), $action = "display") {

		// check the compile directory has the write permissions
		if (!is_writable(Core::$smarty->compile_dir) && is_readable(Core::$smarty->compile_dir)) {
			Templates::displaySeriousError("The <b>/cache</b> folder isn't writable. This folder is used by Smarty to generate temporary files for speedy page loads. You'll need to update that folder's permissions to allow read and write permissions (777 on unix/mac).");
			exit;
		}

		// check that the user is running a recent enough version of PHP. This is needed for json_encode,
		// json_decode and for Smarty 3
		$minimumPHPVersion = Core::getMinimumPHPVersion();
		$currentVersion = PHP_VERSION;
		if (version_compare($currentVersion, $minimumPHPVersion) < 0) {
			Templates::displaySeriousError("Sorry, you need to be running PHP <b>$minimumPHPVersion</b> or later. You're currently running <b>$currentVersion</b>.");
			exit;
		}

		Core::$smarty->assign("L", Core::$language->getCurrentLanguageStrings());
		Core::$smarty->assign("queryString", $_SERVER["QUERY_STRING"]);

		// this sucks. Needs to cache the DB value
		$theme = isset($pageVars["theme"]) ? $pageVars["theme"] : Settings::getSetting("theme");

		Core::$smarty->assign("theme", $theme);

		// now add the custom variables for this template, as defined in $page_vars
		foreach ($pageVars as $key=>$value) {
			Core::$smarty->assign($key, $value);
		}

		try {
			$templatePath = realpath(dirname(__FILE__) . "/../../$template");

			if ($action == "display") {
				Core::$smarty->display($templatePath);
			} else {
				return Core::$smarty->fetch($templatePath);
			}
		} catch (Exception $e) {
			Templates::displaySeriousError("Smarty encountered a problem writing to the /cache folder. The (probably indecipherable) error message returned is:", $e);
			exit;
		}
	}

	/**
	 * Helper function for use by any of the modules (or Core). It lets
	 * @param string $template the template (.tpl file) and path from the Generate Data root.
	 * @param array $placeholders
	 * @return string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_STATIC_PROP)))))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_STATIC_PROP)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))))
                (AST_EXIT
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_STATIC_PROP))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_STATIC_PROP)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_MAGIC_CONST)))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_PROP)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_STATIC_PROP)
                                (
                                    (AST_VAR))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (AST_EXIT
                        (NULL)))))
        (NULL)))