	private function instantiateDataType($baseFolder, $dataTypeFolderName) {

		$dataTypeClassFileName = "{$dataTypeFolderName}.class.php";
	  if (!is_file("$baseFolder/$dataTypeFolderName/$dataTypeClassFileName")) {
	    return false;
	  }

	  // now try to include and instantiate the class [bug...
	  try {
	    include("$baseFolder/$dataTypeFolderName/$dataTypeClassFileName");
	  } catch (Exception $e) {
	  	return false;
	  }

	  $className = "DataType_$dataTypeFolderName";
	  if (!class_exists($className)) {
	  	return false;
	  }


	  $instance = null;
	  try {
      $instance = new $className();
	  } catch (Exception $e) {

	  	return false;
	  }

	  // enforce inheritance of the abstract DataType class
	  if (!($instance instanceof DataType)) {
	  	return false;
	  }

	  return $instance;
	}


	/**
	 * Called by process.php. This includes all data type generate.php files.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_TRY
        (
            (AST_INCLUDE_OR_EVAL
                (AST_ENCAPS_LIST
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_VAR)))||||||||