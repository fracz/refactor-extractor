    public function __get($property_name)
    {
        switch ($property_name) {
            case 'source':
                if (strlen($this->template_resource) == 0) {
                    throw new SmartyException('Missing template name');
                }
                $this->source = Smarty_Resource::source($this);
                // cache template object under a unique ID
                // do not cache eval resources
                if ($this->source->type != 'eval') {
                    if ($this->smarty->allow_ambiguous_resources) {
                        $_templateId = $this->source->unique_resource . $this->cache_id . $this->compile_id;
                    } else {
                        $_templateId = $this->smarty->joined_template_dir . '#' . $this->template_resource . $this->cache_id . $this->compile_id;
                    }

                    if (isset($_templateId[150])) {
                        $_templateId = sha1($_templateId);
                    }
                    $this->smarty->template_objects[$_templateId] = $this;
                }
                return $this->source;

            case 'compiled':
                $this->compiled = $this->source->getCompiled($this);
                return $this->compiled;

            case 'cached':
                if (!class_exists('Smarty_Template_Cached')) {
                    include SMARTY_SYSPLUGINS_DIR . 'smarty_cacheresource.php';
                }
                $this->cached = new Smarty_Template_Cached($this);
                return $this->cached;

            case 'compiler':
                $this->smarty->loadPlugin($this->source->compiler_class);
                $this->compiler = new $this->source->compiler_class($this->source->template_lexer_class, $this->source->template_parser_class, $this->smarty);
                return $this->compiler;

            // FIXME: routing of template -> smarty attributes
            default:
                if (property_exists($this->smarty, $property_name)) {
                    return $this->smarty->$property_name;
                }
        }

        throw new SmartyException("template property '$property_name' does not exist.");
    }

    /**
     * Template data object destrutor
     *
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))
                                (SCALAR))
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (SCALAR)))))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_PROP
                                                            (AST_PROP
                                                                (AST_VAR)))
                                                        (AST_PROP
                                                            (AST_VAR)))
                                                    (AST_PROP
                                                        (AST_VAR))))))
                                    (AST_IF_ELEM
                                        (NULL)
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_PROP
                                                                    (AST_PROP
                                                                        (AST_VAR)))
                                                                (SCALAR))
                                                            (AST_PROP
                                                                (AST_VAR)))
                                                        (AST_PROP
                                                            (AST_VAR)))
                                                    (AST_PROP
                                                        (AST_VAR)))))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_ISSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))))))
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_VAR))
                                    (AST_VAR)))))
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR))))
                            (
                                (AST_INCLUDE_OR_EVAL
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_NEW
                            (
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_NEW
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)))
                            (
                                (AST_RETURN
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))))))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))))))||||||||