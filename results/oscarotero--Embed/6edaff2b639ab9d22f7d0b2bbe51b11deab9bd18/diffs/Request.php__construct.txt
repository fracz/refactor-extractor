    public function __construct($url, $resolverClass = null, array $resolverConfig = array())
    {
        if ($resolverClass !== null) {
            if (!class_exists($resolverClass)) {
                throw new \InvalidArgumentException("This class does not exists");
            }

            $reflection = new \ReflectionClass($resolverClass);

            if (!in_array('Embed\\RequestResolvers\\RequestResolverInterface', $reflection->getInterfaceNames())) {
                throw new \InvalidArgumentException("The resolver class must implement the Embed\\RequestResolvers\\RequestResolverInterface interface");
            }

            $this->resolverClass = $resolverClass;
        }

        $this->resolverConfig = array_replace($this->resolverConfig, $resolverConfig);
        $this->startingUrl = new Url($url);
        $this->parseUrl($url);
    }

    /**
     * Magic method to clean cache on clone the request
     */
||||||||    public function __construct($url, $resolverClass = null, array $resolverConfig = array())
    {
        if ($resolverClass !== null) {
            if (!class_exists($resolverClass)) {
                throw new \InvalidArgumentException("The resolver class '{$resolverClass}' does not exists");
            }

            $reflection = new \ReflectionClass($resolverClass);

            if (!in_array('Embed\\RequestResolvers\\RequestResolverInterface', $reflection->getInterfaceNames())) {
                throw new \InvalidArgumentException("The resolver class must implement the Embed\\RequestResolvers\\RequestResolverInterface interface");
            }

            $this->resolverClass = $resolverClass;
        }

        $this->resolverConfig = array_replace($this->resolverConfig, $resolverConfig);
        $this->startingUrl = new Url($url);
        $this->parseUrl($url);
    }

    /**
     * Magic method to clean cache on clone the request
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))