	public function saveImage ($directory, $replace = false) {
		if (($image = $this->getImage())) {
			$file = base64_encode($image);

			try {
				$info = getimagesize($image);
			} catch (\Exception $Exception) {
				return false;
			}

			switch ($info[2]) {
				case IMAGETYPE_GIF:
					$file .= '.gif';
					break;

				case IMAGETYPE_JPEG:
					$file .= '.jpg';
					break;

				case IMAGETYPE_PNG:
					$file .= '.png';
					break;

				case IMAGETYPE_ICO:
					$file .= '.ico';
					break;
			}

			$file = self::saveFile($image, $directory, $file, $replace);

			if ($file !== false) {
				$this->Provider->set('image', $file);

				return true;
			}
		}

		return false;
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_RETURN
                                    (AST_CONST)))))
                    (NULL))
                (AST_SWITCH
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (AST_CONST)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CONST)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CONST)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CONST)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (SCALAR)
                                    (AST_VAR)))
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_CONST)))||||||||