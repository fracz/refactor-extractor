    public function visitProp(Node $node) : Context
    {
        $property_name = $node->children['prop'];

        // Things like $foo->$bar
        if (!\is_string($property_name)) {
            return $this->context;
        }

        \assert(\is_string($property_name), "Property must be string");

        try {
            $class_list = (new ContextNode(
                $this->code_base,
                $this->context,
                $node->children['expr']
            ))->getClassList();
        } catch (CodeBaseException $exception) {
            // This really shouldn't happen since the code
            // parsed cleanly. This should fatal.
            // throw $exception;
            return $this->context;
        } catch (\Exception $exception) {
            // If we can't figure out what kind of a class
            // this is, don't worry about it
            return $this->context;
        }

        foreach ($class_list as $clazz) {

            // Check to see if this class has the property or
            // a setter
            if (!$clazz->hasPropertyWithName($this->code_base, $property_name)) {
                if (!$clazz->hasMethodWithName($this->code_base, '__set')) {
                    continue;
                }
            }

            try {
                $property = $clazz->getPropertyByNameInContext(
                    $this->code_base,
                    $property_name,
                    $this->context,
                    false
                );
            } catch (IssueException $exception) {
                Issue::maybeEmitInstance(
                    $this->code_base,
                    $this->context,
                    $exception->getIssueInstance()
                );
                return $this->context;
            }

            // If we're assigning to an array element then we don't
            // know what the constitutation of the parameter is
            // outside of the scope of this assignment, so we add to
            // its union type rather than replace it.
            $property_union_type = $property->getUnionType();
            if ($this->is_dim_assignment) {
                if ($this->right_type->canCastToExpandedUnionType(
                        $property_union_type,
                        $this->code_base
                    )
                ) {
                    $property_union_type->addUnionType(
                        $this->right_type
                    );
                } else if ($property_union_type->asExpandedTypes($this->code_base)->hasArrayAccess()) {
                    // Add any type if this is a subclass with array access.
                    $property_union_type->addUnionType(
                        $this->right_type
                    );
                } else {
                    $this->emitIssue(
                        Issue::TypeMismatchProperty,
                        $node->lineno ?? 0,
                        (string)$this->right_type,
                        "{$clazz->getFQSEN()}::{$property->getName()}",
                        (string)$property_union_type
                    );
                    return $this->context;
                }
            } else {
                if (!$this->right_type->canCastToExpandedUnionType(
                        $property_union_type,
                        $this->code_base
                    )
                    && !($this->right_type->hasTypeInBoolFamily() && $property_union_type->hasTypeInBoolFamily())
                    && !$clazz->getHasDynamicProperties($this->code_base)
                ) {
                    // TODO: optionally, change the message from "::" to "->"?
                    $this->emitIssue(
                        Issue::TypeMismatchProperty,
                        $node->lineno ?? 0,
                        (string)$this->right_type,
                        "{$clazz->getFQSEN()}::{$property->getName()}",
                        (string)$property_union_type
                    );

                    return $this->context;
                }
            }

            // After having checked it, add this type to it
            $property->getUnionType()->addUnionType(
                $this->right_type
            );

            return $this->context;
        }

        // Check if it is a built in class with dynamic properties but (possibly) no __set, such as SimpleXMLElement or stdClass or V8Js
        $is_class_with_arbitrary_types = isset($class_list[0]) ? $class_list[0]->getHasDynamicProperties($this->code_base) : false;

        if ($is_class_with_arbitrary_types || Config::getValue('allow_missing_properties')) {
            try {
                // Create the property
                $property = (new ContextNode(
                    $this->code_base,
                    $this->context,
                    $node
                ))->getOrCreateProperty($property_name, false);

                $property->getUnionType()->addUnionType(
                    $this->right_type
                );
            } catch (\Exception $exception) {
                // swallow it
            }
        } elseif (!empty($class_list)) {
            $this->emitIssue(
                Issue::UndeclaredProperty,
                $node->lineno ?? 0,
                "{$class_list[0]->getFQSEN()}->$property_name"
            );
        } else {
            // If we hit this part, we couldn't figure out
            // the class, so we ignore the issue
        }

        return $this->context;
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     *
     * @see $this->visitProp
     */
||||||||    public function visitProp(Node $node) : Context
    {
        $property_name = $node->children['prop'];

        // Things like $foo->$bar
        if (!\is_string($property_name)) {
            return $this->context;
        }

        \assert(\is_string($property_name), "Property must be string");

        try {
            $class_list = (new ContextNode(
                $this->code_base,
                $this->context,
                $node->children['expr']
            ))->getClassList();
        } catch (CodeBaseException $exception) {
            // This really shouldn't happen since the code
            // parsed cleanly. This should fatal.
            // throw $exception;
            return $this->context;
        } catch (\Exception $exception) {
            // If we can't figure out what kind of a class
            // this is, don't worry about it
            return $this->context;
        }

        foreach ($class_list as $clazz) {

            // Check to see if this class has the property or
            // a setter
            if (!$clazz->hasPropertyWithName($this->code_base, $property_name)) {
                if (!$clazz->hasMethodWithName($this->code_base, '__set')) {
                    continue;
                }
            }

            try {
                $property = $clazz->getPropertyByNameInContext(
                    $this->code_base,
                    $property_name,
                    $this->context,
                    false
                );
            } catch (IssueException $exception) {
                Issue::maybeEmitInstance(
                    $this->code_base,
                    $this->context,
                    $exception->getIssueInstance()
                );
                return $this->context;
            }

            // If we're assigning to an array element then we don't
            // know what the constitutation of the parameter is
            // outside of the scope of this assignment, so we add to
            // its union type rather than replace it.
            $property_union_type = $property->getUnionType();
            if ($this->is_dim_assignment) {
                if ($this->right_type->canCastToExpandedUnionType(
                        $property_union_type,
                        $this->code_base
                    )
                ) {
                    $this->addTypesToProperty($property);
                } else if ($property_union_type->asExpandedTypes($this->code_base)->hasArrayAccess()) {
                    // Add any type if this is a subclass with array access.
                    $this->addTypesToProperty($property);
                } else {
                    $this->emitIssue(
                        Issue::TypeMismatchProperty,
                        $node->lineno ?? 0,
                        (string)$this->right_type,
                        "{$clazz->getFQSEN()}::{$property->getName()}",
                        (string)$property_union_type
                    );
                }
                return $this->context;
            } else {
                if (!$this->right_type->canCastToExpandedUnionType(
                        $property_union_type,
                        $this->code_base
                    )
                    && !($this->right_type->hasTypeInBoolFamily() && $property_union_type->hasTypeInBoolFamily())
                    && !$clazz->getHasDynamicProperties($this->code_base)
                ) {
                    // TODO: optionally, change the message from "::" to "->"?
                    $this->emitIssue(
                        Issue::TypeMismatchProperty,
                        $node->lineno ?? 0,
                        (string)$this->right_type,
                        "{$clazz->getFQSEN()}::{$property->getName()}",
                        (string)$property_union_type
                    );

                    return $this->context;
                }
            }

            // After having checked it, add this type to it
            $this->addTypesToProperty($property);

            return $this->context;
        }

        // Check if it is a built in class with dynamic properties but (possibly) no __set, such as SimpleXMLElement or stdClass or V8Js
        $is_class_with_arbitrary_types = isset($class_list[0]) ? $class_list[0]->getHasDynamicProperties($this->code_base) : false;

        if ($is_class_with_arbitrary_types || Config::getValue('allow_missing_properties')) {
            try {
                // Create the property
                $property = (new ContextNode(
                    $this->code_base,
                    $this->context,
                    $node
                ))->getOrCreateProperty($property_name, false);

                $this->addTypesToProperty($property);
            } catch (\Exception $exception) {
                // swallow it
            }
        } elseif (!empty($class_list)) {
            $this->emitIssue(
                Issue::UndeclaredProperty,
                $node->lineno ?? 0,
                "{$class_list[0]->getFQSEN()}->$property_name"
            );
        } else {
            // If we hit this part, we couldn't figure out
            // the class, so we ignore the issue
        }

        return $this->context;
    }

    /**
     * @param Property $property - The property which should have types added to it
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR))))))
        (NULL))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))))
                                (
                                    (AST_CONTINUE
                                        (NULL))))))))
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST)))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_RETURN
                                (AST_PROP
                                    (AST_VAR))))))
                (NULL))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_PROP
                                                            (AST_VAR)))))
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_PROP
                                                            (AST_VAR))))))
                                        (AST_IF_ELEM
                                            (NULL)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_CLASS_CONST
                                                            (SCALAR))
                                                        (AST_BINARY_OP
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (SCALAR))
                                                        (AST_CAST
                                                            (AST_PROP
                                                                (AST_VAR)))
                                                        (AST_ENCAPS_LIST
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))
                                                            (SCALAR)
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)))
                                                        (AST_CAST
                                                            (AST_VAR))))
                                                (AST_RETURN
                                                    (AST_PROP
                                                        (AST_VAR)))))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR))
                                                (
                                                    (AST_VAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))
                                        (AST_UNARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR)))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CLASS_CONST
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_CAST
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (AST_ENCAPS_LIST
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_CAST
                                                (AST_VAR))))
                                    (AST_RETURN
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_RETURN
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR)))
                                (
                                    (AST_VAR)
                                    (AST_CONST))))
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)))
                    (NULL))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR))))))
        (NULL))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))))
                                (
                                    (AST_CONTINUE
                                        (NULL))))))))
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST)))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_RETURN
                                (AST_PROP
                                    (AST_VAR))))))
                (NULL))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_PROP
                                                            (AST_VAR)))))
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR)))))
                                        (AST_IF_ELEM
                                            (NULL)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_CLASS_CONST
                                                            (SCALAR))
                                                        (AST_BINARY_OP
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (SCALAR))
                                                        (AST_CAST
                                                            (AST_PROP
                                                                (AST_VAR)))
                                                        (AST_ENCAPS_LIST
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))
                                                            (SCALAR)
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)))
                                                        (AST_CAST
                                                            (AST_VAR))))))))))
                        (AST_RETURN
                            (AST_PROP
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR))
                                                (
                                                    (AST_VAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))
                                        (AST_UNARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR)))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CLASS_CONST
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_CAST
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (AST_ENCAPS_LIST
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_CAST
                                                (AST_VAR))))
                                    (AST_RETURN
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_RETURN
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR)))
                                (
                                    (AST_VAR)
                                    (AST_CONST))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)))
                    (NULL))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))