||||||||    private function addTypesToProperty(Property $property)
    {
        $property_types = $property->getUnionType();
        $new_types = $this->right_type;
        if ($property_types->isEmpty()) {
            $property_types->addUnionType($new_types);
            return;
        }
        // Don't add MixedType to a non-empty property - It makes inferences on that property useless.
        if ($new_types->hasType(MixedType::instance(false))) {
            $new_types = clone($new_types);
            $new_types->removeType(MixedType::instance(false));
        }
        // TODO: Add an option to check individual types, not just the whole union type?
        //       If that is implemented, verify that generic arrays will properly cast to regular arrays (public $x = [];)
        $property_types->addUnionType($new_types);
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     *
     * @see $this->visitProp
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_CONST)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLONE
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_CONST))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))