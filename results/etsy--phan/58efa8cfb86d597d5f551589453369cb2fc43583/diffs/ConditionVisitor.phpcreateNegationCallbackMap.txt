||||||||    private static function createNegationCallbackMap() : array {
        $remove_empty_cb = function(ConditionVisitor $cv, Node $var_node, Context $context) : Context {
            return $cv->removeFalseyFromVariable($var_node, $context);
        };
        $remove_null_cb = function(ConditionVisitor $cv, Node $var_node, Context $context) : Context {
            return $cv->removeNullFromVariable($var_node, $context);
        };

        // Remove any Types from UnionType that are subclasses of $base_class_name
        $make_basic_negated_assertion_callback = function(string $base_class_name) : \Closure
        {
            return function(ConditionVisitor $cv, Node $var_node, Context $context) use($base_class_name) : Context {
                return $cv->updateVariableWithConditionalFilter(
                    $var_node,
                    $context,
                    function(UnionType $union_type) use($base_class_name) : bool {
                        return $union_type->hasTypeMatchingCallback(function(Type $type) use($base_class_name) : bool {
                            return $type instanceof $base_class_name;
                        });
                    },
                    function(UnionType $union_type) use ($base_class_name) : UnionType {
                        $new_type = new UnionType();
                        $hasNull = false;
                        $hasOtherNullableTypes = false;
                        // Add types which are
                        foreach ($union_type->getTypeSet() as $type) {
                            if ($type instanceof $base_class_name) {
                                $hasNull = $hasNull || $type->getIsNullable();
                                continue;
                            }
                            assert($type instanceof Type);
                            $hasOtherNullableTypes = $hasOtherNullableTypes || $type->getIsNullable();
                            $new_type->addType($type);
                        }
                        // Add Null if some of the rejected types were were nullable, and none of the accepted types were nullable
                        if ($hasNull && !$hasOtherNullableTypes) {
                            $new_type->addType(NullType::instance(false));
                        }
                        return $new_type;
                    }
                );
            };
        };
        $remove_float_callback = $make_basic_negated_assertion_callback(FloatType::class);
        $remove_int_callback = $make_basic_negated_assertion_callback(IntType::class);

        return [
            'empty' => $remove_empty_cb,
            'is_null' => $remove_null_cb,
            'is_array' => $make_basic_negated_assertion_callback(ArrayType::class),
            // 'is_bool' => $make_basic_assertion_callback(BoolType::class),
            'is_callable' => $make_basic_negated_assertion_callback(CallableType::class),
            'is_double' => $remove_float_callback,
            'is_float' => $remove_float_callback,
            'is_int' => $remove_int_callback,
            'is_integer' => $remove_int_callback,
            'is_iterable' => $make_basic_negated_assertion_callback(IterableType::class),  // TODO: Could keep basic array types and classes extending iterable
            'is_long' => $remove_int_callback,
            'is_null' => $remove_null_cb,
            // 'is_numeric' => $make_basic_assertion_callback('string|int|float'),
            // TODO 'is_object' => $remove_object_callback,
            'is_real' => $remove_float_callback,
            'is_resource' => $make_basic_negated_assertion_callback(ResourceType::class),
            'is_scalar' => $make_basic_negated_assertion_callback(ScalarType::class),
            'is_string' => $make_basic_negated_assertion_callback(StringType::class),
        ];
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_CLOSURE
                        (PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_CLOSURE
                                            (PARAM_TYPENO_PARAM_DEFAULT)
                                            (AST_CLOSURE_USES
                                                (AST_CLOSURE_VAR))
                                            (
                                                (AST_RETURN
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_CLOSURE
                                                                (PARAM_TYPENO_PARAM_DEFAULT)
                                                                (AST_CLOSURE_USES
                                                                    (AST_CLOSURE_VAR))
                                                                (
                                                                    (AST_RETURN
                                                                        (AST_INSTANCEOF
                                                                            (AST_VAR)
                                                                            (AST_VAR))))))))))
                                        (AST_CLOSURE
                                            (PARAM_TYPENO_PARAM_DEFAULT)
                                            (AST_CLOSURE_USES
                                                (AST_CLOSURE_VAR))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_NEW))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_CONST))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_CONST))
                                                (AST_FOREACH
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (AST_VAR)
                                                    (NULL)
                                                    (
                                                        (AST_IF
                                                            (AST_IF_ELEM
                                                                (AST_INSTANCEOF
                                                                    (AST_VAR)
                                                                    (AST_VAR))
                                                                (
                                                                    (AST_ASSIGN
                                                                        (AST_VAR)
                                                                        (AST_BINARY_OP
                                                                            (AST_VAR)
                                                                            (AST_METHOD_CALL
                                                                                (AST_VAR))))
                                                                    (AST_CONTINUE
                                                                        (NULL)))))
                                                        (AST_CALL
                                                            (
                                                                (AST_INSTANCEOF
                                                                    (AST_VAR))))
                                                        (AST_ASSIGN
                                                            (AST_VAR)
                                                            (AST_BINARY_OP
                                                                (AST_VAR)
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR))))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (AST_VAR)))))
                                                (AST_IF
                                                    (AST_IF_ELEM
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (AST_UNARY_OP
                                                                (AST_VAR)))
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)
                                                                (
                                                                    (AST_STATIC_CALL
                                                                        (
                                                                            (AST_CONST))))))))
                                                (AST_RETURN
                                                    (AST_VAR)))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (SCALAR)))))