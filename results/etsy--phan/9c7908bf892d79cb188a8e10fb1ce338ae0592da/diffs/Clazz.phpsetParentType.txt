    public function setParentType(Type $parent_type = null)
    {
        if ($this->getInternalScope()->hasAnyTemplateType()) {

            // Get a reference to the local list of templated
            // types. We'll use this to map templated types on the
            // parent to locally templated types.
            $template_type_map =
                $this->getInternalScope()->getTemplateTypeMap();

            // Figure out if the given parent type contains any template
            // types.
            $contains_templated_type = false;
            foreach ($parent_type->getTemplateParameterTypeList() as $i => $union_type) {
                foreach ($union_type->getTypeSet() as $type) {
                    if (isset($template_type_map[$type->getName()])) {
                        $contains_templated_type = true;
                        break 2;
                    }
                }
            }

            // If necessary, map the template parameter type list through the
            // local list of templated types.
            if ($contains_templated_type) {
                $parent_type = Type::fromType(
                    $parent_type,
                    \array_map(function (UnionType $union_type) use ($template_type_map) : UnionType {
                        return new UnionType(
                            \array_map(function (Type $type) use ($template_type_map) : Type {
                                return $template_type_map[$type->getName()] ?? $type;
                            }, $union_type->getTypeSet()->toArray())
                        );
                    }, $parent_type->getTemplateParameterTypeList())
                );
            }
        }

        $this->parent_type = $parent_type;

        // Add the parent to the union type of this class
        $this->getUnionType()->addUnionType(
            $parent_type->asUnionType()
        );
    }

    /**
     * @return bool
     * True if this class has a parent class
     */
||||||||    public function setParentType(Type $parent_type = null)
    {
        if ($this->getInternalScope()->hasAnyTemplateType()) {

            // Get a reference to the local list of templated
            // types. We'll use this to map templated types on the
            // parent to locally templated types.
            $template_type_map =
                $this->getInternalScope()->getTemplateTypeMap();

            // Figure out if the given parent type contains any template
            // types.
            $contains_templated_type = false;
            foreach ($parent_type->getTemplateParameterTypeList() as $i => $union_type) {
                foreach ($union_type->getTypeSet() as $type) {
                    if (isset($template_type_map[$type->getName()])) {
                        $contains_templated_type = true;
                        break 2;
                    }
                }
            }

            // If necessary, map the template parameter type list through the
            // local list of templated types.
            if ($contains_templated_type) {
                $parent_type = Type::fromType(
                    $parent_type,
                    \array_map(function (UnionType $union_type) use ($template_type_map) : UnionType {
                        return new UnionType(
                            \array_map(function (Type $type) use ($template_type_map) : Type {
                                return $template_type_map[$type->getName()] ?? $type;
                            }, $union_type->getTypeSet())
                        );
                    }, $parent_type->getTemplateParameterTypeList())
                );
            }
        }

        $this->parent_type = $parent_type;

        // Add the parent to the union type of this class
        $this->getUnionType()->addUnionType(
            $parent_type->asUnionType()
        );
    }

    /**
     * @return bool
     * True if this class has a parent class
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_FOREACH
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_ISSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_CONST))
                                            (AST_BREAK
                                                (SCALAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_CLOSURE
                                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                                    (AST_CLOSURE_USES
                                                        (AST_CLOSURE_VAR))
                                                    (
                                                        (AST_RETURN
                                                            (AST_NEW
                                                                (
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_CLOSURE
                                                                                (PARAM_TYPENO_PARAM_DEFAULT)
                                                                                (AST_CLOSURE_USES
                                                                                    (AST_CLOSURE_VAR))
                                                                                (
                                                                                    (AST_RETURN
                                                                                        (AST_BINARY_OP
                                                                                            (AST_DIM
                                                                                                (AST_VAR)
                                                                                                (AST_METHOD_CALL
                                                                                                    (AST_VAR)))
                                                                                            (AST_VAR)))))
                                                                            (AST_METHOD_CALL
                                                                                (AST_METHOD_CALL
                                                                                    (AST_VAR))))))))))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_FOREACH
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_ISSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_CONST))
                                            (AST_BREAK
                                                (SCALAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_CLOSURE
                                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                                    (AST_CLOSURE_USES
                                                        (AST_CLOSURE_VAR))
                                                    (
                                                        (AST_RETURN
                                                            (AST_NEW
                                                                (
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_CLOSURE
                                                                                (PARAM_TYPENO_PARAM_DEFAULT)
                                                                                (AST_CLOSURE_USES
                                                                                    (AST_CLOSURE_VAR))
                                                                                (
                                                                                    (AST_RETURN
                                                                                        (AST_BINARY_OP
                                                                                            (AST_DIM
                                                                                                (AST_VAR)
                                                                                                (AST_METHOD_CALL
                                                                                                    (AST_VAR)))
                                                                                            (AST_VAR)))))
                                                                            (AST_METHOD_CALL
                                                                                (AST_VAR)))))))))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_METHOD_CALL
                (AST_VAR)))))