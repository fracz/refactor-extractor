    public function asClassList(
        CodeBase $code_base,
        Context $context
    ) {
        // Iterate over each viable class type to see if any
        // have the constant we're looking for
        foreach ($this->nonNativeTypes()->getTypeSet() as $class_type) {

            // Get the class FQSEN
            $class_fqsen = $class_type->asFQSEN();

            if ($class_type->isStaticType()) {
                if (!$context->isInClassScope()) {
                    throw new IssueException(
                        Issue::fromType(Issue::ContextNotObject)(
                            $context->getFile(),
                            $context->getLineNumberStart(),
                            [
                                (string)$class_type
                            ]
                        )
                    );

                }
                yield $context->getClassInScope($code_base);
            } else {
                // See if the class exists
                if (!$code_base->hasClassWithFQSEN($class_fqsen)) {
                    throw new CodeBaseException(
                        $class_fqsen,
                        "Cannot find class $class_fqsen"
                    );
                }

                yield $code_base->getClassByFQSEN($class_fqsen);
            }
        }
    }

    /**
     * Takes "a|b[]|c|d[]|e" and returns "a|c|e"
     *
     * @return UnionType
     * A UnionType with generic array types filtered out
     *
     * @see \Phan\Deprecated\Pass2::nongenerics
     * Formerly `function nongenerics`
     */
||||||||    public function asClassList(
        CodeBase $code_base,
        Context $context
    ) {
        // Iterate over each viable class type to see if any
        // have the constant we're looking for
        foreach ($this->nonNativeTypes()->type_set as $class_type) {

            // Get the class FQSEN
            $class_fqsen = $class_type->asFQSEN();
            \assert($class_fqsen instanceof FullyQualifiedClassName);

            if ($class_type->isStaticType()) {
                if (!$context->isInClassScope()) {
                    throw new IssueException(
                        Issue::fromType(Issue::ContextNotObject)(
                            $context->getFile(),
                            $context->getLineNumberStart(),
                            [
                                (string)$class_type
                            ]
                        )
                    );

                }
                yield $context->getClassInScope($code_base);
            } else {
                // See if the class exists
                if (!$code_base->hasClassWithFQSEN($class_fqsen)) {
                    throw new CodeBaseException(
                        $class_fqsen,
                        "Cannot find class $class_fqsen"
                    );
                }

                yield $code_base->getClassByFQSEN($class_fqsen);
            }
        }
    }

    /**
     * Takes "a|b[]|c|d[]|e" and returns "a|c|e"
     *
     * @return UnionType
     * A UnionType with generic array types filtered out
     *
     * @see \Phan\Deprecated\Pass2::nongenerics
     * Formerly `function nongenerics`
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_CALL
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_CLASS_CONST
                                                                (SCALAR))))
                                                    (
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_ARRAY
                                                            (AST_ARRAY_ELEM
                                                                (AST_CAST
                                                                    (AST_VAR))
                                                                (NULL)))))))))))
                        (AST_YIELD
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (NULL))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_VAR)
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR))))))))
                        (AST_YIELD
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (NULL))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_PROP
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_INSTANCEOF
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_CALL
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_CLASS_CONST
                                                                (SCALAR))))
                                                    (
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_ARRAY
                                                            (AST_ARRAY_ELEM
                                                                (AST_CAST
                                                                    (AST_VAR))
                                                                (NULL)))))))))))
                        (AST_YIELD
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (NULL))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_VAR)
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR))))))))
                        (AST_YIELD
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (NULL))))))))