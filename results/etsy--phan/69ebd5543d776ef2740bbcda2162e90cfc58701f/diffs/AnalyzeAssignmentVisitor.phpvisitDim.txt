||||||||    public function visitDim(Node $node) : Context {
        $variable_name = AST::variableName($node);

        $variable = null;

        // Check to see if the variable is not yet defined
        if ($this->context->getScope()->hasVariableWithName(
            $variable_name
        )) {
            $variable =
                $this->context->getScope()->getVariableWithName(
                    $variable_name
                );

        // If it didn't exist, create the variable
        } else {
            $variable = Variable::fromNodeInContext(
                $node,
                $this->context
            );
        }

        // Make the right type a generic (i.e. int -> int[])
        $right_type =
            $this->right_type->asGenericTypes();

        if (!$right_type->canCastToExpandedUnionType(
            $variable->getUnionType(),
            $this->context->getCodeBase()
        )) {
            Log::err(
                Log::ETYPE,
                "assigning {$this->right_type} to {$variable->getName()}[] but {$variable->getName()} is declared to be an array of {$variable->getUnionType()->asNonGenericTypes()}",
                $this->context->getFile(),
                $node->lineno
            );
        }

        // After having checked that the types work out, add
        // the right-type to the property for future analysis
        $variable->getUnionType()->addUnionType(
            $right_type
        );

        return $this->context;
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))