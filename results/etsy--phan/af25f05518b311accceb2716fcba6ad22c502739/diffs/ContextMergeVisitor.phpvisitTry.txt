    public function visitTry(Node $node) : Context
    {
        // Get the list of scopes for each branch of the
        // conditional
        $scope_list = array_map(function (Context $context) {
            return $context->getScope();
        }, $this->child_context_list);

        // The 0th scope is the scope from Try
        $try_scope = $scope_list[0];

        $catch_scope_list = [];
        foreach ($node->children['catches'] ?? [] as $i => $catch_node) {
            $catch_scope_list[] = $scope_list[((int)$i)+1];
        }

        // Merge in the types for any variables found in a catch.
        foreach ($try_scope->getVariableMap() as $variable_name => $variable) {
            foreach ($catch_scope_list as $catch_scope) {

                // Merge types if try and catch have a variable in common
                if ($catch_scope->hasVariableWithName($variable_name)) {
                    $catch_variable = $catch_scope->getVariableByName(
                        $variable_name
                    );

                    $variable->getUnionType()->addUnionType(
                        $catch_variable->getUnionType()
                    );
                }
            }
        }

        // Look for variables that exist in catch, but not try
        foreach ($catch_scope_list as $catch_scope) {
            foreach ($catch_scope->getVariableMap() as $variable_name => $variable) {
                if (!$try_scope->hasVariableWithName($variable_name)) {

                    // Note that it can be null
                    $variable->getUnionType()->addType(
                        NullType::instance(false)
                    );

                    // Add it to the try scope
                    $try_scope->addVariable($variable);
                }
            }
        }

        // If we have a finally, overwite types for each
        // element
        if (!empty($node->children['finallyStmts'])
            || !empty($node->children['finally'])
        ) {
            $finally_scope = $scope_list[count($scope_list)-1];

            foreach ($try_scope->getVariableMap() as $variable_name => $variable) {
                if ($finally_scope->hasVariableWithName($variable_name)) {
                    $finally_variable =
                        $finally_scope->getVariableByName($variable_name);

                    // Overwrite the variable with the type from the
                    // finally
                    if (!$finally_variable->getUnionType()->isEmpty()) {
                        $variable->setUnionType(
                            $finally_variable->getUnionType()
                        );
                    }
                }
            }

            // Look for variables that exist in finally, but not try
            foreach ($finally_scope->getVariableMap() as $variable_name => $variable) {
                if (!$try_scope->hasVariableWithName($variable_name)) {
                    $try_scope->addVariable($variable);
                }
            }
        }

        // Return the context of the try with the types of
        // variables within its scope limited appropriately
        return $this->child_context_list[0];
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||    public function visitTry(Node $node) : Context
    {
        // Get the list of scopes for each branch of the
        // conditional
        $scope_list = array_map(function (Context $context) {
            return $context->getScope();
        }, $this->child_context_list);

        // The 0th scope is the scope from Try
        $try_scope = $scope_list[0];

        $catch_scope_list = [];
        foreach ($node->children['catches'] ?? [] as $i => $catch_node) {
            $catch_scope_list[] = $scope_list[((int)$i)+1];
        }

        // Merge in the types for any variables found in a catch.
        foreach ($try_scope->getVariableMap() as $variable_name => $variable) {
            $variable_name = (string)$variable_name;  // e.g. ${42}
            foreach ($catch_scope_list as $catch_scope) {

                // Merge types if try and catch have a variable in common
                if ($catch_scope->hasVariableWithName($variable_name)) {
                    $catch_variable = $catch_scope->getVariableByName(
                        $variable_name
                    );

                    $variable->getUnionType()->addUnionType(
                        $catch_variable->getUnionType()
                    );
                }
            }
        }

        // Look for variables that exist in catch, but not try
        foreach ($catch_scope_list as $catch_scope) {
            foreach ($catch_scope->getVariableMap() as $variable_name => $variable) {
                $variable_name = (string)$variable_name;
                if (!$try_scope->hasVariableWithName($variable_name)) {

                    // Note that it can be null
                    $variable->getUnionType()->addType(
                        NullType::instance(false)
                    );

                    // Add it to the try scope
                    $try_scope->addVariable($variable);
                }
            }
        }

        // If we have a finally, overwite types for each
        // element
        if (!empty($node->children['finallyStmts'])
            || !empty($node->children['finally'])
        ) {
            $finally_scope = $scope_list[count($scope_list)-1];

            foreach ($try_scope->getVariableMap() as $variable_name => $variable) {
                if ($finally_scope->hasVariableWithName($variable_name)) {
                    $finally_variable =
                        $finally_scope->getVariableByName($variable_name);

                    // Overwrite the variable with the type from the
                    // finally
                    if (!$finally_variable->getUnionType()->isEmpty()) {
                        $variable->setUnionType(
                            $finally_variable->getUnionType()
                        );
                    }
                }
            }

            // Look for variables that exist in finally, but not try
            foreach ($finally_scope->getVariableMap() as $variable_name => $variable) {
                if (!$try_scope->hasVariableWithName($variable_name)) {
                    $try_scope->addVariable($variable);
                }
            }
        }

        // Return the context of the try with the types of
        // variables within its scope limited appropriately
        return $this->child_context_list[0];
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_BINARY_OP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CAST
                            (AST_VAR))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CONST)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_UNARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))))))))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))))))))
    (AST_RETURN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))))||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_BINARY_OP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CAST
                            (AST_VAR))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CAST
                    (AST_VAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CAST
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CONST)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_UNARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))))))))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))))))))
    (AST_RETURN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))))