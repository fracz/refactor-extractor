    public static function accept(CodeBase $code_base, \Closure $file_path_lister, $conn) {
        Daemon::debugf("Got a connection");  // debugging code
        // Efficient for large strings, e.g. long file lists.
        $data = [];
        while (!feof($conn)) {
            $data[] = fgets($conn);
        }
        $request_bytes = implode('', $data);
        $request = json_decode($request_bytes, true);
        if (!is_array($request)) {
            Daemon::debugf("Received invalid request, expected JSON: %s", json_encode($request_bytes));
            self::sendJSONResponseOverSocket($conn, [
                'status'  => self::STATUS_INVALID_REQUEST,
                'message' => 'malformed JSON',
            ]);
            return null;
        }
        $method = $request['method'] ?? null;
        switch($method) {
        case 'analyze_all':
            // Analyze the default list of files. No expected params.
            break;
        case 'analyze_file':
            $method = 'analyze_files';
            $request = [
                self::PARAM_METHOD => $method,
                self::PARAM_FILES => [$request['file']],
                self::PARAM_FORMAT => $request[self::PARAM_FORMAT] ?? 'json',
            ];
            // Fall through, this is an alias of analyze_files
        case 'analyze_files':
            // Analyze the list of strings provided in "files"
            // TODO: Actually do that.
            $files = $request[self::PARAM_FILES] ?? null;
            $request[self::PARAM_FORMAT] = $request[self::PARAM_FORMAT] ?? 'json';
            $error_message = null;
            if (is_array($files) && count($files)) {
                foreach ($files as $file) {
                    if (!is_string($file)) {
                        $error_message = 'Passed non-string in list of files';
                        break;
                    }
                }
            } else {
                $error_message = 'Must pass a non-empty array of file paths for field files';
            }
            if ($error_message !== null) {
                Daemon::debugf($error_message);
                self::sendJSONResponseOverSocket($conn, [
                    'status'  => self::STATUS_INVALID_FILES,
                    'message' => $error_message,
                ]);
                return null;
            }
            break;
        // TODO(optional): add APIs to resolve types of variables/properties/etc (e.g. accept byte offset or line/column offset)
        default:
            $message = sprintf("expected method to be analyze_all or analyze_files, got %s", json_encode($method));
            Daemon::debugf($message);
            self::sendJSONResponseOverSocket($conn, [
                'status'  => self::STATUS_INVALID_METHOD,
                'message' => $message,
            ]);
            return null;
        }

        self::reloadFilePathListForDaemon($code_base, $file_path_lister);
        $receivedSignal = false;

        $fork_result = pcntl_fork();
        if ($fork_result < 0) {
            error_log("The daemon failed to fork. Going to terminate");
        } else if ($fork_result == 0) {
            Daemon::debugf("This is the fork");
            self::$child_pids = [];
            // TODO: Re-parse the file list.
            return new self($conn, $request);;
        } else {
            $pid = $fork_result;
            $status = self::$exited_pid_status[$pid] ?? null;
            if (isset($status)) {
                Daemon::debugf("child process %d already exited", $pid);
                self::childSignalHandler(SIGCHLD, $status, $pid);
                unset(self::$exited_pid_status[$pid]);
            } else {
                self::$child_pids[$pid] = true;
            }

            // TODO: Parse the new file list **before forking**, not after forking.
            // TODO: Use http://php.net/manual/en/book.inotify.php if available, watch all directories if available.
            // Daemon continues to execute.
            self::$child_pids[] = $fork_result;
            Daemon::debugf("Created a child pid %d", $fork_result);
        }
        return null;
    }

    /**
     * Reloads the file path list.
     * @return void
     */
||||||||    public static function accept(CodeBase $code_base, \Closure $file_path_lister, $conn) {
        Daemon::debugf("Got a connection");  // debugging code
        // Efficient for large strings, e.g. long file lists.
        $data = [];
        while (!feof($conn)) {
            $data[] = fgets($conn);
        }
        $request_bytes = implode('', $data);
        $request = json_decode($request_bytes, true);
        if (!is_array($request)) {
            Daemon::debugf("Received invalid request, expected JSON: %s", json_encode($request_bytes));
            self::sendJSONResponseOverSocket($conn, [
                'status'  => self::STATUS_INVALID_REQUEST,
                'message' => 'malformed JSON',
            ]);
            return null;
        }
        $method = $request['method'] ?? null;
        switch($method) {
        case 'analyze_all':
            // Analyze the default list of files. No expected params.
            break;
        case 'analyze_file':
            $method = 'analyze_files';
            $request = [
                self::PARAM_METHOD => $method,
                self::PARAM_FILES => [$request['file']],
                self::PARAM_FORMAT => $request[self::PARAM_FORMAT] ?? 'json',
            ];
            // Fall through, this is an alias of analyze_files
        case 'analyze_files':
            // Analyze the list of strings provided in "files"
            // TODO: Actually do that.
            $files = $request[self::PARAM_FILES] ?? null;
            $request[self::PARAM_FORMAT] = $request[self::PARAM_FORMAT] ?? 'json';
            $error_message = null;
            if (is_array($files) && count($files)) {
                foreach ($files as $file) {
                    if (!is_string($file)) {
                        $error_message = 'Passed non-string in list of files';
                        break;
                    }
                }
            } else {
                $error_message = 'Must pass a non-empty array of file paths for field files';
            }
            if (is_null($error_message)) {
                $file_mapping_contents = $request[self::PARAM_TEMPORARY_FILE_MAPPING_CONTENTS] ?? [];
                if (!is_array($file_mapping_contents)) {
                    $error_message = 'Invalid value of temporary_file_mapping_contents';
                }
                $new_file_mapping_contents = [];
                foreach ($file_mapping_contents ?? [] as $file => $contents) {
                    $new_file_mapping_contents[FileRef::getProjectRelativePathForPath($file)] = $contents;
                    if (!is_string($file)) {
                        $error_message = 'Passed non-string in list of files to map';
                        break;
                    } else if (!is_string($contents)) {
                        $error_message = 'Passed non-string in as new file contents';
                    }
                }
                $request[self::PARAM_TEMPORARY_FILE_MAPPING_CONTENTS] = $new_file_mapping_contents;
            }
            if ($error_message !== null) {
                Daemon::debugf($error_message);
                self::sendJSONResponseOverSocket($conn, [
                    'status'  => self::STATUS_INVALID_FILES,
                    'message' => $error_message,
                ]);
                return null;
            }
            break;
        // TODO(optional): add APIs to resolve types of variables/properties/etc (e.g. accept byte offset or line/column offset)
        default:
            $message = sprintf("expected method to be analyze_all or analyze_files, got %s", json_encode($method));
            Daemon::debugf($message);
            self::sendJSONResponseOverSocket($conn, [
                'status'  => self::STATUS_INVALID_METHOD,
                'message' => $message,
            ]);
            return null;
        }

        self::reloadFilePathListForDaemon($code_base, $file_path_lister);
        $receivedSignal = false;

        $fork_result = pcntl_fork();
        if ($fork_result < 0) {
            error_log("The daemon failed to fork. Going to terminate");
        } else if ($fork_result == 0) {
            Daemon::debugf("This is the fork");
            self::$child_pids = [];
            // TODO: Re-parse the file list.
            $request_obj = new self($conn, $request);
            $temporary_file_mapping = $request_obj->getTemporaryFileMapping();
            if (count($temporary_file_mapping) > 0) {
                self::applyTemporaryFileMappingForParsePhase($code_base, $temporary_file_mapping);
            }
            return $request_obj;
        } else {
            $pid = $fork_result;
            $status = self::$exited_pid_status[$pid] ?? null;
            if (isset($status)) {
                Daemon::debugf("child process %d already exited", $pid);
                self::childSignalHandler(SIGCHLD, $status, $pid);
                unset(self::$exited_pid_status[$pid]);
            } else {
                self::$child_pids[$pid] = true;
            }

            // TODO: Parse the new file list **before forking**, not after forking.
            // TODO: Use http://php.net/manual/en/book.inotify.php if available, watch all directories if available.
            // Daemon continues to execute.
            self::$child_pids[] = $fork_result;
            Daemon::debugf("Created a child pid %d", $fork_result);
        }
        return null;
    }

    /**
     * Reloads the file path list.
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR))))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (NULL)))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_CONST)))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (
                                (AST_FOREACH
                                    (AST_VAR)
                                    (AST_VAR)
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_UNARY_OP
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR))))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_BREAK
                                                        (NULL)))))))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR)))))
                                (AST_RETURN
                                    (AST_CONST)))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_RETURN
                        (AST_CONST))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_STATIC_PROP)
                                (AST_ARRAY))
                            (AST_RETURN
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (AST_VAR))
                                    (AST_CONST)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_ISSET
                                        (AST_VAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)))
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CONST)
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_UNSET
                                            (AST_DIM
                                                (AST_STATIC_PROP)
                                                (AST_VAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN
                                            (AST_DIM
                                                (AST_STATIC_PROP)
                                                (AST_VAR))
                                            (AST_CONST)))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (NULL))
                                (AST_VAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR))))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (NULL)))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_CONST)))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONST))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (
                                (AST_FOREACH
                                    (AST_VAR)
                                    (AST_VAR)
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_UNARY_OP
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR))))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_BREAK
                                                        (NULL)))))))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (AST_ARRAY)))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (SCALAR)))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_ARRAY))
                                (AST_FOREACH
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_ARRAY))
                                    (AST_VAR)
                                    (AST_VAR)
                                    (
                                        (AST_ASSIGN
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR))))
                                            (AST_VAR))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_UNARY_OP
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR))))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_BREAK
                                                        (NULL))))
                                            (AST_IF_ELEM
                                                (NULL)
                                                (
                                                    (AST_IF
                                                        (AST_IF_ELEM
                                                            (AST_UNARY_OP
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR))))
                                                            (
                                                                (AST_ASSIGN
                                                                    (AST_VAR)
                                                                    (SCALAR))))))))))
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR)))))
                                (AST_RETURN
                                    (AST_CONST)))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_RETURN
                        (AST_CONST))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_STATIC_PROP)
                                (AST_ARRAY))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))))
                            (AST_RETURN
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (AST_VAR))
                                    (AST_CONST)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_ISSET
                                        (AST_VAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)))
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CONST)
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_UNSET
                                            (AST_DIM
                                                (AST_STATIC_PROP)
                                                (AST_VAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN
                                            (AST_DIM
                                                (AST_STATIC_PROP)
                                                (AST_VAR))
                                            (AST_CONST)))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (NULL))
                                (AST_VAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_CONST)))