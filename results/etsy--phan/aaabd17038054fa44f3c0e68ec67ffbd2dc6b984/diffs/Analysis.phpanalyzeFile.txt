    public static function analyzeFile(
        CodeBase $code_base,
        string $file_path
    ) : Context {
        // Set the file on the context
        $context = (new Context)->withFile($file_path);

        // Convert the file to an Abstract Syntax Tree
        // before passing it on to the recursive version
        // of this method
        try {
            $node = \ast\parse_file(
                Config::projectPath($file_path),
                Config::get()->ast_version
            );
        } catch (\ParseError $parse_error) {
            Issue::maybeEmit(
                $code_base,
                $context,
                Issue::SyntaxError,
                $parse_error->getLine(),
                $parse_error->getMessage()
            );
            return $context;
        }

        // Ensure we have some content
        if (empty($node)) {
            Issue::maybeEmit(
                $code_base,
                $context,
                Issue::EmptyFile,
                0,
                $file_path
            );
            return $context;
        }

        return (new BlockAnalysisVisitor($code_base, $context))($node);
    }
}||||||||    public static function analyzeFile(
        CodeBase $code_base,
        string $file_path,
        string $file_contents_override = null
    ) : Context {
        // Set the file on the context
        $context = (new Context)->withFile($file_path);

        // Convert the file to an Abstract Syntax Tree
        // before passing it on to the recursive version
        // of this method
        try {
            if (is_string($file_contents_override)) {
                $node = \ast\parse_code(
                    $file_contents_override,
                    Config::get()->ast_version
                );
            } else {
                $node = \ast\parse_file(
                    Config::projectPath($file_path),
                    Config::get()->ast_version
                );
            }
        } catch (\ParseError $parse_error) {
            Issue::maybeEmit(
                $code_base,
                $context,
                Issue::SyntaxError,
                $parse_error->getLine(),
                $parse_error->getMessage()
            );
            return $context;
        }

        // Ensure we have some content
        if (empty($node)) {
            Issue::maybeEmit(
                $code_base,
                $context,
                Issue::EmptyFile,
                0,
                $file_path
            );
            return $context;
        }

        return (new BlockAnalysisVisitor($code_base, $context))($node);
    }
}||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_NEW)
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_PROP
                            (AST_STATIC_CALL))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_VAR)))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)
                        (AST_VAR)))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_NEW)
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_STATIC_CALL)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_PROP
                                        (AST_STATIC_CALL)))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_VAR)))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)
                        (AST_VAR)))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_VAR)))))