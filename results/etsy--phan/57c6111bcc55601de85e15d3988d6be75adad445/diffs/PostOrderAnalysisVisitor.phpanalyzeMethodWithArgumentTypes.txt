    private function analyzeMethodWithArgumentTypes(
        CodeBase $code_base,
        Node $argument_list_node,
        FunctionInterface $method
    ) {
        // Don't re-analyze recursive methods. That doesn't go
        // well.
        if ($this->context->isInFunctionLikeScope()
            && $method->getFQSEN() === $this->context->getFunctionLikeFQSEN()
        ) {
            return;
        }

        // Create a copy of the method's original parameter list
        // and scope so that we can reset it after re-analyzing
        // it.
        $original_method_scope = clone($method->getInternalScope());
        $original_parameter_list = array_map(function (Variable $parameter) : Variable {
            return clone($parameter);
        }, $method->getParameterList());

        // always resolve all arguments outside of quick mode to detect undefined variables, other problems in call arguments.
        // Fixes https://github.com/etsy/phan/issues/583
        $argument_types = [];
        foreach ($argument_list_node->children as $i => $argument) {
            if (!$argument) {
                continue;
            }
            // Determine the type of the argument at position $i
            $argument_types[$i] = UnionType::fromNode(
                $this->context,
                $this->code_base,
                $argument
            );
        }

        // Get the list of parameters on the method
        $parameter_list = $method->getParameterList();

        foreach ($parameter_list as $i => $parameter) {

            $argument = $argument_list_node->children[$i] ?? null;

            if (!$argument
                && $parameter->hasDefaultValue()
            ) {
                $parameter_list = $method->getParameterList();
                $parameter_list[$i] = clone($parameter);
                $parameter_type = $parameter->getDefaultValueType();
                if ($parameter_type->isType(NullType::instance(false))) {
                    // Treat a parameter default of null the same way as passing null to that parameter
                    // (Add null to the list of possibilities)
                    $parameter_list[$i]->addUnionType($parameter_type);
                } else {
                    // For other types (E.g. string), just replace the union type.
                    $parameter_list[$i]->setUnionType($parameter_type);
                }
                $method->setParameterList($parameter_list);
            }

            // If there's no parameter at that offset, we may be in
            // a ParamTooMany situation. That is caught elsewhere.
            if (!$argument
                || !$parameter->getNonVariadicUnionType()->isEmpty()
            ) {
                continue;
            }

            $this->updateParameterTypeByArgument(
                $method,
                $parameter,
                $argument,
                $argument_types[$i],
                $i
            );
        }

        // Now that we know something about the parameters used
        // to call the method, we can reanalyze the method with
        // the types of the parameter
        $method->analyze($method->getContext(), $code_base);

        // Reset to the original parameter list and scope after
        // having tested the parameters with the types passed in
        $method->setParameterList($original_parameter_list);
        $method->setInternalScope($original_method_scope);
    }

    /**
     * @param FunctionInterface $method
     * The method that we're updating parameter types for
     *
     * @param Parameter $parameter
     * The parameter that we're updating
     *
     * @param Node|mixed $argument
     * The argument whose type we'd like to replace the
     * parameter type with.
     *
     * @param Node|mixed $argument_type
     * The type of $argument
     *
     * @param int $parameter_offset
     * The offset of the parameter on the method's
     * signature.
     *
     * @return void
     */
||||||||    private function analyzeMethodWithArgumentTypes(
        CodeBase $code_base,
        Node $argument_list_node,
        FunctionInterface $method
    ) {
        // Don't re-analyze recursive methods. That doesn't go
        // well.
        if ($this->context->isInFunctionLikeScope()
            && $method->getFQSEN() === $this->context->getFunctionLikeFQSEN()
        ) {
            return;
        }

        // Create a copy of the method's original parameter list
        // and scope so that we can reset it after re-analyzing
        // it.
        $original_method_scope = clone($method->getInternalScope());
        $original_parameter_list = array_map(function (Variable $parameter) : Variable {
            return clone($parameter);
        }, $method->getParameterList());

        if (count($original_parameter_list) === 0) {
            return;  // No point in recursing if there's no changed parameters.
        }

        // always resolve all arguments outside of quick mode to detect undefined variables, other problems in call arguments.
        // Fixes https://github.com/etsy/phan/issues/583
        $argument_types = [];
        foreach ($argument_list_node->children as $i => $argument) {
            if (!$argument) {
                continue;
            }
            // Determine the type of the argument at position $i
            $argument_types[$i] = UnionType::fromNode(
                $this->context,
                $this->code_base,
                $argument
            );
        }

        // Get the list of parameters on the method
        $parameter_list = $method->getParameterList();

        foreach ($parameter_list as $i => $parameter) {

            $argument = $argument_list_node->children[$i] ?? null;

            if (!$argument
                && $parameter->hasDefaultValue()
            ) {
                $parameter_list = $method->getParameterList();
                $parameter_list[$i] = clone($parameter);
                $parameter_type = $parameter->getDefaultValueType();
                if ($parameter_type->isType(NullType::instance(false))) {
                    // Treat a parameter default of null the same way as passing null to that parameter
                    // (Add null to the list of possibilities)
                    $parameter_list[$i]->addUnionType($parameter_type);
                } else {
                    // For other types (E.g. string), just replace the union type.
                    $parameter_list[$i]->setUnionType($parameter_type);
                }
                $method->setParameterList($parameter_list);
            }

            // If there's no parameter at that offset, we may be in
            // a ParamTooMany situation. That is caught elsewhere.
            if (!$argument
                || !$parameter->getNonVariadicUnionType()->isEmpty()
            ) {
                continue;
            }

            $this->updateParameterTypeByArgument(
                $method,
                $parameter,
                $argument,
                $argument_types[$i],
                $i
            );
        }

        // Now that we know something about the parameters used
        // to call the method, we can reanalyze the method with
        // the types of the parameter
        $method->analyzeWithNewParams($method->getContext(), $code_base);

        // Reset to the original parameter list and scope after
        // having tested the parameters with the types passed in
        $method->setParameterList($original_parameter_list);
        $method->setInternalScope($original_method_scope);
    }

    /**
     * @param FunctionInterface $method
     * The method that we're updating parameter types for
     *
     * @param Parameter $parameter
     * The parameter that we're updating
     *
     * @param Node|mixed $argument
     * The argument whose type we'd like to replace the
     * parameter type with.
     *
     * @param Node|mixed $argument_type
     * The type of $argument
     *
     * @param int $parameter_offset
     * The offset of the parameter on the method's
     * signature.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLONE
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CLONE
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_CONST)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_CLONE
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CONST)))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_VAR)))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_VAR))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLONE
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CLONE
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_CONST)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_CLONE
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CONST)))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_VAR)))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_VAR))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))