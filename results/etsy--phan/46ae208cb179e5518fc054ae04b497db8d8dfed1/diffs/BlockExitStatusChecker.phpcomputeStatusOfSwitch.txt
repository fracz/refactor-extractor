||||||||    private function computeStatusOfSwitch(Node $node) : int
    {
        $has_default = false;
        $status = null;
        $normal_break_is_possible = false;
        $switch_stmt_case_nodes = $node->children['stmts']->children;
        foreach ($switch_stmt_case_nodes as $index => $case_node) {
            if (!array_key_exists('cond', $case_node->children)) {
                \Phan\Debug::printNode($case_node);
                continue;
            }
            if ($case_node->children['cond'] === null) {
                $has_default = true;
            }
            $case_status = self::getStatusOfSwitchCase($case_node, $index, $switch_stmt_case_nodes);
            if ($case_status & self::STATUS_INTERESTING_SWITCH_BITMASK) {
                if (is_null($status) || $case_status < $status) {
                    $status = $case_status;
                }
            } else {
                // One of the case statements will break, or fall through to the end.
                $normal_break_is_possible = true;
            }
        }
        if ($status === null) {
            return self::STATUS_PROCEED;
        }
        if (($status & self::STATUS_INTERESTING_SWITCH_BITMASK) === 0) {
            return self::STATUS_PROCEED;
        }
        if ($normal_break_is_possible || !$has_default) {
            if (($status & self::STATUS_CERTAIN_BITMASK) !== 0) {
                // E.g. some of the case statements throw unconditionally, others break normally.
                // So, the final result is that an interesting outcome such as throw/return is possible but not certain.
                return $status >> self::BITSHIFT_FOR_MAYBE;
            } else {
                return $status;
            }
        }
        // Ignore statuses such as break/continue. They take effect inside, not outside.
        return $status;
    }

    /**
     * @param Node[] $siblings
     */
||||||||||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_VAR)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_RETURN
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))