    protected function canCastToNonNullableType(Type $type) : bool
    {
        // can't cast native types (includes iterable or array) to object. ObjectType overrides this function.
        if ($type instanceof ObjectType
            && !$this->isNativeType()
        ) {
            return true;
        }

        if ($type instanceof MixedType) {
            return true;
        }
        // A matrix of allowable type conversions
        static $matrix = [
            '\Traversable' => [
                'iterable' => true,
            ],
            '\Closure' => [
                'callable' => true,
            ],
        ];

        return $matrix[(string)$this][(string)$type] ?? false;
    }

    /**
     * @param UnionType $union_type
     * A union type to compare against. Resolve it before checking.
     *
     * @param Context $context
     * The context in which this type exists.
     *
     * @param CodeBase $code_base
     * The code base in which both this and the given union
     * types exist.
     *
     * @return bool
     * True if each type within this union type can cast
     * to the given union type.
     *
     * @see StaticType->isExclusivelyNarrowedFormOrEquivalentTo for how it resolves static.
     * TODO: Refactor.
     *
     * @see UnionType->isExclusivelyNarrowedFormOrEquivalentTo for a check on union types as a whole.
     */
||||||||    protected function canCastToNonNullableType(Type $type) : bool
    {
        // can't cast native types (includes iterable or array) to object. ObjectType overrides this function.
        if ($type instanceof ObjectType
            && !$this->isNativeType()
        ) {
            return true;
        }

        if ($type instanceof MixedType) {
            return true;
        }
        // A matrix of allowable type conversions
        static $matrix = [
            '\Generator' => [
                'iterable' => true,
            ],
            '\Traversable' => [
                'iterable' => true,
            ],
            '\Closure' => [
                'callable' => true,
            ],
        ];

        return $matrix[(string)$this][(string)$type] ?? false;
    }

    /**
     * @param UnionType $union_type
     * A union type to compare against. Resolve it before checking.
     *
     * @param Context $context
     * The context in which this type exists.
     *
     * @param CodeBase $code_base
     * The code base in which both this and the given union
     * types exist.
     *
     * @return bool
     * True if each type within this union type can cast
     * to the given union type.
     *
     * @see StaticType->isExclusivelyNarrowedFormOrEquivalentTo for how it resolves static.
     * TODO: Refactor.
     *
     * @see UnionType->isExclusivelyNarrowedFormOrEquivalentTo for a check on union types as a whole.
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_INSTANCEOF
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR)))
                (SCALAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR)))
                (AST_CAST
                    (AST_VAR)))
            (AST_CONST))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_INSTANCEOF
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR)))
                (SCALAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR)))
                (AST_CAST
                    (AST_VAR)))
            (AST_CONST))))