    public function visitClassConst(Node $node) : Type {
        $constant_name = $node->children[1];

        if($constant_name == 'class') {
            return new Type(['string']); // class name fetch
        }

        $class_name =
            $this->astClassNameFromNode($this->context, $node);

        if(!$class_name) {
            Log::err(
                Log::EUNDEF,
                "Can't access undeclared constant {$class_name}::{$constant_name}",
                $this->context->getFile(),
                $node->lineno
            );

            return Type::none();
        }

        $class_fqsen =
            $this->context->getScopeFQSEN()->withClassName($class_name);

        // Make sure the class exists
        if (!$this->context->getCodeBase()->hasClassWithFQSEN($class_fqsen)) {
            Log::err(
                Log::EUNDEF,
                "Can't access undeclared constant {$class_name}::{$constant_name}",
                $this->context->getFile(),
                $node->lineno
            );

            return Type::none();
        }

        // Get a reference to the class defining the constant
        $defining_clazz =
            $this->context->getCodeBase()->getClassByFQSEN($class_fqsen);

        // Climb the parent tree to find the definition of the
        // constant
        while(!$defining_clazz->hasConstantWithName($constant_name)) {
            // Make sure the class has a parent
            if (!$defining_clazz->hasParentClassFQSEN()) {
                return Type::none();
            }

            // Make sure that parent exists
            if (!$this->context->getCodeBase()->hasClassWithFQSEN(
                $defining_clazz->getParentClassFQSEN()
            )) {
                return Type::none();
            }

            // Climb to that parent
            $defining_clazz = $this->context->getCodeBase()
                ->getClassByFQSEN($defining_clazz->getParentClassFQSEN());
        }

        if (!$defining_clazz
            || !$defining_clazz->hasConstantWithName($constant_name)
        ) {
            Log::err(
                Log::EUNDEF,
                "Can't access undeclared constant {$class_name}::{$constant_name}",
                $this->context->getFile(),
                $node->lineno
            );
            return Type::none();
        }

        return $defining_clazz
            ->getConstantWithName($constant_name)
            ->getType();
    }

    /**
     * Visit a node with kind `\ast\AST_PROP`
     */
||||||||    public function visitClassConst(Node $node) : Type {
        $constant_name = $node->children[1];

        if($constant_name == 'class') {
            return new Type(['string']); // class name fetch
        }

        $class_name =
            $this->astClassNameFromNode($this->context, $node);

        if(!$class_name) {
            Log::err(
                Log::EUNDEF,
                "Can't access undeclared constant {$class_name}::{$constant_name}",
                $this->context->getFile(),
                $node->lineno
            );

            return Type::none();
        }

        $class_fqsen =
            $this->context->getScopeFQSEN()->withClassName(
                $this->context,
                $class_name
            );

        // Make sure the class exists
        if (!$this->context->getCodeBase()->hasClassWithFQSEN($class_fqsen)) {
            Log::err(
                Log::EUNDEF,
                "Can't access undeclared constant {$class_name}::{$constant_name}",
                $this->context->getFile(),
                $node->lineno
            );

            return Type::none();
        }

        // Get a reference to the class defining the constant
        $defining_clazz =
            $this->context->getCodeBase()->getClassByFQSEN($class_fqsen);

        // Climb the parent tree to find the definition of the
        // constant
        while(!$defining_clazz->hasConstantWithName($constant_name)) {
            // Make sure the class has a parent
            if (!$defining_clazz->hasParentClassFQSEN()) {
                return Type::none();
            }

            // Make sure that parent exists
            if (!$this->context->getCodeBase()->hasClassWithFQSEN(
                $defining_clazz->getParentClassFQSEN()
            )) {
                return Type::none();
            }

            // Climb to that parent
            $defining_clazz = $this->context->getCodeBase()
                ->getClassByFQSEN($defining_clazz->getParentClassFQSEN());
        }

        if (!$defining_clazz
            || !$defining_clazz->hasConstantWithName($constant_name)
        ) {
            Log::err(
                Log::EUNDEF,
                "Can't access undeclared constant {$class_name}::{$constant_name}",
                $this->context->getFile(),
                $node->lineno
            );
            return Type::none();
        }

        return $defining_clazz
            ->getConstantWithName($constant_name)
            ->getType();
    }

    /**
     * Visit a node with kind `\ast\AST_PROP`
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_STATIC_CALL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_RETURN
                            (AST_STATIC_CALL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_STATIC_CALL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_RETURN
                            (AST_STATIC_CALL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_RETURN
                    (AST_STATIC_CALL)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))