    public static function builtinFunctionPropertyNameTypeMap(
        FQSEN $function_fqsen,
        CodeBase $code_base
    ) : array {
        $context = new Context($code_base);

        $map = self::builtinFunctionArgumentTypeMap();

        $class_name = $function_fqsen->getClassName();
        $function_name = ($class_name ? $class_name . '::' :  '')
            .  $function_fqsen->getMethodName();

        $function_name_original = $function_name;
        $alternate_id = 0;

        $configurations = [];
        while (isset($map[$function_name])) {
            // Get some static data about the function
            $type_name_struct = $map[$function_name];
            if (empty($type_name_struct)) {
                continue;
            }

            // Figure out the return type
            $return_type_name = array_shift($type_name_struct);
            $return_type = $return_type_name
                ? UnionType::fromStringInContext($return_type_name, $context)
                : null;

            $name_type_name_map = $type_name_struct;
            $property_name_type_map = [];

            foreach ($name_type_name_map as $name => $type_name) {
                $property_name_type_map[$name] = empty($type_name)
                    ? new UnionType()
                    : UnionType::fromStringInContext($type_name, $context);
            }

            $configurations[] = [
                'return_type' => $return_type,
                'property_name_type_map' => $property_name_type_map,
            ];

            $function_name =
                $function_name_original . ' ' . (++$alternate_id);
        }

        return $configurations;
    }

    /**
     * @return bool
     * True if a builtin with the given FQSEN exists, else
     * flase.
     */
||||||||||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONDITIONAL
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_WHILE
        (AST_ISSET
            (AST_DIM
                (AST_VAR)
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_VAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_CONDITIONAL
                            (AST_EMPTY
                                (AST_VAR))
                            (AST_NEW)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_PRE_INC
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||