    protected static function astQualifiedName(
        Context $context,
        $node
    ) : string {
        if(!($node instanceof \ast\Node)
            && $node->kind != \ast\AST_NAME
        ) {
            return self::astVarType($context, $node);
        }

        $name = $node->children[0];

        $type = new Type([$name]);

        if($node->flags & \ast\flags\NAME_NOT_FQ) {

            // is it a simple native type name?
            if($type->isNativeType()) {
                return (string)$type;
            }

            // Not fully qualified, check if we have an exact
            // namespace alias for it
            if ($context->hasNamespaceMapFor(T_CLASS, (string)$type)) {
                return
                    $context->getNamespaceMapFor(T_CLASS, (string)$type);
            }

            // Check for a namespace-relative alias
            if(($pos = strpos((string)$type, '\\')) !== false) {

                $first_part = substr((string)$type, 0, $pos);

                if ($context->hasNamespaceMapFor(T_CLASS, $first_part)) {
                    $qualified_first_part =
                        $context->getNamespaceMapFor(T_CLASS, $first_part);

                    // Replace that first aliases part and return the full name
                    return $qualified_first_part
                        . '\\'
                        . substr((string)$type, $pos + 1);
                }
            }

            // No aliasing, just prepend the namespace
            return $context->getNamespace() . '\\' . $name;
        } else {
            return $name;
        }
    }

    /**
     * Takes an AST_VAR node and tries to find the variable in
     * the current scope and returns its likely type. For
     * pass-by-ref args, we suppress the not defined error message
     *
     * @param Context $context
     * @param null|string\Node $node
     *
     * @return Type
     *
     * @see \Phan\Deprecated\Pass2::var_type
     * From `function var_type`
     */
||||||||    protected static function astQualifiedName(
        Context $context,
        $node
    ) : string {
        if(!($node instanceof \ast\Node)
            && $node->kind != \ast\AST_NAME
        ) {
            return self::astVarType($context, $node);
        }

        $name = $node->children[0];

        $type = new Type([$name]);

        if($node->flags & \ast\flags\NAME_NOT_FQ) {

            // is it a simple native type name?
            if($type->isNativeType()) {
                return (string)$type;
            }

            // Not fully qualified, check if we have an exact
            // namespace alias for it
            if ($context->hasNamespaceMapFor(T_CLASS, (string)$type)) {
                return
                    (string)$context->getNamespaceMapFor(T_CLASS, (string)$type);
            }

            // Check for a namespace-relative alias
            if(($pos = strpos((string)$type, '\\')) !== false) {

                $first_part = substr((string)$type, 0, $pos);

                if ($context->hasNamespaceMapFor(T_CLASS, $first_part)) {
                    $qualified_first_part =
                        (string)$context->getNamespaceMapFor(T_CLASS, $first_part);

                    // Replace that first aliases part and return the full name
                    return $qualified_first_part
                        . '\\'
                        . substr((string)$type, $pos + 1);
                }
            }

            // No aliasing, just prepend the namespace
            return $context->getNamespace() . '\\' . $name;
        } else {
            return $name;
        }
    }

    /**
     * Takes an AST_VAR node and tries to find the variable in
     * the current scope and returns its likely type. For
     * pass-by-ref args, we suppress the not defined error message
     *
     * @param Context $context
     * @param null|string\Node $node
     *
     * @return Type
     *
     * @see \Phan\Deprecated\Pass2::var_type
     * From `function var_type`
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CAST
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST)
                                (AST_CAST
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_CONST)
                                        (AST_CAST
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CAST
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CAST
                                            (AST_VAR))
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_CONST)
                                                    (AST_VAR))))
                                        (AST_RETURN
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_CALL
                                                    (
                                                        (AST_CAST
                                                            (AST_VAR))
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR))))))))))))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CAST
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST)
                                (AST_CAST
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_CAST
                                                (AST_VAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CAST
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CAST
                                            (AST_VAR))
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CAST
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_CONST)
                                                        (AST_VAR)))))
                                        (AST_RETURN
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_CALL
                                                    (
                                                        (AST_CAST
                                                            (AST_VAR))
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR))))))))))))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_VAR))))))