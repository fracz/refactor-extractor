	public function update( $css ) {
		$setting = $this;

		if ( empty( $css ) ) {
			$css = '';
		}

		$args = array(
			'post_content' => $css,
			'post_content_filtered' => '',
		);

		/**
		 * Filters the `post_content` and `post_content_filtered` args for a `custom_css` post being updated.
		 *
		 * This filter can be used by plugin that offer CSS pre-processors, to store the original
		 * pre-processed CSS in `post_content_filtered` and then store processed CSS in `post_content`.
		 * When used in this way, the `post_content_filtered` should be supplied as the setting value
		 * instead of `post_content` via a the `customize_value_custom_css` filter, for example:
		 *
		 * <code>
		 * add_filter( 'customize_value_custom_css', function( $value, $setting ) {
		 *     $post = wp_get_custom_css_post( $setting->stylesheet );
		 *     if ( $post && ! empty( $post->post_content_filtered ) ) {
		 *         $css = $post->post_content_filtered;
		 *     }
		 *     return $css;
		 * }, 10, 2 );
		 * </code>
		 *
		 * @since 4.7.0
		 * @param array  $args {
		 *     Content post args (unslashed) for `wp_update_post()`/`wp_insert_post()`.
		 *
		 *     @type string $post_content          CSS.
		 *     @type string $post_content_filtered Pre-processed CSS. Normally empty string.
		 * }
		 * @param string                          $css     Original CSS being updated.
		 * @param WP_Customize_Custom_CSS_Setting $setting Custom CSS Setting.
		 */
		$args = apply_filters( 'customize_update_custom_css_post_content_args', $args, $css, $setting );
		$args = wp_array_slice_assoc( $args, array( 'post_content', 'post_content_filtered' ) );

		$args = array_merge(
			$args,
			array(
				'post_title' => $this->stylesheet,
				'post_name' => sanitize_title( $this->stylesheet ),
				'post_type' => 'custom_css',
				'post_status' => 'publish',
			)
		);

		// Update post if it already exists, otherwise create a new one.
		$post = wp_get_custom_css_post( $this->stylesheet );
		if ( $post ) {
			$args['ID'] = $post->ID;
			$post_id = wp_update_post( wp_slash( $args ) );
		} else {
			$post_id = wp_insert_post( wp_slash( $args ) );
		}
		if ( ! $post_id ) {
			return false;
		}

		// Cache post ID in theme mod for performance to avoid additional DB query.
		if ( $this->manager->get_stylesheet() === $this->stylesheet ) {
			set_theme_mod( 'custom_css_post_id', $post_id );
		}

		return $post_id;
	}

	/**
	 * Ensure there are a balanced number of paired characters.
	 *
	 * This is used to check that the number of opening and closing
	 * characters is equal.
	 *
	 * For instance, there should be an equal number of braces ("{", "}")
	 * in the CSS.
	 *
	 * @since 4.7.0
	 * @access private
	 *
	 * @param string $opening_char The opening character.
	 * @param string $closing_char The closing character.
	 * @param string $css The CSS input string.
	 *
	 * @return bool
	 */
||||||||	public function update( $css ) {
		if ( empty( $css ) ) {
			$css = '';
		}

		$r = wp_update_custom_css_post( $css, array(
			'stylesheet' => $this->stylesheet,
		) );

		if ( $r instanceof WP_Error ) {
			return false;
		}
		$post_id = $r->ID;

		// Cache post ID in theme mod for performance to avoid additional DB query.
		if ( $this->manager->get_stylesheet() === $this->stylesheet ) {
			set_theme_mod( 'custom_css_post_id', $post_id );
		}

		return $post_id;
	}

	/**
	 * Ensure there are a balanced number of paired characters.
	 *
	 * This is used to check that the number of opening and closing
	 * characters is equal.
	 *
	 * For instance, there should be an equal number of braces ("{", "}")
	 * in the CSS.
	 *
	 * @since 4.7.0
	 * @access private
	 *
	 * @param string $opening_char The opening character.
	 * @param string $closing_char The closing character.
	 * @param string $css The CSS input string.
	 *
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))