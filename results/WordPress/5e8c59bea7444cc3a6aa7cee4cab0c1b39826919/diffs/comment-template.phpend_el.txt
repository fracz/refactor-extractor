	function end_el(&$output, $comment, $depth, $args) {
		if ( 'div' == $args['style'] )
			echo "</div>\n";
		else
			echo "</li>\n";
	}

}

/**
 * List comments
 *
 * Used in the comments.php template to list comments for a particular post
 *
 * @since 2.7
 * @uses Walker_Comment
 *
 * @param $comments array Array of comment object to list
 * @param $args string|array Additional arguments
 */
function wp_list_comments(&$comments, $args = array() ) {
	$defaults = array('walker' => null, 'depth' => 3, 'style' => 'list', 'callback' => null);

	$r = wp_parse_args( $args, $defaults );

	extract( $r, EXTR_SKIP );

	if ( empty($walker) )
		$walker = new Walker_Comment;

	$walker->walk($comments, $depth, $r);
}

?>||||||||	function end_el(&$output, $comment, $depth, $args) {
		if ( !empty($args['end-callback']) ) {
			call_user_func($args['end-callback'], $comment, $args, $depth);
			return;
		}
		if ( 'div' == $args['style'] )
			echo "</div>\n";
		else
			echo "</li>\n";
	}

}

/**
 * List comments
 *
 * Used in the comments.php template to list comments for a particular post
 *
 * @since 2.7
 * @uses Walker_Comment
 *
 * @param $comments array Array of comment object to list
 * @param $args string|array Additional arguments
 */
function wp_list_comments(&$comments, $args = array() ) {
	$defaults = array('walker' => null, 'depth' => 3, 'style' => 'ul', 'callback' => null, 'end-callback' => null);

	$r = wp_parse_args( $args, $defaults );

	extract( $r, EXTR_SKIP );

	if ( empty($walker) )
		$walker = new Walker_Comment;

	$walker->walk($comments, $depth, $r);
}

?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR))))))