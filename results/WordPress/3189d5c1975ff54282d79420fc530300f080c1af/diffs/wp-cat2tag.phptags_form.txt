	function tags_form() { ?>

<script type="text/javascript">
/* <![CDATA[ */
var checktags = "false";
function check_all_tagrows() {
	field = document.taglist;
	if ( 'false' == checktags ) {
		for ( i = 0; i < field.length; i++ ) {
			if ( 'tags_to_convert[]' == field[i].name )
				field[i].checked = true;
		}
		checktags = 'true';
		return '<?php _e('Uncheck All') ?>';
	} else {
		for ( i = 0; i < field.length; i++ ) {
			if ( 'tags_to_convert[]' == field[i].name )
				field[i].checked = false;
		}
		checktags = 'false';
		return '<?php _e('Check All') ?>';
	}
}
/* ]]> */
</script>

<form name="taglist" id="taglist" action="admin.php?import=wp-cat2tag&amp;step=4" method="post">
<p><input type="button" class="button-secondary" value="<?php _e('Check All'); ?>" onclick="this.value=check_all_tagrows()">
<?php wp_nonce_field('import-cat2tag'); ?></p>
<ul style="list-style:none">
<?php
		foreach ( $this->all_tags as $tag ) {
			if ( in_array( intval($tag->term_id),  $this->hybrids_ids ) ) {
?>
	<li style="color:#777;padding-left:1.3em;"><?php echo attribute_escape($tag->name) . ' (' . $tag->count . ') *'; ?></li>
<?php
			} else {
?>
	<li><label><input type="checkbox" name="tags_to_convert[]" value="<?php echo intval($tag->term_id); ?>" /> <?php echo attribute_escape($tag->name) . ' (' . $tag->count . ')'; ?></label></li>

<?php
			}
		}
?>
</ul>

<?php
		if ( ! empty($this->hybrids_ids) )
			echo '<p>' . __('* This tag is also a category. It cannot be converted again.') . '</p>';
?>

<p class="submit"><input type="submit" name="submit_tags" class="button" value="<?php _e('Convert Tags to Categories'); ?>" /></p>
</form>

<?php
	}

||||||||	function tags_form() { ?>

<script type="text/javascript">
/* <![CDATA[ */
var checktags = "false";
function check_all_tagrows() {
	field = document.taglist;
	if ( 'false' == checktags ) {
		for ( i = 0; i < field.length; i++ ) {
			if ( 'tags_to_convert[]' == field[i].name )
				field[i].checked = true;
		}
		checktags = 'true';
		return '<?php _e('Uncheck All') ?>';
	} else {
		for ( i = 0; i < field.length; i++ ) {
			if ( 'tags_to_convert[]' == field[i].name )
				field[i].checked = false;
		}
		checktags = 'false';
		return '<?php _e('Check All') ?>';
	}
}
/* ]]> */
</script>

<form name="taglist" id="taglist" action="admin.php?import=wp-cat2tag&amp;step=4" method="post">
<p><input type="button" class="button-secondary" value="<?php _e('Check All'); ?>" onclick="this.value=check_all_tagrows()" />
<?php wp_nonce_field('import-cat2tag'); ?></p>
<ul style="list-style:none">

<?php	foreach ( $this->all_tags as $tag ) { ?>
	<li><label><input type="checkbox" name="tags_to_convert[]" value="<?php echo intval($tag->term_id); ?>" /> <?php echo attribute_escape($tag->name) . ' (' . $tag->count . ')'; ?></label><?php if ( in_array( intval($tag->term_id),  $this->hybrids_ids ) ) echo ' <a href="#note"> * </a>'; ?></li>

<?php	} ?>
</ul>

<?php	if ( ! empty($this->hybrids_ids) )
			echo '<p><a name="note"></a>' . __('* This tag is also a category. When converted, all posts associated with the tag will also be in the category.') . '</p>'; ?>

<p class="submit"><input type="submit" name="submit_tags" class="button" value="<?php _e('Convert Tags to Categories'); ?>" /></p>
</form>

<?php }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ECHO
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ECHO
                            (SCALAR)))))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (SCALAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (SCALAR))
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR)))
            (AST_ECHO
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ECHO
                            (SCALAR)))))
            (AST_ECHO
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (SCALAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ECHO
        (SCALAR)))