	public function remove_all_caps() {
		$this->caps = array();
		delete_user_meta( $this->ID, $this->cap_key );
		delete_user_meta( $this->ID, $this->db->get_blog_prefix() . 'user_level' );
		$this->get_role_caps();
	}

	/**
	 * Whether user has capability or role name.
	 *
	 * While checking against particular roles in place of a capability is supported
	 * in part, this practice is discouraged as it may produce unreliable results.
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @see map_meta_cap()
	 *
	 * @param string $cap           Capability name.
	 * @param int    $object_id,... Optional. ID of the specific object to check against if `$cap` is a "meta" cap.
	 *                              "Meta" capabilities, e.g. 'edit_post', 'edit_user', etc., are capabilities used
	 *                              by map_meta_cap() to map to other "primitive" capabilities, e.g. 'edit_posts',
	 *                              'edit_others_posts', etc. The parameter is accessed via func_get_args() and passed
	 *                              to map_meta_cap().
	 * @return bool Whether the current user has the given capability. If `$cap` is a meta cap and `$object_id` is
	 *              passed, whether the current user has the given meta capability for the given object.
	 */
||||||||	public function remove_all_caps() {
		global $wpdb;
		$this->caps = array();
		delete_user_meta( $this->ID, $this->cap_key );
		delete_user_meta( $this->ID, $wpdb->get_blog_prefix() . 'user_level' );
		$this->get_role_caps();
	}

	/**
	 * Whether user has capability or role name.
	 *
	 * While checking against particular roles in place of a capability is supported
	 * in part, this practice is discouraged as it may produce unreliable results.
	 *
	 * @since 2.0.0
	 * @access public
	 *
	 * @see map_meta_cap()
	 *
	 * @param string $cap           Capability name.
	 * @param int    $object_id,... Optional. ID of the specific object to check against if `$cap` is a "meta" cap.
	 *                              "Meta" capabilities, e.g. 'edit_post', 'edit_user', etc., are capabilities used
	 *                              by map_meta_cap() to map to other "primitive" capabilities, e.g. 'edit_posts',
	 *                              'edit_others_posts', etc. The parameter is accessed via func_get_args() and passed
	 *                              to map_meta_cap().
	 * @return bool Whether the current user has the given capability. If `$cap` is a meta cap and `$object_id` is
	 *              passed, whether the current user has the given meta capability for the given object.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)))