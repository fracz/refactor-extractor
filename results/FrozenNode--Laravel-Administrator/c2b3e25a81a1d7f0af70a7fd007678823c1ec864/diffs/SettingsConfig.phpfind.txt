	public static function find($settingsName)
	{
		//first let's grab the menu and settings_config_path options
		$menu = Config::get('administrator::administrator.menu', null);
		$settingsConfigPath = Config::get('administrator::administrator.settings_config_path', null);
		$settingsName = substr($settingsName, strlen(static::$prefix));

		//if the menu option isn't an array or if it doesn't have any values, throw an exception since it's a required option
		if (!is_array($menu) || !sizeof($menu))
		{
			throw new Exception("Administrator: " .  trans('administrator::administrator.valid_menu'));
		}

		//if the settings config path isn't a string or if the directory doesn't exist, throw an exception
		if (!is_string($settingsConfigPath) || !is_dir($settingsConfigPath))
		{
			throw new Exception("Administrator: " .  trans('administrator::administrator.config_path'));
		}

		//now we loop through the menu and try to find our guy
		$settingsConfigPath = rtrim($settingsConfigPath, '/') . '/';
		$config = static::searchMenu($menu, $settingsConfigPath, $settingsName);

		//return the config if it was set
		return is_array($config) ? $config : false;
	}

	/**
	 * Recursively searches the menu array for the desired settings config name
	 *
	 * @param array		$menu
	 * @param string	$settingsConfigPath
	 * @param string	$settingsName
	 *
	 * @return false|array	//If found, an array of (unvalidated) config options will returned
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)
            (AST_CONST))))||||||||