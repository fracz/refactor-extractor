	public static function get($settingsName)
	{
		//if the name doesn't begin with 'settings.', this isn't a settings config
		if (strpos($settingsName, static::$prefix) !== 0)
		{
			return false;
		}

		//first we need to find the settings config (if it exists)
		if (!$config = static::find($settingsName))
		{
			return false;
		}

		//now that we have the config, we can begin to check if all of the required fields are provided

		//but first we have to check if the user has permission to access this settings page
		$permission = array_get($config, 'permission');

		if (is_callable($permission) && !$permission())
		{
			return false;
		}

		//if the title isn't provided, throw an exception
		if (!is_string(array_get($config, 'title')))
		{
			throw new Exception("Administrator: " .  trans('administrator::administrator.valid_title'));
		}

		//check if the edit fields array was provided
		if (!is_array(array_get($config, 'edit_fields')))
		{
			throw new Exception("Administrator: " .  trans('administrator::administrator.valid_edit'));
		}

		//now we can instantiate the object
		return new static($config);
	}

	/**
	 * Finds a settings config given a name from the menu option in the main config
	 *
	 * @param string		$settingsName
	 *
	 * @return false|array	//If found, an array of (unvalidated) config options will be returned
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)))))||||||||