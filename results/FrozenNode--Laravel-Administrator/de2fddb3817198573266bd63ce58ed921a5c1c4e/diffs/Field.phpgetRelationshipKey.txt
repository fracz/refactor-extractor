	protected static function getRelationshipKey($field, $model)
	{
		//check if the related method exists on the model
		if (!method_exists($model, $field))
		{
			return false;
		}

		//now that we know the method exists, we can determine if it's multiple or single
		$related_model = $model->{$field}();

		//check if this is a valid relationship object, and return the appropriate key
		if (is_a($related_model, static::$relationshipBase.'BelongsTo'))
		{
			return 'belongs_to';
		}
		else if (is_a($related_model, static::$relationshipBase.'BelongsToMany'))
		{
			return 'belongs_to_many';
		}
		else if (is_a($related_model, static::$relationshipBase.'HasOne'))
		{
			return 'has_one';
		}
		else if (is_a($related_model, static::$relationshipBase.'HasMany'))
		{
			return 'has_many';
		}
		else
		{
			return false;
		}
	}

	/**
	 * Turn this item into an array
	 *
	 * @return array
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR))))
            (
                (AST_RETURN
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_STATIC_PROP)
                                    (SCALAR))))
                        (
                            (AST_RETURN
                                (SCALAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_STATIC_PROP)
                                                (SCALAR))))
                                    (
                                        (AST_RETURN
                                            (SCALAR))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_BINARY_OP
                                                            (AST_STATIC_PROP)
                                                            (SCALAR))))
                                                (
                                                    (AST_RETURN
                                                        (SCALAR))))
                                            (AST_IF_ELEM
                                                (NULL)
                                                (
                                                    (AST_RETURN
                                                        (AST_CONST)))))))))))))))||||||||