    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 203 "../smarty/lexer/smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 0 => 61, 1 => 1 ),
  array( 0 => 62, 1 => 1 ),
  array( 0 => 62, 1 => 2 ),
  array( 0 => 62, 1 => 0 ),
  array( 0 => 63, 1 => 2 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 66, 1 => 1 ),
  array( 0 => 66, 1 => 2 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 63, 1 => 1 ),
  array( 0 => 65, 1 => 2 ),
  array( 0 => 65, 1 => 3 ),
  array( 0 => 67, 1 => 2 ),
  array( 0 => 67, 1 => 0 ),
  array( 0 => 68, 1 => 1 ),
  array( 0 => 68, 1 => 1 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 4 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 4 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 5 ),
  array( 0 => 64, 1 => 5 ),
  array( 0 => 64, 1 => 6 ),
  array( 0 => 64, 1 => 5 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 4 ),
  array( 0 => 64, 1 => 5 ),
  array( 0 => 64, 1 => 6 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 11 ),
  array( 0 => 78, 1 => 2 ),
  array( 0 => 78, 1 => 1 ),
  array( 0 => 64, 1 => 5 ),
  array( 0 => 64, 1 => 7 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 7 ),
  array( 0 => 64, 1 => 10 ),
  array( 0 => 64, 1 => 7 ),
  array( 0 => 64, 1 => 10 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 4 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 2 ),
  array( 0 => 64, 1 => 3 ),
  array( 0 => 64, 1 => 4 ),
  array( 0 => 64, 1 => 5 ),
  array( 0 => 71, 1 => 2 ),
  array( 0 => 71, 1 => 1 ),
  array( 0 => 71, 1 => 0 ),
  array( 0 => 80, 1 => 4 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 4 ),
  array( 0 => 75, 1 => 1 ),
  array( 0 => 75, 1 => 3 ),
  array( 0 => 74, 1 => 4 ),
  array( 0 => 74, 1 => 3 ),
  array( 0 => 74, 1 => 3 ),
  array( 0 => 72, 1 => 1 ),
  array( 0 => 72, 1 => 1 ),
  array( 0 => 72, 1 => 4 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 72, 1 => 1 ),
  array( 0 => 72, 1 => 2 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 72, 1 => 2 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 72, 1 => 3 ),
  array( 0 => 81, 1 => 8 ),
  array( 0 => 81, 1 => 7 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 3 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 3 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 3 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 2 ),
  array( 0 => 69, 1 => 1 ),
  array( 0 => 69, 1 => 3 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 85, 1 => 1 ),
  array( 0 => 85, 1 => 4 ),
  array( 0 => 85, 1 => 1 ),
  array( 0 => 85, 1 => 3 ),
  array( 0 => 85, 1 => 4 ),
  array( 0 => 85, 1 => 3 ),
  array( 0 => 85, 1 => 4 ),
  array( 0 => 73, 1 => 3 ),
  array( 0 => 91, 1 => 2 ),
  array( 0 => 91, 1 => 0 ),
  array( 0 => 92, 1 => 3 ),
  array( 0 => 92, 1 => 5 ),
  array( 0 => 92, 1 => 2 ),
  array( 0 => 92, 1 => 2 ),
  array( 0 => 92, 1 => 4 ),
  array( 0 => 92, 1 => 3 ),
  array( 0 => 92, 1 => 5 ),
  array( 0 => 92, 1 => 3 ),
  array( 0 => 92, 1 => 2 ),
  array( 0 => 77, 1 => 1 ),
  array( 0 => 77, 1 => 2 ),
  array( 0 => 93, 1 => 1 ),
  array( 0 => 93, 1 => 3 ),
  array( 0 => 90, 1 => 2 ),
  array( 0 => 94, 1 => 1 ),
  array( 0 => 94, 1 => 2 ),
  array( 0 => 95, 1 => 3 ),
  array( 0 => 95, 1 => 4 ),
  array( 0 => 95, 1 => 5 ),
  array( 0 => 95, 1 => 6 ),
  array( 0 => 95, 1 => 2 ),
  array( 0 => 87, 1 => 4 ),
  array( 0 => 96, 1 => 4 ),
  array( 0 => 96, 1 => 5 ),
  array( 0 => 97, 1 => 3 ),
  array( 0 => 97, 1 => 1 ),
  array( 0 => 97, 1 => 0 ),
  array( 0 => 70, 1 => 3 ),
  array( 0 => 70, 1 => 2 ),
  array( 0 => 98, 1 => 3 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 79, 1 => 2 ),
  array( 0 => 79, 1 => 0 ),
  array( 0 => 99, 1 => 2 ),
  array( 0 => 99, 1 => 2 ),
  array( 0 => 89, 1 => 1 ),
  array( 0 => 89, 1 => 2 ),
  array( 0 => 89, 1 => 1 ),
  array( 0 => 89, 1 => 3 ),
  array( 0 => 89, 1 => 4 ),
  array( 0 => 83, 1 => 1 ),
  array( 0 => 83, 1 => 1 ),
  array( 0 => 84, 1 => 1 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 100, 1 => 1 ),
  array( 0 => 100, 1 => 3 ),
  array( 0 => 100, 1 => 0 ),
  array( 0 => 101, 1 => 3 ),
  array( 0 => 101, 1 => 3 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 88, 1 => 2 ),
  array( 0 => 88, 1 => 3 ),
  array( 0 => 102, 1 => 2 ),
  array( 0 => 102, 1 => 1 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 1 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 2 ),
  array( 0 => 103, 1 => 1 ),
  array( 0 => 76, 1 => 1 ),
  array( 0 => 76, 1 => 0 ),
||||||||    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx ++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx --;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            #line 203 "../smarty/lexer/smarty_internal_templateparser.y"

            $this->internalError = true;
            $this->compiler->trigger_template_error("Stack overflow in template parser");

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        $this->yystack[] = $yytos;
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt, $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i ++) {
                fprintf($this->yyTraceFILE, " %s", $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE, "\n");
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_POST_INC
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_POST_DEC
                    (AST_PROP
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_FOR
                    (AST_EXPR_LIST
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))
                    (AST_EXPR_LIST
                        (AST_POST_INC
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR))))))))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_POST_INC
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_POST_DEC
                    (AST_PROP
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (NULL))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_FOR
                    (AST_EXPR_LIST
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))
                    (AST_EXPR_LIST
                        (AST_POST_INC
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR))))))))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))))