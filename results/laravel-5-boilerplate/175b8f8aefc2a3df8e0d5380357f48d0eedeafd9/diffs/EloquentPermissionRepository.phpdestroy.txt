    public function destroy($id)
    {
        $permission = $this->findOrThrowException($id);

        if ($permission->system == 1) {
            throw new GeneralException(trans('exceptions.backend.access.permissions.system_delete_error'));
        }

        //Remove the permission from all associated roles
        $currentRoles = $permission->roles;
        foreach ($currentRoles as $role) {
            $role->detachPermission($permission);
        }

        //Remove the permission from all associated users
        $currentUsers = $permission->users;
        foreach ($currentUsers as $user) {
            $user->detachPermission($permission);
        }

        //Remove the dependencies
        $permission->dependencies()->delete();

        if ($permission->delete()) {
            return true;
        }

        throw new GeneralException(trans('exceptions.backend.access.permissions.delete_error'));
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)))))))||||||||