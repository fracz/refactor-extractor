	static public function GetNotificationsMessage($iCode, $oPrevious = null)
	{
		static $aMap = array(
			self::InvalidToken => 'InvalidToken',
			self::AuthError => 'AuthError',
			self::AccessError => 'AccessError',
			self::ConnectionError => 'ConnectionError',
			self::CaptchaError => 'CaptchaError',
			self::SocialFacebookLoginAccessDisable => 'SocialFacebookLoginAccessDisable',
			self::SocialTwitterLoginAccessDisable => 'SocialTwitterLoginAccessDisable',
			self::SocialGoogleLoginAccessDisable => 'SocialGoogleLoginAccessDisable',
			self::DomainNotAllowed => 'DomainNotAllowed',
			self::AccountNotAllowed => 'AccountNotAllowed',
			self::AccountTwoFactorAuthRequired => 'AccountTwoFactorAuthRequired',
			self::AccountTwoFactorAuthError => 'AccountTwoFactorAuthError',

			self::CouldNotSaveNewPassword => 'CouldNotSaveNewPassword',
			self::CurrentPasswordIncorrect => 'CurrentPasswordIncorrect',
			self::NewPasswordShort => 'NewPasswordShort',
			self::NewPasswordWeak => 'NewPasswordWeak',
			self::NewPasswordForbidden => 'NewPasswordForbidden',

			self::CantGetMessageList => 'CantGetMessageList',
			self::CantGetMessage => 'CantGetMessage',
			self::CantDeleteMessage => 'CantDeleteMessage',
			self::CantMoveMessage => 'CantMoveMessage',
			self::CantSaveMessage => 'CantSaveMessage',
			self::CantSendMessage => 'CantSendMessage',
			self::InvalidRecipients => 'InvalidRecipients',
			self::CantCreateFolder => 'CantCreateFolder',
			self::CantRenameFolder => 'CantRenameFolder',
			self::CantDeleteFolder => 'CantDeleteFolder',
			self::CantSubscribeFolder => 'CantSubscribeFolder',
			self::CantUnsubscribeFolder => 'CantUnsubscribeFolder',
			self::CantDeleteNonEmptyFolder => 'CantDeleteNonEmptyFolder',
			self::CantSaveSettings => 'CantSaveSettings',
			self::CantSavePluginSettings => 'CantSavePluginSettings',
			self::DomainAlreadyExists => 'DomainAlreadyExists',
			self::CantInstallPackage => 'CantInstallPackage',
			self::CantDeletePackage => 'CantDeletePackage',
			self::InvalidPluginPackage => 'InvalidPluginPackage',
			self::UnsupportedPluginPackage => 'UnsupportedPluginPackage',
			self::LicensingServerIsUnavailable => 'LicensingServerIsUnavailable',
			self::LicensingExpired => 'LicensingExpired',
			self::LicensingBanned => 'LicensingBanned',
			self::DemoSendMessageError => 'DemoSendMessageError',
			self::AccountAlreadyExists => 'AccountAlreadyExists',
			self::MailServerError => 'MailServerError',
			self::ClientViewError => 'ClientViewError',
			self::UnknownNotification => 'UnknownNotification',
			self::UnknownError => 'UnknownError'
		);

		if (self::ClientViewError === $iCode && $oPrevious instanceof \Exception)
		{
			return $oPrevious->getMessage();
		}

		return isset($aMap[$iCode]) ? $aMap[$iCode].'['.$iCode.']' : 'UnknownNotification['.$iCode.']';
	}
}||||||||	static public function GetNotificationsMessage($iCode, $oPrevious = null)
	{
		static $aMap = array(
			self::InvalidToken => 'InvalidToken',
			self::AuthError => 'AuthError',
			self::AccessError => 'AccessError',
			self::ConnectionError => 'ConnectionError',
			self::CaptchaError => 'CaptchaError',
			self::SocialFacebookLoginAccessDisable => 'SocialFacebookLoginAccessDisable',
			self::SocialTwitterLoginAccessDisable => 'SocialTwitterLoginAccessDisable',
			self::SocialGoogleLoginAccessDisable => 'SocialGoogleLoginAccessDisable',
			self::DomainNotAllowed => 'DomainNotAllowed',
			self::AccountNotAllowed => 'AccountNotAllowed',
			self::AccountTwoFactorAuthRequired => 'AccountTwoFactorAuthRequired',
			self::AccountTwoFactorAuthError => 'AccountTwoFactorAuthError',

			self::CouldNotSaveNewPassword => 'CouldNotSaveNewPassword',
			self::CurrentPasswordIncorrect => 'CurrentPasswordIncorrect',
			self::NewPasswordShort => 'NewPasswordShort',
			self::NewPasswordWeak => 'NewPasswordWeak',
			self::NewPasswordForbidden => 'NewPasswordForbidden',

			self::ContactsSyncError => 'ContactsSyncError',

			self::CantGetMessageList => 'CantGetMessageList',
			self::CantGetMessage => 'CantGetMessage',
			self::CantDeleteMessage => 'CantDeleteMessage',
			self::CantMoveMessage => 'CantMoveMessage',
			self::CantSaveMessage => 'CantSaveMessage',
			self::CantSendMessage => 'CantSendMessage',
			self::InvalidRecipients => 'InvalidRecipients',
			self::CantCreateFolder => 'CantCreateFolder',
			self::CantRenameFolder => 'CantRenameFolder',
			self::CantDeleteFolder => 'CantDeleteFolder',
			self::CantSubscribeFolder => 'CantSubscribeFolder',
			self::CantUnsubscribeFolder => 'CantUnsubscribeFolder',
			self::CantDeleteNonEmptyFolder => 'CantDeleteNonEmptyFolder',
			self::CantSaveSettings => 'CantSaveSettings',
			self::CantSavePluginSettings => 'CantSavePluginSettings',
			self::DomainAlreadyExists => 'DomainAlreadyExists',
			self::CantInstallPackage => 'CantInstallPackage',
			self::CantDeletePackage => 'CantDeletePackage',
			self::InvalidPluginPackage => 'InvalidPluginPackage',
			self::UnsupportedPluginPackage => 'UnsupportedPluginPackage',
			self::LicensingServerIsUnavailable => 'LicensingServerIsUnavailable',
			self::LicensingExpired => 'LicensingExpired',
			self::LicensingBanned => 'LicensingBanned',
			self::DemoSendMessageError => 'DemoSendMessageError',
			self::AccountAlreadyExists => 'AccountAlreadyExists',
			self::MailServerError => 'MailServerError',
			self::ClientViewError => 'ClientViewError',
			self::UnknownNotification => 'UnknownNotification',
			self::UnknownError => 'UnknownError'
		);

		if (self::ClientViewError === $iCode && $oPrevious instanceof \Exception)
		{
			return $oPrevious->getMessage();
		}

		return isset($aMap[$iCode]) ? $aMap[$iCode].'['.$iCode.']' : 'UnknownNotification['.$iCode.']';
	}
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_VAR))
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_VAR))
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR)))))