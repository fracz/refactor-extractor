||||||||    public function next() {

        $previousStamp = $this->currentDate->getTimeStamp();

        // Finding the next overridden event in line, and storing that for
        // later use.
        $overriddenEvent = null;
        $overriddenDate = null;
        $this->currentOverriddenEvent = null;

        foreach($this->overriddenEvents as $index=>$event) {
            if ($index > $previousStamp) {
                $overriddenEvent = $event;
                $overriddenDate = clone $event->DTSTART->getDateTime();
                break;
            }
        }

        // If we have a stored 'next date', we will use that.
        if ($this->nextDate) {
            if (!$overriddenDate || $this->nextDate < $overriddenDate) {
                $this->currentDate = $this->nextDate;
                $currentStamp = $this->currentDate->getTimeStamp();
                $this->nextDate = null;
            } else {
                $this->currentDate = clone $overriddenDate;
                $this->currentOverriddenEvent = $overriddenEvent;
            }
            $this->counter++;
            return;
        }

        while(true) {

            // Otherwise, we find the next event in the normal RRULE
            // sequence.
            switch($this->frequency) {

                case 'hourly' :
                    $this->nextHourly();
                    break;

                case 'daily' :
                    $this->nextDaily();
                    break;

                case 'weekly' :
                    $this->nextWeekly();
                    break;

                case 'monthly' :
                    $this->nextMonthly();
                    break;

                case 'yearly' :
                    $this->nextYearly();
                    break;

            }
            $currentStamp = $this->currentDate->getTimeStamp();


            // Checking exception dates
            foreach($this->exceptionDates as $exceptionDate) {
                if ($this->currentDate == $exceptionDate) {
                    $this->counter++;
                    continue 2;
                }
            }
            foreach($this->overriddenDates as $check) {
                if ($this->currentDate == $check) {
                    continue 2;
                }
            }
            break;

        }



        // Is the date we have actually higher than the next overiddenEvent?
        if ($overriddenDate && $this->currentDate > $overriddenDate) {
            $this->nextDate = clone $this->currentDate;
            $this->currentDate = clone $overriddenDate;
            $this->currentOverriddenEvent = $overriddenEvent;
            $this->handledOverridden++;
        }
        $this->counter++;


        /*
         * If we have overridden events left in the queue, but our counter is
         * running out, we should grab one of those.
         */
        if (!is_null($overriddenEvent) && !is_null($this->count) && count($this->overriddenEvents) - $this->handledOverridden >= ($this->count - $this->counter)) {

            $this->currentOverriddenEvent = $overriddenEvent;
            $this->currentDate = clone $overriddenDate;
            $this->handledOverridden++;

        }

    }

    /**
     * Does the processing for advancing the iterator for hourly frequency.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CLONE
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CLONE
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))
                (AST_POST_INC
                    (AST_PROP
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_WHILE
        (AST_CONST)
        (
            (AST_SWITCH
                (AST_PROP
                    (AST_VAR))
                (AST_SWITCH_LIST
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BREAK
                                (NULL))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_FOREACH
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (
                                (AST_POST_INC
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CONTINUE
                                    (SCALAR)))))))
            (AST_FOREACH
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (SCALAR)))))))
            (AST_BREAK
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLONE
                        (AST_PROP
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLONE
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_POST_INC
                    (AST_PROP
                        (AST_VAR))))))
    (AST_POST_INC
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_PROP
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLONE
                        (AST_VAR)))
                (AST_POST_INC
                    (AST_PROP
                        (AST_VAR)))))))