	public function EnableCrypto($iCryptoType = STREAM_CRYPTO_METHOD_TLS_CLIENT)
	{
		if (\is_resource($this->rConnect) &&
			\MailSo\Base\Utils::FunctionExistsAndEnabled('stream_socket_enable_crypto'))
		{
			if (!@\stream_socket_enable_crypto($this->rConnect, true, $iCryptoType))
			{
				$this->writeLogException(
					new \MailSo\Net\Exceptions\Exception('Cannot enable STARTTLS. [type='.$iCryptoType.']'),
					\MailSo\Log\Enumerations\Type::ERROR, true);
			}
		}
	}

	/**
	 * @return void
	 */
||||||||	public function EnableCrypto()
	{
		$bError = true;
		if (\is_resource($this->rConnect) &&
			\MailSo\Base\Utils::FunctionExistsAndEnabled('stream_socket_enable_crypto'))
		{
			switch (true)
			{
				case defined('STREAM_CRYPTO_METHOD_ANY_CLIENT') &&
					@\stream_socket_enable_crypto($this->rConnect, true, STREAM_CRYPTO_METHOD_ANY_CLIENT):
				case @\stream_socket_enable_crypto($this->rConnect, true, STREAM_CRYPTO_METHOD_TLS_CLIENT):
				case @\stream_socket_enable_crypto($this->rConnect, true, STREAM_CRYPTO_METHOD_SSLv23_CLIENT):
					$bError = false;
					break;
			}
		}

		if ($bError)
		{
			$this->writeLogException(
				new \MailSo\Net\Exceptions\Exception('Cannot enable STARTTLS.'),
				\MailSo\Log\Enumerations\Type::ERROR, true);
		}
	}

	/**
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)
                                        (AST_VAR)))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (SCALAR))))
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_CONST))))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_SWITCH
                    (AST_CONST)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CONST)
                                            (AST_CONST))))))
                        (AST_SWITCH_CASE
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)
                                        (AST_CONST)))))
                        (AST_SWITCH_CASE
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)
                                        (AST_CONST))))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONST))
                                (AST_BREAK
                                    (NULL)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (SCALAR)))
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CONST)))))))