	public function MessageThreadInfo($sFolderName, $sFolderHash, $sUid, $oCacher)
	{
		$aResult = array(
			array(),
			array()
		);

		$aThreads = $this->MessageListThreadsMap($sFolderName, $sFolderHash, $oCacher);
		if (isset($aThreads[$sUid]) && is_array($aThreads[$sUid]))
		{
			$aResult[0] = $aThreads[$sUid];

			$oMessageCollection = MessageCollection::NewInstance();
			$oMessageCollection->FolderName = $sFolderName;
			$oMessageCollection->FolderHash = $sFolderHash;
			$oMessageCollection->Offset = 0;
			$oMessageCollection->Limit = 999;
			$oMessageCollection->Search = '';

			$this->MessageListByRequestIndexOrUids($oMessageCollection, $aThreads[$sUid], true);

//			$oMessageCollection->ForeachList(function (/* @var $oMessage \MailSo\Mail\Message */ $oMessage) use ($aThreads) {
//				$oMessage->SetThreads(isset($aThreads[$oMessage->Uid()]) && is_array($aThreads[$oMessage->Uid()]) ?
//					$aThreads[$oMessage->Uid()] : null);
//			});

			$aResult[1] = $oMessageCollection;
		}

		return $aResult;
	}

	/**
	 * @param string $sFolderName
	 * @param int $iIndex
	 * @param bool $bIndexIsUid = true
	 * @param \MailSo\Cache\CacheClient $oCacher = null
	 * @param int $iBodyTextLimit = null
	 *
	 * @return \MailSo\Mail\Message|false
	 *
	 * @throws \MailSo\Base\Exceptions\InvalidArgumentException
	 * @throws \MailSo\Net\Exceptions\Exception
	 * @throws \MailSo\Imap\Exceptions\Exception
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ARRAY)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||