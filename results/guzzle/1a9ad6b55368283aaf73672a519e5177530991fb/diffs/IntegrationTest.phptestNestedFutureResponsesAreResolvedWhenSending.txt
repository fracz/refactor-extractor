    public function testNestedFutureResponsesAreResolvedWhenSending()
    {
        $c = new Client();
        $total = 3;
        Server::enqueue([
            new Response(200),
            new Response(201),
            new Response(202)
        ]);
        $c->getEmitter()->on(
            'complete',
            function (CompleteEvent $e) use (&$total) {
                if (--$total) {
                    $e->retry();
                }
            }
        );
        $response = $c->get(Server::$url);
        $this->assertEquals(202, $response->getStatusCode());
        $this->assertEquals('GuzzleHttp\Message\Response', get_class($response));
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)))
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLOSURE
                (PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_PRE_DEC
                                (AST_VAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_PROP))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR))))))||||||||