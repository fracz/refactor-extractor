    public function testHasDeprecatedAddSubscriber()
    {
        $emitter = new Emitter();
        $emitter->addSubscriber('foo', new TestEventSubscriber());
    }
}

class TestWithDispatcher
{
    public $name;

    public function foo(EventInterface $e, $name)
    {
        $this->name = $name;
    }
}

class TestEventSubscriber extends TestEventListener implements SubscriberInterface
{
    public function getEvents()
    {
        return [
            'pre.foo' => ['preFoo'],
            'post.foo' => ['postFoo']
        ];
    }
}

class TestEventSubscriberWithPriorities extends TestEventListener implements SubscriberInterface
{
    public function getEvents()
    {
        return [
            'pre.foo' => ['preFoo', 10],
            'post.foo' => ['postFoo']
        ];
    }
}

class TestEventSubscriberWithMultiple extends TestEventListener implements SubscriberInterface
{
    public function getEvents()
    {
        return ['pre.foo' => [['preFoo', 10],['preFoo', 20]]];
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW))))||||||||