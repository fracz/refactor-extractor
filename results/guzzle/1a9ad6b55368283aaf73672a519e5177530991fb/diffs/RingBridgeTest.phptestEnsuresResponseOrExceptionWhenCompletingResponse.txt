    public function testEnsuresResponseOrExceptionWhenCompletingResponse()
    {
        $trans = new Transaction(new Client(), new Request('GET', 'http://f.co'));
        $f = new MessageFactory();
        $fsm = new RequestFsm(function () {}, new MessageFactory());
        try {
            RingBridge::completeRingResponse($trans, [], $f, $fsm);
        } catch (RequestException $e) {
            $this->assertSame($trans->request, $e->getRequest());
            $this->assertContains('RingPHP', $e->getMessage());
        }
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_NEW)
                (AST_NEW
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CLOSURE
                    (NULL))
                (AST_NEW))))
    (AST_TRY
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_ARRAY)
                    (AST_VAR)
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL)))||||||||