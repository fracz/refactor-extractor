    public function testDoesNotInfinitelyRecurse()
    {
        $client = new Client(['handler' => function () {
            throw new \RuntimeException('No network access');
        }]);

        $last = null;
        $client->getEmitter()->on(
            'before',
            function (BeforeEvent $e) use (&$last) {
                $e->intercept(new Response(200));
                if (function_exists('xdebug_get_stack_depth')) {
                    if ($last) {
                        $this->assertEquals($last, xdebug_get_stack_depth());
                    } else {
                        $last = xdebug_get_stack_depth();
                    }
                }
            }
        );

        $requests = [];
        for ($i = 0; $i < 100; $i++) {
            $requests[] = $client->createRequest('GET', 'http://foo.com');
        }

        $pool = new Pool($client, $requests);
        $pool->wait();
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLOSURE
                            (NULL)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (SCALAR))))))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLOSURE
                (PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (SCALAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_VAR)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_CALL)))))
                                    (AST_IF_ELEM
                                        (NULL)
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_CALL))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||