    private function getEvent()
    {
        return $this->getMockBuilder('GuzzleHttp\Event\AbstractEvent')
            ->getMockForAbstractClass();
    }
}

class CallableClass
{
    public function __invoke()
    {
    }
}

class TestEventListener
{
    public $preFooInvoked = false;
    public $postFooInvoked = false;

    /* Listener methods */

    public function preFoo(EventInterface $e)
    {
        $this->preFooInvoked = true;
    }

    public function postFoo(EventInterface $e)
    {
        $this->postFooInvoked = true;

        $e->stopPropagation();
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Deprecated
     */
    public function testHasDeprecatedAddListener()
    {
        $emitter = new Emitter();
        $emitter->addListener('foo', function () {});
    }

    /**
     * @expectedException \PHPUnit_Framework_Error_Deprecated
     */
    public function testHasDeprecatedAddSubscriber()
    {
        $emitter = new Emitter();
        $emitter->addSubscriber('foo', new TestEventSubscriber());
    }
}

class TestWithDispatcher
{
    public $name;

    public function foo(EventInterface $e, $name)
    {
        $this->name = $name;
    }
}

class TestEventSubscriber extends TestEventListener implements SubscriberInterface
{
    public function getEvents()
    {
        return [
            'pre.foo' => ['preFoo'],
            'post.foo' => ['postFoo']
        ];
    }
}

class TestEventSubscriberWithPriorities extends TestEventListener implements SubscriberInterface
{
    public function getEvents()
    {
        return [
            'pre.foo' => ['preFoo', 10],
            'post.foo' => ['postFoo']
        ];
    }
}

class TestEventSubscriberWithMultiple extends TestEventListener implements SubscriberInterface
{
    public function getEvents()
    {
        return ['pre.foo' => [['preFoo', 10],['preFoo', 20]]];
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))))||||||||