    public static function batch(
        ClientInterface $client,
        $requests,
        array $options = []
    ) {
        $hash = new \SplObjectStorage();
        foreach ($requests as $request) {
            $hash->attach($request);
        }

        // In addition to the normally run events when requests complete, add
        // and event to continuously track the results of transfers in the hash.
        (new self($client, $requests, RequestEvents::convertEventArray(
            $options,
            ['end'],
            [
                'priority' => RequestEvents::LATE,
                'fn'       => function (EndEvent $e) use ($hash) {
                    $hash[$e->getRequest()] = $e->getException()
                        ? $e->getException()
                        : $e->getResponse();
                }
            ]
        )))->wait();

        return new BatchResults($hash);
    }

    /**
     * Creates a Pool and immediately sends the requests.
     *
     * @param ClientInterface $client   Client used to send the requests
     * @param array|\Iterator $requests Requests to send in parallel
     * @param array           $options  Passes through the options available in
     *                                  {@see GuzzleHttp\Pool::__construct}
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CLOSURE
                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                    (AST_CLOSURE_USES
                                        (AST_CLOSURE_VAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_CONDITIONAL
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)))))||||||||