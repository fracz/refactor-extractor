    public function testHasGettersAndSetters()
    {
        $url = Url::fromString('http://www.test.com/');
        $url->setHost('example.com');
        $this->assertEquals('example.com', $url->getHost());
        $url->setPort(8080);
        $this->assertEquals('8080', $url->getPort());
        $url->setPath('/foo/bar');
        $this->assertEquals('/foo/bar', $url->getPath());
        $url->setPassword('a');
        $this->assertEquals('a', $url->getPassword());
        $url->setUsername('b');
        $this->assertEquals('b', $url->getUsername());
        $url->setFragment('abc');
        $this->assertEquals('abc', $url->getFragment());
        $url->setScheme('https');
        $this->assertEquals('https', $url->getScheme());
        $url->setQuery('a=123');
        $this->assertEquals('a=123', (string) $url->getQuery());
        $this->assertEquals(
            'https://b:a@example.com:8080/foo/bar?a=123#abc',
            (string) $url
        );
        $url->setQuery(new Query(['b' => 'boo']));
        $this->assertEquals('b=boo', $url->getQuery());
        $this->assertEquals(
            'https://b:a@example.com:8080/foo/bar?b=boo#abc',
            (string) $url
        );

        $url->setQuery('a%20=bar!', true);
        $this->assertEquals(
            'https://b:a@example.com:8080/foo/bar?a%20=bar!#abc',
            (string) $url
        );
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CAST
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CAST
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CAST
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CAST
                (AST_VAR)))))||||||||