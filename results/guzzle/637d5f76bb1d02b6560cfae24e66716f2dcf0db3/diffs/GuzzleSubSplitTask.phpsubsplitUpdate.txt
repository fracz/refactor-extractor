    public function subsplitUpdate()
    {
        $this->log('git-subsplit update...');
        $cmd = $this->client->getCommand('subsplit');
        $cmd->addArgument('update');
        try {
            $output = $cmd->execute();
        } catch (Exception $e) {
            throw new BuildException('git subsplit update failed'. $e);
        }
    }

    /**
     * Runs `git subsplit init` based on the remote repository.
     */
||||||||    public function subsplitUpdate()
    {
        $repo = $this->getRepository();
        $this->log('git-subsplit update...');
        $cmd = $this->client->getCommand('subsplit');
        $cmd->addArgument('update');
        try {
            $output = $cmd->execute();
        } catch (Exception $e) {
            throw new BuildException('git subsplit update failed'. $e);
        }
        chdir($repo . '/.subsplit');
        passthru('php ../composer.phar update --dev');
        chdir($repo);
    }

    /**
     * Runs `git subsplit init` based on the remote repository.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))))))))
        (NULL))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR))))