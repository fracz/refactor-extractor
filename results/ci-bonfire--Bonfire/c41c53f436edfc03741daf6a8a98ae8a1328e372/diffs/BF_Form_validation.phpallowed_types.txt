	public function allowed_types($str, $types = NULL)
	{
		if (!$types)
		{
			log_message('debug', 'form_validation method allowed_types was called without any allowed types.');
			return FALSE;
		}

		$type = explode('|', $types);
		$filetype = pathinfo($str['name'],PATHINFO_EXTENSION);

		if (!in_array($filetype, $type))
		{
			$this->CI->form_validation->set_message('allowed_types', lang('bf_form_allowed_types'));
			return FALSE;
		}

		return TRUE;

	}//end allowed_types()

	//--------------------------------------------------------------------

	/**
	 * Checks that the entered string is one of the values entered as the second parameter.
	 * Please separate the allowed file types with a comma.
	 *
	 * @access public
	 *
	 * @param string $str      String field name to validate
	 * @param string $options String allowed values
	 *
	 * @return bool If files are in the allowed type array then TRUE else FALSE
	 */
||||||||	public function allowed_types($str, $types = null)
	{
		if ( ! $types) {
			log_message('debug', 'form_validation method allowed_types was called without any allowed types.');
            $this->CI->form_validation->set_message('allowed_types', lang('bf_form_allowed_types_none'));
			return false;
		}

		$type = explode('|', $types);
		$filetype = pathinfo($str['name'], PATHINFO_EXTENSION);

		if (in_array($filetype, $type)) {
            return true;
        }

        $this->CI->form_validation->set_message('allowed_types', lang('bf_form_allowed_types'));
        return false;
	}

	/**
	 * Checks that the entered string is one of the values entered as the second
	 * parameter.
	 *
	 * Please separate the allowed file types with a comma.
	 *
	 * @param string $str      String field name to validate
	 * @param string $options String allowed values
	 *
	 * @return bool If files are in the allowed type array then TRUE else FALSE
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONST)))