	public function one_of($str, $options = NULL)
	{
		if (!$options)
		{
			log_message('debug', 'form_validation method one_of was called without any possible values.');
			return FALSE;
		}

		log_message('debug', 'form_validation one_of options:'.$options);

		$possible_values = explode(',', $options);

		if (!in_array($str, $possible_values))
		{
			$this->CI->form_validation->set_message('one_of', lang('bf_form_one_of'));
			return FALSE;
		}

		return TRUE;

	}//end one_of()

	//--------------------------------------------------------------------

	/**
	 * Allows Setting maximum file upload size in your form validation rules.
	 *
	 * @author Shawn Crigger <support@s-vizion.com>
	 * @access public
	 *
	 * @param string  $str  String field name to validate
	 * @param integer $size Integer maximum upload size in bytes
	 *
	 * @return bool
	 */
||||||||	public function one_of($str, $options = null)
	{
		if ( ! $options) {
			log_message('debug', 'form_validation method one_of was called without any possible values.');
            $this->CI->form_validation->set_message('one_of', lang('bf_form_one_of_none'));
            return false;
		}

		log_message('debug', "form_validation one_of options: {$options}");
		$possible_values = explode(',', $options);
		if (in_array($str, $possible_values)) {
            return true;
        }

        $this->CI->form_validation->set_message('one_of', lang('bf_form_one_of'));
        return false;
	}

	/**
	 * Set maximum file upload size in your form validation rules.
	 *
	 * @author Shawn Crigger <support@s-vizion.com>
	 *
	 * @param string  $str  String field name to validate
	 * @param integer $size Integer maximum upload size in bytes
	 *
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_CALL
        (
            (SCALAR)
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_CALL
        (
            (SCALAR)
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONST)))