||||||||    public function _backup($params = array())
    {
        if (empty($params) || ! is_array($params)) {
            return false;
        }

        // Rather than returning false as in the above case, if an empty 'tables'
        // array is passed or the 'tables' param is not set, the MySQL driver will
        // return an empty string (if it doesn't error out). This aims to behave
        // the same way, but be a little more direct about it.
        if (empty($params['tables'])) {
            return '';
        }

        // Be explicit about the expected params and their default values. This
        // also permits performing the type casts up front.
        $tables     = (array) $params['tables'];
        $ignore     = isset($params['ignore']) ? (array) $params['ignore'] : array();
        $add_drop   = isset($params['add_drop']) ? (bool) $params['add_drop'] : true;
        $add_insert = isset($params['add_insert']) ? (bool) $params['add_insert'] : true;
        $newline    = isset($params['newline']) ? $params['newline'] : "\n";
        // $filename   = isset($params['filename']) ? $params['filename'] : '';
        // $format     = isset($params['format']) ? $params['format'] : 'gzip';

        // Build the output.
        $output = '';
        foreach ($tables as $table) {
            // If the table is in the "ignore" list, skip it.
            if (in_array($table, $ignore, true)) {
                continue;
            }

            // Get the table schema.
            $query = $this->db->query(
                'SHOW CREATE TABLE ' . $this->db->_escape_identifiers("{$this->db->database}.{$table}")
            );

            // If no table schema is returned, move on to the next table.
            if ($query === false) {
                continue;
            }

            // Write out the table schema.
            $output .= "#{$newline}# TABLE STRUCTURE FOR: {$table}{$newline}#{$newline}{$newline}";
            if ($add_drop == true) {
                $output .= 'DROP TABLE IF EXISTS ' . $this->db->_protect_identifiers($table) . ";{$newline}{$newline}";
            }

            $i = 0;
            $result = $query->result_array();
            foreach ($result[0] as $val) {
                if ($i++ % 2) {
                    $output .= "{$val};{$newline}{$newline}";
                }
            }

            // If inserts are not needed move on to the next table.
            if ($add_insert == false) {
                continue;
            }

            $query->free_result();

            // Switch to mysqli_query to retrieve the mysqli_result for use in the
            // rest of the loop.

            // Grab all the data from the current table.
            $mysqliResult = mysqli_query(
                $this->db->conn_id,
                'SELECT * FROM ' . $this->db->_protect_identifiers($table)
            );
            if ($mysqliResult->num_rows == 0) {
                continue;
            }

            // Fetch the field names and determine whether the field is an integer
            // type. Use this info to decide whether to surround the data with quotes.

            $i = 0;
            $fieldArr = array();
            $is_int = array();
            while ($field = $mysqliResult->fetch_field()) {

                // Is this field an integer?
                // Integer types: tinyint, smallint, mediumint, int, bigint.
                // Most versions of MySQL store timestamp as a string

                $is_int[$i] = in_array(
                    $field->type,
                    array(
                        MYSQLI_TYPE_TINY, MYSQLI_TYPE_SHORT, MYSQLI_TYPE_INT24,
                        MYSQLI_TYPE_LONG, MYSQLI_TYPE_LONGLONG
                    ), //, MYSQLI_TIMESTAMP_FLAG),
                    true
                );

                // Create a list of field names.
                $fieldArr[] = $this->db->_escape_identifiers($field->name);
                ++$i;
            }

            // Build a string from the list of field names.
            $field_str = implode(', ', $fieldArr);

            // Build the insert string for each row.
            while ($row = $mysqliResult->fetch_row()) {
                $valArr = array();
                $i = 0;
                foreach ($row as $v) {
                    // Is the value null? Escape the data if it's not an integer.
                    $valArr[] = $v === null ? 'NULL'
                        : ($is_int[$i] == false ? $this->db->escape($v) : $v);
                    ++$i;
                }

                $val_str = implode(', ', $valArr);

                // Build the INSERT string
                $output .= 'INSERT INTO '
                    . $this->db->_protect_identifiers($table)
                    . " ({$field_str}) VALUES ({$val_str});{$newline}";
            }

            $output .= "{$newline}{$newline}";
        }

        return $output;
    }
}
/* End of file bfmysqli_utility.php */
/* Location: ./system/database/drivers/bfmysqli/bfmysqli_utility.php */||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_CAST
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_ENCAPS_LIST
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR)
                                        (AST_VAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_VAR))))
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_VAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_POST_INC
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_ENCAPS_LIST
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (AST_VAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_WHILE
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (NULL)))
                                (AST_CONST))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_PRE_INC
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_WHILE
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CONST))
                                    (SCALAR)
                                    (AST_CONDITIONAL
                                        (AST_BINARY_OP
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_VAR))
                                            (AST_CONST))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_VAR)))
                                        (AST_VAR))))
                            (AST_PRE_INC
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_VAR))))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))