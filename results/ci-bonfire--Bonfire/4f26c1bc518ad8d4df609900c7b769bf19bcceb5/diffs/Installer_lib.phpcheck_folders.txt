	public function check_folders($folders = null)
	{
		if (is_null($folders)) {
			$folders = $this->writable_folders;
		}

		// Load the file helper
		$this->ci->load->helper('file');

		$data = array();
		foreach ($folders as $folder) {
			// If it starts with 'public/', then that represents the web root.
            // Otherwise, try to locate it from the main folder.
			if (strpos($folder, 'public/') === 0) {
				$realpath = FCPATH . preg_replace('{^public/}', '', $folder);
			} else {
				$realpath = str_replace('application/', '', APPPATH) . $folder;
			}

			$data[$folder] = is_really_writable($realpath);
		}

		return $data;
	}

	/**
	 * Check an array of files to see if they are writable and return results
	 * usable in the requirements check step.
	 *
	 * @param string[] $files The files to check
	 *
	 * @return	array
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_VAR)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_CONST)))
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||