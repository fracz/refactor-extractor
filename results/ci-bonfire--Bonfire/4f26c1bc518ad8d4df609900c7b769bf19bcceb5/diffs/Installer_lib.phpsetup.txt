	public function setup()
	{
        // Install default info into the database.
        // This is done by running the app, core, and module-specific migrations

		// Load the Database before calling the Migrations
		$this->ci->load->database();

		// Install the database tables.
		$this->ci->load->library(
            'migrations/migrations',
            array('migrations_path' => BFPATH . 'migrations')
        );

		// Core Migrations - this is all that is needed for Bonfire install.
		if ( ! $this->ci->migrations->install()) {
			return $this->ci->migrations->getErrorMessage();
		}

		// Save the information to the settings table
		$settings = array(
			'site.title'        => 'My Bonfire',
			'site.system_email'	=> 'admin@mybonfire.com',
		);

		foreach	($settings as $key => $value) {
			$setting_rec = array(
                'name'   => $key,
                'module' => 'core',
                'value'  => $value,
            );

			$this->ci->db->where('name', $key);
			if ($this->ci->db->update('settings', $setting_rec) == false) {
				return lang('in_db_settings_error');
			}
		}

		// Update the emailer sender_email
		$setting_rec = array(
            'name'   => 'sender_email',
            'module' => 'email',
            'value'  => '',
        );

		$this->ci->db->where('name', 'sender_email');
		if ($this->ci->db->update('settings', $setting_rec) == false) {
			return lang('in_db_settings_error');
		}

		// Install the admin user in the users table so they can login.
		$data = array(
			'role_id'  => 1,
			'email'    => 'admin@mybonfire.com',
			'username' => 'admin',
			'active'   => 1,
		);

		// As of 0.7, using phpass for password encryption...
		require(BFPATH . 'modules/users/libraries/PasswordHash.php');

		$iterations	= $this->ci->config->item('password_iterations');
		$hasher     = new PasswordHash($iterations, false);
		$password   = $hasher->HashPassword('password');

		$data['password_hash'] = $password;
		$data['created_on']    = date('Y-m-d H:i:s');
		$data['display_name']  = $data['username'];

		if ($this->ci->db->insert('users', $data) == false) {
			$this->errors = lang('in_db_account_error');
			return false;
		}

		// Create a unique encryption key
		$this->ci->load->helper('string');
		$key = random_string('unique', 40);

		$this->ci->load->helper('config_file');

		$config_array = array('encryption_key' => $key);
		write_config('config', $config_array, '', APPPATH);

        // Run custom migrations last. In particular this comes after the core
        // migrations, and after populating the user table.

		// Get the list of custom modules in the main application
		$module_list = $this->get_module_versions();
		if (is_array($module_list) && count($module_list)) {
			foreach ($module_list as $module_name => $module_detail) {
				// Install the migrations for the custom modules
				if ( ! $this->ci->migrations->install("{$module_name}_")) {
					return $this->ci->migrations->getErrorMessage();
				}
			}
		}

		// Write a file to /public/install/installed.txt as a simple check
        // whether it's installed, so development doesn't require removing the
        // install folder.
		$this->ci->load->helper('file');

		$filename = APPPATH . 'config/installed.txt';
		$msg = 'Installed On: ' . date('r') . "\n";
		write_file($filename, $msg);

		return true;
	}

	//--------------------------------------------------------------------
	// !Private Methods
	//--------------------------------------------------------------------

    /**
     * Get the versions of the modules
     *
     * @return array    The installed/latest versions of each module
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (AST_CONST))
                    (
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_VAR)))
                                        (
                                            (AST_ENCAPS_LIST
                                                (AST_VAR)
                                                (SCALAR)))))
                                (
                                    (AST_RETURN
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_PROP
                                                    (AST_VAR)))))))))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))||||||||