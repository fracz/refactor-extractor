    public function login($login, $password, $remember = false)
		{
        if (empty($login) || empty($password)) {
            Template::set_message(
                sprintf(
                    lang('us_fields_required'),
                    $this->ci->settings_lib->item('auth.login_type') == 'both' ? lang('bf_login_type_both') : lang('bf_' . $this->ci->settings_lib->item('auth.login_type'))
                ),
                'error'
            );
            return false;
		}

        // Grab the user from the db.
        $selects = array(
            'id',
            'email',
            'username',
            'users.role_id',
            'users.deleted',
            'users.active',
            'banned',
            'ban_message',
            'password_hash',
            'force_password_reset'
        );

        if ($this->ci->settings_lib->item('auth.do_login_redirect')) {
            $selects[] = 'login_destination';
		}

        $this->ci->user_model->select($selects);
        if ($this->ci->settings_lib->item('auth.login_type') == 'both') {
            $user = $this->ci->user_model->find_by(
                array('username' => $login, 'email' => $login),
                null,
                'or'
            );
        } else {
            $user = $this->ci->user_model->find_by(
                $this->ci->settings_lib->item('auth.login_type'),
                $login
            );
		}

        // Check whether the username, email, or password doesn't exist.
        if ($user == false) {
			Template::set_message(lang('us_bad_email_pass'), 'error');
            return false;
		}

        // Check whether the account has been activated.
        if ($user->active == 0) {
		$activation_type = $this->ci->settings_lib->item('auth.user_activation_method');
            if ($activation_type > 0) {
                if ($activation_type == 1) {
				Template::set_message(lang('us_account_not_active'), 'error');
                } elseif ($activation_type == 2) {
				Template::set_message(lang('us_admin_approval_pending'), 'error');
			}

                return false;
            }
		}

        // Check whether the account has been soft deleted. The >= 1 check ensures
        // this will still work if the deleted field is a UNIX timestamp.
        if ($user->deleted >= 1) {
            Template::set_message(
                sprintf(
                    lang('us_account_deleted'),
                    html_escape(settings_item("site.system_email"))
                ),
                'error'
            );
            return false;
		}

		// Try password
        if (! $this->check_password($password, $user->password_hash)) {
            // Bad password
            Template::set_message(lang('us_bad_email_pass'), 'error');
				$this->increase_login_attempts($login);

            return false;
			}

        // Check whether the account has been banned.
        if ($user->banned) {
            $this->increase_login_attempts($login);
            Template::set_message(
                $user->ban_message ? $user->ban_message : lang('us_banned_msg'),
                'error'
            );
            return false;
        }

        // Check whether the user needs to reset their password.
        if ($user->force_password_reset == 1) {
                Template::set_message(lang('us_forced_password_reset_note'), 'warning');

            // Generate a reset hash to pass the reset_password checks...
                $this->ci->load->helpers(array('string', 'security'));
                $pass_code = random_string('alnum', 40);
                $hash = do_hash($pass_code . $user->email);

            // Save the hash to the db so it can be confirmed later.
            $this->ci->user_model->update_where(
                'id',
                $user->id,
                array('reset_hash' => $hash, 'reset_by' => strtotime("+24 hours"))
            );

                $this->ci->session->set_userdata('pass_check', $hash);
                $this->ci->session->set_userdata('email', $user->email);

            // Redirect the user to the reset password page.
                redirect('/users/reset_password');
            }

			$this->clear_login_attempts($login);

        // The login was successfully validated, so setup the session
        $this->setupSession(
            $user->id,
            $user->username,
            $user->password_hash,
            $user->email,
            $user->role_id,
            $remember,
            '',
            $user->username
        );

			// Save the login info
        $this->ci->user_model->update(
            $user->id,
            array(
                'last_login' => $this->getLoginTimestamp(),
				'last_ip'				=> $this->ip_address,
            )
			);

        // Clear the cached result of user() (and is_logged_in(), user_id(), etc.).
			// Doesn't fix `$this->current_user` in controller (for this page load)...
			unset($this->user);

        // Can't pass the array directly to the trigger, must use a variable.
        $trigger_data = array('user_id' => $user->id, 'role_id' => $user->role_id);
        Events::trigger('after_login', $trigger_data);

        // Save the redirect location
        $this->login_destination = empty($user->login_destination) ? '' : $user->login_destination;

        return true;
		}

	/**
     * Destroy the autologin information and the current session.
	 *
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (
                                                (SCALAR)))
                                        (SCALAR))
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (AST_CALL
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_PROP
                                                            (AST_VAR)))
                                                    (
                                                        (SCALAR)))))))))
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (SCALAR)))
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)))
                                                (SCALAR)))))
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)))
                                                (SCALAR))))))
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)))))))
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_STATIC_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_CALL
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_VAR)
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_PROP
                (AST_VAR))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_UNSET
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_CONST)))||||||||