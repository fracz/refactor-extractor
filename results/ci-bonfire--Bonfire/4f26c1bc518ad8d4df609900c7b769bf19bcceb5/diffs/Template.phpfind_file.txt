    private static function find_file($view = null, $data = null)
		{
        if (empty($view)) {
            return false;
		}

        if (! empty($data)) {
			$data = (array)$data;
		}

        $view_path = ''; // The location of the file.
        $view_file = "{$view}.php"; // filename for the view
		$active_theme_set = ! empty(self::$active_theme);	// Is the active theme set?

        // In most cases, self::$theme_paths will only include one location.
        // When it does not, the last will take precedence for the search.
        // Reverse the $theme_paths array and break the loop when the file is found.
		$theme_locations = array_reverse(self::$theme_paths);

        // Search through the theme locations.
        foreach ($theme_locations as $path) {
            $site_theme_path = self::$site_path . "{$path}/";

            // First, check the active theme
			$active_theme_path = $site_theme_path . self::$active_theme;
            self::debug_message("[Find File] Looking for view in active theme: '{$active_theme_path}{$view_file}'");

            if ($active_theme_set && is_file($active_theme_path . $view_file)) {
                // If the view was found, set the view path and exit the loop.
				$view_path = $active_theme_path;
                self::debug_message("Found '{$view}' in Active Theme.");
				break;
			}

            // Next, check the default theme.
			$default_theme_path = $site_theme_path . self::$default_theme;
            self::debug_message("[Find File] Looking for view in default theme: '{$default_theme_path}{$view_file}'");

            if (is_file($default_theme_path . $view_file)) {
                // If the view was found, set the view path and exit the loop.
				$view_path = $default_theme_path;
                self::debug_message("Found '{$view}' in Default Theme.");
				break;
			}
		}

        // If $view_path is empty, the view was not found.
        if (empty($view_path)) {
            return '';
        }

        // Parse or render the view based on current settings.

        // Clean up the view path, to be safe.
			$view_path = str_replace('//', '/', $view_path);
        self::debug_message("[Find File] Rendering file at: '{$view_path}{$view_file}'");

        // Get the output of the view.
        if (self::$parse_views === true) {
            $data = array_merge((array) $data, self::$ci->load->_ci_cached_vars);
			}

        return self::$ci->load->_ci_load(array(
                    '_ci_path' => $view_path . $view_file,
                    '_ci_vars' => $data,
                    '_ci_return' => true,
                ));
			}

	/**
     * Debugging script to echo out message to the Console (if loaded) and to the
     * log files.
     *
     * By default it will only log the messages if self::$debug == true, but this
     * behaviour can be modified by passing $force as true.
	 *
     * @param  string  $message The message to log.
     * @param  boolean $force   If false, will respect self::$debug setting. If
     * true, will force the message to be logged.
	 *
     * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_EMPTY
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_PROP))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_STATIC_PROP)
                    (AST_ENCAPS_LIST
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (AST_STATIC_CALL
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_STATIC_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_BREAK
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (AST_STATIC_CALL
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_STATIC_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CAST
                                (AST_VAR))
                            (AST_PROP
                                (AST_PROP
                                    (AST_STATIC_PROP)))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_STATIC_PROP))
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR)))))))||||||||