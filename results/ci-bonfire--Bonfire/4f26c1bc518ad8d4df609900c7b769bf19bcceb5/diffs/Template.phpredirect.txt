    public static function redirect($url = null)
		{
        if (! preg_match('#^https?://#i', $url)) {
			$url = site_url($url);
		}

        if (! self::$ci->input->is_ajax_request()) {
            header("Location: {$url}");

            // The default header specifies the content type as HTML, which requires
            // certain elements to be considered valid. No content is included,
            // so use a content type which does not require any.
			header("Content-Type: text/plain");
        } else {
            // Output URL in a known location and escape it for safety.
			echo '<div id="url" data-url="';
			e($url);
			echo '"></div>';

            // Now JS can grab the URL and perform the redirect.
			echo <<<EOF
<script>
window.location = document.getElementById('url').getAttribute('data-url');
</script>
EOF;
		}

		exit();
    }

	/**
     * Load a view based on the current themes.
	 *
	 * @param string $view      The view to load.
	 * @param array  $data      An array of data elements to be made available to the views
	 * @param string $override  The name of a view to check for first (used for controller-based layouts)
	 * @param bool   $is_themed Whether it should check in the theme folder first.
	 * @param object $output    A pointer to the variable to store the output of the loaded view into.
	 *
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))))
            (
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR))))
                (AST_CALL
                    (
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR)))))
    (AST_EXIT
        (NULL)))||||||||