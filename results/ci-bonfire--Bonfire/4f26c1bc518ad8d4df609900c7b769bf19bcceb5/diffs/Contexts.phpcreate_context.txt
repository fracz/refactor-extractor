    public static function create_context($name = '', $roles = array(), $migrate = false)
    {
        if (empty($name)) {
            self::$errors = lang('ui_no_context_name');
            return false;
        }

        // Write the context name to the config file.

        self::$ci->load->helper('config_file');

        $contexts  = self::getContexts();
        $lowerName = strtolower($name);

        // Add the context if it is not already in the list of contexts.
        if (! in_array($lowerName, $contexts)) {
            array_unshift($contexts, $lowerName);

            if (! write_config('application', array('contexts' => $contexts), null)) {
                self::$errors[] = lang('ui_cant_write_config');
                return false;
            }
        }

        // Create an entry in the application_lang file for the context.

        if (! function_exists('addLanguageLine')) {
            self::$ci->load->helper('translate/languages');
        }

        $temp = addLanguageLine('application_lang.php', array("bf_context_{$lowerName}" => $name), 'english');
        if (! $temp) {
            // @todo set error/return if the language line was not added successfully?
        }

        // Create the relevant permissions.

        $cname = 'Site.' . ucfirst($name) . '.View';

        // Get the permission ID, either from an existing permission or by inserting
        // a new permission.
        self::$ci->load->model('permissions/permission_model');
        if (self::$ci->permission_model->permission_exists($cname)) {
            $pid = self::$ci->permission_model->find_by('name', $cname)->permission_id;
        } else {
            $pid = self::$ci->permission_model->insert(
                array(
                    'name'        => $cname,
                    'description' => 'Allow user to view the ' . ucwords($name) . ' Context.',
                )
            );
        }

        // Assign the permission to the supplied roles.

        // If no roles were supplied, exit, indicating success.
        if (empty($roles)) {
            return true;
        }

        // Assign the permission to each role.
        self::$ci->load->model('roles/role_permission_model');
        foreach ($roles as $role) {
            if (is_numeric($role)) {
                // Assign By Id.
                self::$ci->role_permission_model->delete($role, $pid);
                self::$ci->role_permission_model->create($role, $pid);
            } else {
                // Assign By Name.
                self::$ci->role_permission_model->assign_to_role($role, $cname);
            }
        }

        // if ($migrate) {
        //  @todo create a migration file.
        // }

        return true;
    }

    //--------------------------------------------------------------------------
    // !UTILITY METHODS
    //--------------------------------------------------------------------------

    /**
     * Take an array of key/value pairs and set the class/id names.
     *
     * @param array $attrs An array of key/value pairs that correspond to the class
     * methods for classes and ids.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CALL
                        (
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_STATIC_PROP))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (SCALAR)))
                                    (AST_CONST))))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (NULL))
                                (AST_CALL
                                    (
                                        (SCALAR))))
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR))))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_STATIC_PROP))
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP))
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_STATIC_PROP))
                            (
                                (SCALAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_STATIC_PROP))
        (
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_STATIC_PROP))
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_STATIC_PROP))
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_STATIC_PROP))
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||