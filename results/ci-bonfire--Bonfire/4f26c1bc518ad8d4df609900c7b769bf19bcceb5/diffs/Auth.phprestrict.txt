    public function restrict($permission = null, $uri = null)
		{
        // If user isn't logged in, redirect to the login page.
        if ($this->is_logged_in() === false) {
			$this->ci->load->library('Template');
			Template::set_message($this->ci->lang->line('us_must_login'), 'error');
			Template::redirect(LOGIN_URL);
		}

        // Check whether the user has the proper permissions.
        if (empty($permission) || $this->has_permission($permission)) {
            return true;
        }

        // If the user is logged in, but does not have permission...

        // If $uri is not set, get the previous page from the session.
        if (! $uri) {
				$uri = $this->ci->session->userdata('previous_page');

            // If previous page and current page are the same, but the user no longer
            // has permission, redirect to site URL to prevent an infinite loop.
            if ($uri == current_url()) {
					$uri = site_url();
				}
			}

        // Inform the user of the lack of permission and redirect.
        $this->ci->load->library('Template');
        Template::set_message(lang('us_no_permission'), 'attention');
			Template::redirect($uri);
		}

    //--------------------------------------------------------------------------
    // Roles
    //--------------------------------------------------------------------------

	/**
     * Retrieves the role_id from the current session.
	 *
     * @return int The user's role_id.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (SCALAR)))
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CALL))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL))))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR))))||||||||