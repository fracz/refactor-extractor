    public static function js($script = null, $type = 'external')
    {
        if (! empty($script)) {
            if (is_string($script) && $type == 'external') {
                return self::external_js($script);
            }

            self::add_js($script, $type);
        }

        // Render the scripts/links
        $output  = self::external_js();
        $output .= self::module_js();
        $output .= self::inline_js();

        return $output;
    }

    /**
     * Generates the links to the external js files.
     *
     * Called by the js() method, but can be used on its own.
     *
     * If no scripts are passed into the first parameter, links are created for
     * all scripts within the self::$scripts['external'] array.
     *
     * If one or more scripts are passed in the first parameter, only the passed
     * script files will be used to create links, and any stored in self::$scripts['external']
     * will be ignored.
     *
     * Note that links will not be rendered for files that cannot be found, though
     * scripts with full URLs are not checked (they are simply included).
     *
     * @param mixed   $extJs Either a string or an array containing the name(s)
     * of file(s) to link.
     * @param boolean $list  If true, will echo out a list of scripts, enclosed
     * in quotes and comma separated. Convenient for use with third-party js loaders.
     * @param boolean $addExtension  If true (default), add the .js extension when
     * adding files. Set to false to prevent the addition of the extension.
     * @param boolean $bypassGlobals If true, do not include global scripts (global.js)
     * for this call.
     *
     * @return string The list of scripts, formatted according to $list.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_RETURN
        (AST_VAR)))||||||||