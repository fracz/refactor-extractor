    private function buildView($data)
    {
        if ($data['field_total'] == null) {
              return false;
        }

        $action_label = $data['action_label'];
        $action_name  = $data['action_name'];
        $data['id_val'] = $action_name != 'insert' && $action_name != 'add' ? '$id' : '';

        switch ($action_name) {
            case 'list':
                $view_name = 'index';
                break;

            case 'index':
                // no break
            case 'index_front':
                // no break
            case 'delete':
                // no break
            case 'js':
                // no break
            case 'sub_nav':
                // no break
                $view_name = $action_name;
                break;

            default:
                $view_name = 'default';
                break;
        }

        return $this->CI->load->view("files/view_{$view_name}", $data, true);
    }

    /**
     * Write the files for the module to the server
     *
     * @param string $module_name The name of the module
     * @param array  $content     An array containing the content for the files
     * @param string $table_name  The name of the db table
     * @param string $db_required The database requirement setting (new, existing or none)
     *
     * @return array An array containing the status and error message
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)
            (SCALAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_VAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR))
                (AST_VAR)
                (AST_CONST)))))||||||||