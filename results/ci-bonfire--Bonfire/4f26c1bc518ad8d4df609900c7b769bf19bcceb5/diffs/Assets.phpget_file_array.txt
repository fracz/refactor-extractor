    private static function get_file_array($sitePath = '', $path = '', $file = '', $type = '', $media = '')
    {
        if (empty($file) || empty($type)) {
            return false;
        }

        $fileName   = $path . $file;
        $serverPath = self::path($sitePath, $fileName . $type);
        if (! is_file($serverPath)) {
            return false;
        }

        $filePath = self::path(base_url(), $fileName . $type);

        if (lang('bf_language_direction') == self::$rtl_postfix) {
            if (is_file(self::path($sitePath, "{$fileName}-" . self::$rtl_postfix . $type))) {
                $filePath = self::path(base_url(), "{$fileName}-" . self::$rtl_postfix . $type);
                $serverPath = self::path($sitePath, "{$fileName}-" . self::$rtl_postfix . $type);
            }
        }

        if (self::$debug) {
            echo "[Assets] Found file at: <strong>{$serverPath}</strong><br/>";
        }

        return (empty($media) ? $filePath : array('file' => $filePath, 'media' => $media, 'server_path' => $serverPath));
    }

    //--------------------------------------------------------------------------
    // Deprecated methods (Do Not Use)
    //--------------------------------------------------------------------------

    /**
     * Set the library to include global CSS and JS files
     *
     * If $include is set to true, global includes (like the default media type
     * CSS and global.js files) are automatically included in css() and js()
     * output.
     *
     * @deprecated since 0.7.1 use setGlobals() instead
     * @param bool $include true to include (default) or false to exclude
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_STATIC_PROP))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_ENCAPS_LIST
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_STATIC_PROP))
                                            (AST_VAR))))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_CALL)
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_ENCAPS_LIST
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_STATIC_PROP))
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_ENCAPS_LIST
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_STATIC_PROP))
                                            (AST_VAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_ECHO
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))))))||||||||