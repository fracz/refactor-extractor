    public static function combine_js($files = array(), $scriptType = '')
    {
        // Are there any scripts to include?
        if (is_array($files) && count($files) == 0) {
            return;
        }

        $theme = Template::theme();

        // Get the class name, module name, and uri segments
        $className   = self::$ci->router->fetch_class();
        $moduleName  = self::$ci->router->fetch_module();
        $uriSegments = self::$ci->uri->segment_array();

        // Get the context name from the uri segments
        $classKey = array_search($className, $uriSegments);
        if ($classKey !== false) {
            $classKey = $classKey + 1;
            if (isset($uriSegments[$classKey])) {
                $moduleName = $uriSegments[$classKey];
            }
        }

        $fileName = trim($theme, '/') . "_{$moduleName}_{$className}";
        if (self::$ci->config->item('assets.encrypt_name')) {
            $fileName = md5($fileName);
        }
        $fileName .= $scriptType == 'module' ? '_mod' : '_combined';

        // If the file is to be minified, .min must be added to the URL below,
        // but since generate_file() adds .min on its own, it can't be added to
        // $fileName, yet.
        $min = self::$ci->config->item('assets.js_minify') ? '.min' : '';

        // If the file is generated successfully, output the path to the file
        $output = '';
        if (self::generate_file($files, $fileName, 'js')) {
            $output = self::path(base_url(), self::$directories['base'], self::$directories['cache'], "{$fileName}{$min}.js");
        }

        return $output;
    }

    //--------------------------------------------------------------------------
    // !IMAGE METHODS
    //--------------------------------------------------------------------------

    /**
     * A helper method to build image tags.
     *
     * @param string  $image       The name of the image file.
     * @param array   $extraAttrs  An of key/value pairs which are attributes to
     * be added to the tag, such as height, width, class, etc.
     * @param boolean $suppressEol If false (default) a newline character is added
     * after the img tag. If true, the newline character is not added.
     *
     * @return string A string containing the image tag.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP))
                (
                    (SCALAR)))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_CALL)
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||