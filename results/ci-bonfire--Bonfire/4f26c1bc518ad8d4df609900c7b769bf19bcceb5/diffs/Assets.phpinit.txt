    public static function init()
    {
        // It is recommended to combine as many config files as sensible into a
        // single file for performance reasons. If the config entry is already
        // available, don't load the file.

        // @todo Update this to remove the check for 'assets.base_folder' once
        // it can be safely assumed that the item should no longer be present
        if (self::$ci->config->item('assets.base_folder') === false
            && self::$ci->config->item('assets.directories') === false
        ) {
            self::$ci->config->load('application');
        }

        // Retrieve the config settings
        if (self::$ci->config->item('assets.directories')) {
            self::$directories = self::$ci->config->item('assets.directories');
            foreach (self::$directories as $key => &$value) {
                $value = trim($value, '/');
            }
        } else {
            // If 'assets.directories' is not set, check the previous locations.
            self::$directories = array();
            self::$directories['base']  = trim(self::$ci->config->item('assets.base_folder') ?: 'assets', '/');
            self::$directories['cache'] = trim(self::$ci->config->item('assets.cache_folder') ?: 'cache', '/');

            // Set to default because this directory was not in the previous
            // config locations.
            self::$directories['module'] = 'module';

            $assetFolders = self::$ci->config->item('assets.asset_folders') ?: array('js' => 'js', 'css' => 'css', 'image' => 'images');
            foreach ($assetFolders as $key => $value) {
                self::$directories[$key] = trim($value, '/');
            }
            unset($assetFolders);
        }

        // Make sure the is_https() function is available for use by external_js()
        // and find_files().
        if (! function_exists('is_https')) {
            self::$ci->load->helper('application');
        }

        // Set the closures to minify CSS/JS
        self::$cssMinify = function ($css) {
            return CSSMin::minify($css);
        };

        self::$jsMinify = function ($js) {
            return JSMin::minify($js);
        };

        log_message('debug', 'Assets library loaded.');
    }

    //--------------------------------------------------------------------
    // !STYLESHEET METHODS
    //--------------------------------------------------------------------

    /**
     * Render links to stylesheets.
     *
     * Prepends the $asset_url.
     *
     * If a single filename is passed, a link is created for that file.
     *
     * If multiple files are passed, merges the list of styles with the list of
     * styles previously added with add_css(), and outputs the links for all of
     * the files.
     *
     * If no style is passed, defaults to the theme's style.css file.
     *
     * When passing a filename, the filepath should be relative to the site
     * root (where index.php resides).
     *
     * @todo Determine whether a passed filename should be relative to the site
     * root or the $asset_url
     *
     * @param mixed   $style The style(s) for which links will be rendered.
     * @param string  $media The media to assign to the style(s).
     * @param boolean $bypassInheritance If true, skip check for parent theme styles.
     * @param boolean $bypassModule If true, do not output the css file named after
     * the controller, or the module styles.
     *
     * @return string A string containing all requested links.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))
                        (
                            (SCALAR)))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))
                        (
                            (SCALAR)))
                    (AST_CONST)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))
                        (
                            (SCALAR))))
                (AST_FOREACH
                    (AST_STATIC_PROP)
                    (AST_REF
                        (AST_VAR))
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_ARRAY))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_CONDITIONAL
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_STATIC_PROP))
                                    (
                                        (SCALAR)))
                                (NULL)
                                (SCALAR))
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_CONDITIONAL
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_STATIC_PROP))
                                    (
                                        (SCALAR)))
                                (NULL)
                                (SCALAR))
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_STATIC_PROP))
                            (
                                (SCALAR)))
                        (NULL)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_UNSET
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR))))||||||||