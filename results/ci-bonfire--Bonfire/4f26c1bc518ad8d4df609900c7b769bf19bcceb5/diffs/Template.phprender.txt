    public static function render($layout = null)
    {
        // Determine whether to override the current layout.
		$layout = empty($layout) ? self::$layout : $layout;

        // If the current view has not been set, use the current controller/method.
        $controller = self::$ci->router->class;
        if (empty(self::$current_view)) {
            self::$current_view = "{$controller}/" . self::$ci->router->method;
        }

        // Override the layout if this is an AJAX request.
        if (self::$ci->input->is_ajax_request()) {
			$layout = self::$ci->config->item('template.ajax_layout');

            // $controller is passed to load_view to set a controller-based override
            // of the layout, which should not be done for AJAX requests.
            $controller = '';
		}

        // Time to render the layout.
        $output = '';
        self::load_view($layout, self::$data, $controller, true, $output);

        if (empty($output)) {
            show_error("Unable to find theme layout: {$layout}");
        }

		Events::trigger('after_layout_render', $output);

		self::$ci->output->set_output($output);
    }

	/**
     * Renders the current view into the layout.
	 *
     * The name of the view is usually based on the controller/action being run.
     * @see render().
	 *
	 * @return string A string containing the output of the render process.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_STATIC_PROP))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_STATIC_PROP))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_BINARY_OP
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR))
                        (AST_PROP
                            (AST_PROP
                                (AST_STATIC_PROP))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_STATIC_PROP)
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_STATIC_PROP))
        (
            (AST_VAR))))||||||||