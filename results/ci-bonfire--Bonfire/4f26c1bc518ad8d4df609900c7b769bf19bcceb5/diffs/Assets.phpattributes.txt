    private static function attributes($attributes = null)
    {
        if (empty($attributes)) {
            return '';
        }

        $final = '';
        if (is_array($attributes)) {
            foreach ($attributes as $key => $value) {
                if ($value === null) {
                    continue;
                }

                $final .= " {$key}=\"" . htmlspecialchars($value, ENT_QUOTES) . '"';
            }
        }

        return $final;
    }

    /**
     * Generates cache file. Locates file by looping through the active and default
     * themes, then the assets folder (as specified in the config file).
     *
     * Files are searched for in this order...
     *     1 - active_theme/
     *     2 - active_theme/type/
     *     3 - default_theme/
     *     4 - default_theme/type/
     *     5 - asset_base/type
     *
     * Where 'type' is either 'css' or 'js'.
     *
     * If the file is not found, it is removed from the array. If the file is found,
     * a full url is created, using base_path(), unless the path already includes
     * 'http' at the beginning of the filename, in which case it is simply included
     * in the return files.
     *
     * For CSS files, if a script of the same name is found in both the default_theme
     * and the active_theme folders (or their type sub-folder), they are both returned,
     * with the default_theme linked to first, so that active_theme styles can override
     * those in the default_theme without having to recreate the entire stylesheet.
     *
     * @param array  $files     Array of files
     * @param string $fileName  Name of the file to generate
     * @param string $fileType  Either 'css' or 'js'.
     *
     * @return boolean True if file generated successfully, false if there were
     * errors.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_CONST))))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||