    public static function module_js($list = false)
    {
        if (empty(self::$scripts['module'])
            || ! is_array(self::$scripts['module'])
        ) {
            return '';
        }

        // Prep the scripts array with only files that can actually be found.
        $scripts = self::find_files(self::$scripts['module'], 'js');

        // Mod Scripts are always combined. This allows the working files to be
        // out of the web root, but still provides a link to the assets.
        $src = self::combine_js($scripts, 'module');

        $attr = array(
            'src'  => $src . '?_dt=' . time(),
            'type' => 'text/javascript',
        );

        if ($list) {
            return '"' . $attr['src'] . '"';
        }

        return '<script' . self::attributes($attr) . "></script>\n";
    }

    /**
     * Generates the container and outputs inline js code.
     *
     * All inline js code is wrapped by open and close tags specified in the config
     * file, so the wrapper can be modified to use any js library.
     *
     * Called by the js() method.
     *
     * @return string
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR))))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_STATIC_PROP)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_CALL))
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (SCALAR))))||||||||