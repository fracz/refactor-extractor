    private static function generate_file($files = array(), $fileName, $fileType = 'css')
    {
        if (count($files) == 0) {
            // While the file wasn't actually created, there were no errors
            return true;
        }

        $site_path = Template::get('site_path');

        // Where to save the combined file
        $cache_path = self::path($site_path, self::$directories['base'], self::$directories['cache']) . '/';

        // Full file path - without the extension
        $file_path = $cache_path . $fileName;

        // Append .min if the file is to be minified
        if (self::$ci->config->item("assets.{$fileType}_minify")) {
            $file_path .= '.min';
        }

        $file_path .= ".{$fileType}"; // Append the file extension
        $modified_time  = 0;    // Holds the last modified date of all included files.
        $actual_file_time = 0;  // The modified time of the combined file.

        // If the combined file already exists, grab the last modified time.
        if (is_file($file_path)) {
            $actual_file_time = filemtime($file_path);
        }

        foreach ($files as $key => $file) {
            $app_file = is_array($file) ? $file['server_path'] : self::path($site_path, str_replace(base_url(), '', $file));

            // Javascript
            if ($fileType == 'js') {
                // Using strripos and substr because rtrim was giving some odd
                // results (for instance, rtrim('tickets.js', '.js');
                // would return 'ticket')
                $pos = strripos($app_file, '.js');
                if ($pos !== false) {
                    $app_file = substr($app_file, 0, $pos);
                }
                $app_file .= '.js';
            }
            $files_array[$key] = $app_file;

            // Grab the modified time. If it is higher than the previous files'
            // modified times, keep it
            $modified_time = max(filemtime($app_file), $modified_time);
        }

        // If any of the files were modified after the cached file was created
        if ($actual_file_time < $modified_time) {
            // Grab the contents of the files
            $asset_output = '';
            foreach ($files_array as $key => $file) {
                $file_output = file_get_contents($file);
                if (! empty($file_output)) {
                    $asset_output .= $file_output . PHP_EOL;
                }
            }

            // If the assets are configured to be minified, minify them
            if (config_item("assets.{$fileType}_minify")) {
                $minifyFunc = "{$fileType}Minify";
                $minify = self::${$minifyFunc};
                $asset_output = $minify($asset_output);
                unset($minifyFunc, $minify);
            }

            // Write the contents out to asset cache (replaces existing file)
            if (! is_dir($cache_path)) {
                @mkdir($cache_path);
            }
            if (! function_exists('write_file')) {
                self::$ci->load->helper('file');
            }
            if (! write_file($file_path, $asset_output)) {
                return false;
            }
        } elseif ($actual_file_time == 0) {
            return false;
        }

        return true;
    }

    /**
     * Locates file by looping through the active and default themes, then the assets
     * folder (as specified in the config file).
     *
     * Files are searched for in this order...
     *     1 - active_theme/
     *     2 - active_theme/type/
     *     3 - default_theme/
     *     4 - default_theme/type/
     *     5 - asset_base/type
     *
     * Where 'type' is either 'css' or 'js'.
     *
     * If the file is not found, it is removed from the array. If the file is found,
     * a full url is created, using base_path(), unless the path already includes
     * 'http' at the beginning of the filename, in which case it is simply included
     * in the return files.
     *
     * For CSS files, if a script of the same name is found in both the default_theme
     * and the active_theme folders (or their type sub-folder), they are both returned,
     * with the default_theme linked to first, so that active_theme styles can override
     * those in the default_theme without having to recreate the entire stylesheet.
     *
     * @param array   $files              An array of file names to search for.
     * @param string  $type               Either 'css' or 'js'.
     * @param boolean $bypass_inheritance If true, will skip the check for parent
     * theme styles.
     *
     * @return array The complete list of files with url paths.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP))
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_CALL)
                                    (SCALAR)
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_VAR)))))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN_OP
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CONST))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ENCAPS_LIST
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_PROP))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))
                            (AST_UNSET
                                (AST_VAR))
                            (AST_UNSET
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_STATIC_PROP))
                                (
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||