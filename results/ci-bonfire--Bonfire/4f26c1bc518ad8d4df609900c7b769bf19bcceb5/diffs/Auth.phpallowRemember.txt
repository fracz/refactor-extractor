    private function allowRemember()
		{
        if (isset($this->allowRemember)) {
            return $this->allowRemember;
		}

        $this->allowRemember = (bool) $this->ci->settings_lib->item('auth.allow_remember');
        return $this->allowRemember;
    }
}

//------------------------------------------------------------------------------
// Helper Functions
//------------------------------------------------------------------------------

if (! function_exists('has_permission')) {
	/**
	 * A convenient shorthand for checking user permissions.
	 *
     * @param string $permission The permission to check for, ie 'Site.Signin.Allow'.
     * @param bool   $override   Whether access is granted if this permission doesn't
     * exist in the database.
	 *
     * @return bool True if the user has the permission or $override is true and
     * the permission wasn't found in the system, else false.
	 */
    function has_permission($permission, $override = false)
	{
        return get_instance()->auth->has_permission($permission, null, $override);
    }
}

if (! function_exists('permission_exists')) {
	/**
     * Check to see whether a permission is in the system.
	 *
     * @param string $permission Case-insensitive permission to check.
	 *
     * @return bool True if the permission exists, else false.
	 */
	function permission_exists($permission)
	{
        return get_instance()->auth->permission_exists($permission);
    }
}

if (! function_exists('abbrev_name')) {
	/**
     * Retrieve first and last name from given string.
	 *
     * @param string $name Full name.
	 *
	 * @return string The First and Last name from given parameter.
	 */
	function abbrev_name($name)
	{
        if (is_string($name)) {
			list($fname, $lname) = explode(' ', $name, 2);

            if (is_null($lname)) { // Meaning only one name was entered...
				$lastname = ' ';
            } else {
                $lname = explode(' ', $lname);
				$size = sizeof($lname);
				$lastname = $lname[$size-1]; //
			}

            return trim("{$fname} {$lastname}") ;
		}

        // @todo Consider an optional parameter for picking custom var session.
		// Making it auth private, and using auth custom var

		return $name;
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CAST
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||