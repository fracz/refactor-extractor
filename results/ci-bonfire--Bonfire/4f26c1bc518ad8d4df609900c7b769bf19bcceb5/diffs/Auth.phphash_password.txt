    public function hash_password($pass, $iterations = 0)
		{
        // The shortest valid hash phpass can currently return is 20 characters,
        // which would only happen with CRYPT_EXT_DES.
        $min_hash_len = 20;

        // If $iterations wasn't passed, get it from the settings.
        if (empty($iterations)
            || ! is_numeric($iterations)
            || $iterations <= 0
        ) {
            $iterations = $this->ci->settings_lib->item('password_iterations');
		}

        // Load the password hash library and hash the password.
        $hasher   = $this->getPasswordHasher($iterations);
        $password = $hasher->HashPassword($pass);

        unset($hasher);

        // If the password is shorter than the minimum hash length, something failed.
        if (strlen($password) < $min_hash_len) {
            return false;
        }

        return array('hash' => $password, 'iterations' => $iterations);
    }

	/**
     * Loads the PasswordHash library as needed and returns a new instance.
	 *
     * Note: Moving the loading of the 'password_iterations' setting into this method
     * was considered. Since the $iterations value is only really needed for hashing
     * a password, and the 'password_iterations' value is only used when the $iterations
     * value passed to the hash_password() method is not a positive integer, it
     * made more sense to leave it there than to add some indicator to this method
     * that the calling method didn't need to retrieve the 'password_iterations'
     * value.
	 *
     * @param  integer $iterations The number of iterations to be used in hashing
     * passwords.
	 *
     * @return PasswordHash The password hasher.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_EMPTY
                        (AST_VAR))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_UNSET
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR)))))||||||||