    public static function combine_css($files = array(), $media = 'screen', $type = '')
    {
        // Are there any styles to include?
        if (count($files) == 0) {
            return;
        }

        // Debugging issues with media being set to 1
        if ($media == '1') {
            $media = 'screen';
        }

        // Add the theme name to the filename to account for different frontend/
        // backend themes.
        $theme = trim(Template::get('active_theme'), '/');
        if (empty($theme)) {
            $theme = trim(Template::get('default_theme'), '/');
        }

        $fileName = "{$theme}_" . self::$ci->router->fetch_module() . '_' . self::$ci->router->fetch_class();
        if (self::$ci->config->item('assets.encrypt_name') == true) {
            $fileName = md5($fileName);
        }
        $fileName .= $type == 'module' ? '_mod' : '_combined';

        // Don't add .min to $file_name, because generate_file() will add .min
        // itself. However, it needs to be added to the href attribute below.
        $min = self::$ci->config->item('assets.css_minify') ? '.min' : '';

        // Create our link attributes
        $attr = array(
            'rel'   => 'stylesheet',
            'type'  => 'text/css',
            'href'  => self::path(base_url(), self::$directories['base'], self::$directories['cache'], "{$fileName}{$min}.css"),
            'media' => $media,
        );

        $output = '';
        if (self::generate_file($files, $fileName, 'css')) {
            $output = '<link' . self::attributes($attr) . " />\n";
        }

        return $output;
    }

    /**
     * Add a file to the CSS queue.
     *
     * @param mixed   $style   The style(s) to be added.
     * @param string  $media   The type of media the stylesheet styles.
     * @param boolean $prepend If true, the file(s) will be added to the beginning
     * of the style array.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_ENCAPS_LIST
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP))
                (
                    (SCALAR)))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_STATIC_CALL
                    (
                        (AST_CALL)
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR))
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR))
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (AST_VAR)
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||