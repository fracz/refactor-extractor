    public function process_queue($limit = 33)
    {
        $config_settings = $this->ci->settings_model->select(array('name', 'value'))
                                                    ->find_all_by('module', 'email');

        // Grab records where success = 0
        $query = $this->ci->db->limit($limit)
                              ->where('success', 0)
                              ->get($this->tableName);

        $success = true;

        // If the query returned no rows, the queue is empty, so it has been
        // processed successfully.
        if (! $query->num_rows()) {
            return $success;
        }

        $emails = $query->result();
        $this->ci->load->library('email');

        // MySQL datetime format
        $dateTimeFormat = 'Y-m-d H:i:s';
        $now = new DateTime();

        $senderEmail = settings_item('sender_email');
        $siteTitle = settings_item('site.title');

        foreach ($emails as $email) {
            $this->ci->email->initialize($config_settings);
            $this->ci->email->clear(true);
            $this->ci->email->set_newline("\r\n");
            $this->ci->email->to($email->to_email);
            $this->ci->email->from($senderEmail, $siteTitle);
            $this->ci->email->subject($email->subject);
            $this->ci->email->message($email->message);

            if ($email->alt_message) {
                $this->ci->email->set_alt_message($email->alt_message);
            }

            if ($email->csv_attachment) {
                $attachments = str_getcsv($email->csv_attachment);
                foreach ($attachments as $attachment) {
                    $this->ci->email->attach($attachment);
                }
            }

            $data = array(
                'attempts' => $email->attempts + 1,
            );

            if ($this->ci->email->send() === true) {
                // Email was successfully sent
                $data['success'] = 1;
            } else {
                // Error sending email

                // While explicitly setting 'success' to 0 is not necessary, it
                // makes it easier to check whether 'date_sent' should be set below.
                $data['success'] = 0;
                if ($this->debug) {
                    $this->debug_message = $this->ci->email->print_debugger();
                }

                // Note that $success is only set true before the loop, so, while
                // the loop continues attempting to send queued emails after a
                // failure, it still indicates a failure when a single email fails.
                $success = false;
            }

            // Update the timestamp with the current time, this is done after
            // calling email->send() because sending the email could take time.
            $timeStamp = $now->setTimestamp(time())->format($dateTimeFormat);
            $data['last_attempt'] = $timeStamp;
            if ($data['success'] == 1) {
                $data['date_sent'] = $timeStamp;
            }

            $this->ci->db->where('id', $email->id)
                         ->update($this->tableName, $data);
        }

        return $success;
    }

    /**
     * Tells the emailer lib whether to generate debugging messages.
     *
     * @param bool $enable_debug true to enable debugging messages, false to
     * disable
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_VAR)))
                (
                    (SCALAR)
                    (SCALAR)))
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_CONST)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_PROP
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (AST_VAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_PROP
                                                    (AST_VAR))))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL)))
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||