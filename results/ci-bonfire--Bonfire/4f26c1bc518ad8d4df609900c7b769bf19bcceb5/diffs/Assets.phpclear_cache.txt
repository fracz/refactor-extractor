    public static function clear_cache()
    {
        if (! function_exists('delete_files') || ! function_exists('write_file')) {
            self::$ci->load->helper('file');
        }

        $sitePath  = Template::get('site_path');
        $cachePath = self::path($sitePath, self::$directories['base'], self::$directories['cache']) . '/';

        delete_files($cachePath);

        // Write the index.html file back in
        $indexHtmlData = '<html><head><title>403 Forbidden</title></head><body><p>Directory access is forbidden.</p></body></html>';
        write_file("{$cachePath}index.html", $indexHtmlData);
    }

    //--------------------------------------------------------------------------
    // !GLOBAL METHODS
    //--------------------------------------------------------------------------

    /**
     * Configure the library to output debug messages to the page
     *
     * @param boolean $debug True to output debug messages (default) or false to
     * disable debug messages.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_CALL
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR))
            (AST_VAR))))||||||||