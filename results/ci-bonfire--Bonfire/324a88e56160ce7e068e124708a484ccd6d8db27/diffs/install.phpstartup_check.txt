	private function startup_check()
	{
		$errors = '';
		$folder_errors = '';
		$file_errors = '';

		// Check Folders
		foreach ($this->writeable_folders as $folder)
		{
			if (!is_writeable(APPPATH .$folder))
			{
				$folder_errors .= "<li>$folder</li>";
			}
		}

		if (!empty($folder_errors))
		{
			$errors = '<p>Please ensure that the following directories are writeable, and try again:</p><ul>' . $folder_errors .'</ul>';
		}

		// Check files
		foreach ($this->writeable_files as $file)
		{
			if (!is_writeable(APPPATH .$file))
			{
				$file_errors .= "<li>$file</li>";
			}
		}

		if (!empty($file_errors))
		{
			$errors .= '<p>Please ensure that the following files are writeable, and try again:</p><ul>' . $file_errors .'</ul>';
		}

		// Make it available to the template lib if there are errors
		if (!empty($errors))
		{
			Template::set('startup_errors', $errors);
		}

		unset($errors, $folder_errors, $file_errors);

		/*
			Copies generic file versions to their appropriate spots.
			This provides a safe way to perform upgrades, as well
			as simplifying what will need to be modified when some
			sweeping changes are made.
		*/
		if (!file_exists(APPPATH .'config/database.php') && is_writeable(APPPATH .'config/'))
		{
			// Database
			copy(APPPATH .'config/database_format.php', APPPATH .'config/development/database.php');
			copy(APPPATH .'config/database_format.php', APPPATH .'config/production/database.php');
			copy(APPPATH .'config/database_format.php', APPPATH .'config/testing/database.php');
			copy(APPPATH .'config/database_format.php', APPPATH .'config/database.php');

			// Email
			copy(APPPATH .'config/email_format.php', APPPATH .'config/email.php');
		}
	}

	//--------------------------------------------------------------------


||||||||	private function startup_check()
	{
		$errors = '';
		$folder_errors = '';
		$file_errors = '';

		// Check Folders
		foreach ($this->writeable_folders as $folder)
		{
			@chmod(APPPATH .$folder, 0777);
			if (!is_writeable(APPPATH .$folder))
			{
				$folder_errors .= "<li>$folder</li>";
			}
		}

		if (!empty($folder_errors))
		{
			$errors = '<p>Please ensure that the following directories are writeable, and try again:</p><ul>' . $folder_errors .'</ul>';
		}

		// Check files
		foreach ($this->writeable_files as $file)
		{
			@chmod(APPPATH .$file, 0666);
			if (!is_writeable(APPPATH .$file))
			{
				$file_errors .= "<li>$file</li>";
			}
		}

		if (!empty($file_errors))
		{
			$errors .= '<p>Please ensure that the following files are writeable, and try again:</p><ul>' . $file_errors .'</ul>';
		}

		// Make it available to the template lib if there are errors
		if (!empty($errors))
		{
			Template::set('startup_errors', $errors);
		}

		unset($errors, $folder_errors, $file_errors);

		/*
			Copies generic file versions to their appropriate spots.
			This provides a safe way to perform upgrades, as well
			as simplifying what will need to be modified when some
			sweeping changes are made.
		*/
		if (!file_exists(APPPATH .'config/development/database.php') && is_writeable(APPPATH .'config/'))
		{
			// Database
			copy(APPPATH .'config/database.php', APPPATH .'config/development/database.php');
			copy(APPPATH .'config/database.php', APPPATH .'config/production/database.php');
			copy(APPPATH .'config/database.php', APPPATH .'config/testing/database.php');
		}
	}

	//--------------------------------------------------------------------


||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR)))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_VAR))
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_VAR))
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR)))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))))))