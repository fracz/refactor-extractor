	public function migrate_module($module='')
	{
		if (isset($_POST['migrate']))
		{
			$file   = $this->input->post('version');

			if (empty($file))
			{
				$msg = 'No version selected for migration.';
				$msg = '<h4 class="alert-heading">' . $msg . '</h4>';
				Template::set_message($msg, 'info');
				redirect(SITE_AREA . '/developer/migrations');
			}

			$version = $file !== 'uninstall' ? (int)(substr($file, 0, 3)) : 0;

			// Do the migration
			$this->migrate_to($version, $module .'_');

			// Log the activity
			log_activity($this->auth->user_id(), 'Migrate module: ' . $module . ' Version: ' . $version . ' from: ' . $this->input->ip_address(), 'migrations');
		}

		redirect(SITE_AREA .'/developer/migrations');

	}//end migrate_module()

	//--------------------------------------------------------------------

	/**
	 * Get all versions available for the modules
	 *
	 * @access private
	 *
	 * @return array Array of available versions for each module
	 */
||||||||	public function migrate_module($module = '')
	{
		if (isset($_POST['migrate'])) {
			$file = $this->input->post('version');
			if (empty($file)) {
				Template::set_message(lang('migrations_module_none'), 'info');

				redirect(SITE_AREA . '/developer/migrations');
			}

			$version = $file !== 'uninstall' ? (int) substr($file, 0, 3) : 0;

			// Do the migration
			$this->migrate_to($version, "{$module}_");
			log_activity(
                $this->auth->user_id(),
                sprintf(lang('migrations_act_module'), $module, $version, $this->input->ip_address()),
                'migrations'
            );
		}

		redirect(SITE_AREA . '/developer/migrations');
	}

	/**
	 * Get all versions available for the modules
	 *
	 * @return array Array of available versions for each module
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CAST
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR))))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CAST
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR))))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_VAR)
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))))
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))))