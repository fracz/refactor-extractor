	public function get_schema_version($type='')
	{
		if ($this->_check_migrations_column('type'))
		{
			// new schema table layout
			$type = empty($type) ? 'core' : $type;
			$row = $this->_ci->db->get_where('schema_version', array('type' => $type))->row();
			return isset($row->version) ? $row->version: 0;
		}
		else
		{
			$row = $this->_ci->db->get('schema_version')->row();

			$schema = $type .'version';

			return isset($row->$schema) ? $row->$schema : 0;
		}

	}//end latest()

	// --------------------------------------------------------------------

	/**
	 * Store the current schema version in the database.
	 *
	 * @access private
	 *
	 * @param int    $schema_version An integer with the latest Schema version reached
	 * @param string $type           A string that is appended with '_schema' to create the field name to store in the database.
	 *
	 * @return void
	 */
||||||||	public function get_schema_version($type = '')
	{
		if ($this->_check_migrations_column('type')) {
			// new schema table layout
			$type = empty($type) ? 'core' : $type;
			$row = $this->_ci->db->where(array('type' => $type))
                                 ->get('schema_version')
                                 ->row();

			return isset($row->version) ? $row->version: 0;
		}

        $row = $this->_ci->db->get('schema_version')
                             ->row();

        $schema = "{$type}version";

        return isset($row->$schema) ? $row->$schema : 0;
	}

	/**
	 * Store the current schema version in the database.
	 *
	 * @param int    $schema_version An integer with the latest Schema version
	 * reached
	 * @param string $type           A string that is appended with '_schema' to
	 * create the field name to store in the database.
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_VAR))
                        (SCALAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_VAR))
                        (SCALAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (SCALAR)))))
                            (
                                (SCALAR)))))
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_PROP
                    (AST_VAR)))
            (AST_PROP
                (AST_VAR))
            (SCALAR))))