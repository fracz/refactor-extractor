||||||||	private function validate_form($field_total=0)
	{
		$this->form_validation->set_rules("module_name",'Module Name',"trim|required|xss_clean");
		$this->form_validation->set_rules("main_context",'Contexts',"required|xss_clean|is_array");
		$this->form_validation->set_rules("contexts",'Contexts',"required|xss_clean|is_array");
		$this->form_validation->set_rules("form_action",'Controller Actions',"required|xss_clean|is_array");
		$this->form_validation->set_rules("db_required",'DB Required',"trim|xss_clean|is_numeric");
		$this->form_validation->set_rules("ajax_processing",'Ajax Processing',"trim|xss_clean|is_numeric");
		$this->form_validation->set_rules("form_input_delimiters",'Form Input Delimiters',"required|trim|xss_clean");
		$this->form_validation->set_rules("form_error_delimiters",'Form Error Delimiters',"required|trim|xss_clean");

		for($counter=1; $field_total >= $counter; $counter++)
		{
			if ($counter != 1) // better to do it this way round as this statement will be fullfilled more than the one below
			{
				$this->form_validation->set_rules("view_field_label$counter",'Label','trim|xss_clean');
			}
			else
			{
				// the first field always needs to be required i.e. we need to have at least one field in our form
				$this->form_validation->set_rules("view_field_label$counter",'Label','trim|required|xss_clean');
			}

			$this->form_validation->set_rules("view_field_name$counter",'Name',"trim|requiredif[view_field_label$counter]|callback_no_match[$counter]|xss_clean");
			$this->form_validation->set_rules("view_field_type$counter",'Field Type',"trim|requiredif[view_field_label$counter]|xss_clean");
			$this->form_validation->set_rules("db_field_type$counter",'DB Field Type',"trim|requiredif[view_field_label$counter]|xss_clean");
			$this->form_validation->set_rules("db_field_length_value$counter",'DB Field Length',"trim|requiredif[view_field_label$counter]|xss_clean");
			$this->form_validation->set_rules('validation_rules'.$counter.'[]','Validation Rules','trim|xss_clean');
		}

		return $this->form_validation->run();
	}

	//--------------------------------------------------------------------

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)
                                (SCALAR))))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (SCALAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))))