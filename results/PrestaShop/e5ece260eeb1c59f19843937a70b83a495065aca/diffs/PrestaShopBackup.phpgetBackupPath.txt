	public static function getBackupPath($filename)
	{
		$backupdir = realpath(_PS_ADMIN_DIR_.self::$backupDir);

		if ($backupdir === false)
			die(Tools::displayError('"Backup" directory does not exist.'));

		// Check the realpath so we can validate the backup file is under the backup directory
		if (!empty($filename))
			$backupfile = realpath($backupdir.'/'.$filename);
		else
			$backupfile = $backupdir.DIRECTORY_SEPARATOR;

		if ($backupfile === false || strncmp($backupdir, $backupfile, strlen($backupdir)) != 0)
			die (Tools::displayError());

		return $backupfile;
	}

	/**
	 * Get the URL used to retreive this backup file
	 *
	 * @return The url used to request the backup file
	 */
||||||||	public static function getBackupPath($filename = '')
	{
		$backupdir = realpath((defined('_PS_HOST_MODE_') ? _PS_ROOT_DIR_ : _PS_ADMIN_DIR_).self::$backupDir);

		if ($backupdir === false)
			die(Tools::displayError('"Backup" directory does not exist.'));

		// Check the realpath so we can validate the backup file is under the backup directory
		if (!empty($filename))
			$backupfile = realpath($backupdir.DIRECTORY_SEPARATOR.$filename);
		else
			$backupfile = $backupdir.DIRECTORY_SEPARATOR;

		if ($backupfile === false || strncmp($backupdir, $backupfile, strlen($backupdir)) != 0)
			die (Tools::displayError());

		return $backupfile;
	}

	/**
	 * Get the URL used to retreive this backup file
	 *
	 * @return The url used to request the backup file
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_EXIT
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (SCALAR)))
            (
                (AST_EXIT
                    (AST_STATIC_CALL)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONST)
                        (AST_CONST))
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_EXIT
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (SCALAR)))
            (
                (AST_EXIT
                    (AST_STATIC_CALL)))))
    (AST_RETURN
        (AST_VAR)))