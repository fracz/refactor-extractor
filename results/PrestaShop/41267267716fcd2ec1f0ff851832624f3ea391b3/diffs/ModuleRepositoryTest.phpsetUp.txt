    public function setUp()
    {
        parent::setup();

        if (!defined('__PS_BASE_URI__')) {
            define('__PS_BASE_URI__', "http://www.example.com/shop");
        }

        if (!defined('_PS_THEME_DIR_')) {
            define('_PS_THEME_DIR_', _PS_ROOT_DIR_.'/themes/classic/');
        }

        if (! isset($_SERVER['HTTP_HOST'])) {
            $this->http_host_not_found = true;
            $_SERVER['HTTP_HOST'] = 'localhost';
        }

        /**
         * We need a mock in order to change the module folder
         */
        $this->moduleDataProviderStub = $this->getMock(
            'PrestaShop\\PrestaShop\\Adapter\\Module\\ModuleDataProvider',
            ['getModulesDir']
        );
        $this->moduleDataProviderStub->expects($this->any())
             ->method('getModulesDir')
             ->will($this->returnValue(_PS_ROOT_DIR_.'/tests/resources/modules/'));
        $this->moduleRepositoryStub = $this->getMock(
            'PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleRepository',
            ['getModulesDir', 'readCacheFile'],
            [
                new AdminModuleDataProvider('en'),
                $this->moduleDataProviderStub,
                new ModuleDataUpdater(new AddonsDataProvider(), new AdminModuleDataProvider('en')),
                new FakeLogger()
            ]
        );

        /**
         * Mock function 'getModulesDir()' in order to return a specific folder in the tests
         */
        $this->moduleRepositoryStub->expects($this->any())
             ->method('getModulesDir')
             ->will($this->returnValue(_PS_ROOT_DIR_.'/tests/resources/modules/'));
        /**
         * Mock function 'readCacheFile()' to disable the cache
         */
        $this->moduleRepositoryStub->expects($this->any())
             ->method('readCacheFile')
             ->will($this->returnValue([]));
        /**
         * End of mocking for modules folder
         */
    }

||||||||    public function setUp()
    {
        if (!defined('__PS_BASE_URI__')) {
            define('__PS_BASE_URI__', "http://www.example.com/shop");
        }

        if (!defined('_PS_THEME_DIR_')) {
            define('_PS_THEME_DIR_', _PS_ROOT_DIR_.'/themes/classic/');
        }

        if (! isset($_SERVER['HTTP_HOST'])) {
            $this->http_host_not_found = true;
            $_SERVER['HTTP_HOST'] = 'localhost';
        }

        /**
         * We need a mock in order to change the module folder
         */
        $this->moduleDataProviderStub = $this->getMockBuilder('PrestaShop\PrestaShop\Adapter\Module\ModuleDataProvider')
            ->disableOriginalConstructor()
            ->getMock();
        $this->moduleDataProviderStub
            ->method('findByName')
            ->willReturn([
                'installed' => 0,
                'active' => true
            ]);
        // required to have 'productType' field of module set up
        $this->moduleDataProviderStub
            ->method('isModuleMainClassValid')
            ->willReturn(true);

        $this->adminModuleDataProviderStub = $this->getMock('PrestaShop\PrestaShop\Adapter\Module\AdminModuleDataProvider',
            ['getCatalogModulesNames'],
            ['en']
        );

        $this->adminModuleDataProviderStub
            ->method('getCatalogModulesNames')
            ->willReturn([]);

        $this->moduleRepositoryStub = $this->getMock(
            'PrestaShop\\PrestaShop\\Core\\Addon\\Module\\ModuleRepository',
            ['readCacheFile'],
            [
                $this->adminModuleDataProviderStub,
                $this->moduleDataProviderStub,
                new ModuleDataUpdater(new AddonsDataProvider(), new AdminModuleDataProvider('en')),
                new FakeLogger()
            ]
        );

        /**
         * Mock function 'readCacheFile()' to disable the cache
         */
        $this->moduleRepositoryStub
            ->method('readCacheFile')
            ->willReturn([]);

        /**
         * End of mocking for modules folder
         */
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_NEW
                            (
                                (SCALAR)))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW
                            (
                                (AST_NEW)
                                (AST_NEW
                                    (
                                        (SCALAR)))))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW
                            (
                                (AST_NEW)
                                (AST_NEW
                                    (
                                        (SCALAR)))))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_ARRAY))))