    public function upgrade($name, $version = 'latest', $source = null)
    {
        if (!$this->employee->can('edit', 'AdminModules')
            || !$this->moduleProvider->can('configure', $name)) {
            throw new Exception('You are not allowed to upgrade this module');
        }

        if (! $this->moduleProvider->isInstalled($name)) {
            throw new Exception('This module must be installed');
        }

        // Get new module
        // 1- From source
        if ($source != null) {
        }
        // 2- From Addons
        else {
        }

        // If files properly inserted on the module folder
        Db::getInstance()->execute('
            UPDATE `'._DB_PREFIX_.'module` m
            SET m.version = \''.pSQL($version).'\'
            WHERE m.name = \''.pSQL($name).'\'');

        // Load and execute upgrade files
        return true;
    }

    /**
     * Disable a module without uninstalling it.
     * Allows the merchant to temporarly remove a module without uninstalling it
     *
     * @param  string $name The module name to disable
     * @return bool         True for success
     */
||||||||    public function upgrade($name, $version = 'latest', $source = null)
    {
        if (!$this->employee->can('edit', 'AdminModules')
            || !$this->moduleProvider->can('configure', $name)) {
            throw new Exception('You are not allowed to upgrade this module');
        }

        if (! $this->moduleProvider->isInstalled($name)) {
            throw new Exception(sprintf('The module %s must be installed first', $name));
        }

        $result = true;

        // Get new module
        // 1- From source
        if ($source != null) {
            throw new \Symfony\Component\Intl\Exception\NotImplementedException('Upgrading with a specifi zip is not implemented yep');
        }
        // 2- From Addons
        else {
            $result &= $this->moduleUpdater->setModuleOnDiskFromAddons($name);
        }

        if ($result) {
            // Load and execute upgrade files
            $result &= $this->moduleUpdater->upgrade($name);
        }

        return $result;
    }

    /**
     * Disable a module without uninstalling it.
     * Allows the merchant to temporarly remove a module without uninstalling it
     *
     * @param  string $name The module name to disable
     * @return bool         True for success
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST)))
        (AST_IF_ELEM
            (NULL)))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CONST))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_VAR))))
                (SCALAR))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))