	final public static function execute()
	{
		// Include all controllers
		foreach (self::$steps as $step)
		{
			if (!file_exists(_PS_INSTALL_CONTROLLERS_PATH_.'http/'.$step.'.php'))
				throw new PrestashopInstallerException("Controller file 'http/{$step}.php' not found");

			require_once _PS_INSTALL_CONTROLLERS_PATH_.'http/'.$step.'.php';
			$classname = 'InstallControllerHttp'.$step;
			self::$instances[$step] = new $classname($step);
		}

		$session = InstallSession::getInstance();
		if (!$session->last_step || !in_array($session->last_step, self::$steps))
			$session->last_step = self::$steps[0];

		// Set timezone
		if ($session->shop_timezone)
			@date_default_timezone_set($session->shop_timezone);

		// Get current step (check first if step is changed, then take it from session)
		if (Tools::getValue('step'))
		{
			$current_step = Tools::getValue('step');
			$session->step = $current_step;
		}
		else
			$current_step = (isset($session->step)) ? $session->step : self::$steps[0];

		if (!in_array($current_step, self::$steps))
			$current_step = self::$steps[0];

		// Validate all steps until current step. If a step is not valid, use it as current step.
		foreach (self::$steps as $check_step)
		{
			// Do not validate current step
			if ($check_step == $current_step)
				break;

			if (!self::$instances[$check_step]->validate())
			{
				$current_step = $check_step;
				$session->step = $current_step;
				$session->last_step = $current_step;
				break;
			}
		}

		// Submit form to go to next step
		if (Tools::getValue('submitNext'))
		{
			self::$instances[$current_step]->processNextStep();

			// If current step is validated, let's go to next step
			if (self::$instances[$current_step]->validate())
				$current_step = self::$instances[$current_step]->findNextStep();
			$session->step = $current_step;

			// Change last step
			if (self::getStepOffset($current_step) > self::getStepOffset($session->last_step))
				$session->last_step = $current_step;
		}
		// Go to previous step
		else if (Tools::getValue('submitPrevious') && $current_step != self::$steps[0])
		{
			$current_step = self::$instances[$current_step]->findPreviousStep($current_step);
			$session->step = $current_step;
		}

		self::$instances[$current_step]->process();
		self::$instances[$current_step]->display();
	}

||||||||	final public static function execute()
	{
		if (Tools::getValue('compile_templates'))
		{
			require_once (_PS_INSTALL_CONTROLLERS_PATH_.'http/smarty_compile.php');
			exit;
		}
		// Include all controllers
		foreach (self::$steps as $step)
		{
			if (!file_exists(_PS_INSTALL_CONTROLLERS_PATH_.'http/'.$step.'.php'))
				throw new PrestashopInstallerException("Controller file 'http/{$step}.php' not found");

			require_once _PS_INSTALL_CONTROLLERS_PATH_.'http/'.$step.'.php';
			$classname = 'InstallControllerHttp'.$step;
			self::$instances[$step] = new $classname($step);
		}

		$session = InstallSession::getInstance();
		if (!$session->last_step || !in_array($session->last_step, self::$steps))
			$session->last_step = self::$steps[0];

		// Set timezone
		if ($session->shop_timezone)
			@date_default_timezone_set($session->shop_timezone);

		// Get current step (check first if step is changed, then take it from session)
		if (Tools::getValue('step'))
		{
			$current_step = Tools::getValue('step');
			$session->step = $current_step;
		}
		else
			$current_step = (isset($session->step)) ? $session->step : self::$steps[0];

		if (!in_array($current_step, self::$steps))
			$current_step = self::$steps[0];

		// Validate all steps until current step. If a step is not valid, use it as current step.
		foreach (self::$steps as $check_step)
		{
			// Do not validate current step
			if ($check_step == $current_step)
				break;

			if (!self::$instances[$check_step]->validate())
			{
				$current_step = $check_step;
				$session->step = $current_step;
				$session->last_step = $current_step;
				break;
			}
		}

		// Submit form to go to next step
		if (Tools::getValue('submitNext'))
		{
			self::$instances[$current_step]->processNextStep();

			// If current step is validated, let's go to next step
			if (self::$instances[$current_step]->validate())
				$current_step = self::$instances[$current_step]->findNextStep();
			$session->step = $current_step;

			// Change last step
			if (self::getStepOffset($current_step) > self::getStepOffset($session->last_step))
				$session->last_step = $current_step;
		}
		// Go to previous step
		else if (Tools::getValue('submitPrevious') && $current_step != self::$steps[0])
		{
			$current_step = self::$instances[$current_step]->findPreviousStep($current_step);
			$session->step = $current_step;
		}

		self::$instances[$current_step]->process();
		self::$instances[$current_step]->display();
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CONST)
                                            (SCALAR))
                                        (AST_VAR))
                                    (SCALAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_INCLUDE_OR_EVAL
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR))
                (AST_NEW
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_STATIC_PROP)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_BREAK
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (AST_VAR))
                                    (
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR)))
                (AST_EXIT
                    (NULL)))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CONST)
                                            (SCALAR))
                                        (AST_VAR))
                                    (SCALAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_INCLUDE_OR_EVAL
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR))
                (AST_NEW
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_STATIC_PROP)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_PROP
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR))
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_BREAK
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (AST_VAR))
                                    (
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR))))