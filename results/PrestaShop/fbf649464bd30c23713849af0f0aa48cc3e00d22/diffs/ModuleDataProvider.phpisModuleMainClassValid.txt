    public function isModuleMainClassValid($name)
    {
        $file_path = $this->getModulesDir().$name.'/'.$name.'.php';
        if (!file_exists($file_path)) {
            return false;
        }


        $file = trim(file_get_contents($file_path));

        if (substr($file, 0, 5) == '<?php') {
            $file = substr($file, 5);
        }

        if (substr($file, -2) == '?>') {
            $file = substr($file, 0, -2);
        }

        // We check any parse error before including the file.
        // If (false) is a trick to not load the class with "eval".
        // This way require_once will works correctly
        // But namespace and use statements need to be removed
        $content = preg_replace('/\n[\s\t]*?use\s.*?;/', '', $file);
        $content = preg_replace('/\n[\s\t]*?namespace\s.*?;/', '', $content);
        return (eval('if (false){	'.$content.' }') !== false);
    }

    /**
     * Check if the module is in the modules folder, with a valid class
     *
     * @param  string $name The technical module name to find
     * @return bool         True if found
     */
||||||||    public function isModuleMainClassValid($name)
    {
        $file_path = _PS_MODULE_DIR_.$name.'/'.$name.'.php';
        if (!file_exists($file_path)) {
            return false;
        }


        $file = trim(file_get_contents($file_path));

        if (substr($file, 0, 5) == '<?php') {
            $file = substr($file, 5);
        }

        if (substr($file, -2) == '?>') {
            $file = substr($file, 0, -2);
        }

        // We check any parse error before including the file.
        // If (false) is a trick to not load the class with "eval".
        // This way require_once will works correctly
        // But namespace and use statements need to be removed
        $content = preg_replace('/\n[\s\t]*?use\s.*?;/', '', $file);
        $content = preg_replace('/\n[\s\t]*?namespace\s.*?;/', '', $content);
        return (eval('if (false){	'.$content.' }') !== false);
    }

    /**
     * Check if the module is in the modules folder, with a valid class
     *
     * @param  string $name The technical module name to find
     * @return bool         True if found
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_INCLUDE_OR_EVAL
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_VAR))
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_INCLUDE_OR_EVAL
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_CONST))))