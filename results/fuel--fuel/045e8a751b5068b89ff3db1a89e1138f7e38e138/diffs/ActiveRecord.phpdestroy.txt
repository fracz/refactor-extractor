||||||||	function destroy()
	{
		if (method_exists($this, 'before_destroy'))
			$this->before_destroy();
		foreach ($this->associations as $name => $assoc)
		{
			$assoc->destroy($this);
		}
		$query = "DELETE FROM {$this->table_name} "
				. "WHERE {$this->primary_key} = {$this->{$this->primary_key}} "
				. "LIMIT 1";
		self::query($query);
		$this->frozen = true;
		if (method_exists($this, 'after_destroy'))
			$this->after_destroy();
		return true;
	}

	/* transform_row -- transforms a row into its various objects
	  accepts: row from SQL query (array), lookup array of column names
	  return: object keyed by table names and real columns names
	 */

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CONST)))