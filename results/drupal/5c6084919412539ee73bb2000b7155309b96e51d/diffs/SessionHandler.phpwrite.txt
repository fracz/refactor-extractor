  public function write($sid, $value) {
    global $user;

    // The exception handler is not active at this point, so we need to do it
    // manually.
    try {
      if (!$this->sessionManager->isEnabled()) {
        // We don't have anything to do if we are not allowed to save the
        // session.
        return TRUE;
      }

      // Either ssid or sid or both will be added from $key below.
      $fields = array(
        'uid' => $user->id(),
        'hostname' => $this->requestStack->getCurrentRequest()->getClientIP(),
        'session' => $value,
        'timestamp' => REQUEST_TIME,
      );
      // Use the session ID as 'sid' and an empty string as 'ssid' by default.
      // read() does not allow empty strings so that's a safe default.
      $key = array('sid' => Crypt::hashBase64($sid), 'ssid' => '');
      // On HTTPS connections, use the session ID as both 'sid' and 'ssid'.
      if ($this->requestStack->getCurrentRequest()->isSecure()) {
        $key['ssid'] = Crypt::hashBase64($sid);
        $cookies = $this->requestStack->getCurrentRequest()->cookies;
        // The "secure pages" setting allows a site to simultaneously use both
        // secure and insecure session cookies. If enabled and both cookies
        // are presented then use both keys. The session ID from the cookie is
        // hashed before being stored in the database as a security measure.
        if ($this->sessionManager->isMixedMode()) {
          $insecure_session_name = $this->sessionManager->getInsecureName();
          if ($cookies->has($insecure_session_name)) {
            $key['sid'] = Crypt::hashBase64($cookies->get($insecure_session_name));
          }
        }
      }
      elseif ($this->sessionManager->isMixedMode()) {
        unset($key['ssid']);
      }
      $this->connection->merge('sessions')
        ->keys($key)
        ->fields($fields)
        ->execute();

      // Remove obsolete sessions.
      $this->cleanupObsoleteSessions();

      // Likewise, do not update access time more than once per 180 seconds.
      if ($user->isAuthenticated() && REQUEST_TIME - $user->getLastAccessedTime() > Settings::get('session_write_interval', 180)) {
        /** @var \Drupal\user\UserStorageInterface $storage */
        $storage = \Drupal::entityManager()->getStorage('user');
        $storage->updateLastAccessTimestamp($user, REQUEST_TIME);
      }
      return TRUE;
    }
    catch (\Exception $exception) {
      require_once DRUPAL_ROOT . '/core/includes/errors.inc';
      // If we are displaying errors, then do so with no possibility of a
      // further uncaught exception being thrown.
      if (error_displayable()) {
        print '<h1>Uncaught exception thrown in session handler.</h1>';
        print '<p>' . Error::renderExceptionSafe($exception) . '</p><hr />';
      }
      return FALSE;
    }
  }

  /**
   * {@inheritdoc}
   */
||||||||  public function write($sid, $value) {
    global $user;

    // The exception handler is not active at this point, so we need to do it
    // manually.
    try {
      if (!$this->sessionManager->isEnabled()) {
        // We don't have anything to do if we are not allowed to save the
        // session.
        return TRUE;
      }

      // Either ssid or sid or both will be added from $key below.
      $fields = array(
        'uid' => $user->id(),
        'hostname' => $this->requestStack->getCurrentRequest()->getClientIP(),
        'session' => $value,
        'timestamp' => REQUEST_TIME,
      );
      // Use the session ID as 'sid' and an empty string as 'ssid' by default.
      // read() does not allow empty strings so that's a safe default.
      $key = array('sid' => Crypt::hashBase64($sid), 'ssid' => '');
      // On HTTPS connections, use the session ID as both 'sid' and 'ssid'.
      if ($this->requestStack->getCurrentRequest()->isSecure()) {
        $key['ssid'] = $key['sid'];
        // The "secure pages" setting allows a site to simultaneously use both
        // secure and insecure session cookies. If enabled and both cookies
        // are presented then use both keys. The session ID from the cookie is
        // hashed before being stored in the database as a security measure.
        if ($this->sessionManager->isMixedMode()) {
          $insecure_session_name = $this->sessionManager->getInsecureName();
          $cookies = $this->requestStack->getCurrentRequest()->cookies;
          if ($cookies->has($insecure_session_name)) {
            $key['sid'] = Crypt::hashBase64($cookies->get($insecure_session_name));
          }
        }
      }
      elseif ($this->sessionManager->isMixedMode()) {
        unset($key['ssid']);
      }
      $this->connection->merge('sessions')
        ->keys($key)
        ->fields($fields)
        ->execute();

      // Remove obsolete sessions.
      $this->cleanupObsoleteSessions();

      // Likewise, do not update access time more than once per 180 seconds.
      if ($user->isAuthenticated() && REQUEST_TIME - $user->getLastAccessedTime() > Settings::get('session_write_interval', 180)) {
        /** @var \Drupal\user\UserStorageInterface $storage */
        $storage = \Drupal::entityManager()->getStorage('user');
        $storage->updateLastAccessTimestamp($user, REQUEST_TIME);
      }
      return TRUE;
    }
    catch (\Exception $exception) {
      require_once DRUPAL_ROOT . '/core/includes/errors.inc';
      // If we are displaying errors, then do so with no possibility of a
      // further uncaught exception being thrown.
      if (error_displayable()) {
        print '<h1>Uncaught exception thrown in session handler.</h1>';
        print '<p>' . Error::renderExceptionSafe($exception) . '</p><hr />';
      }
      return FALSE;
    }
  }

  /**
   * {@inheritdoc}
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))
                                            (
                                                (AST_ASSIGN
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)
                                                                (
                                                                    (AST_VAR))))))))))))))
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL)
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_CONST))))))
            (AST_RETURN
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL)
                            (
                                (AST_PRINT
                                    (SCALAR))
                                (AST_PRINT
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))))))
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))
                                            (
                                                (AST_ASSIGN
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)
                                                                (
                                                                    (AST_VAR))))))))))))))
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL)
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_CONST))))))
            (AST_RETURN
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL)
                            (
                                (AST_PRINT
                                    (SCALAR))
                                (AST_PRINT
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))))))
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL)))