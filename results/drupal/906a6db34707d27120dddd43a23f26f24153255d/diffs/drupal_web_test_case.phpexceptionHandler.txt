  protected function exceptionHandler($exception) {
    $backtrace = $exception->getTrace();
    // Push on top of the backtrace the call that generated the exception.
    array_unshift($backtrace, array(
      'line' => $exception->getLine(),
      'file' => $exception->getFile(),
    ));
    require_once DRUPAL_ROOT . '/core/includes/errors.inc';
    // The exception message is run through check_plain() by _drupal_decode_exception().
    $this->error(t('%type: !message in %function (line %line of %file).', _drupal_decode_exception($exception)), 'Uncaught exception', _drupal_get_last_caller($backtrace));
  }

  /**
   * Generates a random string of ASCII characters of codes 32 to 126.
   *
   * The generated string includes alpha-numeric characters and common misc
   * characters. Use this method when testing general input where the content
   * is not restricted.
   *
   * @param $length
   *   Length of random string to generate.
   * @return
   *   Randomly generated string.
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR)))))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR))))))||||||||