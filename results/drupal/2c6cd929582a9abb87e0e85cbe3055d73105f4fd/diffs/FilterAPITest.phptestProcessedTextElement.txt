  function testProcessedTextElement() {
    entity_create('filter_format', array(
      'format' => 'element_test',
      'name' => 'processed_text element test format',
      'filters' => array(
        'filter_test_assets' => array(
          'weight' => -1,
          'status' => TRUE,
        ),
        'filter_test_cache_tags' => array(
          'weight' => 0,
          'status' => TRUE,
        ),
        'filter_test_post_render_cache' => array(
          'weight' => 1,
          'status' => TRUE,
        ),
        // Run the HTML corrector filter last, because it has the potential to
        // break the render cache placeholders added by the
        // filter_test_post_render_cache filter.
        'filter_htmlcorrector' => array(
          'weight' => 10,
          'status' => TRUE,
        ),
      ),
    ))->save();

    $build = array(
      '#type' => 'processed_text',
      '#text' => '<p>Hello, world!</p>',
      '#format' => 'element_test',
    );
    drupal_render($build);

    // Verify the assets, cache tags and #post_render_cache callbacks.
    $expected_assets = array(
      // The assets attached by the filter_test_assets filter.
      'library' => array(
        'filter/caption',
      ),
    );
    $this->assertEqual($expected_assets, $build['#attached'], 'Expected assets present');
    $expected_cache_tags = array(
      // The cache tag set by the processed_text element itself.
      'filter_format' => array(
        'element_test',
      ),
      // The cache tags set by the filter_test_cache_tags filter.
      'foo' => array(
        'bar',
        'baz',
      ),
    );
    $this->assertEqual($expected_cache_tags, $build['#cache']['tags'], 'Expected cache tags present.');
    $expected_markup = '<p>Hello, world!</p><p>This is a dynamic llama.</p>';
    $this->assertEqual($expected_markup, $build['#markup'], 'Expected #post_render_cache callback has been applied.');
  }

  /**
   * Tests the function of the typed data type.
   */
||||||||  function testProcessedTextElement() {
    entity_create('filter_format', array(
      'format' => 'element_test',
      'name' => 'processed_text element test format',
      'filters' => array(
        'filter_test_assets' => array(
          'weight' => -1,
          'status' => TRUE,
        ),
        'filter_test_cache_tags' => array(
          'weight' => 0,
          'status' => TRUE,
        ),
        'filter_test_post_render_cache' => array(
          'weight' => 1,
          'status' => TRUE,
        ),
        // Run the HTML corrector filter last, because it has the potential to
        // break the render cache placeholders added by the
        // filter_test_post_render_cache filter.
        'filter_htmlcorrector' => array(
          'weight' => 10,
          'status' => TRUE,
        ),
      ),
    ))->save();

    $build = array(
      '#type' => 'processed_text',
      '#text' => '<p>Hello, world!</p>',
      '#format' => 'element_test',
    );
    drupal_render($build);

    // Verify the assets, cache tags and #post_render_cache callbacks.
    $expected_assets = array(
      // The assets attached by the filter_test_assets filter.
      'library' => array(
        'filter/caption',
      ),
    );
    $this->assertEqual($expected_assets, $build['#attached'], 'Expected assets present');
    $expected_cache_tags = array(
      // The cache tag set by the processed_text element itself.
      'filter_format:element_test',
      // The cache tags set by the filter_test_cache_tags filter.
      'foo:bar',
      'foo:baz',
    );
    $this->assertEqual($expected_cache_tags, $build['#cache']['tags'], 'Expected cache tags present.');
    $expected_markup = '<p>Hello, world!</p><p>This is a dynamic llama.</p>';
    $this->assertEqual($expected_markup, $build['#markup'], 'Expected #post_render_cache callback has been applied.');
  }

  /**
   * Tests the function of the typed data type.
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_UNARY_OP
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_UNARY_OP
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (SCALAR)))
                                (SCALAR)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))))