  public static function preRenderText($element) {
    $format_id = $element['#format'];
    $filter_types_to_skip = $element['#filter_types_to_skip'];
    $text = $element['#text'];
    $langcode = $element['#langcode'];

    if (!isset($format_id)) {
      $format_id = static::configFactory()->get('filter.settings')->get('fallback_format');
    }
    // If the requested text format does not exist, the text cannot be filtered.
    /** @var \Drupal\filter\Entity\FilterFormat $format **/
    if (!$format = FilterFormat::load($format_id)) {
      static::logger('filter')->alert('Missing text format: %format.', array('%format' => $format_id));
      $element['#markup'] = '';
      return $element;
    }

    $filter_must_be_applied = function(FilterInterface $filter) use ($filter_types_to_skip) {
      $enabled = $filter->status === TRUE;
      $type = $filter->getType();
      // Prevent FilterInterface::TYPE_HTML_RESTRICTOR from being skipped.
      $filter_type_must_be_applied = $type == FilterInterface::TYPE_HTML_RESTRICTOR || !in_array($type, $filter_types_to_skip);
      return $enabled && $filter_type_must_be_applied;
    };

    // Convert all Windows and Mac newlines to a single newline, so filters only
    // need to deal with one possibility.
    $text = str_replace(array("\r\n", "\r"), "\n", $text);

    // Get a complete list of filters, ordered properly.
    /** @var \Drupal\filter\Plugin\FilterInterface[] $filters **/
    $filters = $format->filters();

    // Give filters a chance to escape HTML-like data such as code or formulas.
    foreach ($filters as $filter) {
      if ($filter_must_be_applied($filter)) {
        $text = $filter->prepare($text, $langcode);
      }
    }

    // Perform filtering.
    $all_cache_tags = array();
    $all_assets = array();
    $all_post_render_cache_callbacks = array();
    foreach ($filters as $filter) {
      if ($filter_must_be_applied($filter)) {
        $result = $filter->process($text, $langcode);
        $all_assets[] = $result->getAssets();
        $all_cache_tags[] = $result->getCacheTags();
        $all_post_render_cache_callbacks[] = $result->getPostRenderCacheCallbacks();
        $text = $result->getProcessedText();
      }
    }

    // Filtering done, store in #markup.
    $element['#markup'] = $text;

    // Collect all cache tags.
    if (isset($element['#cache']) && isset($element['#cache']['tags'])) {
      // Prepend the original cache tags array.
      array_unshift($all_cache_tags, $element['#cache']['tags']);
    }
    // Prepend the text format's cache tags array.
    array_unshift($all_cache_tags, $format->getCacheTag());
    $element['#cache']['tags'] = NestedArray::mergeDeepArray($all_cache_tags);

    // Collect all attached assets.
    if (isset($element['#attached'])) {
      // Prepend the original attached assets array.
      array_unshift($all_assets, $element['#attached']);
    }
    $element['#attached'] = NestedArray::mergeDeepArray($all_assets);

    // Collect all #post_render_cache callbacks.
    if (isset($element['#post_render_cache'])) {
      // Prepend the original attached #post_render_cache array.
      array_unshift($all_assets, $element['#post_render_cache']);
    }
    $element['#post_render_cache'] = NestedArray::mergeDeepArray($all_post_render_cache_callbacks);

    return $element;
  }

  /**
   * Wraps a logger channel.
   *
   * @return \Psr\Log\LoggerInterface
   */
||||||||  public static function preRenderText($element) {
    $format_id = $element['#format'];
    $filter_types_to_skip = $element['#filter_types_to_skip'];
    $text = $element['#text'];
    $langcode = $element['#langcode'];

    if (!isset($format_id)) {
      $format_id = static::configFactory()->get('filter.settings')->get('fallback_format');
    }
    // If the requested text format does not exist, the text cannot be filtered.
    /** @var \Drupal\filter\Entity\FilterFormat $format **/
    if (!$format = FilterFormat::load($format_id)) {
      static::logger('filter')->alert('Missing text format: %format.', array('%format' => $format_id));
      $element['#markup'] = '';
      return $element;
    }

    $filter_must_be_applied = function(FilterInterface $filter) use ($filter_types_to_skip) {
      $enabled = $filter->status === TRUE;
      $type = $filter->getType();
      // Prevent FilterInterface::TYPE_HTML_RESTRICTOR from being skipped.
      $filter_type_must_be_applied = $type == FilterInterface::TYPE_HTML_RESTRICTOR || !in_array($type, $filter_types_to_skip);
      return $enabled && $filter_type_must_be_applied;
    };

    // Convert all Windows and Mac newlines to a single newline, so filters only
    // need to deal with one possibility.
    $text = str_replace(array("\r\n", "\r"), "\n", $text);

    // Get a complete list of filters, ordered properly.
    /** @var \Drupal\filter\Plugin\FilterInterface[] $filters **/
    $filters = $format->filters();

    // Give filters a chance to escape HTML-like data such as code or formulas.
    foreach ($filters as $filter) {
      if ($filter_must_be_applied($filter)) {
        $text = $filter->prepare($text, $langcode);
      }
    }

    // Perform filtering.
    $cache_tags = array();
    $all_assets = array();
    $all_post_render_cache_callbacks = array();
    foreach ($filters as $filter) {
      if ($filter_must_be_applied($filter)) {
        $result = $filter->process($text, $langcode);
        $all_assets[] = $result->getAssets();
        $cache_tags = Cache::mergeTags($cache_tags, $result->getCacheTags());
        $all_post_render_cache_callbacks[] = $result->getPostRenderCacheCallbacks();
        $text = $result->getProcessedText();
      }
    }

    // Filtering done, store in #markup.
    $element['#markup'] = $text;

    // Collect all cache tags.
    if (isset($element['#cache']) && isset($element['#cache']['tags'])) {
      // Merge the original cache tags array.
      $cache_tags = Cache::mergeTags($cache_tags, $element['#cache']['tags']);
    }
    // Prepend the text format's cache tags array.
    $cache_tags = Cache::mergeTags($cache_tags, $format->getCacheTag());
    $element['#cache']['tags'] = $cache_tags;

    // Collect all attached assets.
    if (isset($element['#attached'])) {
      // Prepend the original attached assets array.
      array_unshift($all_assets, $element['#attached']);
    }
    $element['#attached'] = NestedArray::mergeDeepArray($all_assets);

    // Collect all #post_render_cache callbacks.
    if (isset($element['#post_render_cache'])) {
      // Prepend the original attached #post_render_cache array.
      array_unshift($all_assets, $element['#post_render_cache']);
    }
    $element['#post_render_cache'] = NestedArray::mergeDeepArray($all_post_render_cache_callbacks);

    return $element;
  }

  /**
   * Wraps a logger channel.
   *
   * @return \Psr\Log\LoggerInterface
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (PARAM_TYPENO_PARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ISSET
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (PARAM_TYPENO_PARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ISSET
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))