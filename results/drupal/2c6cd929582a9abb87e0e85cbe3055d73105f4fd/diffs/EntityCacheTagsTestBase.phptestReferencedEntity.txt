  public function testReferencedEntity() {
    $entity_type = $this->entity->getEntityTypeId();
    $referencing_entity_path = $this->referencing_entity->getSystemPath();
    $non_referencing_entity_path = $this->non_referencing_entity->getSystemPath();
    $listing_path = 'entity_test/list/' . $entity_type . '_reference/' . $entity_type . '/' . $this->entity->id();

    $render_cache_tags = array('rendered:1');
    $theme_cache_tags = array('theme:stark', 'theme_global_settings:1');

    $view_cache_tag = array();
    if ($this->entity->getEntityType()->hasHandlerClass('view_builder')) {
      $view_cache_tag = \Drupal::entityManager()->getViewBuilder($entity_type)
        ->getCacheTag();
    }

    // Generate the cache tags for the (non) referencing entities.
    $referencing_entity_cache_tags = NestedArray::mergeDeep(
      $this->referencing_entity->getCacheTag(),
      \Drupal::entityManager()->getViewBuilder('entity_test')->getCacheTag(),
      // Includes the main entity's cache tags, since this entity references it.
      $this->entity->getCacheTag(),
      $view_cache_tag
    );
    $referencing_entity_cache_tags = explode(' ', HtmlViewSubscriber::convertCacheTagsToHeader($referencing_entity_cache_tags));
    $referencing_entity_cache_tags = array_merge($referencing_entity_cache_tags, $this->getAdditionalCacheTagsForEntity($this->entity));
    $non_referencing_entity_cache_tags = NestedArray::mergeDeep(
      $this->non_referencing_entity->getCacheTag(),
      \Drupal::entityManager()->getViewBuilder('entity_test')->getCacheTag()
    );
    $non_referencing_entity_cache_tags = explode(' ', HtmlViewSubscriber::convertCacheTagsToHeader($non_referencing_entity_cache_tags));


    $this->pass("Test referencing entity.", 'Debug');
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    // Verify a cache hit, but also the presence of the correct cache tags.
    $tags = array_merge($render_cache_tags, $theme_cache_tags, $referencing_entity_cache_tags);
    $this->verifyPageCache($referencing_entity_path, 'HIT', $tags);
    // Also verify the existence of an entity render cache entry.
    $cid = 'entity_view:entity_test:' . $this->referencing_entity->id() . ':full:stark:r.anonymous:' . date_default_timezone_get();
    $tags = array_merge($render_cache_tags, $referencing_entity_cache_tags);
    $this->verifyRenderCache($cid, $tags);

    $this->pass("Test non-referencing entity.", 'Debug');
    $this->verifyPageCache($non_referencing_entity_path, 'MISS');
    // Verify a cache hit, but also the presence of the correct cache tags.
    $tags = array_merge($render_cache_tags, $theme_cache_tags, $non_referencing_entity_cache_tags);
    $this->verifyPageCache($non_referencing_entity_path, 'HIT', $tags);
    // Also verify the existence of an entity render cache entry.
    $cid = 'entity_view:entity_test:' . $this->non_referencing_entity->id() . ':full:stark:r.anonymous:' . date_default_timezone_get();
    $tags = array_merge($render_cache_tags, $non_referencing_entity_cache_tags);
    $this->verifyRenderCache($cid, $tags);


    $this->pass("Test listing of referencing entities.", 'Debug');
    // Prime the page cache for the listing of referencing entities.
    $this->verifyPageCache($listing_path, 'MISS');
    // Verify a cache hit, but also the presence of the correct cache tags.
    $tags = array_merge($render_cache_tags, $theme_cache_tags, $referencing_entity_cache_tags);
    $this->verifyPageCache($listing_path, 'HIT', $tags);


    // Verify that after modifying the referenced entity, there is a cache miss
    // for both the referencing entity, and the listing of referencing entities,
    // but not for the non-referencing entity.
    $this->pass("Test modification of referenced entity.", 'Debug');
    $this->entity->save();
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');


    // Verify that after modifying the referencing entity, there is a cache miss
    // for both the referencing entity, and the listing of referencing entities,
    // but not for the non-referencing entity.
    $this->pass("Test modification of referencing entity.", 'Debug');
    $this->referencing_entity->save();
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');


    // Verify that after modifying the non-referencing entity, there is a cache
    // miss for only the non-referencing entity, not for the referencing entity,
    // nor for the listing of referencing entities.
    $this->pass("Test modification of non-referencing entity.", 'Debug');
    $this->non_referencing_entity->save();
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');
    $this->verifyPageCache($non_referencing_entity_path, 'MISS');

    // Verify cache hits.
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');


    if ($this->entity->getEntityType()->hasHandlerClass('view_builder')) {
      // Verify that after modifying the entity's display, there is a cache miss
      // for both the referencing entity, and the listing of referencing
      // entities, but not for the non-referencing entity.
      $referenced_entity_view_mode = $this->selectViewMode($this->entity->getEntityTypeId());
      $this->pass("Test modification of referenced entity's '$referenced_entity_view_mode' display.", 'Debug');
      $entity_display = entity_get_display($entity_type, $this->entity->bundle(), $referenced_entity_view_mode);
      $entity_display->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }


    $bundle_entity_type = $this->entity->getEntityType()->getBundleEntityType();
    if ($bundle_entity_type !== 'bundle') {
      // Verify that after modifying the corresponding bundle entity, there is a
      // cache miss for both the referencing entity, and the listing of
      // referencing entities, but not for the non-referencing entity.
      $this->pass("Test modification of referenced entity's bundle entity.", 'Debug');
      $bundle_entity = entity_load($bundle_entity_type, $this->entity->bundle());
      $bundle_entity->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }


    if ($this->entity->getEntityType()->isFieldable()) {
      // Verify that after modifying a configurable field on the entity, there
      // is a cache miss.
      $this->pass("Test modification of referenced entity's configurable field.", 'Debug');
      $field_storage_name = $this->entity->getEntityTypeId() . '.configurable_field';
      $field_storage = entity_load('field_storage_config', $field_storage_name);
      $field_storage->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');


      // Verify that after modifying a configurable field on the entity, there
      // is a cache miss.
      $this->pass("Test modification of referenced entity's configurable field.", 'Debug');
      $field_name = $this->entity->getEntityTypeId() . '.' . $this->entity->bundle() . '.configurable_field';
      $field = entity_load('field_config', $field_name);
      $field->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }


    // Verify that after invalidating the entity's cache tag directly,  there is
    // a cache miss for both the referencing entity, and the listing of
    // referencing entities, but not for the non-referencing entity.
    $this->pass("Test invalidation of referenced entity's cache tag.", 'Debug');
    Cache::invalidateTags($this->entity->getCacheTag());
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');


    if (!empty($view_cache_tag)) {
      // Verify that after invalidating the generic entity type's view cache tag
      // directly, there is a cache miss for both the referencing entity, and the
      // listing of referencing entities, but not for the non-referencing entity.
      $this->pass("Test invalidation of referenced entity's 'view' cache tag.", 'Debug');
      Cache::invalidateTags($view_cache_tag);
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }

    // Verify that after deleting the entity, there is a cache miss for both the
    // referencing entity, and the listing of referencing entities, but not for
    // the non-referencing entity.
    $this->pass('Test deletion of referenced entity.', 'Debug');
    $this->entity->delete();
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $referencing_entity_cache_tags = NestedArray::mergeDeep(
      $this->referencing_entity->getCacheTag(),
      \Drupal::entityManager()->getViewBuilder('entity_test')->getCacheTag()
    );
    $referencing_entity_cache_tags = explode(' ', HtmlViewSubscriber::convertCacheTagsToHeader($referencing_entity_cache_tags));
    $tags = array_merge($render_cache_tags, $theme_cache_tags, $referencing_entity_cache_tags);
    $this->verifyPageCache($referencing_entity_path, 'HIT', $tags);
    $tags = array_merge($render_cache_tags, $theme_cache_tags);
    $this->verifyPageCache($listing_path, 'HIT', $tags);
  }

  /**
   * Verify that a given render cache entry exists, with the correct cache tags.
   *
   * @param string $cid
   *   The render cache item ID.
   * @param array $tags
   *   An array of expected cache tags.
   */
||||||||  public function testReferencedEntity() {
    $entity_type = $this->entity->getEntityTypeId();
    $referencing_entity_path = $this->referencing_entity->getSystemPath();
    $non_referencing_entity_path = $this->non_referencing_entity->getSystemPath();
    $listing_path = 'entity_test/list/' . $entity_type . '_reference/' . $entity_type . '/' . $this->entity->id();

    $render_cache_tags = array('rendered');
    $theme_cache_tags = array('theme:stark', 'theme_global_settings');

    $view_cache_tag = array();
    if ($this->entity->getEntityType()->hasHandlerClass('view_builder')) {
      $view_cache_tag = \Drupal::entityManager()->getViewBuilder($entity_type)
        ->getCacheTag();
    }

    // Generate the cache tags for the (non) referencing entities.
    $referencing_entity_cache_tags = Cache::mergeTags(
      $this->referencing_entity->getCacheTag(),
      \Drupal::entityManager()->getViewBuilder('entity_test')->getCacheTag(),
      // Includes the main entity's cache tags, since this entity references it.
      $this->entity->getCacheTag(),
      $this->getAdditionalCacheTagsForEntity($this->entity),
      $view_cache_tag
    );
    $non_referencing_entity_cache_tags = Cache::mergeTags(
      $this->non_referencing_entity->getCacheTag(),
      \Drupal::entityManager()->getViewBuilder('entity_test')->getCacheTag()
    );


    $this->pass("Test referencing entity.", 'Debug');
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    // Verify a cache hit, but also the presence of the correct cache tags.
    $tags = Cache::mergeTags($render_cache_tags, $theme_cache_tags, $referencing_entity_cache_tags);
    $this->verifyPageCache($referencing_entity_path, 'HIT', $tags);
    // Also verify the existence of an entity render cache entry.
    $cid = 'entity_view:entity_test:' . $this->referencing_entity->id() . ':full:stark:r.anonymous:' . date_default_timezone_get();
    $tags = Cache::mergeTags($render_cache_tags, $referencing_entity_cache_tags);
    $this->verifyRenderCache($cid, $tags);

    $this->pass("Test non-referencing entity.", 'Debug');
    $this->verifyPageCache($non_referencing_entity_path, 'MISS');
    // Verify a cache hit, but also the presence of the correct cache tags.
    $tags = Cache::mergeTags($render_cache_tags, $theme_cache_tags, $non_referencing_entity_cache_tags);
    $this->verifyPageCache($non_referencing_entity_path, 'HIT', $tags);
    // Also verify the existence of an entity render cache entry.
    $cid = 'entity_view:entity_test:' . $this->non_referencing_entity->id() . ':full:stark:r.anonymous:' . date_default_timezone_get();
    $tags = Cache::mergeTags($render_cache_tags, $non_referencing_entity_cache_tags);
    $this->verifyRenderCache($cid, $tags);


    $this->pass("Test listing of referencing entities.", 'Debug');
    // Prime the page cache for the listing of referencing entities.
    $this->verifyPageCache($listing_path, 'MISS');
    // Verify a cache hit, but also the presence of the correct cache tags.
    $tags = Cache::mergeTags($render_cache_tags, $theme_cache_tags, $referencing_entity_cache_tags);
    $this->verifyPageCache($listing_path, 'HIT', $tags);


    // Verify that after modifying the referenced entity, there is a cache miss
    // for both the referencing entity, and the listing of referencing entities,
    // but not for the non-referencing entity.
    $this->pass("Test modification of referenced entity.", 'Debug');
    $this->entity->save();
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');


    // Verify that after modifying the referencing entity, there is a cache miss
    // for both the referencing entity, and the listing of referencing entities,
    // but not for the non-referencing entity.
    $this->pass("Test modification of referencing entity.", 'Debug');
    $this->referencing_entity->save();
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');


    // Verify that after modifying the non-referencing entity, there is a cache
    // miss for only the non-referencing entity, not for the referencing entity,
    // nor for the listing of referencing entities.
    $this->pass("Test modification of non-referencing entity.", 'Debug');
    $this->non_referencing_entity->save();
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');
    $this->verifyPageCache($non_referencing_entity_path, 'MISS');

    // Verify cache hits.
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');


    if ($this->entity->getEntityType()->hasHandlerClass('view_builder')) {
      // Verify that after modifying the entity's display, there is a cache miss
      // for both the referencing entity, and the listing of referencing
      // entities, but not for the non-referencing entity.
      $referenced_entity_view_mode = $this->selectViewMode($this->entity->getEntityTypeId());
      $this->pass("Test modification of referenced entity's '$referenced_entity_view_mode' display.", 'Debug');
      $entity_display = entity_get_display($entity_type, $this->entity->bundle(), $referenced_entity_view_mode);
      $entity_display->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }


    $bundle_entity_type = $this->entity->getEntityType()->getBundleEntityType();
    if ($bundle_entity_type !== 'bundle') {
      // Verify that after modifying the corresponding bundle entity, there is a
      // cache miss for both the referencing entity, and the listing of
      // referencing entities, but not for the non-referencing entity.
      $this->pass("Test modification of referenced entity's bundle entity.", 'Debug');
      $bundle_entity = entity_load($bundle_entity_type, $this->entity->bundle());
      $bundle_entity->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }


    if ($this->entity->getEntityType()->isFieldable()) {
      // Verify that after modifying a configurable field on the entity, there
      // is a cache miss.
      $this->pass("Test modification of referenced entity's configurable field.", 'Debug');
      $field_storage_name = $this->entity->getEntityTypeId() . '.configurable_field';
      $field_storage = entity_load('field_storage_config', $field_storage_name);
      $field_storage->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');


      // Verify that after modifying a configurable field on the entity, there
      // is a cache miss.
      $this->pass("Test modification of referenced entity's configurable field.", 'Debug');
      $field_name = $this->entity->getEntityTypeId() . '.' . $this->entity->bundle() . '.configurable_field';
      $field = entity_load('field_config', $field_name);
      $field->save();
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }


    // Verify that after invalidating the entity's cache tag directly,  there is
    // a cache miss for both the referencing entity, and the listing of
    // referencing entities, but not for the non-referencing entity.
    $this->pass("Test invalidation of referenced entity's cache tag.", 'Debug');
    Cache::invalidateTags($this->entity->getCacheTag());
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $this->verifyPageCache($referencing_entity_path, 'HIT');
    $this->verifyPageCache($listing_path, 'HIT');


    if (!empty($view_cache_tag)) {
      // Verify that after invalidating the generic entity type's view cache tag
      // directly, there is a cache miss for both the referencing entity, and the
      // listing of referencing entities, but not for the non-referencing entity.
      $this->pass("Test invalidation of referenced entity's 'view' cache tag.", 'Debug');
      Cache::invalidateTags($view_cache_tag);
      $this->verifyPageCache($referencing_entity_path, 'MISS');
      $this->verifyPageCache($listing_path, 'MISS');
      $this->verifyPageCache($non_referencing_entity_path, 'HIT');

      // Verify cache hits.
      $this->verifyPageCache($referencing_entity_path, 'HIT');
      $this->verifyPageCache($listing_path, 'HIT');
    }

    // Verify that after deleting the entity, there is a cache miss for both the
    // referencing entity, and the listing of referencing entities, but not for
    // the non-referencing entity.
    $this->pass('Test deletion of referenced entity.', 'Debug');
    $this->entity->delete();
    $this->verifyPageCache($referencing_entity_path, 'MISS');
    $this->verifyPageCache($listing_path, 'MISS');
    $this->verifyPageCache($non_referencing_entity_path, 'HIT');

    // Verify cache hits.
    $referencing_entity_cache_tags = Cache::mergeTags(
      $this->referencing_entity->getCacheTag(),
      \Drupal::entityManager()->getViewBuilder('entity_test')->getCacheTag()
    );
    $tags = Cache::mergeTags($render_cache_tags, $theme_cache_tags, $referencing_entity_cache_tags);
    $this->verifyPageCache($referencing_entity_path, 'HIT', $tags);
    $tags = Cache::mergeTags($render_cache_tags, $theme_cache_tags);
    $this->verifyPageCache($listing_path, 'HIT', $tags);
  }

  /**
   * Verify that a given render cache entry exists, with the correct cache tags.
   *
   * @param string $cid
   *   The render cache item ID.
   * @param array $tags
   *   An array of expected cache tags.
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR))))