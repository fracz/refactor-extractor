  public function read() {
    // There are situations, like in the installer, where we may attempt a
    // read without actually having the database available. This is a
    // workaround and there is probably a better solution to be had at
    // some point.
    if (!empty($GLOBALS['databases']) && db_table_exists('config')) {
      return db_query('SELECT data FROM {config} WHERE name = :name', array(':name' => $this->name))->fetchField();
    }
  }

  /**
   * Implements DrupalConfigVerifiedStorageInterface::writeToActive().
   */
||||||||  public function read() {
    // There are situations, like in the installer, where we may attempt a
    // read without actually having the database available. In this case,
    // catch the exception and just return an empty array so the caller can
    // handle it if need be.
    try {
      return db_query('SELECT data FROM {config} WHERE name = :name', array(':name' => $this->name), array('throw_exception' => TRUE))->fetchField();
    } catch (Exception $e) {
      return array();
    }
  }

  /**
   * Implements DrupalConfigVerifiedStorageInterface::writeToActive().
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_RETURN
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_ARRAY)))))
        (NULL)))