||||||||  protected function getAssertionCall() {
    $backtrace = debug_backtrace();

    // The first element is the call. The second element is the caller.
    // We skip calls that occurred in one of the methods of our base classes
    // or in an assertion function.
   while (($caller = $backtrace[1]) &&
         ((isset($caller['class']) && isset($this->skipClasses[$caller['class']])) ||
           substr($caller['function'], 0, 6) == 'assert')) {
      // We remove that call.
      array_shift($backtrace);
    }

    return _drupal_get_last_caller($backtrace);
  }

  /**
   * Check to see if a value is not false (not an empty string, 0, NULL, or FALSE).
   *
   * @param $value
   *   The value on which the assertion is to be done.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_ISSET
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))))
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))