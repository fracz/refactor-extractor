||||||||  public function run(array $methods = array()) {
    // Initialize verbose debugging.
    simpletest_verbose(NULL, variable_get('file_public_path', conf_path() . '/files'), get_class($this));

    // HTTP auth settings (<username>:<password>) for the simpletest browser
    // when sending requests to the test site.
    $this->httpauth_method = variable_get('simpletest_httpauth_method', CURLAUTH_BASIC);
    $username = variable_get('simpletest_httpauth_username', NULL);
    $password = variable_get('simpletest_httpauth_password', NULL);
    if ($username && $password) {
      $this->httpauth_credentials = $username . ':' . $password;
    }

    set_error_handler(array($this, 'errorHandler'));
    $class = get_class($this);
    // Iterate through all the methods in this class, unless a specific list of
    // methods to run was passed.
    $class_methods = get_class_methods($class);
    if ($methods) {
      $class_methods = array_intersect($class_methods, $methods);
    }
    foreach ($class_methods as $method) {
      // If the current method starts with "test", run it - it's a test.
      if (strtolower(substr($method, 0, 4)) == 'test') {
        // Insert a fail record. This will be deleted on completion to ensure
        // that testing completed.
        $method_info = new ReflectionMethod($class, $method);
        $caller = array(
          'file' => $method_info->getFileName(),
          'line' => $method_info->getStartLine(),
          'function' => $class . '->' . $method . '()',
        );
        $completion_check_id = DrupalTestCase::insertAssert($this->testId, $class, FALSE, t('The test did not complete due to a fatal error.'), 'Completion check', $caller);
        $this->setUp();
        try {
          $this->$method();
          // Finish up.
        }
        catch (Exception $e) {
          $this->exceptionHandler($e);
        }
        $this->tearDown();
        // Remove the completion check record.
        DrupalTestCase::deleteAssert($completion_check_id);
      }
    }
    // Clear out the error messages and restore error handler.
    drupal_get_messages();
    restore_error_handler();
  }

  /**
   * Handle errors during test runs.
   *
   * Because this is registered in set_error_handler(), it has to be public.
   * @see set_error_handler
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_CONST)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_CALL)
                        (SCALAR))))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)))))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_VAR))
                                        (SCALAR))
                                    (SCALAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_CONST)
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_TRY
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR))))))
                            (NULL))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_CALL)
    (AST_CALL))