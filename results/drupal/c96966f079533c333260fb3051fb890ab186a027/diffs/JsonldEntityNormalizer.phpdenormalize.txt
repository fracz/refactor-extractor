  public function denormalize($data, $class, $format = null) {
    if (!isset($data['@type'])) {
      throw new UnexpectedValueException('JSON-LD @type parameter must be included.');
    }

    // Every bundle has a type, identified by URI. The incoming data should
    // either include a type URI from this site's schema, or one of the type
    // URIs in the incoming data must map to a site schema URI when passed
    // through the RDF mapping manager.
    $type_uris = is_array($data['@type']) ? $data['@type'] : array($data['@type']);
    // If the RDF mapping manager can find a match to a site schema URI, it
    // will return the corresponding Typed Data ids. Otherwise, throw an
    // exception.
    // @todo The @types might be CURIEs or aliases. Expand before trying to map.
    try {
      $typed_data_ids = $this->rdfMappingManager->getTypedDataIdsFromTypeUris($type_uris);
    }
    catch (RdfMappingException $e) {
      throw new UnexpectedValueException($e->getMessage(), 0, $e);
    }

    $values = array(
      'type' => $typed_data_ids['bundle'],
    );
    // If the data specifies a default language, use it to create the entity.
    if (isset($data['langcode'])) {
      $values['langcode'] = $data['langcode'][LANGUAGE_NOT_SPECIFIED][0]['value'];
    }
    // Otherwise, if the default language is not specified but there are
    // translations of field values, explicitly set the entity's default
    // language to the site's default language. This is required to enable
    // field translation on this entity.
    else if ($this->containsTranslation($data)) {
      $values['langcode'] = language(LANGUAGE_TYPE_CONTENT)->langcode;
    }
    $entity = entity_create($typed_data_ids['entity_type'], $values);

    // For each attribute in the JSON-LD, add the values as fields to the newly
    // created entity. It is assumed that the JSON attribute names are the same
    // as the site's field names.
    // @todo Possibly switch to URI expansion of attribute names.
    foreach ($data as $fieldName => $incomingFieldValues) {
      // Skip the JSON-LD specific terms, which start with '@'.
      if ($fieldName[0] === '@') {
        continue;
      }
      // If the incoming value is an empty array we set the property to mark it
      // for deletion.
      if (empty($incomingFieldValues) && is_array($incomingFieldValues)) {
        $entity->{$fieldName} = array();
      }

      // Figure out the designated class for this field type, which is used by
      // the Serializer to determine which Denormalizer to use.
      // @todo Is there a better way to get the field type's associated class?
      $fieldItemClass = get_class($entity->get($fieldName)->offsetGet(0));

      // Iterate through the language keyed values and add them to the entity.
      // The vnd.drupal.ld+json mime type will always use language keys, per
      // http://drupal.org/node/1838700.
      foreach ($incomingFieldValues as $langcode => $incomingFieldItems) {
        $fieldValue = $this->serializer->denormalize($incomingFieldItems, $fieldItemClass, $format);
        $entity->getTranslation($langcode)
          ->set($fieldName, $fieldValue);
      }
    }
    return $entity;
  }

  /**
   * Determine whether incoming data contains translated content.
   *
   * @param array $data
   *   The incoming data.
   *
   * @return bool
   *   Whether or not this data contains translated content.
   */
||||||||  public function denormalize($data, $class, $format = null) {
    if (!isset($data['@type'])) {
      throw new UnexpectedValueException('JSON-LD @type parameter must be included.');
    }

    // Every bundle has a type, identified by URI. The incoming data should
    // either include a type URI from this site's schema, or one of the type
    // URIs in the incoming data must map to a site schema URI when passed
    // through the RDF mapping manager.
    $type_uris = is_array($data['@type']) ? $data['@type'] : array($data['@type']);
    // If the RDF mapping manager can find a match to a site schema URI, it
    // will return the corresponding Typed Data ids. Otherwise, throw an
    // exception.
    // @todo The @types might be CURIEs or aliases. Expand before trying to map.
    try {
      $typed_data_ids = $this->rdfMappingManager->getTypedDataIdsFromTypeUris($type_uris);
    }
    catch (RdfMappingException $e) {
      throw new UnexpectedValueException($e->getMessage(), 0, $e);
    }

    $values = array(
      'type' => $typed_data_ids['bundle'],
    );
    // If the data specifies a default language, use it to create the entity.
    if (isset($data['langcode'])) {
      $values['langcode'] = $data['langcode'][LANGUAGE_NOT_SPECIFIED][0]['value'];
    }
    // Otherwise, if the default language is not specified but there are
    // translations of field values, explicitly set the entity's default
    // language to the site's default language. This is required to enable
    // field translation on this entity.
    else if ($this->containsTranslation($data)) {
      $values['langcode'] = language(LANGUAGE_TYPE_CONTENT)->langcode;
    }
    $entity = entity_create($typed_data_ids['entity_type'], $values);
    // Make sure all empty entity fields default to NULL, so that afterwards it
    // is possible to determine which fields were part of the data (even if they
    // are empty).
    foreach ($entity as $name => $field) {
      if ($field->isEmpty()) {
        $field->setValue(NULL);
      }
    }

    // For each attribute in the JSON-LD, add the values as fields to the newly
    // created entity. It is assumed that the JSON attribute names are the same
    // as the site's field names.
    // @todo Possibly switch to URI expansion of attribute names.
    foreach ($data as $fieldName => $incomingFieldValues) {
      // Skip the JSON-LD specific terms, which start with '@'.
      if ($fieldName[0] === '@') {
        continue;
      }
      // If the incoming value is an empty array we set the property to mark it
      // for deletion.
      if (empty($incomingFieldValues) && is_array($incomingFieldValues)) {
        $entity->{$fieldName} = array();
      }

      // Figure out the designated class for this field type, which is used by
      // the Serializer to determine which Denormalizer to use.
      // @todo Is there a better way to get the field type's associated class?
      $fieldItemClass = get_class($entity->get($fieldName)->offsetGet(0));

      // Iterate through the language keyed values and add them to the entity.
      // The vnd.drupal.ld+json mime type will always use language keys, per
      // http://drupal.org/node/1838700.
      foreach ($incomingFieldValues as $langcode => $incomingFieldItems) {
        $fieldValue = $this->serializer->denormalize($incomingFieldItems, $fieldItemClass, $format);
        $entity->getTranslation($langcode)
          ->set($fieldName, $fieldValue);
      }
    }
    return $entity;
  }

  /**
   * Determine whether incoming data contains translated content.
   *
   * @param array $data
   *   The incoming data.
   *
   * @return bool
   *   Whether or not this data contains translated content.
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (NULL)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)
                                (AST_VAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST))
                            (SCALAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_PROP
                                    (AST_CALL
                                        (
                                            (AST_CONST)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_ARRAY)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (
                                (SCALAR))))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (NULL)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)
                                (AST_VAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST))
                            (SCALAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_PROP
                                    (AST_CALL
                                        (
                                            (AST_CONST)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_ARRAY)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (
                                (SCALAR))))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))