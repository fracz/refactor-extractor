||||||||  protected function describeException($exception) {
    return get_class($exception) .": ". $exception->getMessage();
  }
}

/**
 *    Stores expected exceptions for when they
 *    get thrown. Saves the irritating try...catch
 *    block.
 *    @package  SimpleTest
 *    @subpackage  UnitTester
 */
class SimpleExceptionTrap {
  private$expected;
  private$message;

  /**
   *    Clears down the queue ready for action.
   */
  function __construct() {
    $this->clear();
  }

  /**
   *    Sets up an expectation of an exception.
   *    This has the effect of intercepting an
   *    exception that matches.
   *    @param SimpleExpectation $expected    Expected exception to match.
   *    @param string $message                Message to display.
   *    @access public
   */
  function expectException($expected = false, $message = '%s') {
    if ($expected === false) {
      $expected = new AnythingExpectation();
    }
    if (!SimpleExpectation::isExpectation($expected)) {
      $expected = new ExceptionExpectation($expected);
    }
    $this->expected = $expected;
    $this->message = $message;
  }

  /**
   *    Compares the expected exception with any
   *    in the queue. Issues a pass or fail and
   *    returns the state of the test.
   *    @param SimpleTestCase $test    Test case to send messages to.
   *    @param Exception $exception    Exception to compare.
   *    @return boolean                False on no match.
   */
  function isExpected($test, $exception) {
    if ($this->expected) {
      return $test->assert($this->expected, $exception, $this->message);
    }
    return false;
  }

  /**
   *    Tests for any left over exception.
   *    @return string/false     The failure message or false if none.
   */
  function getOutstanding() {
    return sprintf($this->message, 'Failed to trap exception');
  }

  /**
   *    Discards the contents of the error queue.
   */
  function clear() {
    $this->expected = false;
    $this->message = false;
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR)))))