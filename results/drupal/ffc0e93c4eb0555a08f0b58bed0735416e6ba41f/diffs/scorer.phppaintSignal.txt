||||||||  function paintSignal($type, $payload) {}
}

/**
 *    Recipient of generated test messages that can display
 *    page footers and headers. Also keeps track of the
 *    test nesting. This is the main base class on which
 *    to build the finished test (page based) displays.
 *    @package SimpleTest
 *    @subpackage UnitTester
 */
class SimpleReporter extends SimpleScorer {
  var$_test_stack;
  var$_size;
  var$_progress;

  /**
   *    Starts the display with no results in.
   *    @access public
   */
  function SimpleReporter() {
    $this->SimpleScorer();
    $this->_test_stack = array();
    $this->_size       = null;
    $this->_progress   = 0;
  }

  /**
   *    Gets the formatter for variables and other small
   *    generic data items.
   *    @return SimpleDumper          Formatter.
   *    @access public
   */
  function getDumper() {
    return new SimpleDumper();
  }

  /**
   *    Paints the start of a group test. Will also paint
   *    the page header and footer if this is the
   *    first test. Will stash the size if the first
   *    start.
   *    @param string $test_name   Name of test that is starting.
   *    @param integer $size       Number of test cases starting.
   *    @access public
   */
  function paintGroupStart($test_name, $size) {
    if (!isset($this->_size)) {
      $this->_size = $size;
    }
    if (count($this->_test_stack) == 0) {
      $this->paintHeader($test_name);
    }
    $this->_test_stack[] = $test_name;
  }

  /**
   *    Paints the end of a group test. Will paint the page
   *    footer if the stack of tests has unwound.
   *    @param string $test_name   Name of test that is ending.
   *    @param integer $progress   Number of test cases ending.
   *    @access public
   */
  function paintGroupEnd($test_name) {
    array_pop($this->_test_stack);
    if (count($this->_test_stack) == 0) {
      $this->paintFooter($test_name);
    }
  }

  /**
   *    Paints the start of a test case. Will also paint
   *    the page header and footer if this is the
   *    first test. Will stash the size if the first
   *    start.
   *    @param string $test_name   Name of test that is starting.
   *    @access public
   */
  function paintCaseStart($test_name) {
    if (!isset($this->_size)) {
      $this->_size = 1;
    }
    if (count($this->_test_stack) == 0) {
      $this->paintHeader($test_name);
    }
    $this->_test_stack[] = $test_name;
  }

  /**
   *    Paints the end of a test case. Will paint the page
   *    footer if the stack of tests has unwound.
   *    @param string $test_name   Name of test that is ending.
   *    @access public
   */
  function paintCaseEnd($test_name) {
    $this->_progress++;
    array_pop($this->_test_stack);
    if (count($this->_test_stack) == 0) {
      $this->paintFooter($test_name);
    }
  }

  /**
   *    Paints the start of a test method.
   *    @param string $test_name   Name of test that is starting.
   *    @access public
   */
  function paintMethodStart($test_name) {
    $this->_test_stack[] = $test_name;
  }

  /**
   *    Paints the end of a test method. Will paint the page
   *    footer if the stack of tests has unwound.
   *    @param string $test_name   Name of test that is ending.
   *    @access public
   */
  function paintMethodEnd($test_name) {
    array_pop($this->_test_stack);
  }

  /**
   *    Paints the test document header.
   *    @param string $test_name     First test top level
   *                                 to start.
   *    @access public
   *    @abstract
   */
  function paintHeader($test_name) {}

  /**
   *    Paints the test document footer.
   *    @param string $test_name        The top level test.
   *    @access public
   *    @abstract
   */
  function paintFooter($test_name) {}

  /**
   *    Accessor for internal test stack. For
   *    subclasses that need to see the whole test
   *    history for display purposes.
   *    @return array     List of methods in nesting order.
   *    @access public
   */
  function getTestList() {
    return $this->_test_stack;
  }

  /**
   *    Accessor for total test size in number
   *    of test cases. Null until the first
   *    test is started.
   *    @return integer   Total number of cases at start.
   *    @access public
   */
  function getTestCaseCount() {
    return $this->_size;
  }

  /**
   *    Accessor for the number of test cases
   *    completed so far.
   *    @return integer   Number of ended cases.
   *    @access public
   */
  function getTestCaseProgress() {
    return $this->_progress;
  }

  /**
   *    Static check for running in the comand line.
   *    @return boolean        True if CLI.
   *    @access public
   *    @static
   */
  function inCli() {
    return php_sapi_name() == 'cli';
  }
}

/**
 *    For modifying the behaviour of the visual reporters.
 *    @package SimpleTest
 *    @subpackage UnitTester
 */
class SimpleReporterDecorator {
  var $_reporter;

  /**
   *    Mediates between the reporter and the test case.
   *    @param SimpleScorer $reporter       Reporter to receive events.
   */
  function __construct(&$reporter) {
    $this->_reporter = &$reporter;
  }

  function __call($method, $arguments) {
    if (method_exists($this->_reporter, $method)) {
      return call_user_func_array($this->_reporter->$method, $arguments);
    }
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)