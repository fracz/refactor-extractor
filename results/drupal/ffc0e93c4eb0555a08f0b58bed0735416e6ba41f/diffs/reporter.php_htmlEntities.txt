||||||||  function _htmlEntities($message) {
    return htmlentities($message, ENT_COMPAT, $this->_character_set);
  }
}

/**
 *    Sample minimal test displayer. Generates only
 *    failure messages and a pass count. For command
 *    line use. I've tried to make it look like JUnit,
 *    but I wanted to output the errors as they arrived
 *    which meant dropping the dots.
 *    @package SimpleTest
 *    @subpackage UnitTester
 */
class TextReporter extends SimpleReporter {

  /**
   *    Does nothing yet. The first output will
   *    be sent on the first test start.
   *    @access public
   */
  function TextReporter() {
    $this->SimpleReporter();
  }

  /**
   *    Paints the title only.
   *    @param string $test_name        Name class of test.
   *    @access public
   */
  function paintHeader($test_name) {
    if (!SimpleReporter::inCli()) {
      header('Content-type: text/plain');
    }
    print "$test_name\n";
    flush();
  }

  /**
   *    Paints the end of the test with a summary of
   *    the passes and failures.
   *    @param string $test_name        Name class of test.
   *    @access public
   */
  function paintFooter($test_name) {
    if ($this->getFailCount() + $this->getExceptionCount() == 0) {
      print "OK\n";
    }
    else {
      print "FAILURES!!!\n";
    }
    print "Test cases run: ". $this->getTestCaseProgress() ."/". $this->getTestCaseCount() .", Passes: ". $this->getPassCount() .", Failures: ". $this->getFailCount() .", Exceptions: ". $this->getExceptionCount() ."\n";
  }

  /**
   *    Paints the test failure as a stack trace.
   *    @param string $message    Failure message displayed in
   *                              the context of the other tests.
   *    @access public
   */
  function paintFail($message) {
    parent::paintFail($message);
    print $this->getFailCount() .") $message\n";
    $breadcrumb = $this->getTestList();
    array_shift($breadcrumb);
    print "\tin ". implode("\n\tin ", array_reverse($breadcrumb));
    print "\n";
  }

  /**
   *    Paints a PHP error or exception.
   *    @param string $message        Message to be shown.
   *    @access public
   *    @abstract
   */
  function paintError($message) {
    parent::paintError($message);
    print "Exception ". $this->getExceptionCount() ."!\n$message\n";
    $breadcrumb = $this->getTestList();
    array_shift($breadcrumb);
    print "\tin ". implode("\n\tin ", array_reverse($breadcrumb));
    print "\n";
  }

  /**
   *    Paints a PHP error or exception.
   *    @param Exception $exception      Exception to describe.
   *    @access public
   *    @abstract
   */
  function paintException($exception) {
    parent::paintException($exception);
    $message = 'Unexpected exception of type ['. get_class($exception) .'] with message ['. $exception->getMessage() .'] in ['. $exception->getFile() .' line '. $exception->getLine() .']';
    print "Exception ". $this->getExceptionCount() ."!\n$message\n";
    $breadcrumb = $this->getTestList();
    array_shift($breadcrumb);
    print "\tin ". implode("\n\tin ", array_reverse($breadcrumb));
    print "\n";
  }

  /**
   *    Prints the message for skipping tests.
   *    @param string $message    Text of skip condition.
   *    @access public
   */
  function paintSkip($message) {
    parent::paintSkip($message);
    print "Skip: $message\n";
  }

  /**
   *    Paints formatted text such as dumped variables.
   *    @param string $message        Text to show.
   *    @access public
   */
  function paintFormattedMessage($message) {
    print "$message\n";
    flush();
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)
                (AST_PROP
                    (AST_VAR))))))