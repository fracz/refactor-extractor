||||||||	protected function registerDeferredProvider($provider, $service = null)
	{
		$this->register($instance = new $provider($this));

		// Once the provider that provides the deferred service has been registered we
		// will remove it from our local list of the deferred services with related
		// providers so that this container does not try to resolve it out again.
		if ($service) unset($this->deferredServices[$service]);

		$this->setupDeferredBoot($instance);
	}

	/**
	 * Handle the booting of a deferred service provider.
	 *
	 * @param  \Illuminate\Support\ServiceProvider  $instance
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_UNSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))