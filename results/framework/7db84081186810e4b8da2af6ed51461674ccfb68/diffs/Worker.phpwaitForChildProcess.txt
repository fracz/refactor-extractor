    protected function waitForChildProcess($processId, $timeout)
    {
        declare(ticks=1) {
            pcntl_signal(SIGALRM, function () use ($processId) {
                posix_kill($processId, SIGKILL);

                if ($this->exceptions) {
                    $this->exceptions->report(new Exception('Daemon queue child process timed out.'));
                }
            }, true);

            pcntl_alarm($timeout);

            pcntl_waitpid($processId, $status);

            pcntl_alarm(0);
        }
    }

    /**
     * Process the next job on the queue.
     *
     * @param  string  $connectionName
     * @param  string  $queue
     * @param  int     $delay
     * @param  int     $sleep
     * @param  int     $maxTries
     * @return void
     */
||||||||    protected function waitForChildProcess($processId, $timeout)
    {
        declare(ticks=1) {
            pcntl_signal(SIGALRM, function () use ($processId) {
                posix_kill($processId, SIGKILL);

                $this->exceptions->report(new Exception('Queue child process timed out.'));
            }, true);

            pcntl_alarm($timeout);

            pcntl_waitpid($processId, $status);

            pcntl_alarm(0);
        }
    }

    /**
     * Process the next job on the queue.
     *
     * @param  string  $connectionName
     * @param  string  $queue
     * @param  WorkerOptions  $options
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_DECLARE
        (AST_CONST_DECL
            (AST_CONST_ELEM
                (SCALAR)))
        (
            (AST_CALL
                (
                    (AST_CONST)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_CONST)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_NEW
                                                    (
                                                        (SCALAR))))))))))
                    (AST_CONST)))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_CALL
                (
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_DECLARE
        (AST_CONST_DECL
            (AST_CONST_ELEM
                (SCALAR)))
        (
            (AST_CALL
                (
                    (AST_CONST)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_CONST)))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_NEW
                                        (
                                            (SCALAR)))))))
                    (AST_CONST)))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_CALL
                (
                    (SCALAR))))))