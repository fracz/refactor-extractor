    public function expectsEvents($events)
    {
        $events = is_array($events) ? $events : func_get_args();

        $mock = Mockery::spy('Illuminate\Contracts\Events\Dispatcher');

        $mock->shouldReceive('fire')->andReturnUsing(function ($called) use (&$events) {
            foreach ($events as $key => $event) {
                if ((is_string($called) && $called === $event) ||
                    (is_string($called) && is_subclass_of($called, $event)) ||
                    (is_object($called) && $called instanceof $event)) {
                    unset($events[$key]);
                }
            }
        });

        $this->beforeApplicationDestroyed(function () use (&$events) {
            if ($events) {
                throw new Exception(
                    'The following events were not fired: ['.implode(', ', $events).']'
                );
            }
        });

        $this->app->instance('events', $mock);

        return $this;
    }

    /**
     * Mock the event dispatcher so all events are silenced.
     *
     * @return $this
     */
||||||||    public function expectsEvents($events)
    {
        $events = is_array($events) ? $events : func_get_args();

        $this->withoutEvents();

        $this->beforeApplicationDestroyed(function () use ($events) {
            $fired = $this->filterFiredEvents($events);

            $eventsNotFired = array_diff($events, $fired);

            if ($eventsNotFired) {
                throw new Exception(
                    'The following events were not fired: ['.implode(', ', $eventsNotFired).']'
                );
            }
        });

        return $this;
    }

    /**
     * Specify a list of events that should not be fired for the given operation.
     *
     * These events will be mocked, so that handlers will not actually be executed.
     *
     * @param  array|string  $events
     * @return $this
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_VAR)))
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR)))))
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (AST_INSTANCEOF
                                                (AST_VAR)
                                                (AST_VAR))))
                                    (
                                        (AST_UNSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_VAR))))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_VAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (SCALAR)
                                                            (AST_VAR))))
                                                (SCALAR))))))))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_VAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (SCALAR)
                                                            (AST_VAR))))
                                                (SCALAR))))))))))))
    (AST_RETURN
        (AST_VAR)))