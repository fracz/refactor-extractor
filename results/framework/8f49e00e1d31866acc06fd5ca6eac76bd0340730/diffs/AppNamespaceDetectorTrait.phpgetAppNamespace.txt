	protected function getAppNamespace()
	{
		$composer = json_decode(file_get_contents(base_path().'/composer.json'), true);

		foreach ((array) data_get($composer, 'autoload.psr-4') as $namespace => $path)
		{
			foreach ((array) $path as $pathChoice)
			{
				if (realpath(app_path()) == realpath(base_path().'/'.$pathChoice)) return $namespace;
			}
		}

		throw new RuntimeException("Unable to detect application namespace.");
	}

}||||||||	protected function getAppNamespace()
	{
		$kernelContract = app()->runningInConsole() ? 'Illuminate\Contracts\Console\Kernel' : 'Illuminate\Contracts\Http\Kernel';
		$kernelFullClassName = get_class(app($kernelContract));

		return strtok($kernelFullClassName, '\\').'\\';
	}

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CALL)
                            (SCALAR))))
                (AST_CONST))))
    (AST_FOREACH
        (AST_CAST
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR))))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_FOREACH
                (AST_CAST
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_CALL)))
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_CALL)
                                                (SCALAR))
                                            (AST_VAR)))))
                            (
                                (AST_RETURN
                                    (AST_VAR)))))))))
    (AST_THROW
        (AST_NEW
            (
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_CALL))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR))))