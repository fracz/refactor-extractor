    public function testCustomPresenter()
    {
        $p = new LengthAwarePaginator([], 1, 1, 1);
        $presenter = m::mock('StdClass');
        AbstractPaginator::presenter(function () use ($presenter) {
            return $presenter;
        });
        $presenter->shouldReceive('render')->andReturn('presenter');

        $this->assertEquals('presenter', $p->render());

        AbstractPaginator::presenter(function () {
            //
        });
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CLOSURE
                (NULL)))))||||||||