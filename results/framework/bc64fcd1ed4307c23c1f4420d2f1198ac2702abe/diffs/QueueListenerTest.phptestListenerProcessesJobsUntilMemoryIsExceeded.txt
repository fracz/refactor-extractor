	public function testListenerProcessesJobsUntilMemoryIsExceeded()
	{
		$l = m::mock('Illuminate\Queue\Listener[process,memoryExceeded,stop]');
		$l->setManager(m::mock('Illuminate\Queue\QueueManager'));
		$l->getManager()->shouldReceive('connection')->with('foo')->andReturn($queue = m::mock('StdClass'));
		$queue->shouldReceive('pop')->twice()->with('queue')->andReturn($job = m::mock('Illuminate\Queue\Jobs\Job'));
		$l->shouldReceive('process')->twice()->with($job, 1);
		$l->shouldReceive('memoryExceeded')->with(128)->andReturn(false, true);
		$l->shouldReceive('stop')->once();

		$l->listen('foo', 'queue', 1, 128);
	}


||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (SCALAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_CONST)
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR))))||||||||