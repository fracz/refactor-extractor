	public function fromDateTime($value)
	{
		$format = $this->getDateFormat();

		// If the value is already a DateTime instance, we will just skip the rest of
		// these checks since they will be a waste of time, and hinder performance
		// when checking the field. We will just return the DateTime right away.
		if ($value instanceof DateTime)
		{
			//
		}

		// If the value is totally numeric, we will assume it is a UNIX timestamp and
		// format the date as such. Once we have the date in DateTime form we will
		// format it according to the proper format for the database connection.
		elseif (is_numeric($value))
		{
			$value = Carbon::createFromTimestamp($value);
		}

		// If the value is in simple year, month, day format, we will format it using
		// that setup. This is for simple "date" fields which do not have hours on
		// the field. This conveniently picks up those dates and format correct.
		elseif (preg_match('/^(\d{4})-(\d{2})-(\d{2})$/', $value))
		{
			$value = Carbon::createFromFormat('Y-m-d', $value)->startOfDay();
		}

		// If this value is some other type of string, we'll create the DateTime with
		// the format used by the database connection. Once we get the instance we
		// can return back the finally formatted DateTime instances to the devs.
		else
		{
			$value = Carbon::createFromFormat($format, $value);
		}

		return $value->format($format);
	}

	/**
	 * Return a timestamp as DateTime object.
	 *
	 * @param  mixed  $value
	 * @return \Carbon\Carbon
	 */
||||||||	public function fromDateTime($value)
	{
		$format = $this->getDateFormat();

		$value = $this->asDateTime($value);

		return $value->format($format);
	}

	/**
	 * Return a timestamp as DateTime object.
	 *
	 * @param  mixed  $value
	 * @return \Carbon\Carbon
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR)))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))