	public function handle($exception, $fromConsole = false)
	{
		foreach ($this->handlers as $handler)
		{
			// If this exception handler does not handle the given exception, we will
			// just go the next one. A Handler may type-hint the exception that it
			// will handle, allowing for more granularity on the error handling.
			if ( ! $this->handlesException($handler, $exception))
			{
				continue;
			}

			if ($exception instanceof HttpExceptionInterface)
			{
				$code = $exception->getStatusCode();
			}

			// If the exception doesn't implement the HttpExceptionInterface we will
			// just use the generic 500 error code for a server side error. If it
			// implements the Http interface we'll grab the error code from it.
			else
			{
				$code = 500;
			}

			// We will wrap this handler in a try / catch and avoid white screens of
			// death if any exceptions are thrown from a handler itself. This way
			// we will at least log some errors, and avoid errors with no data.
			try
			{
				$response = $handler($exception, $code, $fromConsole);
			}
			catch (\Exception $e)
			{
				$response = $this->formatException($e);
			}

			// If the handler returns a "non-null" response, we will return it so it
			// will get sent back to the browsers. Once a handler returns a valid
			// response we will cease iterating and calling the other handlers.
			if (isset($response) and ! is_null($response))
			{
				return $response;
			}
		}
	}

	/**
	 * Determine if the given handler handles this exception.
	 *
	 * @param  Closure    $handler
	 * @param  Exception  $exception
	 * @return bool
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (NULL))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (
                        (AST_RETURN
                            (AST_VAR))))))))||||||||