	protected function createBundleConfig()
	{
		$baseUrl = '';
		//$baseUrl = '/test';
		$bundles = array(
			'app' => array(
				'basePath' => $this->testFilePath,
				'baseUrl' => $baseUrl,
				'css' => array(
					'css/test.css',
				),
				'js' => array(
					'js/test.js',
				),
				/*'depends' => array(
					'yii',
				),*/
			),
		);
		return $bundles;
	}

	/**
	 * Creates test bundles configuration file.
	 * @param string $fileName output filename.
	 * @return boolean success.
	 */
||||||||	protected function createBundleConfig(array $bundles)
	{
		foreach ($bundles as $name => $config) {
			if (!array_key_exists('basePath', $config)) {
				$bundles[$name]['basePath'] = $this->testFilePath;
			}
			if (!array_key_exists('baseUrl', $config)) {
				$bundles[$name]['baseUrl'] = '';
			}
		}
		return $bundles;
	}

	/**
	 * Creates test bundles configuration file.
	 * @param string $fileName output filename.
	 * @param array[] $bundles asset bundles config.
	 * @throws Exception on failure.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR)))
                (SCALAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))