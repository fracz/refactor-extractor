    public function ufInteger($value){
        if ($value === null) {
            return null;
        }
        $value = $this->unformatNumber($value, 'int');
        return round($value , 0);
    }

    /**
     * Formats the value as a double number.
     * Property [[decimalSeparator]] will be used to represent the decimal point. The
     * value is rounded automatically to the defined decimal digits.
     *
     * PHP and ICU has different behaviour about number of zeros in fraction digits.
     * PHP fills up to defined decimals (eg. 2.500000 [6]) while ICU hide unnecessary digits.
     * (eg. 2.5 [6]). Until 5 fractional digits in this function is defined to 5 up with zeros.
     *
     * @param mixed $value the value to be formatted
     * @param integer or string $decimals the number of digits after the decimal point if the value is an integer
     *          otherwise it's is a format pattern string (this works only with intl [icu]).
     * @param float $roundIncr Amount to which smaller fractation are rounded. Ex. 0.05 -> <=2.024 to 2.00 / >=2.025 to 2.05
     *          works with "intl" library only.
     * @param boolean $grouping Per standard numbers are grouped in thousands. False = no grouping
     * @return string the formatting result.
     * @see decimalSeparator
     * @see thousandSeparator
     */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)))))||||||||