    public function getFormatPattern($formatFor = 'date', $patternFor = 'php') {
        $formatFor = strtolower($formatFor);
        $patternFor = strtolower($patternFor);

        if ($patternFor === 'php' or $patternFor === 'icu'){
            switch ($formatFor) {
                case 'date':
                    return $patternFor === 'php' ? $this->dateFormat : $this->_dateFormatIcu;
                    break;
                case 'time':
                    return $patternFor === 'php' ? $this->timeFormat : $this->_timeFormatIcu;
                    break;
                case 'datetime':
                    return $patternFor === 'php' ? $this->datetimeFormat : $this->_datetimeFormatIcu;
                    break;
                default:
                throw new \yii\base\InvalidParamException('Parameter "formatFor" is \''. $formatFor . '\'. Valid is date, time or datetime.');
            }
        } else {
                throw new \yii\base\InvalidParamException('Paramter "patternFor" is \'' .$patternFor. '\'. Valid is "php" or "icu".');
        }
    }

    /**
     * Sets a new date or time or datetime format and converts it from php to icu or versa.
     * @param string $format: Formatting pattern like 'd-m-Y' (php) or 'dd-mm-yyyy' icu.
     * @param string $formatFor: Specifies which target is newly formated. Option are: date, time or datetime.
     * @param string $patternFor: Specifies which pattern standard is use. PHP is standard.
     * @return Formatter object for chaining.
     * @throws \yii\base\InvalidParamException
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_SWITCH
                    (AST_VAR)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_RETURN
                                    (AST_CONDITIONAL
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_RETURN
                                    (AST_CONDITIONAL
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_RETURN
                                    (AST_CONDITIONAL
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (NULL)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (SCALAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))))))))||||||||