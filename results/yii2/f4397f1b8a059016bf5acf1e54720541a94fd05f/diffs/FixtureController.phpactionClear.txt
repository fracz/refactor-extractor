	public function actionClear($table)
	{
		$this->getDbConnection()->createCommand()->truncateTable($table)->execute();
		echo "Table \"{$table}\" was successfully cleared. \n";
	}

	/**
	 * Checks if the database and fixtures path are available.
	 * @throws Exception
	 */
||||||||	public function actionClear(array $tables)
	{
		if (!$this->confirmClear($tables)) {
			return;
		}

		foreach($tables as $table) {
			$this->getDbConnection()->createCommand()->truncateTable($table)->execute();
			$this->stdout("Table \"{$table}\" was successfully cleared. \n", Console::FG_GREEN);
		}
	}

	/**
	 * Checks if the database and fixtures path are available.
	 * @throws Exception
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_VAR))))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR)))))))