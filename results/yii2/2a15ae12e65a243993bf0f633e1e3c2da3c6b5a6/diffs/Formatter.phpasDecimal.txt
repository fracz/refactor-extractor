    public function asDecimal($value, $decimals = null, $roundIncr = null, $grouping = true)
    {
        return $this->asDouble($value, $decimals, $roundIncr, $grouping);
    }

    /**
     * Formats the value as a double number.
     * Property [[decimalSeparator]] will be used to represent the decimal point. The
     * value is rounded automatically to the defined decimal digits.
     *
     * PHP and ICU has different behaviour about number of zeros in fraction digits.
     * PHP fills up to defined decimals (eg. 2.500000 [6]) while ICU hide unnecessary digits.
     * (eg. 2.5 [6]). Until 5 fractional digits in this function is defined to 5 up with zeros.
     *
     * @param mixed $value the value to be formatted
     * @param integer or string $decimals the number of digits after the decimal point if the value is an integer
     *          otherwise it's is a format pattern string (this works only with intl [icu]).
     * @param float $roundIncr Amount to which smaller fractation are rounded. Ex. 0.05 -> <=2.024 to 2.00 / >=2.025 to 2.05
     *          works with "intl" library only.
     * @param boolean $grouping Per standard numbers are grouped in thousands. False = no grouping
     * @return string the formatting result.
     * @see decimalSeparator
     * @see thousandSeparator
     */
||||||||    public function asDecimal($value, $decimals = 2)
    {
        if ($value === null) {
            return $this->nullDisplay;
        }
        $value = $this->normalizeNumericValue($value);

        if ($this->_intlLoaded) {
            $f = $this->createNumberFormatter(NumberFormatter::DECIMAL);
//            if ($decimals !== null){
//                $f->setAttribute(NumberFormatter::MAX_FRACTION_DIGITS, $decimals);
//                if ($decimals <= 5){
//                    $f->setAttribute(NumberFormatter::MIN_FRACTION_DIGITS, $decimals);
//                }
//            }
//            if ($roundIncr == null and $this->roundingIncrement != null){
//                $roundIncr = $this->roundingIncrement;
//            }
//            if ($roundIncr != null){
//                $f->setAttribute(NumberFormatter::ROUNDING_INCREMENT, $roundIncr);
//            }
//            if ($grouping === false){
//                $f->setAttribute(NumberFormatter::GROUPING_USED, false);
//            }
            return $f->format($value);
        } else {

//            if ($roundIncr !== null){
//                $part = explode('.', (string)$roundIncr);
//                if ((string)$roundIncr != '0.05'){  // exception for Swiss rounding.
//                    $roundIncr = $decimals;
//                    if (intval($part[0]) > 0){
//                        if (substr($part[0], 0, 1) === '1'){
//                            $roundIncr = (strlen($part[0]) -1) * -1 ;
//                        } else {
//                            throw new InvalidParamException('$roundIncr must have "1" only eg. 0.01 or 10 but not 0.02 or 20');
//                        }
//                    } elseif (isset($part[1]) and intval($part[1])>0) {
//                        if (substr($part[1], -1) === '1'){
//                            $roundIncr = strlen($part[1]);
//                        } else {
//                            throw new InvalidParamException('$roundIncr must have "1" only eg. 0.01 or 10 but not 0.02 or 20');
//                        }
//                    }
//                    $value = round($value, $roundIncr);
//                } else {
//                    $value = round($value/5,2)*5;
//                }
//            }
//            if ($decimals === null){
//                $decimals = 0;
//            }
//            $grouping = $grouping === true ? $this->thousandSeparator : '';
            return number_format($value, $decimals, $this->decimalSeparator, $this->thousandSeparator);
        }
    }


    /**
     * Formats the value as a percent number with "%" sign.
     * @param mixed $value the value to be formatted. It must be a factor eg. 0.75 -> 75%
//     * @param string $format Number of decimals (default = 2) or format pattern ICU
//     * Please refer to [ICU manual](http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)
//     * for details on how to specify a format.
     * @param int $decimals
//     * @param bool $grouping
     * @return string the formatted result.
     * @throws InvalidParamException if the input value is not numeric.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))))))))