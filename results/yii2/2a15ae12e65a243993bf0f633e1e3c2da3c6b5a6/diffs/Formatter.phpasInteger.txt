    public function asInteger($value, $grouping = true) {
        $format = null;

        if ($value === null) {
            return $this->nullDisplay;
        }
        if (is_string($value)) {
            $value = (float) $value;
        }
        $value = round($value, 0);

        if ($this->_intlLoaded){
            $f = $this->createNumberFormatter(NumberFormatter::DECIMAL, $format);
            if ($grouping === false){
                $f->setAttribute(NumberFormatter::GROUPING_USED, false);
            }
            return $f->format($value, NumberFormatter::TYPE_INT64);
        } else {
            $grouping = $grouping === true ? $this->thousandSeparator : '';
            return number_format($value, 0, $this->decimalSeparator, $grouping);

        }
    }

    /**
     * Formats the value as a number with decimal and thousand separators.
     * This method is a synomym for asDouble.
     * @param mixed $value the value to be formatted
     * @param integer $decimals the number of digits after the decimal point
     * @return string the formatted result
     * @see decimalSeparator
     * @see thousandSeparator
     */
||||||||    public function asInteger($value) // TODO customizing
    {
        if ($value === null) {
            return $this->nullDisplay;
        }
        $value = $this->normalizeNumericValue($value);
        if ($this->_intlLoaded) {
            $f = $this->createNumberFormatter(NumberFormatter::DECIMAL);
            return $f->format($value, NumberFormatter::TYPE_INT64);
        } else {
            return number_format((int) $value, 0, $this->decimalSeparator, $this->thousandSeparator);
        }
    }

    /**
     * Formats the value as a decimal number.
     *
     * Property [[decimalSeparator]] will be used to represent the decimal point. The
     * value is rounded automatically to the defined decimal digits.
     *
     * PHP and ICU has different behaviour about number of zeros in fraction digits.
     * PHP fills up to defined decimals (eg. 2.500000 [6]) while ICU hide unnecessary digits.
     * (eg. 2.5 [6]). Until 5 fractional digits in this function is defined to 5 up with zeros.
     *
     * @param mixed $value the value to be formatted
     * @param integer|string $decimals the number of digits after the decimal point if the value is an integer
     *          otherwise it's is a format pattern string (this works only with [PHP intl extension](http://php.net/manual/en/book.intl.php) [icu]).
//     * @param float $roundIncr Amount to which smaller fractation are rounded. Ex. 0.05 -> <=2.024 to 2.00 / >=2.025 to 2.05
//     *          works with [PHP intl extension](http://php.net/manual/en/book.intl.php) library only.
//     * @param boolean $grouping Per standard numbers are grouped in thousands. False = no grouping
     * @return string the formatting result.
     * @throws InvalidParamException if the input value is not numeric.
     * @see decimalSeparator
     * @see thousandSeparator
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_CONST))))))
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CAST
                                (AST_VAR))
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))))))))