	public function aggregate($pipeline, $pipelineOperator = [])
	{
		$token = 'Aggregating from ' . $this->getFullName();
		Yii::info($token, __METHOD__);
		Yii::beginProfile($token, __METHOD__);
		$args = func_get_args();
		$result = call_user_func_array([$this->mongoCollection, 'aggregate'], $args);
		Yii::endProfile($token, __METHOD__);
		return $result;
	}

	/**
	 * Performs aggregation using Mongo "group" command.
	 * @param mixed $keys fields to group by. If an array or non-code object is passed,
	 * it will be the key used to group results. If instance of [[\MongoCode]] passed,
	 * it will be treated as a function that returns the key to group by.
	 * @param array $initial Initial value of the aggregation counter object.
	 * @param \MongoCode|string $reduce function that takes two arguments (the current
	 * document and the aggregation to this point) and does the aggregation.
	 * Argument will be automatically cast to [[\MongoCode]].
	 * @param array $options optional parameters to the group command. Valid options include:
	 *  - condition - criteria for including a document in the aggregation.
	 *  - finalize - function called once per unique key that takes the final output of the reduce function.
	 * @return array the result of the aggregation.
	 * @see http://docs.mongodb.org/manual/reference/command/group/
	 * @throws Exception on failure.
	 */
||||||||	public function aggregate($pipeline, $pipelineOperator = [])
	{
		$token = 'Aggregating from ' . $this->getFullName();
		Yii::info($token, __METHOD__);
		try {
			Yii::beginProfile($token, __METHOD__);
			$args = func_get_args();
			$result = call_user_func_array([$this->mongoCollection, 'aggregate'], $args);
			$this->tryResultError($result);
			Yii::endProfile($token, __METHOD__);
			return $result['result'];
		} catch (\Exception $e) {
			Yii::endProfile($token, __METHOD__);
			throw new Exception($e->getMessage(), (int)$e->getCode(), $e);
		}
	}

	/**
	 * Performs aggregation using Mongo "group" command.
	 * @param mixed $keys fields to group by. If an array or non-code object is passed,
	 * it will be the key used to group results. If instance of [[\MongoCode]] passed,
	 * it will be treated as a function that returns the key to group by.
	 * @param array $initial Initial value of the aggregation counter object.
	 * @param \MongoCode|string $reduce function that takes two arguments (the current
	 * document and the aggregation to this point) and does the aggregation.
	 * Argument will be automatically cast to [[\MongoCode]].
	 * @param array $options optional parameters to the group command. Valid options include:
	 *  - condition - criteria for including a document in the aggregation.
	 *  - finalize - function called once per unique key that takes the final output of the reduce function.
	 * @return array the result of the aggregation.
	 * @throws Exception on failure.
	 * @see http://docs.mongodb.org/manual/reference/command/group/
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_TRY
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_MAGIC_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_MAGIC_CONST)))
            (AST_RETURN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_MAGIC_CONST)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)))))))
        (NULL)))