	public function execute($params = array())
	{
		$sql = $this->getSql();

		$this->_params = array_merge($this->_params, $params);
		if ($this->_params === array()) {
			$paramLog = '';
		} else {
			$paramLog = "\nParameters: " . var_export($this->_params, true);
		}

		\Yii::trace("Executing SQL: {$sql}{$paramLog}", __CLASS__);

		if ($sql == '') {
			return 0;
		}

		try {
			if ($this->db->enableProfiling) {
				\Yii::beginProfile(__METHOD__ . "($sql)", __CLASS__);
			}

			$this->prepare();
			if ($params === array()) {
				$this->pdoStatement->execute();
			} else {
				$this->pdoStatement->execute($params);
			}
			$n = $this->pdoStatement->rowCount();

			if ($this->db->enableProfiling) {
				\Yii::endProfile(__METHOD__ . "($sql)", __CLASS__);
			}
			return $n;
		} catch (\Exception $e) {
			if ($this->db->enableProfiling) {
				\Yii::endProfile(__METHOD__ . "($sql)", __CLASS__);
			}
			$message = $e->getMessage();

			\Yii::error("$message\nFailed to execute SQL: {$sql}{$paramLog}", __CLASS__);

			$errorInfo = $e instanceof \PDOException ? $e->errorInfo : null;
			throw new Exception($message, (int)$e->getCode(), $errorInfo);
		}
	}

	/**
	 * Executes the SQL statement and returns query result.
	 * This method is for executing a SQL query that returns result set, such as `SELECT`.
	 * @param array $params input parameters (name=>value) for the SQL execution. This is an alternative
	 * to [[bindValues()]]. Note that if you pass parameters in this way, any previous call to [[bindParam()]]
	 * or [[bindValue()]] will be ignored.
	 * @return DataReader the reader object for fetching the query result
	 * @throws Exception execution failed
	 */
||||||||	public function execute()
	{
		$sql = $this->getSql();

		if ($this->_params === array()) {
			$paramLog = '';
		} else {
			$paramLog = "\nParameters: " . var_export($this->_params, true);
		}

		\Yii::trace("Executing SQL: {$sql}{$paramLog}", __CLASS__);

		if ($sql == '') {
			return 0;
		}

		try {
			if ($this->db->enableProfiling) {
				\Yii::beginProfile(__METHOD__ . "($sql)", __CLASS__);
			}

			$this->prepare();
			$this->pdoStatement->execute();
			$n = $this->pdoStatement->rowCount();

			if ($this->db->enableProfiling) {
				\Yii::endProfile(__METHOD__ . "($sql)", __CLASS__);
			}
			return $n;
		} catch (\Exception $e) {
			if ($this->db->enableProfiling) {
				\Yii::endProfile(__METHOD__ . "($sql)", __CLASS__);
			}
			$message = $e->getMessage();

			\Yii::error("$message\nFailed to execute SQL: {$sql}{$paramLog}", __CLASS__);

			$errorInfo = $e instanceof \PDOException ? $e->errorInfo : null;
			throw new Exception($message, (int)$e->getCode(), $errorInfo);
		}
	}

	/**
	 * Executes the SQL statement and returns query result.
	 * This method is for executing a SQL query that returns result set, such as `SELECT`.
	 * @return DataReader the reader object for fetching the query result
	 * @throws Exception execution failed
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST))))))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (AST_VAR))
            (AST_MAGIC_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_MAGIC_CONST)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_MAGIC_CONST))))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_ARRAY))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_MAGIC_CONST)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_MAGIC_CONST))))))
            (AST_RETURN
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_MAGIC_CONST)
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_MAGIC_CONST))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR))
                            (AST_MAGIC_CONST)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_INSTANCEOF
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST))))))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (AST_VAR))
            (AST_MAGIC_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_MAGIC_CONST)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_MAGIC_CONST))))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_MAGIC_CONST)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_MAGIC_CONST))))))
            (AST_RETURN
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_MAGIC_CONST)
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_MAGIC_CONST))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR))
                            (AST_MAGIC_CONST)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_INSTANCEOF
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)))))))
        (NULL)))