	public static function removeDirectory($dir)
	{
		$items = glob($dir . DIRECTORY_SEPARATOR . '{,.}*', GLOB_MARK | GLOB_BRACE);
		foreach ($items as $item) {
			$itemBaseName = basename($item);
			if ($itemBaseName === '.' || $itemBaseName === '..') {
				continue;
			}
			if (StringHelper::substr($item, -1, 1) == DIRECTORY_SEPARATOR) {
				static::removeDirectory($item);
			} else {
				unlink($item);
			}
		}
		if (is_dir($dir)) {
			rmdir($dir);
		}
	}

	/**
	 * Returns the files found under the specified directory and subdirectories.
	 * @param string $dir the directory under which the files will be looked for.
	 * @param array $options options for file searching. Valid options are:
	 *
	 * - filter: callback, a PHP callback that is called for each sub-directory or file.
	 *   If the callback returns false, the the sub-directory or file will not be placed to the result set.
	 *   The signature of the callback should be: `function ($base, $name, $isFile)`, where `$base` is the name of directory,
	 *   which contains file or sub-directory, `$name` file or sub-directory name, `$isFile` indicates if object is a file or a directory.
	 * - fileTypes: array, list of file name suffix (without dot). Only files with these suffixes will be returned.
	 * - only: array, list of path names that the files or directories should match if they want to be put in the result set.
	 *   The matching is done in a partial manner. For example, the '.svn' will match all files and directories whose name ends with '.svn'.
	 *   And the name '/a/b' will match all files and directories ending with '/a/b'.
	 *   Note, that '/' should be used as separator regardless of the value of the DIRECTORY_SEPARATOR constant.
	 *   If a file/directory matches both a name in "only" and "except", it will NOT be put in the result set.
	 * - except: array, list of path names that the files or directories should NOT match if they want to be put in the result set.
	 * - recursive: boolean, whether the files should be looked recursively under all subdirectories.
	 *   Defaults to true.
	 * @return array files found under the directory. The file list is sorted.
	 */
||||||||	public static function removeDirectory($dir)
	{
		if (!is_dir($dir) || !($handle = opendir($dir))) {
			return;
		}
		while (($file = readdir($handle)) !== false) {
			if ($file === '.' || $file === '..') {
				continue;
			}
			$path = $dir . DIRECTORY_SEPARATOR . $file;
			if (is_file($path)) {
				unlink($path);
			} else {
				static::removeDirectory($path);
			}
		}
		closedir($handle);
		rmdir($dir);
	}

	/**
	 * Returns the files found under the specified directory and subdirectories.
	 * @param string $dir the directory under which the files will be looked for.
	 * @param array $options options for file searching. Valid options are:
	 *
	 * - filter: callback, a PHP callback that is called for each sub-directory or file.
	 *   If the callback returns false, the the sub-directory or file will be excluded from the returning result.
	 *   The signature of the callback should be: `function ($path)`, where `$path` refers the full path to be filtered.
	 * - fileTypes: array, list of file name suffix (without dot). Only files with these suffixes will be returned.
	 * - only: array, list of patterns that the files or directories should match if they want to be returned.
	 *   A path matches a pattern if it contains the pattern string at its end. For example,
	 *   '/a/b' will match all files and directories ending with '/a/b'; and the '.svn' will match all files and
	 *   directories whose name ends with '.svn'. Note, the '/' characters in a pattern matches both '/' and '\'.
	 *   If a file/directory matches both a name in "only" and "except", it will NOT be returned.
	 * - except: array, list of patterns that the files or directories should NOT match if they want to be returned.
	 *   For more details on how to specify the patterns, please refer to the "only" option.
	 * - recursive: boolean, whether the files under the subdirectories should also be lookied for. Defaults to true.
	 * @return array files found under the directory. The file list is sorted.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CONST)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (SCALAR))
                                (SCALAR)))
                        (AST_CONST))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_CONST))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR))))