    private function joinWithRelation($parent, $child, $joinType)
    {
        $via = $child->via;
        $child->via = null;
        if ($via instanceof ActiveQuery) {
            // via table
            $this->joinWithRelation($parent, $via, $joinType);
            $this->joinWithRelation($via, $child, $joinType);
            return;
        } elseif (is_array($via)) {
            // via relation
            $this->joinWithRelation($parent, $via[1], $joinType);
            $this->joinWithRelation($via[1], $child, $joinType);
            return;
        }

        list ($parentTable, $parentAlias) = $this->getQueryTableName($parent);
        list ($childTable, $childAlias) = $this->getQueryTableName($child);

        if (!empty($child->link)) {

            if (strpos($parentAlias, '{{') === false) {
                $parentAlias = '{{' . $parentAlias . '}}';
            }
            if (strpos($childAlias, '{{') === false) {
                $childAlias = '{{' . $childAlias . '}}';
            }

            $on = [];
            foreach ($child->link as $childColumn => $parentColumn) {
                $on[] = "$parentAlias.[[$parentColumn]] = $childAlias.[[$childColumn]]";
            }
            $on = implode(' AND ', $on);
            if (!empty($child->on)) {
                $on = ['and', $on, $child->on];
            }
        } else {
            $on = $child->on;
        }
        $this->join($joinType, empty($child->from) ? $childTable : $child->from, $on);

        if (!empty($child->where)) {
            $this->andWhere($child->where);
        }
        if (!empty($child->having)) {
            $this->andHaving($child->having);
        }
        if (!empty($child->orderBy)) {
            $this->addOrderBy($child->orderBy);
        }
        if (!empty($child->groupBy)) {
            $this->addGroupBy($child->groupBy);
        }
        if (!empty($child->params)) {
            $this->addParams($child->params);
        }
        if (!empty($child->join)) {
            foreach ($child->join as $join) {
                $this->join[] = $join;
            }
        }
        if (!empty($child->union)) {
            foreach ($child->union as $union) {
                $this->union[] = $union;
            }
        }
    }

    /**
     * Sets the ON condition for a relational query.
     * The condition will be used in the ON part when [[ActiveQuery::joinWith()]] is called.
     * Otherwise, the condition will be used in the WHERE part of a query.
     *
     * Use this method to specify additional conditions when declaring a relation in the [[ActiveRecord]] class:
     *
     * ```php
     * public function getActiveUsers()
     * {
     *     return $this->hasMany(User::className(), ['id' => 'user_id'])
     *                 ->onCondition(['active' => true]);
     * }
     * ```
     *
     * Note that this condition is applied in case of a join as well as when fetching the related records.
     * Thus only fields of the related table can be used in the condition. Trying to access fields of the primary
     * record will cause an error in a non-join-query.
     *
     * @param string|array $condition the ON condition. Please refer to [[Query::where()]] on how to specify this parameter.
     * @param array $params the parameters (name => value) to be bound to the query.
     * @return $this the query object itself
     */
||||||||    private function joinWithRelation($parent, $child, $joinType)
    {
        $via = $child->via;
        $child->via = null;
        if ($via instanceof ActiveQuery) {
            // via table
            $this->joinWithRelation($parent, $via, $joinType);
            $this->joinWithRelation($via, $child, $joinType);
            return;
        } elseif (is_array($via)) {
            // via relation
            $this->joinWithRelation($parent, $via[1], $joinType);
            $this->joinWithRelation($via[1], $child, $joinType);
            return;
        }

        list ($parentTable, $parentAlias) = $parent->getTableNameAndAlias();
        list ($childTable, $childAlias) = $child->getTableNameAndAlias();

        if (!empty($child->link)) {

            if (strpos($parentAlias, '{{') === false) {
                $parentAlias = '{{' . $parentAlias . '}}';
            }
            if (strpos($childAlias, '{{') === false) {
                $childAlias = '{{' . $childAlias . '}}';
            }

            $on = [];
            foreach ($child->link as $childColumn => $parentColumn) {
                $on[] = "$parentAlias.[[$parentColumn]] = $childAlias.[[$childColumn]]";
            }
            $on = implode(' AND ', $on);
            if (!empty($child->on)) {
                $on = ['and', $on, $child->on];
            }
        } else {
            $on = $child->on;
        }
        $this->join($joinType, empty($child->from) ? $childTable : $child->from, $on);

        if (!empty($child->where)) {
            $this->andWhere($child->where);
        }
        if (!empty($child->having)) {
            $this->andHaving($child->having);
        }
        if (!empty($child->orderBy)) {
            $this->addOrderBy($child->orderBy);
        }
        if (!empty($child->groupBy)) {
            $this->addGroupBy($child->groupBy);
        }
        if (!empty($child->params)) {
            $this->addParams($child->params);
        }
        if (!empty($child->join)) {
            foreach ($child->join as $join) {
                $this->join[] = $join;
            }
        }
        if (!empty($child->union)) {
            foreach ($child->union as $union) {
                $this->union[] = $union;
            }
        }
    }

    /**
     * Sets the ON condition for a relational query.
     * The condition will be used in the ON part when [[ActiveQuery::joinWith()]] is called.
     * Otherwise, the condition will be used in the WHERE part of a query.
     *
     * Use this method to specify additional conditions when declaring a relation in the [[ActiveRecord]] class:
     *
     * ```php
     * public function getActiveUsers()
     * {
     *     return $this->hasMany(User::className(), ['id' => 'user_id'])
     *                 ->onCondition(['active' => true]);
     * }
     * ```
     *
     * Note that this condition is applied in case of a join as well as when fetching the related records.
     * Thus only fields of the related table can be used in the condition. Trying to access fields of the primary
     * record will cause an error in a non-join-query.
     *
     * @param string|array $condition the ON condition. Please refer to [[Query::where()]] on how to specify this parameter.
     * @param array $params the parameters (name => value) to be bound to the query.
     * @return $this the query object itself
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_PROP
                                            (AST_VAR))
                                        (NULL)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONDITIONAL
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (AST_PROP
                                            (AST_VAR))
                                        (NULL)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONDITIONAL
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_VAR))))))))