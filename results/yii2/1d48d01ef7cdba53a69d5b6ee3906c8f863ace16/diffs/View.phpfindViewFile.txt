	public function findViewFile($view)
	{
		if (FileHelper::getExtension($view) === '') {
			$view .= '.php';
		}
		if (strncmp($view, '@', 1) === 0) {
			// e.g. "@app/views/common"
			if (($file = Yii::getAlias($view)) === false) {
				throw new InvalidConfigException("Invalid path alias: $view");
			}
		} elseif (strncmp($view, '/', 1) !== 0) {
			// e.g. "index"
			if ($this->owner instanceof Controller || $this->owner instanceof Widget) {
				$file = $this->owner->getViewPath() . DIRECTORY_SEPARATOR . $view;
			} elseif ($this->owner !== null) {
				$class = new \ReflectionClass($this->owner);
				$file = dirname($class->getFileName()) . DIRECTORY_SEPARATOR . 'views' . DIRECTORY_SEPARATOR . $view;
			} else {
				$file = Yii::$app->getViewPath() . DIRECTORY_SEPARATOR . $view;
			}
		} elseif (strncmp($view, '//', 2) !== 0 && Yii::$app->controller !== null) {
			// e.g. "/site/index"
			$file = Yii::$app->controller->module->getViewPath() . DIRECTORY_SEPARATOR . ltrim($view, '/');
		} else {
			// e.g. "//layouts/main"
			$file = Yii::$app->getViewPath() . DIRECTORY_SEPARATOR . ltrim($view, '/');
		}

		if (is_file($file)) {
			if ($this->enableTheme && ($theme = Yii::$app->getTheme()) !== null) {
				$file = $theme->apply($file);
			}
			return $this->enableI18N ? FileHelper::localize($file, $this->language, $this->sourceLanguage) : $file;
		} else {
			throw new InvalidConfigException("View file for view '$view' does not exist: $file");
		}
	}

	/**
	 * Finds the layout file that can be applied to the view.
	 *
	 * The applicable layout is resolved according to the following rules:
	 *
	 * - If [[layout]] is specified as a string, use it as the layout name and search for the layout file
	 *   under the layout path of the currently active module;
	 * - If [[layout]] is null and [[owner]] is a controller:
	 *      * If the controller's [[Controller::layout|layout]] is a string, use it as the layout name
	 *        and search for the layout file under the layout path of the parent module of the controller;
	 *      * If the controller's [[Controller::layout|layout]] is null, look through its ancestor modules
	 *        and find the first one whose [[Module::layout|layout]] is not null. Use the layout specified
	 *        by that module;
	 * - Returns false for all other cases.
	 *
	 * Like view names, a layout name can take several formats:
	 *
	 * - path alias (e.g. "@app/views/layouts/main");
	 * - absolute path (e.g. "/main"): the layout name starts with a slash. The actual layout file will be
	 *   looked for under the [[Application::layoutPath|layout path]] of the application;
	 * - relative path (e.g. "main"): the actual layout layout file will be looked for under the
	 *   [[Module::viewPath|view path]] of the context module determined by the above layout resolution process.
	 *
	 * If the layout name does not contain a file extension, it will default to `.php`.
	 *
	 * If [[enableTheme]] is true and there is an active application them, the method will also
	 * attempt to use a themed version of the layout file, when available.
	 *
	 * And if [[enableI18N]] is true, the method will attempt to use a translated version of the layout file,
	 * when available.
	 *
	 * @return string|boolean the layout file path, or false if layout is not needed.
	 * @throws InvalidConfigException if the layout file cannot be found
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR))))
                            (AST_CONST))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR))))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_INSTANCEOF
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_INSTANCEOF
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_CONST))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))
                                                (AST_CONST))
                                            (SCALAR))
                                        (AST_CONST))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_STATIC_PROP))
                                        (AST_CONST))
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_PROP
                                        (AST_STATIC_PROP))))
                            (AST_CONST))
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_STATIC_PROP))
                            (AST_CONST))
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_STATIC_PROP)))
                                (AST_CONST)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_PROP
                            (AST_VAR))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)))))))))||||||||