	public function drop()
	{
		$token = 'Drop collection ' . $this->getFullName();
		Yii::info($token, __METHOD__);
		try {
			Yii::beginProfile($token, __METHOD__);
			$result = $this->mongoCollection->drop();
			$this->tryResultError($result);
			Yii::endProfile($token, __METHOD__);
			return true;
		} catch (\Exception $e) {
			Yii::endProfile($token, __METHOD__);
			throw new Exception($e->getMessage(), (int)$e->getCode(), $e);
		}
	}

	/**
	 * Creates an index on the collection and the specified fields.
	 * @param array|string $columns column name or list of column names.
	 * If array is given, each element in the array has as key the field name, and as
	 * value either 1 for ascending sort, or -1 for descending sort.
	 * You can specify field using native numeric key with the field name as a value,
	 * in this case ascending sort will be used.
	 * For example:
	 * ~~~
	 * [
	 *     'name',
	 *     'status' => -1,
	 * ]
	 * ~~~
	 * @param array $options list of options in format: optionName => optionValue.
	 * @throws Exception on failure.
	 * @return boolean whether the operation successful.
	 */
||||||||	public function drop()
	{
		$token = $this->composeLogToken('drop');
		Yii::info($token, __METHOD__);
		try {
			Yii::beginProfile($token, __METHOD__);
			$result = $this->mongoCollection->drop();
			$this->tryResultError($result);
			Yii::endProfile($token, __METHOD__);
			return true;
		} catch (\Exception $e) {
			Yii::endProfile($token, __METHOD__);
			throw new Exception($e->getMessage(), (int)$e->getCode(), $e);
		}
	}

	/**
	 * Creates an index on the collection and the specified fields.
	 * @param array|string $columns column name or list of column names.
	 * If array is given, each element in the array has as key the field name, and as
	 * value either 1 for ascending sort, or -1 for descending sort.
	 * You can specify field using native numeric key with the field name as a value,
	 * in this case ascending sort will be used.
	 * For example:
	 * ~~~
	 * [
	 *     'name',
	 *     'status' => -1,
	 * ]
	 * ~~~
	 * @param array $options list of options in format: optionName => optionValue.
	 * @throws Exception on failure.
	 * @return boolean whether the operation successful.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_TRY
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_MAGIC_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_MAGIC_CONST)))
            (AST_RETURN
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_MAGIC_CONST)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_MAGIC_CONST)))
    (AST_TRY
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_MAGIC_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_MAGIC_CONST)))
            (AST_RETURN
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_MAGIC_CONST)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)))))))
        (NULL)))