||||||||	public function testFindLazy()
	{
		/** @var $customer Customer */
		$customer = Customer::find(2);
		$orders = $customer->orders;
		$this->assertEquals(2, count($orders));

		$orders = $customer->getOrders()->where(array('id' => 3))->all();
		$this->assertEquals(1, count($orders));
		$this->assertEquals(3, $orders[0]->id);
	}

//	public function testFindEager()
//	{
//		$customers = Customer::find()->with('orders')->all();
//		$this->assertEquals(3, count($customers));
//		$this->assertEquals(1, count($customers[0]->orders));
//		$this->assertEquals(2, count($customers[1]->orders));
//	}

//	public function testFindLazyVia()
//	{
//		/** @var $order Order */
//		$order = Order::find(1);
//		$this->assertEquals(1, $order->id);
//		$this->assertEquals(2, count($order->items));
//		$this->assertEquals(1, $order->items[0]->id);
//		$this->assertEquals(2, $order->items[1]->id);
//
//		$order = Order::find(1);
//		$order->id = 100;
//		$this->assertEquals(array(), $order->items);
//	}

//	public function testFindEagerViaRelation()
//	{
//		$orders = Order::find()->with('items')->all();
//		$this->assertEquals(3, count($orders));
//		$order = $orders[0];
//		$this->assertEquals(1, $order->id);
//		$this->assertEquals(2, count($order->items));
//		$this->assertEquals(1, $order->items[0]->id);
//		$this->assertEquals(2, $order->items[1]->id);
//	}

/*	public function testFindLazyViaTable()
	{
		/** @var $order Order * /
		$order = Order::find(1);
		$this->assertEquals(1, $order->id);
		$this->assertEquals(2, count($order->books));
		$this->assertEquals(1, $order->items[0]->id);
		$this->assertEquals(2, $order->items[1]->id);

		$order = Order::find(2);
		$this->assertEquals(2, $order->id);
		$this->assertEquals(0, count($order->books));
	}

	public function testFindEagerViaTable()
	{
		$orders = Order::find()->with('books')->all();
		$this->assertEquals(3, count($orders));

		$order = $orders[0];
		$this->assertEquals(1, $order->id);
		$this->assertEquals(2, count($order->books));
		$this->assertEquals(1, $order->books[0]->id);
		$this->assertEquals(2, $order->books[1]->id);

		$order = $orders[1];
		$this->assertEquals(2, $order->id);
		$this->assertEquals(0, count($order->books));

		$order = $orders[2];
		$this->assertEquals(3, $order->id);
		$this->assertEquals(1, count($order->books));
		$this->assertEquals(2, $order->books[0]->id);
	}*/

//	public function testFindNestedRelation()
//	{
//		$customers = Customer::find()->with('orders', 'orders.items')->all();
//		$this->assertEquals(3, count($customers));
//		$this->assertEquals(1, count($customers[0]->orders));
//		$this->assertEquals(2, count($customers[1]->orders));
//		$this->assertEquals(0, count($customers[2]->orders));
//		$this->assertEquals(2, count($customers[0]->orders[0]->items));
//		$this->assertEquals(3, count($customers[1]->orders[0]->items));
//		$this->assertEquals(1, count($customers[1]->orders[1]->items));
//	}

//	public function testLink()
//	{
//		$customer = Customer::find(2);
//		$this->assertEquals(2, count($customer->orders));
//
//		// has many
//		$order = new Order;
//		$order->total = 100;
//		$this->assertTrue($order->isNewRecord);
//		$customer->link('orders', $order);
//		$this->assertEquals(3, count($customer->orders));
//		$this->assertFalse($order->isNewRecord);
//		$this->assertEquals(3, count($customer->getOrders()->all()));
//		$this->assertEquals(2, $order->customer_id);
//
//		// belongs to
//		$order = new Order;
//		$order->total = 100;
//		$this->assertTrue($order->isNewRecord);
//		$customer = Customer::find(1);
//		$this->assertNull($order->customer);
//		$order->link('customer', $customer);
//		$this->assertFalse($order->isNewRecord);
//		$this->assertEquals(1, $order->customer_id);
//		$this->assertEquals(1, $order->customer->id);
//
//		// via table
//		$order = Order::find(2);
//		$this->assertEquals(0, count($order->books));
//		$orderItem = OrderItem::find(array('order_id' => 2, 'item_id' => 1));
//		$this->assertNull($orderItem);
//		$item = Item::find(1);
//		$order->link('books', $item, array('quantity' => 10, 'subtotal' => 100));
//		$this->assertEquals(1, count($order->books));
//		$orderItem = OrderItem::find(array('order_id' => 2, 'item_id' => 1));
//		$this->assertTrue($orderItem instanceof OrderItem);
//		$this->assertEquals(10, $orderItem->quantity);
//		$this->assertEquals(100, $orderItem->subtotal);
//
//		// via model
//		$order = Order::find(1);
//		$this->assertEquals(2, count($order->items));
//		$this->assertEquals(2, count($order->orderItems));
//		$orderItem = OrderItem::find(array('order_id' => 1, 'item_id' => 3));
//		$this->assertNull($orderItem);
//		$item = Item::find(3);
//		$order->link('items', $item, array('quantity' => 10, 'subtotal' => 100));
//		$this->assertEquals(3, count($order->items));
//		$this->assertEquals(3, count($order->orderItems));
//		$orderItem = OrderItem::find(array('order_id' => 1, 'item_id' => 3));
//		$this->assertTrue($orderItem instanceof OrderItem);
//		$this->assertEquals(10, $orderItem->quantity);
//		$this->assertEquals(100, $orderItem->subtotal);
//	}

//	public function testUnlink()
//	{
//		// has many
//		$customer = Customer::find(2);
//		$this->assertEquals(2, count($customer->orders));
//		$customer->unlink('orders', $customer->orders[1], true);
//		$this->assertEquals(1, count($customer->orders));
//		$this->assertNull(Order::find(3));
//
//		// via model
//		$order = Order::find(2);
//		$this->assertEquals(3, count($order->items));
//		$this->assertEquals(3, count($order->orderItems));
//		$order->unlink('items', $order->items[2], true);
//		$this->assertEquals(2, count($order->items));
//		$this->assertEquals(2, count($order->orderItems));
//
//		// via table
//		$order = Order::find(1);
//		$this->assertEquals(2, count($order->books));
//		$order->unlink('books', $order->books[1], true);
//		$this->assertEquals(1, count($order->books));
//		$this->assertEquals(1, count($order->orderItems));
//	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))))))