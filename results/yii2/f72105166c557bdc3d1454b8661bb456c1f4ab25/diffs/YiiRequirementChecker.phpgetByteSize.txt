	function getByteSize($verboseSize)
	{
		if (empty($verboseSize)) {
			return 0;
		}
		if (is_numeric($verboseSize)) {
			return (integer)$verboseSize;
		}
		$sizeUnit = trim($verboseSize, '0123456789');
		$size = str_replace($sizeUnit, '', $verboseSize);
		$size = trim($size);
		if (!is_numeric($size)) {
			return 0;
		}
		switch (strtolower($sizeUnit)) {
			case 'kb':
			case 'k': {
				return $size * 1024;
			}
			case 'mb':
			case 'm': {
				return $size * 1024 * 1024;
			}
			case 'gb':
			case 'g': {
				return $size * 1024 * 1024 * 1024;
			}
			default: {
				return 0;
			}
		}
	}

	/**
	 * Checks if upload max file size matches the given range.
	 * @param string|null $min verbose file size minimum required value, pass null to skip minimum check.
	 * @param string|null $max verbose file size maximum required value, pass null to skip maximum check.
	 * @return boolean success.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CAST
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_SWITCH
        (AST_CALL
            (
                (AST_VAR)))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR)))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_RETURN
                        (SCALAR)))))))||||||||