	public static function decode($json, $asArray = true)
	{
		if (is_array($json)) {
			throw new InvalidParamException('Invalid JSON data.');
		}
		$decode = json_decode((string)$json, $asArray);
		switch (json_last_error()) {
			case JSON_ERROR_NONE:
				break;
			case JSON_ERROR_DEPTH:
				throw new InvalidParamException('The maximum stack depth has been exceeded.');
			case JSON_ERROR_CTRL_CHAR:
				throw new InvalidParamException('Control character error, possibly incorrectly encoded.');
			case JSON_ERROR_SYNTAX:
				throw new InvalidParamException('Syntax error.');
			case JSON_ERROR_STATE_MISMATCH:
				throw new InvalidParamException('Invalid or malformed JSON.');
			case JSON_ERROR_UTF8:
				throw new InvalidParamException('Malformed UTF-8 characters, possibly incorrectly encoded.');
			default:
				throw new InvalidParamException('Unknown JSON decoding error.');
		}

		return $decode;
	}

	/**
	 * Pre-processes the data before sending it to `json_encode()`.
	 * @param mixed $data the data to be processed
	 * @param array $expressions collection of JavaScript expressions
	 * @return mixed the processed data
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CAST
                    (AST_VAR))
                (AST_VAR))))
    (AST_SWITCH
        (AST_CALL)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||