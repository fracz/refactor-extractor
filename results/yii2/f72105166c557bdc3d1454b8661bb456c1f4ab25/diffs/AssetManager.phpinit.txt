	public function init()
	{
		parent::init();
		$this->basePath = Yii::getAlias($this->basePath);
		if (!is_dir($this->basePath)) {
			throw new InvalidConfigException("The directory does not exist: {$this->basePath}");
		} elseif (!is_writable($this->basePath)) {
			throw new InvalidConfigException("The directory is not writable by the Web process: {$this->basePath}");
		} else {
			$this->basePath = realpath($this->basePath);
		}
		$this->baseUrl = rtrim(Yii::getAlias($this->baseUrl), '/');

		foreach (require(YII_PATH . '/assets.php') as $name => $bundle) {
			if (!isset($this->bundles[$name])) {
				$this->bundles[$name] = $bundle;
			}
		}
	}

	/**
	 * Returns the named bundle.
	 * This method will first look for the bundle in [[bundles]]. If not found,
	 * it will attempt to find the bundle from an installed extension using the following procedure:
	 *
	 * 1. Convert the bundle into a path alias;
	 * 2. Determine the root alias and use it to locate the bundle manifest file "assets.php";
	 * 3. Look for the bundle in the manifest file.
	 *
	 * For example, given the bundle name "foo/button", the method will first convert it
	 * into the path alias "@foo/button"; since "@foo" is the root alias, it will look
	 * for the bundle manifest file "@foo/assets.php". The manifest file should return an array
	 * that lists the bundles used by the "foo/button" extension. The array format is the same as [[bundles]].
	 *
	 * @param string $name the bundle name
	 * @return AssetBundle the loaded bundle object. Null is returned if the bundle does not exist.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))))
    (AST_FOREACH
        (AST_INCLUDE_OR_EVAL
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_VAR))))))))||||||||