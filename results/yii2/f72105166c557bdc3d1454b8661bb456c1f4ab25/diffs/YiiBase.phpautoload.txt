	public static function autoload($className)
	{
		$className = ltrim($className, '\\');

		if (isset(self::$classMap[$className])) {
			$classFile = static::getAlias(self::$classMap[$className]);
			if (!is_file($classFile)) {
				throw new InvalidConfigException("Class file does not exist: $classFile");
			}
		} else {
			// follow PSR-0 to determine the class file
			if (($pos = strrpos($className, '\\')) !== false) {
				// namespaced class, e.g. yii\base\Component
				$path = str_replace('\\', '/', substr($className, 0, $pos + 1))
					. str_replace('_', '/', substr($className, $pos + 1)) . '.php';
			} else {
				$path = str_replace('_', '/', $className) . '.php';
			}

			// try via path alias first
			if (strpos($path, '/') !== false) {
				$fullPath = static::getAlias('@' . $path, false);
				if ($fullPath !== false && is_file($fullPath)) {
					$classFile = $fullPath;
				}
			}

			// search include_path
			if (!isset($classFile) && self::$enableIncludePath && ($fullPath = stream_resolve_include_path($path)) !== false) {
				$classFile = $fullPath;
			}

			if (!isset($classFile)) {
				// return false to let other autoloaders to try loading the class
				return false;
			}
		}

		include($classFile);

		if (class_exists($className, false) || interface_exists($className, false) ||
			function_exists('trait_exists') && trait_exists($className, false)) {
			return true;
		} else {
			throw new UnknownClassException("Unable to find '$className' in file: $classFile");
		}
	}

	/**
	 * Creates a new object using the given configuration.
	 *
	 * The configuration can be either a string or an array.
	 * If a string, it is treated as the *object class*; if an array,
	 * it must contain a `class` element specifying the *object class*, and
	 * the rest of the name-value pairs in the array will be used to initialize
	 * the corresponding object properties.
	 *
	 * The object type can be either a class name or the [[getAlias()|alias]] of
	 * the class. For example,
	 *
	 * - `app\components\GoogleMap`: fully-qualified namespaced class.
	 * - `@app/components/GoogleMap`: an alias, used for non-namespaced class.
	 *
	 * Below are some usage examples:
	 *
	 * ~~~
	 * $object = \Yii::createObject('@app/components/GoogleMap');
	 * $object = \Yii::createObject(array(
	 *     'class' => '\app\components\GoogleMap',
	 *     'apiKey' => 'xyz',
	 * ));
	 * ~~~
	 *
	 * This method can be used to create any object as long as the object's constructor is
	 * defined like the following:
	 *
	 * ~~~
	 * public function __construct(..., $config = array()) {
	 * }
	 * ~~~
	 *
	 * The method will pass the given configuration as the last parameter of the constructor,
	 * and any additional parameters to this method will be passed as the rest of the constructor parameters.
	 *
	 * @param string|array $config the configuration. It can be either a string representing the class name
	 * or an array representing the object configuration.
	 * @return mixed the created object
	 * @throws InvalidConfigException if the configuration is invalid.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR)
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR))))))
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR)))))))
                                    (SCALAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (SCALAR)
                                            (AST_VAR)))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (AST_CONST))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CONST))
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_ISSET
                                        (AST_VAR)))
                                (AST_STATIC_PROP))
                            (AST_BINARY_OP
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (AST_CONST)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_INCLUDE_OR_EVAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST)))
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST)))))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)))))))))||||||||