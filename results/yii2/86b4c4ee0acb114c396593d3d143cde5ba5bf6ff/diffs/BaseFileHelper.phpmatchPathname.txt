	public static function matchPathname($path, $basePath, $pattern, $prefix, $flags)
	{
		// match with FNM_PATHNAME; the pattern has base implicitly in front of it.
		if (isset($pattern[0]) && $pattern[0] == '/') {
			$pattern = StringHelper::byteSubstr($pattern, 1, StringHelper::byteLength($pattern));
			if ($prefix !== 0) {
				$prefix--;
			}
		}

		$namelen = StringHelper::byteLength($path) - (empty($basePath) ? 0 : StringHelper::byteLength($basePath) + 1);
		$name = StringHelper::byteSubstr($path, -$namelen, $namelen);

		if ($prefix !== 0) {
			if ($prefix === false) {
				$prefix = StringHelper::byteLength($pattern);
			}
			// if the non-wildcard part is longer than the remaining pathname, surely it cannot match.
			if ($prefix > $namelen) {
				return false;
			}

			if (strncmp($pattern, $name, $prefix)) {
				return false;
			}
			$pattern = StringHelper::byteSubstr($pattern, $prefix, StringHelper::byteLength($pattern));
			$name = StringHelper::byteSubstr($name, $prefix, $namelen);

			// If the whole pattern did not have a wildcard, then our prefix match is all we need; we do not need to call fnmatch at all.
			if (empty($pattern) && empty($name)) {
				return true;
			}
		}

		return fnmatch($pattern, $name, FNM_PATHNAME);
	}

	/**
	 * Scan the given exclude list in reverse to see whether pathname
	 * should be ignored.  The first match (i.e. the last on the list), if
	 * any, determines the fate.  Returns the element which
	 * matched, or null for undecided.
	 *
	 * Based on last_exclude_matching_from_list() from dir.c of git 1.8.5.3 sources.
	 *
	 * @param string $basePath
	 * @param string $path
	 * @param array $excludes list of patterns to match $path against
	 * @return string null or one of $excludes item as an array with keys: 'pattern', 'flags'
	 */
||||||||	private static function matchPathname($path, $basePath, $pattern, $firstWildcard, $flags)
	{
		// match with FNM_PATHNAME; the pattern has base implicitly in front of it.
		if (isset($pattern[0]) && $pattern[0] == '/') {
			$pattern = StringHelper::byteSubstr($pattern, 1, StringHelper::byteLength($pattern));
			if ($firstWildcard !== false && $firstWildcard !== 0) {
				$firstWildcard--;
			}
		}

		$namelen = StringHelper::byteLength($path) - (empty($basePath) ? 0 : StringHelper::byteLength($basePath) + 1);
		$name = StringHelper::byteSubstr($path, -$namelen, $namelen);

		if ($firstWildcard !== 0) {
			if ($firstWildcard === false) {
				$firstWildcard = StringHelper::byteLength($pattern);
			}
			// if the non-wildcard part is longer than the remaining pathname, surely it cannot match.
			if ($firstWildcard > $namelen) {
				return false;
			}

			if (strncmp($pattern, $name, $firstWildcard)) {
				return false;
			}
			$pattern = StringHelper::byteSubstr($pattern, $firstWildcard, StringHelper::byteLength($pattern));
			$name = StringHelper::byteSubstr($name, $firstWildcard, $namelen);

			// If the whole pattern did not have a wildcard, then our prefix match is all we need; we do not need to call fnmatch at all.
			if (empty($pattern) && empty($name)) {
				return true;
			}
		}

		return fnmatch($pattern, $name, FNM_PATHNAME);
	}

	/**
	 * Scan the given exclude list in reverse to see whether pathname
	 * should be ignored.  The first match (i.e. the last on the list), if
	 * any, determines the fate.  Returns the element which
	 * matched, or null for undecided.
	 *
	 * Based on last_exclude_matching_from_list() from dir.c of git 1.8.5.3 sources.
	 *
	 * @param string $basePath
	 * @param string $path
	 * @param array $excludes list of patterns to match $path against
	 * @return string null or one of $excludes item as an array with keys: 'pattern', 'flags'
	 * @throws InvalidParamException if any of the exclude patterns is not a string or an array with keys: pattern, flags, firstWildcard.
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_POST_DEC
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (AST_CONDITIONAL
                (AST_EMPTY
                    (AST_VAR))
                (SCALAR)
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_VAR))
                            (AST_EMPTY
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_CONST)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_POST_DEC
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (AST_CONDITIONAL
                (AST_EMPTY
                    (AST_VAR))
                (SCALAR)
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_VAR))
                            (AST_EMPTY
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_CONST)))))