    protected function initiateMultipartUpload()
    {
        $params = array(
            'accountId' => $this->accountId,
            'vaultName' => $this->vaultName
        );

        $partGenerator = $this->partGenerator ?: UploadPartGenerator::factory($this->source, $this->partSize);

        $command = $this->client->getCommand('InitiateMultipartUpload', array_replace($params, array(
            'command.headers'    => $this->headers,
            'partSize'           => $partGenerator->getPartSize(),
            'archiveDescription' => $this->archiveDescription,
            Ua::OPTION           => Ua::MULTIPART_UPLOAD
        )));
        $params['uploadId'] = $command->getResult()->get('uploadId');

        // Create a new state based on the initiated upload
        $state = new TransferState(UploadId::fromParams($params));
        $state->setPartGenerator($partGenerator);

        return $state;
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_PROP
                (AST_VAR))
            (NULL)
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||