    public function __construct(EntityBodyInterface $body, $partSize)
    {
        $this->partSize = $partSize;

       // Make sure the part size is valid
        $validPartSizes = array_map(function ($value) {return pow(2, $value) * Size::MB;}, range(0, 12));
        if (!in_array($this->partSize, $validPartSizes)) {
            throw new InvalidArgumentException('The part size must be a megabyte multiplied by a power of 2 and no '
                . 'greater than 4 gigabytes.');
        }

        // Validate body
        if (!$body->isSeekable()) {
            throw new InvalidArgumentException('The upload body must be seekable.');
        }

        $this->generateUploadParts($body);

        // Validate archive size
        if ($this->archiveSize < 1) {
            throw new InvalidArgumentException('The archive size must be at least 1 byte.');
        }
    }

    /**
     * Returns a single upload part from the calculated uploads by part number. By default it returns the first, which
     * is useful behavior if there is only one upload.
     *
     * @param int $partNumber The numerical index of the upload
     *
     * @return UploadPart
     * @throws OutOfBoundsException if the index of the upload doesn't exist
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_CLASS_CONST
                                    (SCALAR))))))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR))))))))||||||||