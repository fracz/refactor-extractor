    public function __construct(EntityBodyInterface $body, $partSize = null)
    {
        $this->body = $body;
        $this->treeHash = new TreeHash();

        // The default/maximum upload/part size is 4GB
        $partSize = $partSize ?: 4 * Size::GB;

        // Setup valid part sizes (1MB-4GB where 2^N MB)
        if (!self::$validPartSizes) {
            self::$validPartSizes = array_map(function ($value) {
                return pow(2, $value) * Size::MB;
            }, range(0, 12));
        }

        // Make sure the part size is valid
        if (!in_array($partSize, self::$validPartSizes, true)) {
            throw new InvalidArgumentException('The part size must be a megabyte multiplied by a power of 2 and no'
                . 'greater than 4 gigabytes.');
        }

        $this->generateUploadContexts($partSize);
    }

    /**
     * Returns a single upload object from the calculated uploads by index. By default it returns the first, which is
     * useful behavior if the part size was set to SINGLE_UPLOAD and there is only one upload.
     *
     * @param int $index The numerical index of the upload
     *
     * @return UploadContext
     * @throws InvalidArgumentException if the index is ambiguous
     * @throws OutOfBoundsException if the index of the upload doesn't exist
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (NULL)
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_PROP))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CALL
                        (
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                (NULL)
                                (
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_VAR)))
                                            (AST_CLASS_CONST
                                                (SCALAR))))))
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP)
                        (AST_CONST))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||