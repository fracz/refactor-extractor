<?php
/**
 * Copyright 2010-2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 * http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

namespace Aws\Glacier\Model;

use Aws\Common\ChunkHash;
use Aws\Common\Enum\Size;
use Aws\Common\Exception\InvalidArgumentException;
use Aws\Common\Exception\OutOfBoundsException;
use Guzzle\Http\EntityBody;
use Guzzle\Http\EntityBodyInterface;

/**
 * Generates UploadContext objects from a string/stream that encapsulates the data needed for upload requests
 */
class UploadHelper
{
    /**
     * @var array List of cached, valid upload part sizes for validation purposes
     */
    protected static $validPartSizes;

    /**
     * @var EntityBodyInterface The body of the upload represented as a Guzzle entity body
     */
    protected $body;

    /**
     * @var TreeHash The tree hash of the entire upload body
     */
    protected $treeHash;

    /**
     * @var array List of upload contexts generated by this helper
     */
    protected $uploadContexts;

    /**
     * @var array The total size of the entire upload body
     */
    protected $archiveSize;

    /**
     * Creates a UploadHelper and wraps the upload body in a Guzzle EntityBody object
     *
     * @param string|resource|EntityBodyInterface $body     The upload body
     * @param int                                 $partSize The size of parts to split the upload into
     *
     * @return UploadHelper
     */
    public static function factory($body, $partSize = null)
    {
        return new self(EntityBody::factory($body), $partSize);
    }

    /**
     * @param EntityBodyInterface $body     The upload body
     * @param int                 $partSize The size of parts to split the upload into. Default is the 4GB max
     *
     * @throws InvalidArgumentException when the part size is invalid (i.e. not a power of 2 * 1MB)
     */
    public function __construct(EntityBodyInterface $body, $partSize = null)
    {
        $this->body = $body;
        $this->treeHash = new TreeHash();

        // The default/maximum upload/part size is 4GB
        $partSize = $partSize ?: 4 * Size::GB;

        // Setup valid part sizes (1MB-4GB where 2^N MB)
        if (!self::$validPartSizes) {
            self::$validPartSizes = array_map(function ($value) {
                return pow(2, $value) * Size::MB;
            }, range(0, 12));
        }

        // Make sure the part size is valid
        if (!in_array($partSize, self::$validPartSizes, true)) {
            throw new InvalidArgumentException('The part size must be a megabyte multiplied by a power of 2 and no'
                . 'greater than 4 gigabytes.');
        }

        $this->generateUploadContexts($partSize);
    }

    /**
     * Returns a single upload object from the calculated uploads by index. By default it returns the first, which is
     * useful behavior if the part size was set to SINGLE_UPLOAD and there is only one upload.
     *
     * @param int $index The numerical index of the upload
     *
     * @return UploadContext
     * @throws InvalidArgumentException if the index is ambiguous
     * @throws OutOfBoundsException if the index of the upload doesn't exist
     */
    public function getSingleUploadContext($index = null)
    {
        // Make sure index is set if there is more than one upload
        if ($index === null) {
            if (count($this->uploadContexts) > 1) {
                throw new InvalidArgumentException('You must select an index if there is more than one part.');
            } else {
                $index = 0;
            }
        }

        $index = (int) $index;

        // Get the upload at the index if it exists
        if (isset($this->uploadContexts[$index])) {
            return $this->uploadContexts[$index];
        } else {
            throw new OutOfBoundsException('An upload context at that index did not exist.');
        }
    }
    /**
     * @return array
     */
    public function getUploadContexts()
    {
        return $this->uploadContexts;
    }

    /**
     * @return EntityBodyInterface
     */
    public function getBody()
    {
        return $this->body;
    }

    /**
     * @return array
     */
    public function getArchiveSize()
    {
        return $this->archiveSize;
    }

    /**
     * @return string
     */
    public function getRootChecksum()
    {
        return $this->treeHash->getHash();
    }

    /**
     * Performs the work of reading the body stream, creating tree hashes, and creating UploadContext objects
     *
     * @param int $partSize The size of parts to split the upload into
     */
    protected function generateUploadContexts($partSize)
    {
        // Rewind the body stream
        $this->body->seek(0);

        // Initialize variables for tracking data for upload
        $uploadContext = new UploadContext($partSize, $this->body->ftell());

        // Read the data from the streamed body in 1MB chunks
        while ($data = $this->body->read(Size::MB)) {
            // Add data to the hashes and size calculations
            $uploadContext->addData($data);

            // If the upload part is complete, generate an upload object and reset the currently tracked upload data
            if ($uploadContext->isFull()) {
                $this->uploadContexts[] = $uploadContext->finalize();
                $this->treeHash->addChecksum($uploadContext->getChecksum());
                $this->archiveSize += $uploadContext->getSize();
                $uploadContext = new UploadContext($partSize, $this->body->ftell());
            }
        }

        // Handle any leftover data
        if (!$uploadContext->isEmpty()) {
            $this->uploadContexts[] = $uploadContext->finalize();
            $this->treeHash->addChecksum($uploadContext->getChecksum());
            $this->archiveSize += $uploadContext->getSize();
        }

        // Rewind the body stream
        $this->body->seek(0);
    }
}