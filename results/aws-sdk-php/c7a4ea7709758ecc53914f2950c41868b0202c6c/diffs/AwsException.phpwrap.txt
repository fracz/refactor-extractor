    public static function wrap(CommandException $previous)
    {
        $message = 'AWS Error: ';

        if ($prev = $previous->getContext('aws_error/message')) {
            $message .= $prev;
        } else {
            $message .= $previous->getMessage();
        }

        if (!($previous->getClient() instanceof AwsClientInterface)) {
            throw new \InvalidArgumentException('The wrapped exception must use'
                . ' an AwsClientInterface');
        }

        return new static(
            $message,
            $previous->getClient(),
            $previous->getCommand(),
            $previous->getRequest(),
            $previous->getResponse(),
            $previous,
            $previous->getContext()
        );
    }

    /**
     * Get the name of the web service that encountered the error.
     *
     * @return string
     */
||||||||    public static function wrap(CommandException $previous)
    {
        $client = $previous->getClient();
        if (!($client instanceof AwsClientInterface)) {
            throw new \InvalidArgumentException('The wrapped exception must use'
                . ' an AwsClientInterface');
        }

        $message = 'AWS (' . $client->getApi()->getEndpointPrefix()  . ') Error: ';

        if ($prev = $previous->getContext('aws_error/message')) {
            $message .= $prev;
        } else {
            $message .= $previous->getMessage();
        }

        return new static(
            $message,
            $client,
            $previous->getCommand(),
            $previous->getRequest(),
            $previous->getResponse(),
            $previous,
            $previous->getContext()
        );
    }

    /**
     * Get the name of the web service that encountered the error.
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))))))