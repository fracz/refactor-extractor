    protected function serializeRequest(CommandTransaction $trans)
    {
        $fn = $this->serializer;
        return $fn($trans);
    }
}||||||||    final protected function serializeRequest(CommandTransaction $trans)
    {
        $fn = $this->serializer;
        $request = $fn($trans);

        // Note: We can later update this to allow custom per/operation
        // signers, by checking the corresponding operation for a
        // signatureVersion override and attaching a different listener.
        $request->getEmitter()->on(
            'before',
            $this->defaultSignatureListener,
            RequestEvents::SIGN_REQUEST
        );

        return $request;
    }

    /**
     * Get the signature_provider function of the client.
     *
     * @return callable
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_RETURN
        (AST_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_RETURN
        (AST_VAR)))