    private function collectAllTypes()
    {
        $initialTypes = $this->resolvedTypes;

        $typeMap = [];
        foreach ($initialTypes as $type) {
            $typeMap = TypeInfo::extractTypes($type, $typeMap);
        }

        if ($this->config->types) {
            $types = $this->config->types;

            if (is_callable($types)) {
                $types = $types();
            }

            if (!is_array($types) && !$types instanceof \Traversable) {
                throw new InvariantViolation(sprintf(
                    'Schema types callable must return array or instance of Traversable but got: %s',
                    Utils::getVariableType($types)
                ));
            }

            foreach ($types as $index => $type) {
                if (!$type instanceof Type) {
                    throw new InvariantViolation(
                        'Each entry of schema types must be instance of GraphQL\Type\Definition\Type but entry at %s is %s',
                        $index,
                        Utils::printSafe($type)
                    );
                }
                $typeMap = TypeInfo::extractTypes($type, $typeMap);
            }
        }

        return $typeMap + Type::getInternalTypes() + Introspection::getTypes();
    }

    /**
     * Returns all possible concrete types for given abstract type
     * (implementations for interfaces and members of union type for unions)
     *
     * @param AbstractType $abstractType
     * @return ObjectType[]
     */
||||||||    private function collectAllTypes()
    {
        $typeMap = [];
        foreach ($this->resolvedTypes as $type) {
            $typeMap = TypeInfo::extractTypes($type, $typeMap);
        }
        foreach ($this->resolveAdditionalTypes() as $type) {
            $typeMap = TypeInfo::extractTypes($type, $typeMap);
        }
        return $typeMap + Type::getInternalTypes() + Introspection::getTypes();
    }

    /**
     * @return \Generator
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_UNARY_OP
                                (AST_INSTANCEOF
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)))))))))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_INSTANCEOF
                                        (AST_VAR)))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)))))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_STATIC_CALL))
            (AST_STATIC_CALL))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_STATIC_CALL))
            (AST_STATIC_CALL))))