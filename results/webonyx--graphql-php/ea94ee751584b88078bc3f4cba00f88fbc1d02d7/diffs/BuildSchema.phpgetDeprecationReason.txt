    private function getDeprecationReason($directives)
    {
        $deprecatedAST = $directives ? Utils::find(
            $directives,
            function($directive) {
                return $directive->name->value === Directive::deprecatedDirective()->name;
            }
        ) : null;
        if (!$deprecatedAST) {
            return;
        }
        return Values::getArgumentValues(
            Directive::deprecatedDirective(),
            $deprecatedAST
        )['reason'];
    }

    /**
     * Given an ast node, returns its string description based on a contiguous
     * block full-line of comments preceding it.
     */
||||||||    private function getDeprecationReason($node)
    {
        $deprecated = Values::getDirectiveValues(Directive::deprecatedDirective(), $node);
        return isset($deprecated['reason']) ? $deprecated['reason'] : null;
    }

    /**
     * Given an ast node, returns its string description based on a contiguous
     * block full-line of comments preceding it.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_CLOSURE
                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_PROP
                                        (AST_STATIC_CALL))))))))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_RETURN
        (AST_DIM
            (AST_STATIC_CALL
                (
                    (AST_STATIC_CALL)
                    (AST_VAR)))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL)
                (AST_VAR))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST))))