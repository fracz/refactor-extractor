    private function completeValueCatchingError(
        Type $returnType,
        $fieldNodes,
        ResolveInfo $info,
        $path,
        $result
    )
    {
        $exeContext = $this->exeContext;

        // If the field type is non-nullable, then it is resolved without any
        // protection from errors.
        if ($returnType instanceof NonNull) {
            return $this->completeValueWithLocatedError(
                $returnType,
                $fieldNodes,
                $info,
                $path,
                $result
            );
        }

        // Otherwise, error protection is applied, logging the error and resolving
        // a null value for this field if one is encountered.
        try {
            $completed = $this->completeValueWithLocatedError(
                $returnType,
                $fieldNodes,
                $info,
                $path,
                $result
            );
            if ($this->promises->isPromise($completed)) {
                return $this->promises->then($completed, null, function ($error) use ($exeContext) {
                    $exeContext->addError($error);
                    return $this->promises->createResolvedPromise(null);
                });
            }
            return $completed;
        } catch (Error $err) {
            // If `completeValueWithLocatedError` returned abruptly (threw an error), log the error
            // and return null.
            $exeContext->addError($err);
            return null;
        }
    }


    /**
     * This is a small wrapper around completeValue which annotates errors with
     * location information.
     *
     * @param Type $returnType
     * @param $fieldNodes
     * @param ResolveInfo $info
     * @param $path
     * @param $result
     * @return array|null|Promise
     * @throws Error
     */
||||||||    private function completeValueCatchingError(
        Type $returnType,
        $fieldNodes,
        ResolveInfo $info,
        $path,
        $result
    )
    {
        $exeContext = $this->exeContext;

        // If the field type is non-nullable, then it is resolved without any
        // protection from errors.
        if ($returnType instanceof NonNull) {
            return $this->completeValueWithLocatedError(
                $returnType,
                $fieldNodes,
                $info,
                $path,
                $result
            );
        }

        // Otherwise, error protection is applied, logging the error and resolving
        // a null value for this field if one is encountered.
        try {
            $completed = $this->completeValueWithLocatedError(
                $returnType,
                $fieldNodes,
                $info,
                $path,
                $result
            );
            if ($completed instanceof Promise) {
                return $completed->then(null, function ($error) use ($exeContext) {
                    $exeContext->addError($error);
                    return $this->promises->createResolvedPromise(null);
                });
            }
            return $completed;
        } catch (Error $err) {
            // If `completeValueWithLocatedError` returned abruptly (threw an error), log the error
            // and return null.
            $exeContext->addError($err);
            return null;
        }
    }


    /**
     * This is a small wrapper around completeValue which annotates errors with
     * location information.
     *
     * @param Type $returnType
     * @param $fieldNodes
     * @param ResolveInfo $info
     * @param $path
     * @param $result
     * @return array|null|Promise
     * @throws Error
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)
                                    (AST_CONST)
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))
                                            (AST_RETURN
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (
                                                        (AST_CONST))))))))))))
            (AST_RETURN
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))
                                            (AST_RETURN
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (
                                                        (AST_CONST))))))))))))
            (AST_RETURN
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL)))