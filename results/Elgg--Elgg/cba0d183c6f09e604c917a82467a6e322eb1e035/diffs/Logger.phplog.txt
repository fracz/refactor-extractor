	public function log($message, $level = self::NOTICE) {

		if ($this->level != self::OFF) {

			// do not send logging at notice level or below to screen
			$to_screen = !($this->level <= self::NOTICE);

			$levelString = self::$levels[$level];

			switch ($level) {
				case self::ERROR:
					// always log errors
					$this->dump("$levelString: $message", $to_screen, $level);
					break;
				case self::WARNING:
					if ($this->level <= self::WARNING) {
						$this->dump("$levelString: $message", $to_screen, $level);
					}
					break;
				case self::NOTICE:
					if ($this->level <= self::NOTICE) {
						$this->dump("$levelString: $message", FALSE, $level);
					}
					break;
				default:
					return false;
					break;
			}

			return TRUE;
		}

		return FALSE;
	}

	/**
	 * Dump data to log or screen
	 *
	 * @param mixed $value     The data to log
	 * @param bool  $to_screen Whether to include this in the HTML page
	 * @param int   $level     The logging level
	 * @return bool Whether the messages was logged
	 */
||||||||	public function log($message, $level = self::NOTICE) {
		if ($this->level == self::OFF || $level < $this->level) {
			return false;
		}

		if (!array_key_exists($level, self::$levels)) {
			return false;
		}

		$levelString = self::$levels[$level];

		// notices and below never displayed to user
		$display = $this->display && $level > self::NOTICE;

		$this->process("$levelString: $message", $display, $level);

		return true;
	}

	/**
	 * Dump data to log or screen
	 *
	 * @param mixed $data    The data to log
	 * @param bool  $display Whether to include this in the HTML page
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (AST_SWITCH
                    (AST_VAR)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (AST_CLASS_CONST
                                (SCALAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR))
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CLASS_CONST
                                (SCALAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_ENCAPS_LIST
                                                        (AST_VAR)
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CLASS_CONST
                                (SCALAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_ENCAPS_LIST
                                                        (AST_VAR)
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (AST_CONST)
                                                    (AST_VAR))))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (NULL)
                            (
                                (AST_RETURN
                                    (AST_CONST))
                                (AST_BREAK
                                    (NULL))))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR)
                (AST_VAR))
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))