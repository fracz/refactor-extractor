	function remove($type, $subtype) {
		global $SUBTYPE_CACHE;

		$type = sanitise_string($type);
		$subtype = sanitise_string($subtype);

		$success = _elgg_services()->db->deleteData("DELETE FROM {$this->CONFIG->dbprefix}entity_subtypes"
			. " WHERE type = '$type' AND subtype = '$subtype'");

		if ($success) {
			// invalidate the cache
			$SUBTYPE_CACHE = null;
		}

		return (bool) $success;
	}

	/**
	 * Update a registered \ElggEntity type, subtype, and class name
	 *
	 * @param string $type    Type
	 * @param string $subtype Subtype
	 * @param string $class   Class name to use when loading this entity
	 *
	 * @return bool
	 */
||||||||	function remove($type, $subtype) {
		$type = $this->db->sanitizeString($type);
		$subtype = $this->db->sanitizeString($subtype);

		$success = $this->db->deleteData("
			DELETE FROM {$this->db->getTablePrefix()}entity_subtypes
			WHERE type = '$type' AND subtype = '$subtype'
		");

		if ($success) {
			// invalidate the cache
			$this->cache = null;
		}

		return (bool) $success;
	}

	/**
	 * Update a registered \ElggEntity type, subtype, and class name
	 *
	 * @param string $type    Type
	 * @param string $subtype Subtype
	 * @param string $class   Class name to use when loading this entity
	 *
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_CALL))
            (
                (AST_BINARY_OP
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CAST
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CAST
            (AST_VAR))))