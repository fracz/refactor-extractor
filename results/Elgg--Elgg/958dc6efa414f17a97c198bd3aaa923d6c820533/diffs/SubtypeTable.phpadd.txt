	function add($type, $subtype, $class = "") {
		global $SUBTYPE_CACHE;

		if (!$subtype) {
			return 0;
		}

		$id = $this->getId($type, $subtype);

		if (!$id) {
			// In cache we store non-SQL-escaped strings because that's what's returned by query
			$cache_obj = (object) array(
				'type' => $type,
				'subtype' => $subtype,
				'class' => $class,
			);

			$type = sanitise_string($type);
			$subtype = sanitise_string($subtype);
			$class = sanitise_string($class);

			$id = _elgg_services()->db->insertData("INSERT INTO {$this->CONFIG->dbprefix}entity_subtypes"
				. " (type, subtype, class) VALUES ('$type', '$subtype', '$class')");

			// add entry to cache
			$cache_obj->id = $id;
			$SUBTYPE_CACHE[$id] = $cache_obj;
		}

		return $id;
	}

	/**
	 * Removes a registered \ElggEntity type, subtype, and classname.
	 *
	 * @warning You do not want to use this function. If you want to unregister
	 * a class for a subtype, use update_subtype(). Using this function will
	 * permanently orphan all the objects created with the specified subtype.
	 *
	 * @param string $type    Type
	 * @param string $subtype Subtype
	 *
	 * @return bool
	 * @see add_subtype()
	 * @see update_subtype()
	 */
||||||||	function add($type, $subtype, $class = "") {
		if (!$subtype) {
			return 0;
		}

		$id = $this->getId($type, $subtype);

		if (!$id) {
			// In cache we store non-SQL-escaped strings because that's what's returned by query
			$cache_obj = (object) array(
				'type' => $type,
				'subtype' => $subtype,
				'class' => $class,
			);

			$type = $this->db->sanitizeString($type);
			$subtype = $this->db->sanitizeString($subtype);
			$class = $this->db->sanitizeString($class);

			$id = $this->db->insertData("
				INSERT INTO {$this->db->getTablePrefix()}entity_subtypes
					(type, subtype, class) VALUES
					('$type', '$subtype', '$class')
			");

			// add entry to cache
			$cache_obj->id = $id;
			$this->cache[$id] = $cache_obj;
		}

		return $id;
	}

	/**
	 * Removes a registered \ElggEntity type, subtype, and classname.
	 *
	 * @warning You do not want to use this function. If you want to unregister
	 * a class for a subtype, use update_subtype(). Using this function will
	 * permanently orphan all the objects created with the specified subtype.
	 *
	 * @param string $type    Type
	 * @param string $subtype Subtype
	 *
	 * @return bool
	 * @see add_subtype()
	 * @see update_subtype()
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_CALL))
                        (
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))