	function remove($name, $site_guid = 0) {


		$name = trim($name);

		$site_guid = (int) $site_guid;
		if ($site_guid == 0) {
			$site_guid = (int) $this->CONFIG->site_guid;
		}

		if ($site_guid == $this->CONFIG->site_guid && isset($this->CONFIG->$name)) {
			unset($this->CONFIG->$name);
		}

		$escaped_name = sanitize_string($name);
		$query = "DELETE FROM {$this->CONFIG->dbprefix}config WHERE name = '$escaped_name' AND site_guid = $site_guid";

		return _elgg_services()->db->deleteData($query) !== false;
	}

	/**
	 * Add or update a config setting.
	 *
	 * Plugin authors should use elgg_set_config().
	 *
	 * If the config name already exists, it will be updated to the new value.
	 *
	 * @warning Names should be selected so as not to collide with the names for the
	 * datalist (application configuration)
	 *
	 * @note Internal: These settings are stored in the dbprefix_config table and read
	 * during system boot into $CONFIG.
	 *
	 * @note Internal: The value is serialized so we maintain type information.
	 *
	 * @param string $name      The name of the configuration value
	 * @param mixed  $value     Its value
	 * @param int    $site_guid Optionally, the GUID of the site (current site is assumed by default)
	 *
	 * @return bool
	 */
||||||||	function remove($name, $site_guid = 0) {
		$name = trim($name);

		$site_guid = (int) $site_guid;
		if ($site_guid == 0) {
			$site_guid = (int) $this->CONFIG->site_guid;
		}

		if ($site_guid == $this->CONFIG->site_guid && isset($this->CONFIG->$name)) {
			unset($this->CONFIG->$name);
		}

		$escaped_name = sanitize_string($name);
		$query = "DELETE FROM {$this->CONFIG->dbprefix}config WHERE name = '$escaped_name' AND site_guid = $site_guid";

		_elgg_services()->boot->invalidateCache($site_guid);

		return _elgg_services()->db->deleteData($query) !== false;
	}

	/**
	 * Add or update a config setting.
	 *
	 * Plugin authors should use elgg_set_config().
	 *
	 * If the config name already exists, it will be updated to the new value.
	 *
	 * @warning Names should be selected so as not to collide with the names for the
	 * datalist (application configuration)
	 *
	 * @note Internal: These settings are stored in the dbprefix_config table and read
	 * during system boot into $CONFIG.
	 *
	 * @note Internal: The value is serialized so we maintain type information.
	 *
	 * @param string $name      The name of the configuration value
	 * @param mixed  $value     Its value
	 * @param int    $site_guid Optionally, the GUID of the site (current site is assumed by default)
	 *
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_UNSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_CALL))
                (
                    (AST_VAR)))
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_UNSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_CALL))
                (
                    (AST_VAR)))
            (AST_CONST))))