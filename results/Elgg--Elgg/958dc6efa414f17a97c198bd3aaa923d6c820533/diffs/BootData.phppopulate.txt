||||||||	public function populate(\stdClass $config, Database $db, EntityTable $entities, Plugins $plugins) {
		// get datalists
		// do not store site key in cache. The others we've already fetched.
		$rows = $db->getData("
			SELECT *
			FROM {$db->getTablePrefix()}datalists
			WHERE `name` NOT IN ('__site_secret__', 'default_site', 'dataroot')
		");
		$this->datalist_cache = new InMemory();
		foreach ($rows as $row) {
			$this->datalist_cache->put($row->name, $row->value);
		}

		// get subtypes
		$rows = $db->getData("
			SELECT *
			FROM {$db->getTablePrefix()}entity_subtypes
		");
		foreach ($rows as $row) {
			$this->subtype_data[$row->id] = $row;
		}

		// get site entity
		$this->site = $entities->get($config->site_guid, 'site');
		if (!$this->site) {
			throw new \InstallationException("Unable to handle this request. This site is not configured or the database is down.");
		}

		// get config
		$rows = $db->getData("
			SELECT *
			FROM {$db->getTablePrefix()}config
			WHERE site_guid = {$config->site_guid}
		");
		foreach ($rows as $row) {
			$this->config_values[$row->name] = unserialize($row->value);
		}

		// get plugins
		$this->active_plugins = $plugins->find('active', $config->site_guid);

		// get plugin settings
		if (!$this->active_plugins) {
			return;
		}

		// find GUIDs with not too many private settings
		$guids = array_map(function (\ElggPlugin $plugin) {
			return $plugin->guid;
		}, $this->active_plugins);

		// find plugin GUIDs with not too many settings
		$limit = 40;
		$set = implode(',', $guids);
		$sql = "
			SELECT entity_guid
			FROM {$db->getTablePrefix()}private_settings
			WHERE entity_guid IN ($set)
			  AND name NOT LIKE 'plugin:user_setting:%'
			  AND name NOT LIKE 'elgg:internal:%'
			GROUP BY entity_guid
			HAVING COUNT(*) > $limit
		";
		$unsuitable_guids = $db->getData($sql, function ($row) {
			return (int)$row->entity_guid;
		});
		$guids = array_values($guids);
		$guids = array_diff($guids, $unsuitable_guids);

		// get the settings
		$set = implode(',', $guids);
		$rows = $db->getData("
			SELECT entity_guid, `name`, `value`
			FROM {$db->getTablePrefix()}private_settings
			WHERE entity_guid IN ($set)
			  AND name NOT LIKE 'plugin:user_setting:%'
			  AND name NOT LIKE 'elgg:internal:%'
			ORDER BY entity_guid
		");
		// make sure we show all entities as loaded
		$this->plugin_settings = array_fill_keys($guids, []);
		foreach ($rows as $i => $row) {
			$this->plugin_settings[$row->entity_guid][$row->name] = $row->value;
		}
	}

	/**
	 * Get the site entity
	 *
	 * @return \ElggSite
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_PROP
                                (AST_VAR)))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CAST
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (AST_PROP
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR))))))