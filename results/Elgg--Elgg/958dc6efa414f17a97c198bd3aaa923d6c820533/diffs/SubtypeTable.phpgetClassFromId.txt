	function getClassFromId($subtype_id) {
		global $SUBTYPE_CACHE;

		if (!$subtype_id) {
			return null;
		}

		if ($SUBTYPE_CACHE === null) {
			$this->populateCache();
		}

		if (isset($SUBTYPE_CACHE[$subtype_id])) {
			return $SUBTYPE_CACHE[$subtype_id]->class;
		}

		return null;
	}

	/**
	 * Register \ElggEntities with a certain type and subtype to be loaded as a specific class.
	 *
	 * By default entities are loaded as one of the 4 parent objects: site, user, object, or group.
	 * If you subclass any of these you can register the classname with add_subtype() so
	 * it will be loaded as that class automatically when retrieved from the database with
	 * {@link get_entity()}.
	 *
	 * @warning This function cannot be used to change the class for a type-subtype pair.
	 * Use update_subtype() for that.
	 *
	 * @param string $type    The type you're subtyping (site, user, object, or group)
	 * @param string $subtype The subtype
	 * @param string $class   Optional class name for the object
	 *
	 * @return int
	 * @see update_subtype()
	 * @see remove_subtype()
	 * @see get_entity()
	 */
||||||||	function getClassFromId($subtype_id) {
		if (!$subtype_id) {
			return null;
		}

		if ($this->cache === null) {
			$this->populateCache();
		}

		if (isset($this->cache[$subtype_id])) {
			return $this->cache[$subtype_id]->class;
		}

		return null;
	}

	/**
	 * Register \ElggEntities with a certain type and subtype to be loaded as a specific class.
	 *
	 * By default entities are loaded as one of the 4 parent objects: site, user, object, or group.
	 * If you subclass any of these you can register the classname with add_subtype() so
	 * it will be loaded as that class automatically when retrieved from the database with
	 * {@link get_entity()}.
	 *
	 * @warning This function cannot be used to change the class for a type-subtype pair.
	 * Use update_subtype() for that.
	 *
	 * @param string $type    The type you're subtyping (site, user, object, or group)
	 * @param string $subtype The subtype
	 * @param string $class   Optional class name for the object
	 *
	 * @return int
	 * @see update_subtype()
	 * @see remove_subtype()
	 * @see get_entity()
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CONST)))