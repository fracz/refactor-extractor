	function getAccessList($user_guid = 0, $site_guid = 0, $flush = false) {
		global $init_finished;
		$cache = _elgg_get_access_cache();

		if ($flush) {
			$cache->clear();
		}

		if ($user_guid == 0) {
			$user_guid = _elgg_services()->session->getLoggedInUserGuid();
		}

		if (($site_guid == 0) && (isset($this->CONFIG->site_id))) {
			$site_guid = $this->CONFIG->site_id;
		}
		$user_guid = (int) $user_guid;
		$site_guid = (int) $site_guid;

		$hash = $user_guid . $site_guid . 'get_access_list';

		if ($cache[$hash]) {
			return $cache[$hash];
		}

		$access_array = get_access_array($user_guid, $site_guid, $flush);
		$access = "(" . implode(",", $access_array) . ")";

		if ($init_finished) {
			$cache[$hash] = $access;
		}

		return $access;
	}

	/**
	 * Returns an array of access IDs a user is permitted to see.
	 *
	 * Can be overridden with the 'access:collections:read', 'user' plugin hook.
	 * @warning A callback for that plugin hook needs to either not retrieve data
	 * from the database that would use the access system (triggering the plugin again)
	 * or ignore the second call. Otherwise, an infinite loop will be created.
	 *
	 * This returns a list of all the collection ids a user owns or belongs
	 * to plus public and logged in access levels. If the user is an admin, it includes
	 * the private access level.
	 *
	 * @internal this is only used in core for creating the SQL where clause when
	 * retrieving content from the database. The friends access level is handled by
	 * _elgg_get_access_where_sql().
	 *
	 * @see get_write_access_array() for the access levels that a user can write to.
	 *
	 * @param int  $user_guid User ID; defaults to currently logged in user
	 * @param int  $site_guid Site ID; defaults to current site
	 * @param bool $flush     If set to true, will refresh the access ids from the
	 *                        database rather than using this function's cache.
	 *
	 * @return array An array of access collections ids
	 */
||||||||	function getAccessList($user_guid = 0, $site_guid = 0, $flush = false) {
		global $init_finished;
		$cache = _elgg_services()->accessCache;

		if ($flush) {
			$cache->clear();
		}

		if ($user_guid == 0) {
			$user_guid = _elgg_services()->session->getLoggedInUserGuid();
		}

		if (($site_guid == 0) && $this->site_guid) {
			$site_guid = $this->site_guid;
		}
		$user_guid = (int) $user_guid;
		$site_guid = (int) $site_guid;

		$hash = $user_guid . $site_guid . 'get_access_list';

		if ($cache[$hash]) {
			return $cache[$hash];
		}

		$access_array = get_access_array($user_guid, $site_guid, $flush);
		$access = "(" . implode(",", $access_array) . ")";

		if ($init_finished) {
			$cache[$hash] = $access;
		}

		return $access;
	}

	/**
	 * Returns an array of access IDs a user is permitted to see.
	 *
	 * Can be overridden with the 'access:collections:read', 'user' plugin hook.
	 * @warning A callback for that plugin hook needs to either not retrieve data
	 * from the database that would use the access system (triggering the plugin again)
	 * or ignore the second call. Otherwise, an infinite loop will be created.
	 *
	 * This returns a list of all the collection ids a user owns or belongs
	 * to plus public and logged in access levels. If the user is an admin, it includes
	 * the private access level.
	 *
	 * @internal this is only used in core for creating the SQL where clause when
	 * retrieving content from the database. The friends access level is handled by
	 * _elgg_get_access_where_sql().
	 *
	 * @see get_write_access_array() for the access levels that a user can write to.
	 *
	 * @param int  $user_guid User ID; defaults to currently logged in user
	 * @param int  $site_guid Site ID; defaults to current site
	 * @param bool $flush     If set to true, will refresh the access ids from the
	 *                        database rather than using this function's cache.
	 *
	 * @return array An array of access collections ids
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_CALL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_DIM
                (AST_VAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_CALL)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_CALL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_DIM
                (AST_VAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))