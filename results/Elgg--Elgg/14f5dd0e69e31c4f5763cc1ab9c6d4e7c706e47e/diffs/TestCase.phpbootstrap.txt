	public static function bootstrap() {

		date_default_timezone_set('America/Los_Angeles');

		error_reporting(E_ALL | E_STRICT);

		$config = new Config((object) self::getTestingConfigArray());
		$sp = new ServiceProvider($config);

		$sp->setFactory('plugins', function(ServiceProvider $c) {
			$pool = new InMemory();
			return new TestingPlugins($pool, $c->pluginSettingsCache);
		});

		$sp->setValue('mailer', new InMemoryTransport());

		$sp->siteSecret->setTestingSecret('z1234567890123456789012345678901');

		// persistentLogin service needs this set to instantiate without calling DB
		$sp->config->getCookieConfig();

		$app = new Application($sp);
		Application::setTestingApplication(true);
		Application::$_instance = $app;

		// loadCore bails on repeated calls, so we need to manually inject this to make
		// sure it happens before each test.
		$app->loadCore();
		_elgg_services($sp);

		// Invalidate memcache
		_elgg_get_memcache('new_entity_cache')->clear();

		self::$_mocks = null; // reset mocking service
	}

	/**
	 * Returns default testing configuration array
	 * @return array
	 */
||||||||	public static function bootstrap() {

		date_default_timezone_set('America/Los_Angeles');

		error_reporting(E_ALL | E_STRICT);

		$config = new Config(self::getTestingConfigArray());
		$sp = new ServiceProvider($config);

		$sp->setFactory('plugins', function(ServiceProvider $c) {
			$pool = new InMemory();
			return new TestingPlugins($pool, $c->pluginSettingsCache);
		});

		$sp->setValue('mailer', new InMemoryTransport());

		$sp->setValue('siteSecret', new SiteSecret('z1234567890123456789012345678901'));

		// persistentLogin service needs this set to instantiate without calling DB
		$sp->config->getCookieConfig();

		$app = new Application($sp);
		Application::setTestingApplication(true);
		Application::$_instance = $app;

		// loadCore bails on repeated calls, so we need to manually inject this to make
		// sure it happens before each test.
		$app->loadCore();
		_elgg_services($sp);

		// Invalidate memcache
		_elgg_get_memcache('new_entity_cache')->clear();

		self::$_mocks = null; // reset mocking service
	}

	/**
	 * Returns default testing configuration array
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CAST
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST)))