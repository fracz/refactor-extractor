||||||||	protected function getApp() {
		if ($this->app) {
			return $this->app;
		}

		$config = new Config();
		$config->elgg_config_locks = false;
		$config->installer_running = true;
		$config->dbencoding = 'utf8mb4';

		$this->config = $config;
		$this->services = new ServiceProvider($config);

		$app = Application::factory([
			'service_provider' => $this->services,
			'handle_exceptions' => false,
			'handle_shutdown' => false,

			// allows settings.php to be loaded, which might try to write to global $CONFIG
			// which is only a problem due to the config values that deep-write to arrays,
			// like cookies.
			'overwrite_global_config' => false,
		]);
		$app->loadCore();
		$this->app = $app;

		$this->services->setValue('session', \ElggSession::getMock());
		$this->services->views->setViewtype('installation');
		$this->services->views->registerPluginViews(Paths::elgg());
		$this->services->translator->registerTranslations(Paths::elgg() . "install/languages/", true);

		return $this->app;
	}

	/**
	 * Set the auto login flag
	 *
	 * @param bool $flag Auto login
	 *
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_BINARY_OP
                (AST_STATIC_CALL)
                (SCALAR))
            (AST_CONST)))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))