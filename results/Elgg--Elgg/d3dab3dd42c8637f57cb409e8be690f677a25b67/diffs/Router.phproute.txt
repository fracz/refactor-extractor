||||||||	public function route(Elgg_Request $request) {
		$handler = $request->getInput('handler');
		$page = $request->getInput('page');

		elgg_set_context($handler);

		$segments = explode('/', $page);
		// remove empty array element when page url ends in a / (see #1480)
		if ($segments[count($segments) - 1] === '') {
			array_pop($segments);
		}

		// return false to stop processing the request (because you handled it)
		// return a new $result array if you want to route the request differently
		$result = array(
			'handler' => $handler,
			'segments' => $segments,
		);
		$result = $this->hooks->trigger('route', $handler, null, $result);
		if ($result === false) {
			return true;
		}

		$handler = $result['handler'];
		$segments = $result['segments'];

		$handled = false;
		if (!empty($handler)
				&& isset($this->pagehandlers[$handler])
				&& is_callable($this->pagehandlers[$handler])) {
			$function = $this->pagehandlers[$handler];
			$handled = call_user_func($function, $segments, $handler);
		}

		return $handled || headers_sent();
	}


	/**
	 * @param string $handler  The page type to handle
	 * @param string $function Your function name
	 *
	 * @return bool Depending on success
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (AST_VAR)
                (AST_CONST)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_EMPTY
                            (AST_VAR)))
                    (AST_ISSET
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CALL))))