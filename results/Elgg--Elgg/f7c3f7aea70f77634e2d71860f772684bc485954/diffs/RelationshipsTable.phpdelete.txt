	function delete($id, $call_event = true) {
		$id = (int)$id;

		$relationship = $this->get($id);

		if ($call_event && !_elgg_services()->events->trigger('delete', 'relationship', $relationship)) {
			return false;
		}

		return $this->db->deleteData("DELETE FROM {$this->db->getTablePrefix()}entity_relationships WHERE id = $id");
	}

	/**
	 * Create a relationship between two entities. E.g. friendship, group membership, site membership.
	 *
	 * This function lets you make the statement "$guid_one is a $relationship of $guid_two". In the statement,
	 * $guid_one is the subject of the relationship, $guid_two is the target, and $relationship is the type.
	 *
	 * @param int    $guid_one     GUID of the subject entity of the relationship
	 * @param string $relationship Type of the relationship
	 * @param int    $guid_two     GUID of the target entity of the relationship
	 *
	 * @return bool
	 * @throws \InvalidArgumentException
	 */
||||||||	public function delete($id, $call_event = true) {
		$id = (int)$id;

		$relationship = $this->get($id);

		if ($call_event && !$this->events->trigger('delete', 'relationship', $relationship)) {
			return false;
		}

		return $this->db->deleteData("DELETE FROM {$this->db->getTablePrefix()}entity_relationships WHERE id = $id");
	}

	/**
	 * Create a relationship between two entities. E.g. friendship, group membership, site membership.
	 *
	 * This function lets you make the statement "$guid_one is a $relationship of $guid_two". In the statement,
	 * $guid_one is the subject of the relationship, $guid_two is the target, and $relationship is the type.
	 *
	 * @param int    $guid_one     GUID of the subject entity of the relationship
	 * @param string $relationship Type of the relationship
	 * @param int    $guid_two     GUID of the target entity of the relationship
	 *
	 * @return bool
	 * @throws \InvalidArgumentException
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_CALL))
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR)
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR)
                    (AST_VAR))))))