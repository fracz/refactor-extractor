	public static function setupMockServices($reset = true) {

		if ($reset) {
			// Individual tests can reset service providers to get a clean global state
			self::bootstrap();
		}

		_elgg_services()->setValue('session', self::mocks()->session);
		_elgg_services()->setValue('db', self::mocks()->db);
		_elgg_services()->setValue('entityTable', self::mocks()->entityTable);
		_elgg_services()->setValue('metadataTable', self::mocks()->metadataTable);
		_elgg_services()->setValue('metastringsTable', self::mocks()->metastringsTable);
		_elgg_services()->setValue('annotations', self::mocks()->annotations);
		_elgg_services()->setValue('relationshipsTable', self::mocks()->relationshipsTable);
		_elgg_services()->setValue('accessCollections', self::mocks()->accessCollections);
		_elgg_services()->setValue('subtypeTable', self::mocks()->subtypeTable);
		_elgg_services()->setValue('datalist', self::mocks()->datalist);

		$dt = new DateTime();
		_elgg_services()->entityTable->setCurrentTime($dt);
		_elgg_services()->metadataTable->setCurrentTime($dt);
		_elgg_services()->relationshipsTable->setCurrentTime($dt);
		_elgg_services()->annotations->setCurrentTime($dt);
		_elgg_services()->usersTable->setCurrentTime($dt);
	}

	/**
	 * Create an HTTP request
	 *
	 * @param string $uri             URI of the request
	 * @param string $method          HTTP method
	 * @param array  $parameters      Query/Post parameters
	 * @param int    $ajax            AJAX api version (0 for non-ajax)
	 * @param bool   $add_csrf_tokens Add CSRF tokens
	 * @return Request
	 */
||||||||	public static function setupMockServices($reset = true) {

		if ($reset) {
			// Individual tests can reset service providers to get a clean global state
			self::bootstrap();
		}

		_elgg_services()->setValue('session', self::mocks()->session);
		_elgg_services()->setValue('db', self::mocks()->db);
		_elgg_services()->setValue('entityTable', self::mocks()->entityTable);
		_elgg_services()->setValue('metadataTable', self::mocks()->metadataTable);
		_elgg_services()->setValue('metastringsTable', self::mocks()->metastringsTable);
		_elgg_services()->setValue('annotations', self::mocks()->annotations);
		_elgg_services()->setValue('relationshipsTable', self::mocks()->relationshipsTable);
		_elgg_services()->setValue('accessCollections', self::mocks()->accessCollections);
		_elgg_services()->setValue('privateSettings', self::mocks()->privateSettings);
		_elgg_services()->setValue('subtypeTable', self::mocks()->subtypeTable);
		_elgg_services()->setValue('datalist', self::mocks()->datalist);

		$dt = new DateTime();
		_elgg_services()->entityTable->setCurrentTime($dt);
		_elgg_services()->metadataTable->setCurrentTime($dt);
		_elgg_services()->relationshipsTable->setCurrentTime($dt);
		_elgg_services()->annotations->setCurrentTime($dt);
		_elgg_services()->usersTable->setCurrentTime($dt);
	}

	/**
	 * Create an HTTP request
	 *
	 * @param string $uri             URI of the request
	 * @param string $method          HTTP method
	 * @param array  $parameters      Query/Post parameters
	 * @param int    $ajax            AJAX api version (0 for non-ajax)
	 * @param bool   $add_csrf_tokens Add CSRF tokens
	 * @return Request
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_VAR))))