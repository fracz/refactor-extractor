	function delete($id) {
		if (!$id) {
			return false;
		}
		$result = true;
		$notices = elgg_get_entities_from_metadata(array(
			'metadata_name' => 'admin_notice_id',
			'metadata_value' => $id,
			'distinct' => false,
		));

		if ($notices) {
			// in case a bad plugin adds many, let it remove them all at once.
			foreach ($notices as $notice) {
				$result = ($result && $notice->delete());
			}
			return $result;
		}
		return false;
	}

	/**
	 * Get admin notices. An admin must be logged in since the notices are private.
	 *
	 * @param int $limit Limit
	 *
	 * @return array Array of admin notices
	 */
||||||||	function delete($id) {
		if (!$id) {
			return false;
		}

		$result = true;

		$notices = elgg_get_entities_from_metadata(array(
			'type' => 'object',
			'subtype' => 'admin_notice',
			'metadata_name' => 'admin_notice_id',
			'metadata_value' => $id,
			'limit' => false,
			'batch' => true,
			'batch_inc_offset' => false,
		));

		// in case a bad plugin adds many, let it remove them all at once.
		foreach ($notices as $notice) {
			$result = ($result && $notice->delete());
		}
		return $result;
	}

	/**
	 * Get admin notices. An admin must be logged in since the notices are private.
	 *
	 * @param int $limit Limit
	 *
	 * @return array Array of admin notices
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))