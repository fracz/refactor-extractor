	public function setUp() {
		$this->hooks = new \Elgg\PluginHooksService();
		$this->queue = new \Elgg\Queue\MemoryQueue();
		$dbMock = $this->getMockBuilder('\Elgg\Database')
				->disableOriginalConstructor()
				->getMock();
		$this->sub = new \Elgg\Notifications\SubscriptionsService($dbMock);
		$this->translator = new \Elgg\I18n\Translator();
		$this->session = \ElggSession::getMock();

		// User mock that supports calling $user->isBanned()
		$user_123 = $this->getMockBuilder('\ElggEntity')
				->disableOriginalConstructor()
				->getMock();
		$user_123->expects($this->any())
				->method('isBanned')
				->will($this->returnValue(false));

		// Database mock that returns the user_123
		$this->entities = $this->getMockBuilder('\Elgg\Database\EntityTable')
				->disableOriginalConstructor()
				->getMock();
		$this->entities->expects($this->any())
				->method('get')
				->with($this->equalTo('123'))
				->will($this->returnValue($user_123));

		// Event class has dependency on elgg_get_logged_in_user_guid()
		_elgg_services()->setValue('session', $this->session);
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR)))))||||||||