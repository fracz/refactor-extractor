	public function testIgnoresNonRequiredUpgrade() {
		// Mock an upgrade that does not need to be ran
		$this->plugin
			->expects($this->any())
			->method('getStaticConfig')
			->will($this->returnCallback(function($name) {
				if ($name == 'upgrades') {
					return [\Elgg\Upgrade\NonRequiredTestBatch::class];
				}
			}));

		$upgrades = _elgg_services()->upgradeLocator->getUpgrades($this->plugin);

		$this->assertEmpty($upgrades);
	}
}||||||||	public function testIgnoresNonRequiredUpgrade() {
		$class = \Elgg\Upgrade\NonRequiredTestBatch::class;

		$upgrade = _elgg_services()->upgradeLocator->getUpgrade($class, 'test_plugin');

		$this->assertEmpty($upgrade);
	}
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (
                                        (AST_RETURN
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (AST_CLASS_CONST
                                                        (SCALAR))
                                                    (NULL)))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_CALL))
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_CALL))
            (
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))