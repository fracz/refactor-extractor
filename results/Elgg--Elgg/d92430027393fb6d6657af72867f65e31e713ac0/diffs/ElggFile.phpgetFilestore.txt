	protected function getFilestore() {
		// Short circuit if already set.
		if ($this->filestore) {
			return $this->filestore;
		}

		// ask for entity specific filestore
		// saved as filestore::className in metadata.
		// need to get all filestore::* metadata because the rest are "parameters" that
		// get passed to filestore::setParameters()
		if ($this->guid) {
			$options = array(
				'guid' => $this->guid,
				'where' => array("n.string LIKE 'filestore::%'"),
			);

			$mds = elgg_get_metadata($options);

			$parameters = array();
			foreach ($mds as $md) {
				list( , $name) = explode("::", $md->name);
				if ($name == 'filestore') {
					$filestore = $md->value;
				}
				$parameters[$name] = $md->value;
			}
		}

		// need to check if filestore is set because this entity is loaded in save()
		// before the filestore metadata is saved.
		if (isset($filestore)) {
			if (!class_exists($filestore)) {
				$msg = "Unable to load filestore class " . $filestore . " for file " . $this->guid;
				throw new \ClassNotFoundException($msg);
			}

			$this->filestore = new $filestore();
			$this->filestore->setParameters($parameters);
			// @todo explain why $parameters will always be set here (PhpStorm complains)
		}

		// this means the entity hasn't been saved so fallback to default
		if (!$this->filestore) {
			$this->filestore = get_default_filestore();
		}

		return $this->filestore;
	}

	/**
	 * Save the file
	 *
	 * Write the file's data to the filestore and save
	 * the corresponding entity.
	 *
	 * @see \ElggObject::save()
	 *
	 * @return bool
	 */
||||||||	protected function getFilestore() {
		if ($this->filestore) {
			// already set
			return $this->filestore;
		}

		// such a common case we just assume for now
		$this->filestore = get_default_filestore();

		if (!$this->guid) {
			return $this->filestore;
		}

		$class = $this->{'filestore::filestore'};
		if (!$class) {
			return $this->filestore;
		}

		// common case
		if ($class === ElggDiskFilestore::class
				&& $this->{'filestore::dir_root'} === _elgg_services()->config->getDataPath()) {
			return $this->filestore;
		}

		if (!class_exists($class)) {
			$this->filestore = null;
			throw new \ClassNotFoundException("Unable to load filestore class $class for file {$this->guid}");
		}

		// need to get all filestore::* metadata because the rest are "parameters" that
		// get passed to filestore::setParameters()
		$mds = elgg_get_metadata([
			'guid' => $this->guid,
			'where' => array("n.string LIKE 'filestore::%'"),
		]);
		$parameters = [];
		foreach ($mds as $md) {
			list( , $name) = explode("::", $md->name);
			if ($name !== 'filestore') {
				$parameters[$name] = $md->value;
			}
		}

		$this->filestore = new $class();
		$this->filestore->setParameters($parameters);
		return $this->filestore;
	}

	/**
	 * Save the file
	 *
	 * Write the file's data to the filestore and save
	 * the corresponding entity.
	 *
	 * @see \ElggObject::save()
	 *
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_ARRAY
                                (NULL)
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL)))
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_NEW
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL)))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_CALL)))))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_ARRAY
                    (NULL)
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))