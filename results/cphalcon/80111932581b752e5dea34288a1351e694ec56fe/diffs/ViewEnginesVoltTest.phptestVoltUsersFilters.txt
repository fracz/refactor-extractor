||||||||	public function testVoltUsersFilters()
	{

		$volt = new \Phalcon\Mvc\View\Engine\Volt\Compiler();

		//Single string filter
		$volt->addFilter('reverse', 'strrev');

		//Filter with closure
		$volt->addFilter('separate', function($arguments, $exprArguments){
			return 'explode(",", '.$arguments.')';
		});

		$compilation = $volt->compileString('{{ "hello"|reverse }}');
		$this->assertEquals($compilation, '<?php echo strrev(\'hello\'); ?>');

		$compilation = $volt->compileString('{{ "1,2,3,4"|separate }}');
		$this->assertEquals($compilation, '<?php echo explode(",", \'1,2,3,4\'); ?>');

	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR))))