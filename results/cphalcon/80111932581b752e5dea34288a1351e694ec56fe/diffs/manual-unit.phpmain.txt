	public static function main($className)
	{
		echo 'Testing ', $className, ' ';
		if (class_exists($className, false)) {
			$class = new $className();
			if (method_exists($class, 'setUp')) {
				$class->setUp();
			}
			$reflectionClass = new ReflectionClass($class);
			$hasSetup = $reflectionClass->hasMethod('setUp');
			foreach ($reflectionClass->getMethods() as $method) {
				$methodName = $method->getName();
				if (substr($methodName, 0, 4) == 'test') {
					if ($hasSetup) {
						$class->setUp();
					}
					$class->$methodName();
				}
			}
		}
		echo '[OK]', PHP_EOL;
	}

}

if (PHP_OS == 'Linux') {
	if(isset($_SERVER['LOGNAME']) && $_SERVER['LOGNAME']=='gutierrezandresfelipe'){
		chdir('/home/gutierrezandresfelipe/cphalcon');
	}
}

if (!extension_loaded('phalcon')) {
	throw new Exception("Sorry, but phalcon extension is not loaded");
}

try {
	if (isset($_SERVER['argv'][1])) {
		$file = $_SERVER['argv'][1];
		require $_SERVER['argv'][1];
		if (isset($_SERVER['argv'][2])) {
			$className = $_SERVER['argv'][2];
		} else {
			if (preg_match('#/([a-zA-Z0-9]+)\.php$#', $_SERVER['argv'][1], $matches)) {
				$className = $matches[1];
			} else {
				throw new Exception("class-name plz");
			}
		}
		PHPUnit_Framework_TestCase::main($className);
	} else {
		$xml = simplexml_load_file('unit-tests/phpunit.xml');
		foreach ($xml->testsuites as $suite) {
			foreach ($suite->testsuite->file as $file) {
				$fileName = (string) $file;
				if (preg_match('#/([a-zA-Z0-9]+)\.php$#', $fileName, $matches)) {
					require $fileName;
					PHPUnit_Framework_TestCase::main($matches[1]);
				} else {
					throw new Exception("$file plz");
				}
			}
		}
	}
}
catch(Exception $e){
	echo $e->getMessage(), PHP_EOL;
	echo $e->getTraceAsString(), PHP_EOL;
	//print_r($e->getTrace());
}||||||||	public static function main($className)
	{
		echo 'Testing ', $className, ' ';
		if (class_exists($className, false)) {
			$class = new $className();
			if (method_exists($class, 'setUp')) {
				$class->setUp();
			}
			$reflectionClass = new ReflectionClass($class);
			$hasSetup = $reflectionClass->hasMethod('setUp');
			foreach ($reflectionClass->getMethods() as $method) {
				$methodName = $method->getName();
				if (substr($methodName, 0, 4) == 'test') {
					if ($hasSetup) {
						$class->setUp();
					}
					$class->$methodName();
				}
			}
		}
		echo '[OK]', ' (', memory_get_usage(true), ') (', memory_get_usage(false), ')', PHP_EOL;
	}

}

if (PHP_OS == 'Linux') {
	if(isset($_SERVER['LOGNAME']) && $_SERVER['LOGNAME']=='gutierrezandresfelipe'){
		chdir('/home/gutierrezandresfelipe/cphalcon');
	}
}

if (!extension_loaded('phalcon')) {
	throw new Exception("Sorry, but phalcon extension is not loaded");
}

try {
	if (isset($_SERVER['argv'][1])) {
		$file = $_SERVER['argv'][1];
		require $_SERVER['argv'][1];
		if (isset($_SERVER['argv'][2])) {
			$className = $_SERVER['argv'][2];
		} else {
			if (preg_match('#/([a-zA-Z0-9]+)\.php$#', $_SERVER['argv'][1], $matches)) {
				$className = $matches[1];
			} else {
				throw new Exception("class-name plz");
			}
		}
		PHPUnit_Framework_TestCase::main($className);
	} else {
		$xml = simplexml_load_file('unit-tests/phpunit.xml');
		foreach ($xml->testsuites as $suite) {
			foreach ($suite->testsuite->file as $file) {
				$fileName = (string) $file;
				if (preg_match('#/([a-zA-Z0-9]+)\.php$#', $fileName, $matches)) {
					require $fileName;
					PHPUnit_Framework_TestCase::main($matches[1]);
				} else {
					throw new Exception("$file plz");
				}
			}
		}
	}
}
catch(Exception $e){
	echo $e->getMessage(), PHP_EOL;
	//echo $e->getTraceAsString(), PHP_EOL;
	print_r($e->getTrace());
}

if (function_exists('xhprof_enable')) {

	$xhprof_data = xhprof_disable('/tmp');

	$XHPROF_ROOT = "/var/www/xhprof/";
	include_once $XHPROF_ROOT . "/xhprof_lib/utils/xhprof_lib.php";
	include_once $XHPROF_ROOT . "/xhprof_lib/utils/xhprof_runs.php";

	$xhprof_runs = new XHProfRuns_Default();
	$run_id = $xhprof_runs->save_run($xhprof_data, "xhprof_testing");

	echo "http://192.168.0.27/xhprof/xhprof_html/index.php?run={$run_id}&source=xhprof_testing\n";

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (SCALAR)))
                                    (SCALAR))
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_VAR)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (SCALAR)))
                                    (SCALAR))
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_VAR)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CONST)))