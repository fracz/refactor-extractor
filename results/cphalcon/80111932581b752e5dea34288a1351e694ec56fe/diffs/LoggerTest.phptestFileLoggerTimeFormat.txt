||||||||	public function testFileLoggerTimeFormat()
	{

		@unlink('unit-tests/logs/test.log');
		$logger = new Phalcon\Logger\Adapter\File('unit-tests/logs/test.log');

		$logger->debug("Hello 1");

		$lines = file('unit-tests/logs/test.log');
		$this->assertEquals(count($lines), 1);

		preg_match('#^\[(.*?)\]#', $lines[0], $match);

		$this->assertTrue(count($match)===2);

		$date = new DateTime($match[1]);

		$this->assertTrue($date->format('Y-m-d') === date('Y-m-d'));

	}

}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_UNARY_OP
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_CALL
                    (
                        (SCALAR)))))))