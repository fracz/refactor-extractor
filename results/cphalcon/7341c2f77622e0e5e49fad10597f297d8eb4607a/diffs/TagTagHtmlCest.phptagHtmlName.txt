||||||||    private function tagHtmlName(CodeGuy $I, $xhtml)
    {
        if ($xhtml) {
            PhTag::setDocType(PhTag::XHTML10_STRICT);
        } else {
            PhTag::setDocType('');
        }

        $name     = 'aside';
        $expected = ($xhtml) ? '<aside>' : '<aside></aside>';
        $message  = ($xhtml) ? ' XHTML'  : '';
        $actual   = PhTag::tagHtml($name);
        if ($xhtml) {
            PhTag::setDocType('');
        }

        $I->assertEquals(
            $expected,
            $actual,
            sprintf($this->message, 'tagHtml bare' . $message)
        );
    }

    /**
     * Runs the test for tagHtml with name parameter and self close for XHTML or not
     *
     * @author Nikolaos Dimopoulos <nikos@phalconphp.com>
     * @since  2014-09-05
     *
     * @param CodeGuy $I
     * @param Boolean $xhtml
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR)))))))