    public function testVersionGetPart()
    {
        $this->specify(
            "getPart(VERSION_MAJOR) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = intval($id[PhTVersion::VERSION_MAJOR]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_MAJOR);

                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "getPart(VERSION_MEDIUM) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = intval($id[PhTVersion::VERSION_MEDIUM]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_MEDIUM);

                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "getPart(VERSION_MINOR) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = intval($id[PhTVersion::VERSION_MINOR]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_MINOR);

                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "getPart(VERSION_SPECIAL) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = $this->numberToSpecial($id[5]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_SPECIAL);

                expect($actual)->equals($expected);
            }
        );

        /*$this->specify(
            "getPart(VERSION_SPECIAL_NUMBER) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $special  = $this->numberToSpecial($id[5]);
                $expected = ($special) ? $id[6] : '';
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_SPECIAL_NUMBER);

                expect($actual)->equals($expected);
            }
        );*/

        $this->specify(
            "getPart() with incorrect parameters does not return get()",
            function () {
                $expected = PhTVersion::get();
                $actual   = PhTVersion::getPart(7);

                expect($actual)->equals($expected);
            }
        );
    }

    /**
     * Translates a special version (ALPHA, BETA, RC) to a version number
     *
     * @author Nikolaos Dimopoulos <nikos@phalconphp.com>
     * @since  2014-09-04
     *
     * @param $input
     *
     * @return string
     */
||||||||    public function testVersionGetPart()
    {
        $this->specify(
            "getPart(VERSION_MAJOR) does not return the correct result",
            function () {

                $id       = PhTVersion::getId();
                $expected = intval($id[PhTVersion::VERSION_MAJOR]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_MAJOR);

                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "getPart(VERSION_MEDIUM) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = intval($id[PhTVersion::VERSION_MEDIUM]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_MEDIUM);

                expect($actual)->equals($expected);
            }
        );

        /*$this->specify(
            "getPart(VERSION_MINOR) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = intval($id[PhTVersion::VERSION_MINOR]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_MINOR);

                expect($actual)->equals($expected);
            }
        );*/

        $this->specify(
            "getPart(VERSION_SPECIAL) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $expected = $this->numberToSpecial($id[5]);
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_SPECIAL);

                expect($actual)->equals($expected);
            }
        );

        /*$this->specify(
            "getPart(VERSION_SPECIAL_NUMBER) does not return the correct result",
            function () {
                $id       = PhTVersion::getId();
                $special  = $this->numberToSpecial($id[5]);
                $expected = ($special) ? $id[6] : '';
                $actual   = PhTVersion::getPart(PhTVersion::VERSION_SPECIAL_NUMBER);

                expect($actual)->equals($expected);
            }
        );*/

        $this->specify(
            "getPart() with incorrect parameters does not return get()",
            function () {
                $expected = PhTVersion::get();
                $actual   = PhTVersion::getPart(7);

                expect($actual)->equals($expected);
            }
        );
    }

    /**
     * Translates a special version (ALPHA, BETA, RC) to a version number
     *
     * @author Nikolaos Dimopoulos <nikos@phalconphp.com>
     * @since  2014-09-04
     *
     * @param $input
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR))))))))