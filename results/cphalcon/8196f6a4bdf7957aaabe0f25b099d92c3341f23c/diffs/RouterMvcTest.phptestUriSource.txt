	public function testUriSource()
	{
		$_GET['_url'] = '/some/route';

		$router = new Phalcon\Mvc\Router(false);

		$this->assertEquals($router->getRewriteUri(), '/some/route');

		$router->setUriSource(Phalcon\Mvc\Router::URI_SOURCE_GET_URL);

		$this->assertEquals($router->getRewriteUri(), '/some/route');

		$router->setUriSource(Phalcon\Mvc\Router::URI_SOURCE_SERVER_REQUEST_URI);

		$_SERVER['REQUEST_URI'] = '/some/route';

		$this->assertEquals($router->getRewriteUri(), '/some/route');

		$_SERVER['REQUEST_URI'] = '/some/route?x=1';

		$this->assertEquals($router->getRewriteUri(), '/some/route');
	}

||||||||	public function testUriSource()
	{
		Phalcon\Mvc\Router\Route::reset();

		$_GET['_url'] = '/some/route';

		$router = new Phalcon\Mvc\Router(false);

		$this->assertEquals($router->getRewriteUri(), '/some/route');

		$router->setUriSource(Phalcon\Mvc\Router::URI_SOURCE_GET_URL);

		$this->assertEquals($router->getRewriteUri(), '/some/route');

		$router->setUriSource(Phalcon\Mvc\Router::URI_SOURCE_SERVER_REQUEST_URI);

		$_SERVER['REQUEST_URI'] = '/some/route';

		$this->assertEquals($router->getRewriteUri(), '/some/route');

		$_SERVER['REQUEST_URI'] = '/some/route?x=1';

		$this->assertEquals($router->getRewriteUri(), '/some/route');
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR))))