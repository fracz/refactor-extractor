    public function testAssetsFilterChainCustomFilterWithCssmin()
    {
        $this->markTestSkipped('To be tested');
        $this->specify(
            "The chaining a custom filter with cssmin does not return the correct results",
            function () {

                $fileName = newFileName('assets_', 'css');
                $this->prepareDI();

                $assets = new PhTAssetsManager();
                $assets->useImplicitOutput(false);
                $css = $assets->collection('css');

                $css->setTargetPath(PATH_CACHE . $fileName);
                $css->addCss(PATH_DATA . '/assets/1198.css');
                $css->addFilter(new Helper\UppercaseFilter());
                $css->addFilter(new Helper\TrimFilter());
                $css->join(true);
                $assets->outputCss('css');

                $expected = 'A{TEXT-DECORATION:NONE;}B{FONT-WEIGHT:BOLD;}';
                $actual   = file_get_contents(PATH_CACHE . $fileName);

                cleanFile(PATH_CACHE, $fileName);

                expect($actual)->equals($expected);
            }
        );
    }

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_VAR)))))
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR))))))))||||||||