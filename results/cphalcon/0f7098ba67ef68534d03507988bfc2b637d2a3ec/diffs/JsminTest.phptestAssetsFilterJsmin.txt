||||||||    public function testAssetsFilterJsmin()
    {
        $this->specify(
            "The jsmin filter does not work correctly",
            function () {
                $jsmin = new Jsmin();

                expect($jsmin->filter('{}}'))->equals("\n" . '{}}');
                expect($jsmin->filter('if ( a == b ) {    document . writeln("hello") ; }'))->equals("\n" . 'if(a==b){document.writeln("hello");}');
                expect($jsmin->filter("if ( a == b ) {    document . writeln('\t') ; }"))->equals("\n" . "if(a==b){document.writeln('\t');}");
                expect($jsmin->filter("/** this is a comment */ if ( a == b ) {    document . writeln('\t') ; /** this is a comment */ }"))->equals("\n" . "if(a==b){document.writeln('\t');}");
                expect($jsmin->filter("\t\ta\t\r\n= \n \r\n100;\t"))->equals("\n" . 'a=100;');
            }
        );
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR)))))))))