||||||||    public function testRandomNumeric()
    {
        $this->specify(
            "random with numeric does not return correct results",
            function () {

                for ($i = 1; $i < 10; $i++) {

                    $source = Text::random(Text::RANDOM_NUMERIC, $i);

                    expect(preg_match('/[0-9]+/', $source, $matches))->equals(1);
                    expect($matches[0])->equals($source);
                    expect(strlen($source))->equals($i);
                }
            }
        );
    }

    /**
     * Tests the random function with non zero
     *
     * @author Nikolaos Dimopoulos <nikos@phalconphp.com>
     * @since  2014-09-29
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_FOR
                        (AST_EXPR_LIST
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR)))
                        (AST_EXPR_LIST
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (AST_EXPR_LIST
                            (AST_POST_INC
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_VAR))))
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_VAR)))))
                                (
                                    (SCALAR)))
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))))
                                (
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))
                                (
                                    (AST_VAR))))))))))