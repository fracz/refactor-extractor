    public function testFilterMultiplesSourcesFilterJoin()
    {
        $this->markTestIncomplete('To be checked');
        @unlink('unit-tests/assets/production/combined-3.js');

        Phalcon\DI::reset();

        $di = new Phalcon\DI();

        $di['url'] = function () {
            $url = new Phalcon\Mvc\Url();
            $url->setStaticBaseUri('/');
            return $url;
        };

        $di->set(
            'escaper',
            function () {
                return new \Phalcon\Escaper();
            }
        );

        $assets = new PhTAssetsManager();

        $assets->useImplicitOutput(false);

        $js = $assets->collection('js');

        $js->setTargetUri('production/combined-3.js');
        $js->setTargetPath('unit-tests/assets/production/combined-3.js');

        $jquery = new PhTAssetsResourceJs('unit-tests/assets/jquery.js', false, false);

        $jquery->setTargetUri('jquery.js');

        $js->add($jquery);

        $gs = new PhTAssetsResourceJs('unit-tests/assets/gs.js');

        $gs->setTargetUri('gs.js');
        $gs->setTargetPath('gs.js');

        $js->add($gs);
        $js->join(true);

        //Use two filters
        $js->addFilter(new Phalcon\Assets\Filters\None());
        $js->addFilter(new Phalcon\Assets\Filters\None());

        $this->assertEquals(
            $assets->outputJs('js'),
            '<script type="text/javascript" src="/production/combined-3.js"></script>' .
            PHP_EOL
        );
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_UNARY_OP
        (AST_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CLOSURE
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_RETURN
                        (AST_NEW))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONST)))))||||||||