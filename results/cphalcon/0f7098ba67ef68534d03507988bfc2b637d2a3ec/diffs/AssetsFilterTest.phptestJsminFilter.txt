    public function testJsminFilter()
    {
        $this->markTestIncomplete('To be checked');
        $jsmin = new Phalcon\Assets\Filters\Jsmin();

        try {
            $filtered = $jsmin->filter(null);
        } catch (Exception $e) {
            $this->assertEquals($e->getMessage(), 'Script must be a string');
        }

        try {
            $filtered = $jsmin->filter('/*');
        } catch (Exception $e) {
            $this->assertEquals($e->getMessage(), 'Unterminated comment.');
        }

        try {
            $filtered = $jsmin->filter('a = "');
        } catch (Exception $e) {
            $this->assertEquals($e->getMessage(), 'Unterminated string literal.');
        }

        try {
            $filtered = $jsmin->filter('b = /[a-z]+');
        } catch (Exception $e) {
            $this->assertEquals($e->getMessage(), 'Unterminated Regular Expression literal.');
        }

        $filtered = $jsmin->filter('');
        $this->assertEquals($filtered, '');

        $filtered = $jsmin->filter('{}}');
        $this->assertEquals($filtered, "\n" . '{}}');

        $filtered = $jsmin->filter('if ( a == b ) {    document . writeln("hello") ; }');
        $this->assertEquals($filtered, "\n" . 'if(a==b){document.writeln("hello");}');

        $filtered = $jsmin->filter("if ( a == b ) {    document . writeln('\t') ; }");
        $this->assertEquals($filtered, "\n" . "if(a==b){document.writeln('\t');}");

        $filtered = $jsmin->filter(
            "/** this is a comment */ if ( a == b ) {    document . writeln('\t') ; /** this is a comment */ }"
        );
        $this->assertEquals($filtered, "\n" . "if(a==b){document.writeln('\t');}");

        $filtered = $jsmin->filter("\t\ta\t\r\n= \n \r\n100;\t");
        $this->assertEquals($filtered, "\n" . 'a=100;');
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR)))))||||||||