    public function testFilterSimpleNoJoin()
    {
        $this->markTestSkipped('To be tested');
        $this->specify(
            "The simple filter without join does not return the correct results",
            function () {

                $fileName = newFileName('assets_', 'js');

                $this->prepareDI(true);

                $assets = new PhTAssetsManager();

                $assets->useImplicitOutput(false);
                $js = $assets->collection('js');

                $js->setTargetPath(PATH_CACHE . $fileName);
                $js->setTargetUri('production/combined.js');
                $js->addJs('assets/assets-multiple-01.js', false, false);

                $actual   = $assets->outputJs('js');
                $expected = '<script type="text/javascript" '
                          . 'src="assets/assets-multiple-01.js"></script>'
                          . PHP_EOL;

                expect($actual)->equals($expected);
            }
        );

	//Enabling join
	$js->join(true);
	$this->assertEquals(
		$assets->outputJs('js'),
		'<script type="text/javascript" src="unit-tests/assets/jquery.js"></script>' .
		PHP_EOL
	);

	//Disabling join
	$js->join(false);
	$this->assertEquals(
		$assets->outputJs('js'),
		'<script type="text/javascript" src="unit-tests/assets/jquery.js"></script>' .
		PHP_EOL
	);

	//Filter - Join
	$js->join(false);
	$js->addFilter(new Phalcon\Assets\Filters\None());
	$this->assertEquals(
		$assets->outputJs('js'),
		'<script type="text/javascript" src="/unit-tests/assets/jquery.js"></script>' .
		PHP_EOL
	);
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CONST)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))
                            (AST_CONST)))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONST)))))||||||||