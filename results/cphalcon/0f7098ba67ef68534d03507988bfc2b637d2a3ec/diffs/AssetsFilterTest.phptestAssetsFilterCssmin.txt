    public function testAssetsFilterCssmin()
    {
        $this->specify(
            "The cssmin filter needs a string parameter",
            function () {

                $cssmin = new PhTFilterCssmin();
                try {
                    $actual = $cssmin->filter(null);
                } catch (\Exception $e) {
                    $actual   = $e->getMessage();
                    $expected = 'Style must by a string';
                    expect($actual)->equals($expected);
                }
            }
        );

        $this->specify(
            "The cssmin filter with empty parameter does not return empty back",
            function () {

                $cssmin = new PhTFilterCssmin();
                $actual = $cssmin->filter('');
                expect($actual)->isEmpty();
            }
        );

        $this->specify(
            "The cssmin filter with space as parameter does not return correct results",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $actual   = $cssmin->filter(' ');
                $expected = ' ';
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with brackets does not return correct results",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $actual   = $cssmin->filter('{}}');
                $expected = '{}}';
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with brackets and spaces does not return correct results",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $actual   = $cssmin->filter('.s { d     :        b; }');
                $expected = '.s{d : b;}';
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with proper CSS does not compress the contents",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $source   = ".social-link {display: inline-block; width: 44px; "
                          . "height: 44px; text-align: left; text-indent: "
                          . "-9999px; overflow: hidden; background: "
                          . "url('../images/social-links.png'); }";
                $actual   = $cssmin->filter($source);
                $expected = ".social-link{display: inline-block;width: 44px;"
                          . "height: 44px;text-align: left;text-indent: "
                          . "-9999px;overflow: hidden;background: "
                          . "url('../images/social-links.png');}";
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with a lot of spaces does not compress the contents",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $source   = "h2:after         { border-width:         1px; }";
                $actual   = $cssmin->filter($source);
                $expected = "h2:after{border-width: 1px;}";
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with complex CSS does not compress the contents",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $source   = "h1 > p { font-family: 'Helvetica Neue'; }";
                $actual   = $cssmin->filter($source);
                $expected = "h1> p{font-family: 'Helvetica Neue';}";
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with complex CSS does not compress the contents",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $source   = "h1 > p { font-family: 'Helvetica Neue'; }";
                $actual   = $cssmin->filter($source);
                $expected = "h1> p{font-family: 'Helvetica Neue';}";
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with complex nested CSS does not compress the contents",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $source   = ".navbar .nav>li>a { color: #111; "
                          . "text-decoration: underline; }";
                $actual   = $cssmin->filter($source);
                $expected = ".navbar .nav>li>a{color: #111;"
                          . "text-decoration: underline;}";
                expect($actual)->equals($expected);
            }
        );

        $this->specify(
            "The cssmin filter with complex CSS (line breaks) does not compress the contents",
            function () {

                $cssmin   = new PhTFilterCssmin();
                $sourceFile = PATH_DATA . '/assets/cssmin-01.css';
                $targetFile = PATH_DATA . '/assets/cssmin-01-result.css';

                if (!file_exists($sourceFile) || !file_exists($targetFile)) {
                    $this->markTestIncomplete('Source files missing for this test');
                }

                $source   = file_get_contents($sourceFile);
                $expected = file_get_contents($targetFile);
                $actual   = $cssmin->filter($source);

                expect($actual)->equals($expected);
            }
        );
    }

    /**
     * Tests none filter
     *
     * @author Nikolaos Dimopoulos <nikos@phalconphp.com>
     * @since  2014-10-10
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_TRY
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_CONST)))))
                        (AST_CATCH_LIST
                            (AST_CATCH
                                (AST_NAME_LIST)
                                (AST_VAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_VAR))))))
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR))))))))||||||||