  public static function remoteExecute(
    array $command,
    array $curl_opts = array()
  ) {
    if (!isset(self::$commands[$command['name']])) {
      throw new Exception($command['name']." is not a valid command.");
    }
    $raw = self::$commands[$command['name']];

    if ($command['name'] == DriverCommand::NEW_SESSION) {
      $curl_opts[CURLOPT_FOLLOWLOCATION] = true;
    }

    return self::curl(
      $raw['method'],
      sprintf("%s%s", $command['url'], $raw['url']),
      $command,
      $curl_opts
    );
  }

  /**
   * Curl request to webdriver server.
   *
   * @param string $http_method 'GET', 'POST', or 'DELETE'
   * @param string $url
   * @param array $command      The Command object, modelled as a hash.
   * @param array $extra_opts   key => value pairs of curl options for
   *                            curl_setopt()
   * @return array
   * @throws Exception
   */
||||||||  public static function remoteExecute(
    WebDriverCommand $command,
    string $url,
    array $curl_opts = array()
  ) {
    if (!isset(self::$commands[$command->getName()])) {
      throw new Exception($command->getName()." is not a valid command.");
    }
    $raw = self::$commands[$command->getName()];

    if ($command->getName() == DriverCommand::NEW_SESSION) {
      $curl_opts[CURLOPT_FOLLOWLOCATION] = true;
    }

    return self::curl(
      $raw['method'],
      sprintf("%s%s", $url, $raw['url']),
      $command,
      $curl_opts
    );
  }

  /**
   * Curl request to webdriver server.
   *
   * @param string $http_method 'GET', 'POST', or 'DELETE'
   * @param string $url
   * @param array $command      The Command object, modelled as a hash.
   * @param array $extra_opts   key => value pairs of curl options for
   *                            curl_setopt()
   * @return array
   * @throws Exception
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (AST_CONST))
                    (AST_CONST)))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (AST_CONST))
                    (AST_CONST)))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))
                (AST_VAR)
                (AST_VAR)))))