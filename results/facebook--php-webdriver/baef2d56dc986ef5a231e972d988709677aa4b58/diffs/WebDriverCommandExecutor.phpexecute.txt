  public function execute($command) {
    if (!isset($this->commands[$command['name']])) {
      throw new Exception($command['name']." is not a valid command.");
    }
    $raw = $this->commands[$command['name']];
    $extra_opts = array();

    if ($command['name'] == 'newSession') {
      $extra_opts[CURLOPT_FOLLOWLOCATION] = true;
    }

    return $this->curl($raw['method'], $raw['url'], $command, $extra_opts);
  }

  /**
   * Curl request to webdriver server.
   *
   * @param http_method 'GET', 'POST', or 'DELETE'
   * @param suffix       What to append to the base URL.
   * @param command      The Command object, modelled as a hash.
   * @param extra_opts   key => value pairs of curl options for curl_setopt()
   */
||||||||  public function execute($name, array $params = array()) {
    $command = array(
      'url' => $this->url,
      'sessionId' => $this->sessionID,
      'name' => $name,
      'parameters' => $params,
    );
    $raw = self::remoteExecute($command);
    return $raw['value'];
  }

  /**
   * Execute a command on a remote server. The command should be an array
   * contains
   *   url        : the url of the remote server
   *   sessionId  : the session id if needed
   *   name       : the name of the command
   *   parameters : the parameters of the command required
   *
   * @return array The response of the command.
   */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (AST_CONST))
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))