	public function add(array $widgets) {
		foreach ($widgets as $object) {
			if (gettype($object) === 'object' &&
				!($object instanceof WidgetInterface)
			) {
				throw new \RuntimeException(
					'Widget objects must implement Cake\View\Widget\WidgetInterface.'
				);
			} elseif (is_string($object)){
				$this->load($object);
			}
		}
		$this->_widgets = $widgets + $this->_widgets;
	}

/**
 * Get a widget.
 *
 * Will either fetch an already created widget, or create a new instance
 * if the widget has been defined. If the widget is undefined an instance of
 * the `_default` widget will be returned. An exception will be thrown if
 * the `_default` widget is undefined.
 *
 * @param string $name The widget name to get.
 * @return WidgetInterface widget interface class.
 * @throws \RuntimeException when widget is undefined.
 */
||||||||	public function add(array $widgets) {
		foreach ($widgets as $key=>$object) {
			if (gettype($object) === 'object' &&
				!($object instanceof WidgetInterface)
			) {
				throw new \RuntimeException(
					'Widget objects must implement Cake\View\Widget\WidgetInterface.'
				);
			} elseif (is_string($object)){
				$this->load($object);
				unset($widgets[$key]);
			}
		}
		$this->_widgets += $widgets;
	}

/**
 * Get a widget.
 *
 * Will either fetch an already created widget, or create a new instance
 * if the widget has been defined. If the widget is undefined an instance of
 * the `_default` widget will be returned. An exception will be thrown if
 * the `_default` widget is undefined.
 *
 * @param string $name The widget name to get.
 * @return WidgetInterface widget interface class.
 * @throws \RuntimeException when widget is undefined.
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_UNARY_OP
                            (AST_INSTANCEOF
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR))))))
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_VAR)
            (AST_PROP
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_UNARY_OP
                            (AST_INSTANCEOF
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR))))))
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_UNSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))