    function link($title, $url = null, $htmlAttributes = null, $confirmMessage = false, $escapeTitle = true, $return = false)
    {
        // prepare title for html display
        if( $escapeTitle )
        {
            $title = htmlspecialchars($title, ENT_QUOTES);
        }

        $url = $url? $url: $title;

        if ($confirmMessage)
        {
            // prepare for HTML display (fix everything except quotes)
            $confirmMessage = htmlspecialchars($confirmMessage, ENT_NOQUOTES);
            // fix single quotes
            $confirmMessage = str_replace("'", "\'", $confirmMessage);
            // fix double quotes
            $confirmMessage = str_replace('"', '&quot;', $confirmMessage);

            $htmlAttributes['onclick'] = "return confirm('{$confirmMessage}');";
        }

        if (strpos($url, '://'))
        {
            $output = sprintf($this->tags['link'], $url,
            $this->_parseAttributes($htmlAttributes), $title);
        }
        else
        {
            $output = sprintf($this->tags['link'], $this->url($url, true),
            $this->_parseAttributes($htmlAttributes), $title);
        }

        return $this->output($output, $return);
    }

 /**
 * Creates a submit widget.
 *
 * @param  string  $caption        Text on submit button
 * @param  array   $htmlAttributes Array of HTML attributes.
 * @param  boolean $return         Wheter this method should return a value
 *                                 or output it. This overrides AUTO_OUTPUT.
 * @return mixed   Either string or boolean value, depends on AUTO_OUTPUT
 *                 and $return.
 */
||||||||    function link($title, $url = null, $htmlAttributes = null, $confirmMessage = false, $escapeTitle = true, $return = false)
    {
        // prepare title for html display
        if( $escapeTitle )
        {
            $title = htmlspecialchars($title, ENT_QUOTES);
        }

        $url = $url? $url: $title;

        if ($confirmMessage)
        {
            // prepare for HTML display (fix everything except quotes)
            $confirmMessage = htmlspecialchars($confirmMessage, ENT_NOQUOTES);
            // fix single quotes
            $confirmMessage = str_replace("'", "\'", $confirmMessage);
            // fix double quotes
            $confirmMessage = str_replace('"', '&quot;', $confirmMessage);

            $htmlAttributes['onclick'] = "return confirm('{$confirmMessage}');";
        }

        if (((strpos($url, '://')) || (strpos($url, 'javascript:') === 0)))
        {
            $output = sprintf($this->tags['link'], $url,
            $this->_parseAttributes($htmlAttributes), $title);
        }
        else
        {
            $output = sprintf($this->tags['link'], $this->url($url, true),
            $this->_parseAttributes($htmlAttributes), $title);
        }

        return $this->output($output, $return);
    }

 /**
 * Creates a submit widget.
 *
 * @param  string  $caption        Text on submit button
 * @param  array   $htmlAttributes Array of HTML attributes.
 * @param  boolean $return         Wheter this method should return a value
 *                                 or output it. This overrides AUTO_OUTPUT.
 * @return mixed   Either string or boolean value, depends on AUTO_OUTPUT
 *                 and $return.
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_CONST)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_CONST)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))