	function defineJavascriptFunctions () {
		$dir = VENDORS."/javascript";
		$folder = new Folder($dir);
		$files = $folder->find('.*\.js');

		$javascript = '';
		foreach($files as $file) {
			if (substr($file, -3)=='.js') {
				$javascript .= file_get_contents("$dir/$file") . "\n\n";
			}
		}
		return $this->javascriptTag($javascript);
	}

/**
  * Observe field and call ajax on change.
  *
  * Observes the field with the DOM ID specified by <i>field_id</i> and makes
  * an Ajax when its contents have changed.
  *
  * Required +options+ are:
  * - <i>frequency</i>:: The frequency (in seconds) at which changes to
  *                       this field will be detected.
  * - <i>url</i>::       @see urlFor() -style options for the action to call
  *                       when the field has changed.
  *
  * Additional options are:
  * - <i>update</i>::    Specifies the DOM ID of the element whose
  *                       innerHTML should be updated with the
  *                       XMLHttpRequest response text.
  * - <i>with</i>::      A Javascript expression specifying the
  *                       parameters for the XMLHttpRequest. This defaults
  *                       to Form.Element.serialize('$field_id'), which can be
  *                       accessed from params['form']['field_id'].
  *
  * Additionally, you may specify any of the options documented in
  * @see linkToRemote().
  *
  * @param string $field_id DOM ID of field to observe
  * @param array $options ajax options
  * @return string ajax script
  */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (SCALAR))))
                        (SCALAR))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR))))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||