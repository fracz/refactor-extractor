||||||||	function linkToFunction ($title, $func, $html_options=null)
	{
		$html_options['onClick'] = "$func; return false;";
		return $this->linkTo($title, '#', $html_options);
	}

	/**
	 * Returns link to remote action
	 *
	 * Returns a link to a remote action defined by <i>options[url]</i>
	 * (using the urlFor format) that's called in the background using
	 * XMLHttpRequest. The result of that request can then be inserted into a
	 * DOM object whose id can be specified with <i>options[update]</i>.
	 * Usually, the result would be a partial prepared by the controller with
	 * either renderPartial or renderPartialCollection.
	 *
	 * Examples:
	 * <code>
	 *  linkToRemote("Delete this post",
	 *  		array("update" => "posts", "url" => "delete/{$postid->id}"));
	 *  linkToRemote(imageTag("refresh"),
	 *		array("update" => "emails", "url" => "list_emails" ));
	 * </code>
	 *
	 * By default, these remote requests are processed asynchronous during
	 * which various callbacks can be triggered (for progress indicators and
	 * the likes).
	 *
	 * Example:
	 * <code>
	 *   linkToRemote (word,
	 *       array("url" => "undo", "n" => word_counter),
	 *       array("complete" => "undoRequestCompleted(request)"));
	 * </code>
	 *
	 * The callbacks that may be specified are:
	 *
	 * - <i>loading</i>::       Called when the remote document is being
	 *                           loaded with data by the browser.
	 * - <i>loaded</i>::        Called when the browser has finished loading
	 *                           the remote document.
	 * - <i>interactive</i>::   Called when the user can interact with the
	 *                           remote document, even though it has not
	 *                           finished loading.
	 * - <i>complete</i>::      Called when the XMLHttpRequest is complete.
	 *
	 * If you for some reason or another need synchronous processing (that'll
	 * block the browser while the request is happening), you can specify
	 * <i>options[type] = synchronous</i>.
	 *
	 * You can customize further browser side call logic by passing
	 * in Javascript code snippets via some optional parameters. In
	 * their order of use these are:
	 *
	 * - <i>confirm</i>::      Adds confirmation dialog.
	 * -<i>condition</i>::    Perform remote request conditionally
	 *                          by this expression. Use this to
	 *                          describe browser-side conditions when
	 *                          request should not be initiated.
	 * - <i>before</i>::       Called before request is initiated.
	 * - <i>after</i>::        Called immediately after request was
	 *  		             initiated and before <i>loading</i>.
	 *
	 * @param string $title title of link
	 * @param array $options options for javascript function
	 * @param array $html_options options for link
	 * @return string html code for link to remote action
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)))))