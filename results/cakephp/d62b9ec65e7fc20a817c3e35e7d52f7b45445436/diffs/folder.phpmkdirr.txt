   function mkdirr($pathname, $mode = null)
   {
      // Check if directory already exists
      if (is_dir($pathname) || empty($pathname))
      {
         return true;
      }

      // Ensure a file does not already exist with the same name
      if (is_file($pathname))
      {
         trigger_error('mkdirr() File exists', E_USER_WARNING);
         return false;
      }

      // Crawl up the directory tree
      $next_pathname = substr($pathname, 0, strrpos($pathname, DIRECTORY_SEPARATOR));
      if (mkdirr($next_pathname, $mode))
      {
         if (!file_exists($pathname))
         {
            return mkdir($pathname, $mode);
         }
      }

      return false;
   }

/**
 * Get the size of a directory.
 *
 * @author      Aidan Lister <aidan@php.net>
 * @version     1.0.0
 * @param       string   $directory    Path to directory
 */
||||||||   function mkdirr($pathname, $mode = null)
   {
      // Check if directory already exists
      if (is_dir($pathname) || empty($pathname))
      {
         return true;
      }

      // Ensure a file does not already exist with the same name
      if (is_file($pathname))
      {
         trigger_error('mkdirr() File exists', E_USER_WARNING);
         return false;
      }

      // Crawl up the directory tree
      $next_pathname = substr($pathname, 0, strrpos($pathname, DIRECTORY_SEPARATOR));
      if ($this->mkdirr($next_pathname, $mode))
      {
         if (!file_exists($pathname))
         {
            umask(0);
            return mkdir($pathname, $mode);
         }
      }

      return false;
   }

/**
 * Get the size of a directory.
 *
 * @author      Aidan Lister <aidan@php.net>
 * @version     1.0.0
 * @param       string   $directory    Path to directory
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (AST_RETURN
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))