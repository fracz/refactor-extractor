	protected function _evaluate($viewFile, $dataForView) {
		$viewString = $this->_getViewFileContents($viewFile);

		$randomString = sha1($viewString);
		$unPhp = [
			'<?=' => "<$randomString=",
			'<?php' => "<$randomString",
			' ?>' => " $randomString>"
		];
		$templatify = [
			'<%=' => '<?=',
			'<%' => '<?php',
			'%>' => '?>'
		];

		$viewString = str_replace(array_keys($unPhp), array_values($unPhp), $viewString);
		$viewString = str_replace(array_keys($templatify), array_values($templatify), $viewString);

		$this->__viewFile = TMP . $randomString . '.php';
		file_put_contents($this->__viewFile, $viewString);

		unset($randomString, $templatify, $viewFile, $viewString);
		extract($dataForView);
		ob_start();

		include $this->__viewFile;

		unset($this->__viewFile);

		return str_replace(array_values($unPhp), array_keys($unPhp), ob_get_clean());
	}

/**
 * Returns filename of given template file (.ctp) as a string.
 * CamelCased template names will be under_scored! This means that you can have
 * LongTemplateNames that refer to long_template_names.ctp views.
 *
 * Also allows rendering a template string directly
 *
 * @param string $name Controller action to find template filename for
 * @return string Template filename or a Bake template string
 * @throws \Cake\View\Exception\MissingTemplateException when a view file could not be found.
 */
||||||||	protected function _evaluate($viewFile, $dataForView) {
		$viewString = $this->_getViewFileContents($viewFile);

		$randomString = sha1($viewString);
		$unPhp = [
			'<?=' => "<$randomString=",
			'<?php' => "<$randomString",
			' ?>' => " $randomString>"
		];
		$templatify = [
			'<%=' => '<?=',
			'<%' => '<?php',
			'%>' => '?>'
		];

		$viewString = str_replace(array_keys($unPhp), array_values($unPhp), $viewString);
		$viewString = str_replace(array_keys($templatify), array_values($templatify), $viewString);
		$viewString = preg_replace('/<\?=(.*)\?>\n(.)/', "<?=$1?>\n\n$2", $viewString);

		$this->__viewFile = TMP . $randomString . '.php';
		file_put_contents($this->__viewFile, $viewString);

		unset($randomString, $templatify, $viewFile, $viewString);
		extract($dataForView);
		ob_start();

		include $this->__viewFile;

		unset($this->__viewFile);

		$content = ob_get_clean();

		return str_replace(array_values($unPhp), array_keys($unPhp), $content);
	}

/**
 * Returns filename of given template file (.ctp) as a string.
 * CamelCased template names will be under_scored! This means that you can have
 * LongTemplateNames that refer to long_template_names.ctp views.
 *
 * Also allows rendering a template string directly
 *
 * @param string $name Controller action to find template filename for
 * @return string Template filename or a Bake template string
 * @throws \Cake\View\Exception\MissingTemplateException when a view file could not be found.
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL)
    (AST_INCLUDE_OR_EVAL
        (AST_PROP
            (AST_VAR)))
    (AST_UNSET
        (AST_PROP
            (AST_VAR)))
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (SCALAR)))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL)
    (AST_INCLUDE_OR_EVAL
        (AST_PROP
            (AST_VAR)))
    (AST_UNSET
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)))))