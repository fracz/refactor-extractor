	function lastInsertId($source) {
		$sequence = (!empty($this->sequence)) ? $this->sequence : 'pk_'.$source;
		$sql = "SELECT $sequence.currval FROM dual";
		$stid = ociparse($this->_conn, $sql);
		$r = ociexecute($stid, OCI_DEFAULT);

		if (!$r) {
			return false;
		}
		$result = array();

		while (ocifetchinto($stid, $row, OCI_ASSOC)) {
			$result[] = $row;
		}
		return $result[0]['CURRVAL'];
	}
/**
 * Returns an array of the fields in given table name.
 *
 * @param object model to inspect
 * @param string alias
 * @param string fields
 * @return array Fields in table. Keys are name and type
 * @access public
 */
/*
	function fields ($model, $alias, $f) {
		$sql = "SELECT column_name FROM user_tab_columns ";
		$sql .= "WHERE table_name = '" . strtoupper($model->table) . "'";

		if (!$stid = ociparse($this->_conn, $sql)) {
			return false;
		}
		if (!$r = ociexecute($stid, OCI_DEFAULT)) {
			return false;
		}
		// not sure if this is supposed to be an array or string
		$fields = $f;

		while (ocifetchinto($stid, $row)) {
			$fields[] = $model->name .'.'. $row[0];
		}
		return $fields;
		}
*/
# THE METHODS BELOW HAVE NOT BEEN TESTED!!!
/**
 * Returns a formatted error message from previous database operation.
 *
 * @return string Error message with error number
 * @access public
 */
||||||||	function lastInsertId($source) {
		$sequence = (!empty($this->sequence)) ? $this->sequence : 'pk_'.$source;
		$sql = "SELECT $sequence.currval FROM dual";
		if (!$this->execute($sql)) {
		    return false;
		}
		while ($row = $this->fetchRow()) {
		    return $row[$sequence]['currval'];
		}
		return false;
	}

/**
 * Returns a formatted error message from previous database operation.
 *
 * @return string Error message with error number
 * @access public
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_WHILE
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_CONST)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_VAR))))
    (AST_RETURN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_RETURN
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONST)))