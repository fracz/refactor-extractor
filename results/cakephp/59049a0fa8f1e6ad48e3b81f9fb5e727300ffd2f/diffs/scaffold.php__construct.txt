	 function __construct(&$controller, $params) {
		  $this->controllerClass           =&$controller;
		  $this->actionView                =$controller->action;
		  $this->modelKey                  =ucwords(Inflector::singularize($controller->name));
		  $this->scaffoldTitle             =Inflector::humanize($this->modelKey);
		  $this->viewPath                  =Inflector::underscore($controller->name);
		  $this->controllerClass->pageTitle=$this->scaffoldTitle;
		  $this->controllerClass->pageTitle=
			  'Scaffold :: ' . Inflector::humanize($controller->action) . ' :: ' . Inflector::humanize(
																											  Inflector::pluralize(
																												  $this->modelKey));
		  $this->__scaffold($params);
	 }

/**
 * Renders a view view of scaffolded Model.
 *
 * @param array $params
 * @return A rendered view of a row from Models database table
 * @access private
 */
||||||||	 function __construct(&$controller, $params) {
		$this->controller = &$controller;
		$this->name = $controller->name;
		$this->action = $controller->action;
		$this->modelClass = Inflector::classify($this->name);
		$this->modelKey = Inflector::underscore($this->modelClass);
		$this->scaffoldTitle = Inflector::humanize($this->name);
		$this->viewPath = Inflector::underscore($this->name);
		$this->controller->pageTitle= 'Scaffold :: ' . Inflector::humanize($this->action) . ' :: ' . $this->scaffoldTitle;

		$this->controller->set('controllerName', $this->name);
		$this->controller->set('controllerAction', $this->action);
		$this->controller->set('modelClass', $this->modelClass);
		$this->controller->set('modelKey', $this->modelKey);
		$this->controller->set('viewPath', $this->viewPath);
		$this->controller->set('humanSingularName', Inflector::humanize($this->modelClass));
		$this->controller->set('humanPluralName', $this->scaffoldTitle);

		if (!in_array('Form', $this->controller->helpers)) {
		$this->controller->helpers[] = 'Form';
		}
		$this->controller->constructClasses();
		$this->ScaffoldModel = &$this->controller->{$this->modelClass};

		$this->__scaffold($params);
	 }

/**
 * Renders a view view of scaffolded Model.
 *
 * @param array $params
 * @return A rendered view of a row from Models database table
 * @access private
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (SCALAR))
            (AST_STATIC_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (SCALAR))
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (NULL))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN_REF
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))