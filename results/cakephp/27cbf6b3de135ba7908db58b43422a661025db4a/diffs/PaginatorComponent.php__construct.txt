	public function __construct(ComponentRegistry $collection, $settings = array()) {
		$settings = array_merge($this->settings, (array)$settings);
		$this->Controller = $collection->getController();
		parent::__construct($collection, $settings);
	}

/**
 * Handles automatic pagination of model records.
 *
 * @param Table $object The table to paginate.
 * @param string|array $scope Additional find conditions to use while paginating
 * @param array $whitelist List of allowed fields for ordering. This allows you to prevent ordering
 *   on non-indexed, or undesirable columns. See PaginatorComponent::validateSort() for additional details
 *   on how the whitelisting and sort field validation works.
 * @return array Query results
 * @throws Cake\Error\MissingModelException
 * @throws Cake\Error\NotFoundException
 */
||||||||	public function __construct(ComponentRegistry $collection, $settings = []) {
		$settings = array_merge($this->_defaultConfig, (array)$settings);
		$this->request = $collection->getController()->request;
		parent::__construct($collection, $settings);
	}

/**
 * Handles automatic pagination of model records.
 *
 * ## Configuring pagination
 *
 * When calling `paginate()` you can use the $settings parameter to pass in pagination settings.
 * These settings are used to build the queries made and control other pagination settings.
 *
 * If your settings contain a key with the current table's alias. The data inside that key will be used.
 * Otherwise the top level configuration will be used.
 *
 * {{{
 *  $settings = array(
 *    'limit' => 20,
 *    'maxLimit' => 100
 *  );
 *  $results = $paginator->paginate($table, $settings);
 * }}}
 *
 * The above settings will be used to paginate any Table. You can configure Table specific settings by
 * keying the settings with the Table alias.
 *
 * {{{
 *  $settings = array(
 *    'Posts' => array(
 *      'limit' => 20,
 *      'maxLimit' => 100
 *    ),
 *    'Comments' => array( ... )
 *  );
 *  $results = $paginator->paginate($table, $settings);
 * }}}
 *
 * This would allow you to have different pagination settings for `Comments` and `Posts` tables.
 *
 * #### Paginating with custom finders
 *
 * You can paginate with any find type defined on your table using the `findType` option.
 *
 * {{{
 * $settings = array(
 *   'Post' => array(
 *     'findType' => 'popular'
 *   )
 * );
 * $results = $paginator->paginate($table, $settings);
 * }}}
 *
 * Would paginate using the `find('popular')` method.
 *
 * @param Table $object The table to paginate.
 * @param array $settings The settings/configuration used for pagination.
 * @param array $whitelist List of allowed fields for ordering. This allows you to prevent ordering
 *   on non-indexed, or undesirable columns. See PaginatorComponent::validateSort() for additional details
 *   on how the whitelisting and sort field validation works.
 * @return array Query results
 * @throws Cake\Error\MissingModelException
 * @throws Cake\Error\NotFoundException
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CAST
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CAST
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))