	public function setUp() {
		parent::setUp();
		Configure::write('App.namespace', 'TestApp');
		Plugin::load(array('TestPlugin', 'TestPluginTwo'));

		$this->Case = $this->getMockForAbstractClass('Cake\TestSuite\ControllerTestCase');
		DispatcherFactory::add('Routing');
		DispatcherFactory::add('ControllerFactory');
		Router::reload();
		require CAKE . 'Config/routes.php';
		TableRegistry::clear();
	}

/**
 * tearDown
 *
 * @return void
 */
||||||||	public function setUp() {
		parent::setUp();
		Configure::write('App.namespace', 'TestApp');
		Plugin::load(array('TestPlugin', 'TestPluginTwo'));

		$this->Case = $this->getMockForAbstractClass('Cake\TestSuite\ControllerTestCase');
		$this->Case->loadRoutes = false;

		DispatcherFactory::add('Routing');
		DispatcherFactory::add('ControllerFactory');
		Router::scope('/', function($routes) {
			$routes->fallbacks();
		});
		Router::prefix('admin', function($routes) {
			$routes->plugin('TestPlugin', function ($routes) {
				$routes->fallbacks();
			});
			$routes->fallbacks();
		});
		Router::plugin('TestPlugin', function($routes) {
			$routes->fallbacks();
		});
		Router::plugin('TestPluginTwo', function($routes) {
			$routes->fallbacks();
		});
		TableRegistry::clear();
	}

/**
 * tearDown
 *
 * @return void
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL)
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_STATIC_CALL))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_STATIC_CALL))