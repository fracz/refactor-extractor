	function nice ($date_string=null, $return = false)
	{
		$date = $date_string? strtotime($date_string): time();
		$date = $date_string? $this->fromString($date_string): time();
		$ret = date("D, M jS Y, H:i", $date);

		return $this->output($ret, $return);
	}


	/**
     * Returns a formatted descriptive date string for given datetime string.
     *
     * If the given date is today, the returned string could be "Today, 16:54".
     * If the given date was yesterday, the returned string could be "Yesterday, 16:54".
     * If $date_string's year is the current year, the returned string does not
     * include mention of the year.
     *
     * @param string $date_string Datetime string or Unix timestamp
     * @param  boolean $return Whether this method should return a value
     *                         or output it. This overrides AUTO_OUTPUT.
     * @return string Described, relative date string
     */
||||||||    function nice ($date_string=null, $return = false)
    {
        if($date_string != null)
        {
            $date = $this->fromString($date_string);
        }
        else
        {
            $date = time();
        }
        $ret = date("D, M jS Y, H:i", $date);
        return $this->output($ret, $return);
    }

/**
 * Returns a formatted descriptive date string for given datetime string.
 *
 * If the given date is today, the returned string could be "Today, 16:54".
 * If the given date was yesterday, the returned string could be "Yesterday, 16:54".
 * If $date_string's year is the current year, the returned string does not
 * include mention of the year.
 *
 * @param string $date_string Datetime string or Unix timestamp
 * @param  boolean $return Whether this method should return a value
 *                         or output it. This overrides AUTO_OUTPUT.
 * @return string Described, relative date string
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))