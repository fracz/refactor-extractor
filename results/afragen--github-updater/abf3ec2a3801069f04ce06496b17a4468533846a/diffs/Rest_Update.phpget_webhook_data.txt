	private function get_webhook_data() {

		// GitHub
		if ( $_SERVER["HTTP_X_GITHUB_EVENT"] == "push" ) {
			return $this->get_github_webhook_data();
		}

		// Bitbucket
		if ( $_SERVER["HTTP_X_EVENT_KEY"] == "repo:push" ) {
			return $this->get_bitbucket_webhook_data();
		}

		// GitLab
		if ( $_SERVER["HTTP_X_GITLAB_EVENT"] == "Push Hook" ) {
			return $this->get_gitlab_webhook_data();
		}

		return NULL;
	}

	/**
	 * Process request.
	 * Relies on data in $_REQUEST, prints out json and exits.
	 * If the request came through a webhook, and if the branch in the
	 * webhook matches the branch specified by the url, use the latest
	 * update available as specified in the webhook payload.
	 */
||||||||	private function get_webhook_data() {
		$request_body = file_get_contents( 'php://input' );
		$request_data = json_decode( $request_body, true );

		if ( empty( $request_data ) ) {
			return false;
		}

		// GitHub
		if ( 'push' == $_SERVER['HTTP_X_GITHUB_EVENT'] ) {
			return $this->parse_github_webhook( $request_data );
		}

		// Bitbucket
		if ( 'repo:push' == $_SERVER['HTTP_X_EVENT_KEY'] ) {
			return $this->parse_bitbucket_webhook( $request_data );
		}

		// GitLab
		if ( 'Push Hook' == $_SERVER['HTTP_X_GITLAB_EVENT'] ) {
			return $this->parse_gitlab_webhook( $request_data );
		}

		return false;
	}

	/**
	 * Process request.
	 * Relies on data in $_REQUEST, prints out json and exits.
	 * If the request came through a webhook, and if the branch in the
	 * webhook matches the branch specified by the url, use the latest
	 * update available as specified in the webhook payload.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CONST)))