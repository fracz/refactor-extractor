	protected function append_theme_actions_content( $theme ) {

		$details_url            = esc_url( self_admin_url( "theme-install.php?tab=theme-information&theme=$theme->repo&TB_iframe=true&width=270&height=400" ) );
		$theme_update_transient = get_site_transient( 'update_themes' );

		/**
		 * If the theme is outdated, display the custom theme updater content.
		 * If theme is not present in theme_update transient response ( theme is not up to date )
		 */
		if ( empty( $theme_update_transient->up_to_date[ $theme->repo ] ) ) {
			$update_url = wp_nonce_url( self_admin_url( 'update.php?action=upgrade-theme&theme=' ) . urlencode( $theme->repo ), 'upgrade-theme_' . $theme->repo );
			ob_start();
			?>
			<strong><br />
				<?php
				printf( esc_html__( 'There is a new version of %s available now.', 'github-updater' ),
						$theme->name
				);
				printf( ' <a href="%s" class="thickbox" title="%s">',
						$details_url,
						esc_attr( $theme->name )
				);
				printf( esc_html__( 'View version %1$s details%2$s or %3$supdate now%4$s.', 'github-updater' ),
						$theme->remote_version,
						'</a>',
						'<a href="' . $update_url . '">',
						'</a>'
				);
				?>
			</strong>
			<?php

			return trim( ob_get_clean(), '1' );
		} else {
			/*
			 * If the theme is up to date, display the custom rollback/beta version updater
			 */
			ob_start();
			$rollback_url = sprintf( '%s%s', wp_nonce_url( self_admin_url( 'update.php?action=upgrade-theme&theme=' ) . urlencode( $theme->repo ), 'upgrade-theme_' . $theme->repo ), '&rollback=' );

			?>
			<p><?php
				printf( esc_html__( 'Current version is up to date. Try %sanother version%s', 'github-updater' ),
					'<a href="#" onclick="jQuery(\'#ghu_versions\').toggle();return false;">',
					'</a>'
				);
				?>
			</p>
			<div id="ghu_versions" style="display:none; width: 100%;">
				<label><select style="width: 60%;"
					onchange="if(jQuery(this).val() != '') {
						jQuery(this).parent().next().show();
						jQuery(this).parent().next().attr('href','<?php echo esc_url( $rollback_url ) ?>'+jQuery(this).val());
					}
					else jQuery(this).parent().next().hide();
				">
				<option value=""><?php esc_html_e( 'Choose a Version', 'github-updater' ); ?>&#8230;</option>
						<?php if ( ! empty( $this->options['branch_switch'] ) ): ?>
							<?php foreach ( array_keys( $theme->branches ) as $branch ) { echo '<option>' . $branch . '</option>'; }?>
						<?php endif; ?>
						<?php foreach ( array_keys( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] ) as $version ) { echo '<option>' . $version . '</option>'; }?>
						<?php if ( empty( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] ) ) {
							echo '<option>' . esc_html__( 'No previous tags to rollback to.', 'github-updater' ) . '</option></select></label>';
							return trim( ob_get_clean(), '1' );
						} ?>
					</select></label>
				<a style="display: none;" class="button-primary" href="?"><?php esc_html_e( 'Install', 'github-updater' ); ?></a>
			</div>
			<?php

			return trim( ob_get_clean(), '1' );
		}
	}

	/**
	 * Hook into pre_set_site_transient_update_themes to update.
	 *
	 * Finds newest tag and compares to current tag.
	 *
	 * @param array $transient
	 *
	 * @return array|object
	 */
||||||||	protected function append_theme_actions_content( $theme ) {
		$options                = get_site_option( 'github_updater' );
		$details_url            = esc_url( self_admin_url( "theme-install.php?tab=theme-information&theme=$theme->repo&TB_iframe=true&width=270&height=400" ) );
		$theme_update_transient = get_site_transient( 'update_themes' );

		/**
		 * If the theme is outdated, display the custom theme updater content.
		 * If theme is not present in theme_update transient response ( theme is not up to date )
		 */
		if ( empty( $theme_update_transient->up_to_date[ $theme->repo ] ) ) {
			$update_url = wp_nonce_url( self_admin_url( 'update.php?action=upgrade-theme&theme=' ) . urlencode( $theme->repo ), 'upgrade-theme_' . $theme->repo );
			ob_start();
			?>
			<strong><br />
				<?php
				printf( esc_html__( 'There is a new version of %s available now.', 'github-updater' ),
						$theme->name
				);
				printf( ' <a href="%s" class="thickbox" title="%s">',
						$details_url,
						esc_attr( $theme->name )
				);
				printf( esc_html__( 'View version %1$s details%2$s or %3$supdate now%4$s.', 'github-updater' ),
						$theme->remote_version,
						'</a>',
						'<a href="' . $update_url . '">',
						'</a>'
				);
				?>
			</strong>
			<?php

			return trim( ob_get_clean(), '1' );
		} else {
			/*
			 * If the theme is up to date, display the custom rollback/beta version updater
			 */
			ob_start();
			$rollback_url = sprintf( '%s%s', wp_nonce_url( self_admin_url( 'update.php?action=upgrade-theme&theme=' ) . urlencode( $theme->repo ), 'upgrade-theme_' . $theme->repo ), '&rollback=' );

			?>
			<p><?php
				printf( esc_html__( 'Current version is up to date. Try %sanother version%s', 'github-updater' ),
					'<a href="#" onclick="jQuery(\'#ghu_versions\').toggle();return false;">',
					'</a>'
				);
				?>
			</p>
			<div id="ghu_versions" style="display:none; width: 100%;">
				<label><select style="width: 60%;"
					onchange="if(jQuery(this).val() != '') {
						jQuery(this).parent().next().show();
						jQuery(this).parent().next().attr('href','<?php echo esc_url( $rollback_url ) ?>'+jQuery(this).val());
					}
					else jQuery(this).parent().next().hide();
				">
				<option value=""><?php esc_html_e( 'Choose a Version', 'github-updater' ); ?>&#8230;</option>
						<?php if ( ! empty( $options['branch_switch'] ) ) {
							foreach ( array_keys( $theme->branches ) as $branch ) {
								echo '<option>' . $branch . '</option>';
							}
						}
						foreach ( array_keys( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] ) as $version ) {
							echo '<option>' . $version . '</option>';
						}
						if ( empty( $options['branch_switch'] ) &&
						     empty( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] )
						) {
							echo '<option>' . esc_html__( 'No previous tags to rollback to.', 'github-updater' ) . '</option></select></label>';

							return trim( ob_get_clean(), '1' );
						} ?>
					</select></label>
				<a style="display: none;" class="button-primary" href="?"><?php esc_html_e( 'Install', 'github-updater' ); ?></a>
			</div>
			<?php

			return trim( ob_get_clean(), '1' );
		}
	}

	/**
	 * Hook into pre_set_site_transient_update_themes to update.
	 *
	 * Finds newest tag and compares to current tag.
	 *
	 * @param array $transient
	 *
	 * @return array|object
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_CALL)
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CALL)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)))
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR)))))
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))
                        (
                            (AST_ECHO
                                (SCALAR))
                            (AST_FOREACH
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ECHO
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR)))))
                            (AST_ECHO
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_FOREACH
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (
                            (AST_ECHO
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR))))
                                    (SCALAR)))
                            (AST_RETURN
                                (AST_CALL
                                    (
                                        (AST_CALL)
                                        (SCALAR)))))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CALL)
                            (SCALAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_CALL)
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (AST_PROP
                            (AST_VAR))))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CALL)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)))
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR)))))
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_FOREACH
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ECHO
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))))
                (AST_FOREACH
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR))))
                        (
                            (AST_ECHO
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR))))
                                    (SCALAR)))
                            (AST_RETURN
                                (AST_CALL
                                    (
                                        (AST_CALL)
                                        (SCALAR)))))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CALL)
                            (SCALAR))))))))