	public function show_error_message() {
		?>
		<div class="error notice is-dismissible">
			<p>
				<?php
					printf( __( '%s was not checked. GitHub Updater Error Code:', 'github-updater' ),
						'<strong>' . $this->type->name . '</strong>'
					);
					echo ' ' . self::$error_code[ $this->type->repo ];
				?>
				<?php if ( 403 === self::$error_code[ $this->type->repo ] && false !== stristr( $this->type->type, 'github' ) ): ?>
					<br>
					<?php
						printf( __( 'GitHub API\'s rate limit will reset in %s minutes.', 'github-updater' ),
							self::$error_code[ $this->type->repo . '-wait' ]
						);
						echo '<br>';
						printf(
							__( 'It looks like you are running into GitHub API rate limits. Be sure and configure a %sPersonal Access Token%s to avoid this issue.', 'github-updater' ),
							'<a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/">',
							'</a>'
						);
					?>
				<?php endif; ?>
				<?php if ( 401 === self::$error_code[ $this->type->repo ] ) : ?>
					<br>
					<?php _e( 'There is probably an error on the GitHub Updater Settings page.', 'github-updater' ); ?>
				<?php endif; ?>
			</p>
		</div>
		<?php
	}

	/**
	 * Parse URI param returning array of parts.
	 *
	 * @param $repo_header
	 *
	 * @return array
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))))
    (AST_ECHO
        (AST_BINARY_OP
            (SCALAR)
            (AST_DIM
                (AST_STATIC_PROP)
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))))
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)))))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR)))||||||||