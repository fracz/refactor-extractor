    public function should_allow_nested_definitions_in_object_definitions()
    {
        $builder = new ContainerBuilder();
        $builder->useAnnotations(false);

        $impl = new Implementation1();
        $lazyDep = new LazyDependency();

        $builder->addDefinitions([
            'foo' => 'bar',
            LazyDependency::class => $lazyDep,
            'obj' => \DI\object(Class1::class)
                ->constructor(
                    \DI\object(Class2::class),
                    \DI\factory(function () use ($impl) {
                        return $impl;
                    })
                )
                ->property('property1', \DI\get('foo'))
                ->property('property2', \DI\factory(function () use ($impl) {
                    return $impl;
                })),
        ]);

        $container = $builder->build();
        /** @var Class1 $obj */
        $obj = $container->get('obj');

        // Assertions on constructor parameters
        $this->assertInstanceOf(Class2::class, $obj->constructorParam1);
        $this->assertSame($impl, $obj->constructorParam2);
        $this->assertSame($lazyDep, $obj->constructorParam3);

        // Assertions on properties
        $this->assertEquals('bar', $obj->property1);
        $this->assertSame($impl, $obj->property2);
    }

    /**
     * @test
     */
||||||||    public function should_allow_nested_definitions_in_object_definitions()
    {
        $builder = new ContainerBuilder();
        $builder->useAnnotations(false);

        $impl = new Implementation1();
        $lazyDep = new LazyDependency();

        $builder->addDefinitions([
            'foo' => 'bar',
            LazyDependency::class => $lazyDep,
            'obj' => \DI\create(Class1::class)
                ->constructor(
                    \DI\create(Class2::class),
                    \DI\factory(function () use ($impl) {
                        return $impl;
                    }),
                    \DI\get(LazyDependency::class)
                )
                ->property('property1', \DI\get('foo'))
                ->property('property2', \DI\factory(function () use ($impl) {
                    return $impl;
                })),
        ]);

        $container = $builder->build();
        /** @var Class1 $obj */
        $obj = $container->get('obj');

        // Assertions on constructor parameters
        $this->assertInstanceOf(Class2::class, $obj->constructorParam1);
        $this->assertSame($impl, $obj->constructorParam2);
        $this->assertSame($lazyDep, $obj->constructorParam3);

        // Assertions on properties
        $this->assertEquals('bar', $obj->property1);
        $this->assertSame($impl, $obj->property2);
    }

    /**
     * @test
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))))
                                (
                                    (AST_CALL
                                        (
                                            (AST_CLASS_CONST
                                                (SCALAR))))
                                    (AST_CALL
                                        (
                                            (AST_CLOSURE
                                                (AST_CLOSURE_USES
                                                    (AST_CLOSURE_VAR))
                                                (
                                                    (AST_RETURN
                                                        (AST_VAR))))))))
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR)))))
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_CLOSURE
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_RETURN
                                                (AST_VAR))))))))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))))
                                (
                                    (AST_CALL
                                        (
                                            (AST_CLASS_CONST
                                                (SCALAR))))
                                    (AST_CALL
                                        (
                                            (AST_CLOSURE
                                                (AST_CLOSURE_USES
                                                    (AST_CLOSURE_VAR))
                                                (
                                                    (AST_RETURN
                                                        (AST_VAR))))))
                                    (AST_CALL
                                        (
                                            (AST_CLASS_CONST
                                                (SCALAR))))))
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR)))))
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_CLOSURE
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_RETURN
                                                (AST_VAR))))))))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR)))))