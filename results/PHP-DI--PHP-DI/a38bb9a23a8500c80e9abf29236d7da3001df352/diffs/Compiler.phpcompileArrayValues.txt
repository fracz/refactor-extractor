    private function compileArrayValues(ArrayDefinition $definition) : array
    {
        $values = $definition->getValues();
        $keys = array_keys($values);

        $values = array_map(function ($value, $key) use ($definition) {
            try {
                $compiledValue = $this->compileValue($value);
            } catch (\Exception $e) {
                throw new DependencyException(sprintf(
                    'Error while compiling %s[%s]. %s',
                    $definition->getName(),
                    $key,
                    $e->getMessage()
                ), 0, $e);
            }

            return '            ' . $compiledValue . ",\n";
        }, $values, $keys);

        return $values;
    }

    /**
     * @return string|null If null is returned that means that the value is compilable.
     */
||||||||||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_TRY
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (AST_CALL
                                                        (
                                                            (SCALAR)
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))
                                                            (AST_VAR)
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))))
                                                    (SCALAR)
                                                    (AST_VAR)))))))
                            (NULL))
                        (AST_RETURN
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||