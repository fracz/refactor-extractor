||||||||    public function injectOnInstance(ClassDefinition $classDefinition, $instance)
    {
        try {
            $this->injectMethodsAndProperties($instance, $classDefinition);
        } catch (NotFoundException $e) {
            throw new DependencyException("Error while injecting dependencies into " . $classDefinition->getClassName() . ": " . $e->getMessage(), 0, $e);
        }

        return $instance;
    }

    /**
     * Creates an instance and inject dependencies through the constructor
     *
     * @param ReflectionClass      $classReflection
     * @param MethodInjection|null $constructorInjection
     *
     * @throws DefinitionException
     * @return object
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (SCALAR)
                                (AST_VAR)))))))
        (NULL))
    (AST_RETURN
        (AST_VAR)))