	private function resolveNamedBean($object, \ReflectionProperty $property, Inject $annotation,
									 array $beanMap
	) {
		$beanName = $annotation->name;
		if (array_key_exists($beanName, $beanMap)) {
			return $beanMap[$beanName];
		} else {
			throw new BeanNotFoundException("@Inject(name='$beanName') was found on "
				. get_class($object) . "::" . $property->getName()
				. " but no bean named '$beanName' was found");
		}
	}

	/**
	 * Resolve the Inject annotation without a specific name
	 * @param mixed               $object Object to inject dependencies to
	 * @param \ReflectionProperty $property Property annotated
	 * @param Inject              $annotation Inject annotation
	 * @param array               $typeMap Map of the class types
	 * @param FactoryInterface    $factory Factory for instanciating beans
	 * @return object Dependency to inject
	 * @throws DependencyException
	 * @throws AnnotationException
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))))))))))||||||||