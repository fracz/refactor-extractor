	public function inject($object, \ReflectionProperty $property, Inject $annotation,
						   array $typeMap, array $beanMap, FactoryInterface $factory
	) {
		$dependencyInstance = null;
		if ($annotation->name != null) {
			// Named bean
			$dependencyInstance = $this->resolveNamedBean($object, $property, $annotation, $beanMap);
		} else {
			// Not named bean
			$dependencyInstance = $this->resolveNotNamedBean($object, $property, $annotation,
				$typeMap, $factory);
		}

		// Inject the dependency
		$property->setAccessible(true);
		$property->setValue($object, $dependencyInstance);
	}

	/**
	 * Resolve the Inject(name="...") annotation
	 * @param mixed               $object Object to inject dependencies to
	 * @param \ReflectionProperty $property Property annotated
	 * @param Inject              $annotation Inject annotation
	 * @param array               $beanMap Map of the beans
	 * @return object Dependency to inject
	 * @throws BeanNotFoundException
	 */
||||||||	public function inject($object, \ReflectionProperty $property, Inject $annotation,
						   Container $container
	) {
		$dependencyInstance = null;

		if ($annotation->name != null) {
			// Named bean
			$beanName = $annotation->name;
			try {
				$dependencyInstance = $container->get($beanName);
			} catch(BeanNotFoundException $e) {
				// Better exception message
				throw new BeanNotFoundException("@Inject(name='$beanName') was found on "
					. get_class($object) . "::" . $property->getName()
					. " but no bean named '$beanName' was found");
			}
		} else {
			// Not named bean, use the property type
			$beanName = $this->getPropertyType($property);
			if ($beanName == null) {
				throw new AnnotationException("@Inject was found on " . get_class($object) . "::"
					. $property->getName() . " but no @var annotation");
			}
			// Need to create the instance
			try {
				$dependencyInstance = $container->get($beanName, $annotation->lazy);
			} catch (\Exception $e) {
				throw new DependencyException("Error while injecting $beanName in "
					. get_class($object) . "::" . $property->getName() . ". "
					. $e->getMessage(), 0, $e);
			}
		}

		// Inject the dependency
		$property->setAccessible(true);
		$property->setValue($object, $dependencyInstance);
	}

	/**
	 * Parse the docblock of the property to get the var annotation
	 * @param \ReflectionProperty $property
	 * @return string Type of the property (content of var annotation)
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_ENCAPS_LIST
                                                                (SCALAR)
                                                                (AST_VAR)
                                                                (SCALAR))
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR))))
                                                        (SCALAR))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)))))))))
                    (NULL))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR))))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (SCALAR))))))))
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_ENCAPS_LIST
                                                                    (SCALAR)
                                                                    (AST_VAR)
                                                                    (SCALAR))
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR))))
                                                            (SCALAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (SCALAR)
                                            (AST_VAR)))))))
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))