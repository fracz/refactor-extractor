    public static function createDefault(ContainerInterface $container, ProxyFactory $proxyFactory)
    {
        $resolver = new self();

        $arrayDefinitionResolver = new ArrayResolver($resolver);

        $definitionResolvers = array(
            'DI\Definition\ValueDefinition'               => new ValueResolver(),
            'DI\Definition\ArrayDefinition'               => $arrayDefinitionResolver,
            'DI\Definition\ArrayDefinitionExtension'      => $arrayDefinitionResolver,
            'DI\Definition\FactoryDefinition'             => new FactoryResolver($container),
            'DI\Definition\DecoratorDefinition'           => new DecoratorResolver($container, $resolver),
            'DI\Definition\AliasDefinition'               => new AliasResolver($container),
            'DI\Definition\ObjectDefinition'              => new ObjectCreator($resolver, $proxyFactory),
            'DI\Definition\InstanceDefinition'            => new InstanceInjector($resolver, $proxyFactory),
            'DI\Definition\FunctionCallDefinition'        => new FunctionInvoker($container, $resolver),
            'DI\Definition\EnvironmentVariableDefinition' => new EnvironmentVariableResolver($resolver),
            'DI\Definition\StringDefinition'              => new StringResolver($container),
        );

        $resolver->setDefinitionResolvers($definitionResolvers);

        return $resolver;
    }

    /**
     * Resolve a definition to a value.
     *
     * @param Definition $definition Object that defines how the value should be obtained.
     * @param array      $parameters Optional parameters to use to build the entry.
     *
     * @throws DefinitionException If the definition cannot be resolved.
     *
     * @return mixed Value obtained from the definition.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||