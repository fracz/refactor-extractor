    public function should_test_if_resolvable_using_sub_resolvers()
    {
        $resolvers = array(
            'DI\Definition\ValueDefinition' => EasyMock::mock('DI\Definition\Resolver\DefinitionResolver', array(
                'isResolvable' => true,
            )),
            'DI\Definition\StringDefinition' => EasyMock::mock('DI\Definition\Resolver\DefinitionResolver', array(
                'isResolvable' => false,
            )),
        );

        $dispatcher = new ResolverDispatcher($resolvers);

        $this->assertTrue($dispatcher->isResolvable(new ValueDefinition('name', 'value')));
        $this->assertFalse($dispatcher->isResolvable(new StringDefinition('name', 'value')));
    }

    /**
     * @test
     * @expectedException \RuntimeException
     * @expectedExceptionMessage No definition resolver was configured for definition of type DI\Definition\ValueDefinition
     */
||||||||    public function should_test_if_resolvable_using_sub_resolvers()
    {
        $this->assertTrue($this->resolver->isResolvable(new ValueDefinition('name', 'value')));
        $this->assertTrue($this->resolver->isResolvable(new StringDefinition('name', 'value')));
    }

    /**
     * @test
     * @expectedException \RuntimeException
     * @expectedExceptionMessage No definition resolver was configured for definition of type
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR)))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (SCALAR)))))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR))))))))