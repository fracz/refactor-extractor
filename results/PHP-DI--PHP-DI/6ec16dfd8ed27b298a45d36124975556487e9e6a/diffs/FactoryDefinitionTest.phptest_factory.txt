    public function test_factory($callable, ContainerBuilder $builder)
    {
        $builder->addDefinitions([
            'factory' => \DI\factory($callable),
        ]);

        $this->assertSame('bar', $builder->build()->get('factory'));
    }

    /**
     * @dataProvider provideContainer
     */
||||||||    public function test_factory($callable, ContainerBuilder $builder)
    {
        $isClosure = $callable instanceof \Closure;
        $containsAnObject = is_object($callable) || is_object($callable[0]);
        if ($builder->isCompiled() && $containsAnObject && !$isClosure) {
            // Invokable objects are not compilable
            $this->expectException(\DI\Definition\Exception\InvalidDefinition::class);
            $this->expectExceptionMessage('An object was found but objects cannot be compiled');
        }

        $builder->addDefinitions([
            'factory' => \DI\factory($callable),
        ]);

        $this->assertSame('bar', $builder->build()->get('factory'));
    }

    /**
     * @dataProvider provideContainer
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_INSTANCEOF
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR))))))