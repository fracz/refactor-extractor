    public function should_register_definition_dumpers()
    {
        $definition = new ValueDefinition('foo', 'bar');

        $subDumper = $this->getMockForAbstractClass(DefinitionDumper::class);
        // Check that the sub-dumper is really called
        $subDumper->expects($this->once())
            ->method('dump')
            ->with($definition)
            ->will($this->returnValue('foo'));

        $dumper = new DefinitionDumperDispatcher([
            get_class($definition) => $subDumper,
        ]);

        $this->assertEquals('foo', $dumper->dump($definition));
    }

    /**
     * @test
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (AST_VAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))||||||||