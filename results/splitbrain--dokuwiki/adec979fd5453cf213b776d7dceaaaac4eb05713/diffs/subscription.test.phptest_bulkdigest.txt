||||||||    function test_bulkdigest(){
        $sub = new MockupSubscription();

        // let's start with nothing
        $this->assertEquals(0, $sub->send_bulk('sub1:test'));

        // create a subscription
        $sub->add('sub1:', 'testuser', 'digest', '978328800'); // last mod 2001-01-01

        // now create change
        $_SERVER['REMOTE_USER'] = 'someguy';
        saveWikiText('sub1:test', 'foo bar', 'a subscription change', false);

        // should trigger a mail
        $this->assertEquals(1, $sub->send_bulk('sub1:test'));
        $this->assertEquals(array('arthur@example.com'), $sub->mails);

        $sub->reset();

        // now create more changes
        $_SERVER['REMOTE_USER'] = 'someguy';
        saveWikiText('sub1:sub2:test', 'foo bar', 'a subscription change', false);
        saveWikiText('sub1:another_test', 'foo bar', 'a subscription change', false);

        // should not trigger a mail, because the subscription time has not been reached, yet
        $this->assertEquals(0, $sub->send_bulk('sub1:test'));
        $this->assertEquals(array(), $sub->mails);

        // reset the subscription time
        $sub->add('sub1:', 'testuser', 'digest', '978328800'); // last mod 2001-01-01

        // we now should get mails for three changes
        $this->assertEquals(3, $sub->send_bulk('sub1:test'));
        $this->assertEquals(array('arthur@example.com','arthur@example.com','arthur@example.com'), $sub->mails);
    }

}

/**
 * makes protected methods visible for testing
 */
class MockupSubscription extends Subscription {
    public $mails; // we keep sent mails here

    public function __construct(){
        $this->reset();
    }

    /**
     * resets the mail array
     */
    public function reset(){
        $this->mails = array();
    }

    public function buildregex($user = null, $style = null, $data = null) {
        return parent::buildregex($user, $style, $data);
    }

    protected function send($subscriber_mail, $replaces, $subject, $id, $template){
        $this->mails[] = $subscriber_mail;
        return true;
    }
}

//Setup VIM: ex: et ts=4 :||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CONST)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))
            (AST_PROP
                (AST_VAR)))))