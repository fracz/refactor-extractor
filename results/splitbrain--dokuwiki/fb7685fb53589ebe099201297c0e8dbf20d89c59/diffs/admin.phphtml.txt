    public function html() {
        global $conf;
        $tpl = $conf['template'];
        define('SIMPLE_TEST',1); // hack, ideally certain functions should be moved out of css.php
        require_once(DOKU_INC.'lib/exe/css.php');
        $styleini = css_styleini($conf['template'], true);
        $replacements = $styleini['replacements'];

        ptln('<h1>'.$this->getLang('menu').'</h1>');

        if (empty($replacements)) {
            echo '<p class="error">Sorry, this template does not support this functionality.</p>';
        } else {
            echo '<p>Intro blah... for the currently active template ("'.$tpl.'")... not all variables preview...</p>';

            echo '<form class="styler" id="plugin__styler" method="post">';
            echo '<h2>Template variables</h2>';
            echo '<table>';
            foreach($replacements as $key => $value){
                echo '<tr>';
                echo '<td>'.$key.'</td>';
                echo '<td><input name="tpl['.hsc($key).']" value="'.hsc($value).'" />';
                echo '</tr>';
            }
            echo '</table>';
            echo '<input type="submit" name="do[styler_plugin_preview]" value="preview">';
            echo '<input type="submit" name="do[styler_plugin_reset]" value="reset current">'; #FIXME only if preview.ini exists
            echo '<input type="submit" name="do[styler_plugin_revert]" value="revert to original">'; #FIXME only if local.ini exists
            echo '<input type="submit" name="do[styler_plugin_save]" value="save">';
            echo '</form>';
        }



    }


}

// vim:ts=4:sw=4:et:||||||||    public function html() {
        echo '<div id="plugin__styler">';
        $this->form();
        echo '</div>';
    }

    /**
     * Create the actual editing form
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR)))
                        (AST_ECHO
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ECHO
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ECHO
        (SCALAR)))