    public function pingSearchEngines() {
        //ping search engines...
        $http = new DokuHTTPClient();
        $http->timeout = 8;

        $encoded_sitemap_url = urlencode(wl('', array('do' => 'sitemap'), true, '&'));
        $ping_urls = array(
            'google' => 'http://www.google.com/webmasters/sitemaps/ping?sitemap='.$encoded_sitemap_url,
            'yahoo' => 'http://search.yahooapis.com/SiteExplorerService/V1/updateNotification?appid=dokuwiki&url='.$encoded_sitemap_url,
            'microsoft' => 'http://www.bing.com/webmaster/ping.aspx?siteMap='.$encoded_sitemap_url,
        );

        $event = new Doku_Event('SITEMAP_PING', $ping_urls);
        if ($event->advise_before(true)) {
            foreach ($ping_urls as $name => $url) {
                dbglog("sitemapPingSearchEngines(): pinging $name");
                $resp = $http->get($url);
                if($http->error) dbglog("runSitemapper(): $http->error");
                dbglog('runSitemapper(): '.preg_replace('/[\n\r]/',' ',strip_tags($resp)));
            }
        }
        $event->advise_after();

        return true;
    }
}

class SitemapItem {
    public $url;
    public $lastmod;
    public $changefreq;
    public $priority;

    public function __construct($url, $lastmod, $changefreq = null, $priority = null) {
        $this->url = $url;
        $this->lastmod = $lastmod;
        $this->changefreq = $changefreq;
        $this->priority = $priority;
    }

    public static function createFromID($id, $changefreq = null, $priority = null) {
        $id = trim($id);
        $date = @filemtime(wikiFN($id));
        if(!$date) return NULL;
        return new SitemapItem(wl($id, '', true), $date, $changefreq, $priority);
    }

    public function toXML() {
        $result = '  <url>'.NL;
        $result .= '    <loc>'.hsc($this->url).'</loc>'.NL;
        $result .= '    <lastmod>'.date_iso8601($this->lastmod).'</lastmod>'.NL;
        if ($this->changefreq !== NULL)
            $result .= '    <changefreq>'.hsc($this->changefreq).'</changefreq>'.NL;
        if ($this->priority !== NULL)
            $result .= '    <priority>'.hsc($this->priority).'</priority>'.NL;
        $result .= '  </url>'.NL;
        return $result;
    }
}||||||||    public function pingSearchEngines() {
        //ping search engines...
        $http = new DokuHTTPClient();
        $http->timeout = 8;

        $encoded_sitemap_url = urlencode(wl('', array('do' => 'sitemap'), true, '&'));
        $ping_urls = array(
            'google' => 'http://www.google.com/webmasters/sitemaps/ping?sitemap='.$encoded_sitemap_url,
            'yahoo' => 'http://search.yahooapis.com/SiteExplorerService/V1/updateNotification?appid=dokuwiki&url='.$encoded_sitemap_url,
            'microsoft' => 'http://www.bing.com/webmaster/ping.aspx?siteMap='.$encoded_sitemap_url,
        );

        $data = array('ping_urls' => $ping_urls,
                            'encoded_sitemap_url' => $encoded_sitemap_url
        );
        $event = new Doku_Event('SITEMAP_PING', $data);
        if ($event->advise_before(true)) {
            foreach ($data['ping_urls'] as $name => $url) {
                dbglog("Sitemapper::PingSearchEngines(): pinging $name");
                $resp = $http->get($url);
                if($http->error) dbglog("Sitemapper:pingSearchengines(): $http->error");
                dbglog('Sitemapper:pingSearchengines(): '.preg_replace('/[\n\r]/',' ',strip_tags($resp)));
            }
        }
        $event->advise_after();

        return true;
    }
}

/**
 * An item of a sitemap.
 *
 * @author Michael Hamann
 */
class SitemapItem {
    public $url;
    public $lastmod;
    public $changefreq;
    public $priority;

    /**
     * Create a new item.
     *
     * @param $url string The url of the item
     * @param $lastmod int Timestamp of the last modification
     * @param $changefreq string How frequently the item is likely to change. Valid values: always, hourly, daily, weekly, monthly, yearly, never.
     * @param $priority float|string The priority of the item relative to other URLs on your site. Valid values range from 0.0 to 1.0.
     */
    public function __construct($url, $lastmod, $changefreq = null, $priority = null) {
        $this->url = $url;
        $this->lastmod = $lastmod;
        $this->changefreq = $changefreq;
        $this->priority = $priority;
    }

    /**
     * Helper function for creating an item for a wikipage id.
     *
     * @param $id string A wikipage id.
     * @param $changefreq string How frequently the item is likely to change. Valid values: always, hourly, daily, weekly, monthly, yearly, never.
     * @param $priority float|string The priority of the item relative to other URLs on your site. Valid values     range from 0.0 to 1.0.
     * @return The sitemap item.
     */
    public static function createFromID($id, $changefreq = null, $priority = null) {
        $id = trim($id);
        $date = @filemtime(wikiFN($id));
        if(!$date) return NULL;
        return new SitemapItem(wl($id, '', true), $date, $changefreq, $priority);
    }

    /**
     * Get the XML representation of the sitemap item.
     *
     * @return The XML representation.
     */
    public function toXML() {
        $result = '  <url>'.NL
                 .'    <loc>'.hsc($this->url).'</loc>'.NL
                 .'    <lastmod>'.date_iso8601($this->lastmod).'</lastmod>'.NL;
        if ($this->changefreq !== NULL)
            $result .= '    <changefreq>'.hsc($this->changefreq).'</changefreq>'.NL;
        if ($this->priority !== NULL)
            $result .= '    <priority>'.hsc($this->priority).'</priority>'.NL;
        $result .= '  </url>'.NL;
        return $result;
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (AST_CONST)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CALL
                                        (
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR))))))))
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (AST_CONST)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))
            (
                (AST_FOREACH
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CALL
                                        (
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR))))))))
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))