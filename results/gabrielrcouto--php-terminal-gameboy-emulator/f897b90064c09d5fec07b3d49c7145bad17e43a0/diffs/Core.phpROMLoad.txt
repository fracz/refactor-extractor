    public function ROMLoad()
    {
        //Load the first two ROM banks (0x0000 - 0x7FFF) into regular gameboy memory:
        $this->ROM = $this->getTypedArray(strlen($this->ROMImage), 0, 'uint8');

        for ($romIndex = 0; $romIndex < strlen($this->ROMImage); ++$romIndex) {
            $this->ROM[$romIndex] = (ord($this->ROMImage[$romIndex]) & 0xFF);
            if ($romIndex < 0x8000) {
                $this->memory[$romIndex] = $this->ROM[$romIndex]; //Load in the game ROM.
            }
        }
        // ROM name
        for ($address = 0x134; $address < 0x13F; ++$address) {
            if (ord($this->ROMImage[$address]) > 0) {
                $this->name .= $this->ROMImage[$address];
            }
        }

        // ROM game code (for newer games)
        for ($address = 0x13F; $address < 0x143; ++$address) {
            if (ord($this->ROMImage[$address]) > 0) {
                $this->gameCode .= $this->ROMImage[$address];
            }
        }

        echo 'Game Title: '.$this->name.'['.$this->gameCode.']['.$this->ROMImage[0x143].']'.PHP_EOL;

        echo 'Game Code: '.$this->gameCode.PHP_EOL;

        // Cartridge type
        $this->cartridgeType = $this->ROM[0x147];
        echo 'Cartridge type #'.$this->cartridgeType.PHP_EOL;

        //Map out ROM cartridge sub-types.
        $MBCType = '';

        switch ($this->cartridgeType) {
            case 0x00:
                //ROM w/o bank switching
                if (!Settings::$settings[9]) {
                    $MBCType = 'ROM';
                    break;
                }
                // no break
            case 0x01:
                $this->cMBC1 = true;
                $MBCType = 'MBC1';
                break;
            case 0x02:
                $this->cMBC1 = true;
                $this->cSRAM = true;
                $MBCType = 'MBC1 + SRAM';
                break;
            case 0x03:
                $this->cMBC1 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MBC1 + SRAM + BATT';
                break;
            case 0x05:
                $this->cMBC2 = true;
                $MBCType = 'MBC2';
                break;
            case 0x06:
                $this->cMBC2 = true;
                $this->cBATT = true;
                $MBCType = 'MBC2 + BATT';
                break;
            case 0x08:
                $this->cSRAM = true;
                $MBCType = 'ROM + SRAM';
                break;
            case 0x09:
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'ROM + SRAM + BATT';
                break;
            case 0x0B:
                $this->cMMMO1 = true;
                $MBCType = 'MMMO1';
                break;
            case 0x0C:
                $this->cMMMO1 = true;
                $this->cSRAM = true;
                $MBCType = 'MMMO1 + SRAM';
                break;
            case 0x0D:
                $this->cMMMO1 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MMMO1 + SRAM + BATT';
                break;
            case 0x0F:
                $this->cMBC3 = true;
                $this->cTIMER = true;
                $this->cBATT = true;
                $MBCType = 'MBC3 + TIMER + BATT';
                break;
            case 0x10:
                $this->cMBC3 = true;
                $this->cTIMER = true;
                $this->cBATT = true;
                $this->cSRAM = true;
                $MBCType = 'MBC3 + TIMER + BATT + SRAM';
                break;
            case 0x11:
                $this->cMBC3 = true;
                $MBCType = 'MBC3';
                break;
            case 0x12:
                $this->cMBC3 = true;
                $this->cSRAM = true;
                $MBCType = 'MBC3 + SRAM';
                break;
            case 0x13:
                $this->cMBC3 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MBC3 + SRAM + BATT';
                break;
            case 0x19:
                $this->cMBC5 = true;
                $MBCType = 'MBC5';
                break;
            case 0x1A:
                $this->cMBC5 = true;
                $this->cSRAM = true;
                $MBCType = 'MBC5 + SRAM';
                break;
            case 0x1B:
                $this->cMBC5 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MBC5 + SRAM + BATT';
                break;
            case 0x1C:
                $this->cRUMBLE = true;
                $MBCType = 'RUMBLE';
                break;
            case 0x1D:
                $this->cRUMBLE = true;
                $this->cSRAM = true;
                $MBCType = 'RUMBLE + SRAM';
                break;
            case 0x1E:
                $this->cRUMBLE = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'RUMBLE + SRAM + BATT';
                break;
            case 0x1F:
                $this->cCamera = true;
                $MBCType = 'GameBoy Camera';
                break;
            case 0xFD:
                $this->cTAMA5 = true;
                $MBCType = 'TAMA5';
                break;
            case 0xFE:
                $this->cHuC3 = true;
                $MBCType = 'HuC3';
                break;
            case 0xFF:
                $this->cHuC1 = true;
                $MBCType = 'HuC1';
                break;
            default:
                $MBCType = 'Unknown';
                throw new RuntimeException('Cartridge type is unknown.');
        }

        echo 'Cartridge Type: '.$MBCType.PHP_EOL;

        // ROM and RAM banks
        $this->numROMBanks = $this->ROMBanks[$this->ROM[0x148]];

        echo $this->numROMBanks.' ROM banks.'.PHP_EOL;

        switch ($this->RAMBanks[$this->ROM[0x149]]) {
            case 0:
                echo 'No RAM banking requested for allocation or MBC is of type 2.'.PHP_EOL;
                break;
            case 2:
                echo '1 RAM bank requested for allocation.'.PHP_EOL;
                break;
            case 3:
                echo '4 RAM banks requested for allocation.'.PHP_EOL;
                break;
            case 4:
                echo '16 RAM banks requested for allocation.'.PHP_EOL;
                break;
            default:
                echo 'RAM bank amount requested is unknown, will use maximum allowed by specified MBC type.'.PHP_EOL;
        }

        //Check the GB/GBC mode byte:
        switch ($this->ROM[0x143]) {
            case 0x00: //Only GB mode
                $this->cGBC = false;
                echo 'Only GB mode detected.'.PHP_EOL;
                break;
            case 0x80: //Both GB + GBC modes
                $this->cGBC = !Settings::$settings[2];
                echo 'GB and GBC mode detected.'.PHP_EOL;
                break;
            case 0xC0: //Only GBC mode
                $this->cGBC = true;
                echo 'Only GBC mode detected.'.PHP_EOL;
                break;
            default:
                $this->cGBC = false;
                echo 'Unknown GameBoy game type code #'.$this->ROM[0x143].", defaulting to GB mode (Old games don't have a type code).".PHP_EOL;
        }

        $this->inBootstrap = false;
        $this->setupRAM(); //CPU/(V)RAM initialization.
        $this->initSkipBootstrap();

        $this->checkPaletteType();
        //License Code Lookup:
        $cOldLicense = $this->ROM[0x14B];
        $cNewLicense = ($this->ROM[0x144] & 0xFF00) | ($this->ROM[0x145] & 0xFF);
        if ($cOldLicense != 0x33) {
            //Old Style License Header
            echo 'Old style license code: '.$cOldLicense.PHP_EOL;
        } else {
            //New Style License Header
            echo 'New style license code: '.$cNewLicense.PHP_EOL;
        }
    }

||||||||    public function ROMLoad()
    {
        //Load the first two ROM banks (0x0000 - 0x7FFF) into regular gameboy memory:
        $this->ROM = $this->getTypedArray(strlen($this->ROMImage), 0, 'uint8');

        for ($romIndex = 0; $romIndex < strlen($this->ROMImage); ++$romIndex) {
            $this->ROM[$romIndex] = (ord($this->ROMImage[$romIndex]) & 0xFF);
            if ($romIndex < 0x8000) {
                $this->memory[$romIndex] = $this->ROM[$romIndex]; //Load in the game ROM.
            }
        }
        // ROM name
        for ($address = 0x134; $address < 0x13F; ++$address) {
            if (ord($this->ROMImage[$address]) > 0) {
                $this->name .= $this->ROMImage[$address];
            }
        }

        // ROM game code (for newer games)
        for ($address = 0x13F; $address < 0x143; ++$address) {
            if (ord($this->ROMImage[$address]) > 0) {
                $this->gameCode .= $this->ROMImage[$address];
            }
        }

        echo 'Game Title: '.$this->name.'['.$this->gameCode.']['.$this->ROMImage[0x143].']'.PHP_EOL;

        echo 'Game Code: '.$this->gameCode.PHP_EOL;

        // Cartridge type
        $this->cartridgeType = $this->ROM[0x147];
        echo 'Cartridge type #'.$this->cartridgeType.PHP_EOL;

        //Map out ROM cartridge sub-types.
        $MBCType = '';

        switch ($this->cartridgeType) {
            case 0x00:
                //ROM w/o bank switching
                if (!Settings::$overrideMBC1) {
                    $MBCType = 'ROM';
                    break;
                }
                // no break
            case 0x01:
                $this->cMBC1 = true;
                $MBCType = 'MBC1';
                break;
            case 0x02:
                $this->cMBC1 = true;
                $this->cSRAM = true;
                $MBCType = 'MBC1 + SRAM';
                break;
            case 0x03:
                $this->cMBC1 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MBC1 + SRAM + BATT';
                break;
            case 0x05:
                $this->cMBC2 = true;
                $MBCType = 'MBC2';
                break;
            case 0x06:
                $this->cMBC2 = true;
                $this->cBATT = true;
                $MBCType = 'MBC2 + BATT';
                break;
            case 0x08:
                $this->cSRAM = true;
                $MBCType = 'ROM + SRAM';
                break;
            case 0x09:
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'ROM + SRAM + BATT';
                break;
            case 0x0B:
                $this->cMMMO1 = true;
                $MBCType = 'MMMO1';
                break;
            case 0x0C:
                $this->cMMMO1 = true;
                $this->cSRAM = true;
                $MBCType = 'MMMO1 + SRAM';
                break;
            case 0x0D:
                $this->cMMMO1 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MMMO1 + SRAM + BATT';
                break;
            case 0x0F:
                $this->cMBC3 = true;
                $this->cTIMER = true;
                $this->cBATT = true;
                $MBCType = 'MBC3 + TIMER + BATT';
                break;
            case 0x10:
                $this->cMBC3 = true;
                $this->cTIMER = true;
                $this->cBATT = true;
                $this->cSRAM = true;
                $MBCType = 'MBC3 + TIMER + BATT + SRAM';
                break;
            case 0x11:
                $this->cMBC3 = true;
                $MBCType = 'MBC3';
                break;
            case 0x12:
                $this->cMBC3 = true;
                $this->cSRAM = true;
                $MBCType = 'MBC3 + SRAM';
                break;
            case 0x13:
                $this->cMBC3 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MBC3 + SRAM + BATT';
                break;
            case 0x19:
                $this->cMBC5 = true;
                $MBCType = 'MBC5';
                break;
            case 0x1A:
                $this->cMBC5 = true;
                $this->cSRAM = true;
                $MBCType = 'MBC5 + SRAM';
                break;
            case 0x1B:
                $this->cMBC5 = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'MBC5 + SRAM + BATT';
                break;
            case 0x1C:
                $this->cRUMBLE = true;
                $MBCType = 'RUMBLE';
                break;
            case 0x1D:
                $this->cRUMBLE = true;
                $this->cSRAM = true;
                $MBCType = 'RUMBLE + SRAM';
                break;
            case 0x1E:
                $this->cRUMBLE = true;
                $this->cSRAM = true;
                $this->cBATT = true;
                $MBCType = 'RUMBLE + SRAM + BATT';
                break;
            case 0x1F:
                $this->cCamera = true;
                $MBCType = 'GameBoy Camera';
                break;
            case 0xFD:
                $this->cTAMA5 = true;
                $MBCType = 'TAMA5';
                break;
            case 0xFE:
                $this->cHuC3 = true;
                $MBCType = 'HuC3';
                break;
            case 0xFF:
                $this->cHuC1 = true;
                $MBCType = 'HuC1';
                break;
            default:
                $MBCType = 'Unknown';
                throw new RuntimeException('Cartridge type is unknown.');
        }

        echo 'Cartridge Type: '.$MBCType.PHP_EOL;

        // ROM and RAM banks
        $this->numROMBanks = $this->ROMBanks[$this->ROM[0x148]];

        echo $this->numROMBanks.' ROM banks.'.PHP_EOL;

        switch ($this->RAMBanks[$this->ROM[0x149]]) {
            case 0:
                echo 'No RAM banking requested for allocation or MBC is of type 2.'.PHP_EOL;
                break;
            case 2:
                echo '1 RAM bank requested for allocation.'.PHP_EOL;
                break;
            case 3:
                echo '4 RAM banks requested for allocation.'.PHP_EOL;
                break;
            case 4:
                echo '16 RAM banks requested for allocation.'.PHP_EOL;
                break;
            default:
                echo 'RAM bank amount requested is unknown, will use maximum allowed by specified MBC type.'.PHP_EOL;
        }

        //Check the GB/GBC mode byte:
        switch ($this->ROM[0x143]) {
            case 0x00: //Only GB mode
                $this->cGBC = false;
                echo 'Only GB mode detected.'.PHP_EOL;
                break;
            case 0x80: //Both GB + GBC modes
                $this->cGBC = !Settings::$priorizeGameBoyMode;
                echo 'GB and GBC mode detected.'.PHP_EOL;
                break;
            case 0xC0: //Only GBC mode
                $this->cGBC = true;
                echo 'Only GBC mode detected.'.PHP_EOL;
                break;
            default:
                $this->cGBC = false;
                echo 'Unknown GameBoy game type code #'.$this->ROM[0x143].", defaulting to GB mode (Old games don't have a type code).".PHP_EOL;
        }

        $this->inBootstrap = false;
        $this->setupRAM(); //CPU/(V)RAM initialization.
        $this->initSkipBootstrap();

        $this->checkPaletteType();
        //License Code Lookup:
        $cOldLicense = $this->ROM[0x14B];
        $cNewLicense = ($this->ROM[0x144] & 0xFF00) | ($this->ROM[0x145] & 0xFF);
        if ($cOldLicense != 0x33) {
            //Old Style License Header
            echo 'Old style license code: '.$cOldLicense.PHP_EOL;
        } else {
            //New Style License Header
            echo 'New style license code: '.$cNewLicense.PHP_EOL;
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR)
                (SCALAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))
                        (SCALAR))
                    (
                        (AST_ASSIGN_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))
                        (SCALAR))
                    (
                        (AST_ASSIGN_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (AST_CONST)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_SWITCH
        (AST_PROP
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL)))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_CONST)))
    (AST_SWITCH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_SWITCH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR))))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (AST_CONST)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR)
                (SCALAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))
                        (SCALAR))
                    (
                        (AST_ASSIGN_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))
                        (SCALAR))
                    (
                        (AST_ASSIGN_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (AST_CONST)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_SWITCH
        (AST_PROP
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_STATIC_PROP))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL)))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_CONST)))
    (AST_SWITCH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_SWITCH
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_STATIC_PROP)))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONST)))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (AST_CONST)))))))