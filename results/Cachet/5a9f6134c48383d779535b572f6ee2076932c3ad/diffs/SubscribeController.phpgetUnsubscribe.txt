    public function getUnsubscribe($code = null, $subscription = null)
    {
        if ($code === null) {
            throw new NotFoundHttpException();
        }

        $subscriber = Subscriber::where('verify_code', '=', $code)->first();

        if (!$subscriber || !$subscriber->is_verified) {
            throw new BadRequestHttpException();
        }

        if ($subscription) {
            dispatch(new UnsubscribeSubscriptionCommand(Subscription::forSubscriber($subscriber->id)->firstOrFail()));
        } else {
            dispatch(new UnsubscribeSubscriberCommand($subscriber, $subscription));
        }

        return Redirect::route('status-page')
            ->withSuccess(sprintf('%s %s', trans('dashboard.notifications.awesome'), trans('cachet.subscriber.email.unsubscribed')));
    }

    /**
     * Shows the subscription manager page.
     *
     * @param string|null $code
     *
     * @return \Illuminate\View\View
     */
||||||||    public function getUnsubscribe($code = null, $subscription = null)
    {
        if ($code === null) {
            throw new NotFoundHttpException();
        }

        $subscriber = Subscriber::where('verify_code', '=', $code)->first();

        if (!$subscriber || !$subscriber->is_verified) {
            throw new BadRequestHttpException();
        }

        if ($subscription) {
            dispatch(new UnsubscribeSubscriptionCommand(Subscription::forSubscriber($subscriber->id)->firstOrFail()));
        } else {
            dispatch(new UnsubscribeSubscriberCommand($subscriber, $subscription));
        }

        return cachet_route('status-page')
            ->withSuccess(sprintf('%s %s', trans('dashboard.notifications.awesome'), trans('cachet.subscriber.email.unsubscribed')));
    }

    /**
     * Shows the subscription manager page.
     *
     * @param string|null $code
     *
     * @return \Illuminate\View\View
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CALL
                            (
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CALL
                            (
                                (SCALAR)))))))))