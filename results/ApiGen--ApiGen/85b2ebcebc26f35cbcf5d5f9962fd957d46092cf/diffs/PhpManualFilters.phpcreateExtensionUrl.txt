	private function createExtensionUrl(ReflectionExtension $element)
	{
		$extensionName = strtolower($element->getName());
		if ($extensionName === 'core') {
			return self::PHP_MANUAL_URL;
		}

		if ($extensionName === 'date') {
			$extensionName = 'datetime';
		}

		return sprintf('%s/book.%s.php', self::PHP_MANUAL_URL, $extensionName);
	}

}||||||||	private function createExtensionUrl(ReflectionExtension $reflectionExtension)
	{
		$extensionName = strtolower($reflectionExtension->getName());
		if ($extensionName === 'core') {
			return self::PHP_MANUAL_URL;
		}

		if ($extensionName === 'date') {
			$extensionName = 'datetime';
		}

		return self::PHP_MANUAL_URL . '/book.' . $extensionName . '.php';
	}


	/**
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CLASS_CONST
                        (SCALAR))
                    (SCALAR))
                (AST_VAR))
            (SCALAR))))