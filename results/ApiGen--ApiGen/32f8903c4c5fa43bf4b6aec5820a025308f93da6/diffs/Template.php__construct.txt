	public function __construct(Generator $generator)
	{
		$this->generator = $generator;

		$this->setCacheStorage(new Nette\Caching\Storages\MemoryStorage);

		$that = $this;

		$latte = new Nette\Latte\Engine;
		$latte->handler->macros['try'] = '<?php try { ?>';
		$latte->handler->macros['/try'] = '<?php } catch (\Exception $e) {} ?>';
		$this->registerFilter($latte);

		// common operations
		$this->registerHelperLoader('Nette\Templating\DefaultHelpers::loader');
		$this->registerHelper('ucfirst', 'ucfirst');
		$this->registerHelper('values', 'array_values');
		$this->registerHelper('map', function($arr, $callback) {
			return array_map(create_function('$value', $callback), $arr);
		});
		$this->registerHelper('replaceRE', 'Nette\StringUtils::replace');

		// PHP source highlight
		$fshl = new \fshlParser('HTML_UTF8');
		$this->registerHelper('highlightPHP', function($source) use ($fshl) {
			return $fshl->highlightString('PHP', (string) $source);
		});

		// links
		$this->registerHelper('packageLink', callback($this->generator, 'getPackageLink'));
		$this->registerHelper('namespaceLink', callback($this->generator, 'getNamespaceLink'));
		$this->registerHelper('classLink', callback($this->generator, 'getClassLink'));
		$this->registerHelper('methodLink', callback($this->generator, 'getMethodLink'));
		$this->registerHelper('propertyLink', callback($this->generator, 'getPropertyLink'));
		$this->registerHelper('constantLink', callback($this->generator, 'getConstantLink'));
		$this->registerHelper('sourceLink', callback($this->generator, 'getSourceLink'));

		// types
		$this->registerHelper('getTypes', callback($this, 'getTypes'));
		$this->registerHelper('getType', function($variable) {
			return is_object($variable) ? get_class($variable) : gettype($variable);
		});
		$this->registerHelper('resolveType', callback($this, 'resolveType'));

		// docblock
		$texy = new \Texy;
		$texy->mergeLines = FALSE;
		$texy->allowedTags = \Texy::NONE;
		$texy->allowed['list/definition'] = FALSE;
		$texy->allowed['phrase/em-alt'] = FALSE;
		$texy->allowed['longwords'] = FALSE;
		$texy->registerBlockPattern( // highlight <code>, <pre>
			function($parser, $matches, $name) use ($fshl) {
				$content = $matches[1] === 'code' ? $fshl->highlightString('PHP', $matches[2]) : htmlSpecialChars($matches[2]);
				$content = $parser->getTexy()->protect($content, \Texy::CONTENT_BLOCK);
				return \TexyHtml::el('pre', $content);
			},
			'#<(code|pre)>(.+?)</\1>#s',
			'codeBlockSyntax'
		);

		// Documentation formatting
		$this->registerHelper('docline', function($text) use ($texy) {
			return $texy->processLine($text);
		});
		$this->registerHelper('docblock', function($text) use ($texy) {
			return $texy->process($text);
		});
		$this->registerHelper('doclabel', function($doc, $namespace) use ($that) {
			@list($names, $label) = preg_split('#\s+#', $doc, 2);
			$res = '';
			foreach (explode('|', $names) as $name) {
				$class = $that->resolveType($name, $namespace);
				$res .= $class !== null ? sprintf('<a href="%s">%s</a>', $that->classLink($class), $that->escapeHtml($class)) : $that->escapeHtml(ltrim($name, '\\'));
				$res .= '|';
			}
			return rtrim($res, '|') . ' ' . $that->escapeHtml($label);
		});

		// Docblock descriptions
		$this->registerHelper('longDescription', function($element, $shortIfNone = false) {
			$short = $element->getAnnotation(ReflectionAnnotation::SHORT_DESCRIPTION);
			$long = $element->getAnnotation(ReflectionAnnotation::LONG_DESCRIPTION);

			if ($long) {
				$short .= "\n\n" . $long;
			}

			return $short;
		});
		$this->registerHelper('shortDescription', function($element) {
			return $element->getAnnotation(ReflectionAnnotation::SHORT_DESCRIPTION);
		});

		// individual annotations processing
		$this->registerHelper('annotation', function($value, $name, ApiReflection $parent) use ($that) {
			switch ($name) {
				case 'package':
					return '<a href="' . $that->packageLink($value) . '">' . $that->escapeHtml($value) . '</a>';
					break;
				case 'see':
					$reflection = $that->resolveClassLink($value, $parent);
					if ($reflection instanceof ApiReflection) {
						$link = $that->classLink($reflection);
						$value = $reflection->getName();
					} elseif ($reflection instanceof ReflectionProperty) {
						$link = $that->propertyLink($reflection);
						$value = $reflection->getDeclaringClassName() . '::$' . $reflection->getName();
					} elseif ($reflection instanceof ReflectionMethod) {
						$link = $that->methodLink($reflection);
						$value = $reflection->getDeclaringClassName() . '::' . $reflection->getName() . '()';
					} elseif ($reflection instanceof ReflectionConstant) {
						$link = $that->constantLink($reflection);
						$value = $reflection->getDeclaringClassName() . '::' . $reflection->getName();
					} else {
						break;
					}

					return '<a href="' . $link . '">' . $that->escapeHtml($value) . '</a>';
					break;
			}

			return $that->docline($value);
		});

		// static files versioning
		$destination = $this->generator->config->destination;
		$this->registerHelper('staticFile', function($name, $line = null) use ($destination) {
			static $versions = array();

			$filename = $destination . '/' . $name;
			if (!isset($versions[$filename]) && file_exists($filename)) {
				$versions[$filename] = sprintf('%u', crc32(file_get_contents($filename)));
			}
			if (isset($versions[$filename])) {
				$name .= '?' . $versions[$filename];
			}
			return $name;
		});
	}

||||||||	public function __construct(Generator $generator)
	{
		$this->generator = $generator;

		$this->setCacheStorage(new Nette\Caching\Storages\MemoryStorage);

		$that = $this;

		$latte = new Nette\Latte\Engine;
		$latte->handler->macros['try'] = '<?php try { ?>';
		$latte->handler->macros['/try'] = '<?php } catch (\Exception $e) {} ?>';
		$this->registerFilter($latte);

		// common operations
		$this->registerHelperLoader('Nette\Templating\DefaultHelpers::loader');
		$this->registerHelper('ucfirst', 'ucfirst');
		$this->registerHelper('values', 'array_values');
		$this->registerHelper('map', function($arr, $callback) {
			return array_map(create_function('$value', $callback), $arr);
		});
		$this->registerHelper('replaceRE', 'Nette\StringUtils::replace');

		// PHP source highlight
		$fshl = new \fshlParser('HTML_UTF8');
		$this->registerHelper('highlightPHP', function($source) use ($fshl) {
			return $fshl->highlightString('PHP', (string) $source);
		});

		// links
		$this->registerHelper('packageLink', callback($this->generator, 'getPackageLink'));
		$this->registerHelper('namespaceLink', callback($this->generator, 'getNamespaceLink'));
		$this->registerHelper('classLink', callback($this->generator, 'getClassLink'));
		$this->registerHelper('methodLink', callback($this->generator, 'getMethodLink'));
		$this->registerHelper('propertyLink', callback($this->generator, 'getPropertyLink'));
		$this->registerHelper('constantLink', callback($this->generator, 'getConstantLink'));
		$this->registerHelper('sourceLink', callback($this->generator, 'getSourceLink'));

		// types
		$this->registerHelper('getTypes', callback($this, 'getTypes'));
		$this->registerHelper('getType', function($variable) {
			return is_object($variable) ? get_class($variable) : gettype($variable);
		});
		$this->registerHelper('resolveType', callback($this, 'resolveType'));

		// docblock
		$texy = new \Texy;
		$texy->mergeLines = FALSE;
		$texy->allowedTags = \Texy::NONE;
		$texy->allowed['list/definition'] = FALSE;
		$texy->allowed['phrase/em-alt'] = FALSE;
		$texy->allowed['longwords'] = FALSE;
		// highlighting <code>, <pre>
		$texy->registerBlockPattern(
			function($parser, $matches, $name) use ($fshl) {
				$content = $matches[1] === 'code' ? $fshl->highlightString('PHP', $matches[2]) : htmlSpecialChars($matches[2]);
				$content = $parser->getTexy()->protect($content, \Texy::CONTENT_BLOCK);
				return \TexyHtml::el('pre', $content);
			},
			'#<(code|pre)>(.+?)</\1>#s',
			'codeBlockSyntax'
		);
		// {@link ...} resolving
		$texy->registerLinePattern(
			function($parser, $matches) use ($that) {
				$link = $that->resolveClassLink($matches[1], $that->class);
				return null === $link ? $matches[0] : $parser->getTexy()->protect($link, \Texy::CONTENT_BLOCK);
			},
			'~{@link\\s+([^}]+)}~',
			'resolveLinks'
		);

		// Documentation formatting
		$this->registerHelper('docline', function($text) use ($texy) {
			return $texy->processLine($text);
		});
		$this->registerHelper('docblock', function($text) use ($texy) {
			return $texy->process($text);
		});
		$this->registerHelper('doclabel', function($doc, $namespace) use ($that) {
			@list($names, $label) = preg_split('#\s+#', $doc, 2);
			$res = '';
			foreach (explode('|', $names) as $name) {
				$class = $that->resolveType($name, $namespace);
				$res .= $class !== null ? sprintf('<a href="%s">%s</a>', $that->classLink($class), $that->escapeHtml($class)) : $that->escapeHtml(ltrim($name, '\\'));
				$res .= '|';
			}
			return rtrim($res, '|') . ' ' . $that->escapeHtml($label);
		});

		// Docblock descriptions
		$this->registerHelper('longDescription', function($element, $shortIfNone = false) {
			$short = $element->getAnnotation(ReflectionAnnotation::SHORT_DESCRIPTION);
			$long = $element->getAnnotation(ReflectionAnnotation::LONG_DESCRIPTION);

			if ($long) {
				$short .= "\n\n" . $long;
			}

			return $short;
		});
		$this->registerHelper('shortDescription', function($element) {
			return $element->getAnnotation(ReflectionAnnotation::SHORT_DESCRIPTION);
		});

		// individual annotations processing
		$this->registerHelper('annotation', function($value, $name, ApiReflection $parent) use ($that) {
			switch ($name) {
				case 'package':
					return '<a href="' . $that->packageLink($value) . '">' . $that->escapeHtml($value) . '</a>';
					break;
				case 'see':
					return $that->resolveClassLink($value, $parent) ?: $that->docline($value);
					break;
				default:
					return $that->docline($value);
			}


		});

		// static files versioning
		$destination = $this->generator->config->destination;
		$this->registerHelper('staticFile', function($name, $line = null) use ($destination) {
			static $versions = array();

			$filename = $destination . '/' . $name;
			if (!isset($versions[$filename]) && file_exists($filename)) {
				$versions[$filename] = sprintf('%u', crc32(file_get_contents($filename)));
			}
			if (isset($versions[$filename])) {
				$name .= '?' . $versions[$filename];
			}
			return $name;
		});
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_CAST
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_CONDITIONAL
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_UNARY_OP
                        (AST_ASSIGN
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL)))
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_FOREACH
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)))))))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))))
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_VAR)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (AST_VAR))))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR))))
                                            (SCALAR)))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_INSTANCEOF
                                                (AST_VAR))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR))))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))))
                                        (AST_IF_ELEM
                                            (AST_INSTANCEOF
                                                (AST_VAR))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR))))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))
                                                            (SCALAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))))
                                        (AST_IF_ELEM
                                            (AST_INSTANCEOF
                                                (AST_VAR))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR))))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR))
                                                                (SCALAR))
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)))
                                                        (SCALAR)))))
                                        (AST_IF_ELEM
                                            (AST_INSTANCEOF
                                                (AST_VAR))
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR))))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))
                                                            (SCALAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))))
                                        (AST_IF_ELEM
                                            (NULL)
                                            (
                                                (AST_BREAK
                                                    (NULL)))))
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR))))
                                            (SCALAR)))
                                    (AST_BREAK
                                        (NULL))))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_STATIC
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_ISSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))))))))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_ISSET
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR)))))))
                    (AST_RETURN
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_CAST
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_CONDITIONAL
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_RETURN
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_UNARY_OP
                        (AST_ASSIGN
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL)))
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_FOREACH
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)))))))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))))
                    (AST_RETURN
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_VAR)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (AST_VAR))))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR))))
                                            (SCALAR)))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_RETURN
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)))
                                            (NULL)
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)))))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_RETURN
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_STATIC
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_ISSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))))))))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_ISSET
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR)))))))
                    (AST_RETURN
                        (AST_VAR)))))))