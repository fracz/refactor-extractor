 namespace TokenReflection;use TokenReflection\Broker\Backend;use ArrayIterator,RecursiveDirectoryIterator,RecursiveIteratorIterator;use RuntimeException;class Broker{const CACHE_CLASS='class';const CACHE_FUNCTION='function';const CACHE_CONSTANT='constant';const CACHE_NAMESPACE='namespace';private$backend;private$cache;public function __construct(Backend$backend,$storingTokenStream=true){$this->cache=array(self::CACHE_CLASS => array(),self::CACHE_CONSTANT => array(),self::CACHE_FUNCTION => array(),self::CACHE_NAMESPACE => array());$this->backend=$backend ->setBroker($this)->setStoringTokenStreams($storingTokenStream);}public function processFile($filename){$realName=realpath($filename);if(false ===$realName){throw new Exception(sprintf('File %s does not exist',$filename),Exception::FILE_DOES_NOT_EXIST);}if($this->backend->isFileProcessed($realName)){$tokens=$this->backend->getFileTokens($realName);}else{$contents=@file_get_contents($filename);if(false ===$contents){throw new Exception('File is not readable',Exception::FILE_NOT_READABLE);}$contents=str_replace(array("\r\n","\r"),"\n",$contents);static$checkLines=array(T_COMMENT,T_WHITESPACE,T_DOC_COMMENT,T_INLINE_HTML,T_ENCAPSED_AND_WHITESPACE,T_CONSTANT_ENCAPSED_STRING);$actualLine=0;$tmp=null;$tokens=@token_get_all($contents);foreach($tokens as$index =>$token){if(!is_array($token)){if(0 ===$index){throw new RuntimeException('The first token has to be a complete one.');}$tokens[$index]=array($token,$token,$actualLine);}else{$actualLine=$token[2];if(in_array($token[0],$checkLines)){$actualLine += substr_count($token[1],"\n",$tmp);}}}}$reflectionFile=new ReflectionFile($realName,$tokens,$this);if(!$this->backend->isFileProcessed($realName)){$this->backend->addFile($reflectionFile);foreach($this->cache as$type =>$cached){if(!empty($cached)){$this->cache[$type]=array_filter($cached,function(IReflection$reflection){return$reflection->isTokenized();});}}}return$reflectionFile;}public function processDirectory($path){$realPath=realpath($path);if(false ===$realPath){throw new Exception(sprintf('Directory %s does not exist',$path),Exception::FILE_DOES_NOT_EXIST);}$result=array();foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($realPath))as$entry){if($entry->isFile()){$result[$entry->getPathName()]=$this->processFile($entry->getPathName());}}return$result;}public function getNamespace($namespaceName){$namespaceName=ltrim($namespaceName,'\\');if(isset($this->cache[self::CACHE_NAMESPACE][$namespaceName])){return$this->cache[self::CACHE_NAMESPACE][$namespaceName];}$namespace=$this->backend->getNamespace($namespaceName);if(null !==$namespace){$this->cache[self::CACHE_NAMESPACE][$namespaceName]=$namespaceName;}return$namespace;}public function getClass($className){$className=ltrim($className,'\\');if(isset($this->cache[self::CACHE_CLASS][$className])){return$this->cache[self::CACHE_CLASS][$className];}$this->cache[self::CACHE_CLASS][$className]=$this->backend->getClass($className);return$this->cache[self::CACHE_CLASS][$className];}public function getFunction($functionName){$functionName=ltrim($functionName,'\\');if(isset($this->cache[self::CACHE_FUNCTION][$functionName])){return$this->cache[self::CACHE_FUNCTION][$functionName];}if($function=$this->backend->getFunction($functionName)){$this->cache[self::CACHE_FUNCTION][$functionName]=$function;}return$function;}public function getConstant($constantName){$constantName=ltrim($constantName,'\\');if(isset($this->cache[self::CACHE_CONSTANT][$constantName])){return$this->cache[self::CACHE_CONSTANT][$constantName];}if($constant=$this->backend->getConstant($constantName)){$this->cache[self::CACHE_CONSTANT][$constantName]=$constant;}return$constant;}public function getFileTokens($fileName){if(!$this->backend->getStoringTokenStreams){throw new RuntimeException('Token streams storing is turned off.');}return$this->backend->getFileTokens($fileName);}public function getClasses($types=Backend::TOKENIZED_CLASSES){return$this->backend->getClasses($types);}}
 namespace TokenReflection;use Exception as InternalException;class Exception extends InternalException{const UNSUPPORTED=-1;const INVALID_SOURCE=0;const FILE_DOES_NOT_EXIST=1;const FILE_NOT_READABLE=2;const DIR_DOES_NOT_EXIST=3;const NO_BACKEND_SET=5;const UNSERIALIZATION_ERROR=10;const DOES_NOT_EXIST=15;}
||||||||function
processFile($filename){$realName=realpath($filename);if(false
===$realName){throw
new
Exception(sprintf('File %s does not exist',$filename),Exception::FILE_DOES_NOT_EXIST);}if($this->backend->isFileProcessed($realName)){$tokens=$this->backend->getFileTokens($realName);}else{$contents=@file_get_contents($filename);if(false
===$contents){throw
new
Exception('File is not readable',Exception::FILE_NOT_READABLE);}$tokens=@token_get_all(str_replace(array("\r\n","\r"),"\n",$contents));}$reflectionFile=new
ReflectionFile($realName,$tokens,$this);if(!$this->backend->isFileProcessed($realName)){$this->backend->addFile($reflectionFile);foreach($this->cache
as$type
=>$cached){if(!empty($cached)){$this->cache[$type]=array_filter($cached,function(IReflection$reflection){return$reflection->isTokenized();});}}}return$reflectionFile;}public
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))
                            (AST_CLASS_CONST
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_VAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))
                            (SCALAR)
                            (AST_VAR))))
                (AST_STATIC
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (
                                                (AST_THROW
                                                    (AST_NEW
                                                        (
                                                            (SCALAR)))))))
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_VAR)))
                                            (
                                                (AST_ASSIGN_OP
                                                    (AST_VAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_DIM
                                                                (AST_VAR)
                                                                (SCALAR))
                                                            (SCALAR)
                                                            (AST_VAR)))))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_CLOSURE
                                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                                    (NULL)
                                                    (
                                                        (AST_RETURN
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))))))))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))
                            (AST_CLASS_CONST
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_VAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (NULL)))
                                        (SCALAR)
                                        (AST_VAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_VAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_CLOSURE
                                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                                    (NULL)
                                                    (
                                                        (AST_RETURN
                                                            (AST_METHOD_CALL
                                                                (AST_VAR))))))))))))))))
    (AST_RETURN
        (AST_VAR)))