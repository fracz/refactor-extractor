 namespace TokenReflection;use RuntimeException,TokenReflection\Exception;class ReflectionParameter extends ReflectionBase implements IReflectionParameter{CONST ARRAY_CONSTRAINT='array';private static$parseValueDefinitions=false;private$valueConstraint;private$originalValueConstraint;private$defaultValueDefinition;private$defaultValue;private$declaringClassName;private$declaringFunctionName;private$passedByReference=false;private$isOptional;private$position;public function allowsNull(){return true;}public function getClass(){$name=$this->getClassName();if(null ===$name){return null;}return$this->getBroker()->getClass($name);}public function getClassName(){if($this->isArray()){return null;}if(null ===$this->valueConstraint &&null !==$this->originalValueConstraint){if(null !==$this->declaringClassName){$parent=$this->getDeclaringClass();if(null ===$parent ||!$parent->isTokenized()){throw new Exception(sprintf('Could not load class %s reflection',$this->declaringClassName));}}else{$parent=$this->getDeclaringFunction();if(null ===$parent ||!$parent->isTokenized()){throw new Exception(sprintf('Could not load function %s reflection',$this->declaringFunctionName));}}$this->valueConstraint=self::resolveClassFQN($this->originalValueConstraint,$parent->getNamespaceAliases(),$parent->getNamespaceName());}return$this->valueConstraint;}public function getOriginalClassName(){return!$this->isArray()?ltrim($this->originalValueConstraint,'\\'):null;}public function getDeclaringClass(){return null ===$this->declaringClassName?null:$this->getBroker()->getClass($this->declaringClassName);}public function getDeclaringClassName(){return$this->declaringClassName;}public function getDeclaringFunction(){if(null !==$this->declaringClassName){$class=$this->getBroker()->getClass($this->declaringClassName);if(null !==$class){return$class->getMethod($this->declaringFunctionName);}}else{return$this->getBroker()->getFunction($this->declaringFunctionName);}}public function getDeclaringFunctionName(){return$this->declaringFunctionName;}public function getDefaultValue(){if(null ===$this->defaultValueDefinition){throw new Exception('Property has no default value',Exception::DOES_NOT_EXIST);}return$this->defaultValue;}public function getDefaultValueDefinition(){return$this->defaultValueDefinition;}public function getPosition(){return$this->position;}public function isArray(){return$this->valueConstraint === self::ARRAY_CONSTRAINT;}public function isDefaultValueAvailable(){return null !==$this->defaultValueDefinition;}public function getInheritedDocComment(){return$this->getDocComment();}public function isOptional(){if(null ===$this->isOptional){$function=$this->getDeclaringFunction();if(null ===$function){throw new RuntimeException(sprintf('Could not get the declaring function %s reflection.',$this->declaringFunctionName));}$this->isOptional=true;foreach(array_slice($function->getParameters(),$this->position)as$reflectionParameter){if(!$reflectionParameter->isDefaultValueAvailable()){$this->isOptional=false;break;}}}return$this->isOptional;}public function isPassedByReference(){return$this->passedByReference;}protected function processParent(IReflection$parent){if(!$parent instanceof ReflectionFunctionBase){throw new RuntimeException(sprintf('The parent object has to be an instance of TokenReflection\ReflectionFunctionBase descendant class, %s given.',get_class($parent)));}$this->declaringFunctionName=$parent->getName();$this->position=count($parent->getParameters());if($parent instanceof ReflectionMethod){$this->declaringClassName=$parent->getDeclaringClassName();}return parent::processParent($parent);}protected function parse(Stream$tokenStream,IReflection$parent){return$this ->parseConstraint($tokenStream)->parsePassedByReference($tokenStream)->parseName($tokenStream)->parseDefaultValue($tokenStream);}protected function parseName(Stream$tokenStream){if(!$tokenStream->is(T_VARIABLE)){throw new RuntimeException('Could not find the parameter variable definition');}$token=$tokenStream->current();$this->name=substr($token[1],1);$tokenStream->skipWhitespaces();return$this;}private function parseConstraint(Stream$tokenStream){$type=$tokenStream->getType();if(T_ARRAY ===$type){$this->valueConstraint=self::ARRAY_CONSTRAINT;$this->originalValueConstraint=self::ARRAY_CONSTRAINT;$tokenStream->skipWhitespaces();}elseif(T_STRING ===$type || T_NS_SEPARATOR ===$type){$className='';do{$token=$tokenStream->current();$className .=$token[1];$tokenStream->skipWhitespaces();$type=$tokenStream->getType();}while(T_STRING ===$type || T_NS_SEPARATOR ===$type);if('' === ltrim($className,'\\')){throw new RuntimeException('Invalid value constraint definition');}$this->originalValueConstraint=$className;}return$this;}private function parsePassedByReference(Stream$tokenStream){if($tokenStream->is('&')){$this->passedByReference=true;$tokenStream->skipWhitespaces();}return$this;}private function parseDefaultValue(Stream$tokenStream){if($tokenStream->is('=')){$tokenStream->skipWhitespaces();$this->defaultValueDefinition=Stream::tokensToCode(array_slice($tokenStream->getArrayCopy(),$tokenStream->key()));if(self::$parseValueDefinitions){$this->defaultValue=@eval('return '.$this->defaultValueDefinition.';');}}return$this;}public static function setParseValueDefinitions($parse){self::$parseValueDefinitions=(bool)$parse;}public static function getParseValueDefinitions(){return self::$parseValueDefinitions;}}
 namespace TokenReflection\Php;use TokenReflection\IReflectionFunction,TokenReflection\Broker,TokenReflection\ReflectionBase;use Reflector,ReflectionFunction as InternalReflectionFunction,ReflectionParameter as InternalReflectionParameter;use RuntimeException;class ReflectionFunction extends InternalReflectionFunction implements IReflection,IReflectionFunction{private$broker;private$parameters;public function __construct($functionName,Broker$broker){parent::__construct($functionName);$this->broker=$broker;}public function getBroker(){return$this->broker;}final public function __get($key){return ReflectionBase::get($this,$key);}final public function __isset($key){return ReflectionBase::exists($this,$key);}public function getExtension(){return ReflectionExtension::create(parent::getExtension(),$this->broker);}public function getParameters(){if(null ===$this->parameters){$broker=$this->broker;$parent=$this;$this->parameters=array_map(function(InternalReflectionParameter$parameter)use($broker,$parent){return ReflectionParameter::create($parameter,$broker,$parent);},parent::getParameters());}return$this->parameters;}public function getParameter($parameter){$parameters=$this->getParameters();if(is_numeric($parameter)){if(isset($parameters[$parameter])){return$parameters[$parameter];}else{throw new Exception(sprintf('There is no parameter at position %d',$parameter),Exception::DOES_NOT_EXIST);}}else{foreach($parameters as$reflection){if($reflection->getName()===$parameter){return$reflection;}}throw new Exception(sprintf('There is no parameter %s',$parameter),Exception::DOES_NOT_EXIST);}}public function getInheritedDocComment(){return$this->getDocComment();}public function getAnnotations(){return array();}public function getAnnotation($name){return null;}public function hasAnnotation($name){return false;}public function isTokenized(){return false;}public static function create(Reflector$internalReflection,Broker$broker){if(!$internalReflection instanceof InternalReflectionFunction){throw new RuntimeException(sprintf('Invalid reflection instance provided (%s), ReflectionFunction expected.',get_class($internalReflection)));}return$broker->getFunction($internalReflection->getName());}}
||||||||function
parseDefaultValue(Stream$tokenStream){if($tokenStream->is('=')){$tokenStream->skipWhitespaces();$level=0;while(null
!==($type=$tokenStream->getType())){switch($type){case
')':if(0
===$level){break
2;}case
'}':case
']':$level--;break;case
'(':case
'{':case
'[':$level++;break;case
',':if(0
===$level){break
2;}}$this->defaultValueDefinition
.=$tokenStream->getTokenValue();$tokenStream->next();}if(','
===$type){$tokenStream->next();}elseif(')'
!==$type){throw
new
RuntimeException('Parameter default value definition is not terminated properly');}if(self::$parseValueDefinitions){$this->defaultValue=@eval('return '.$this->defaultValueDefinition.';');}}return$this;}public
static
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_UNARY_OP
                                    (AST_INCLUDE_OR_EVAL
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (SCALAR)))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (
                        (AST_SWITCH
                            (AST_VAR)
                            (AST_SWITCH_LIST
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (
                                                    (AST_BREAK
                                                        (SCALAR)))))))
                                (AST_SWITCH_CASE
                                    (SCALAR))
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_POST_DEC
                                            (AST_VAR))
                                        (AST_BREAK
                                            (NULL))))
                                (AST_SWITCH_CASE
                                    (SCALAR))
                                (AST_SWITCH_CASE
                                    (SCALAR))
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_POST_INC
                                            (AST_VAR))
                                        (AST_BREAK
                                            (NULL))))
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (
                                                    (AST_BREAK
                                                        (SCALAR)))))))))
                        (AST_ASSIGN_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_UNARY_OP
                                    (AST_INCLUDE_OR_EVAL
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (SCALAR)))))))))))
    (AST_RETURN
        (AST_VAR)))