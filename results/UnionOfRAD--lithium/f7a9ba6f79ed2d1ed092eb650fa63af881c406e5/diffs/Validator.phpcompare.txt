	public static function compare($value1, $operator = null, $value2 = null) {
		if (is_array($value1)) {
			extract($value1, EXTR_OVERWRITE);
		}
		$replace = array(' ', "\t", "\n", "\r", "\0", "\x0B");
		$operator = str_replace($replace, '', strtolower($operator));

		$values = array(
			'>'   => ($value1 > $value2),
			'<'   => ($value1 < $value2),
			'>='  => ($value1 >= $value2),
			'<='  => ($value1 <= $value2),
			'=='  => ($value1 == $value2),
			'!='  => ($value1 != $value2),
			'===' => ($value1 === $value2)
		);

		if (isset($values[$operator])) {
			return $values[$operator];
		}
		return false;
	}

	/**
	 * Date validation, determines if the string passed is a valid date.
	 * keys that expect full month, day and year will validate leap years
	 *
	 * @param string $value a valid date string
	 * @param mixed $format Use a string or an array of the keys below. Arrays should be passed
	 * as array('dmy', 'mdy', etc). Possible values are:
	 *    - dmy 27-12-2006 or 27-12-06 separators can be a space, period, dash, forward slash
	 *    - mdy 12-27-2006 or 12-27-06 separators can be a space, period, dash, forward slash
	 *    - ymd 2006-12-27 or 06-12-27 separators can be a space, period, dash, forward slash
	 *    - dMy 27 December 2006 or 27 Dec 2006
	 *    - Mdy December 27, 2006 or Dec 27, 2006 comma is optional
	 *    - My December 2006 or Dec 2006
	 *    - my 12/2006 separators can be a space, period, dash, forward slash
	 * @return boolean Success
	 */
	// public static function date($value, $format = 'ymd') {}

	/**
	 * Time validation, determines if the string passed is a valid time.
	 * Validates time as 24hr (HH:MM) or am/pm ([H]H:MM[a|p]m)
	 * Does not allow/validate seconds.
	 *
	 * @param string $value a valid time string
	 * @return boolean Success
	 */
	// public static function time($value) {}

	/**
	 * Boolean validation, determines if value passed is a boolean integer or true/false.
	 *
	 * @param string $value a valid boolean
	 * @return boolean Success
	 */
	// public static function isBoolean($value) {}

	/**
	 * Checks that a value is a valid decimal. If $places is null, the $value is allowed to be a
	 * scientific float.  If no decimal point is found a false will be returned. Both the sign
	 * and exponent are optional.
	 *
	 * @param integer $value The value the test for decimal
	 * @param integer $precision if set $value value must have exactly $places after the decimal
	 *                point
	 * @return boolean Success
	 */
	// public static function isDecimal($value, $format = null) {}

	/**
	 * Validates for an email address.
	 *
	 * @param string $value Value to check
	 * @param boolean $deep Perform a deeper validation (if true), by also checking availability
	 *                of host
	 * @return boolean Success
	 */
	// public static function isEmail($value, $deep = false) {}

	/**
	 * Validates IPv4 addresses.
	 *
	 * @param string $value The string to test.
	 * @return boolean Success
	 */
	// public static function isIp($value) {}

	/**
	 * Checks whether the length of a string is greater or equal to a minimal length.
	 *
	 * @param string $value The string to test
	 * @param integer $min The minimal string length
	 * @return boolean Success
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))||||||||