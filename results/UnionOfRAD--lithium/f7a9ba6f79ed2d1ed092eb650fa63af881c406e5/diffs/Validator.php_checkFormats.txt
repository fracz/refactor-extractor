	protected static function _checkFormats($rules, $formats, $value, $all, $options) {
		$success = false;

		foreach ($formats as $name) {
			if (!isset($rules[$name])) {
				// throw some kind of error here
				continue;
			}
			$check = $rules[$name];

			$regexPassed = (is_string($check) && preg_match($check, $value));
			$closurePassed = (is_object($check) && $check($value, $name, $options));

			if (!$all && ($regexPassed || $closurePassed)) {
				return true;
			}
			if ($all && (!$regexPassed && !$closurePassed)) {
				return false;
			}
		}
		return $all;
	}

	/**
	 * Checks that a string contains something other than whitespace
	 *
	 * Returns true if string contains something other than whitespace
	 *
	 * $value can be passed as an array:
	 * array('check' => 'valueToCheck');
	 *
	 * @param mixed $value Value to check
	 * @return boolean Success
	 */
	// public static function isNotEmpty($value) {}

	/**
	 * Checks that a string contains only integer or letters
	 *
	 * Returns true if string contains only integer or letters
	 *
	 * $value can be passed as an array:
	 * array('check' => 'valueToCheck');
	 *
	 * @param mixed $value Value to check
	 * @return boolean Success
	 */
	// public static function isAlphaNumeric($value) {}

	/**
	 * Checks that a string length is within s specified range.
	 * Spaces are included in the character count.
	 * Returns true is string matches value min, max, or between min and max,
	 *
	 * @param string $value Value to check for length
	 * @param integer $min Minimum value in range (inclusive)
	 * @param integer $max Maximum value in range (inclusive)
	 * @return boolean Success
	 */
	// public static function isLengthBetween($value, $min, $max) {}

	/**
	 * Returns true if field is left blank **OR** only whitespace characters are present in its
	 * value.  Whitespace characters include spaces, tabs, carriage returns and newlines.
	 *
	 * $value can be passed as an array:
	 * array('check' => 'valueToCheck');
	 *
	 * @param mixed $value Value to check
	 * @return boolean Success
	 */
	// public static function isBlank($value) {}

	/**
	 * Validates credit card numbers. Returns true if `$value` is in the proper credit card format.
	 *
	 * @param mixed $value credit card number to validate
	 * @param mixed $type 'all' may be passed as a sting, defaults to fast which checks format of
	 *                     most major credit cards if an array is used only the values of the array
	 *                     are checked.  Example: array('amex', 'bankcard', 'maestro')
	 * @param boolean $deep set to true this will check the Luhn algorithm of the credit card.
	 * @return boolean Success
	 * @see lithium\util\Validator::isLuhn()
	 */
	// public static function isCreditCard($value, $format = 'fast', $deep = false) {}

	/**
	 * Used to compare 2 numeric values.
	 *
	 * @param mixed $value1 If string is passed for a string must also be passed for $value2
	 *              used as an array it must be passed as
	 *              {{{array('check1' => value, 'operator' => 'value', 'check2' => value)}}}
	 * @param string $operator Can be either a word or operand
	 *               - is greater >, is less <, greater or equal >=
	 *               - less or equal <=, is less <, equal to ==, not equal !=
	 * @param integer $value2 only needed if $value1 is a string
	 * @return boolean Success
	 */
||||||||	protected static function _checkFormats($rules) {
		return function($self, $params, $chain) use ($rules) {
			extract($params);
			$defaults = array('all' => true);
			$options += $defaults;

			$formats = (array) $format;
			$success = false;

			if (in_array($format, array(null, 'all', 'any'))) {
				$formats = array_keys($rules);
				$options['all'] = ($format == 'all');
			}

			foreach ($formats as $name) {
				if (!isset($rules[$name])) {
					continue;
				}
				$check = $rules[$name];

				$regexPassed = (is_string($check) && preg_match($check, $value));
				$closurePassed = (is_object($check) && $check($value, $name, $options));

				if (!$options['all'] && ($regexPassed || $closurePassed)) {
					return true;
				}
				if ($options['all'] && (!$regexPassed && !$closurePassed)) {
					return false;
				}
			}
			return $options['all'];
		};
	}

	/**
	 * Checks that a string contains something other than whitespace
	 *
	 * Returns true if string contains something other than whitespace
	 *
	 * $value can be passed as an array:
	 * array('check' => 'valueToCheck');
	 *
	 * @param mixed $value Value to check
	 * @return boolean Success
	 */
	// public static function isNotEmpty($value) {}

	/**
	 * Checks that a string contains only integer or letters
	 *
	 * Returns true if string contains only integer or letters
	 *
	 * $value can be passed as an array:
	 * array('check' => 'valueToCheck');
	 *
	 * @param mixed $value Value to check
	 * @return boolean Success
	 */
	// public static function isAlphaNumeric($value) {}

	/**
	 * Checks that a string length is within s specified range.
	 * Spaces are included in the character count.
	 * Returns true is string matches value min, max, or between min and max,
	 *
	 * @param string $value Value to check for length
	 * @param integer $min Minimum value in range (inclusive)
	 * @param integer $max Maximum value in range (inclusive)
	 * @return boolean Success
	 */
	// public static function isLengthBetween($value, $min, $max) {}

	/**
	 * Returns true if field is left blank **OR** only whitespace characters are present in its
	 * value.  Whitespace characters include spaces, tabs, carriage returns and newlines.
	 *
	 * $value can be passed as an array:
	 * array('check' => 'valueToCheck');
	 *
	 * @param mixed $value Value to check
	 * @return boolean Success
	 */
	// public static function isBlank($value) {}

	/**
	 * Validates credit card numbers. Returns true if `$value` is in the proper credit card format.
	 *
	 * @param mixed $value credit card number to validate
	 * @param mixed $type 'all' may be passed as a sting, defaults to fast which checks format of
	 *                     most major credit cards if an array is used only the values of the array
	 *                     are checked.  Example: array('amex', 'bankcard', 'maestro')
	 * @param boolean $deep set to true this will check the Luhn algorithm of the credit card.
	 * @return boolean Success
	 * @see lithium\util\Validator::isLuhn()
	 */
	// public static function isCreditCard($value, $format = 'fast', $deep = false) {}

	/**
	 * Date validation, determines if the string passed is a valid date.
	 * keys that expect full month, day and year will validate leap years
	 *
	 * @param string $value a valid date string
	 * @param mixed $format Use a string or an array of the keys below. Arrays should be passed
	 * as array('dmy', 'mdy', etc). Possible values are:
	 *    - dmy 27-12-2006 or 27-12-06 separators can be a space, period, dash, forward slash
	 *    - mdy 12-27-2006 or 12-27-06 separators can be a space, period, dash, forward slash
	 *    - ymd 2006-12-27 or 06-12-27 separators can be a space, period, dash, forward slash
	 *    - dMy 27 December 2006 or 27 Dec 2006
	 *    - Mdy December 27, 2006 or Dec 27, 2006 comma is optional
	 *    - My December 2006 or Dec 2006
	 *    - my 12/2006 separators can be a space, period, dash, forward slash
	 * @return boolean Success
	 */
	// public static function date($value, $format = 'ymd') {}

	/**
	 * Time validation, determines if the string passed is a valid time.
	 * Validates time as 24hr (HH:MM) or am/pm ([H]H:MM[a|p]m)
	 * Does not allow/validate seconds.
	 *
	 * @param string $value a valid time string
	 * @return boolean Success
	 */
	// public static function time($value) {}

	/**
	 * Boolean validation, determines if value passed is a boolean integer or true/false.
	 *
	 * @param string $value a valid boolean
	 * @return boolean Success
	 */
	// public static function isBoolean($value) {}

	/**
	 * Checks that a value is a valid decimal. If $places is null, the $value is allowed to be a
	 * scientific float.  If no decimal point is found a false will be returned. Both the sign
	 * and exponent are optional.
	 *
	 * @param integer $value The value the test for decimal
	 * @param integer $precision if set $value value must have exactly $places after the decimal
	 *                point
	 * @return boolean Success
	 */
	// public static function isDecimal($value, $format = null) {}

	/**
	 * Validates for an email address.
	 *
	 * @param string $value Value to check
	 * @param boolean $deep Perform a deeper validation (if true), by also checking availability
	 *                of host
	 * @return boolean Success
	 */
	// public static function isEmail($value, $deep = false) {}

	/**
	 * Validates IPv4 addresses.
	 *
	 * @param string $value The string to test.
	 * @return boolean Success
	 */
	// public static function isIp($value) {}

	/**
	 * Checks that a value is a monetary amount.
	 *
	 * @param string $value Value to check
	 * @param string $format Where symbol is located (left/right)
	 * @return boolean Success
	 */
	// public static function isMoney($value, $format = 'left') {}

	/**
	 * Checks if a value is numeric.
	 *
	 * @param string $value Value to check
	 * @return boolean Success
	 */
	// public static function isNumeric($value) {}

	/**
	 * Check that a value is a valid phone number.
	 *
	 * @param mixed $value Value to check (string or array)
	 * @param string $regex Regular expression to use
	 * @param string $country Country code (defaults to 'all')
	 * @return boolean Success
	 */
	//public static function isPhone($value, $format = 'any') {}

	/**
	 * Checks that a given value is a valid postal code.
	 *
	 * @param mixed $value Value to check
	 * @param string $regex Regular expression to use
	 * @param string $country Country to use for formatting
	 * @return boolean Success
	 */
	// public static function isPostalCode($value, $country = null) {}

	/**
	 * Validate that a number is in specified range.
	 * if $lower and $upper are not set, will return true if
	 * $value is a legal finite on this platform
	 *
	 * @param string $value Value to check
	 * @param integer $lower Lower limit
	 * @param integer $upper Upper limit
	 * @return boolean Success
	 */
	// public static function isInRange($value, $lower = null, $upper = null) {}

	/**
	 * Checks that a value is a valid Social Security Number.
	 *
	 * @param mixed $value Value to check
	 * @param string $regex Regular expression to use
	 * @param string $country Country
	 * @return boolean Success
	 */
	// public static function isSsn($value, $format = null) {}

	/**
	 * Checks that a value is a valid URL according to http://www.w3.org/Addressing/URL/url-spec.txt
	 *
	 * The regex checks for the following component parts:
	 * 	a valid, optional, scheme
	 * 		a valid ip address OR
	 * 		a valid domain name as defined by section 2.3.1 of http://www.ietf.org/rfc/rfc1035.txt
	 *	  with an optional port number
	 *	an optional valid path
	 *	an optional query string (get parameters)
	 *	an optional fragment (anchor tag)
	 *
	 * @param string $value Value to check
	 * @return boolean Success
	 */
	// public static function url($value, $strict = false) {}

	/**
	 * Luhn algorithm
	 *
	 * Checks that a credit card number is a valid Luhn sequence.
	 *
	 * @param mixed $value A string or integer representing a credit card number.
	 * @link http://en.wikipedia.org/wiki/Luhn_algorithm
	 * @return boolean Success
	 */
	// public static function isLuhn($value) {}

	/**
	 * Checks if a value is in a given list.
	 *
	 * @param string $value Value to check
	 * @param array $list List to check against
	 * @return boolean Success
	 */
	// public static function isInList($value, $list) {}
}

?>||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CONST)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR))
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))))
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_CONST)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL)))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_ISSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR)))
                                (
                                    (AST_RETURN
                                        (AST_CONST)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_VAR))
                                        (AST_UNARY_OP
                                            (AST_VAR))))
                                (
                                    (AST_RETURN
                                        (AST_CONST)))))))
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))))