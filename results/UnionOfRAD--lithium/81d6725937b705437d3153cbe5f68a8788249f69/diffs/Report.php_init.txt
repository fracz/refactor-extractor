	protected function _init() {
		$this->timer['start'] = microtime(true);
		$this->group = $this->_config['group'];
		$this->filters = $this->_config['filters'];
		$this->title = $this->_config['title'] ?: $this->_config['title'];
		$this->run();
		$this->timer['end'] = microtime(true);
	}

	/**
	 * undocumented function
	 *
	 * @return void
	 */
||||||||	protected function _init() {
		$class = Inflector::camelize($this->_config['reporter']);
		$reporter = Libraries::locate('test.reporter', $class);
		if (!$reporter) {
			throw new Exception("{$format} is not a valid reporter");
		}
		$this->reporter = new $reporter();
		$this->timer['start'] = microtime(true);
		$this->group = $this->_config['group'];
		$this->filters = $this->_config['filters'];
		$this->title = $this->_config['title'] ?: $this->_config['title'];
		$this->run();
		$this->timer['end'] = microtime(true);
	}

	/**
	 * undocumented function
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (NULL)
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CALL
            (
                (AST_CONST)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (NULL)
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_CALL
            (
                (AST_CONST)))))