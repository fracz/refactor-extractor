||||||||	public function testSaltMD5() {
		$this->skipIf(!CRYPT_MD5, 'MD5 is not supported.');

		$saltPattern = "{^\\$1\\$[0-9A-Za-z./]{8}$}";
		$hashPattern = "{^\\$1\\$[0-9A-Za-z./]{8}\\$[0-9A-Za-z./]{22}$}";

		$salt = Password::salt('md5', null);
		$this->assertPattern($saltPattern, $salt);
		$this->assertNotEqual($salt, Password::salt('md5', null));

		$hash = Password::hash($this->_password, $salt);
		$hash2 = Password::hash($this->_password, Password::salt('md5', null));
		$this->assertPattern($hashPattern, $hash);
		$this->assertNotEqual($hash, $hash2);
	}
}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_UNARY_OP
                (AST_CONST))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))