	public static function to($format, $data, array $options = array()) {
		$data = is_object($data) ? $data->to('array') : $data;
		return static::encode($format, $data, $options);
	}

	/**
	 * Map an extension to a particular content-type (or types) with a set of options.
	 *
	 * Examples:
	 * {{{// Get a list of all available media types:
	 * Media::types(); // returns array('ai', 'amf', 'atom', ...);
	 * }}}
	 *
	 * {{{// Add a custom media type:
	 * Media::type('my', 'text/x-my', array('view' => '\my\custom\View', 'layout' => false));
	 * }}}
	 *
	 * {{{// Remove a custom media type:
	 * Media::type('my', false);
	 * }}}
	 *
	 * Alternatively, can be used to detect the type name of a registered content type:
	 * {{{
	 * Media::type('application/json'); // returns 'json'
	 * Media::type('application/javascript'); // returns 'javascript'
	 * Media::type('text/javascript'); // also returns 'javascript'
	 * }}}
	 *
	 * @see lithium\net\http\Media::$_types
	 * @see lithium\net\http\Media::$_handlers
	 * @see lithium\util\String::insert()
	 * @param string $type A file extension for the type, i.e. `'txt'`, `'js'`, or `'atom'`.
	 *               Alternatively, may be a content type, i.e. `'text/html'`,
	 *               `'application/atom+xml'`, etc.; in which case, the type name (i.e. '`html'` or
	 *               `'atom'`) will be returned.
	 * @param mixed $content Optional. A string or array containing the content-type(s) that
	 *        `$type` should map to.  If `$type` is an array of content-types, the first one listed
	 *        should be the "primary" type.
	 * @param array $options Optional.  The handling options for this media type. Possible keys are:
	 *        - `'decode'`: A (string) function name or (object) closure that handles
	 *          decoding or unserializing content from this format.
	 *        - `'encode'`: A (string) function name or (object) closure that handles encoding or
	 *          serializing content into this format.
	 *        - `'cast'`: Used with `'encode'`. If `true`, all data passed into the specified encode
	 *           function is first cast to array structures.
	 *        - `'layout'`: Specifies a `String::insert()`-style path to use when searching for
	 *          layout files.
	 *        - `'template'`: Specifies a `String::insert()`-style path to use when searching for
	 *          template files.
	 *        - `'view'`: Specifies the view class to use when rendering this content.
	 * @return mixed If `$content` and `$options` are empty, returns an array with `'content'` and
	 *         `'options'` keys, where `'content'` is the content-type(s) that correspond to
	 *         `$type` (can be a string or array, if multiple content-types are available), and
	 *         `'options'` is the array of options which define how this content-type should be
	 *         handled.  If `$content` or `$options` are non-empty, returns `null`.
	 */
||||||||	public static function to($format, $data, array $options = array()) {
		return static::encode($format, $data, $options);
	}

	/**
	 * Map an extension to a particular content-type (or types) with a set of options.
	 *
	 * Examples:
	 * {{{// Get a list of all available media types:
	 * Media::types(); // returns array('ai', 'amf', 'atom', ...);
	 * }}}
	 *
	 * {{{// Add a custom media type:
	 * Media::type('my', 'text/x-my', array('view' => '\my\custom\View', 'layout' => false));
	 * }}}
	 *
	 * {{{// Remove a custom media type:
	 * Media::type('my', false);
	 * }}}
	 *
	 * Alternatively, can be used to detect the type name of a registered content type:
	 * {{{
	 * Media::type('application/json'); // returns 'json'
	 * Media::type('application/javascript'); // returns 'javascript'
	 * Media::type('text/javascript'); // also returns 'javascript'
	 * }}}
	 *
	 * @see lithium\net\http\Media::$_types
	 * @see lithium\net\http\Media::$_handlers
	 * @see lithium\util\String::insert()
	 * @param string $type A file extension for the type, i.e. `'txt'`, `'js'`, or `'atom'`.
	 *               Alternatively, may be a content type, i.e. `'text/html'`,
	 *               `'application/atom+xml'`, etc.; in which case, the type name (i.e. '`html'` or
	 *               `'atom'`) will be returned.
	 * @param mixed $content Optional. A string or array containing the content-type(s) that
	 *        `$type` should map to.  If `$type` is an array of content-types, the first one listed
	 *        should be the "primary" type.
	 * @param array $options Optional.  The handling options for this media type. Possible keys are:
	 *        - `'decode'`: A (string) function name or (object) closure that handles
	 *          decoding or unserializing content from this format.
	 *        - `'encode'`: A (string) function name or (object) closure that handles encoding or
	 *          serializing content into this format.
	 *        - `'cast'`: Used with `'encode'`. If `true`, all data passed into the specified encode
	 *           function is first cast to array structures.
	 *        - `'layout'`: Specifies a `String::insert()`-style path to use when searching for
	 *          layout files.
	 *        - `'template'`: Specifies a `String::insert()`-style path to use when searching for
	 *          template files.
	 *        - `'view'`: Specifies the view class to use when rendering this content.
	 * @return mixed If `$content` and `$options` are empty, returns an array with `'content'` and
	 *         `'options'` keys, where `'content'` is the content-type(s) that correspond to
	 *         `$type` (can be a string or array, if multiple content-types are available), and
	 *         `'options'` is the array of options which define how this content-type should be
	 *         handled.  If `$content` or `$options` are non-empty, returns `null`.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))