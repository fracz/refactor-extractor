||||||||	protected static function _callable($request, $params, $options) {
		$params = compact('request', 'params', 'options');
		return static::_filter(__METHOD__, $params, function($self, $params, $chain) {
			extract($params, EXTR_OVERWRITE);
			$class = $params['command'] ?: '\lithium\console\Command';

			if ($class[0] !== '\\') {
				$class = Libraries::locate('commands', Inflector::camelize($class));
			}

			if (class_exists($class)) {
				return new $class(compact('request'));
			}
			throw new UnexpectedValueException("Command {$class} not found");
		});
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_MAGIC_CONST)
                (AST_VAR)
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CONST)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONDITIONAL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (NULL)
                                (SCALAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_STATIC_CALL
                                            (
                                                (SCALAR)
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)))))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_RETURN
                                        (AST_NEW
                                            (AST_VAR)
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)))))))))
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)))))))))))