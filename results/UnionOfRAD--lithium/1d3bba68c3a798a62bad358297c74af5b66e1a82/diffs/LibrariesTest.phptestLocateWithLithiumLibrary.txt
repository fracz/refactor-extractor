||||||||	function testLocateWithLithiumLibrary() {
	    $expected = (array) Libraries::find('lithium', array(
		    'path' => '/tests',
			'preFilter' => '/[A-Z][A-Za-z0-9]+\Test\./',
	        'recursive' => true,
	        'filter' => '/cases|integration|functional|mocks/',
	    ));
	    $result = (array) Libraries::locate("tests", null, array('library' => 'lithium'));
	    $this->assertEqual($expected, $result);
	}
}

?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_CONST)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))