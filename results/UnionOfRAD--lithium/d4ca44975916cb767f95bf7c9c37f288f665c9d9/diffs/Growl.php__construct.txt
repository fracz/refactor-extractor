	public function __construct(array $config = array()) {
		$name = basename(LITHIUM_APP_PATH);
		$defaults = array(
			'name'     => $name,
			'host'     => '127.0.0.1',
			'port'     => 9887,
			'password' => '',
			'protocol' => 'udp',
			'title'    => Inflector::humanize($name),
			'notifications' => array('Errors', 'Messages')
		);
		parent::__construct($config + $defaults);
	}

	/**
	 * Writes `$message` to a new Growl notification.
	 *
	 * @param string $type Not used (all notifications are of the same type).
	 * @param string $message Message to be shown.
	 * @return boolean `True` on successful write, `false` otherwise.
	 */
||||||||	public function __construct(array $config = array()) {
		$name = basename(LITHIUM_APP_PATH);
		$defaults = array(
			'name'     => $name,
			'host'     => '127.0.0.1',
			'port'     => 9887,
			'password' => null,
			'protocol' => 'udp',
			'title'    => Inflector::humanize($name),
			'notifications' => array('Errors', 'Messages'),
			'connection' => function($host, $port) {
				if ($conn = fsockopen($host, $port, $message, $code)) {
					return $conn;
				}
				throw new Exception("Growl connection failed: ({$code}) {$message}");
			}
		);
		parent::__construct($config + $defaults);
	}

	/**
	 * Writes `$message` to a new Growl notification.
	 *
	 * @param string $type Not used (all notifications are of the same type).
	 * @param string $message Message to be shown.
	 * @return boolean `True` on successful write, `false` otherwise.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_VAR))))
                                (
                                    (AST_RETURN
                                        (AST_VAR)))))
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)))))))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))))