	public static function uuid($context) {
		$val = function($value) use ($context) {
			switch (true) {
				case is_object($context) && is_callable($context):
					$result = $context($value);
				break;
				case is_object($context):
					$result = isset($context->$value) ? $context->$value : null;
				break;
				case is_array($context):
					$result = isset($context[$value]) ? $context[$value] : null;
				break;
			}
			return $result;
		};

		$node = static::_hostname($val);
		$pid = function_exists('zend_thread_id') ? zend_thread_id() : getmypid();
		$pid = (!$pid || $pid > 65535) ? mt_rand(0, 0xfff) | 0x4000 : $pid;
		list($timeMid, $timeLow) = explode(' ', microtime());

		return sprintf(
			"%08x-%04x-%04x-%02x%02x-%04x%08x",
			(integer) $timeLow, (integer) substr($timeMid, 2) & 0xffff, mt_rand(0, 0xfff) | 0x4000,
			mt_rand(0, 0x3f) | 0x80, mt_rand(0, 0xff), $pid, $node
		);
	}

	/**
	 * Uses PHP's hashing functions to create a hash of the string provided, using the options
	 * specified. The default hash algorithm is SHA-512.
	 *
	 * @link http://php.net/manual/en/function.hash.php PHP Manual: hash()
	 * @link http://php.net/manual/en/function.hash-hmac.php PHP Manual: hash_hmac()
	 * @link http://php.net/manual/en/function.hash-algos.php PHP Manual: hash_algos()
	 * @param string $string The string to hash.
	 * @param array $options Supported options:
	 *        - `'type'` _string_: Any valid hashing algorithm. See the `hash_algos()` function to
	 *          determine which are available on your system.
	 *        - `'salt'` _string_: A _salt_ value which, if specified, will be prepended to the
	 *          string.
	 *        - `'key'` _string_: If specified `hash_hmac()` will be used to hash the string,
	 *          instead of `hash()`, with `'key'` being used as the message key.
	 *        - `'raw'` _boolean_: If `true`, outputs the raw binary result of the hash operation.
	 *          Defaults to `false`.
	 * @return string Returns a hashed string.
	 */
||||||||	public static function uuid() {
		// Use urandom if available, else fall back to mt_rand
		if (!isset(self::$urandom)) {
			self::$urandom = is_readable('/dev/urandom') ? fopen('/dev/urandom', 'rb') : false;
		}

		// Generate random fields
		if (self::$urandom) {
			$uuid = fread(self::$urandom, 16);
		} else {
			$uuid = '';
			for ($i = 0; $i < 16; $i++) {
				$uuid .= chr(mt_rand(0, 255));
			}
		}

		// Set version
		$uuid[6] = chr(ord($uuid[6]) & self::clearVer | self::version4);

		// Set variant
		$uuid[8] = chr(ord($uuid[8]) & self::clearVar | self::varRFC);

		// Return the uuid's string representation
		return bin2hex(substr($uuid, 0, 4)) . '-'
			. bin2hex(substr($uuid, 4, 2)) . '-'
			. bin2hex(substr($uuid, 6, 2)) . '-'
			. bin2hex(substr($uuid, 8, 2)) . '-'
			. bin2hex(substr($uuid, 10, 6));
	}

	/**
	 * Uses PHP's hashing functions to create a hash of the string provided, using the options
	 * specified. The default hash algorithm is SHA-512.
	 *
	 * @link http://php.net/manual/en/function.hash.php PHP Manual: hash()
	 * @link http://php.net/manual/en/function.hash-hmac.php PHP Manual: hash_hmac()
	 * @link http://php.net/manual/en/function.hash-algos.php PHP Manual: hash_algos()
	 * @param string $string The string to hash.
	 * @param array $options Supported options:
	 *        - `'type'` _string_: Any valid hashing algorithm. See the `hash_algos()` function to
	 *          determine which are available on your system.
	 *        - `'salt'` _string_: A _salt_ value which, if specified, will be prepended to the
	 *          string.
	 *        - `'key'` _string_: If specified `hash_hmac()` will be used to hash the string,
	 *          instead of `hash()`, with `'key'` being used as the message key.
	 *        - `'raw'` _boolean_: If `true`, outputs the raw binary result of the hash operation.
	 *          Defaults to `false`.
	 * @return string Returns a hashed string.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR))
            (
                (AST_SWITCH
                    (AST_CONST)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONDITIONAL
                                        (AST_ISSET
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONDITIONAL
                                        (AST_ISSET
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_CONST)))
                                (AST_BREAK
                                    (NULL))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL)
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_CAST
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_CAST
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_STATIC_PROP)))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)))
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_PROP)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_FOR
                    (AST_EXPR_LIST
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_POST_INC
                            (AST_VAR)))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (SCALAR)))))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR)
                                                        (SCALAR)))))
                                        (SCALAR))
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (SCALAR))))))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (SCALAR))))))
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR))))))
                (SCALAR))
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR))))))))