    public function __construct($pathToAtoum = null)
    {
        if ($pathToAtoum) {
            $this->command = $pathToAtoum;
        } elseif (file_exists('vendor/bin/atoum')) {
            $this->command = 'vendor/bin/atoum';
        } elseif (file_exists('atoum.phar')) {
            $this->command = 'php atoum.phar';
        } elseif (is_executable('~/.composer/vendor/bin/atoum')) {
            $this->command = '~/.composer/vendor/bin/atoum';
        } else {
            throw new \Robo\Exception\TaskException(__CLASS__, "Neither local atoum nor global composer installation not found");
        }

        if (defined('PHP_WINDOWS_VERSION_BUILD')) {
            $this->command = $this->command . '.bat';
        }
    }

    /**
     * Tag or Tags to filter.
     *
     * @param string|array $tags
     *
     * @return $this
     */
||||||||    public function __construct($pathToAtoum = null)
    {
        $this->command = $pathToAtoum;
        if (!$this->command) {
            $this->command = $this->findExecutable('atoum');
        }
        if (!$this->command) {
            throw new \Robo\Exception\TaskException(__CLASS__, "Neither local atoum nor global composer installation not found");
        }
    }

    /**
     * Tag or Tags to filter.
     *
     * @param string|array $tags
     *
     * @return $this
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_MAGIC_CONST)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_MAGIC_CONST)
                            (SCALAR))))))))