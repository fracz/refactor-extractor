    function run()
    {
        if (!file_exists($this->filename)) {
            $this->printTaskInfo("<error>File {$this->filename} does not exist</error>");
            return false;
        }

        $text = file_get_contents($this->filename);
        if ($this->regex) {
            $text = preg_replace($this->regex, $this->to, $text, -1, $count);
        } else {
            $text = str_replace($this->from, $this->to, $text, $count);
        }
        $res = file_put_contents($this->filename, $text);
        if ($res === false) {
            return Result::error($this, "Error writing to file {$this->filename}.");
        }
        $this->printTaskInfo("<info>{$this->filename}</info> updated. $count items replaced");
        return Result::success($this, '', ['replaced' => $count]);
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR)))))))||||||||