    public function apply(Video $video, VideoInterface $format)
    {
        $commands = array();

        try {
            // Get the duration of the video
            foreach ($video->getStreams()->videos() as $stream) {
                if ($stream->has('duration')) {
                    $duration = $stream->get('duration');
                }
            }

            // Get the number of frames per second we have to extract.
            if(preg_match('/(\d+)(?:\s*)([\+\-\*\/])(?:\s*)(\d+)/', $this->frameRate, $matches) !== FALSE){
                $operator = $matches[2];

                switch($operator){
                    case '/':
                        $nbFramesPerSecond = $matches[1] / $matches[3];
                        break;

                    default:
                        throw new InvalidArgumentException('The frame rate is not a proper division: ' . $this->frameRate);
                        break;
                }
            }

            // Set the number of digits to use in the exported filenames
            $nbDigitsInFileNames = ceil( $duration * $nbFramesPerSecond );

            // Set the parameters
            $commands[] = '-vf';
            $commands[] = 'fps=' . $this->frameRate;
            $commands[] = $this->destinationFolder . 'frame-%0'.$nbDigitsInFileNames.'d.jpg';
        }
        catch (RuntimeException $e) {
            throw new RuntimeException('An error occured while extracting the frames: ' . $e->getMessage() . '. The code: ' . $e->getCode());
        }

        return $commands;
    }
}||||||||    public function apply(Video $video, VideoInterface $format)
    {
        $commands = array();

        try {
            // Get the duration of the video
            foreach ($video->getStreams()->videos() as $stream) {
                if ($stream->has('duration')) {
                    $duration = $stream->get('duration');
                }
            }

            // Get the number of frames per second we have to extract.
            if(preg_match('/(\d+)(?:\s*)([\+\-\*\/])(?:\s*)(\d+)/', $this->frameRate, $matches) !== FALSE){
                $operator = $matches[2];

                switch($operator){
                    case '/':
                        $nbFramesPerSecond = $matches[1] / $matches[3];
                        break;

                    default:
                        throw new InvalidArgumentException('The frame rate is not a proper division: ' . $this->frameRate);
                        break;
                }
            }

            // Set the number of digits to use in the exported filenames
            $nbDigitsInFileNames = ceil( $duration * $nbFramesPerSecond );
            if($nbDigitsInFileNames < 10)
                $nbDigitsInFileNames = '0' . (string)$nbDigitsInFileNames;

            // Set the parameters
            $commands[] = '-vf';
            $commands[] = 'fps=' . $this->frameRate;
            $commands[] = $this->destinationFolder . 'frame-%'.$nbDigitsInFileNames.'d.jpg';
        }
        catch (RuntimeException $e) {
            throw new RuntimeException('An error occured while extracting the frames: ' . $e->getMessage() . '. The code: ' . $e->getCode());
        }

        return $commands;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_TRY
        (
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_SWITCH
                            (AST_VAR)
                            (AST_SWITCH_LIST
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (AST_BREAK
                                            (NULL))))
                                (AST_SWITCH_CASE
                                    (NULL)
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_PROP
                                                            (AST_VAR))))))
                                        (AST_BREAK
                                            (NULL)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (SCALAR))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))))))
        (NULL))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_TRY
        (
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_SWITCH
                            (AST_VAR)
                            (AST_SWITCH_LIST
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (AST_BREAK
                                            (NULL))))
                                (AST_SWITCH_CASE
                                    (NULL)
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_PROP
                                                            (AST_VAR))))))
                                        (AST_BREAK
                                            (NULL)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CAST
                                    (AST_VAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (SCALAR))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))))))
        (NULL))
    (AST_RETURN
        (AST_VAR)))