||||||||	public function writeDebugLog(array $cellReferencePath) {
		//	Only write the debug log if logging is enabled
		if ($this->_writeDebugLog) {
			$message = func_get_args();
			array_shift($message);
			$cellReference = implode(' -> ', $cellReferencePath);
			$message = implode($message);
			if ($this->_echoDebugLog) {
				echo $cellReference, (count($cellReferencePath) > 0 ? ' => ' : ''), $message,PHP_EOL;
			}
			$this->_debugLog[] = $cellReference . (count($cellReferencePath) > 0 ? ' => ' : '') . $message;
		}
	}	//	function _writeDebug()


||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ECHO
                                (AST_VAR))
                            (AST_ECHO
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (SCALAR)
                                    (SCALAR)))
                            (AST_ECHO
                                (AST_VAR))
                            (AST_ECHO
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONDITIONAL
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR))
                                (SCALAR)
                                (SCALAR)))
                        (AST_VAR)))))))