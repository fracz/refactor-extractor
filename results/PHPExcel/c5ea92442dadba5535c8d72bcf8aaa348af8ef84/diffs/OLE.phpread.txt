	public function read($file)
	{
		$fh = fopen($file, "r");
		if (!$fh) {
			throw new Exception("Can't open file $file");
		}
		$this->_file_handle = $fh;

		$signature = fread($fh, 8);
		if ("\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1" != $signature) {
			throw new Exception("File doesn't seem to be an OLE container.");
		}
		fseek($fh, 28);
		if (fread($fh, 2) != "\xFE\xFF") {
			// This shouldn't be a problem in practice
			throw new Exception("Only Little-Endian encoding is supported.");
		}
		// Size of blocks and short blocks in bytes
		$this->bigBlockSize = pow(2, $this->_readInt2($fh));
		$this->smallBlockSize  = pow(2, $this->_readInt2($fh));

		// Skip UID, revision number and version number
		fseek($fh, 44);
		// Number of blocks in Big Block Allocation Table
		$bbatBlockCount = $this->_readInt4($fh);

		// Root chain 1st block
		$directoryFirstBlockId = $this->_readInt4($fh);

		// Skip unused bytes
		fseek($fh, 56);
		// Streams shorter than this are stored using small blocks
		$this->bigBlockThreshold = $this->_readInt4($fh);
		// Block id of first sector in Short Block Allocation Table
		$sbatFirstBlockId = $this->_readInt4($fh);
		// Number of blocks in Short Block Allocation Table
		$sbbatBlockCount = $this->_readInt4($fh);
		// Block id of first sector in Master Block Allocation Table
		$mbatFirstBlockId = $this->_readInt4($fh);
		// Number of blocks in Master Block Allocation Table
		$mbbatBlockCount = $this->_readInt4($fh);
		$this->bbat = array();

		// Remaining 4 * 109 bytes of current block is beginning of Master
		// Block Allocation Table
		$mbatBlocks = array();
		for ($i = 0; $i < 109; ++$i) {
			$mbatBlocks[] = $this->_readInt4($fh);
		}

		// Read rest of Master Block Allocation Table (if any is left)
		$pos = $this->_getBlockOffset($mbatFirstBlockId);
		for ($i = 0; $i < $mbbatBlockCount; ++$i) {
			fseek($fh, $pos);
			for ($j = 0; $j < $this->bigBlockSize / 4 - 1; ++$j) {
				$mbatBlocks[] = $this->_readInt4($fh);
			}
			// Last block id in each block points to next block
			$pos = $this->_getBlockOffset($this->_readInt4($fh));
		}

		// Read Big Block Allocation Table according to chain specified by
		// $mbatBlocks
		for ($i = 0; $i < $bbatBlockCount; ++$i) {
			$pos = $this->_getBlockOffset($mbatBlocks[$i]);
			fseek($fh, $pos);
			for ($j = 0 ; $j < $this->bigBlockSize / 4; ++$j) {
				$this->bbat[] = $this->_readInt4($fh);
			}
		}

		// Read short block allocation table (SBAT)
		$this->sbat = array();
		$shortBlockCount = $sbbatBlockCount * $this->bigBlockSize / 4;
		$sbatFh = $this->getStream($sbatFirstBlockId);
		for ($blockId = 0; $blockId < $shortBlockCount; ++$blockId) {
			$this->sbat[$blockId] = $this->_readInt4($sbatFh);
		}
		fclose($sbatFh);

		$this->_readPpsWks($directoryFirstBlockId);

		return true;
	}

	/**
	 * @param  int  block id
	 * @param  int  byte offset from beginning of file
	 * @access public
	 */
||||||||	public function read($file)
	{
		$fh = fopen($file, "r");
		if (!$fh) {
			throw new Exception("Can't open file $file");
		}
		$this->_file_handle = $fh;

		$signature = fread($fh, 8);
		if ("\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1" != $signature) {
			throw new Exception("File doesn't seem to be an OLE container.");
		}
		fseek($fh, 28);
		if (fread($fh, 2) != "\xFE\xFF") {
			// This shouldn't be a problem in practice
			throw new Exception("Only Little-Endian encoding is supported.");
		}
		// Size of blocks and short blocks in bytes
		$this->bigBlockSize = pow(2, self::_readInt2($fh));
		$this->smallBlockSize  = pow(2, self::_readInt2($fh));

		// Skip UID, revision number and version number
		fseek($fh, 44);
		// Number of blocks in Big Block Allocation Table
		$bbatBlockCount = self::_readInt4($fh);

		// Root chain 1st block
		$directoryFirstBlockId = self::_readInt4($fh);

		// Skip unused bytes
		fseek($fh, 56);
		// Streams shorter than this are stored using small blocks
		$this->bigBlockThreshold = self::_readInt4($fh);
		// Block id of first sector in Short Block Allocation Table
		$sbatFirstBlockId = self::_readInt4($fh);
		// Number of blocks in Short Block Allocation Table
		$sbbatBlockCount = self::_readInt4($fh);
		// Block id of first sector in Master Block Allocation Table
		$mbatFirstBlockId = self::_readInt4($fh);
		// Number of blocks in Master Block Allocation Table
		$mbbatBlockCount = self::_readInt4($fh);
		$this->bbat = array();

		// Remaining 4 * 109 bytes of current block is beginning of Master
		// Block Allocation Table
		$mbatBlocks = array();
		for ($i = 0; $i < 109; ++$i) {
			$mbatBlocks[] = self::_readInt4($fh);
		}

		// Read rest of Master Block Allocation Table (if any is left)
		$pos = $this->_getBlockOffset($mbatFirstBlockId);
		for ($i = 0; $i < $mbbatBlockCount; ++$i) {
			fseek($fh, $pos);
			for ($j = 0; $j < $this->bigBlockSize / 4 - 1; ++$j) {
				$mbatBlocks[] = self::_readInt4($fh);
			}
			// Last block id in each block points to next block
			$pos = $this->_getBlockOffset(self::_readInt4($fh));
		}

		// Read Big Block Allocation Table according to chain specified by
		// $mbatBlocks
		for ($i = 0; $i < $bbatBlockCount; ++$i) {
			$pos = $this->_getBlockOffset($mbatBlocks[$i]);
			fseek($fh, $pos);
			for ($j = 0 ; $j < $this->bigBlockSize / 4; ++$j) {
				$this->bbat[] = self::_readInt4($fh);
			}
		}

		// Read short block allocation table (SBAT)
		$this->sbat = array();
		$shortBlockCount = $sbbatBlockCount * $this->bigBlockSize / 4;
		$sbatFh = $this->getStream($sbatFirstBlockId);
		for ($blockId = 0; $blockId < $shortBlockCount; ++$blockId) {
			$this->sbat[$blockId] = self::_readInt4($sbatFh);
		}
		fclose($sbatFh);

		$this->_readPpsWks($directoryFirstBlockId);

		return true;
	}

	/**
	 * @param  int  block id
	 * @param  int  byte offset from beginning of file
	 * @access public
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_FOR
                (AST_EXPR_LIST
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR)))
                (AST_EXPR_LIST
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR))))
                (AST_EXPR_LIST
                    (AST_PRE_INC
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_FOR
                (AST_EXPR_LIST
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR)))
                (AST_EXPR_LIST
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_EXPR_LIST
                    (AST_PRE_INC
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_FOR
                (AST_EXPR_LIST
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR)))
                (AST_EXPR_LIST
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR))))
                (AST_EXPR_LIST
                    (AST_PRE_INC
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_FOR
                (AST_EXPR_LIST
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR)))
                (AST_EXPR_LIST
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_EXPR_LIST
                    (AST_PRE_INC
                        (AST_VAR)))
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))