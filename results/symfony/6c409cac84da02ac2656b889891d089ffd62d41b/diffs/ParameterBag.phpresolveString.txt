||||||||    public function resolveString($value)
    {
        if (preg_match('/^%([^%]+)%$/', $value, $match)) {
            // we do this to deal with non string values (Boolean, integer, ...)
            // as the preg_replace_callback throw an exception when trying
            // a non-string in a parameter value
            return $this->resolveValue($this->get(strtolower($match[1])));
        }

        $self = $this;
        return str_replace('%%', '%', preg_replace_callback('/(?<!%)%([^%]+)%/', function ($match) use ($self) {
            $resolved = $self->get(strtolower($match[1]));

            if (!is_string($resolved)) {
                throw new \LogicException('A parameter cannot contain a non-string parameter.');
            }

            return $self->resolveString($resolved);
        }, $value));
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CALL
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (
                                            (AST_THROW
                                                (AST_NEW
                                                    (
                                                        (SCALAR)))))))
                                (AST_RETURN
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))
                        (AST_VAR)))))))