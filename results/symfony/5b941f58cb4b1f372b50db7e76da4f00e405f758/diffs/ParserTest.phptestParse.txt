  public function testParse()
  {
    $parser = new Parser();

    $tests = array(
      'h1' => "h1",
      'foo|h1' => "foo:h1",
      'h1, h2, h3' => "h1 | h2 | h3",
      'h1:nth-child(3n+1)' => "*/*[name() = 'h1' and ((position() -1) mod 3 = 0 and position() >= 1)]",
      'h1 > p' => "h1/p",
      'h1#foo' => "h1[@id = 'foo']",
      'h1.foo' => "h1[contains(concat(' ', normalize-space(@class), ' '), ' foo ')]",
      'h1[class*="foo bar"]' => "h1[contains(@class, 'foo bar')]",
      'h1[foo|class*="foo bar"]' => "h1[contains(@foo:class, 'foo bar')]",
      'h1[class]' => "h1[@class]",
      'h1 .foo' => "h1/descendant::*[contains(concat(' ', normalize-space(@class), ' '), ' foo ')]",
      'h1 #foo' => "h1/descendant::*[@id = 'foo']",
      'h1 [class*=foo]' => "h1/descendant::*[contains(@class, 'foo')]",
    );

    foreach ($tests as $selector => $xpath)
    {
      $this->assertEquals($xpath, (string) $parser->parse($selector)->toXpath(), '->parse() parses an input string and returns a node');
    }

    try
    {
      $parser->parse('h1:');
      $this->fail('->parse() throws an Exception if the css selector is not valid');
    }
    catch (\Exception $e)
    {
      $this->assertEquals("Expected symbol, got '' at h1: -> ", $e->getMessage(), '->parse() throws an Exception if the css selector is not valid');
    }
  }
}||||||||  public function testParse($css, $xpath)
  {
    $parser = new Parser();

    $this->assertEquals($xpath, (string) $parser->parse($css)->toXpath(), '->parse() parses an input string and returns a node');
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CAST
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CAST
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (SCALAR))))