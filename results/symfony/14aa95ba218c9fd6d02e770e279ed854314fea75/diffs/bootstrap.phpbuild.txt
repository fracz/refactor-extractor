||||||||    public function build(ContainerBuilder $container)
    {
        $class = $this->getNamespace().'\\DependencyInjection\\'.str_replace('Bundle', 'Extension', $this->getName());
        if (class_exists($class)) {
            $extension = new $class();
            $alias = Container::underscore(str_replace('Bundle', '', $this->getName()));
            if ($alias !== $extension->getAlias()) {
                throw new \LogicException(sprintf('The extension alias for the default extension of a bundle must be the underscored version of the bundle name ("%s" vs "%s")', $alias, $extension->getAlias()));
            }
            $container->registerExtension($extension);
        }
    }
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))))