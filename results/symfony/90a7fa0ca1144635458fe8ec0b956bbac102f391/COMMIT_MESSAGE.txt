commit 90a7fa0ca1144635458fe8ec0b956bbac102f391
Merge: d7866d4 b3f6340
Author: Fabien Potencier <fabien.potencier@gmail.com>
Date:   Tue Apr 7 12:27:23 2015 +0200

    minor #14032 [SecurityBundle] UserPasswordEncoderCommand: Improve & simplify the command usage (ogizanagi)

    This PR was squashed before being merged into the 2.7 branch (closes #14032).

    Discussion
    ----------

    [SecurityBundle] UserPasswordEncoderCommand: Improve & simplify the command usage

    | Q             | A
    | ------------- | ---
    | Bug fix?      | no
    | New feature?  | no
    | BC breaks?    | no
    | Deprecations? | no
    | Tests pass?   | yes
    | Fixed tickets | #13988
    | License       | MIT

    Overlaps #14017 (might replace or follow it) . Sorry if it is considered as a duplicate, but the debate has evolved, and I think the arguments ordering isn't the best nor single way to improve this command usage anymore.
    Thank you @saro0h for having considered the mentioned issues and spent time on it.

    # Salt option & salt generation

    Thanks to @ircmaxell & @inanimatt, we came to the conclusion that the use-cases for the `salt` option/argument are pretty arguable. So I suggest to get rid of it: **a salt will always be generated by the command.**

    ### Generated salt
    The generated salt is now in the Table output:
    `security:encode-password test -n`
    ![screenshot 2015-03-30 a 21 38 21](https://cloud.githubusercontent.com/assets/2211145/6905081/d96f3ea4-d725-11e4-9b7c-83de8a75f28e.PNG)

    The "Generated salt" row and the last comment about the salt aren't present if the new `empty-salt` option is provided (see below).

    # New empty-salt option

    As some encoders might generate their own built-in salts (like the `BCryptPasswordEncoder`) and some custom encoders could do the same (or not require a salt at all), I suggest a new option: `empty-salt`.
    This option will not provide any salt to the configured encoder, which will generate its own, then.

    With the interactive way, the user will always be asked confirmation for the salt generation if the `empty-salt` option isn't set:

    `security:encode-password password`
    ![screenshot 2015-03-30 a 21 38 43](https://cloud.githubusercontent.com/assets/2211145/6905072/c53df984-d725-11e4-9a1a-81c3a363b5fe.PNG)

    ### bcrypt encoder

    As the `BCryptPasswordEncoder` is shipped with the security component, and listening to @inanimatt valuable comments in #13988, I introduced a second commit (0cdb546) making an exception for the `bcrypt` encoder, and always set the `empty-salt` option with it.
    We're aware that's not ideal from a OO design perspective, but far better from a DX one. If not desired, I will revert it.
    Anyway I think https://github.com/symfony/symfony/issues/13988#issuecomment-85068382 and other comments about the `PasswordEncoder` API and salt generation should be considered for 3.0.

    A note is added when bcrypt encoder is detected without the `empty-salt` option:
    `security:encode-password password "Custom\Class\Bcrypt\User" -n`
    ![screenshot 2015-03-30 a 19 46 36](https://cloud.githubusercontent.com/assets/2211145/6905066/b53edb52-d725-11e4-87e9-636bf177299a.PNG)

    # Default user-class

    The default `user-class` is set to `Symfony\Component\Security\Core\User\User`.
    I think this makes sense, as in the previous version of the command, the Symfony\Component\Security\Core\User\User was configured in the setAutocompleterValues and set the $value to Symfony\Component\Security\Core\User\User if null.

    Asking the question to the user with the interactive command would have been useful only if the user was able to pick one encoder from a choice list.

    # Arguments order / make arguments options

    When we had both `salt` and `user-class` as arguments, the command looked like:
    ```sh
    security:encode-password [password] [user-class] [salt]
    ```
    All arguments were optional, for the interactive command purpose (The command asked the user for missing arguments).
    But, as they were arguments, we had to provide each of them in the proper order. That meant we couldn't provide a salt without defining the optional user-class.
    So I suggested using options instead of arguments for both user-class & salt.

    But as the `salt` option/argument is removed, now I don't feel the need for the `user-class` to be an option.
    Indeed, the new command short version will look like the following:
    ```sh
    #Default user-class: Symfony\Component\Security\Core\User\User
    security:encode-password password

    #Another user-class:
    security:encode-password password "AppBundle\Model\User"
    ```

    Making the user-class an option IMO isn't a necessity anymore, and will only lengthen the command:
    ```sh
    security:encode-password password --user-class="AppBundle\Model\User"
    ```

    ## Bonus:
    - [The new command documentation](https://cloud.githubusercontent.com/assets/2211145/6845201/48a66382-d3b2-11e4-8227-b799215a2783.PNG). Thanks to @javiereguiluz.
    - [Full interactivity output](https://cloud.githubusercontent.com/assets/2211145/6906381/d7753ce4-d72e-11e4-8547-2ef35c6257e9.PNG)

    Commits
    -------

    b3f6340 [SecurityBundle] UserPasswordEncoderCommand: Improve & simplify the command usage