    public function testArrayAccessIterator()
    {
        $safe = new SafeDecorator(array('foo' => 'bar'));

        $this->assertEquals('bar', $safe['foo'], '"ArrayAccess" implementation returns a value from the embedded array');
        $safe['foo'] = 'baz';
        $this->assertEquals('baz', $safe['foo'], '"ArrayAccess" implementation sets a value on the embedded array');
        $this->assertTrue(isset($safe['foo']), '"ArrayAccess" checks if a value is set on the embedded array');
        unset($safe['foo']);
        $this->assertFalse(isset($safe['foo']), '"ArrayAccess" unsets a value on the embedded array');
    }
}

class TestClass1
{
    public $foo = 'bar';
}

class TestClass2
{
    public function doSomething()
    {
        return 'ok';
    }
}

class TestClass3
{
    public
        $boolValue = true,
        $nullValue = null;
}

class TestClass4
{
    public function __toString()
    {
        return 'TestClass4';
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR))))||||||||