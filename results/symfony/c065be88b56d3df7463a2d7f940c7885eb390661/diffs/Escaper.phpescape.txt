    static public function escape($escaper, $value)
    {
        if (null === $value) {
            return $value;
        }

        if (null === self::$escapers) {
            self::initializeEscapers();
        }

        if (is_string($escaper) && isset(self::$escapers[$escaper])) {
            $escaper = self::$escapers[$escaper];
        }

        // Scalars are anything other than arrays, objects and resources.
        if (is_scalar($value)) {
            return call_user_func($escaper, $value);
        }

        if (is_array($value)) {
            return new ArrayDecorator($escaper, $value);
        }

        if (is_object($value)) {
            if ($value instanceof Escaper) {
                // avoid double decoration
                $copy = clone $value;

                $copy->escaper = $escaper;

                return $copy;
            }

            if ($value instanceof SafeDecorator) {
                // do not escape objects marked as safe
                // return the original object
                return $value->getValue();
            }

            if (self::isClassMarkedAsSafe(get_class($value)) || $value instanceof SafeDecoratorInterface) {
                // the class or one of its children is marked as safe
                // return the unescaped object
                return $value;
            }

            if ($value instanceof \Traversable) {
                return new IteratorDecorator($escaper, $value);
            }

            return new ObjectDecorator($escaper, $value);

        }

        // it must be a resource; cannot escape that.
        throw new \InvalidArgumentException(sprintf('Unable to escape value "%s".', var_export($value, true)));
    }

    /**
     * Unescapes a value that has been escaped previously with the escape() method.
     *
     * @param  mixed $value The value to unescape
     *
     * @return mixed Unescaped value
     *
     * @throws \InvalidArgumentException If the escaping fails
     */
||||||||    static public function escape($escaper, $value)
    {
        if (null === $value) {
            return $value;
        }

        if (null === self::$escapers) {
            self::initializeEscapers();
        }

        if (is_string($escaper) && isset(self::$escapers[$escaper])) {
            $escaper = self::$escapers[$escaper];
        }

        // Scalars are anything other than arrays, objects and resources.
        if (is_scalar($value)) {
            return call_user_func($escaper, $value);
        }

        if (is_array($value)) {
            return new ArrayDecorator($escaper, $value);
        }

        if (is_object($value)) {
            if ($value instanceof BaseEscaper) {
                // avoid double decoration
                $copy = clone $value;
                $copy->setEscaper($escaper);

                return $copy;
            }

            if ($value instanceof SafeDecorator) {
                // do not escape objects marked as safe
                // return the original object
                return $value->getRawValue();
            }

            if (self::isClassMarkedAsSafe(get_class($value)) || $value instanceof SafeDecoratorInterface) {
                // the class or one of its children is marked as safe
                // return the unescaped object
                return $value;
            }

            if ($value instanceof \Traversable) {
                return new IteratorDecorator($escaper, $value);
            }

            return new ObjectDecorator($escaper, $value);

        }

        // it must be a resource; cannot escape that.
        throw new \InvalidArgumentException(sprintf('Unable to escape value "%s".', var_export($value, true)));
    }

    /**
     * Unescapes a value that has been escaped previously with the escape() method.
     *
     * @param  mixed $value The value to unescape
     *
     * @return mixed Unescaped value
     *
     * @throws \InvalidArgumentException If the escaping fails
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_STATIC_PROP))
            (
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ISSET
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CLONE
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_RETURN
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (AST_INSTANCEOF
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CONST)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_STATIC_PROP))
            (
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ISSET
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CLONE
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_RETURN
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (AST_INSTANCEOF
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CONST)))))))))