    public function testStoreDuplicateToken()
    {
        $this->assertTrue(true === self::$storage->write('token', '', 'data', '127.0.0.1', 'http://foo.bar', time()), '->write() returns true when the token is unique');
        $this->assertTrue(false === self::$storage->write('token', '', 'data', '127.0.0.1', 'http://foo.bar', time()), '->write() return false when the token is already present in the DB');
    }

||||||||    public function testStoreDuplicateToken()
    {
        $profile = new Profile('token');

        $this->assertTrue(true === self::$storage->write($profile), '->write() returns true when the token is unique');
        $this->assertTrue(false === self::$storage->write($profile), '->write() return false when the token is already present in the DB');
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_CALL))))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_CALL))))
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (AST_VAR))))
            (SCALAR))))