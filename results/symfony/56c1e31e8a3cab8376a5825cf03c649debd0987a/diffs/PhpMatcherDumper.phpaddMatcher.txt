    private function addMatcher($supportsRedirections)
    {
        // we need to deep clone the routes as we will modify the structure to optimize the dump
        $code = implode("\n", $this->compileRoutes(clone $this->getRoutes(), $supportsRedirections));

        return <<<EOF

    public function match(\$pathinfo)
    {
        \$allow = array();
        \$pathinfo = urldecode(\$pathinfo);

$code
        throw 0 < count(\$allow) ? new MethodNotAllowedException(array_unique(\$allow)) : new ResourceNotFoundException();
    }

EOF;
    }

||||||||    private function addMatcher($supportsRedirections)
    {
        // we need to deep clone the routes as we will modify the structure to optimize the dump
        $code = rtrim($this->compileRoutes(clone $this->getRoutes(), $supportsRedirections), "\n");

        return <<<EOF

    public function match(\$pathinfo)
    {
        \$allow = array();
        \$pathinfo = urldecode(\$pathinfo);

$code

        throw 0 < count(\$allow) ? new MethodNotAllowedException(array_unique(\$allow)) : new ResourceNotFoundException();
    }

EOF;
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLONE
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLONE
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR)))
                (SCALAR))))
    (AST_RETURN
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR))))