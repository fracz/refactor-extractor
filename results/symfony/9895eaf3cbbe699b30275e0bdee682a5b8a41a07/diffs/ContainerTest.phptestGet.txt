||||||||    public function testGet()
    {
        $sc = new ProjectServiceContainer();
        $sc->set('foo', $foo = new \stdClass());
        $this->assertEquals($foo, $sc->get('foo'), '->get() returns the service for the given id');
        $this->assertEquals($sc->__bar, $sc->get('bar'), '->get() returns the service for the given id');
        $this->assertEquals($sc->__foo_bar, $sc->get('foo_bar'), '->get() returns the service if a get*Method() is defined');
        $this->assertEquals($sc->__foo_baz, $sc->get('foo.baz'), '->get() returns the service if a get*Method() is defined');

        $sc->set('bar', $bar = new \stdClass());
        $this->assertEquals(spl_object_hash($sc->get('bar')), spl_object_hash($bar), '->getServiceIds() prefers to return a service defined with a getXXXService() method than one defined with set()');

        try {
            $sc->get(new \stdClass());
            $this->fail('->get() throws a \InvalidArgumentException exception if the service id is not a string');
        } catch (\Exception $e) {
            $this->assertInstanceOf('\InvalidArgumentException', $e, '->get() throws a \InvalidArgumentException exception if the service id is not a string');
        }

        try {
            $sc->get('');
            $this->fail('->get() throws a \InvalidArgumentException exception if the service is empty');
        } catch (\Exception $e) {
            $this->assertInstanceOf('\InvalidArgumentException', $e, '->get() throws a \InvalidArgumentException exception if the service is empty');
            $this->assertEquals('The service "" does not exist.', $e->getMessage(), '->get() throws a \InvalidArgumentException exception if the service is empty');
        }
        $this->assertNull($sc->get('', ContainerInterface::NULL_ON_INVALID_REFERENCE));

        try {
            $sc[''];
            $this->fail('->get() throws a \InvalidArgumentException exception if the service is empty');
        } catch (\Exception $e) {
            $this->assertInstanceOf('\InvalidArgumentException', $e, '->get() throws a \InvalidArgumentException exception if the service is empty');
            $this->assertEquals('The service "" does not exist.', $e->getMessage(), '->get() throws a \InvalidArgumentException exception if the service is empty');
        }
    }

    /**
     * @covers Symfony\Components\DependencyInjection\Container::has
     * @covers Symfony\Components\DependencyInjection\Container::offsetExists
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_TRY
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))))
        (NULL)))