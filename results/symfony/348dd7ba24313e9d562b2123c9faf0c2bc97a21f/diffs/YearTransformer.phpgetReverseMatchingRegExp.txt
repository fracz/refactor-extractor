    public function getReverseMatchingRegExp($length)
    {
        if (2 == $length) {
            $regExp = '\d{2}';
        } else {
            $regExp = '\d{4}';

            // The named capture in this case will be always y (that equals to yyyy)
            $length = 1;
        }

        return $this->addNamedCapture($regExp, $length);
    }

||||||||    public function getReverseMatchingRegExp($length)
    {
        if (2 == $length) {
            $regExp = '\d{2}';
        } else {
            $regExp = '\d{4}';

            // The named capture in this case will be always y (that equals to yyyy)
            //$length = 1;
        }

        return $regExp;
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))