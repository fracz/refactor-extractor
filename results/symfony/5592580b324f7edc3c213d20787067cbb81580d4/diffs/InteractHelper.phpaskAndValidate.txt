  public function askAndValidate(OutputInterface $output, $question, \Closure $validator, $attempts = false)
  {
    // @codeCoverageIgnoreStart
    $error = null;
    while (false === $attempts || $attempts--)
    {
      if (null !== $error)
      {
        $output->write($this->getHelperSet()->get('formatter')->formatBlock($error->getMessage(), 'error'));
      }

      $value = $this->ask($output, $question, null);

      try
      {
        return $validator($value);
      }
      catch (\Exception $error)
      {
      }
    }

    throw $error;
    // @codeCoverageIgnoreEnd
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (AST_POST_DEC
                (AST_VAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (SCALAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_CONST))))
            (AST_TRY
                (
                    (AST_RETURN
                        (AST_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)))
                (NULL))))
    (AST_THROW
        (AST_VAR)))||||||||