||||||||    private function createHhvmProcessBuilder(InputInterface $input, OutputInterface $output, $env)
    {
        list($ip, $port) = explode(':', $input->getArgument('address'));

        $docroot = realpath($input->getOption('docroot'));
        $bootstrap = 'prod' === $env ? 'app.php' : 'app_dev.php';
        $config = <<<EOF
Server {
  IP = $ip
  Port = $port
  SourceRoot = $docroot
  RequestTimeoutSeconds = -1
  RequestMemoryMaxBytes = -1
}

VirtualHost {
  * {
    Pattern = .*
    RewriteRules {
      * {
        pattern = .?

        # app bootstrap
        to = $bootstrap

        # append the original query string
        qsa = true
      }
    }
  }
}

StaticFile {
  Extensions {
    css = text/css
    gif = image/gif
    html = text/html
    jpe = image/jpeg
    jpeg = image/jpeg
    jpg = image/jpeg
    png = image/png
    tif = image/tiff
    tiff = image/tiff
    txt = text/plain
    php = text/plain
  }
}
EOF;

        $configFile = $this->getContainer()->get('kernel')->getCacheDir().'/hhvm-server-'.md5($config).'.hdf';
        file_put_contents($configFile, $config);

        return new ProcessBuilder(array(PHP_BINARY, '--mode', 'server', '--config', $configFile));
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (SCALAR))))
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))))))