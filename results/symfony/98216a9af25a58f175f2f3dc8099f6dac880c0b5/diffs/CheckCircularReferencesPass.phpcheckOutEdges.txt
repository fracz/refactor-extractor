    private function checkOutEdges(array $edges)
    {
        foreach ($edges as $edge) {
            $node = $edge->getDestNode();
            $this->currentPath[] = $id = $node->getId();

            if ($this->currentId === $id) {
                throw new \RuntimeException(sprintf('Circular reference detected for "%s", path: "%s".', $this->currentId, implode(' -> ', $this->currentPath)));
            }

            $this->checkOutEdges($node->getOutEdges());
            array_pop($this->currentPath);
        }
    }
}||||||||    private function checkOutEdges(array $edges)
    {
        foreach ($edges as $edge) {
            $node = $edge->getDestNode();
            $this->currentPath[] = $id = $node->getId();

            if ($this->currentId === $id) {
                throw new CircularReferenceException($this->currentId, $this->currentPath);
            }

            $this->checkOutEdges($node->getOutEdges());
            array_pop($this->currentPath);
        }
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR))))))))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))))