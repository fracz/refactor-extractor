    public function testConstraintViolationCanHandleArrayValue()
    {
        $constraint = new Type(array('type' => 'string'));
        $this->validator->isValid(array(0 => "Test"), $constraint);

        $violation = new ConstraintViolation(
            '{{ value }}',
            $this->validator->getMessageParameters(),
            '',
            '',
            ''
        );

        $this->assertEquals('Array', $violation->getMessage());
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||