    protected function parseImport(RouteCollection $collection, $node, $file)
    {
        $class = null;
        if ($node->hasAttribute('class') && $import->getAttribute('class') !== get_class($this)) {
            $class = (string) $node->getAttribute('class');
        } else {
            // try to detect loader with the extension
            switch (pathinfo((string) $node->getAttribute('resource'), PATHINFO_EXTENSION)) {
                case 'yml':
                    $class = 'Symfony\\Components\\Routing\\Loader\\YamlFileLoader';
                    break;
            }
        }

        $loader = null === $class ? $this : new $class($this->paths);

        $importedFile = $this->getAbsolutePath((string) $node->getAttribute('resource'), dirname($file));

        $collection->addCollection($loader->load($importedFile), (string) $node->getAttribute('prefix'));
    }

    /**
     * @throws \InvalidArgumentException When loading of XML file returns error
     */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_SWITCH
                    (AST_CALL
                        (
                            (AST_CAST
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_CONST)))
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BREAK
                                    (NULL)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (AST_VAR)
            (AST_NEW
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CAST
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CAST
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))))||||||||