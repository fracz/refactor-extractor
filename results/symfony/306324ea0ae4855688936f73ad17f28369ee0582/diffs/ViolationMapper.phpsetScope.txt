||||||||    private function setScope(FormInterface $form)
    {
        $this->scope = $form;
        $this->children = new \RecursiveIteratorIterator(
            new VirtualFormAwareIterator($form->getChildren())
        );
        foreach ($form->getAttribute('error_mapping') as $propertyPath => $childPath) {
            $this->rules[$propertyPath] = new FormMapping($form, $childPath);
        }
    }

    /**
     * Tests whether $needle is a prefix path of $haystack.
     *
     * @param string $needle
     * @param string $haystack
     *
     * @return Boolean
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))))))