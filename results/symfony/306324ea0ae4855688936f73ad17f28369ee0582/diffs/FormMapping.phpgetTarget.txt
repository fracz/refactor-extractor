||||||||    public function getTarget()
    {
        // Lazy initialization to make sure that the constructor is cheap
        if (null === $this->target) {
            $childNames = explode('.', $this->targetPath);
            $target = $this->origin;

            foreach ($childNames as $childName) {
                if (!$target->has($childName)) {
                    throw new ErrorMappingException(sprintf('The child "%s" of "%s" mapped by the rule "%s" in "%s" does not exist.', $childName, $target->getName(), $this->targetPath, $this->origin->getName()));
                }
                $target = $target->get($childName);
            }

            // Only set once successfully resolved
            $this->target = $target;
        }

        return $this->target;
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_VAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (AST_METHOD_CALL
                                                            (AST_PROP
                                                                (AST_VAR)))))))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))