    public function load($resource, $locale, $domain = 'messages')
    {
        if (!stream_is_local($resource)) {
            throw new InvalidResourceException(sprintf('This is not a local file "%s".', $resource));
        }

        if (!file_exists($resource)) {
            throw new NotFoundResourceException(sprintf('File "%s" not found.', $resource));
        }

        try {
            $dom = XmlUtils::loadFile($resource);
        } catch (\InvalidArgumentException $e) {
            throw new InvalidResourceException(sprintf('Unable to load "%s".', $resource), $e->getCode(), $e);
        }

        $internalErrors = libxml_use_internal_errors(true);
        libxml_clear_errors();

        $xpath = new \DOMXPath($dom);
        $nodes = $xpath->evaluate('//TS/context/name[text()="'.$domain.'"]');

        $catalogue = new MessageCatalogue($locale);
        if ($nodes->length == 1) {
            $translations = $nodes->item(0)->nextSibling->parentNode->parentNode->getElementsByTagName('message');
            foreach ($translations as $translation) {
                $translationValue = (string) $translation->getElementsByTagName('translation')->item(0)->nodeValue;

                if (!empty($translationValue)) {
                    $catalogue->set(
                        (string) $translation->getElementsByTagName('source')->item(0)->nodeValue,
                        $translationValue,
                        $domain
                    );
                }
                $translation = $translation->nextSibling;
            }
            $catalogue->addResource(new FileResource($resource));
        }

        libxml_use_internal_errors($internalErrors);

        return $catalogue;
    }
}||||||||    public function load($resource, $locale, $domain = 'messages')
    {
        if (!stream_is_local($resource)) {
            throw new InvalidResourceException(sprintf('This is not a local file "%s".', $resource));
        }

        if (!file_exists($resource)) {
            throw new NotFoundResourceException(sprintf('File "%s" not found.', $resource));
        }

        try {
            $dom = XmlUtils::loadFile($resource);
        } catch (\InvalidArgumentException $e) {
            throw new InvalidResourceException(sprintf('Unable to load "%s".', $resource), $e->getCode(), $e);
        }

        $internalErrors = libxml_use_internal_errors(true);
        libxml_clear_errors();

        $xpath = new \DOMXPath($dom);
        $nodes = $xpath->evaluate('//TS/context/name[text()="'.$domain.'"]');

        $catalogue = new MessageCatalogue($locale);
        if ($nodes->length == 1) {
            $translations = $nodes->item(0)->nextSibling->parentNode->parentNode->getElementsByTagName('message');
            foreach ($translations as $translation) {
                $translationValue = (string) $translation->getElementsByTagName('translation')->item(0)->nodeValue;

                if (!empty($translationValue)) {
                    $catalogue->set(
                        (string) $translation->getElementsByTagName('source')->item(0)->nodeValue,
                        $translationValue,
                        $domain
                    );
                }
                $translation = $translation->nextSibling;
            }

            if (class_exists('Symfony\Component\Config\Resource\FileResource')) {
                $catalogue->addResource(new FileResource($resource));
            }
        }

        libxml_use_internal_errors($internalErrors);

        return $catalogue;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_PROP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR))))))
                        (
                            (SCALAR))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CAST
                                (AST_PROP
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))
                                        (
                                            (SCALAR))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_VAR)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CAST
                                                (AST_PROP
                                                    (AST_METHOD_CALL
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (SCALAR)))
                                                        (
                                                            (SCALAR)))))
                                            (AST_VAR)
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR))))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_PROP
                                (AST_PROP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR))))))
                        (
                            (SCALAR))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CAST
                                (AST_PROP
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))
                                        (
                                            (SCALAR))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_VAR)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CAST
                                                (AST_PROP
                                                    (AST_METHOD_CALL
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (SCALAR)))
                                                        (
                                                            (SCALAR)))))
                                            (AST_VAR)
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_NEW
                                        (
                                            (AST_VAR)))))))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))