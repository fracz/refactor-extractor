    public function findImport($url)
    {
        $urls = array();

        // for "normal" scss imports (ignore vanilla css and external requests)
        if (! preg_match('/\.css$|^https?:\/\//', $url)) {
            // try both normal and the _partial filename
            $urls = array($url, preg_replace('/[^\/]+$/', '_\0', $url));
        }

        foreach ($this->importPaths as $dir) {
            if (is_string($dir)) {
                // check urls for normal import paths
                foreach ($urls as $full) {
                    $full = $dir
                        . (! empty($dir) && substr($dir, -1) !== '/' ? '/' : '')
                        . $full;

                    if ($this->fileExists($file = $full . '.scss') ||
                        $this->fileExists($file = $full)
                    ) {
                        return $file;
                    }
                }
            } elseif (is_callable($dir)) {
                // check custom callback for import path
                $file = call_user_func($dir, $url, $this);

                if ($file !== null) {
                    return $file;
                }
            }
        }

        return null;
    }

    /**
     * Throw error (exception)
     *
     * @api
     *
     * @param string $msg Message with optional sprintf()-style vararg parameters
     *
     * @throws \Exception
     */
||||||||    public function findImport($url)
    {
        $urls = array();

        // for "normal" scss imports (ignore vanilla css and external requests)
        if (! preg_match('/\.css$|^https?:\/\//', $url)) {
            // try both normal and the _partial filename
            $urls = array($url, preg_replace('/[^\/]+$/', '_\0', $url));
        }

        foreach ($this->importPaths as $dir) {
            if (is_string($dir)) {
                // check urls for normal import paths
                foreach ($urls as $full) {
                    $full = $dir
                        . (! empty($dir) && substr($dir, -1) !== '/' ? '/' : '')
                        . $full;

                    if ($this->fileExists($file = $full . '.scss') ||
                        $this->fileExists($file = $full)
                    ) {
                        return $file;
                    }
                }
            } elseif (is_callable($dir)) {
                // check custom callback for import path
                $file = call_user_func($dir, $url);

                if ($file !== null) {
                    return $file;
                }
            }
        }

        return null;
    }

    /**
     * Throw error (exception)
     *
     * @api
     *
     * @param string $msg Message with optional sprintf()-style vararg parameters
     *
     * @throws \Exception
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR)))
                            (NULL)))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CONDITIONAL
                                                (AST_BINARY_OP
                                                    (AST_UNARY_OP
                                                        (AST_EMPTY
                                                            (AST_VAR)))
                                                    (AST_BINARY_OP
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)
                                                                (AST_UNARY_OP
                                                                    (SCALAR))))
                                                        (SCALAR)))
                                                (SCALAR)
                                                (SCALAR)))
                                        (AST_VAR)))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR)))))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_VAR)))))
                                        (
                                            (AST_RETURN
                                                (AST_VAR)))))))))
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_RETURN
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR)))
                            (NULL)))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CONDITIONAL
                                                (AST_BINARY_OP
                                                    (AST_UNARY_OP
                                                        (AST_EMPTY
                                                            (AST_VAR)))
                                                    (AST_BINARY_OP
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)
                                                                (AST_UNARY_OP
                                                                    (SCALAR))))
                                                        (SCALAR)))
                                                (SCALAR)
                                                (SCALAR)))
                                        (AST_VAR)))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR)))))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_VAR)))))
                                        (
                                            (AST_RETURN
                                                (AST_VAR)))))))))
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_RETURN
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))