    public function extractSharedStrings()
    {
        $xmlReader = new \XMLReader();
        $sharedStringIndex = 0;
        $escaper = new \Box\Spout\Common\Escaper\XLSX();

        $sharedStringsFilePath = $this->getSharedStringsFilePath();
        if ($xmlReader->open($sharedStringsFilePath, null, LIBXML_NONET) === false) {
            throw new IOException('Could not open "' . self::SHARED_STRINGS_XML_FILE_PATH . '".');
        }

        $sharedStringsUniqueCount = $this->getSharedStringsUniqueCount($xmlReader);
        $this->cachingStrategy = $this->getBestSharedStringsCachingStrategy($sharedStringsUniqueCount);

        while ($xmlReader->read() && $xmlReader->name !== 'si') {
            // do nothing until a 'si' tag is reached
        }

        while ($xmlReader->name === 'si') {
            $node = $this->getSimpleXmlElementNodeFromXMLReader($xmlReader);
            $node->registerXPathNamespace('ns', self::MAIN_NAMESPACE_FOR_SHARED_STRINGS_XML);

            // removes nodes that should not be read, like the pronunciation of the Kanji characters
            $cleanNode = $this->removeSuperfluousTextNodes($node);

            // find all text nodes 't'; there can be multiple if the cell contains formatting
            $textNodes = $cleanNode->xpath('//ns:t');

            $textValue = '';
            foreach ($textNodes as $textNode) {
                if ($this->shouldPreserveWhitespace($textNode)) {
                    $textValue .= $textNode->__toString();
                } else {
                    $textValue .= trim($textNode->__toString());
                }
            }

            $unescapedTextValue = $escaper->unescape($textValue);
            $this->cachingStrategy->addStringForIndex($unescapedTextValue, $sharedStringIndex);

            $sharedStringIndex++;

            // jump to the next 'si' tag
            $xmlReader->next('si');
        }

        $this->cachingStrategy->closeCache();

        $xmlReader->close();
    }

    /**
     * @return string The path to the shared strings XML file
     */
||||||||    public function extractSharedStrings()
    {
        $xmlReader = new XMLReader();
        $sharedStringIndex = 0;
        $escaper = new \Box\Spout\Common\Escaper\XLSX();

        $sharedStringsFilePath = $this->getSharedStringsFilePath();
        if ($xmlReader->open($sharedStringsFilePath, null, LIBXML_NONET) === false) {
            throw new IOException('Could not open "' . self::SHARED_STRINGS_XML_FILE_PATH . '".');
        }

        try {
            $sharedStringsUniqueCount = $this->getSharedStringsUniqueCount($xmlReader);
            $this->cachingStrategy = $this->getBestSharedStringsCachingStrategy($sharedStringsUniqueCount);

            while ($xmlReader->read() && $xmlReader->name !== 'si') {
                // do nothing until a 'si' tag is reached
            }

            while ($xmlReader->name === 'si') {
                $node = $this->getSimpleXmlElementNodeFromXMLReader($xmlReader);
                $node->registerXPathNamespace('ns', self::MAIN_NAMESPACE_FOR_SHARED_STRINGS_XML);

                // removes nodes that should not be read, like the pronunciation of the Kanji characters
                $cleanNode = $this->removeSuperfluousTextNodes($node);

                // find all text nodes 't'; there can be multiple if the cell contains formatting
                $textNodes = $cleanNode->xpath('//ns:t');

                $textValue = '';
                foreach ($textNodes as $textNode) {
                    if ($this->shouldPreserveWhitespace($textNode)) {
                        $textValue .= $textNode->__toString();
                    } else {
                        $textValue .= trim($textNode->__toString());
                    }
                }

                $unescapedTextValue = $escaper->unescape($textValue);
                $this->cachingStrategy->addStringForIndex($unescapedTextValue, $sharedStringIndex);

                $sharedStringIndex++;

                // jump to the next 'si' tag
                $xmlReader->next('si');
            }

        } catch (XMLProcessingException $exception) {
            throw new IOException("The sharedStrings.xml file is invalid and cannot be read. [{$exception->getMessage()}]");
        }

        $this->cachingStrategy->closeCache();

        $xmlReader->close();
    }

    /**
     * @return string The path to the shared strings XML file
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_POST_INC
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_WHILE
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (AST_WHILE
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN_OP
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN_OP
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_POST_INC
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)))