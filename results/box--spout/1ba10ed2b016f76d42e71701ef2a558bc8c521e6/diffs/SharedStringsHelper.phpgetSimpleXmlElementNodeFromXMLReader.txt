    protected function getSimpleXmlElementNodeFromXMLReader($xmlReader)
    {
        // Use internal errors to avoid displaying lots of warning messages in case of error found in the XML node.
        // For instance, if the file is used to perform a "Billion Laughs" or "Quadratic Blowup" attacks
        libxml_clear_errors();
        libxml_use_internal_errors(true);

        $node = null;
        try {
            $node = new \SimpleXMLElement($xmlReader->readOuterXml());
        } catch (\Exception $exception) {
            $error = libxml_get_last_error();
            libxml_use_internal_errors(false);

            throw new IOException('The sharedStrings.xml file contains unreadable data [' . trim($error->message) . '].');
        }

        libxml_use_internal_errors(false);

        return $node;
    }

    /**
     * Removes nodes that should not be read, like the pronunciation of the Kanji characters.
     * By keeping them, their text content would be added to the read string.
     *
     * @param \SimpleXMLElement $parentNode Parent node that may contain nodes to remove
     * @return \SimpleXMLElement Cleaned parent node
     */
||||||||    protected function getSimpleXmlElementNodeFromXMLReader($xmlReader)
    {
        $node = null;
        try {
            $node = new SimpleXMLElement($xmlReader->readOuterXml());
        } catch (XMLProcessingException $exception) {
            throw new IOException("The sharedStrings.xml file contains unreadable data [{$exception->getMessage()}].");
        }

        return $node;
    }

    /**
     * Removes nodes that should not be read, like the pronunciation of the Kanji characters.
     * By keeping them, their text content would be added to the read string.
     *
     * @param \Box\Spout\Reader\Wrapper\SimpleXMLElement $parentNode Parent node that may contain nodes to remove
     * @return \Box\Spout\Reader\Wrapper\SimpleXMLElement Cleaned parent node
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL)
    (AST_CALL
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL))
                    (AST_CALL
                        (
                            (AST_CONST)))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (SCALAR))))))))
        (NULL))
    (AST_CALL
        (
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))))))))
        (NULL))
    (AST_RETURN
        (AST_VAR)))