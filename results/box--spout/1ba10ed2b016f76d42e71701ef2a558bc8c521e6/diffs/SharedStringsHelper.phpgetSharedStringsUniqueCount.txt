    protected function getSharedStringsUniqueCount($xmlReader)
    {
        // Use internal errors to avoid displaying lots of warning messages in case of invalid file
        // For instance, if the file is used to perform a "Billion Laughs" or "Quadratic Blowup" attacks
        libxml_clear_errors();
        libxml_use_internal_errors(true);

        $xmlReader->next('sst');

        // Iterate over the "sst" elements to get the actual "sst ELEMENT" (skips any DOCTYPE)
        while ($xmlReader->name === 'sst' && $xmlReader->nodeType !== \XMLReader::ELEMENT) {
            $xmlReader->read();
        }

        $readError = libxml_get_last_error();
        if ($readError !== false) {
            $readErrorMessage = trim($readError->message);
            throw new IOException("The sharedStrings.xml file is invalid and cannot be read. [{$readErrorMessage}]");
        }

        // reset the setting to display XML warnings/errors
        libxml_use_internal_errors(false);

        return intval($xmlReader->getAttribute('uniqueCount'));
    }

    /**
     * Returns the best shared strings caching strategy.
     *
     * @param int $sharedStringsUniqueCount
     * @return CachingStrategyInterface
     */
||||||||    protected function getSharedStringsUniqueCount($xmlReader)
    {
        $xmlReader->next('sst');

        // Iterate over the "sst" elements to get the actual "sst ELEMENT" (skips any DOCTYPE)
        while ($xmlReader->name === 'sst' && $xmlReader->nodeType !== XMLReader::ELEMENT) {
            $xmlReader->read();
        }

        return intval($xmlReader->getAttribute('uniqueCount'));
    }

    /**
     * Returns the best shared strings caching strategy.
     *
     * @param int $sharedStringsUniqueCount
     * @return CachingStrategyInterface
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL)
    (AST_CALL
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR))))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_CALL
        (
            (AST_CONST)))
    (AST_RETURN
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR))))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))))