    public function getSheets()
    {
        $sheets = [];

        $contentTypesAsXMLElement = $this->getFileAsXMLElementWithNamespace(
            self::CONTENT_TYPES_XML_FILE_PATH,
            self::MAIN_NAMESPACE_FOR_CONTENT_TYPES_XML
        );

        // find all nodes defining a sheet
        $sheetNodes = $contentTypesAsXMLElement->xpath('//ns:Override[@ContentType="' . self::OVERRIDE_CONTENT_TYPES_ATTRIBUTE . '"]');
        $numSheetNodes = count($sheetNodes);

        for ($i = 0; $i < $numSheetNodes; $i++) {
            $sheetNode = $sheetNodes[$i];
            $sheetDataXMLFilePath = (string) $sheetNode->attributes()->PartName;

            $sheets[] = $this->getSheetFromXML($sheetDataXMLFilePath, $i);
        }

        return $sheets;
    }

    /**
     * Returns an instance of a sheet, given the path of its data XML file.
     * We first look at "xl/_rels/workbook.xml.rels" to find the relationship ID of the sheet.
     * Then we look at "xl/worbook.xml" to find the sheet entry associated to the found ID.
     * The entry contains the ID and name of the sheet.
     *
     * If this piece of data can't be found by parsing the different XML files, the ID will default
     * to the sheet index, based on order in [Content_Types].xml. Similarly, the sheet's name will
     * default to the data sheet XML file name ("xl/worksheets/sheet2.xml" => "sheet2").
     *
     * @param string $sheetDataXMLFilePath Path of the sheet data XML file as in [Content_Types].xml
     * @param int $sheetIndexZeroBased Index of the sheet, based on order in [Content_Types].xml (zero-based)
     * @return \Box\Spout\Reader\XLSX\Sheet Sheet instance
     */
||||||||    public function getSheets()
    {
        $sheets = [];

        $contentTypesAsXMLElement = $this->getFileAsXMLElementWithNamespace(
            self::CONTENT_TYPES_XML_FILE_PATH,
            self::MAIN_NAMESPACE_FOR_CONTENT_TYPES_XML
        );

        // find all nodes defining a sheet
        $sheetNodes = $contentTypesAsXMLElement->xpath('//ns:Override[@ContentType="' . self::OVERRIDE_CONTENT_TYPES_ATTRIBUTE . '"]');
        $numSheetNodes = count($sheetNodes);

        for ($i = 0; $i < $numSheetNodes; $i++) {
            $sheetNode = $sheetNodes[$i];
            $sheetDataXMLFilePath = $sheetNode->getAttribute('PartName');

            $sheets[] = $this->getSheetFromXML($sheetDataXMLFilePath, $i);
        }

        return $sheets;
    }

    /**
     * Returns an instance of a sheet, given the path of its data XML file.
     * We first look at "xl/_rels/workbook.xml.rels" to find the relationship ID of the sheet.
     * Then we look at "xl/worbook.xml" to find the sheet entry associated to the found ID.
     * The entry contains the ID and name of the sheet.
     *
     * If this piece of data can't be found by parsing the different XML files, the ID will default
     * to the sheet index, based on order in [Content_Types].xml. Similarly, the sheet's name will
     * default to the data sheet XML file name ("xl/worksheets/sheet2.xml" => "sheet2").
     *
     * @param string $sheetDataXMLFilePath Path of the sheet data XML file as in [Content_Types].xml
     * @param int $sheetIndexZeroBased Index of the sheet, based on order in [Content_Types].xml (zero-based)
     * @return \Box\Spout\Reader\XLSX\Sheet Sheet instance
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CAST
                    (AST_PROP
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))