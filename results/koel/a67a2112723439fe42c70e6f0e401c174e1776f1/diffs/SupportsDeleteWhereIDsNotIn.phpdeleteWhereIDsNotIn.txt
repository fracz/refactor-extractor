    public static function deleteWhereIDsNotIn(array $ids, $key = 'id')
    {
        // If the number of entries is lower than, or equals to 65535, just go ahead.
        if (count($ids) <= 65535) {
            return static::whereNotIn($key, $ids)->delete();
        }

        // Otherwise, we get the actual IDs that should be deleted…
        $allIDs = static::select($key)->get()->pluck($key)->all();
        $whereInIDs = array_diff($allIDs, $ids);
        // …and see if we can delete them instead.
        if (count($whereInIDs) < 65535) {
            return static::whereIn($key, $whereInIDs)->delete();
        }

        // If that's not possible (i.e. this array has more than 65535 elements, too)
        // then we'll delete chunk by chunk.
        return static::deleteByChunk($ids, $key);
    }

    /**
     * Delete records chunk by chunk.
     *
     * @param array  $ids       The array of record IDs to delete
     * @param string $key       Name of the primary key
     * @param int    $chunkSize Size of each chunk. Defaults to 2^16-1 (65535)
     */
||||||||    public static function deleteWhereIDsNotIn(array $ids, $key = 'id')
    {
        // If the number of entries is lower than, or equals to 65535, just go ahead.
        if (count($ids) <= 65535) {
            return static::whereNotIn($key, $ids)->delete();
        }

        // Otherwise, we get the actual IDs that should be deleted…
        $allIDs = static::select($key)->get()->pluck($key)->all();
        $whereInIDs = array_diff($allIDs, $ids);
        // …and see if we can delete them instead.
        if (count($whereInIDs) < 65535) {
            return static::whereIn($key, $whereInIDs)->delete();
        }

        // If that's not possible (i.e. this array has more than 65535 elements, too)
        // then we'll delete chunk by chunk.
        static::deleteByChunk($ids, $key);
    }

    /**
     * Delete records chunk by chunk.
     *
     * @param array  $ids       The array of record IDs to delete
     * @param string $key       Name of the primary key
     * @param int    $chunkSize Size of each chunk. Defaults to 2^16-1 (65535)
     *
     * @throws \Exception
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))