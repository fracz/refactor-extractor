||||||||    private function syncFileRecord(WatchRecordInterface $record)
    {
        $path = $record->getPath();
        Log::info("'$path' is a file.");

        // If the file has been deleted...
        if ($record->isDeleted()) {
            // ...and it has a record in our database, remove it.
            if ($song = Song::byPath($path)) {
                $song->delete();
                Log::info("$path deleted.");

                event(new LibraryChanged());
            } else {
                Log::info("$path doesn't exist in our database--skipping.");
            }
        }
        // Otherwise, it's a new or changed file. Try to sync it in.
        // File format etc. will be handled by File::sync().
        elseif ($record->isNewOrModified()) {
            $result = (new File($path))->sync($this->tags);
            Log::info($result === File::SYNC_RESULT_SUCCESS ? "Synchronized $path" : "Invalid file $path");

            event(new LibraryChanged());
        }
    }

    /**
     * Sync a directory's watch record.
     *
     * @param WatchRecordInterface $record
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_STATIC_CALL
                                (
                                    (AST_ENCAPS_LIST
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_CALL
                                (
                                    (AST_NEW)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_ENCAPS_LIST
                                        (AST_VAR)
                                        (SCALAR)))))))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_NEW
                            (
                                (AST_VAR)))
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_STATIC_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)))))
                (AST_CALL
                    (
                        (AST_NEW)))))))