    function Crypt_TripleDES($mode = CRYPT_DES_MODE_CBC)
    {
        if ( !defined('CRYPT_DES_MODE') ) {
            switch (true) {
                case extension_loaded('mcrypt'):
                    // i'd check to see if des was supported, by doing in_array('des', mcrypt_list_algorithms('')),
                    // but since that can be changed after the object has been created, there doesn't seem to be
                    // a lot of point...
                    define('CRYPT_DES_MODE', CRYPT_DES_MODE_MCRYPT);
                    break;
                default:
                    define('CRYPT_DES_MODE', CRYPT_DES_MODE_INTERNAL);
            }
        }

        if ( $mode == CRYPT_DES_MODE_3CBC ) {
            $this->mode = CRYPT_DES_MODE_3CBC;
            $this->des = array(
                new Crypt_DES(CRYPT_DES_MODE_CBC),
                new Crypt_DES(CRYPT_DES_MODE_CBC),
                new Crypt_DES(CRYPT_DES_MODE_CBC)
            );

            // we're going to be doing the padding, ourselves, so disable it in the Crypt_DES objects
            $this->des[0]->disablePadding();
            $this->des[1]->disablePadding();
            $this->des[2]->disablePadding();

            return;
        }

        switch ( CRYPT_DES_MODE ) {
            case CRYPT_DES_MODE_MCRYPT:
                switch ($mode) {
                    case CRYPT_DES_MODE_ECB:
                        $this->mode = MCRYPT_MODE_ECB;
                        break;
                    case CRYPT_DES_MODE_CTR:
                        $this->mode = 'ctr';
                        break;
                    case CRYPT_DES_MODE_CBC:
                    default:
                        $this->mode = MCRYPT_MODE_CBC;
                }

                break;
            default:
                $this->des = array(
                    new Crypt_DES(CRYPT_DES_MODE_ECB),
                    new Crypt_DES(CRYPT_DES_MODE_ECB),
                    new Crypt_DES(CRYPT_DES_MODE_ECB)
                );

                // we're going to be doing the padding, ourselves, so disable it in the Crypt_DES objects
                $this->des[0]->disablePadding();
                $this->des[1]->disablePadding();
                $this->des[2]->disablePadding();

                switch ($mode) {
                    case CRYPT_DES_MODE_ECB:
                    case CRYPT_DES_MODE_CTR:
                    case CRYPT_DES_MODE_CBC:
                        $this->mode = $mode;
                        break;
                    default:
                        $this->mode = CRYPT_DES_MODE_CBC;
                }
        }
    }

    /**
     * Sets the key.
     *
     * Keys can be of any length.  Triple DES, itself, can use 128-bit (eg. strlen($key) == 16) or
     * 192-bit (eg. strlen($key) == 24) keys.  This function pads and truncates $key as appropriate.
     *
     * DES also requires that every eighth bit be a parity bit, however, we'll ignore that.
     *
     * If the key is not explicitly set, it'll be assumed to be all zero's.
     *
     * @access public
     * @param String $key
     */
||||||||    function Crypt_TripleDES($mode = CRYPT_DES_MODE_CBC)
    {
        if ( !defined('CRYPT_DES_MODE') ) {
            switch (true) {
                case extension_loaded('mcrypt'):
                    // i'd check to see if des was supported, by doing in_array('des', mcrypt_list_algorithms('')),
                    // but since that can be changed after the object has been created, there doesn't seem to be
                    // a lot of point...
                    define('CRYPT_DES_MODE', CRYPT_DES_MODE_MCRYPT);
                    break;
                default:
                    define('CRYPT_DES_MODE', CRYPT_DES_MODE_INTERNAL);
            }
        }

        if ( $mode == CRYPT_DES_MODE_3CBC ) {
            $this->mode = CRYPT_DES_MODE_3CBC;
            $this->des = array(
                new Crypt_DES(CRYPT_DES_MODE_CBC),
                new Crypt_DES(CRYPT_DES_MODE_CBC),
                new Crypt_DES(CRYPT_DES_MODE_CBC)
            );

            // we're going to be doing the padding, ourselves, so disable it in the Crypt_DES objects
            $this->des[0]->disablePadding();
            $this->des[1]->disablePadding();
            $this->des[2]->disablePadding();

            return;
        }

        switch ( CRYPT_DES_MODE ) {
            case CRYPT_DES_MODE_MCRYPT:
                switch ($mode) {
                    case CRYPT_DES_MODE_ECB:
                        $this->paddable = true;
                        $this->mode = MCRYPT_MODE_ECB;
                        break;
                    case CRYPT_DES_MODE_CTR:
                        $this->mode = 'ctr';
                        break;
                    case CRYPT_DES_MODE_CFB:
                        $this->paddable = true;
                        $this->mode = 'ncfb';
                        break;
                    case CRYPT_DES_MODE_OFB:
                        $this->mode = MCRYPT_MODE_NOFB;
                        break;
                    case CRYPT_DES_MODE_CBC:
                    default:
                        $this->paddable = true;
                        $this->mode = MCRYPT_MODE_CBC;
                }

                break;
            default:
                $this->des = array(
                    new Crypt_DES(CRYPT_DES_MODE_ECB),
                    new Crypt_DES(CRYPT_DES_MODE_ECB),
                    new Crypt_DES(CRYPT_DES_MODE_ECB)
                );

                // we're going to be doing the padding, ourselves, so disable it in the Crypt_DES objects
                $this->des[0]->disablePadding();
                $this->des[1]->disablePadding();
                $this->des[2]->disablePadding();

                switch ($mode) {
                    case CRYPT_DES_MODE_ECB:
                    case CRYPT_DES_MODE_CFB:
                        $this->paddable = true;
                        $this->mode = $mode;
                        break;
                    case CRYPT_DES_MODE_CTR:
                    case CRYPT_DES_MODE_CBC:
                    case CRYPT_DES_MODE_OFB:
                        $this->mode = $mode;
                        break;
                    default:
                        $this->paddable = true;
                        $this->mode = CRYPT_DES_MODE_CBC;
                }
        }
    }

    /**
     * Sets the key.
     *
     * Keys can be of any length.  Triple DES, itself, can use 128-bit (eg. strlen($key) == 16) or
     * 192-bit (eg. strlen($key) == 24) keys.  This function pads and truncates $key as appropriate.
     *
     * DES also requires that every eighth bit be a parity bit, however, we'll ignore that.
     *
     * If the key is not explicitly set, it'll be assumed to be all zero's.
     *
     * @access public
     * @param String $key
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_SWITCH
                    (AST_CONST)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CONST)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (NULL)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CONST))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_CONST)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_CONST)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_CONST)))
                            (NULL))))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_NEW
                                    (
                                        (AST_CONST)))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW
                                    (
                                        (AST_CONST)))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW
                                    (
                                        (AST_CONST)))
                                (NULL))))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_SWITCH
                    (AST_CONST)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CONST)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (NULL)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CONST))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_CONST)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_CONST)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_CONST)))
                            (NULL))))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_NEW
                                    (
                                        (AST_CONST)))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW
                                    (
                                        (AST_CONST)))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW
                                    (
                                        (AST_CONST)))
                                (NULL))))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST))
                            (AST_SWITCH_CASE
                                (AST_CONST)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))
                                    (AST_BREAK
                                        (NULL))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)))))))))))