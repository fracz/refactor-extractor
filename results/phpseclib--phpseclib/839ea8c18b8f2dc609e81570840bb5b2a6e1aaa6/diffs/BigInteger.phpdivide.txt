    function divide($y)
    {
        switch ( MATH_BIGINTEGER_MODE ) {
            case MATH_BIGINTEGER_MODE_GMP:
                $quotient = new Math_BigInteger();
                $remainder = new Math_BigInteger();

                list($quotient->value, $remainder->value) = gmp_div_qr($this->value, $y->value);

                if (gmp_sign($remainder->value) < 0) {
                    $remainder->value = gmp_add($remainder->value, gmp_abs($y->value));
                }

                return array($quotient, $remainder);
            case MATH_BIGINTEGER_MODE_BCMATH:
                $quotient = new Math_BigInteger();
                $remainder = new Math_BigInteger();

                $quotient->value = bcdiv($this->value, $y->value);
                $remainder->value = bcmod($this->value, $y->value);

                if ($remainder->value[0] == '-') {
                    $remainder->value = bcadd($remainder->value, $y->value[0] == '-' ? substr($y->value, 1) : $y->value);
                }

                return array($quotient, $remainder);
        }

        $x = $this->_copy();
        $y = $y->_copy();

        $x_sign = $x->is_negative;
        $y_sign = $y->is_negative;

        $x->is_negative = $y->is_negative = false;

        $diff = $x->compare($y);

        if ( !$diff ) {
            $temp = new Math_BigInteger();
            $temp->value = array(1);
            $temp->is_negative = $x_sign != $y_sign;
            return array($temp, new Math_BigInteger());
        }

        if ( $diff < 0 ) {
            // if $x is negative, "add" $y.
            if ( $x_sign ) {
                $x = $y->subtract($x);
            }
            return array(new Math_BigInteger(), $x);
        }

        // normalize $x and $y as described in HAC 14.23 / 14.24
        // (incidently, i haven't been able to find a definitive example showing that this
        // results in worth-while speedup, but whatever)
        $msb = $y->value[count($y->value) - 1];
        for ($shift = 0; !($msb & 0x2000000); $shift++) {
            $msb <<= 1;
        }
        $x->_lshift($shift);
        $y->_lshift($shift);

        $x_max = count($x->value) - 1;
        $y_max = count($y->value) - 1;

        $quotient = new Math_BigInteger();
        $quotient->value = $this->_array_repeat(0, $x_max - $y_max + 1);

        // $temp = $y << ($x_max - $y_max-1) in base 2**26
        $temp = new Math_BigInteger();
        $temp->value = array_merge($this->_array_repeat(0, $x_max - $y_max), $y->value);

        while ( $x->compare($temp) >= 0 ) {
            // calculate the "common residue"
            $quotient->value[$x_max - $y_max]++;
            $x = $x->subtract($temp);
            $x_max = count($x->value) - 1;
        }

        for ($i = $x_max; $i >= $y_max + 1; $i--) {
            $x_value = array(
                $x->value[$i],
                ( $i > 0 ) ? $x->value[$i - 1] : 0,
                ( $i - 1 > 0 ) ? $x->value[$i - 2] : 0
            );
            $y_value = array(
                $y->value[$y_max],
                ( $y_max > 0 ) ? $y_max - 1 : 0
            );


            $q_index = $i - $y_max - 1;
            if ($x_value[0] == $y_value[0]) {
                $quotient->value[$q_index] = 0x3FFFFFF;
            } else {
                $quotient->value[$q_index] = floor(
                    ($x_value[0] * 0x4000000 + $x_value[1])
                    /
                    $y_value[0]
                );
            }

            $temp = new Math_BigInteger();
            $temp->value = array($y_value[1], $y_value[0]);

            $lhs = new Math_BigInteger();
            $lhs->value = array($quotient->value[$q_index]);
            $lhs = $lhs->multiply($temp);

            $rhs = new Math_BigInteger();
            $rhs->value = array($x_value[2], $x_value[1], $x_value[0]);

            while ( $lhs->compare($rhs) > 0 ) {
                $quotient->value[$q_index]--;

                $lhs = new Math_BigInteger();
                $lhs->value = array($quotient->value[$q_index]);
                $lhs = $lhs->multiply($temp);
            }

            $corrector = new Math_BigInteger();
            $temp = new Math_BigInteger();
            $corrector->value = $temp->value = $this->_array_repeat(0, $q_index);
            $temp->value[] = $quotient->value[$q_index];

            $temp = $temp->multiply($y);

            if ( $x->compare($temp) < 0 ) {
                $corrector->value[] = 1;
                $x = $x->add($corrector->multiply($y));
                $quotient->value[$q_index]--;
            }

            $x = $x->subtract($temp);
            $x_max = count($x->value) - 1;
        }

        // unnormalize the remainder
        $x->_rshift($shift);

        $quotient->is_negative = $x_sign != $y_sign;

        // calculate the "common residue", if appropriate
        if ( $x_sign ) {
            $y->_rshift($shift);
            $x = $y->subtract($x);
        }

        return array($quotient->_normalize(), $x);
    }

    /**
     * Performs modular exponentiation.
     *
     * Here's a quick 'n dirty example:
     * <code>
     * <?php
     *    include('Math/BigInteger.php');
     *
     *    $a = new Math_BigInteger('10');
     *    $b = new Math_BigInteger('20');
     *    $c = new Math_BigInteger('30');
     *
     *    $c = $a->modPow($b, $c);
     *
     *    echo $c->toString(); // outputs 10
     * ?>
     * </code>
     *
     * @param Math_BigInteger $e
     * @param Math_BigInteger $n
     * @return Math_BigInteger
     * @access public
     * @internal The most naive approach to modular exponentiation has very unreasonable requirements, and
     *    and although the approach involving repeated squaring does vastly better, it, too, is impractical
     *    for our purposes.  The reason being that division - by far the most complicated and time-consuming
     *    of the basic operations (eg. +,-,*,/) - occurs multiple times within it.
     *
     *    Modular reductions resolve this issue.  Although an individual modular reduction takes more time
     *    then an individual division, when performed in succession (with the same modulo), they're a lot faster.
     *
     *    The two most commonly used modular reductions are Barrett and Montgomery reduction.  Montgomery reduction,
     *    although faster, only works when the gcd of the modulo and of the base being used is 1.  In RSA, when the
     *    base is a power of two, the modulo - a product of two primes - is always going to have a gcd of 1 (because
     *    the product of two odd numbers is odd), but what about when RSA isn't used?
     *
     *    In contrast, Barrett reduction has no such constraint.  As such, some bigint implementations perform a
     *    Barrett reduction after every operation in the modpow function.  Others perform Barrett reductions when the
     *    modulo is even and Montgomery reductions when the modulo is odd.  BigInteger.java's modPow method, however,
     *    uses a trick involving the Chinese Remainder Theorem to factor the even modulo into two numbers - one odd and
     *    the other, a power of two - and recombine them, later.  This is the method that this modPow function uses.
     *    {@link http://islab.oregonstate.edu/papers/j34monex.pdf Montgomery Reduction with Even Modulus} elaborates.
     */
||||||||    function divide($y)
    {
        switch ( MATH_BIGINTEGER_MODE ) {
            case MATH_BIGINTEGER_MODE_GMP:
                $quotient = new Math_BigInteger();
                $remainder = new Math_BigInteger();

                list($quotient->value, $remainder->value) = gmp_div_qr($this->value, $y->value);

                if (gmp_sign($remainder->value) < 0) {
                    $remainder->value = gmp_add($remainder->value, gmp_abs($y->value));
                }

                return array($quotient, $remainder);
            case MATH_BIGINTEGER_MODE_BCMATH:
                $quotient = new Math_BigInteger();
                $remainder = new Math_BigInteger();

                $quotient->value = bcdiv($this->value, $y->value);
                $remainder->value = bcmod($this->value, $y->value);

                if ($remainder->value[0] == '-') {
                    $remainder->value = bcadd($remainder->value, $y->value[0] == '-' ? substr($y->value, 1) : $y->value);
                }

                return array($quotient, $remainder);
        }

        static $zero;
        if (!isset($zero)) {
            $zero = new Math_BigInteger();
        }

        $x = $this->copy();
        $y = $y->copy();

        $x_sign = $x->is_negative;
        $y_sign = $y->is_negative;

        $x->is_negative = $y->is_negative = false;

        $diff = $x->compare($y);

        if ( !$diff ) {
            $temp = new Math_BigInteger();
            $temp->value = array(1);
            $temp->is_negative = $x_sign != $y_sign;
            return array($temp, new Math_BigInteger());
        }

        if ( $diff < 0 ) {
            // if $x is negative, "add" $y.
            if ( $x_sign ) {
                $x = $y->subtract($x);
            }
            return array(new Math_BigInteger(), $x);
        }

        // normalize $x and $y as described in HAC 14.23 / 14.24
        $msb = $y->value[count($y->value) - 1];
        for ($shift = 0; !($msb & 0x2000000); $shift++) {
            $msb <<= 1;
        }
        $x->_lshift($shift);
        $y->_lshift($shift);

        $x_max = count($x->value) - 1;
        $y_max = count($y->value) - 1;

        $quotient = new Math_BigInteger();
        $quotient->value = $this->_array_repeat(0, $x_max - $y_max + 1);

        // $temp = $y << ($x_max - $y_max-1) in base 2**26
        $temp = new Math_BigInteger();
        $temp->value = array_merge($this->_array_repeat(0, $x_max - $y_max), $y->value);

        while ( $x->compare($temp) >= 0 ) {
            // calculate the "common residue"
            $quotient->value[$x_max - $y_max]++;
            $x = $x->subtract($temp);
            $x_max = count($x->value) - 1;
        }

        for ($i = $x_max; $i >= $y_max + 1; $i--) {
            $x_value = array(
                $x->value[$i],
                ( $i > 0 ) ? $x->value[$i - 1] : 0,
                ( $i > 1 ) ? $x->value[$i - 2] : 0
            );
            $y_value = array(
                $y->value[$y_max],
                ( $y_max > 0 ) ? $y->value[$y_max - 1] : 0
            );

            $q_index = $i - $y_max - 1;
            if ($x_value[0] == $y_value[0]) {
                $quotient->value[$q_index] = 0x3FFFFFF;
            } else {
                $quotient->value[$q_index] = floor(
                    ($x_value[0] * 0x4000000 + $x_value[1])
                    /
                    $y_value[0]
                );
            }

            $temp = new Math_BigInteger();
            $temp->value = array($y_value[1], $y_value[0]);

            $lhs = new Math_BigInteger();
            $lhs->value = array($quotient->value[$q_index]);
            $lhs = $lhs->multiply($temp);

            $rhs = new Math_BigInteger();
            $rhs->value = array($x_value[2], $x_value[1], $x_value[0]);

            while ( $lhs->compare($rhs) > 0 ) {
                $quotient->value[$q_index]--;

                $lhs = new Math_BigInteger();
                $lhs->value = array($quotient->value[$q_index]);
                $lhs = $lhs->multiply($temp);
            }

            $adjust = $this->_array_repeat(0, $q_index);
            $temp = new Math_BigInteger();
            $temp->value = array($quotient->value[$q_index]);
            $temp = $temp->multiply($y);
            $temp->value = array_merge($adjust, $temp->value);

            $x = $x->subtract($temp);

            if ($x->compare($zero) < 0) {
                $temp->value = array_merge($adjust, $y->value);
                $x = $x->add($temp);

                $quotient->value[$q_index]--;
            }

            $x_max = count($x->value) - 1;
        }

        // unnormalize the remainder
        $x->_rshift($shift);

        $quotient->is_negative = $x_sign != $y_sign;

        // calculate the "common residue", if appropriate
        if ( $x_sign ) {
            $y->_rshift($shift);
            $x = $y->subtract($x);
        }

        return array($quotient->_normalize(), $x);
    }

    /**
     * Performs modular exponentiation.
     *
     * Here's a quick 'n dirty example:
     * <code>
     * <?php
     *    include('Math/BigInteger.php');
     *
     *    $a = new Math_BigInteger('10');
     *    $b = new Math_BigInteger('20');
     *    $c = new Math_BigInteger('30');
     *
     *    $c = $a->modPow($b, $c);
     *
     *    echo $c->toString(); // outputs 10
     * ?>
     * </code>
     *
     * @param Math_BigInteger $e
     * @param Math_BigInteger $n
     * @return Math_BigInteger
     * @access public
     * @internal The most naive approach to modular exponentiation has very unreasonable requirements, and
     *    and although the approach involving repeated squaring does vastly better, it, too, is impractical
     *    for our purposes.  The reason being that division - by far the most complicated and time-consuming
     *    of the basic operations (eg. +,-,*,/) - occurs multiple times within it.
     *
     *    Modular reductions resolve this issue.  Although an individual modular reduction takes more time
     *    then an individual division, when performed in succession (with the same modulo), they're a lot faster.
     *
     *    The two most commonly used modular reductions are Barrett and Montgomery reduction.  Montgomery reduction,
     *    although faster, only works when the gcd of the modulo and of the base being used is 1.  In RSA, when the
     *    base is a power of two, the modulo - a product of two primes - is always going to have a gcd of 1 (because
     *    the product of two odd numbers is odd), but what about when RSA isn't used?
     *
     *    In contrast, Barrett reduction has no such constraint.  As such, some bigint implementations perform a
     *    Barrett reduction after every operation in the modpow function.  Others perform Barrett reductions when the
     *    modulo is even and Montgomery reductions when the modulo is odd.  BigInteger.java's modPow method, however,
     *    uses a trick involving the Chinese Remainder Theorem to factor the even modulo into two numbers - one odd and
     *    the other, a power of two - and recombine them, later.  This is the method that this modPow function uses.
     *    {@link http://islab.oregonstate.edu/papers/j34monex.pdf Montgomery Reduction with Even Modulus} elaborates.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL)))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))))))))
                    (AST_RETURN
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CONDITIONAL
                                                (AST_BINARY_OP
                                                    (AST_DIM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (SCALAR))
                                                (AST_CALL
                                                    (
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR)))
                                                (AST_PROP
                                                    (AST_VAR)))))))))
                    (AST_RETURN
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_PROP
                (AST_VAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW)
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_UNARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR))
        (
            (AST_POST_INC
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (SCALAR)))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_POST_DEC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))))
            (AST_WHILE
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (SCALAR))
                (
                    (AST_POST_DEC
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (NULL))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (SCALAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))
                        (AST_POST_DEC
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL)))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))))))))
                    (AST_RETURN
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CONDITIONAL
                                                (AST_BINARY_OP
                                                    (AST_DIM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (SCALAR))
                                                (AST_CALL
                                                    (
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (SCALAR)))
                                                (AST_PROP
                                                    (AST_VAR)))))))))
                    (AST_RETURN
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))))
    (AST_STATIC
        (AST_VAR)
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ASSIGN
            (AST_PROP
                (AST_VAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW)
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_UNARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR))
        (
            (AST_POST_INC
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (SCALAR)))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_POST_DEC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (NULL))))
            (AST_WHILE
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (SCALAR))
                (
                    (AST_POST_DEC
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (NULL))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))
                        (AST_POST_DEC
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))))