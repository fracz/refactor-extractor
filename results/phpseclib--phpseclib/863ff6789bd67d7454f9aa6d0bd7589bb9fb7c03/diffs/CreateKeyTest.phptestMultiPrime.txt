||||||||    public function testMultiPrime()
    {
        RSA::setEngine(RSA::ENGINE_INTERNAL);
        RSA::setSmallestPrime(256);
        extract(RSA::createKey(1024));
        $this->assertInstanceOf('\phpseclib\Crypt\RSA', $privatekey);
        $this->assertInstanceOf('\phpseclib\Crypt\RSA', $publickey);
        $privatekey->setPrivateKeyFormat('PKCS1');
        $this->assertNotEmpty("$privatekey");
        $this->assertNotEmpty("$publickey");
        $this->assertSame($privatekey->getLength(), 1024);
        $this->assertSame($publickey->getLength(), 1024);
        $r = PKCS1::load("$privatekey");
        $this->assertCount(4, $r['primes']);
        // the last prime number could be slightly over. eg. 99 * 99 == 9801 but 10 * 10 = 100. the more numbers you're
        // multiplying the less certain you are to have each of them multiply to an n-bit number
        foreach (array_slice($r['primes'], 0, 3) as $i => $prime) {
            $this->assertSame($prime->getLength(), 256);
        }

        $rsa = new RSA();
        $rsa->load($privatekey->getPrivateKey());
        $signature = $rsa->sign('zzz');
        $rsa->load($rsa->getPublicKey());
        $this->assertTrue($rsa->verify('zzz', $signature));
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_CALL
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ENCAPS_LIST
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ENCAPS_LIST
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ENCAPS_LIST
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR)
                (SCALAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR))))))