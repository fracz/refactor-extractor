    public function testTimerTickCreate()
    {
        $context = new Context();

        $context->set('begin_time', time());
        $context->set('interval', 1000);
        $context->set('tick_name', '侑子姐姐赛高哒');

        $testCase = $this;
        Timer::tick($context->get('interval'), $context->get('tick_name'), function($jobName) use ($context, $testCase) {
            var_dump($jobName);
        });

        $timers = TickTimerManager::getInstance()->show();

        var_dump($timers);

        Timer::clearTickJob($context->get('tick_name'));

        $timers = TickTimerManager::getInstance()->show();

        var_dump($timers);
    }
//
//    public function testTimerTickClear()
//    {
//        $context = new Context();
//
//        $context->set('begin_time', time());
//        $context->set('interval', 3000);
//        $context->set('tick_name', '侑子姐姐赛高哒');
//
//        Timer::tick($context->get('interval'), $context->get('tick_name'), function($jobName) {});
//
//        Timer::clearTickJob($context->get('tick_name'));
//
//        $timer = TickTimerManager::get($context->get('tick_name'));
//
//        $this->assertFalse($timer);
//    }
//
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR)
                    (AST_CLOSURE_VAR))
                (
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_CALL
        (
            (AST_VAR))))||||||||