    public function testRouter()
    {
        $defaultRouteConf = include 'route.php';
        UrlRule::loadRules(__DIR__ . '/routing/');

        $router  = new Router($defaultRouteConf);
        $request = new Request();
        $request->setUrl('http://127.0.0.1:5601');
        list($route, $params) = $router->route($request);

        $this->assertEquals('order/homePage/index', $this->formatRoute($route), 'Routing parse error!');
        $this->assertEquals([], $params, 'Error in routing parameter analysis!');

        $request->setUrl('http://127.0.0.1:5601/detail/E123/1');
        list($route, $params) = $router->route($request);

        $this->assertEquals('order/book/detail', $this->formatRoute($route), 'Routing parse error!');
        $this->assertEquals(['order_no'=>'E123', 'kdt_id'=>1], $params, 'Error in routing parameter analysis!');

        $request->setUrl('http://127.0.0.1:5601/order/book');
        list($route, $params) = $router->route($request);

        $this->assertEquals('order/book/index', $this->formatRoute($route), 'Routing parse error!');
        $this->assertEquals([], $params, 'Error in routing parameter analysis!');
    }

||||||||    public function testRouter()
    {
        $defaultRouteConf = include 'route.php';
        UrlRule::loadRules(__DIR__ . '/routing_new/');
        $router  = new Router($defaultRouteConf);

        $swooleHttpRequest = $this->mockSwooleHttpRequest();
        $request = Request::createFromSwooleHttpRequest($swooleHttpRequest);

        $router->route($request);

        $Dispatcher = new Dispatcher();
        $response = ( $Dispatcher->dispatch($request, new Context()));




        $this->assertEquals('order/homePage/index', $this->formatRoute($route), 'Routing parse error!');
        $this->assertEquals([], $params, 'Error in routing parameter analysis!');

        $request->setUrl('http://127.0.0.1:5601/detail/E123/1');
        list($route, $params) = $router->route($request);

        $this->assertEquals('order/book/detail', $this->formatRoute($route), 'Routing parse error!');
        $this->assertEquals(['order_no'=>'E123', 'kdt_id'=>1], $params, 'Error in routing parameter analysis!');

        $request->setUrl('http://127.0.0.1:5601/order/book');
        list($route, $params) = $router->route($request);

        $this->assertEquals('order/book/index', $this->formatRoute($route), 'Routing parse error!');
        $this->assertEquals([], $params, 'Error in routing parameter analysis!');
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_INCLUDE_OR_EVAL
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (AST_MAGIC_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_INCLUDE_OR_EVAL
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (AST_MAGIC_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_NEW))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_VAR)
            (SCALAR))))