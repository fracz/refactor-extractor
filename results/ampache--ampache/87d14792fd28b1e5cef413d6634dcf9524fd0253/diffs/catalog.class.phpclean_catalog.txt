	public function clean_catalog() {

		/* Define the Arrays we will need */
		$dead_files = array();

		require_once Config::get('prefix') . '/templates/show_clean_catalog.inc.php';
		flush();

		/* Get all songs in this catalog */
		$sql = "SELECT `id`,`file` FROM `song` WHERE `catalog`='$this->id' AND enabled='1'";
		$db_results = Dba::query($sql);

		/* Recurse through files, put @ to prevent errors poping up */
		while ($results = Dba::fetch_assoc($db_results)) {

                        /* Stupid little cutesie thing */
                        $count++;
                        if (!($count%10)) {
				$file = str_replace(array('(',')','\''),'',$results['file']);
			        echo "<script type=\"text/javascript\">";
			        echo "update_txt('" . $count ."','clean_count_" . $this->id . "');";
				echo "update_txt('" . htmlentities($file) . "','clean_dir_" . $this->id . "');";
			        echo "</script>\n";
	                        flush();
                        } //echos song count

			/* Also check the file information */
			$file_info = filesize($results['file']);

			/* If it errors somethings splated, or the files empty */
			if (!file_exists($results['file']) OR $file_info < 1) {

				/* Add Error */
				Error::add('general',"Error File Not Found or 0 Bytes: " . $results['file']);

				/* Add this file to the list for removal from the db */
				$dead_files[] = $results['id'];
			} //if error

		} //while gettings songs

		/* Unfortuantly it has to be done this way
		 * you can't delete a row at the same time you're
		 * doing a select on said table
		 */
		if (count($dead_files)) {
			foreach ($dead_files as $data) {

				$sql = "DELETE FROM `song` WHERE `id`='$data'";
				$db_results = Dba::query($sql);

			} //end foreach

		} // end if dead files

		/* Step two find orphaned Arists/Albums
		 * This finds artists and albums that no
		 * longer have any songs associated with them
		 */
		self::clean($catalog_id);

		/* Return dead files, so they can be listed */
                echo "<script type=\"text/javascript\">";
                echo "update_txt('" . $count ."','clean_count_" . $this->id . "');";
                echo "</script>\n";
		show_box_top();
		echo "<strong>" . _('Catalog Clean Done') . " [" . count($dead_files) . "] " . _('files removed') . "</strong><br />\n";
		echo "<strong>" . _('Optimizing Tables') . "...</strong><br />\n";
		self::optimize_tables();
		show_box_bottom();
		flush();

	} //clean_catalog

	/**
	 * clean_single_song
	 * This function takes the elements of a single song object
	 * And checks to see if those specific elements are now orphaned
	 * this is often used in flagging, and is a faster way then calling
	 * the normal clean functions. The assumption is made that this is
	 * an old song object whoes information has already been updated in the
	 * database
	 */
||||||||	public function clean_catalog() {

		/* Define the Arrays we will need */
		$dead_files = array();

		require_once Config::get('prefix') . '/templates/show_clean_catalog.inc.php';
		flush();

		/* Do a quick check to make sure that the root of the catalog is readable, error if not
		 * this will minimize the loss of catalog data if mount points fail
		 */
		if (!is_readable($this->path)) {
			debug_event('catalog','Catalog path:' . $this->path . ' unreadable, clean failed','1');
			Error::add('general',_('Catalog Root unreadable, stopping clean'));
			Error::display('general');
			return false;
		}


		/* Get all songs in this catalog */
		$sql = "SELECT `id`,`file` FROM `song` WHERE `catalog`='$this->id' AND enabled='1'";
		$db_results = Dba::query($sql);

		/* Recurse through files, put @ to prevent errors poping up */
		while ($results = Dba::fetch_assoc($db_results)) {

                        /* Stupid little cutesie thing */
                        $count++;
                        if (!($count%10)) {
				$file = str_replace(array('(',')','\''),'',$results['file']);
			        echo "<script type=\"text/javascript\">";
			        echo "update_txt('" . $count ."','clean_count_" . $this->id . "');";
				echo "update_txt('" . htmlentities($file) . "','clean_dir_" . $this->id . "');";
			        echo "</script>\n";
	                        flush();
                        } //echos song count

			/* Also check the file information */
			$file_info = filesize($results['file']);

			/* If it errors somethings splated, or the files empty */
			if (!file_exists($results['file']) OR $file_info < 1) {

				/* Add Error */
				Error::add('general',"Error File Not Found or 0 Bytes: " . $results['file']);

				/* Add this file to the list for removal from the db */
				$dead_files[] = $results['id'];
			} //if error

		} //while gettings songs

		/* Unfortuantly it has to be done this way
		 * you can't delete a row at the same time you're
		 * doing a select on said table
		 */
		if (count($dead_files)) {
			foreach ($dead_files as $data) {

				$sql = "DELETE FROM `song` WHERE `id`='$data'";
				$db_results = Dba::query($sql);

			} //end foreach

		} // end if dead files

		/* Step two find orphaned Arists/Albums
		 * This finds artists and albums that no
		 * longer have any songs associated with them
		 */
		self::clean($catalog_id);

		/* Return dead files, so they can be listed */
                echo "<script type=\"text/javascript\">";
                echo "update_txt('" . $count ."','clean_count_" . $this->id . "');";
                echo "</script>\n";
		show_box_top();
		echo "<strong>" . _('Catalog Clean Done') . " [" . count($dead_files) . "] " . _('files removed') . "</strong><br />\n";
		echo "<strong>" . _('Optimizing Tables') . "...</strong><br />\n";
		self::optimize_tables();
		show_box_bottom();
		flush();

	} //clean_catalog

	/**
	 * clean_single_song
	 * This function takes the elements of a single song object
	 * And checks to see if those specific elements are now orphaned
	 * this is often used in flagging, and is a faster way then calling
	 * the normal clean functions. The assumption is made that this is
	 * an old song object whoes information has already been updated in the
	 * database
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR))))
        (
            (AST_POST_INC
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ECHO
                            (SCALAR))
                        (AST_CALL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))
                            (SCALAR))
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_STATIC_CALL)
    (AST_CALL)
    (AST_CALL))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR))
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR))))
        (
            (AST_POST_INC
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ECHO
                            (SCALAR))
                        (AST_CALL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR))))
                            (SCALAR))
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_STATIC_CALL)
    (AST_CALL)
    (AST_CALL))