	function get_similar_artists ($n_rep_uml,$n_filter,$n_ignore,$c_mode,$c_count_w,$c_percent_w,$c_distance_l) {
		//strip out just about everything, including whitespace, numbers and weird chars, and then
		//lowercase it
		$name = $this->normalize_name($this->name,$n_rep_uml,$n_filter,$n_ignore);

		//now for a bit of mysql query
		$sql = "SELECT id, name FROM artist WHERE id != '" . sql_escape($this->id) . "'";
		$query = mysql_query($sql, dbh());
		//loop it
		$similar_artists = array();
		while ($r = mysql_fetch_assoc($query)) {
			$artist_name = $this->normalize_name($r['name'],$n_rep_uml,$n_filter,$n_ignore);
			//echo "'" . $r['name'] . "' => '" . $artist_name . "'<br/>\n";
			if ($this->compare_loose($name,$artist_name,$c_mode,$c_count_w,$c_percent_w,$c_distance_l)) {
				//echo "***MATCH***<br/>\n";
				$similar_artists[] = array($r['id'],$r['name']);
			}
		}
		return $similar_artists;
	} // get_similar_artists


	/*!
		@function normalize_name
		@param artist name to normalize
		@param $replace_umlaut wether to replace umlauts and others with the plain letter, default true
		@param $filter what to filter out, defulat /[^a-z ]/
		@param $ignore terms to ignore, default /\s(the|an?)\s/ (name is padded with whitespace beforehand)
		@returns the normalized version of the given artist name, containing only letters and single spaces
	*/
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (NULL)))))))))
    (AST_RETURN
        (AST_VAR)))||||||||