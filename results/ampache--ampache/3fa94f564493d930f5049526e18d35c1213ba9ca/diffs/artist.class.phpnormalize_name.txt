	function normalize_name ($name,$replace_umlaut = NULL, $filter = NULL, $ignore = NULL) {
		if (is_null($replace_umlaut)) $replace_umlaut = true;
		if (is_null($filter)) $filter = "/[^a-z ]/";
		if (is_null($ignore)) $ignore = "/\s(the|an?)\s/";
		if ($replace_umlaut) {
			//convert ümlauts, idea from http://php.net/manual/en/function.str-replace.php#50081
			$umlauts = array("uml","acute","grave","cedil","ring","circ","tilde","lig","slash");
			$name = str_replace($umlauts,"",htmlentities($name));
			//now replace all &.; with .
			$name = preg_replace("/&(.);/","\$1",$name);
			//back to normal
			$name = html_entity_decode($name);
		}
		//lowercase
		$name = strtolower($name);
		//now rip out all the special chars and spaces
		$name = preg_replace($filter,"",$name);
		//now certains terms can be dropped completely
		//we have to add spaces on the sides though
		$name = " " . $name . " ";
		$name = preg_replace($ignore,"",$name);
		//now single spaces
		$name = preg_replace("/\s{2,}/"," ",$name);
		//return
		return trim($name);
	} //normalize_name

	/*!
		@function compare_loose
		@discussion percent and count are ORed together
		@param $name1 artist name
		@param $name2 artist name to compare against
		@param $mode the type of matching to perform, one of line or word, default word
		@param $countwords WORD MODE number of words that must be shared to match, 0 to disable, default 0
		@param $percentwords WORD MODE percentage of words that must be shared to match, 0 to disable, default 50%
		@param $distance LETTER MODE max levenshtein distance to pass as a match
		@return true if given params are similar, false if not
	*/
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))||||||||