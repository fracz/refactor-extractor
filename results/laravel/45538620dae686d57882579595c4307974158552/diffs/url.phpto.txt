	public static function to($url = '', $https = false)
	{
		if (filter_var($url, FILTER_VALIDATE_URL) !== false) return $url;

		// First, we need to build the base URL for the application, as well as handle
		// the generation of links using SSL. It is possible for the developer to disable
		// the generation of SSL links throughout the application, making it more
		// convenient to create applications without SSL on the development box.
		$base = Config::get('application.url').'/'.Config::get('application.index');

		if ($https and Config::get('application.ssl'))
		{
			$base = preg_replace('~http://~', 'https://', $base, 1);
		}

		return rtrim($base, '/').'/'.ltrim($url, '/');
	}

	/**
	 * Generate an application URL with HTTPS.
	 *
	 * @param  string  $url
	 * @return string
	 */
||||||||	public static function to($url = '', $https = false)
	{
		if (filter_var($url, FILTER_VALIDATE_URL) !== false) return $url;

		// First, we build the base URL for the application, as well as handle the generation
		// of links using SSL. It is possible for the developer to disable the generation
		// of SSL links throughout the application, making it more convenient to create
		// applications without SSL on the development box.
		$base = Config::$items['application']['url'].'/'.Config::$items['application']['index'];

		if ($https and Config::$items['application']['ssl'])
		{
			$base = preg_replace('~http://~', 'https://', $base, 1);
		}

		return rtrim($base, '/').'/'.ltrim($url, '/');
	}

	/**
	 * Generate an application URL with HTTPS.
	 *
	 * @param  string  $url
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (SCALAR))
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_DIM
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (AST_DIM
                (AST_DIM
                    (AST_STATIC_PROP)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_DIM
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR))))))