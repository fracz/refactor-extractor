	public function call()
	{
		return ( ! is_null($closure = $this->closure())) ? call_user_func_array($closure, $this->parameters) : null;
	}

	/**
	 * Extract the route closure from the route.
	 *
	 * @return Closure|null
	 */
||||||||	public function call()
	{
		// If the value defined for a route is a Closure, we simply call the closure with the
		// route's parameters and return the response.
		if ($this->callback instanceof Closure)
		{
			return call_user_func_array($this->callback, $this->parameters);
		}

		// Otherwise, we will assume the route is an array and will return the first value with
		// a key of "do", or the first instance of a Closure. If the value is a string, the route
		// is delegating the responsibility for handling the request to a controller.
		elseif (is_array($this->callback))
		{
			return Arr::first($this->callback, function($key, $value) {return $key == 'do' or $value instanceof Closure;});
		}

		// If a value defined for a route is a string, it means the route is delegating control
		// of the request to a controller. If that is the case, we will simply return the string
		// for the route caller to parse and delegate.
		elseif (is_string($this->callback))
		{
			return $this->callback;
		}
	}

	/**
	 * Get an array of filter names defined for the route.
	 *
	 * @param  string  $name
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                                (NULL)
                                (
                                    (AST_RETURN
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_INSTANCEOF
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR)))))))