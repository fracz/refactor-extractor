	public function render()
	{
		$this->composer->compose($this);

		// All nested views and responses are evaluated before the main view. This allows
		// the assets used by these views to be added to the asset container before the
		// main view is evaluated and dumps the links to the assets.
		foreach ($this->data as &$data)
		{
			if ($data instanceof View or $data instanceof Response) $data = $data->render();
		}

		// We don't want the view's contents to be rendered immediately, so we will fire
		// up an output buffer to catch the view output. The output of the view will be
		// rendered automatically later in the request lifecycle.
		ob_start() and extract($this->data, EXTR_SKIP);

		// If the view is a "Blade" view, we need to check the view for modifications
		// and get the path to the compiled view file. Otherwise, we'll just use the
		// regular path to the view.
		$view = (strpos($this->path, BLADE_EXT) !== false) ? $this->compile() : $this->path;

		try { include $view; } catch (Exception $e) { ob_get_clean(); throw $e; }

		return ob_get_clean();
	}

	/**
	 * Compile the Bladed view and return the path to the compiled view.
	 *
	 * @return string
	 */
||||||||	public function render()
	{
		static::compose($this);

		// All nested views and responses are evaluated before the main view. This allows
		// the assets used by these views to be added to the asset container before the
		// main view is evaluated and dumps the links to the assets.
		foreach ($this->data as &$data)
		{
			if ($data instanceof View or $data instanceof Response) $data = $data->render();
		}

		// We don't want the view's contents to be rendered immediately, so we will fire
		// up an output buffer to catch the view output. The output of the view will be
		// rendered automatically later in the request lifecycle.
		ob_start() and extract($this->data, EXTR_SKIP);

		// If the view is a "Blade" view, we need to check the view for modifications
		// and get the path to the compiled view file. Otherwise, we'll just use the
		// regular path to the view.
		$view = (strpos($this->path, BLADE_EXT) !== false) ? $this->compile() : $this->path;

		try { include $view; } catch (Exception $e) { ob_get_clean(); throw $e; }

		return ob_get_clean();
	}

	/**
	 * Compile the Bladed view and return the path to the compiled view.
	 *
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_REF
            (AST_VAR))
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_BINARY_OP
        (AST_CALL)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST)))
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_TRY
        (
            (AST_INCLUDE_OR_EVAL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL)
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_RETURN
        (AST_CALL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_REF
            (AST_VAR))
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_BINARY_OP
        (AST_CALL)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST)))
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_TRY
        (
            (AST_INCLUDE_OR_EVAL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL)
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_RETURN
        (AST_CALL)))