	public static function limit($value, $length = 100, $end = '...')
	{
		if (static::length($value) <= $length) return $value;

		if (function_exists('mb_substr'))
		{
			return mb_substr($value, 0, $length, Config::get('application.encoding')).$end;
		}

		return substr($value, 0, $length).$end;
	}

	/**
	 * Limit the number of words in a string
	 *
	 * <code>
	 *		// Limit the words
	 *		echo Str::limit_chars('This is a sentence.', 3);
	 * 		results in 'This is a...'
	 * </code>
	 *
	 * @param  string  $value
	 * @param  int     $length
	 * @param  string  $end
	 * @return string
	 */
||||||||	public static function limit($value, $limit = 100, $end = '...')
	{
		if (static::length($value) < $limit) return $value;

		$limit = preg_replace('/\s+?(\S+)?$/', '', substr($value, 0, $limit));

		return (static::length($limit) == static::length($value)) ? $value : $limit.$end;
	}

	/**
	 * Limit the number of words in a string
	 *
	 * <code>
	 *		// Returns "This is a..."
	 *		echo Str::words('This is a sentence.', 3);
	 *
	 *		// Limit the number of words and append a custom ending
	 *		echo Str::words('This is a sentence.', 3, '---');
	 * </code>
	 *
	 * @param  string  $value
	 * @param  int     $length
	 * @param  string  $end
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (AST_VAR)
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))))