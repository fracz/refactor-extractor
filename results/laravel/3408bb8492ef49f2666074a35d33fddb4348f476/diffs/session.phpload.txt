	public static function load()
	{
		// -----------------------------------------------------
		// If a valid ID is present, load the session.
		// -----------------------------------------------------
		if ( ! is_null($id = Cookie::get('laravel_session')))
		{
			static::$session = static::driver()->load($id);
		}

		// -----------------------------------------------------
		// If the session is invalid, start a new one.
		// -----------------------------------------------------
		if (is_null($id) or is_null(static::$session) or (time() - static::$session['last_activity']) > (Config::get('session.lifetime') * 60))
		{
			static::$session['id'] = Str::random(40);
			static::$session['data'] = array();
		}

		// -----------------------------------------------------
		// Create a CSRF token for the session if necessary.
		// -----------------------------------------------------
		if ( ! static::has('csrf_token'))
		{
			static::put('csrf_token', Str::random(16));
		}

		static::$session['last_activity'] = time();
	}

	/**
	 * Determine if the session or flash data contains an item.
	 *
	 * @param  string  $key
	 * @return bool
	 */
||||||||	public static function load()
	{
		if ( ! is_null($id = Cookie::get('laravel_session')))
		{
			static::$session = static::driver()->load($id);
		}

		// ---------------------------------------------------------
		// If the session is invalid or expired, start a new one.
		// ---------------------------------------------------------
		if (is_null($id) or is_null(static::$session) or static::expired(static::$session['last_activity']))
		{
			static::$session['id'] = Str::random(40);
			static::$session['data'] = array();
		}

		// ---------------------------------------------------------
		// Create a CSRF token for the session if necessary. This
		// token is used by the Form class and filters to protect
		// against cross-site request forgeries.
		// ---------------------------------------------------------
		if ( ! static::has('csrf_token'))
		{
			static::put('csrf_token', Str::random(16));
		}

		static::$session['last_activity'] = time();
	}

	/**
	 * Determine if a session has expired based on the last activity.
	 *
	 * @param  int  $last_activity
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))))))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_STATIC_PROP))))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL)
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR)))
                    (AST_BINARY_OP
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_ARRAY)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (AST_CALL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))))))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (AST_STATIC_PROP))))
                (AST_STATIC_CALL
                    (
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))
                    (AST_ARRAY)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (AST_CALL)))