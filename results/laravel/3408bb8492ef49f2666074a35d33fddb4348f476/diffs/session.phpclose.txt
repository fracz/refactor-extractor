	public static function close()
	{
		// -----------------------------------------------------
		// Flash the old input to the session and age the flash.
		// -----------------------------------------------------
		static::flash('laravel_old_input', Input::get());

		static::age_flash();

		// -----------------------------------------------------
		// Write the session data to storage.
		// -----------------------------------------------------
		static::driver()->save(static::$session);

		// -----------------------------------------------------
		// Set the session cookie.
		// -----------------------------------------------------
		if ( ! headers_sent())
		{
			$cookie = new Cookie('laravel_session', static::$session['id']);

			if ( ! Config::get('session.expire_on_close'))
			{
				$cookie->lifetime = Config::get('session.lifetime');
			}

			$cookie->path = Config::get('session.path');
			$cookie->domain = Config::get('session.domain');
			$cookie->secure = Config::get('session.https');

			$cookie->send();
		}

		// -----------------------------------------------------
		// Perform session garbage collection (2% chance).
		// -----------------------------------------------------
		if (mt_rand(1, 100) <= 2)
		{
			static::driver()->sweep(time() - (Config::get('session.lifetime') * 60));
		}
	}

	/**
	 * Age the session flash data.
	 *
	 * @return void
	 */
||||||||	public static function close()
	{
		// ---------------------------------------------------------
		// Flash the old input data to the session. This allows
		// the Input::old method to retrieve input from the
		// previous request made by the user.
		// ---------------------------------------------------------
		static::flash('laravel_old_input', Input::get());

		static::age_flash();

		static::driver()->save(static::$session);

		// ---------------------------------------------------------
		// Send the session cookie the browser so we can remember
		// who the session belongs to on subsequent requests.
		// ---------------------------------------------------------
		if ( ! headers_sent())
		{
			$cookie = new Cookie('laravel_session', static::$session['id']);

			$cookie->lifetime = (Config::get('session.expire_on_close')) ? 0 : Config::get('session.lifetime');
			$cookie->path = Config::get('session.path');
			$cookie->domain = Config::get('session.domain');
			$cookie->secure = Config::get('session.https');

			$cookie->send();
		}

		// ---------------------------------------------------------
		// Perform session garbage collection (2% chance).
		// Session garbage collection removes all expired sessions.
		// ---------------------------------------------------------
		if (mt_rand(1, 100) <= 2)
		{
			static::driver()->sweep(time() - (Config::get('session.lifetime') * 60));
		}
	}

	/**
	 * Age the session flash data.
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_STATIC_CALL)
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_STATIC_PROP)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_BINARY_OP
                            (AST_CALL)
                            (AST_BINARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_STATIC_CALL)
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_STATIC_PROP)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONDITIONAL
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_BINARY_OP
                            (AST_CALL)
                            (AST_BINARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR)))))))))