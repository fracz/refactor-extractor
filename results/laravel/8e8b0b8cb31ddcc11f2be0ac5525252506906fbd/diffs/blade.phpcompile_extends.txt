||||||||	protected static function compile_extends($value, $view)
	{
		// If the view doesn't begin with @extends, we don't need to do anything
		// and can simply return the view to be parsed by the rest of Blade's
		// compilers like any other normal Blade view would be compiled.
		if (is_null($view) or ! starts_with($value, '@extends'))
		{
			return $value;
		}

		// First we need to parse the parent template from the extends keyword
		// so we know which parent to render. We will remove the extends
		// from the template after we have extracted the parent.
		$template = static::extract_template($value);

		$path = static::store_extended($value, $view);

		// Once we have stored a copy of the view without the "extends" clause
		// we can load up that stored view and render it. The extending view
		// should only be using "sections", so we don't need the output.
		View::make("path: {$path}", $view->data())->render();

		$parent =  View::make($template);

		// Finally we will make and return the parent view as the output of
		// the compilation. We'll touch the parent to force it to compile
		// when it is rendered so we can make sure we're all fresh.
		touch($parent->path);

		static::log_extension($view, $parent);

		return $parent->render();
	}

	/**
	 * Extract the parent template name from an extending view.
	 *
	 * @param  string  $value
	 * @return string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))