||||||||	protected static function extensions()
	{
		// The entire view extension tree is cached so we can check for expired
		// views anywhere in the tree. This allows us to recompile a child
		// view if any of its parent views change throughout the tree.
		static::$extensions = Cache::get(Blade::cache);

		static::$original = static::$extensions;

		// If no extension tree was present, we need to invalidate every cache
		// since we have no way of knowing which views needs to be compiled
		// since we don't know any of their parent views.
		if (is_null(static::$extensions))
		{
			static::flush();

			static::$extensions = array();
		}

		// We'll hook into the "done" event of Laravel and write out the tree
		// of extensions if it was changed during the course of the request.
		// The tree would change if new templates were rendered, etc.
		Event::listen('laravel.done', function()
		{
			if (Blade::$extensions !== Blade::$original)
			{
				Cache::forever(Blade::cache, Blade::$extensions);
			}
		});
	}

	/**
	 * Determine if a view is "expired" and needs to be re-compiled.
	 *
	 * @param  string  $view
	 * @param  string  $path
	 * @param  string  $compiled
	 * @return bool
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_STATIC_CALL
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_STATIC_PROP))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_STATIC_PROP)))
            (
                (AST_STATIC_CALL)
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_ARRAY)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLOSURE
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (AST_STATIC_PROP))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_STATIC_PROP)))))))))))