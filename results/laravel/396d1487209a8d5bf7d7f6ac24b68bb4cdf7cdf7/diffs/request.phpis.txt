	public static function is($uri)
	{
		if (is_array($uri))
		{
			return (in_array(static::uri(), $uri)) ? true : false;
		}
		else
		{
			return (static::uri() == $uri) ? true : false;
		}
	}

	/**
	 * Get the request method.
	 *
	 * @return string
	 */
||||||||	public static function is()
	{
		$parameters = func_get_args();

		// -------------------------------------------------------
		// If any of the parameters match the URI, return true.
		// -------------------------------------------------------
		if (count($parameters) > 1)
		{
			return in_array(static::uri(), $parameters);
		}

		if (count($parameters) === 1)
		{
			return static::uri() == $parameters[0];
		}

		return false;
	}

	/**
	 * Get the request method.
	 *
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (AST_STATIC_CALL)
                                (AST_VAR)))
                        (AST_CONST)
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_STATIC_CALL)
                            (AST_VAR))
                        (AST_CONST)
                        (AST_CONST)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_STATIC_CALL)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_STATIC_CALL)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_RETURN
        (AST_CONST)))