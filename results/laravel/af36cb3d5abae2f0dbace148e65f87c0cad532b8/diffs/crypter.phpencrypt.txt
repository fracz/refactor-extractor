	public static function encrypt($value)
	{
		// Determine the most appropriate random number generator for the
		// OS and system and environment the application is running on.
		if (defined('MCRYPT_DEV_URANDOM'))
		{
			$randomizer = MCRYPT_DEV_URANDOM;
		}
		elseif (defined('MCRYPT_DEV_RANDOM'))
		{
			$randomizer = MCRYPT_DEV_RANDOM;
		}
		else
		{
			$randomizer = MCRYPT_RAND;
		}

		$iv = mcrypt_create_iv(static::iv_size(), $randomizer);

		return base64_encode($iv.mcrypt_encrypt(static::$cipher, static::key(), $value, static::$mode, $iv));
	}

	/**
	 * Decrypt a string using Mcrypt.
	 *
	 * @param  string  $value
	 * @return string
	 */
||||||||	public static function encrypt($value)
	{
		// Determine the most appropriate random number generator for the
		// OS and system and environment the application is running on.
		if (defined('MCRYPT_DEV_URANDOM'))
		{
			$randomizer = MCRYPT_DEV_URANDOM;
		}
		elseif (defined('MCRYPT_DEV_RANDOM'))
		{
			$randomizer = MCRYPT_DEV_RANDOM;
		}
		else
		{
			$randomizer = MCRYPT_RAND;
		}

		$iv = mcrypt_create_iv(static::iv_size(), $randomizer);

		$value = mcrypt_encrypt(static::$cipher, static::key(), $value, static::$mode, $iv);

		return base64_encode($iv.$value);
	}

	/**
	 * Decrypt a string using Mcrypt.
	 *
	 * @param  string  $value
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL)
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_PROP)
                            (AST_STATIC_CALL)
                            (AST_VAR)
                            (AST_STATIC_PROP)
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_PROP)
                (AST_STATIC_CALL)
                (AST_VAR)
                (AST_STATIC_PROP)
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))))))