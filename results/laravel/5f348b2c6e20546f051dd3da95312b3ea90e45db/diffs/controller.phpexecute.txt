	public function execute($method, $parameters = array())
	{
		// Again, as was the case with route closures, if the controller
		// "before" filters return a response, it will be considered the
		// response to the request and the controller method will not be
		// used to handle the request to the application.
		$response = Filter::run($this->filters('before', $method), array(), true);

		if (is_null($response))
		{
			$response = call_user_func_array(array($this, "action_{$method}"), $parameters);

			// If the controller has specified a layout view. The response
			// returned by the controller method will be bound to that view
			// and the layout will be considered the response.
			if (is_null($response) and ! is_null($this->layout))
			{
				$response = $this->layout;
			}
		}

		if ( ! $response instanceof Response)
		{
			$response = new Response($response);
		}

		// Stringify the response. We need to force the response to be
		// stringed before closing the session, since the developer may
		// be using the session within their views, so we cannot age
		// the session data until the view is rendered.
		$response->content = $response->render();

		Filter::run($this->filters('after', $method), array($response));

		return $response;
	}

	/**
	 * Register filters on the controller's methods.
	 *
	 * Generally, this method will be used in the controller's constructor.
	 *
	 * <code>
	 *		// Set a "foo" after filter on the controller
	 *		$this->filter('before', 'foo');
	 *
	 *		// Set several filters on an explicit group of methods
	 *		$this->filter('after', 'foo|bar')->only(array('user', 'profile'));
	 * </code>
	 *
	 * @param  string|array       $filters
	 * @return Filter_Collection
	 */
||||||||	public function execute($method, $parameters = array())
	{
		// Again, as was the case with route closures, if the controller
		// "before" filters return a response, it will be considered the
		// response to the request and the controller method will not be
		// used to handle the request to the application.
		$response = Filter::run($this->filters('before', $method), array(), true);

		if (is_null($response))
		{
			// The developer may mark the controller as being "RESTful" which
			// indicates that the controller actions are prefixed with the
			// HTTP verb they respond to rather than the word "action".
			if ($this->restful)
			{
				$action = strtolower(Request::method()).'_'.$method;
			}
			else
			{
				$action = "action_{$method}";
			}

			$response = call_user_func_array(array($this, $action), $parameters);

			// If the controller has specified a layout view. The response
			// returned by the controller method will be bound to that view
			// and the layout will be considered the response.
			if (is_null($response) and ! is_null($this->layout))
			{
				$response = $this->layout;
			}
		}

		if ( ! $response instanceof Response)
		{
			$response = new Response($response);
		}

		// Stringify the response. We need to force the response to be
		// stringed before closing the session, since the developer may
		// be using the session within their views, so we cannot age
		// the session data until the view is rendered.
		$response->content = $response->render();

		Filter::run($this->filters('after', $method), array($response));

		return $response;
	}

	/**
	 * Register filters on the controller's methods.
	 *
	 * Generally, this method will be used in the controller's constructor.
	 *
	 * <code>
	 *		// Set a "foo" after filter on the controller
	 *		$this->filter('before', 'foo');
	 *
	 *		// Set several filters on an explicit group of methods
	 *		$this->filter('after', 'foo|bar')->only(array('user', 'profile'));
	 * </code>
	 *
	 * @param  string|array       $filters
	 * @return Filter_Collection
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_ARRAY)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR))
                                    (NULL)))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_ARRAY)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_STATIC_CALL)))
                                        (SCALAR))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL)))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_RETURN
        (AST_VAR)))