	protected static function find($class)
	{
		// After PHP namespaces were introduced, most libaries ditched underscores for
		// namespaces to indicate the class directory hierarchy. We will check for the
		// presence of namespace slashes to determine the directory separator.
		$separator = (strpos($class, '\\') !== false) ? '\\' : '_';

		$library = substr($class, 0, strpos($class, $separator));

		$file = str_replace('\\', '/', $class);

		// If the namespace has been registered as a PSR-0 compliant library, we will
		// load the library according to the PSR-0 naming standards, which state that
		// namespaces and underscores indicate the directory hierarchy of the class.
		if (isset(static::$libraries[$library]))
		{
			return LIBRARY_PATH.str_replace('_', '/', $file).EXT;
		}

		// Next we will search through the common Laravel paths for the class file.
		// The Laravel framework path, along with the libraries and models paths
		// will be searched according to the Laravel class naming standard.
		$lower = strtolower($file);

		foreach (static::$paths as $path)
		{
			if (file_exists($path = $path.$lower.EXT))
			{
				return $path;
			}
		}

		// If we could not find the class file in any of the auto-loaded locations
		// according to the Laravel naming standard, we will search the libraries
		// directory for the class according to the PSR-0 naming standard.
		if (file_exists($path = LIBRARY_PATH.str_replace('_', '/', $file).EXT))
		{
			static::$libraries[] = $library;

			return $path;
		}

		// Since not all controllers will be resolved by the controller resolver,
		// we will do a quick check in the controller directory for the class.
		// For instance, since base controllers would not be resolved by the
		// controller class, we will need to resolve them here.
		if (strpos($class, '_Controller') !== false)
		{
			$controller = str_replace(array('_Controller', '_'), array('', '/'), $class);

			if (file_exists($path = strtolower(CONTROLLER_PATH.$controller.EXT)))
			{
				return $path;
			}
		}
	}

}||||||||	protected static function find($class)
	{
		// First we will look for the class in the hard-coded class mappings, since
		// this is the fastest way to resolve a class name to its associated file.
		// This saves us from having to search through the file system manually.
		if (isset(static::$mappings[$class]))
		{
			return static::$mappings[$class];
		}

		// If the library has been registered as a PSR-0 compliant library, we will
		// load the library according to the PSR-0 naming standards, which state that
		// namespaces and underscores indicate the directory hierarchy of the class.
		if (isset(static::$libraries[static::library($class)]))
		{
			return LIBRARY_PATH.str_replace(array('\\', '_'), '/', $class).EXT;
		}

		// Next we will search through the common Laravel paths for the class file.
		// The Laravel libraries and models directories will be searched according
		// to the Laravel class naming standards.
		$file = strtolower(str_replace('\\', '/', $class));

		foreach (static::$paths as $path)
		{
			if (file_exists($path = $path.$lower.EXT))
			{
				return $path;
			}
		}

		// Since not all controllers will be resolved by the controller resolver,
		// we will do a quick check in the controller directory for the class.
		// For instance, since base controllers would not be resolved by the
		// controller class, we will need to resolve them here.
		if (file_exists($path = static::controller($class)))
		{
			return $path;
		}
	}

	/**
	 * Extract the "library" name from the given class.
	 *
	 * The library name is essentially the namespace, or the string that preceeds
	 * the first PSR-0 separator. PSR-0 states that namespaces or undescores may
	 * be used to indicate the directory structure in which the file resides.
	 *
	 * @param  string  $class
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CONST)))))
                    (
                        (AST_RETURN
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_CONST)))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (NULL))
                    (AST_VAR))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_CONST)
                                                    (AST_VAR))
                                                (AST_CONST)))))))
                        (
                            (AST_RETURN
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CONST)))))
                    (
                        (AST_RETURN
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (AST_VAR))))))