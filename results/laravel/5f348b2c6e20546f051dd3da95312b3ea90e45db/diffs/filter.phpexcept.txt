	public function except($methods)
	{
		$this->except = (array) $methods;
		return $this;
	}

	/**
	 * Set the included controller methods.
	 *
	 * This method is the inverse of the "except" methods. The methods specified
	 * via this method are the only controller methods on which the collection's
	 * filters will be run.
	 *
	 * <code>
	 *		// Specify a filter for only the "index" method
	 *		$this->filter('before', 'auth')->only('index');
	 *
	 *		// Specify a filter for only the "index" and "home" methods
	 *		$this->filter('before', 'auth')->only(array('index', 'home'));
	 * </code>
	 *
	 * @param  array              $methods
	 * @return Filter_Collection
	 */
||||||||	public function except($methods)
	{
		$this->except = (count(func_get_args()) > 1) ? func_get_args() : (array) $methods;
		return $this;
	}

	/**
	 * Set the included controller methods.
	 *
	 * This method is the inverse of the "except" methods. The methods specified
	 * via this method are the only controller methods on which the collection's
	 * filters will be run.
	 *
	 * <code>
	 *		// Specify a filter for only the "index" method
	 *		$this->filter('before', 'auth')->only('index');
	 *
	 *		// Specify a filter for only the "index" and "home" methods
	 *		$this->filter('before', 'auth')->only('index', 'home');
	 * </code>
	 *
	 * @param  array              $methods
	 * @return Filter_Collection
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CAST
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL)))
                (SCALAR))
            (AST_CALL)
            (AST_CAST
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))