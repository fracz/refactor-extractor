	private function wrap($value)
	{
		if (strpos(strtolower($value), ' as ') !== false)
		{
			return $this->wrap_alias($value, $connection);
		}

		$wrap = $this->connection->wrapper();

		return implode('.', array_map(function($segment) use ($wrap) { return ($segment != '*') ? $wrap.$segment.$wrap : $segment; }, explode('.', $value)));
	}

	/**
	 * Wrap an alias in keyword identifiers.
	 *
	 * @param  string      $value
	 * @return string
	 */
||||||||	private function wrap($value)
	{
		if (strpos(strtolower($value), ' as ') !== false)
		{
			return $this->wrap_alias($value);
		}

		$wrap = $this->connection->wrapper();

		foreach (explode('.', $value) as $segment)
		{
			$wrapped[] = ($segment != '*') ? $wrap.$segment.$wrap : $segment;
		}

		return implode('.', $wrapped);
	}

	/**
	 * Wrap an alias in keyword identifiers.
	 *
	 * @param  string      $value
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR))
                            (
                                (AST_RETURN
                                    (AST_CONDITIONAL
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_VAR))
                                            (AST_VAR))
                                        (AST_VAR)))))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)))))