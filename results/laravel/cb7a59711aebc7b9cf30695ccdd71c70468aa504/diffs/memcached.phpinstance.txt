	public static function instance()
	{
		if (is_null(static::$instance))
		{
			if ( ! class_exists('Memcache'))
			{
				throw new \Exception('Attempting to use Memcached, but the Memcached PHP extension is not installed on this server.');
			}

			$memcache = new \Memcache;

			foreach (Config::get('cache.servers') as $server)
			{
				$memcache->addServer($server['host'], $server['port'], true, $server['weight']);
			}

			if ($memcache->getVersion() === false)
			{
				throw new \Exception('Memcached is configured. However, no connections could be made. Please verify your memcached configuration.');
			}

			static::$instance = $memcache;
		}

		return static::$instance;
	}

}||||||||	public static function instance()
	{
		return ( ! is_null(static::$instance)) ? static::$instance : static::$instance = static::connect();
	}

	/**
	 * Connect to the configured Memcached servers.
	 *
	 * @return Memcache
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_STATIC_PROP)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_FOREACH
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_STATIC_PROP)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))
            (AST_STATIC_PROP)
            (AST_ASSIGN
                (AST_STATIC_PROP)
                (AST_STATIC_CALL)))))