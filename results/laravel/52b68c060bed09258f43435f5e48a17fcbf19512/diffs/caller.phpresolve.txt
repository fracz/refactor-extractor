	protected function resolve($controller)
	{
		if ( ! $this->load($controller)) return;

		// If the controller is registered in the IoC container, we will resolve it out
		// of the container. Using constructor injection on controllers via the container
		// allows more flexible and testable development of applications.
		if ($this->container->registered('controllers.'.$controller))
		{
			return $this->container->resolve('controllers.'.$controller);
		}

		// If the controller was not registered in the container, we will instantiate
		// an instance of the controller manually. All controllers are suffixed with
		// "_Controller" to avoid namespacing. Allowing controllers to exist in the
		// global namespace gives the developer a convenient API for using the framework.
		$controller = str_replace(' ', '_', ucwords(str_replace('.', ' ', $controller))).'_Controller';

		return new $controller;
	}

	/**
	 * Load the file for a given controller.
	 *
	 * @param  string  $controller
	 * @return bool
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR)))))))
            (SCALAR)))
    (AST_RETURN
        (AST_NEW
            (AST_VAR))))||||||||