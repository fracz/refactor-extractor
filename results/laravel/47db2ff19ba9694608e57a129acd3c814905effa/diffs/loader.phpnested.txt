	protected function nested($segments)
	{
		// Work backwards through the URI segments until we find the deepest possible
		// matching route directory. Once we find it, we will return those routes.
		foreach (array_reverse($segments, true) as $key => $value)
		{
			if (file_exists($path = $this->nest.implode('/', array_slice($segments, 0, $key + 1)).EXT))
			{
				return require $path;
			}

			// Even if we didn't find a matching file for the segment, we still want to
			// check for a "routes.php" file which could handle the root route and any
			// routes that are impossible to handle in an explicitly named file.
			if (file_exists($path = str_replace('.php', '/routes.php', $path)))
			{
				return require $path;
			}
		}

		return array();
	}

	/**
	 * Get every route defined for the application.
	 *
	 * For fast performance, if the routes have already been loaded once, they will not
	 * be loaded again, and the same routes will be returned on subsequent calls.
	 *
	 * @return array
	 */
||||||||	protected function nested($segments)
	{
		// Work backwards through the URI segments until we find the deepest possible
		// matching route directory. Once we find it, we will return those routes.
		foreach (array_reverse($segments, true) as $key => $value)
		{
			if (file_exists($path = $this->nest.implode('/', array_slice($segments, 0, $key + 1)).EXT))
			{
				return require $path;
			}
		}

		return array();
	}

	/**
	 * Get every route defined for the application.
	 *
	 * For fast performance, if the routes have already been loaded once, they will not
	 * be loaded again, and the same routes will be returned on subsequent calls.
	 *
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR)
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR)))))))
                                    (AST_CONST)))))
                    (
                        (AST_RETURN
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_VAR))))))
                    (
                        (AST_RETURN
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_ARRAY)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR)
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (SCALAR)))))))
                                    (AST_CONST)))))
                    (
                        (AST_RETURN
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_ARRAY)))