	public function paginate($per_page, $columns = array('*'))
	{
		$total = $this->count();

		$paginator = new Paginator(Request::active()->input->get('page', 1), $total, $per_page);

		$paginator->results = $this->skip(($paginator->page - 1) * $per_page)->take($per_page)->get($columns);

		return $paginator;
	}

	/**
	 * Execute the query as a SELECT statement and return the first result.
	 *
	 * @param  array     $columns
	 * @return stdClass
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_CALL))
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR))))
                (
                    (AST_VAR)))
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||