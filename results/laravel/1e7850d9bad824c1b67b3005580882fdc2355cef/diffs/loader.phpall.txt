	public static function all($path = APP_PATH, $reload = false)
	{
		if ( ! is_null(static::$routes) and ! $reload) return static::$routes;

		$routes = array();

		if (file_exists($path.'routes'.EXT))
		{
			$routes = array_merge($routes, require $path.'routes'.EXT);
		}

		if (is_dir($path.'routes'))
		{
			// Since route files can be nested deep within the route directory, we need to
			// recursively spin through the directory to find every file.
			$directoryIterator = new \RecursiveDirectoryIterator($path.'routes');

			$recursiveIterator = new \RecursiveIteratorIterator($directoryIterator, \RecursiveIteratorIterator::SELF_FIRST);

			foreach ($recursiveIterator as $file)
			{
				if (filetype($file) === 'file' and strpos($file, EXT) !== false)
				{
					$routes = array_merge($routes, require $file);
				}
			}
		}

		return static::$routes = $routes;
	}

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_STATIC_PROP))))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_INCLUDE_OR_EVAL
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_CONST)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_CONST)))
                                        (AST_CONST)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_INCLUDE_OR_EVAL
                                                    (AST_VAR)))))))))))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_STATIC_PROP)
            (AST_VAR))))||||||||