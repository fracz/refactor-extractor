||||||||	public static function current()
	{
		if ( ! is_null(static::$uri)) return static::$uri;

		$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

		// Remove the root application URL from the request URI. If the application
		// is nested within a sub-directory of the web document root, this will get
		// rid of all of the the sub-directories from the request URI.
		$uri = static::remove($uri, parse_url(Config::$items['application']['url'], PHP_URL_PATH));

		if (($index = '/'.Config::$items['application']['index']) !== '/')
		{
			$uri = static::remove($uri, $index);
		}

		// Format the final request URI. If there is nothing left, we will just
		// return a single forward slash. Otherwise, we'll remove all of the
		// leading and trailing spaces from the URI before returning it.
		static::$uri = $uri = static::format($uri);

		static::$segments = explode('/', $uri);

		return static::$uri;
	}

	/**
	 * Get a specific segment of the request URI via an one-based index.
	 *
	 * <code>
	 *		// Get the first segment of the request URI
	 *		$segment = URI::segment(1);
	 *
	 *		// Get the second segment of the URI, or return a default value
	 *		$segment = URI::segment(2, 'Taylor');
	 * </code>
	 *
	 * @param  int     $index
	 * @param  mixed   $default
	 * @return string
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))
            (
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (SCALAR))
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ASSIGN
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_STATIC_PROP)))