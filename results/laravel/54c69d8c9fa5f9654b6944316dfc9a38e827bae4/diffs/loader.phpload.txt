	public static function load($class)
	{
		// All Laravel core classes follow a namespace to directory convention. So, we will
		// replace all of the namespace slashes with directory slashes.
		$file = strtolower(str_replace('\\', '/', $class));

		// First, we'll check to determine if an alias exists. If it does, we will define the
		// alias and bail out. Aliases are defined for most developer used core classes.
		if (array_key_exists($class, static::$aliases)) return class_alias(static::$aliases[$class], $class);

		foreach (static::$paths as $path)
		{
			if (file_exists($path = $path.$file.EXT))
			{
				require_once $path;

				return;
			}
		}
	}

	/**
	 * Register a class alias with the auto-loader.
	 *
	 * Note: Aliases are lazy-loaded, so the aliased class will not be included until it is needed.
	 *
	 * @param  string  $alias
	 * @param  string  $class
	 * @return void
	 */
||||||||	public function load($class)
	{
		// All Laravel core classes follow a namespace to directory convention.
		// We will replace all of the namespace slashes with directory slashes.
		$file = strtolower(str_replace('\\', '/', $class));

		// Check to determine if an alias exists. If it does, we will define the
		// alias and bail out. Aliases are defined for most used core classes.
		if (array_key_exists($class, $this->aliases))
		{
			return class_alias($this->aliases[$class], $class);
		}

		foreach ($this->paths as $path)
		{
			if (file_exists($path = $path.$file.EXT))
			{
				require_once $path;

				return;
			}
		}
	}

	/**
	 * Register a class alias with the auto-loader.
	 *
	 * @param  string  $alias
	 * @param  string  $class
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CONST)))))
                    (
                        (AST_INCLUDE_OR_EVAL
                            (AST_VAR))
                        (AST_RETURN
                            (NULL))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CONST)))))
                    (
                        (AST_INCLUDE_OR_EVAL
                            (AST_VAR))
                        (AST_RETURN
                            (NULL))))))))