	protected function zipball($bundle, $url)
	{
		// When installing a bundle from a Zip archive, we'll first clone
		// down the bundle zip into the bundles "working" directory so
		// we have a spot to do all of our bundle extration work.
		$target = path('storage').'work/laravel-bundle.zip';

		File::put($target, file_get_contents($url));

		$zip = new \ZipArchive;

		$zip->open($target);

		// Once we have the Zip archive, we can open it and extract it
		// into the working directory. By convention, we expect the
		// archive to contain one root directory, and all of the
		// bundle contents should be stored in that directory.
		$zip->extractTo(path('storage').'work');

		$latest = File::latest(dirname($target));

		// Once we have the latest modified directory, we should be
		// able to move its contents over into the bundles folder
		// so the bundle will be usable by the develoepr.
		$path = $this->path($bundle);

		File::mvdir($latest->getRealPath(), path('bundle').$path);

		@unlink($target);
	}

	/**
	 * Return the path for a given bundle.
	 *
	 * @param  array   $bundle
	 * @return string
	 */
||||||||	protected function zipball($bundle, $url)
	{
		// When installing a bundle from a Zip archive, we'll first clone
		// down the bundle zip into the bundles "working" directory so
		// we have a spot to do all of our bundle extration work.
		$target = path('storage').'work/laravel-bundle.zip';

		File::put($target, file_get_contents($url));

		$zip = new \ZipArchive;

		$zip->open($target);

		// Once we have the Zip archive, we can open it and extract it
		// into the working directory. By convention, we expect the
		// archive to contain one root directory, and all of the
		// bundle contents should be stored in that directory.
		$zip->extractTo(path('storage').'work');

		$latest = File::latest(dirname($target));

		@chmod($latest->getRealPath(), 0777);

		// Once we have the latest modified directory, we should be
		// able to move its contents over into the bundles folder
		// so the bundle will be usable by the develoepr.
		$path = $this->path($bundle);

		File::mvdir($latest->getRealPath(), path('bundle').$path);

		@unlink($target);
	}

	/**
	 * Return the path for a given bundle.
	 *
	 * @param  array   $bundle
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_VAR))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_VAR))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_VAR)))))