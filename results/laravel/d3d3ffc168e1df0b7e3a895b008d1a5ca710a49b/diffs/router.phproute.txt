	public static function route($method, $uri)
	{
		// All route URIs begin with the request method and have a leading
		// slash before the URI. We'll put the request method and URI in
		// that format so we can easily check for literal matches.
		$destination = $method.' /'.trim($uri, '/');

		if (array_key_exists($destination, static::$routes))
		{
			return new Route($destination, static::$routes[$destination], array());
		}

		// If we can't find a literal match, we'll iterate through all of
		// the registered routes attempting to find a matching route that
		// uses wildcards or regular expressions.
		if ( ! is_null($route = static::search($destination)))
		{
			return $route;
		}

		// If there are no literal matches and no routes that match the
		// request, we'll use convention to search for a controller to
		// handle the request. If no controller can be found, the 404
		// error response will be returned by the application.
		$segments = array_diff(explode('/', trim($uri, '/')), array(''));

		return static::controller(DEFAULT_BUNDLE, $method, $destination, $segments);
	}

	/**
	 * Attempt to match a destination to one of the registered routes.
	 *
	 * @param  string  $destination
	 * @return Route
	 */
||||||||	public static function route($method, $uri)
	{
		// All route URIs begin with the request method and have a leading
		// slash before the URI. We'll put the request method and URI in
		// that format so we can easily check for literal matches.
		$destination = $method.' /'.trim($uri, '/');

		if (array_key_exists($destination, static::$routes))
		{
			return new Route($destination, static::$routes[$destination], array());
		}

		// If we can't find a literal match, we'll iterate through all of
		// the registered routes attempting to find a matching route that
		// uses wildcards or regular expressions.
		foreach (static::$routes as $route => $action)
		{
			if (strpos($route, '(') !== false)
			{
				$pattern = '#^'.static::wildcards($route).'$#';

				if (preg_match($pattern, $destination, $parameters))
				{
					return new Route($route, $action, array_slice($parameters, 1));
				}
			}
		}

		// If there are no literal matches and no routes that match the
		// request, we'll use convention to search for a controller to
		// handle the request. If no controller can be found, the 404
		// error response will be returned.
		$segments = array_diff(explode('/', trim($uri, '/')), array(''));

		return static::controller(DEFAULT_BUNDLE, $method, $destination, $segments);
	}

	/**
	 * Attempt to find a controller for the incoming request.
	 *
	 * @param  string  $bundle
	 * @param  string  $method
	 * @param  string  $destination
	 * @param  array   $segments
	 * @return Route
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_ARRAY)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_CONST)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_ARRAY)))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR)))
                                (
                                    (AST_RETURN
                                        (AST_NEW
                                            (
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR))))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_CONST)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))