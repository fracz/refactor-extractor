	public static function singular($value)
	{
        if (array_key_exists($value, static::$singular_cache))
        {
           return static::$singular_cache[$value];
        }

        if (in_array(Str::lower($value), static::$uncountable))
        {
        	return static::$singular_cache[$value] = $value;
        }

        foreach (static::$irregular as $irregular => $pattern)
        {
            $pattern = '/'.$pattern.'$/i';

            if (preg_match($pattern, $value))
            {
				return static::$singular_cache[$value] = preg_replace($pattern, $irregular, $value);
            }
        }

        foreach (static::$singular as $pattern => $singular)
        {
            if (preg_match($pattern, $value))
            {
				return static::$singular_cache[$value] = preg_replace($pattern, $singular, $value);
            }
        }

        return static::$singular_cache[$value] = $value;
	}

	/**
	 * Get the plural form of a word if the count is greater than zero.
	 *
	 * @param  string  $value
	 * @param  int     $count
	 * @return string
	 */
||||||||	public static function singular($value)
	{
        if (array_key_exists($value, static::$singular_cache))
        {
           return static::$singular_cache[$value];
        }

        if (in_array(strtolower($value), static::$uncountable))
        {
        	return static::$singular_cache[$value] = $value;
        }

        foreach (static::$irregular as $irregular => $pattern)
        {
            $pattern = '/'.$pattern.'$/i';

            if (preg_match($pattern, $value))
            {
				return static::$singular_cache[$value] = preg_replace($pattern, $irregular, $value);
            }
        }

        foreach (static::$singular as $pattern => $singular)
        {
            if (preg_match($pattern, $value))
            {
				return static::$singular_cache[$value] = preg_replace($pattern, $singular, $value);
            }
        }

        return static::$singular_cache[$value] = $value;
	}

	/**
	 * Get the plural form of a word if the count is greater than zero.
	 *
	 * @param  string  $value
	 * @param  int     $count
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_DIM
                (AST_STATIC_PROP)
                (AST_VAR))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_STATIC_PROP)))
            (
                (AST_RETURN
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_DIM
                (AST_STATIC_PROP)
                (AST_VAR))
            (AST_VAR))))