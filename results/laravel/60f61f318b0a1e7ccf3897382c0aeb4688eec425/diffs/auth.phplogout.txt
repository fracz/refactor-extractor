	public static function logout()
	{
		// We will call the "logout" closure first, which gives the developer
		// the chance to do any clean-up or before the user is logged out of
		// the application. No action is taken by default.
		call_user_func(Config::get('auth.logout'), static::user());

		static::$user = null;

		$config = Config::get('session');

		extract($config, EXTR_SKIP);

		// When forgetting the cookie, we need to also pass in the path and
		// domain that would have been used when the cookie was originally
		// set by the framework, otherwise it will not be deleted.
		$cookie = Config::get('auth.cookie');

		Cookie::forget($cookie, $path, $domain, $secure);

		Session::forget(Auth::user_key);
	}

}||||||||	public static function logout()
	{
		array_walk(static::$drivers, function($d) { $d->logout(); });
	}

	/**
	 * Register a third-party authentication driver.
	 *
	 * @param  string   $driver
	 * @param  Closure  $resolver
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_CLASS_CONST
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (AST_STATIC_PROP)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)))))))