	public static function load($class)
	{
		// Most of the core classes are aliases for convenient access in spite of
		// the namespace. If an alias is defined for the class, we will load the
		// alias and bail out of the auto-load method.
		if (array_key_exists($class, Config::$items['application']['aliases']))
		{
			return class_alias(Config::$items['application']['aliases'][$class], $class);
		}

		$file = str_replace('\\', '/', $class);

		$namespace = substr($class, 0, strpos($class, '\\'));

		// If the class namespace exists in the libraries array, it means that the
		// library is PSR-0 compliant, and we will load it following those standards.
		// This allows us to add many third-party libraries to an application and be
		// able to auto-load them automatically.
		if (array_key_exists($namespace, static::$libraries))
		{
			require LIBRARY_PATH.str_replace('_', '/', $file);
		}

		foreach (static::$paths as $path)
		{
			if (file_exists($path = $path.strtolower($file).EXT))
			{
				require $path;

				return;
			}
		}

		// If the namespace exists in the libraries directory, we will assume the
		// library is PSR-0 compliant, and will add the namespace to the array of
		// libraries and load the class accordingly.
		if (is_dir(LIBRARY_PATH.$namespace))
		{
			static::$libraries[] = $namespace;

			require LIBRARY_PATH.str_replace('_', '/', $file);
		}
	}

}||||||||	public function load($class)
	{
		// Most of the core classes are aliases for convenient access in spite of
		// the namespace. If an alias is defined for the class, we will load the
		// alias and bail out of the auto-load method.
		if (array_key_exists($class, Config::$items['application']['aliases']))
		{
			return class_alias(Config::$items['application']['aliases'][$class], $class);
		}

		if ( ! is_null($path = $this->find($class)))
		{
			require $path;

			$this->mappings[$class] = $path;
		}
	}

	/**
	 * Find the file associated with a given class name.
	 *
	 * @param  string  $class
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (AST_CONST)))))
                    (
                        (AST_INCLUDE_OR_EVAL
                            (AST_VAR))
                        (AST_RETURN
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (NULL))
                    (AST_VAR))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_STATIC_PROP)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR))))))