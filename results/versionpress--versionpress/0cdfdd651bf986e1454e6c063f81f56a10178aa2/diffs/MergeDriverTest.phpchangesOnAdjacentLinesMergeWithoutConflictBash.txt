    public function changesOnAdjacentLinesMergeWithoutConflictBash() {
        if (DIRECTORY_SEPARATOR == '\\') {
            $this->markTestSkipped('changesOnAdjacentLinesMergeWithoutConflictUsingBash is skipped (no Bash on Windows).');
        }
        MergeDriverInstaller::installMergeDriver(self::$initializationDir);
        MergeDriverTestUtils::switchDriverToBash();

        $this->prepareDataWithChangedAdjacentLines();

        $this->assertEquals(0, MergeDriverTestUtils::getProcessExitCode('git merge test-branch'), 'Merge returned unexpected exit code.');

    }

    /**
     * @test
     */
||||||||    public function changesOnAdjacentLinesMergeWithoutConflictBash() {

        if (DIRECTORY_SEPARATOR == '\\') {
            $this->markTestSkipped('No Bash on Windows.');
        }

        $this->runAdjacentLineMergeTest('bash');

    }


    /**
     * @test
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (AST_STATIC_PROP)))
    (AST_STATIC_CALL)
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))