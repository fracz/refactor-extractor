    private function prepareTestData($customMessage = null) {

        MergeDriverTestUtils::createIniFileAndCommit('10-02-16 08:00:00', 'file.ini', 'Initial commit to Ancestor');

        MergeDriverTestUtils::runProcess('git checkout -b test-branch');
        $branchDate = '17-02-16 19:19:23';
        if ($customMessage == null) {
            MergeDriverTestUtils::createIniFileAndCommit($branchDate, 'file.ini', 'Commit to branch');
        } else {
            MergeDriverTestUtils::createIniFileAndCommit($branchDate, 'file.ini', 'Commit to branch', $customMessage);
        }

        MergeDriverTestUtils::runProcess('git checkout master');
        MergeDriverTestUtils::createIniFileAndCommit('15-02-16 12:00:11', 'file.ini', 'Commit to master', 'Custom content in master');
    }


}||||||||    private function prepareTestData($customMessage = null) {

        $originDate = '10-02-16 08:00:00';
        $masterDate = '15-02-16 12:00:11';
        $branchDate = '17-02-16 19:19:23';

        MergeDriverTestUtils::createIniFileAndCommit($originDate, 'file.ini', 'Initial commit to Ancestor');
        MergeDriverTestUtils::runProcess('git checkout -b test-branch');

        if ($customMessage == null) {
            MergeDriverTestUtils::createIniFileAndCommit($branchDate, 'file.ini', 'Commit to branch');
        } else {
            MergeDriverTestUtils::createIniFileAndCommit($branchDate, 'file.ini', 'Commit to branch', $customMessage);
        }

        MergeDriverTestUtils::runProcess('git checkout master');
        MergeDriverTestUtils::createIniFileAndCommit($masterDate, 'file.ini', 'Commit to master', 'Custom content in master');
    }


}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)
            (SCALAR))))