    public static function uninstallMergeDriver() {
        $gitconfigFilePath = VP_PROJECT_ROOT . '/.git/config';
        $gitattributesPath = VP_PROJECT_ROOT . '/.gitattributes';
        if (file_exists($gitattributesPath)) {
            $gitAttributes = file_get_contents($gitattributesPath);
            $gitAttributes = preg_replace('/(.*)merge=vp-ini/', '', $gitAttributes);
            file_put_contents($gitattributesPath, $gitAttributes);
        }

        $gitConfig = file_get_contents($gitconfigFilePath);
        //https://regex101.com/r/eJ4rJ5/3
        $mergeDriverRegex = "/(\\[merge \\\"vp\\-ini\\\"\\]\\n)([^\\[]*)/";
        $gitConfig = preg_replace($mergeDriverRegex, '', $gitConfig, 1);
        file_put_contents($gitconfigFilePath, $gitConfig);
    }


}||||||||    public static function uninstallMergeDriver($rootDir) {
        $gitconfigPath = $rootDir . '/.git/config';
        $gitattributesPath = $rootDir . '/.gitattributes';

        if (file_exists($gitattributesPath)) {
            $gitAttributes = file_get_contents($gitattributesPath);
            $gitAttributes = preg_replace('/(.*)merge=vp-ini/', '', $gitAttributes);
            file_put_contents($gitattributesPath, $gitAttributes);
        }

        $gitConfig = file_get_contents($gitconfigPath);
        //https://regex101.com/r/eJ4rJ5/3
        $mergeDriverRegex = "/(\\[merge \\\"vp\\-ini\\\"\\]\\n)([^\\[]*)/";
        $gitConfig = preg_replace($mergeDriverRegex, '', $gitConfig, 1);
        file_put_contents($gitconfigPath, $gitConfig);
    }

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR))))