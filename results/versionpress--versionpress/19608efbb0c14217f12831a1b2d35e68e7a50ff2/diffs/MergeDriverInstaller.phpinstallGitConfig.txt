    private static function installGitConfig($directory) {
        $gitconfigFilePath = VP_PROJECT_ROOT . '/.git/config';
        if (strpos(file_get_contents($gitconfigFilePath), '[merge "vp-ini"]') !== false) {
            return;
        }
        $gitconfig = file_get_contents($directory . '/gitconfig.tpl');


        if (DIRECTORY_SEPARATOR == '/') {
            $mergeDriverFile = 'ini-merge.sh';
            $mergeDriverScript = VERSIONPRESS_PLUGIN_DIR . '/src/Git/merge-drivers/' . $mergeDriverFile;
            chmod(str_replace('\\', '/', $mergeDriverScript), 0774);
        } else {
            $mergeDriverFile = 'ini-merge.php';
            $mergeDriverScript = '"' . PHP_BINARY . '" "' . VERSIONPRESS_PLUGIN_DIR . '/src/Git/merge-drivers/' . $mergeDriverFile . '"';
        }
        $gitconfigVariables = array(
            'merge-driver-script' => str_replace('\\', '/', $mergeDriverScript)
        );

        $gitconfig = StringUtils::fillTemplateString($gitconfigVariables, $gitconfig);
        file_put_contents($gitconfigFilePath, $gitconfig, FILE_APPEND);

    }

||||||||    private static function installGitConfig($rootDir, $pluginDir, $driver) {

        $gitconfigPath = $rootDir . '/.git/config';
        if (strpos(file_get_contents($gitconfigPath), '[merge "vp-ini"]') !== false) {
            return;
        }
        $gitconfigContents = file_get_contents($pluginDir . '/src/Initialization/gitconfig.tpl');

        $mergeDriverScript = '';
        if ($driver == 'bash' || ($driver == 'auto' && DIRECTORY_SEPARATOR == '/')) {
            $mergeDriverScript = $pluginDir . '/src/Git/merge-drivers/ini-merge.sh';
            chmod($mergeDriverScript, 0750);
        }

        if ($driver == 'php' || ($driver == 'auto' && DIRECTORY_SEPARATOR == '\\')) {
            $mergeDriverScript = '"' . PHP_BINARY . '" "' . $pluginDir . '/src/Git/merge-drivers/ini-merge.php' . '"';
        }

        $gitconfigVariables = array(
            'merge-driver-script' => str_replace('\\', '/', $mergeDriverScript)
        );

        $gitconfigContents = StringUtils::fillTemplateString($gitconfigVariables, $gitconfigContents);
        file_put_contents($gitconfigPath, $gitconfigContents, FILE_APPEND);

    }

    /**
     * Uninstalls a merge driver - removes 'vp-ini' sections from both .gitattributes
     * and .git/config.
     *
     * @param string $rootDir
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CONST))
                                        (SCALAR))
                                    (AST_CONST))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CONST))
                                    (SCALAR))
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST))))