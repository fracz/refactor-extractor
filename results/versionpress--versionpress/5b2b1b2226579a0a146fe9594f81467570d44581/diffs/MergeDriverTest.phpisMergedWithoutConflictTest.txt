    public function isMergedWithoutConflictTest() {

        self::doInRepository(function () {
            $this->fillFakeFileAndCommit(ORIGIN_DATE, 'Initial commit to Ancestor');

            $this->runProcess(CHECKOUT_BRANCH_CMD);
            $this->fillFakeFileAndCommit(BRANCH_DATE, 'Commit to branch');

            $this->runProcess(CHECKOUT_MASTER_CMD);
            $this->fillFakeFileAndCommit(MASTER_DATE, 'Commit to master');

            $this->assertEquals(0, $this->runProcess(MERGE_CMD));
        }, true);
    }

    /**
     * @test
     */
||||||||    public function isMergedWithoutConflictTest() {

            MergeDriverTestUtils::installMergeDriver(self::$initializationDir);

            MergeDriverTestUtils::fillFakeFileAndCommit(ORIGIN_DATE, 'Initial commit to Ancestor');

            MergeDriverTestUtils::runProcess(CHECKOUT_BRANCH_CMD);
            MergeDriverTestUtils::fillFakeFileAndCommit(BRANCH_DATE, 'Commit to branch');

            MergeDriverTestUtils::runProcess(CHECKOUT_MASTER_CMD);
            MergeDriverTestUtils::fillFakeFileAndCommit(MASTER_DATE, 'Commit to master');

            $this->assertEquals(0, MergeDriverTestUtils::runProcess(MERGE_CMD));

    }

    /**
     * @test
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (AST_CLOSURE
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)))))))
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (AST_STATIC_PROP)))
    (AST_STATIC_CALL
        (
            (AST_CONST)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_STATIC_CALL
        (
            (AST_CONST)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_STATIC_CALL
        (
            (AST_CONST)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (AST_CONST))))))