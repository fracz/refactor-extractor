    public static function installGitMergeDriver($directory) {
        $gitconfigFilePath = VP_PROJECT_ROOT . '/.git/config';
        if (strpos(file_get_contents($gitconfigFilePath), '[merge "vp-ini"]') !== false) {
            return;
        }
        $gitconfig = file_get_contents($directory . '/gitconfig.tpl');
        $mergeDriverScript = VERSIONPRESS_PLUGIN_DIR . '/src/Git/MergeDrivers/ini-merge.php';

        $gitconfigVariables = array(
            'merge-driver-script' => $mergeDriverScript,
            'php-binary-path' => PHP_BINDIR . '/php'
        );

        $gitconfig = StringUtils::fillTemplateString($gitconfigVariables, $gitconfig);
        file_put_contents($gitconfigFilePath, $gitconfig, FILE_APPEND);
        chmod($mergeDriverScript, 0774);

    }


}||||||||    public static function installGitMergeDriver($directory) {
        $gitconfigFilePath = VP_PROJECT_ROOT . '/.git/config';
        if (strpos(file_get_contents($gitconfigFilePath), '[merge "vp-ini"]') !== false) {
            return;
        }
        $gitconfig = file_get_contents($directory . '/gitconfig.tpl');
        $mergeDriverScript = VERSIONPRESS_PLUGIN_DIR . '/src/Git/MergeDrivers/ini-merge.php';

        $gitconfigVariables = array(
            'merge-driver-script' => '"' . str_replace('\\', '/', $mergeDriverScript) . '"',
            'php-binary-path' => '"' . str_replace('\\', '/', PHP_BINARY) . '"'
        );

        $gitconfig = StringUtils::fillTemplateString($gitconfigVariables, $gitconfig);
        file_put_contents($gitconfigFilePath, $gitconfig, FILE_APPEND);
        chmod($mergeDriverScript, 0774);

    }


}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_VAR))))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_CONST))))
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR))))