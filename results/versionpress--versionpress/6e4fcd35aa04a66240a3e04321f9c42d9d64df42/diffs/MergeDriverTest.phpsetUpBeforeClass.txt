    public static function setUpBeforeClass() {
        self::$initializationDir = '../../src/Initialization';
        self::$repositoryDir = __DIR__ . '/repository';

        define('VERSIONPRESS_PLUGIN_DIR', self::$repositoryDir); // fake
        define('VERSIONPRESS_MIRRORING_DIR', self::$repositoryDir); // fake
        define('VP_PROJECT_ROOT', self::$repositoryDir); // fake
        define('BRANCH_NAME', 'test-branch');

        define('CHECKOUT_BRANCH_CMD', 'git checkout -b ' . BRANCH_NAME);
        define('CHECKOUT_MASTER_CMD', 'git checkout master');
        define('MERGE_CMD', 'git merge ' . BRANCH_NAME);

        define('ORIGIN_DATE', '10-02-16 08:00:00');
        define('MASTER_DATE', '15-02-16 12:00:11');
        define('BRANCH_DATE', '17-02-16 19:19:23');

    }

||||||||    public static function setUpBeforeClass() {
        self::$initializationDir = '../../src/Initialization';
        self::$repositoryDir = __DIR__ . '/repository';

        define('VERSIONPRESS_PLUGIN_DIR', self::$repositoryDir); // fake
        define('VERSIONPRESS_MIRRORING_DIR', self::$repositoryDir); // fake
        define('VP_PROJECT_ROOT', self::$repositoryDir); // fake
        self::$branchName = 'test-branch';

        self::$checkoutBranchCmd = 'git checkout -b ' . self::$branchName;
        self::$checkoutMasterCmd = 'git checkout master';
        self::$mergeCmd = 'git merge ' . self::$branchName;

        self::$originDate = '10-02-16 08:00:00';
        self::$masterDate = '15-02-16 12:00:11';
        self::$branchDate = '17-02-16 19:19:23';

    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_MAGIC_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONST))))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONST))))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_MAGIC_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR)))