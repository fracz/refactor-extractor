    private function convertChangeInfo($changeInfo)
    {
        $change = [];

        if ($changeInfo instanceof TrackedChangeInfo) {
            $change['type'] = $changeInfo->getScope();
            $change['action'] = $changeInfo->getAction();
            $change['tags'] = $changeInfo->getCustomTags();
        }

        if ($changeInfo instanceof EntityChangeInfo) {
            $change['name'] = $changeInfo->getEntityId();
        }

        if ($changeInfo instanceof PluginChangeInfo) {
            $pluginTags = $changeInfo->getCustomTags();
            $pluginName = $pluginTags[PluginChangeInfo::PLUGIN_NAME_TAG];
            $change['name'] = $pluginName;
        }

        if ($changeInfo instanceof ThemeChangeInfo) {
            $themeTags = $changeInfo->getCustomTags();
            $themeName = $themeTags[ThemeChangeInfo::THEME_NAME_TAG];
            $change['name'] = $themeName;
        }

        if ($changeInfo instanceof WordPressUpdateChangeInfo) {
            $change['name'] = $changeInfo->getNewVersion();
        }

        if ($changeInfo instanceof RevertChangeInfo) {
            $commit = $this->gitRepository->getCommit($changeInfo->getCommitHash());
            $change['tags']['VP-Commit-Details'] = [
                'message' => $commit->getMessage()->getUnprefixedSubject(),
                'date' => $commit->getDate()->format(\DateTime::ISO8601)
            ];
        }

        return $change;
    }

    /**
     * @param Commit $commit
     * @param bool $skipVpdbFiles
     * @return array
     */
||||||||    private function convertChangeInfo($changeInfo)
    {
        if ($changeInfo instanceof UntrackedChangeInfo) {
            return null;
        }

        /** @var TrackedChangeInfo $changeInfo */

        $change = [
            'type' => $changeInfo->getScope(),
            'action' => $changeInfo->getAction(),
            'tags' => $changeInfo->getCustomTags(),
        ];

        if ($changeInfo instanceof EntityChangeInfo) {
            $change['name'] = $changeInfo->getId();
        }

        if ($changeInfo->getScope() === 'plugin') {
            $pluginTags = $changeInfo->getCustomTags();
            $pluginName = $pluginTags['VP-Plugin-Name'];
            $change['name'] = $pluginName;
        }

        if ($changeInfo->getScope() === 'theme') {
            $themeTags = $changeInfo->getCustomTags();
            $themeName = $themeTags['VP-Theme-Name'];
            $change['name'] = $themeName;
        }

        if ($changeInfo->getScope() === 'wordpress') {
            $change['name'] = $changeInfo->getId();
        }

        if ($changeInfo->getScope() === 'versionpress' &&  ($changeInfo->getAction() === 'undo' || $changeInfo->getAction() === 'rollback')) {
            $commit = $this->gitRepository->getCommit($changeInfo->getId());
            $change['tags']['VP-Commit-Details'] = [
                'message' => $commit->getMessage()->getUnprefixedSubject(),
                'date' => $commit->getDate()->format(\DateTime::ISO8601)
            ];
        }

        return $change;
    }

    /**
     * @param Commit $commit
     * @param bool $skipVpdbFiles
     * @return array
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))