    public function sitesAreNotMergedIfThereIsConflict() {
        $cloneWpAutomation = new WpAutomation(self::$cloneSiteConfig, self::$testConfig->wpCliVersion);
        $cloneWpAutomation->editOption('blogname', 'Blogname from clone - conflict');

        $wpAutomation = new WpAutomation(self::$siteConfig, self::$testConfig->wpCliVersion);
        $wpAutomation->editOption('blogname', 'Blogname from original - conflict');

        $output = $wpAutomation->runWpCliCommand('vp', 'pull', array('from' => self::$cloneSiteName));

        $this->assertContains("Pull aborted", $output);
    }

    /**
     * Creates SiteConfig for new site based on another SiteConfig.
     *
     * @param SiteConfig $testSite
     * @param $siteName
     * @return SiteConfig
     */
||||||||    public function sitesAreNotMergedIfThereIsConflict() {
        $cloneWpAutomation = new WpAutomation(self::$cloneSiteConfig, self::$testConfig->wpCliVersion);
        $cloneWpAutomation->editOption('blogname', 'Blogname from clone - conflict');

        $wpAutomation = new WpAutomation(self::$siteConfig, self::$testConfig->wpCliVersion);
        $wpAutomation->editOption('blogname', 'Blogname from original - conflict');

        $output = $wpAutomation->runWpCliCommand('vp', 'pull', array('from' => self::$cloneSiteConfig->name));

        $this->assertContains("Pull aborted", $output);
    }

    /**
     * Returns SiteConfig for the clone site. Uses "clone" suffix.
     *
     * @param SiteConfig $testSite
     * @return SiteConfig
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_PROP)
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_PROP)
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_PROP)
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_PROP)
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_STATIC_PROP))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))