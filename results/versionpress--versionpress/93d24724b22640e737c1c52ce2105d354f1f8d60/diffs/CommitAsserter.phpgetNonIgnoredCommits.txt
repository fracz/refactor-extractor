||||||||    private function getNonIgnoredCommits() {
        if (!$this->commitCache) {
            $unfilteredCommits = $this->gitRepository->log("{$this->startCommit->getHash()}..HEAD");
            $that = $this;
            $filteredCommits = array_filter($unfilteredCommits, function($commit) use ($that) {
                return !in_array(ChangeInfoUtils::getFullAction($that->getChangeInfo($commit)), $that->ignoreCommitsWithActions);
            });
            $this->commitCache = array_values($filteredCommits); // array_values reindexes the array from zero
        }
        return $this->commitCache;
    }


    /**
     * @param int $whichCommit See $whichCommitParameter documentation. The most recent commit by default.
     * @return Commit
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ENCAPS_LIST
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                (AST_CLOSURE_USES
                                    (AST_CLOSURE_VAR))
                                (
                                    (AST_RETURN
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)
                                                                (
                                                                    (AST_VAR)))))
                                                    (AST_PROP
                                                        (AST_VAR)))))))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))