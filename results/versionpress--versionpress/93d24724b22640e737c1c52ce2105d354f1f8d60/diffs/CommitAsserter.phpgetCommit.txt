    private function getCommit($whichCommit = 0) {
        $revRange = $this->getRevRange($whichCommit);
        $commits = $this->gitRepository->log($revRange);
        return $commits[0];

    }

    /**
     * @param Commit $commit
     * @return ChangeInfoEnvelope|UntrackedChangeInfo
     */
||||||||    private function getCommit($whichCommit = 0) {
        $nonIgnoredCommits = $this->getNonIgnoredCommits();
        $index = abs($whichCommit);
        if (isset($nonIgnoredCommits[$index])) {
            return $nonIgnoredCommits[$index];
        } else {
            $fromRev = "HEAD~" . ($index + 1);
            $toRev = "HEAD~" . $index;
            $commits = $this->gitRepository->log("$fromRev..$toRev");
            return $commits[0];
        }
    }

    /**
     * @param Commit $commit
     * @return ChangeInfoEnvelope|UntrackedChangeInfo
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)))))
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))))