    public function addRecord(int $level, string $message, array $context = []): bool
    {
        $levelName = static::getLevelName($level);

        // check if any handler will handle this message so we can return early and save cycles
        $handlerKey = null;
        foreach ($this->handlers as $key => $handler) {
            if ($handler->isHandling(['level' => $level])) {
                $handlerKey = $key;
                break;
            }
        }

        if (null === $handlerKey) {
            return false;
        }

        $record = [
            'message' => $message,
            'context' => $context,
            'level' => $level,
            'level_name' => $levelName,
            'channel' => $this->name,
            'datetime' => new DateTimeImmutable($this->microsecondTimestamps, $this->timezone),
            'extra' => [],
        ];

        foreach ($this->processors as $processor) {
            $record = call_user_func($processor, $record);
        }

        reset($this->handlers);
        $skip = true;
        while ($handler = current($this->handlers)) {
            if ($skip) {
                if ($key !== key($this->handlers)) {
                    next($this->handlers);
                    continue;
                }
                $skip = false;
            }

            if (true === $handler->handle($record)) {
                break;
            }

            next($this->handlers);
        }

        return true;
    }

    /**
     * Gets all supported logging levels.
     *
     * @return array Assoc array with human-readable level names => level codes.
     */
||||||||    public function addRecord(int $level, string $message, array $context = []): bool
    {
        $levelName = static::getLevelName($level);

        // check if any handler will handle this message so we can return early and save cycles
        $handlerKey = null;
        foreach ($this->handlers as $key => $handler) {
            if ($handler->isHandling(['level' => $level])) {
                $handlerKey = $key;
                break;
            }
        }

        if (null === $handlerKey) {
            return false;
        }

        $record = [
            'message' => $message,
            'context' => $context,
            'level' => $level,
            'level_name' => $levelName,
            'channel' => $this->name,
            'datetime' => new DateTimeImmutable($this->microsecondTimestamps, $this->timezone),
            'extra' => [],
        ];

        foreach ($this->processors as $processor) {
            $record = call_user_func($processor, $record);
        }

        reset($this->handlers);
        while ($key !== key($this->handlers)) {
            next($this->handlers);
        }

        while ($handler = current($this->handlers)) {
            if (true === $handler->handle($record)) {
                break;
            }

            next($this->handlers);
        }

        return true;
    }

    /**
     * Gets all supported logging levels.
     *
     * @return array Assoc array with human-readable level names => level codes.
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY)
                (SCALAR))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR)))))
                                (
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (
                        (AST_BREAK
                            (NULL)))))
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY)
                (SCALAR))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (
                        (AST_BREAK
                            (NULL)))))
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))