	public function zmqAfterHook($setting, $value) {
		App::uses('PubSubTool', 'Tools');
		$pubSubTool = new PubSubTool();
		// If we are trying to change the enable setting to false, we don't need to test anything, just kill the server and return true.
		if ($setting == 'Plugin.ZeroMQ_enable') {
			if ($value == false || $value == 0) {
				$pubSubTool->killService();
				return true;
			}
		} else if (!Configure::read('Plugin.ZeroMQ_enable')) {
			// If we are changing any other ZeroMQ settings but the feature is disabled, don't reload the service
			return true;
		}
		$pubSubTool->reloadServer();
		return true;
	}

||||||||	public function zmqAfterHook($setting, $value) {
		$pubSubTool = $this->getPubSubTool();
		// If we are trying to change the enable setting to false, we don't need to test anything, just kill the server and return true.
		if ($setting == 'Plugin.ZeroMQ_enable') {
			if ($value == false || $value == 0) {
				$pubSubTool->killService();
				return true;
			}
		} else if (!Configure::read('Plugin.ZeroMQ_enable')) {
			// If we are changing any other ZeroMQ settings but the feature is disabled, don't reload the service
			return true;
		}
		$pubSubTool->reloadServer();
		return true;
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))