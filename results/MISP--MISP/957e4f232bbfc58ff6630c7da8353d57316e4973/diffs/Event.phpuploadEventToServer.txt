	function uploadEventToServer($event, $server, $HttpSocket=null) {
	    if (true ==$event['Event']['private'])  // never upload private events
	        return "Event is private and non exportable";

	    $url = $server['Server']['url'];
	    $authkey = $server['Server']['authkey'];
	    if (null == $HttpSocket) {
	        App::uses('HttpSocket', 'Network/Http');
	        $HttpSocket = new HttpSocket();
	    }
	    $request = array(
	            'header' => array(
	                    'Authorization' => $authkey,
	                    'Accept' => 'application/xml',
	                    'Content-Type' => 'application/xml',
	                    //'Connection' => 'keep-alive' // LATER followup cakephp ticket 2854 about this problem http://cakephp.lighthouseapp.com/projects/42648-cakephp/tickets/2854
	            )
	    );
	    $uri = $url.'/events';

	    // LATER try to do this using a separate EventsController and renderAs() function
	    $xmlArray = array();
	    // rearrange things to be compatible with the Xml::fromArray()
	    $event['Event']['Attribute'] = $event['Attribute'];
	    unset($event['Attribute']);

	    // cleanup the array from things we do not want to expose
	    unset($event['Event']['org']);
	    // remove value1 and value2 from the output
	    foreach($event['Event']['Attribute'] as $key => $attribute) {
	        // do not keep attributes that are private
	        if ($event['Event']['Attribute'][$key]['private']) {
	            unset($event['Event']['Attribute'][$key]);
	            continue; // stop processing this
	        }
	        // remove value1 and value2 from the output
	        unset($event['Event']['Attribute'][$key]['value1']);
	        unset($event['Event']['Attribute'][$key]['value2']);
	        // also add the encoded attachment
	        if ($this->Attribute->typeIsAttachment($event['Event']['Attribute'][$key]['type'])) {
	            $encoded_file = $this->Attribute->base64EncodeAttachment($event['Event']['Attribute'][$key]);
	            $event['Event']['Attribute'][$key]['data'] = $encoded_file;
	        }
	    }

	    // display the XML to the user
	    $xmlArray['Event'][] = $event['Event'];
	    $xmlObject = Xml::fromArray($xmlArray, array('format' => 'tags'));
	    $eventsXml = $xmlObject->asXML();
	    // do a REST POST request with the server
	    $data = $eventsXml;
	    // LATER validate HTTPS SSL certificate
	    $response = $HttpSocket->post($uri, $data, $request);
	    if ($response->isOk()) {
	        return true;
	    }
	    else {
	        // parse the XML response and keep the reason why it failed
	        $xml_array = Xml::toArray(Xml::build($response->body));
	        if ("Event already exists" == $xml_array['response']['name']) {
	            return true;
	        } else {
	            return $xml_array['response']['name'];
	        }
	    }
	}

	/**
	 * Download a specific event from a Server
	 * TODO move this to a component
	 * @return array|NULL
	 */
||||||||	function uploadEventToServer($event, $server, $HttpSocket=null) {
	    if (true ==$event['Event']['private'])  // never upload private events
	        return "Event is private and non exportable";

	    $url = $server['Server']['url'];
	    $authkey = $server['Server']['authkey'];
	    if (null == $HttpSocket) {
	        App::uses('HttpSocket', 'Network/Http');
	        $HttpSocket = new HttpSocket();
	    }
	    $request = array(
	            'header' => array(
	                    'Authorization' => $authkey,
	                    'Accept' => 'application/xml',
	                    'Content-Type' => 'application/xml',
	                    //'Connection' => 'keep-alive' // LATER followup cakephp ticket 2854 about this problem http://cakephp.lighthouseapp.com/projects/42648-cakephp/tickets/2854
	            )
	    );
	    $uri = $url.'/events';

	    // LATER try to do this using a separate EventsController and renderAs() function
	    $xmlArray = array();
	    // rearrange things to be compatible with the Xml::fromArray()
	    $event['Event']['Attribute'] = $event['Attribute'];
	    unset($event['Attribute']);

	    // cleanup the array from things we do not want to expose
	    unset($event['Event']['org']);
	    // remove value1 and value2 from the output
	    foreach($event['Event']['Attribute'] as $key => &$attribute) {
	        // do not keep attributes that are private
	        if ($attribute['private']) {
	            unset($event['Event']['Attribute'][$key]);
	            continue; // stop processing this
	        }
	        // remove value1 and value2 from the output
	        unset($attribute['value1']);
	        unset($attribute['value2']);
	        // also add the encoded attachment
	        if ($this->Attribute->typeIsAttachment($attribute['type'])) {
	            $encoded_file = $this->Attribute->base64EncodeAttachment($attribute);
	            $attribute['data'] = $encoded_file;
	        }
	    }

	    // display the XML to the user
	    $xmlArray['Event'][] = $event['Event'];
	    $xmlObject = Xml::fromArray($xmlArray, array('format' => 'tags'));
	    $eventsXml = $xmlObject->asXML();
	    // do a REST POST request with the server
	    $data = $eventsXml;
	    // LATER validate HTTPS SSL certificate
	    $response = $HttpSocket->post($uri, $data, $request);
	    if ($response->isOk()) {
	        return true;
	    }
	    else {
	        // parse the XML response and keep the reason why it failed
	        $xml_array = Xml::toArray(Xml::build($response->body));
	        if ("Event already exists" == $xml_array['response']['name']) {
	            return true;
	        } else {
	            return $xml_array['response']['name'];
	        }
	    }
	}

	/**
	 * Download a specific event from a Server
	 * TODO move this to a component
	 * @return array|NULL
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_FOREACH
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_UNSET
                (AST_DIM
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))
                                            (SCALAR))
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (NULL))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_FOREACH
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (AST_REF
            (AST_VAR))
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (NULL))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))))))))))