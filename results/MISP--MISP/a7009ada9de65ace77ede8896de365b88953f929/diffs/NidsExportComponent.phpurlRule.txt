	public function urlRule($ruleFormat, $attribute, &$sid) {
		// TODO in hindsight, an url should not be excluded given a host or domain name.
		//$hostpart = parse_url($attribute['value'], PHP_URL_HOST);
		//$overruled = $this->checkNames($hostpart);
		// warning: only suricata compatible
		$overruled = $this->checkWhitelist($attribute['value']);
		$content = 'flow:to_server,established; content:"' . $attribute['value'] . '"; fast_pattern; nocase; http_uri;';
		$this->rules[] = sprintf($ruleFormat,
				($overruled) ? '#OVERRULED BY WHITELIST# ' : '',
				'http',							// proto
				'$HOME_NET',					// src_ip
				'any',							// src_port
				'->',							// direction
				'$EXTERNAL_NET',				// dst_ip
				'any',							// dst_port
				'Outgoing HTTP URL: ' . $attribute['value'],		// msg
				$content,						// rule_content
				'tag:session,600,seconds;',	// tag
				$sid,							// sid
				1								// rev
				);
	}

||||||||	public function urlRule($ruleFormat, $attribute, &$sid) {
		// TODO in hindsight, an url should not be excluded given a host or domain name.
		//$hostpart = parse_url($attribute['value'], PHP_URL_HOST);
		//$overruled = $this->checkNames($hostpart);
		// warning: only suricata compatible
		$overruled = $this->checkWhitelist($attribute['value']);
		$attribute['value'] = replaceIllegalChars($attribute['value']);  // substitute chars not allowed in rule
		$content = 'flow:to_server,established; content:"' . $attribute['value'] . '"; fast_pattern; nocase; http_uri;';
		$this->rules[] = sprintf($ruleFormat,
				($overruled) ? '#OVERRULED BY WHITELIST# ' : '',
				'http',							// proto
				'$HOME_NET',					// src_ip
				'any',							// src_port
				'->',							// direction
				'$EXTERNAL_NET',				// dst_ip
				'any',							// dst_port
				'Outgoing HTTP URL: ' . $attribute['value'],		// msg
				$content,						// rule_content
				'tag:session,600,seconds;',	// tag
				$sid,							// sid
				1								// rev
				);
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (NULL))
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (NULL))
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)))))