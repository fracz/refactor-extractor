    public function testExecuteQueryCopy()
    {
        touch(PHPUnit\TEMP_DIR . '/phpdoc_a');
        @unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
        $this->assertFileExists(PHPUnit\TEMP_DIR . '/phpdoc_a');
        $this->assertFileNotExists(PHPUnit\TEMP_DIR . '/phpdoc_b');

        $transformer = new \phpDocumentor\Transformer\Transformer();
        $transformer->setTarget(PHPUnit\TEMP_DIR);
        try
        {
            $transformation = new \phpDocumentor\Transformer\Transformation(
                $transformer, 'copy', 'FileIo', PHPUnit\TEMP_DIR . '/phpdoc_b', 'phpdoc_c'
            );
            $this->fixture->transform(new \DOMDocument(), $transformation);

            $this->fail(
                'When a non-existing source is provided, an exception is expected'
            );
        }
        catch (\PHPUnit_Framework_AssertionFailedError $e)
        {
            throw $e;
        }
        catch (\Exception $e)
        {
            // this is good
        }

        try
        {
            $transformer->setTarget('/tmpz');
            $transformation = new \phpDocumentor\Transformer\Transformation(
                $transformer, 'copy', 'FileIo', '/tmp/phpdoc_a', 'phpdoc_b'
            );
            $this->fixture->transform(new \DOMDocument(), $transformation);

            $this->fail(
                'When a non-existing transformer target is provided, '
                . 'an exception is expected'
            );
        }
        catch (\PHPUnit_Framework_AssertionFailedError $e)
        {
            throw $e;
        }
        catch (\Exception $e)
        {
            // this is good
        }

        $this->markTestIncomplete(
            'Absolute files are no longer supported using the FileIo writer, '
            .'the test code should be adapted'
        );

        unlink(PHPUnit\TEMP_DIR . '/phpdoc_a');
        unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
    }

    /**
     * Executes whether the query 'copy' is properly executed in a transformation.
     *
     * @covers phpDocumentor\Plugin\Core\Transformer\Writer\FileIO::transform
     *
     * @throws \Exception|\PHPUnit_Framework_AssertionFailedError
     *
     * @return void
     */
||||||||    public function testExecuteQueryCopy()
    {
        // FIXME
        $this->markTestIncomplete('Fix with mocks');
        touch(PHPUnit\TEMP_DIR . '/phpdoc_a');
        @unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
        $this->assertFileExists(PHPUnit\TEMP_DIR . '/phpdoc_a');
        $this->assertFileNotExists(PHPUnit\TEMP_DIR . '/phpdoc_b');

        $transformer = new \phpDocumentor\Transformer\Transformer();
        $transformer->setTarget(PHPUnit\TEMP_DIR);
        try
        {
            $transformation = new \phpDocumentor\Transformer\Transformation(
                $transformer, 'copy', 'FileIo', PHPUnit\TEMP_DIR . '/phpdoc_b', 'phpdoc_c'
            );
            $this->fixture->transform(new \DOMDocument(), $transformation);

            $this->fail(
                'When a non-existing source is provided, an exception is expected'
            );
        }
        catch (\PHPUnit_Framework_AssertionFailedError $e)
        {
            throw $e;
        }
        catch (\Exception $e)
        {
            // this is good
        }

        try
        {
            $transformer->setTarget('/tmpz');
            $transformation = new \phpDocumentor\Transformer\Transformation(
                $transformer, 'copy', 'FileIo', '/tmp/phpdoc_a', 'phpdoc_b'
            );
            $this->fixture->transform(new \DOMDocument(), $transformation);

            $this->fail(
                'When a non-existing transformer target is provided, '
                . 'an exception is expected'
            );
        }
        catch (\PHPUnit_Framework_AssertionFailedError $e)
        {
            throw $e;
        }
        catch (\Exception $e)
        {
            // this is good
        }

        $this->markTestIncomplete(
            'Absolute files are no longer supported using the FileIo writer, '
            .'the test code should be adapted'
        );

        unlink(PHPUnit\TEMP_DIR . '/phpdoc_a');
        unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
    }

    /**
     * Executes whether the query 'copy' is properly executed in a transformation.
     *
     * @covers phpDocumentor\Plugin\Core\Transformer\Writer\FileIO::transform
     *
     * @throws \Exception|\PHPUnit_Framework_AssertionFailedError
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))))