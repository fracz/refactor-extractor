    public function testTransformCanIdentifyParseMarkersAndCreateCheckstyleReport(
        $structure, $expected
    ) {
        $tr = new \phpDocumentor\Transformer\Transformer();
        $tr->setTarget(PHPUnit\TEMP_DIR);
        $t = new \phpDocumentor\Transformer\Transformation(
            $tr, '', 'Checkstyle', '', '/checkstyle.xml'
        );

        $expectedDom = new \DOMDocument();
        $expectedDom->loadXML($expected);

        $document = new \DOMDocument();
        $document->loadXML($structure);

        $writer = new Checkstyle();
        $writer->transform($document, $t);

        $this->assertFileExists(PHPUnit\TEMP_DIR . '/checkstyle.xml');
        $actual = file_get_contents(PHPUnit\TEMP_DIR . '/checkstyle.xml');
        $this->assertEquals($expected, $actual);
    }

    /**
     * Data provider for
     *     testTransformCanIdentifyParseMarkersAndCreateCheckstyleReport.
     *
     * @return array
     */
||||||||    public function testTransformCanIdentifyParseMarkersAndCreateCheckstyleReport(
        $structure, $expected
    ) {
        // FIXME
        $this->markTestIncomplete('Fix with mocks');
        $tr = new \phpDocumentor\Transformer\Transformer();
        $tr->setTarget(PHPUnit\TEMP_DIR);
        $t = new \phpDocumentor\Transformer\Transformation(
            $tr, '', 'Checkstyle', '', '/checkstyle.xml'
        );

        $expectedDom = new \DOMDocument();
        $expectedDom->loadXML($expected);

        $document = new \DOMDocument();
        $document->loadXML($structure);

        $writer = new Checkstyle();
        $writer->transform($document, $t);

        $this->assertFileExists(PHPUnit\TEMP_DIR . '/checkstyle.xml');
        $actual = file_get_contents(PHPUnit\TEMP_DIR . '/checkstyle.xml');
        $this->assertEquals($expected, $actual);
    }

    /**
     * Data provider for
     *     testTransformCanIdentifyParseMarkersAndCreateCheckstyleReport.
     *
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))