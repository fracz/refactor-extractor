    public function register($file)
    {
        if (!file_exists($file) || !is_readable($file)) {
            throw new Exception(
                'The plugin file "'.$file.'" must exist and be readable'
            );
        }

        $reflection = new DocBlox_Reflection_File($file);
        $reflection->process();
        $classes = $reflection->getClasses();

        if (count($classes) > 1) {
            throw new Exception('Plugin file should only contain one class');
        }

        if (count($classes) < 1) {
            throw new Exception(
                'Plugin file should did not contain a listener class'
            );
        }

        /** @var DocBlox_Reflection_Class $listener_definition  */
        $listener_definition = reset($classes);

        // add the file's prefix and path to the autoloader
        $prefix = substr(
            $listener_definition, 0, strrpos($listener_definition, '_') + 1
        );
        $this->autoloader->registerPrefix($prefix, dirname($file));

        // initialize the plugin / event listener
        $listener_name = $listener_definition->getName();
        $listener      = new $listener_name(
            $this->event_dispatcher,
            $this->configuration
        );

        // connect all events of the each method to the event_dispatcher
        foreach($listener_definition->getMethods() as $method) {
            if (!$method->getDocBlock()) {
                continue;
            }

            /** @var DocBlox_Reflection_Tag $event */
            foreach($method->getDocBlock()->getTagsByName('docblox-event') as $event) {
                $this->event_dispatcher->connect(
                    $event->getDescription(),
                    array($listener, $method->getName())
                );
            }
        }
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (NULL))))))))))||||||||