    public function execute()
    {
        $source = $this->getSource();

        if (!$source) {
            throw new Exception(
                'Unable to process transformations; the source was not set '
                . 'correctly'
            );
        }

        // invoke pre-transform actions (i.e. enhance source file with additional
        // meta-data)
        $this->dispatch('transformer.transform.pre', array('source' => $source));

        foreach ($this->getTransformations() as $transformation) {
            $this->dispatch(
                'transformer.transformation.pre', array('source' => $source)
            );

            $this->log(
                'Applying transformation'
                . ($transformation->getQuery()
                        ? (' query "' . $transformation->getQuery() . '"') : '')
                . ' using writer ' . get_class($transformation->getWriter())
                . ' on '.$transformation->getArtifact()
            );

            $transformation->execute($source);

            $this->dispatch(
                'transformer.transformation.post', array('source' => $source)
            );
        }

        $this->dispatch(
            'transformer.transform.post',
            array('source' => $source)
        );
    }

    /**
     * Converts a source file name to the name used for generating the end result.
     *
     * This method strips down the given $name using the following rules:
     *
     * * if the $name is postfixed with .php then that is removed
     * * any occurance of \ or DIRECTORY_SEPARATOR is replaced with .
     * * any dots that the name starts or ends with is removed
     * * the result is postfixed with .html
     *
     * @param string $name Name to convert.
     *
     * @return string
     */
||||||||    public function execute()
    {
        $source = $this->getSource();

        if (!$source) {
            throw new Exception(
                'Unable to process transformations; the source was not set '
                . 'correctly'
            );
        }

        // invoke pre-transform actions (i.e. enhance source file with additional
        // meta-data)
        \phpDocumentor\Plugin\EventDispatcher::getInstance()->dispatch(
            'transformer.transform.pre',
            \phpDocumentor\Transformer\Events\PreTransformEvent
            ::createInstance($this)->setSource($source)
        );

        foreach ($this->getTransformations() as $transformation) {
            \phpDocumentor\Plugin\EventDispatcher::getInstance()->dispatch(
                'transformer.transformation.pre',
                \phpDocumentor\Transformer\Events\PreTransformationEvent
                ::createInstance($this)->setSource($source)
            );

            $this->log(
                'Applying transformation'
                . ($transformation->getQuery()
                        ? (' query "' . $transformation->getQuery() . '"') : '')
                . ' using writer ' . get_class($transformation->getWriter())
                . ' on '.$transformation->getArtifact()
            );

            $transformation->execute($source);

            \phpDocumentor\Plugin\EventDispatcher::getInstance()->dispatch(
                'transformer.transformation.post',
                \phpDocumentor\Transformer\Events\PostTransformationEvent
                ::createInstance($this)->setSource($source)
            );
        }

        \phpDocumentor\Plugin\EventDispatcher::getInstance()->dispatch(
            'transformer.transform.post',
            \phpDocumentor\Transformer\Events\PostTransformEvent
            ::createInstance($this)->setSource($source)
        );
    }

    /**
     * Converts a source file name to the name used for generating the end result.
     *
     * This method strips down the given $name using the following rules:
     *
     * * if the $name is postfixed with .php then that is removed
     * * any occurance of \ or DIRECTORY_SEPARATOR is replaced with .
     * * any dots that the name starts or ends with is removed
     * * the result is postfixed with .html
     *
     * @param string $name Name to convert.
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))
                                                (SCALAR))
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (SCALAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))
                                                (SCALAR))
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (SCALAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (
                    (AST_VAR))))))