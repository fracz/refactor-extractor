  public function testExecuteTransform()
  {
    touch('/tmp/phpdoc_a');
    @unlink('/tmp/phpdoc_b');
    $this->assertFileExists('/tmp/phpdoc_a');
    $this->assertFileNotExists('/tmp/phpdoc_b');

    $tr = new phpDocumentor_Transformer();
    $tr->setTarget('/tmp');

    try
    {
      $t = new phpDocumentor_Transformer_Transformation(
          $tr, 'copyz', 'FileIo', '/tmp/phpdoc_a', 'phpdoc_b'
      );
      $this->fixture->transform(new DOMDocument(), $t);

      $this->fail('When un unknown query type is used an exception is expected');
    } catch(InvalidArgumentException $e)
    {
      // this is good
    }

    $t = new phpDocumentor_Transformer_Transformation(
        $tr, 'copy', 'FileIo', '/tmp/phpdoc_a', 'phpdoc_b'
    );
    $this->fixture->transform(new DOMDocument(), $t);
    $this->assertFileExists('/tmp/phpdoc_a');
    $this->assertFileExists('/tmp/phpdoc_b');
    unlink('/tmp/phpdoc_a');
    unlink('/tmp/phpdoc_b');
  }
}||||||||    public function testExecuteTransform()
    {
        touch('/tmp/phpdoc_a');
        @unlink('/tmp/phpdoc_b');
        $this->assertFileExists('/tmp/phpdoc_a');
        $this->assertFileNotExists('/tmp/phpdoc_b');

        $tr = new phpDocumentor_Transformer();
        $tr->setTarget('/tmp');

        try
        {
            $t = new phpDocumentor_Transformer_Transformation($tr, 'copyz', 'FileIo', '/tmp/phpdoc_a', 'phpdoc_b');
            $this->fixture->transform(new DOMDocument(), $t);

            $this->fail('When un unknown query type is used an exception is expected');
        }
        catch (InvalidArgumentException $e)
        {
            // this is good
        }

         $this->markTestIncomplete(
            'Absolute files are no longer supported using the FileIo writer, '
            .'the test code should be adapted'
        );
//       $t = new phpDocumentor_Transformer_Transformation($tr, 'copy', 'FileIo', '/tmp/phpdoc_a', 'phpdoc_b');
//        $this->fixture->transform(new DOMDocument(), $t);
//        $this->assertFileExists('/tmp/phpdoc_a');
//        $this->assertFileExists('/tmp/phpdoc_b');
        unlink('/tmp/phpdoc_a');
        unlink('/tmp/phpdoc_b');
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (SCALAR)))
    (AST_UNARY_OP
        (AST_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_NEW)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (SCALAR)))
    (AST_UNARY_OP
        (AST_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR))))