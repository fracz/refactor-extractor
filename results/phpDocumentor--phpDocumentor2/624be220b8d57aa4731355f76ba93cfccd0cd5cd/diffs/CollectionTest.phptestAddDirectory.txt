||||||||    public function testAddDirectory()
    {
        // instantiate a new instance because we want to be sure it is clean
        $fixture = new Collection();

        // read the phar test fixture
        $fixture->addDirectory(
            'phar://'.dirname(__FILE__).'/../../../data/test.phar'
        );

        // we know which files are in there; test against it
        $this->assertEquals(
            array(
                 'phar://' . dirname(__FILE__)
                    . '/../../../data/test.phar/folder/test.php',
                 'phar://' . dirname(__FILE__)
                    . '/../../../data/test.phar/test.php',
            ),
            $fixture->getFilenames()
        );

        // instantiate a new instance because we want to be sure it is clean
        $fixture = new Collection();

        // load the unit test folder
        $fixture->addDirectory(dirname(__FILE__) . '/../../');
        $files = $fixture->getFilenames();
        $count = count($files);

        // do a few checks to see if it has caught some cases
        $this->assertGreaterThan(1, $count);
        $this->assertContains(
            realpath(dirname(__FILE__) . '/../../phpDocumentor/ParserTest.php'),
            $files
        );
        $this->assertContains(
            realpath(
                dirname(__FILE__) . '/../../phpDocumentor/File/CollectionTest.php'
            ),
            $files
        );

        // should exclude 1 less
        $fixture = new Collection();
        $fixture->getIgnorePatterns()->append('*r/ParserTest.php');
        $fixture->addDirectory(dirname(__FILE__) . '/../../');
        $this->assertCount($count -1, $fixture->getFilenames());

        $fixture = new Collection();
        $fixture->getIgnorePatterns()->append('*/phpDocumentor/*');
        $fixture->addDirectory(dirname(__FILE__) . '/../../');
        $this->assertEmpty($fixture->getFilenames());
    }

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST))))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_MAGIC_CONST))))
                        (SCALAR))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_MAGIC_CONST))))
                        (SCALAR))
                    (NULL)))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_MAGIC_CONST)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (SCALAR))))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (SCALAR))))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_MAGIC_CONST)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_MAGIC_CONST)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)))))