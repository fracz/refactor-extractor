  protected function configure()
  {
    $this->addOption('f|filename', '=s',
      'Comma-separated list of files to parse. The wildcards ? and * are supported'
    );
    $this->addOption('d|directory', '=s',
      'Comma-separated list of directories to (recursively) parse.'
    );
    $this->addOption('t|target', '-s',
      'Path where to store the generated output (optional, defaults to "'. DocBlox_Core_Abstract::config()->target . '")'
    );
    $this->addOption('e|extensions', '-s',
      'Optional comma-separated list of extensions to parse, defaults to php, php3 and phtml'
    );
    $this->addOption('i|ignore', '-s',
      'Comma-separated list of file(s) and directories that will be ignored. Wildcards * and ? are supported'
    );
    $this->addOption('m|markers', '-s',
      'Comma-separated list of markers/tags to filter, (optional, defaults to: "TODO,FIXME")'
    );
    $this->addOption('c|config', '-s',
      'Configuration filename, if none is given the defaults of the docblox.config.xml in the root of DocBlox is used'
    );
    $this->addOption('v|verbose', '',
      'Provides additional information during parsing, usually only needed for debugging purposes'
    );
    $this->addOption('q|quiet', '',
      'Silences the output and logging'
    );
    $this->addOption('title', '-s',
      'Sets the title for this project; default is the DocBlox logo'
    );
    $this->addOption('force', '',
      'Forces a full build of the documentation, does not increment existing documentation'
    );
    $this->addOption('validate', '',
      'Validates every processed file using PHP Lint, costs a lot of performance'
    );
  }

  /**
   * Overwrite header output to not show anything when 'Quiet' mode is on.
   *
   * @return void
   */
||||||||  protected function configure()
  {
    $this->addOption('f|filename', '=s',
      'Comma-separated list of files to parse. The wildcards ? and * are supported'
    );
    $this->addOption('d|directory', '=s',
      'Comma-separated list of directories to (recursively) parse.'
    );
    $this->addOption('t|target', '-s',
      'Path where to store the generated output (optional, defaults to "'. DocBlox_Core_Abstract::config()->target . '")'
    );
    $this->addOption('e|extensions', '-s',
      'Optional comma-separated list of extensions to parse, defaults to php, php3 and phtml'
    );
    $this->addOption('i|ignore', '-s',
      'Comma-separated list of file(s) and directories that will be ignored. Wildcards * and ? are supported'
    );
    $this->addOption('m|markers', '-s',
      'Comma-separated list of markers/tags to filter, (optional, defaults to: "TODO,FIXME")'
    );
    $this->addOption('v|verbose', '',
      'Provides additional information during parsing, usually only needed for debugging purposes'
    );
    $this->addOption('q|quiet', '',
      'Silences the output and logging'
    );
    $this->addOption('title', '-s',
      'Sets the title for this project; default is the DocBlox logo'
    );
    $this->addOption('force', '',
      'Forces a full build of the documentation, does not increment existing documentation'
    );
    $this->addOption('validate', '',
      'Validates every processed file using PHP Lint, costs a lot of performance'
    );
  }

  /**
   * Overwrite header output to not show anything when 'Quiet' mode is on.
   *
   * @return void
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_CALL)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_CALL)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR))))