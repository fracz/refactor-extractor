  public function getSource()
  {
    return parent::getSource()
      ? parent::getSource()
      : 'output/structure.xml';
  }

  /**
   * Returns the name of the current template, or the default.
   *
   * @return string
   */
||||||||  public function getSource()
  {
    $source = parent::getSource();
    $source = ($source === null)
      ? trim(DocBlox_Core_Abstract::config()->parser->target).'/structure.xml'
      : trim($source);

    if (($source == '') || ($source == DIRECTORY_SEPARATOR))
    {
      throw new Zend_Console_Getopt_Exception('Either an empty path or root was given: ' . $source);
    }

    if (is_dir($source))
    {
      throw new Zend_Console_Getopt_Exception(
        'The given path "' . $source . '" is a folder; we expect the exact location of the structure file '
          . '(i.e. data/output/structure.xml)'
      );
    }

    if (!is_readable($source))
    {
      throw new Zend_Console_Getopt_Exception('The given path "' . $source . '" either does not exist or is not readable.');
    }

    return realpath($source);
  }

  /**
   * Returns the name of the current template, or the default.
   *
   * @return string
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_STATIC_CALL)
            (AST_STATIC_CALL)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_PROP
                                (AST_STATIC_CALL)))))
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))