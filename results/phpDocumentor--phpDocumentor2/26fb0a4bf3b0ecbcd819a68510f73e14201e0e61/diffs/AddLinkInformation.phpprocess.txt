    public function process(DOMDocument $xml)
    {
        if ($this->logger) {
            $this->logger->log('Adding path information to each xml "file" tag');
        }

        $xpath = new DOMXPath($xml);
        // add to classes
        $qry = $xpath->query('//class[full_name]/..');
        $class_paths = array();

        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            $path = $element->getAttribute('path');
            foreach ($element->getElementsByTagName('class') as $class)
            {
                $class_paths[$class->getElementsByTagName('full_name')->item(0)->nodeValue] = $path;
            }
        }

        // add to interfaces
        $qry = $xpath->query('//interface[full_name]/..');
        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            $path = $element->getAttribute('path');

            /** @var DOMElement $class */
            foreach ($element->getElementsByTagName('interface') as $class)
            {
                $class_paths[$class->getElementsByTagName('full_name')->item(0)->nodeValue] = $path;
            }
        }

        // add extra xml elements to tags
        if ($this->logger) {
            $this->logger->log('Adding link information and excerpts to all DocBlock tags');
        }
        $qry = $xpath->query('//docblock/tag/@type|//docblock/tag/type|//extends|//implements');

        $declared_classes = get_declared_classes();

        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            $type = rtrim($element->nodeValue, '[]');
            $node = ($element->nodeType == XML_ATTRIBUTE_NODE)
                    ? $element->parentNode
                    : $element;

            // if the class is already loaded and is an internal class; refer
            // to the PHP man pages
            if (in_array(ltrim($type, '\\'), $declared_classes)) {
                $refl = new ReflectionClass(ltrim($type, '\\'));
                if ($refl->isInternal()) {
                    $node->setAttribute(
                        'link',
                        'http://php.net/manual/en/class.'
                        . strtolower(ltrim($type, '\\')) . '.php'
                    );
                }
            }

            if (isset($class_paths[$type])) {
                $file_name = $this->generateFilename($class_paths[$type]);
                $node->setAttribute('link', $file_name . '#' . $type);
            }

            // add a 15 character excerpt of the node contents, meant for the sidebar
            $node->setAttribute(
                'excerpt',
                utf8_encode(substr($type, 0, 15) . (strlen($type) > 15 ? '...' : ''))
            );
        }

        // convert class names to links
        // this action also checks the link of an @link tag it it starts with
        // `http://`, `https://` or `www.`. if not: also convert those.
        $qry = $xpath->query(
            '//docblock/tag[@name="throw" or @name="throws" or @name="see" '
            . 'or @name="uses" or @name="used_by" or @name="inherited_from"]'.
            '|(//docblock/tag[@name="link" '
            . 'and (substring(@link,1,7) != \'http://\' '
            . 'or substring(@link,1,4) != \'www.\''
            . 'or substring(@link,1,7) != \'https://\')])'
        );
        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            switch($element->getAttribute('name'))
            {
                case 'link':
                    $name = $element->getAttribute('link');
                    break;
                case 'uses':
                case 'used_by':
                case 'see':
                case 'inherited_from':
                    $name = $element->getAttribute('refers');
                    if ($name[0] !== '\\') {
                        $name = '\\' . $name;
                    }
                    break;
                default:
                    $name = $element->nodeValue;
                    break;
            }

            $node_value = explode('::', $name);

            if (isset($class_paths[$node_value[0]])) {
                $file_name = $this->generateFilename($class_paths[$node_value[0]]);
                $element->setAttribute('link', $file_name . '#' . $name);
            }
        }

        return $xml;
    }

    /**
     * Converts a source file name to the name used for generating the end result.
     *
     * @param string $file
     *
     * @return string
     */
||||||||    public function process(DOMDocument $xml)
    {
        if ($this->logger) {
            $this->logger->log('Adding path information to each xml "file" tag');
        }

        $xpath = new DOMXPath($xml);
        // add to classes
        $qry = $xpath->query('//class[full_name]|//interface[full_name]');
        $class_paths = array();

        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            $path = $element->parentNode->getAttribute('path');
            $class_paths[$element->getElementsByTagName('full_name')->item(0)->nodeValue] = $path;
        }

        // add extra xml elements to tags
        if ($this->logger) {
            $this->logger->log('Adding link information and excerpts to all DocBlock tags');
        }
//        $qry = $xpath->query('//docblock/tag/@type|//docblock/tag/type|/project/file/*/extends|/project/file/*/implements');

        $qry = $xpath->query(
            '/project/file/*/docblock/tag/type[. != ""]' .
            '|/project/file/*/*/docblock/tag/type[. != ""]' .
            '|/project/file/*/extends[. != ""]' .
            '|/project/file/*/implements[. != ""]'
        );

        $declared_classes = array_flip(get_declared_classes());

        // caching array to keep track whether unknown classes are PHP Internal
        $unknown_classes  = array();

        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            $type = rtrim($element->nodeValue, '[]');
            $bare_type = ($type[0] == '\\') ? substr($type, 1) : $type;
            $node = $element;

            // if the class is already loaded and is an internal class; refer
            // to the PHP man pages
            if (isset($declared_classes[$bare_type])) {
                // cache reflection calls since these can be expensive
                if(!isset($unknown_classes[$bare_type])) {
                    $refl = new ReflectionClass($bare_type);
                    $unknown_classes[$bare_type] = $refl->isInternal();
                }

                // unknown_class returns true when class is a PHP internal
                if ($unknown_classes[$bare_type]) {
                    $node->setAttribute(
                        'link',
                        'http://php.net/manual/en/class.'
                        . strtolower($bare_type) . '.php'
                    );
                }
                continue;
            }

            if (isset($class_paths[$type])) {
                $file_name = $this->generateFilename($class_paths[$type]);
                $node->setAttribute('link', $file_name . '#' . $type);
            }
        }

        // convert class names to links
        // this action also checks the link of an @link tag it it starts with
        // `http://`, `https://` or `www.`. if not: also convert those.
        $qry = $xpath->query(
            '//docblock/tag[@name="throw" or @name="throws" or @name="see" '
            . 'or @name="uses" or @name="used_by" or @name="inherited_from"]'.
            '|(//docblock/tag[@name="link" '
            . 'and (substring(@link,1,7) != \'http://\' '
            . 'or substring(@link,1,4) != \'www.\''
            . 'or substring(@link,1,7) != \'https://\')])'
        );
        /** @var DOMElement $element */
        foreach ($qry as $element)
        {
            switch($element->getAttribute('name'))
            {
                case 'link':
                    $name = $element->getAttribute('link');
                    break;
                case 'uses':
                case 'used_by':
                case 'see':
                case 'inherited_from':
                    $name = $element->getAttribute('refers');
                    if ($name[0] !== '\\') {
                        $name = '\\' . $name;
                    }
                    break;
                default:
                    $name = $element->nodeValue;
                    break;
            }

            $node_value = explode('::', $name);

            if (isset($class_paths[$node_value[0]])) {
                $file_name = $this->generateFilename($class_paths[$node_value[0]]);
                $element->setAttribute('link', $file_name . '#' . $name);
            }
        }

        return $xml;
    }

    /**
     * Converts a source file name to the name used for generating the end result.
     *
     * @param string $file
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))
                                    (
                                        (SCALAR)))))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))
                                    (
                                        (SCALAR)))))
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR)
                                                                    (SCALAR))))))
                                                (SCALAR))))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)))
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_SWITCH
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_SWITCH_LIST
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (SCALAR))
                    (AST_SWITCH_CASE
                        (SCALAR))
                    (AST_SWITCH_CASE
                        (SCALAR))
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))))))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BREAK
                                (NULL))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_PROP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (
                                (SCALAR)))))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR))
                        (SCALAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_ISSET
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_NEW
                                            (
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR))))
                                                (SCALAR)))))))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_SWITCH
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_SWITCH_LIST
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (SCALAR))
                    (AST_SWITCH_CASE
                        (SCALAR))
                    (AST_SWITCH_CASE
                        (SCALAR))
                    (AST_SWITCH_CASE
                        (SCALAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))))))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BREAK
                                (NULL))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))