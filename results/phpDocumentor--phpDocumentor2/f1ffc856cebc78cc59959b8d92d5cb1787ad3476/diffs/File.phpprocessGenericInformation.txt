  protected function processGenericInformation(DocBlox_TokenIterator $tokens)
  {
    // find file docblock; standard function does not suffice as this scans backwards and we have to make sure it isn't
    // the docblock of another element
    $this->doc_block = $this->findDocBlock($tokens);

    $result = array();
    // find all markers, get the entire line
    foreach(explode("\n", $this->contents) as $line_number => $line)
    {
      preg_match_all('~//[\s]*('.implode('|', $this->marker_terms).')\:?[\s]*(.*)~', $line, $matches, PREG_SET_ORDER);
      foreach ($matches as &$match)
      {
        $match[3] = $line_number+1;
      }
      $result = array_merge($result, $matches);
    }
    // store marker results and remove first entry (entire match), this results in an array with 2 entries:
    // marker name and content
    $this->markers = $result;
    foreach($this->markers as &$marker)
    {
      array_shift($marker);
    }
  }

||||||||  protected function processGenericInformation(DocBlox_TokenIterator $tokens)
  {
    // find file docblock; standard function does not suffice as this scans backwards and we have to make sure it isn't
    // the docblock of another element
    $this->doc_block = $this->findDocBlock($tokens);

    // find all markers, get the entire file line by line and check for marker terms.
    $marker_data = array();
    foreach(explode("\n", $this->contents) as $line_number => $line)
    {
      preg_match_all('~//[\s]*('.implode('|', $this->marker_terms).')\:?[\s]*(.*)~', $line, $matches, PREG_SET_ORDER);
      foreach ($matches as &$match)
      {
        $match[3] = $line_number+1;
      }
      $marker_data = array_merge($marker_data, $matches);
    }

    // store marker results and remove first entry (entire match), this results in an array with 2 entries:
    // marker name and content
    $this->markers = $marker_data;
    foreach($this->markers as &$marker)
    {
      array_shift($marker);
    }
  }

  /**
   * Tries to find the DocBlox belonging to this file (page-level DocBlock).
   *
   * A page level DocBlock is a DocBlock that is at the top of a file and is not directly followed by a
   * class definition.
   * Page level DocBlocks MUST contain a @package tag or they are 'disqualified'.
   *
   * If no page level docblox is found we throw a warning to indicate to the user that this is missing.
   *
   * @param DocBlox_TokenIterator $tokens
   *
   * @return DocBlox_Reflection_DocBlock|null
   */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))))
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (AST_CONST)))
            (AST_FOREACH
                (AST_VAR)
                (AST_REF
                    (AST_VAR))
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_REF
            (AST_VAR))
        (NULL)
        (
            (AST_CALL
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))))
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (AST_CONST)))
            (AST_FOREACH
                (AST_VAR)
                (AST_REF
                    (AST_VAR))
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_REF
            (AST_VAR))
        (NULL)
        (
            (AST_CALL
                (
                    (AST_VAR))))))