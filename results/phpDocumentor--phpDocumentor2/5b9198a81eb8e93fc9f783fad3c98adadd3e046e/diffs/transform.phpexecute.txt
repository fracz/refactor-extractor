||||||||  public function execute()
  {
    // initialize timer
    $timer = microtime(true);

    // initialize transformer
    $transformer = new DocBlox_Transformer();
    $transformer->setTarget($this->getTarget());
    $transformer->setSource($this->getSource());
    $transformer->setTemplates($this->getTemplate());

    // enable verbose mode if the flag was set
    if ($this->getVerbose())
    {
      $transformer->setLogLevel(DocBlox_Log::DEBUG);
    }
    if ($this->getQuiet())
    {
      $transformer->setLogLevel(DocBlox_Log::QUIET);
    }

    // start the transformation process
    if (!$this->getQuiet())
    {
      echo 'Starting transformation of files (this could take a while depending upon the size of your project)' . PHP_EOL;
    }
    $transformer->execute();
    if (!$this->getQuiet())
    {
      echo 'Finished transformation in ' . round(microtime(true) - $timer, 2) . ' seconds' . PHP_EOL;
    }
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_CONST)))
                                            (AST_VAR))
                                        (SCALAR))))
                            (SCALAR))
                        (AST_CONST)))))))