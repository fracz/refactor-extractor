||||||||  public function execute()
  {
    $results = array();

    $longest_name = 0;

    /** @var RecursiveDirectoryIterator $files */
    $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator(dirname(__FILE__).'/../'));
    while($files->valid())
    {
      // skip abstract files
      if (!$files->isFile() || ($files->getBasename() == 'Abstract.php'))
      {
        $files->next();
        continue;
      }

      // convert the filename to a class
      $class_name = 'DocBlox_Task_' . str_replace(DIRECTORY_SEPARATOR, '_' , $files->getSubPath())
        . '_' . $files->getBasename('.php');

      // check if the class exists, if so: add it to the list
      if(class_exists($class_name))
      {
        $name = $files->getBasename('.php');
        $longest_name = max(strlen($name), $longest_name);
        $results[strtolower($files->getSubPath())][strtolower($name)] = $files->getRealPath();
      }

      $files->next();
    }

    // echo the list of namespaces with their tasks
    foreach($results as $namespace => $tasks)
    {
      echo $namespace . PHP_EOL;
      foreach ($tasks as $task => $filename)
      {
        // get the short description by reflecting the file.
        $refl = new DocBlox_Reflection_File($filename, false);
        $refl->setLogLevel(DocBlox_Log::QUIET);
        $refl->process();

        /** @var DocBlox_Reflection_Class $class */
        $class = reset($refl->getClasses());
        echo ' :' . str_pad($task, $longest_name+2) . $class->getDocBlock()->getShortDescription() . PHP_EOL;
      }
    }
    echo PHP_EOL;
  }

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_NEW
                    (
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_MAGIC_CONST)))
                            (SCALAR)))))))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_CONST)
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ECHO
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_CONST))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))))
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_CONST)))))))
    (AST_ECHO
        (AST_CONST)))