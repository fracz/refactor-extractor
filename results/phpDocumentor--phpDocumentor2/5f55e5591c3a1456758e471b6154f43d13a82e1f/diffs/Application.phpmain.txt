    public function main($autoloader)
    {
        $runner = new DocBlox_Task_Runner(
            ($_SERVER['argc'] == 1)
            ? false
            : $_SERVER['argv'][1], 'project:run'
        );
        $task = $runner->getTask();

        if (!$task->getQuiet() && (!$task->getProgressbar())) {            DocBlox_Core_Application::renderVersion();
            DocBlox_Core_Application::renderVersion();
        } else {
            DocBlox_Core_Abstract::config()->logging->level = 'quiet';
        }

        if ($task->getVerbose()) {
            DocBlox_Core_Abstract::config()->logging->level = 'debug';
        }

        // the plugins are registered here because the DocBlox_Task can load a
        // custom configuration; which is needed by this registration
        DocBlox_Bootstrap::createInstance()->registerPlugins($autoloader);

        try {
            $task->execute();
        } catch (Exception $e) {
            if (!$task->getQuiet()) {
                echo 'ERROR: ' . $e->getMessage() . PHP_EOL . PHP_EOL;
                echo $task->getUsageMessage();
            }
            die(1);
        }
    }

    /**
     * Returns the version header.
     *
     * @return string
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_CONST)
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_STATIC_CALL)
                (AST_STATIC_CALL)))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_STATIC_CALL)))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_STATIC_CALL)))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_VAR)))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (
                                (AST_ECHO
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (AST_CONST))
                                        (AST_CONST)))
                                (AST_ECHO
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))
                    (AST_EXIT
                        (SCALAR)))))
        (NULL)))||||||||