    public function copyTo(ClassNode $class_or_interface)
    {
        // self returns this specific class and not the class of the current
        // object; thus we use get_class to retrieve it.
        $class = get_class($this);

        /** @var PropertyNode $inherited */
        $inherited = new $class(
            clone $this->getNode(), $this->nodes, $class_or_interface
        );

        $class_or_interface->getNode()->appendChild($inherited->getNode());

        $inherited->getNode()->appendChild(
            new \DOMElement('inherited_from', $this->class->getFQCN())
        );

        // store the origin of this element
        $inherited_from = new \DOMElement('tag');
        $inherited->getDocBlock()->getNode()->appendChild($inherited_from);
        $inherited_from->setAttribute('name', 'inherited_from');
        $inherited_from->setAttribute(
            'refers',
            $inherited->getReferrerString($this->class->getFQCN())
        );
        $inherited_from->setAttribute(
            'description',
            $inherited->getReferrerString($this->class->getFQCN())
        );

        // should not duplicate @todo or @deprecated; it only belongs
        // to the original instance
        $inherited->getDocBlock()->filterTags('todo');
        $inherited->getDocBlock()->filterTags('deprecated');
    }

    /**
     * Returns the full string identifier of this property.
     *
     * Example:
     *
     *     MyClass::$property
     *
     * @param string|null $parent_class_name The class name to use; if null
     *     uses the current class name.
     *
     * @return string
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)
            (
                (AST_CLONE
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_NEW
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR))))||||||||