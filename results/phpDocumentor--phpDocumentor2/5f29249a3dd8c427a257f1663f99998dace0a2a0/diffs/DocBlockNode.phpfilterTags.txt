    public function filterTags($name)
    {
        $removal = array();
        foreach ($this->getTags() as $tag) {
            if ($tag->getAttribute('name') == $name) {
                $removal[] = $tag;
            }
        }

        // separate in two steps because of unexpected behaviour DOMNodeList
        foreach ($removal as $tag) {
            $tag->parentNode->removeChild($tag);
        }
    }

    /**
     * Removes the `subpackage` index from the given list of tags if the `package`
     * of this class does not match its parent.
     *
     * @param DocBlockNode $parent Parent Docblock to check against.
     * @param string[]     &$tags  Array of inheritable tags to filter.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR))))))||||||||