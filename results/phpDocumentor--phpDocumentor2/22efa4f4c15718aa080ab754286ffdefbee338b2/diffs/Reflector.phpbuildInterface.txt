    public function buildInterface($data)
    {
        $assembler = new InterfaceAssembler();
        $interfaceDescriptor = $assembler->create($data);

        $interfaceDescriptor = $this->filterInternalTag($interfaceDescriptor);

        if ($interfaceDescriptor) {
            foreach ($data->getMethods() as $method) {
                $this->buildMethod($method, $interfaceDescriptor);
            }

            $this->validateElement($data, $interfaceDescriptor);
        }

        return $interfaceDescriptor;
    }

    /**
     * Builds a TraitDescriptor using a given Reflector.
     *
     * @param TraitReflector $data
     *
     * @return TraitDescriptor
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||