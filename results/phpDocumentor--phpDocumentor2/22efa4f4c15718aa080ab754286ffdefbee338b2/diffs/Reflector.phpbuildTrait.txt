    public function buildTrait($data)
    {
        $assembler = new TraitAssembler();
        $traitDescriptor = $assembler->create($data);

        $traitDescriptor = $this->filterInternalTag($traitDescriptor);

        if ($traitDescriptor) {
            foreach ($data->getMethods() as $method) {
                $this->buildMethod($method, $traitDescriptor);
            }
            foreach ($data->getProperties() as $property) {
                $this->buildProperty($property, $traitDescriptor);
            }

            $this->validateElement($data, $traitDescriptor);
        }

        return $traitDescriptor;
    }

    /**
     * Builds a ConstantDescriptor using a given Reflector and links it to a parent class or interface if provided.
     *
     * @param ClassReflector\ConstantReflector|ConstantReflector $data
     * @param ClassDescriptor|InterfaceDescriptor|null           $container
     *
     * @return ConstantDescriptor
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||