    public function buildProperty($data, $container)
    {
        $assembler = new PropertyAssembler();
        $propertyDescriptor = $assembler->create($data);

        $propertyDescriptor->setFullyQualifiedStructuralElementName(
            $container->getFullyQualifiedStructuralElementName()
            . '::' . $propertyDescriptor->getFullyQualifiedStructuralElementName()
        );

        $propertyDescriptor = $this->filterInternalTag($propertyDescriptor);
        if ($propertyDescriptor) {
            $this->validateElement($data, $propertyDescriptor);
            $this->addToContainer($propertyDescriptor, $container->getProperties());
        }

        return $propertyDescriptor;
    }

    /**
     * @param ClassReflector\MethodReflector $data
     * @param ClassDescriptor|InterfaceDescriptor|TraitDescriptor $container
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||