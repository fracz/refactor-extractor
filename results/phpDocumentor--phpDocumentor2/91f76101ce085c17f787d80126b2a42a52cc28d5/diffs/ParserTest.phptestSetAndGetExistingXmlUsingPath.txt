||||||||    public function testSetAndGetExistingXmlUsingPath()
    {
        $parser = new Parser();
        $xml = '<?xml version="1.0" ?><project version="1.0"></project>';

        $this->assertEquals(null, $parser->getExistingXml());

        $tmpfile = tempnam(sys_get_temp_dir(), 'PDT');
        file_put_contents($tmpfile, $xml);

        $parser->setExistingXml($tmpfile);
        $this->assertInstanceOf('DOMDocument', $parser->getExistingXml());
        $this->assertEquals('1.0', $parser->getExistingXml()->documentElement->getAttribute('version'));

        unlink($tmpfile);
    }

    /**
     * Tests whether an exception is thrown is the given value is an invalid file or XML string.
     *
     * @covers phpDocumentor\Parser\Parser::setExistingXml
     * @expectedException InvalidArgumentException
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL)
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (
                    (SCALAR)))))
    (AST_CALL
        (
            (AST_VAR))))