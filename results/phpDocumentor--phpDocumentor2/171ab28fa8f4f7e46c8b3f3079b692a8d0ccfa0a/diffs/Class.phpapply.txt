    public function apply(array &$super, $class_name)
    {
        // explicitly make a copy of the super array; every other element should
        // have the $super as reference, except class.
        // When $super is used by reference in this case then other classes will
        // be polluted with methods from sibling classes.
        $super_copy = $super;

        $class_name = current(
            $this->getDirectElementsByTagName($this->node, 'full_name')
        )->nodeValue;

        // the name is always the first encountered child element with
        // tag name 'name'
        $node_name = $this->getNodeName();
        $parent = current(
            $this->getDirectElementsByTagName($this->node, 'extends')
        )->nodeValue;

        // only process if the super has a node with this name
        if (isset($super_copy['classes'][$parent])) {
            $docblock = $this->getDocBlockElement();

            /** @var DOMElement $super_object  */
            $super_object = $super_copy['classes'][$parent]['object'];

            /** @var DOMElement $super_docblock  */
            $super_docblock = current(
                $this->getDirectElementsByTagName($super_object, 'docblock')
            );

            $super_class = current(
                $this->getDirectElementsByTagName($super_object, 'full_name')
            )->nodeValue;

            // add an element which defines which class' element you override
            $this->node->appendChild(new DOMElement('overrides-from', $super_class));

            if ($super_docblock)
            {
                $this->copyShortDescription($super_docblock, $docblock);
                $this->copyLongDescription($super_docblock, $docblock);
                $this->copyTags($this->inherited_tags, $super_docblock, $docblock);
            }
        }

        $super_copy['classes'][$node_name] = array(
            'class' => $class_name,
            'object' => $this->node
        );

        /** @var DOMElement[] $method */
        $methods = $this->getDirectElementsByTagName($this->node, 'method');
        $method_names = array();
        foreach ($methods as $method) {
            $method_names[] = $method->getElementsByTagName('name')->item(0)->nodeValue;

            // only process 'real' methods
            if ($method->getAttribute('inherited_from')) {
                continue;
            }
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Method($method);
            $inherit->apply($super_copy['methods'], $class_name);
        }

        // if a method present in the super classes but it is not declared
        // in this class then add it as an 'inherited_from' method.
        // explicitly do not updates the $super['methods'] array as this is mere
        // a virtual method and not one that counts for inheritance.
        foreach($super_copy['methods'] as $method_name => $method_collection) {
            // only copy methods that are not overridden and are not private
            if (in_array($method_name, $method_names)
                || ($method_collection['object']
                        ->getAttribute('visibility') == 'private')
            ) {
                continue;
            }

            // add an element 'inherited_from' to the method itself
            /** @var DOMElement $node */
            $node = clone $method_collection['object'];
            $this->node->appendChild($node);
            $node->appendChild(
                new DOMElement('inherited_from', $method_collection['class'])
            );

            // get the docblock or create a new one if it doesn't exist
            $docblocks = $node->getElementsByTagName('docblock');
            if ($docblocks->length == 0) {
                $docblock = new DOMElement('docblock');
                $node->appendChild($docblock);
            } else {
                $docblock = $docblocks->item(0);
            }

            // adds a new inherited_from to signify that this method is not
            // declared in this class but inherited from a base class
            $inherited_from_tag = new DOMElement('tag');
            $docblock->appendChild($inherited_from_tag);
            $inherited_from_tag->setAttribute('name', 'inherited_from');
            $inherited_from_tag->setAttribute(
                'refers',
                $method_collection['class'].'::'.$method_name.'()'
            );
            $inherited_from_tag->setAttribute(
                'description',
                $method_collection['class'].'::'.$method_name.'()'
            );
        }

        /** @var DOMElement[] $method */
        $property_names = array();
        $properties = $this->getDirectElementsByTagName($this->node, 'property');
        foreach ($properties as $property) {
            $property_names[] = $property->getElementsByTagName('name')->item(0)->nodeValue;

            // only process 'real' methods
            if ($property->getAttribute('inherited_from')) {
                continue;
            }
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Property($property);
            $inherit->apply($super_copy['properties'], $class_name);
        }

        // if a property is present in the super classes but it is not declared
        // in this class then add it as an 'inherited_from' property.
        // explicitly do not updates the $super['properties'] array as this is
        // mere a virtual property and not one that counts for inheritance.
        foreach ($super_copy['properties'] as $property_name => $property_collection) {
            // only copy methods that are not overridden and are not private
            if (in_array($property_name, $property_names)
                || ($property_collection['object']
                            ->getAttribute('visibility') == 'private')
            ) {
                continue;
            }

            // add an element 'inherited_from' to the method itself
            /** @var DOMElement $node */
            $node = clone $property_collection['object'];
            $this->node->appendChild($node);
            $node->appendChild(
                new DOMElement('inherited_from', $property_collection['class'])
            );

            // get the docblock or create a new one if it doesn't exist
            $docblocks = $node->getElementsByTagName('docblock');
            if ($docblocks->length == 0) {
                $docblock = new DOMElement('docblock');
                $node->appendChild($docblock);
            } else {
                $docblock = $docblocks->item(0);
            }

            // adds a new inherited_from to signify that this method is not
            // declared in this class but inherited from a base class
            $inherited_from_tag = new DOMElement('tag');
            $docblock->appendChild($inherited_from_tag);
            $inherited_from_tag->setAttribute('name', 'inherited_from');
            $inherited_from_tag->setAttribute(
                'refers',
                $property_collection['class'] . '::' . $property_name
            );
            $inherited_from_tag->setAttribute(
                'description',
                $property_collection['class'] . '::' . $property_name
            );
        }

        // apply inheritance to every class or interface extending this one
        $xpath = new DOMXPath($this->document);
        $result = $xpath->query(
            '/project/file/*[extends="' . $class_name . '"'
            . ' or implements="' . $class_name . '"]'
        );
        foreach ($result as $node)
        {
            $child_class_name = $node->getElementsByTagName('full_name')
                ->item(0)->nodeValue;

            if (!$child_class_name)
            {
                throw new Exception(
                    'A class was encountered with no FQCN. This should not ' .
                    'happen; please contact the DocBlox developers to have them '
                    . 'analyze this issue'
                );
            }

            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Class(
                $node, $this->document
            );
            $inherit->apply($super_copy, $class_name);
        }
    }

    /**
     * Override the parent's copyTags method to check whether the package names
     * match; if not: do not copy the subpackage.
     *
     * Frameworks often extend classes from other frameworks; and applications
     * extend classes of frameworks.
     *
     * Without this check when the framework specifies a subpackage but the
     * extending class would not; and the packages would not match. Then a
     * subpackage would be applied that is not applicable to this item.
     *
     * Additionally; this package/subpackage combination would not be present in
     * the package index int he structure file and the classes would never be
     * shown in the navigation.
     *
     * @param string[]   $tag_types      List of allowed tag types.
     * @param DOMElement $super_docblock Super class' docblock.
     * @param DOMElement $docblock       Sub class' docblock.
     *
     * @return void
     */
||||||||    public function apply(array &$super, $class_name)
    {
        // explicitly make a copy of the super array; every other element should
        // have the $super as reference, except class.
        // When $super is used by reference in this case then other classes will
        // be polluted with methods from sibling classes.
        $super_copy = $super;

        $class_name = current(
            $this->getDirectElementsByTagName($this->node, 'full_name')
        )->nodeValue;

        // the name is always the first encountered child element with
        // tag name 'name'
        $node_name = $this->getNodeName();
        $parent = current(
            $this->getDirectElementsByTagName($this->node, 'extends')
        )->nodeValue;

        // only process if the super has a node with this name
        if (isset($super_copy['classes'][$parent])) {
            $docblock = $this->getDocBlockElement();

            /** @var DOMElement $super_object  */
            $super_object = $super_copy['classes'][$parent]['object'];

            /** @var DOMElement $super_docblock  */
            $super_docblock = current(
                $this->getDirectElementsByTagName($super_object, 'docblock')
            );

            $super_class = current(
                $this->getDirectElementsByTagName($super_object, 'full_name')
            )->nodeValue;

            // add an element which defines which class' element you override
            $this->node->appendChild(new DOMElement('overrides-from', $super_class));

            if ($super_docblock)
            {
                $this->copyShortDescription($super_docblock, $docblock);
                $this->copyLongDescription($super_docblock, $docblock);
                $this->copyTags($this->inherited_tags, $super_docblock, $docblock);
            }
        }

        $super_copy['classes'][$node_name] = array(
            'class' => $class_name,
            'object' => $this->node
        );

        /** @var DOMElement[] $method */
        $methods = $this->getDirectElementsByTagName($this->node, 'method');
        $method_names = array();
        foreach ($methods as $method) {
            $method_names[] = $method->getElementsByTagName('name')->item(0)->nodeValue;

            // only process 'real' methods
            if ($method->getAttribute('inherited_from')) {
                continue;
            }
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Method($method);
            $inherit->apply($super_copy['methods'], $class_name);
        }

        // if a method present in the super classes but it is not declared
        // in this class then add it as an 'inherited_from' method.
        // explicitly do not updates the $super['methods'] array as this is mere
        // a virtual method and not one that counts for inheritance.
        foreach($super_copy['methods'] as $method_name => $method_collection) {
            // only copy methods that are not overridden and are not private
            if (in_array($method_name, $method_names)
                || ($method_collection['object']
                        ->getAttribute('visibility') == 'private')
            ) {
                continue;
            }

            // add an element 'inherited_from' to the method itself
            /** @var DOMElement $node */
            $node = clone $method_collection['object'];
            $this->node->appendChild($node);
            $node->appendChild(
                new DOMElement('inherited_from', $method_collection['class'])
            );

            // get the docblock or create a new one if it doesn't exist
            $docblocks = $node->getElementsByTagName('docblock');
            if ($docblocks->length == 0) {
                $docblock = new DOMElement('docblock');
                $node->appendChild($docblock);
            } else {
                $docblock = $docblocks->item(0);
            }

            // adds a new inherited_from to signify that this method is not
            // declared in this class but inherited from a base class
            $inherited_from_tag = new DOMElement('tag');
            $docblock->appendChild($inherited_from_tag);
            $inherited_from_tag->setAttribute('name', 'inherited_from');
            $inherited_from_tag->setAttribute(
                'refers',
                $method_collection['class'].'::'.$method_name.'()'
            );
            $inherited_from_tag->setAttribute(
                'description',
                $method_collection['class'].'::'.$method_name.'()'
            );
        }

        /** @var DOMElement[] $method */
        $property_names = array();
        $properties = $this->getDirectElementsByTagName($this->node, 'property');
        foreach ($properties as $property) {
            $property_names[] = $property->getElementsByTagName('name')->item(0)->nodeValue;

            // only process 'real' methods
            if ($property->getAttribute('inherited_from')) {
                continue;
            }
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Property($property);
            $inherit->apply($super_copy['properties'], $class_name);
        }

        // if a property is present in the super classes but it is not declared
        // in this class then add it as an 'inherited_from' property.
        // explicitly do not updates the $super['properties'] array as this is
        // mere a virtual property and not one that counts for inheritance.
        foreach ($super_copy['properties'] as $property_name => $property_collection) {
            // only copy methods that are not overridden and are not private
            if (in_array($property_name, $property_names)
                || ($property_collection['object']
                            ->getAttribute('visibility') == 'private')
            ) {
                continue;
            }

            // add an element 'inherited_from' to the method itself
            /** @var DOMElement $node */
            $node = clone $property_collection['object'];
            $this->node->appendChild($node);
            $node->appendChild(
                new DOMElement('inherited_from', $property_collection['class'])
            );

            // get the docblock or create a new one if it doesn't exist
            $docblocks = $node->getElementsByTagName('docblock');
            if ($docblocks->length == 0) {
                $docblock = new DOMElement('docblock');
                $node->appendChild($docblock);
            } else {
                $docblock = $docblocks->item(0);
            }

            // adds a new inherited_from to signify that this method is not
            // declared in this class but inherited from a base class
            $inherited_from_tag = new DOMElement('tag');
            $docblock->appendChild($inherited_from_tag);
            $inherited_from_tag->setAttribute('name', 'inherited_from');
            $inherited_from_tag->setAttribute(
                'refers',
                $property_collection['class'] . '::' . $property_name
            );
            $inherited_from_tag->setAttribute(
                'description',
                $property_collection['class'] . '::' . $property_name
            );
        }

        // apply inheritance to every class or interface extending this one
        $xpath = new DOMXPath($this->document);
        $result = $xpath->query(
            '/project/file/class[extends="' . $class_name . '"'
            . ' or implements="' . $class_name . '"]'
            . '|/project/file/interface[extends="' . $class_name . '"]'
        );
        foreach ($result as $node)
        {
            $child_class_name = $node->getElementsByTagName('full_name')
                ->item(0)->nodeValue;

            if (!$child_class_name)
            {
                throw new Exception(
                    'A class was encountered with no FQCN. This should not ' .
                    'happen; please contact the DocBlox developers to have them '
                    . 'analyze this issue'
                );
            }

            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Class(
                $node, $this->document
            );
            $inherit->apply($super_copy, $class_name);
        }
    }

    /**
     * Override the parent's copyTags method to check whether the package names
     * match; if not: do not copy the subpackage.
     *
     * Frameworks often extend classes from other frameworks; and applications
     * extend classes of frameworks.
     *
     * Without this check when the framework specifies a subpackage but the
     * extending class would not; and the packages would not match. Then a
     * subpackage would be applied that is not applicable to this item.
     *
     * Additionally; this package/subpackage combination would not be present in
     * the package index int he structure file and the classes would never be
     * shown in the navigation.
     *
     * @param string[]   $tag_types      List of allowed tag types.
     * @param DOMElement $super_docblock Super class' docblock.
     * @param DOMElement $docblock       Sub class' docblock.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_NEW
                            (
                                (SCALAR)
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_VAR))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (SCALAR)))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CLONE
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (SCALAR)))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CLONE
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_NEW
                            (
                                (SCALAR)
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_VAR))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (SCALAR)))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CLONE
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (SCALAR)))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CLONE
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR))))))