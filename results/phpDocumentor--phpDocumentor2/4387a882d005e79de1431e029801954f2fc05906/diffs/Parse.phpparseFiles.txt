    protected function parseFiles()
    {
        // read the filename argument in search for files (wildcards are explicitly allowed)
        $expressions = array_unique(
            $this->getFilename()
            ? explode(',', $this->getFilename())
            : DocBlox_Core_Abstract::config()->getArrayFromPath('files/file')
        );

        $files = array();
        foreach ($expressions as $expr) {
            // search file(s) with the given expressions
            $result = glob($expr);
            foreach ($result as $file) {
                // if the path is not a file OR it's extension does not match the given, then do not process it.
                if (!is_file($file) || !in_array(strtolower(pathinfo($file, PATHINFO_EXTENSION)), $this->getExtensions())) {
                    continue;
                }

                $files[] = realpath($file);
            }
        }

        $expressions = array_unique(
            $this->getDirectory() || !empty($files)
            ? explode(',', $this->getDirectory())
            : DocBlox_Core_Abstract::config()->getArrayFromPath('files/directory')
        );

        foreach ($expressions as $directory) {
            // if the given is not a directory, skip it
            if (!is_dir($directory)) {
                continue;
            }

            // get all files recursively to the files array
            $files_iterator = new RecursiveDirectoryIterator($directory);

            // add the CATCH_GET_CHILD option to make sure that an unreadable directory does not halt process but
            // skip that folder
            $recursive_iterator = new RecursiveIteratorIterator(
                $files_iterator, RecursiveIteratorIterator::LEAVES_ONLY, RecursiveIteratorIterator::CATCH_GET_CHILD
            );

            /** @var SplFileInfo $file */
            foreach ($recursive_iterator as $file) {
                // skipping dots (should any be encountered)
                if (($file->getFilename() == '.') || ($file->getFilename() == '..')) {
                    continue;
                }

                // check if the file has the correct extension
                if (!in_array(strtolower(pathinfo($file, PATHINFO_EXTENSION)), $this->getExtensions())) {
                    continue;
                }

                // Phar files return false on a call to getRealPath
                $files[] = (substr($file->getPathname(), 0, 7) != 'phar://')
                    ? $file->getRealPath()
                    : $file->getPathname();
            }
        }

        return array_unique($files);
    }

    /**
     * Returns the list of markers to scan for and summize in their separate page.
     *
     * @return string[]
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONDITIONAL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)
                                                            (AST_CONST)))))
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_VAR))))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_CONST)))))
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))||||||||