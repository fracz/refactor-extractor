||||||||    public function testDebug()
    {
        // set up mocks for the dispatcher and the generated event.
        $event_dispatcher = $this->getMock(
            'sfEventDispatcher', array('notify')
        );
        $event = $this->getMock(
            'sfEvent',
            array('getReturnValue'),
            array($this->fixture, 'system.debug', array(
                'message' => 'body'
            ))
        );

        // the event dispatcher's notify method will be invoken and return the
        // expected event
        $event_dispatcher
            ->expects($this->once())
            ->method('notify')
            ->will($this->returnValue($event));

        // we will let the event return true to test whether the return value
        // is actually returned
        $event->expects($this->once())
            ->method('getReturnValue')
            ->will($this->returnValue(true));

        // test without setting the dispatcher
        DocBlox_Parser_Abstract::$event_dispatcher = $event_dispatcher;
        $this->fixture->debug('body');
    }

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR))))