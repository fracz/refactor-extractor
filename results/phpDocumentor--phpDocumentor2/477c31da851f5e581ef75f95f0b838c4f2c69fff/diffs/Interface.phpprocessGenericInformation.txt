  protected function processGenericInformation(DocBlox_Token_Iterator $tokens)
  {
    // retrieve generic information about the class
    $this->setName($this->extractClassName($tokens));
    $this->doc_block = $this->findDocBlock($tokens);

    // parse a EXTENDS section
    $extends = $tokens->gotoNextByType(T_EXTENDS, 5, array('{'));
    $this->extends = ($extends) ? true : false;
    $this->extendsFrom = ($extends) ? $this->extractClassName($tokens) : null;

    // Parse an eventual implements section: implements _always_ follows extends
    $implements = $tokens->gotoNextByType(T_IMPLEMENTS, 5, array('{'));
    $interfaces = array();
    if ($implements)
    {
      do
      {
        $interfaces[] = $this->extractClassName($tokens);
      } while ($tokens->next()->getContent() == ',');
    }

    $this->implements = ($implements) ? true : false;
    $this->interfaces = $interfaces;
  }

  /**
   * Processes a T_CONST token found inside a class / interface definition.
   *
   * @param DocBlox_Token_Iterator $tokens
   *
   * @return void
   */
||||||||  protected function processGenericInformation(DocBlox_Token_Iterator $tokens)
  {
    // retrieve generic information about the class
    $this->setName($this->extractClassName($tokens));
    $this->doc_block = $this->findDocBlock($tokens);

    // parse a EXTENDS section
    $extends = $tokens->gotoNextByType(T_EXTENDS, 5, array('{'));
    $this->extends = ($extends) ? true : false;
    $this->extendsFrom = ($extends) ? $this->extractClassName($tokens) : null;

    // Parse an eventual implements section: implements _always_ follows extends
    $implements = $tokens->gotoNextByType(T_IMPLEMENTS, 5, array('{'));
    $interfaces = array();
    if ($implements)
    {
      do
      {
        $interfaces[] = $this->extractClassName($tokens);
      } while ($tokens->next()->content == ',');
    }

    $this->implements = ($implements) ? true : false;
    $this->interfaces = $interfaces;
  }

  /**
   * Processes a T_CONST token found inside a class / interface definition.
   *
   * @param DocBlox_Token_Iterator $tokens
   *
   * @return void
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_DO_WHILE
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_DO_WHILE
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))