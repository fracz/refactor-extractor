  protected function processGenericInformation(DocBlox_Token_Iterator $tokens)
  {
    if ($tokens->current()->getContent() == 'define')
    {
      // find the first encapsed string and strip the opening and closing
      // apostrophe
      $name_token = $tokens->gotoNextByType(
          T_CONSTANT_ENCAPSED_STRING, 5, array(',')
      );

      if (!$name_token)
      {
          $this->log(
              'Unable to process constant in file ' . $tokens->getFilename()
              . ' at line ' . $tokens->current()->getLineNumber(),
              DocBlox_Core_Log::CRIT
          );
          return;
      }

      $this->setName(substr($name_token->getContent(), 1, -1));

      // skip to after the comma
      while($tokens->current()->getContent() != ',')
      {
        if ($tokens->next() === false)
        {
          break;
        }
      }

      // get everything until the closing brace and use that for value, take child parenthesis under consideration
      $value = '';
      $level = 0;
      while (!(($tokens->current()->getContent() == ')') && ($level == -1)))
      {
        if ($tokens->next() === false)
        {
          break;
        }

        switch($tokens->current()->getContent())
        {
          case '(': $level++; break;
          case ')': $level--; break;
        }

        $value .= $tokens->current()->getContent();
      }

      $this->setValue(trim(substr($value, 0, -1)));
    }
    else
    {
      $this->setName($tokens->gotoNextByType(T_STRING, 5, array('='))->getContent());
      $this->setValue($this->findDefault($tokens));
    }

    parent::processGenericInformation($tokens);
  }

  /**
   * Stores the value contained in this constant.
   *
   * @param string $value
   *
   * @return void
   */
||||||||  protected function processGenericInformation(DocBlox_Token_Iterator $tokens)
  {
    if ($tokens->current()->content == 'define')
    {
      // find the first encapsed string and strip the opening and closing
      // apostrophe
      $name_token = $tokens->gotoNextByType(
          T_CONSTANT_ENCAPSED_STRING, 5, array(',')
      );

      if (!$name_token)
      {
          $this->log(
              'Unable to process constant in file ' . $tokens->getFilename()
              . ' at line ' . $tokens->current()->getLineNumber(),
              DocBlox_Core_Log::CRIT
          );
          return;
      }

      $this->setName(substr($name_token->content, 1, -1));

      // skip to after the comma
      while($tokens->current()->content != ',')
      {
        if ($tokens->next() === false)
        {
          break;
        }
      }

      // get everything until the closing brace and use that for value, take child parenthesis under consideration
      $value = '';
      $level = 0;
      while (!(($tokens->current()->content == ')') && ($level == -1)))
      {
        if ($tokens->next() === false)
        {
          break;
        }

        switch($tokens->current()->content)
        {
          case '(': $level++; break;
          case ')': $level--; break;
        }

        $value .= $tokens->current()->content;
      }

      $this->setValue(trim(substr($value, 0, -1)));
    }
    else
    {
      $this->setName($tokens->gotoNextByType(T_STRING, 5, array('='))->content);
      $this->setValue($this->findDefault($tokens));
    }

    parent::processGenericInformation($tokens);
  }

  /**
   * Stores the value contained in this constant.
   *
   * @param string $value
   *
   * @return void
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))))
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (AST_RETURN
                                (NULL)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)
                                (AST_UNARY_OP
                                    (SCALAR))))))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_BREAK
                                        (NULL)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_WHILE
                    (AST_UNARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (SCALAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_BREAK
                                        (NULL)))))
                        (AST_SWITCH
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_SWITCH_LIST
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_POST_INC
                                            (AST_VAR))
                                        (AST_BREAK
                                            (NULL))))
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_POST_DEC
                                            (AST_VAR))
                                        (AST_BREAK
                                            (NULL))))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_UNARY_OP
                                            (SCALAR))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONST)
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))))
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (AST_RETURN
                                (NULL)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)
                                (AST_UNARY_OP
                                    (SCALAR))))))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_BREAK
                                        (NULL)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_WHILE
                    (AST_UNARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (SCALAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_BREAK
                                        (NULL)))))
                        (AST_SWITCH
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_SWITCH_LIST
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_POST_INC
                                            (AST_VAR))
                                        (AST_BREAK
                                            (NULL))))
                                (AST_SWITCH_CASE
                                    (SCALAR)
                                    (
                                        (AST_POST_DEC
                                            (AST_VAR))
                                        (AST_BREAK
                                            (NULL))))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_UNARY_OP
                                            (SCALAR))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))