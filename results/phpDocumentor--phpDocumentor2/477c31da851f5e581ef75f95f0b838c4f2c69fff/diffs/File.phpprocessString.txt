    protected function processString(DocBlox_Token_Iterator $tokens)
    {
        /** @var DocBlox_Token $token  */
        $token = $tokens->current();
        switch ($token->getContent()) {
        case 'define':
            $this->resetTimer('constant');

            $constant = new DocBlox_Reflection_Constant();
            $constant->setFilename($this->filename);
            $constant->setNamespace($this->active_namespace);
            $constant->setNamespaceAliases($this->namespace_aliases);
            $constant->parseTokenizer($tokens);

            $this->debugTimer(
                '>> Processed define: ' . $constant->getName(),
                'constant'
            );

            $this->constants[$constant->getName()] = $constant;
            break;
        }
    }

    /**
     * Parses a require definition and adds it to the includes array.
     *
     * @param DocBlox_Token_Iterator $tokens Tokens to interpret with the
     *      pointer at the token to be processed.
     *
     * @return void
     */
||||||||    protected function processString(DocBlox_Token_Iterator $tokens)
    {
        /** @var DocBlox_Token $token  */
        $token = $tokens->current();
        switch ($token->content) {
        case 'define':
            $this->resetTimer('constant');

            $constant = new DocBlox_Reflection_Constant();
            $constant->setFilename($this->filename);
            $constant->setNamespace($this->active_namespace);
            $constant->setNamespaceAliases($this->namespace_aliases);
            $constant->parseTokenizer($tokens);

            $this->debugTimer(
                '>> Processed define: ' . $constant->getName(),
                'constant'
            );

            $this->constants[$constant->getName()] = $constant;
            break;
        }
    }

    /**
     * Parses a require definition and adds it to the includes array.
     *
     * @param DocBlox_Token_Iterator $tokens Tokens to interpret with the
     *      pointer at the token to be processed.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_SWITCH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))
                    (AST_BREAK
                        (NULL)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_SWITCH
        (AST_PROP
            (AST_VAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))
                    (AST_BREAK
                        (NULL)))))))