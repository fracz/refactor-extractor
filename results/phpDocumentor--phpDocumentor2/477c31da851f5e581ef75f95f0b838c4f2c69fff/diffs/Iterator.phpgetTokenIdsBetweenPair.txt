  protected function getTokenIdsBetweenPair($start_literal, $end_literal)
  {
    // store current position
    $index = $this->key();

    // initialize basic variables
    $level = -1;
    $start = null;
    $end   = null;

    // iterate through the list until a matching pair is found
    $this->next();
    while ($this->valid())
    {
      $token = $this->current();

      // only respond to literals
      if (($token->getType() !== null))
      {
        $this->next();
        continue;
      }

      // if the literal is the same as our starting literal then increase the nesting level
      if($token->getContent() == $start_literal)
      {
        // if the nesting level is -1 then we found our opening brace
        if ($level == -1)
        {
          // increase the level an additional time because we started at -1
          $level++;
          $start = $this->key();
        }
        $level++;
        $this->next();
        continue;
      }
      elseif ($token->getContent() == $end_literal)
      {
        if ($level == -1)
        {
          // expect the first brace to be an opening brace
          break;
        }
        $level--;

        // reached the end!
        if ($level === 0)
        {
          $end = $this->key();
          break;
        }

        $this->next();
        continue;
      }

      $this->next();
    }

    // return to the last position
    $this->seek($index);

    return array(
      $start,
      $end
    );
  }

  /**
   * Returns the starting and ending position of the next curly braces pair, i.e. {}.
   *
   * @return int[]
   */
||||||||  protected function getTokenIdsBetweenPair($start_literal, $end_literal)
  {
    // store current position
    $index = $this->key();

    // initialize basic variables
    $level = -1;
    $start = null;
    $end   = null;

    // iterate through the list until a matching pair is found
    $this->next();
    while ($this->valid())
    {
      $token = $this->current();

      // only respond to literals
      if (($token->type !== null))
      {
        $this->next();
        continue;
      }

      // if the literal is the same as our starting literal then increase the nesting level
      if($token->content == $start_literal)
      {
        // if the nesting level is -1 then we found our opening brace
        if ($level == -1)
        {
          // increase the level an additional time because we started at -1
          $level++;
          $start = $this->key();
        }
        $level++;
        $this->next();
        continue;
      }
      elseif ($token->content == $end_literal)
      {
        if ($level == -1)
        {
          // expect the first brace to be an opening brace
          break;
        }
        $level--;

        // reached the end!
        if ($level === 0)
        {
          $end = $this->key();
          break;
        }

        $this->next();
        continue;
      }

      $this->next();
    }

    // return to the last position
    $this->seek($index);

    return array(
      $start,
      $end
    );
  }

  /**
   * Returns the starting and ending position of the next curly braces pair, i.e. {}.
   *
   * @return int[]
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR)))
                                (
                                    (AST_POST_INC
                                        (AST_VAR))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))
                        (AST_POST_INC
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR)))
                                (
                                    (AST_BREAK
                                        (NULL)))))
                        (AST_POST_DEC
                            (AST_VAR))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_BREAK
                                        (NULL)))))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR)))
                                (
                                    (AST_POST_INC
                                        (AST_VAR))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))
                        (AST_POST_INC
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR)))
                                (
                                    (AST_BREAK
                                        (NULL)))))
                        (AST_POST_DEC
                            (AST_VAR))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_BREAK
                                        (NULL)))))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))))