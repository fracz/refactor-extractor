    public function parseFiles(Collection $files, $include_source = false)
    {
        $reflector = new Reflector();

        $timer = microtime(true);
        $paths = $this->getFilenames($files);

        if (!$this->isForced()) {

        }

        $this->log('  Project root is:  ' . $files->getProjectRoot());
        $this->log(
            '  Ignore paths are: ' . implode(', ', $files->getIgnorePatterns()->getArrayCopy())
        );

        foreach ($paths as $filename) {
            if (class_exists('phpDocumentor\Event\Dispatcher')) {
                Dispatcher::getInstance()->dispatch(
                    'parser.file.pre',
                    PreFileEvent::createInstance($this)->setFile($filename)
                );
            }
            $this->log('Starting to parse file: ' . $filename);

            $dispatched = false;
            try {
                $file = new FileReflector($filename, $this->doValidation(), $this->getEncoding());
                $file->setDefaultPackageName($this->getDefaultPackageName());
                $file->setMarkers($this->getMarkers());
                $file->setFilename($this->getRelativeFilename($filename));

                if (class_exists('phpDocumentor\Event\Dispatcher')) {
                    Dispatcher::getInstance()->addListener('parser.log', array($file, 'addParserMarker'));
                    $dispatched = true;
                }

                $file->process();
                $reflector->buildFile($file);
            } catch (Exception $e) {
                $this->log(
                    '  Unable to parse file "' . $filename . '", an error was detected: ' . $e->getMessage(),
                    \phpDocumentor\Plugin\Core\Log::ALERT
                );
            }

            // Disconnects the dispatcher here so if any error occurred, it still removes the event
            if ($dispatched && isset($file)) {
                Dispatcher::getInstance()->removeListener('parser.log', array($file, 'addParserMarker'));
            }

            $this->log(
                '>> Memory after processing of file: ' . number_format(memory_get_usage()) . ' bytes',
                \phpDocumentor\Plugin\Core\Log::DEBUG
            );
        }
        $this->log('Elapsed time to parse all files: ' . round(microtime(true) - $timer, 2) . 's');
        $this->log('Peak memory usage: '. round(memory_get_peak_usage() / 1024 / 1024, 2) . 'M');

        return '';
    }

    /**
     * @param \phpDocumentor\Fileset\Collection $files
     *
     * @throws FilesNotFoundException if no files were found.
     *
     * @return \string[]
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))
                                    (
                                        (AST_VAR))))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (SCALAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL)
                                    (
                                        (SCALAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (NULL)))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONST)))))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))))
                (NULL))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_ISSET
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_CALL))))
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_CONST)))
                                (AST_VAR))
                            (SCALAR))))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CALL)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))))
                (SCALAR))))
    (AST_RETURN
        (SCALAR)))||||||||