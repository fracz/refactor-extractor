    public function process(DOMDocument $xml)
    {
        if ($this->logger) {
            $this->logger->log('Adding path information to each xml "file" tag');
        }

        $xpath = new DOMXPath($xml);

        // get all interfaces that do not extend from anything or whose extend
        // is not featured in this project; these are considered root nodes.
        /** @var DOMElement[] $result */
        $result = $xpath->query(
            '/project/file/interface[extends=""]' .
            '|/project/file/interface[not(extends = /project/file/class/full_name)]'
        );
        foreach ($result as $node)
        {
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Interface(
                $node, $xpath
            );
            $super = array('classes' => array(), 'properties' => array(), 'methods' => array());
            $inherit->apply($super, null);
        }

        // get all classes that do not extend from anything or whose extend
        // is not featured in this project; these are considered root nodes.
        /** @var DOMElement[] $result */
        $result = $xpath->query(
            '/project/file/class[extends=""]' .
            '|/project/file/class[not(extends = /project/file/class/full_name)]'
        );
        foreach ($result as $node)
        {
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Class(
                $node, $xpath
            );
            $super = array('classes' => array(), 'properties' => array(), 'methods' => array());
            $inherit->apply($super, null);
        }

        return $xml;
    }
}||||||||    public function process(DOMDocument $xml)
    {
        if ($this->logger) {
            $this->logger->log('Adding path information to each xml "file" tag');
        }

        $xpath = new DOMXPath($xml);

        // get all interfaces that do not extend from anything or whose extend
        // is not featured in this project; these are considered root nodes.
        /** @var DOMElement[] $result */
        $result = $xpath->query(
            '/project/file/interface[extends=""]' .
            '|/project/file/interface[not(extends = /project/file/class/full_name)]'
        );
        foreach ($result as $node)
        {
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Interface(
                $node, $xpath
            );
            $super = array('classes' => array(), 'properties' => array(), 'methods' => array());
            $inherit->apply($super, null);
        }

        // get all classes that do not extend from anything or whose extend
        // is not featured in this project; these are considered root nodes.
        /** @var DOMElement[] $result */
        $result = $xpath->query(
            '/project/file/class[extends=""]' .
            '|/project/file/class[not(extends = /project/file/class/full_name)]'
        );
        foreach ($result as $node)
        {
            $inherit = new DocBlox_Transformer_Behaviour_Inherit_Node_Class(
                $node, $xpath
            );

            $methods = array();

            // shut up operator is necessary to silence autoloaders
            $parent_class_name = $node->getElementsByTagName('extends')
                ->item(0)->nodeValue;
            if (@class_exists($parent_class_name)) {
                $refl = new ReflectionClass($parent_class_name);

                /** @var ReflectionMethod $method */
                foreach($refl->getMethods() as $method) {
                    if ($method->isPrivate()) {
                        continue;
                    }

                    $node_name = new DOMElement('name', $method->getName());
                    $method_node = $xml->createElement('method');
                    $method_node->appendChild($node_name);
                    $method_node->setAttribute('final', $method->isFinal() ? 'true' : 'false');
                    $method_node->setAttribute('abstract', $method->isAbstract() ? 'true' : 'false');
                    $method_node->setAttribute('static', $method->isStatic() ? 'true' : 'false');
                    $method_node->setAttribute(
                        'visibility',
                        $method->isPublic() ? 'public' : 'protected'
                    );

                    $methods[$method->getName()] = array(
                        'class'  => $parent_class_name,
                        'object' => $method_node
                    );
                }
            }

            $super = array(
                'classes' => array(),
                'properties' => array(),
                'methods' => $methods
            );

            $inherit->apply($super, null);
        }

        return $xml;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_VAR))))
                        (AST_FOREACH
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (AST_CONTINUE
                                                (NULL)))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR)
                                            (SCALAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR)
                                            (SCALAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR)
                                            (SCALAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR)
                                            (SCALAR))))
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_VAR)))