||||||||    protected function createFileReflector(ProjectDescriptorBuilder $builder, $filename)
    {
        $file = new FileReflector($filename, $this->doValidation(), $this->getEncoding());
        $file->setDefaultPackageName($this->getDefaultPackageName());
        $file->setMarkers($this->getMarkers());
        $file->setFilename($this->getRelativeFilename($filename));

        $cachedFiles = $builder->getProjectDescriptor()->getFiles();
        $hash        = $cachedFiles->get($file->getFilename())
            ? $cachedFiles->get($file->getFilename())->getHash()
            : null;

        return $hash === $file->getHash() && !$this->isForced()
            ? null
            : $file;
    }

    /**
     * Writes the errors found in the Descriptor to the log.
     *
     * @param FileDescriptor $fileDescriptor
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CONST)))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_CONST)
            (AST_VAR))))