||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        if ($input->getOption('progressbar')) {
            \phpDocumentor_Parser_Abstract::$event_dispatcher->connect(
                'parser.file.pre', array($this, 'echoProgress')
            );
//            $this->setQuiet(true);
        }

        $target = $this->getTarget($input->getOption('target'));

        $files = new \phpDocumentor_Parser_Files();
        $files->setAllowedExtensions($input->getOption('extensions'));
        $files->setIgnorePatterns($input->getOption('ignore'));
        $files->setIgnoreHidden(!$input->getOption('hidden'));
        $files->setFollowSymlinks(!$input->getOption('ignore-symlinks'));

//        $paths = array_unique(
//            $this->getFilename()
//            ? explode(',', $this->getFilename())
//            : phpDocumentor_Core_Abstract::config()->getArrayFromPath('files/file')
//        );
        $files->addFiles($input->getOption('filename'));

//        $paths = array_unique(
//            $this->getDirectory()
//            ? explode(',', $this->getDirectory())
//            : phpDocumentor_Core_Abstract::config()->getArrayFromPath('files/directory')
//        );

        $files->addDirectories($input->getOption('directory'));

        $parser = new \phpDocumentor_Parser();
        $parser->setTitle(htmlentities($input->getOption('title')));
        $parser->setExistingXml($target);
        $parser->setForced($input->getOption('force'));
        $parser->setMarkers($input->getOption('markers'));
        $parser->setIgnoredTags($input->getOption('ignore-tags'));
        $parser->setValidate($input->getOption('validate'));
        $parser->setVisibility($input->getOption('visibility'));
        $parser->setDefaultPackageName($input->getOption('defaultpackagename'));

        $parser->setPath($files->getProjectRoot());

        try {
            // save the generate file to the path given as the 'target' option
            file_put_contents(
                $target,
                $parser->parseFiles($files, $input->getOption('sourcecode'))
            );
        } catch (\Exception $e) {
            if ($e->getCode() === \phpDocumentor_Parser_Exception::NO_FILES_FOUND) {
                throw new \Exception(
                    'No parsable files were found, did you specify any using '
                    . 'the -f or -d parameter?'
                );
            }

            throw new \Exception($e->getMessage());
        }
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (SCALAR))))))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL)))