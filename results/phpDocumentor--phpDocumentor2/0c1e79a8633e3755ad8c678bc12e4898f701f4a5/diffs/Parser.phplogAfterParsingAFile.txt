||||||||    protected function logAfterParsingAFile($memory)
    {
        if (!$this->stopwatch) {
            return $memory;
        }

        $lap = $this->stopwatch->lap('parser.parse');
        $oldMemory = $memory;
        $periods = $lap->getPeriods();
        $memory = end($periods)->getMemory();

        $this->log(
            '>> Memory after processing of file: ' . number_format($memory / 1024 / 1024, 2)
            . ' megabytes (' . (($memory - $oldMemory >= 0)
                ? '+'
                : '-') . number_format(($memory - $oldMemory) / 1024)
            . ' kilobytes)',
            LogLevel::DEBUG
        );

        return $memory;
    }

    /**
     * Writes the complete parsing cycle to log.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))))
                            (SCALAR))
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR)
                            (SCALAR)))
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR)))))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_RETURN
        (AST_VAR)))