    public function testDispatch()
    {
        // set up mocks for the dispatcher and the generated event.
        $event_dispatcher = $this->getMock(
            'sfEventDispatcher', array('notify')
        );
        $event = $this->getMock(
            'sfEvent',
            array('getReturnValue'),
            array(
                $this->fixture,
                'system.log',
                array(
                    'priority' => \phpDocumentor\Plugin\Core\Log::ERR,
                    'message' => 'body'
                )
            )
        );

        // the event dispatcher's notify method will be invoken and return the
        // expected event
        $event_dispatcher
            ->expects($this->once())
            ->method('notify')
            ->will($this->returnValue($event));

        // we will let the event return true to test whether the return value
        // is actually returned
        $event->expects($this->once())
            ->method('getReturnValue')
            ->will($this->returnValue(true));

        // test without setting the dispatcher
        $result = $this->fixture->dispatch(
            'system.log',
            array(
                'priority' => \phpDocumentor\Plugin\Core\Log::ERR,
                'message' => 'body'
            )
        );
        $this->assertSame(
            null, $result,
            'Expected result to be null when no dispatcher is set'
        );

        // set the dispatcher
        ParserAbstract::$event_dispatcher = $event_dispatcher;

        // test with the dispatcher
        $result = $this->fixture->dispatch(
            'system.log',
            array(
                'priority' => \phpDocumentor\Plugin\Core\Log::ERR,
                'message' => 'body'
            )
        );
        $this->assertSame(
            true, $result,
            'Expected result to be true when the dispatcher mock object is set'
        );

        // if the event dispatcher is not null but also no an event dispatcher;
        // throw exception
        $this->setExpectedException('\phpDocumentor\Parser\Exception');
        ParserAbstract::$event_dispatcher = true;
        $this->fixture->dispatch(
            'system.log',
            array(
                'priority' => \phpDocumentor\Plugin\Core\Log::ERR,
                'message' => 'body'
            )
        );
    }

    /**
     * Tests the log method.
     *
     * It is expected that the `log` method,
     *
     * * invokes the event dispatcher.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CLASS_CONST
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR))))))||||||||