    public function __construct()
    {
        parent::__construct('phpDocumentor', self::VERSION);

        $this->addAutoloader();
        $this->addLogging();
        $this->setTimezone();
        $this->addConfiguration();
        $this->addEventDispatcher();

        $this['console']->getHelperSet()->set(
            new Console\Helper\ProgressHelper()
        );

        $this['translator'] = $this->share(function() {
            return new Translator();
        });

        $this['serializer'] = $this->share(function() {
            AnnotationRegistry::registerAutoloadNamespace(
                'JMS\Serializer\Annotation',
                __DIR__ . '/../../vendor/jms/serializer/src'
            );
            return SerializerBuilder::create()->build();
        });

        $this->loadPlugins();

        $this->addDescriptorServices();
        $this->addParserServices();
        $this->addTransformerServices();

        $this->addCommandsForProjectNamespace();
        $this->addCommandsForTemplateNamespace();
        $this->addCommandsForPluginNamespace();

        $this->register(new Plugin\Core\ServiceProvider());
    }

    /**
     * Adds the services to build the descriptors.
     *
     * This method injects the following services into the Dependency Injection Container:
     *
     * * descriptor.serializer, the serializer used to generate the cache
     * * descriptor.builder, the builder used to transform the Reflected information into a series of Descriptors.
     *
     * It is possible to override which serializer is used by overriding the parameter `descriptor.serializer.class`.
     *
     * @return void
     */
||||||||    public function __construct()
    {
        parent::__construct('phpDocumentor', self::VERSION);

        $this->addAutoloader();
        $this->addLogging();
        $this->setTimezone();
        $this->addConfiguration();
        $this->addEventDispatcher();

        $this['console']->getHelperSet()->set(
            new Console\Helper\ProgressHelper()
        );

        $this['translator'] = $this->share(
            function () {
                return new Translator();
            }
        );

        $this['serializer'] = $this->share(
            function () {
                AnnotationRegistry::registerAutoloadNamespace(
                    'JMS\Serializer\Annotation',
                    __DIR__ . '/../../vendor/jms/serializer/src'
                );

                return SerializerBuilder::create()->build();
            }
        );

        $this->loadPlugins();

        $this->addDescriptorServices();

        $this->register(new Parser\ServiceProvider());
        $this->register(new Transformer\ServiceProvider());
        $this->register(new Core\ServiceProvider());

        $this->addCommandsForProjectNamespace();
        $this->addCommandsForPluginNamespace();
    }

    /**
     * Instantiates the autoloader and adds it to phpDocumentor's container.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_NEW)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_MAGIC_CONST)
                                    (SCALAR))))
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_NEW)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_MAGIC_CONST)
                                    (SCALAR))))
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)))