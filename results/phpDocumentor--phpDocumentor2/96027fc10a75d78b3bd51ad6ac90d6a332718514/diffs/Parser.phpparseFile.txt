    public function parseFile($filename, $include_source = false)
    {
        $this->log('Starting to parse file: ' . $filename);

        $dispatched = false;
        try {
            $file = new FileReflector($filename, $this->doValidation(), $this->getEncoding());
            $file->setDefaultPackageName($this->getDefaultPackageName());

            if (class_exists('phpDocumentor\Event\Dispatcher')) {
                Dispatcher::getInstance()->addListener('parser.log', array($file, 'addParserMarker'));
                $dispatched = true;
            }

            $file->setMarkers($this->getMarkers());
            $file->setFilename($this->getRelativeFilename($filename));

            $path = ltrim($file->getFilename(), './');

            if (isset($this->hashes[$path]) && ($this->hashes[$path] == $file->getHash())) {
                $xpath = new \DOMXPath($this->getExistingXml());
                $qry = $xpath->query('/project/file[@path=\'' . $path . '\' and @hash=\'' . $file->getHash() . '\']');

                $this->getExporter()->getDomDocument()->documentElement->appendChild(
                    $this->getExporter()->getDomDocument()->importNode($qry->item(0), true)
                );

                $this->log('>> File has not changed since last build, re-using the old definition');
            } else {
                $this->log('Exporting file: ' . $filename);

                $file->process();
                $this->getExporter()->setIncludeSource($include_source);
                $this->getExporter()->export($file);
            }
        } catch (Exception $e) {
            $this->log(
                '  Unable to parse file "' . $filename . '", an error was detected: ' . $e->getMessage(),
                \phpDocumentor\Plugin\Core\Log::ALERT
            );
        }

        // Disconnects the dispatcher here so if any error occurred, it still removes the event
        if ($dispatched && isset($file)) {
            Dispatcher::getInstance()->removeListener('parser.log', array($file, 'addParserMarker'));
        }

        $this->log(
            '>> Memory after processing of file: ' . number_format(memory_get_usage()) . ' bytes',
            \phpDocumentor\Plugin\Core\Log::DEBUG
        );
    }

    /**
     * Retrieves a list of filenames with their content hash from the existing AST.
     *
     * @param \DOMDocument|null $ast Either the DOMDocument representing the AST or null to indicate this is a new run.
     *
     * @throws \InvalidArgumentException if an invalid object is passed.
     *
     * @codeCoverageIgnore should be moved to the exporter
     *
     * @return string[] An associative array where the key represents the filename and the value the hash of that file.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (SCALAR)))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))
                                        (AST_CONST)))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_VAR)))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_CLASS_CONST
                                (SCALAR)))))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_ISSET
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_CALL))))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR)))))||||||||