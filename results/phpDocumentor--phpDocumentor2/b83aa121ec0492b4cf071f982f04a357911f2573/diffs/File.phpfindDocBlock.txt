    public function findDocBlock(DocBlox_Reflection_TokenIterator $tokens)
    {
        $result   = null;
        $docblock = $tokens->findNextByType(
            T_DOC_COMMENT, 10, array(T_CLASS, T_NAMESPACE)
        );

        try {
            $result = $docblock
                ? new DocBlox_Reflection_DocBlock($docblock->content)
                : null;
        }
        catch (Exception $e) {
            $this->log($e->getMessage(), Zend_Log::CRIT);
        }

        // TODO: add a check if a class immediately follows this docblock, if so
        // this is not a page level docblock but a class docblock
        $valid = $this->validateDocBlock(
            $this->filename,
            $docblock ? $docblock->getLineNumber() : 0,
            $result
        );

        if (!$valid) {
            $result = null;
        }

        return $result;
    }

    /**
     * Iterates through all tokens and when one is found we invoke the
     * processToken method to handle the details.
     *
     * @param DocBlox_Reflection_TokenIterator $tokens The list of tokens to scan.
     *
     * @see DocBlox_Reflection_Abstract::processTokens
     * @see DocBlox_Reflection_Abstract::processToken
     *
     * @return void
     */
||||||||    public function findDocBlock(DocBlox_Reflection_TokenIterator $tokens)
    {
        $result   = null;
        $docblock = $tokens->findNextByType(
            T_DOC_COMMENT, 10, array(T_CLASS, T_NAMESPACE)
        );

        try {
            $result = $docblock
                ? new DocBlox_Reflection_DocBlock($docblock->content)
                : null;
        }
        catch (Exception $e) {
            $this->log($e->getMessage(), Zend_Log::CRIT);
        }

        return $result;
    }

    /**
     * Iterates through all tokens and when one is found we invoke the
     * processToken method to handle the details.
     *
     * @param DocBlox_Reflection_TokenIterator $tokens The list of tokens to scan.
     *
     * @see DocBlox_Reflection_Abstract::processTokens
     * @see DocBlox_Reflection_Abstract::processToken
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (NULL))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_CONST))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (NULL))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_CONST))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))))))
        (NULL))
    (AST_RETURN
        (AST_VAR)))