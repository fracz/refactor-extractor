||||||||    protected function addTypes(TagDescriptor $tag, \DOMElement $child)
    {
        if (!method_exists($tag, 'getTypes')) {
            return;
        }

        $typeString = '';
        foreach ($tag->getTypes() as $type) {
            $typeString .= $type . '|';

            /** @var \DOMElement $typeNode */
            $typeNode = $child->appendChild(new \DOMElement('type'));
            $typeNode->appendChild(new \DOMText($type));
        }

        $child->setAttribute('type', str_replace('&', '&amp;', rtrim($typeString, '|')));
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (SCALAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))))))