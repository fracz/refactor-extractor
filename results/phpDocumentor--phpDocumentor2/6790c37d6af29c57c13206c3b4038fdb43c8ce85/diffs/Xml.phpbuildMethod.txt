    public function buildMethod(\DOMElement $parent, MethodDescriptor $method)
    {
        $child = new \DOMElement('method');
        $parent->appendChild($child);

        $child->setAttribute('final', $method->isFinal() ? 'true' : 'false');
        $child->setAttribute('abstract', $method->isAbstract() ? 'true' : 'false');
        $child->setAttribute('static', $method->isStatic() ? 'true' : 'false');
        $child->setAttribute('visibility', $method->getVisibility());

        $namespaceFqnn = $method->getNamespace()
            ? $method->getNamespace()->getFullyQualifiedStructuralElementName()
            : $parent->getAttribute('namespace');
        $child->setAttribute('namespace', $namespaceFqnn);
        $child->setAttribute('line', $method->getLine());

        $child->appendChild(new \DOMElement('name', $method->getName()));
        $child->appendChild(new \DOMElement('full_name', $method->getFullyQualifiedStructuralElementName()));

        $this->buildDocBlock($child, $method);

        foreach ($method->getArguments() as $argument) {
            $this->buildArgument($child, $argument);
        }

        return $child;
    }

    /**
     * Exports the given reflection object to the parent XML element.
     *
     * This method creates a new child element on the given parent XML element
     * and takes the properties of the Reflection argument and sets the
     * elements and attributes on the child.
     *
     * If a child DOMElement is provided then the properties and attributes are
     * set on this but the child element is not appended onto the parent. This
     * is the responsibility of the invoker. Essentially this means that the
     * $parent argument is ignored in this case.
     *
     * @param \DOMElement        $parent  The parent element to augment.
     * @param DescriptorAbstract $element The data source.
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONDITIONAL
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONDITIONAL
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONDITIONAL
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||