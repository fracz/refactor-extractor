||||||||    public function testArgumentXmlElementIsCreated()
    {
        // Arrange
        $parent           = $this->prepareParentXMLElement();
        $tagConverterMock = m::mock('phpDocumentor\Plugin\Core\Transformer\Writer\Xml\TagConverter');
        $tagConverterMock->shouldIgnoreMissing();
        $docBlockConverter = new DocBlockConverter($tagConverterMock);
        $docBlock          = $this->createGenericDescriptorMock();
        $docBlock->shouldReceive('getTags')->andReturn(array());
        $docBlock->shouldReceive('getSummary')->andReturn('summary');
        $docBlock->shouldReceive('getDescription')->andReturn('description');

        // Act
        $convertedElement = $docBlockConverter->convert($parent, $docBlock);

        // Assert
        $this->assertSame('100', $convertedElement->getAttribute('line'));
        $this->assertSame('summary', $convertedElement->getElementsByTagName('description')->item(0)->nodeValue);
        $this->assertSame(0, $convertedElement->getElementsByTagName('tag')->length);
        $this->assertSame(
            'description',
            $convertedElement->getElementsByTagName('long-description')->item(0)->nodeValue
        );
    }

    /**
     * Tests whether the package is added onto the parent element.
     *
     * @covers phpDocumentor\Plugin\Core\Transformer\Writer\Xml\DocBlockConverter::convert
     *
     * @return void
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_ARRAY)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (SCALAR)))))))