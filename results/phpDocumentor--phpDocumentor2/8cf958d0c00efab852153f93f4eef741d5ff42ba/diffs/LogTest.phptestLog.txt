||||||||  public function testLog()
  {
    if (file_exists('/tmp/phpDocumentor_Plugin_Core_Log_test'))
    {
      unlink('/tmp/phpDocumentor_Plugin_Core_Log_test');
    }

    $this->fixture = new phpDocumentor_Plugin_Core_Log('/tmp/phpDocumentor_Plugin_Core_Log_test');
    $this->fixture->setThreshold(phpDocumentor_Plugin_Core_Log::ERR);
    $this->fixture->log('test', phpDocumentor_Plugin_Core_Log::ERR);
    $this->fixture->log('test2', phpDocumentor_Plugin_Core_Log::INFO);
    $result = file_get_contents('/tmp/phpDocumentor_Plugin_Core_Log_test');

    $this->assertNotEmpty($result);
    $this->assertContains('test', $result);
    $this->assertNotContains('mb]:', $result, 'Should not contain debug information');
    $this->assertNotContains('test2', $result, 'Should not contain test2 as it is of a lower level');

    $this->fixture->setThreshold(phpDocumentor_Plugin_Core_Log::DEBUG);
    $this->fixture->log('test3', phpDocumentor_Plugin_Core_Log::INFO);
    $result = file_get_contents('/tmp/phpDocumentor_Plugin_Core_Log_test');

    $this->assertContains('test3', $result);
    $this->assertContains('mb]:', $result, 'Should contain debug information when threshold is DEBUG');

    $this->fixture->log(array('test4'), phpDocumentor_Plugin_Core_Log::INFO);
    $result = file_get_contents('/tmp/phpDocumentor_Plugin_Core_Log_test');

    $this->assertContains('array', $result, 'The log should contain a var_dumped output');
  }

}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_CALL
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR))))