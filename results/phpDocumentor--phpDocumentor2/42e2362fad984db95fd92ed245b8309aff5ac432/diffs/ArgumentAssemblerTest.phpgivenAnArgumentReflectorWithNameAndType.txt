||||||||    protected function givenAnArgumentReflectorWithNameAndType($name, $type)
    {
        $argumentReflectorMock = m::mock('phpDocumentor\Reflection\FunctionReflector\ArgumentReflector');
        $argumentReflectorMock->shouldReceive('getName')->andReturn($name);
        $argumentReflectorMock->shouldReceive('getType')->andReturn($type);
        $argumentReflectorMock->shouldReceive('getDefault')->andReturn(false);
        $argumentReflectorMock->shouldReceive('isByRef')->andReturn(false);
        return $argumentReflectorMock;
    }

    /**
     * @param $expected
     * @return Collection
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))