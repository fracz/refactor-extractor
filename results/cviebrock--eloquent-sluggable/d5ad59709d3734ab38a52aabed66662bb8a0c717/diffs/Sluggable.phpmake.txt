	public function make( Model $model, $force = false )
	{
		// if the model isn't sluggable, then do nothing
		if ( !isset($model::$sluggable) )
		{
			return true;
		}

		// load the configuration and use nicer variables for readability
		$config = array_merge($this->config, $model::$sluggable);
		$build_from = $save_to = $method = $separator = $unique = $on_update = $include_trashed = $reserved = null;
		extract($config, EXTR_IF_EXISTS);

		// skip slug generation if the model exists or the slug field is already populated,
		// and on_update is false ... unless we are forcing things!
		if ( !$force )
		{
			if ( ( $model->exists || !empty($model->{$save_to}) ) && !$on_update )
			{
				return true;
			}
		}

		// build the slug string
		if ( is_string($build_from) )
		{
			$string = $model->{$build_from};
		}
		elseif ( is_array($build_from) )
		{
			$string = '';
			foreach( $build_from as $field )
			{
				$string .= $model->{$field} . ' ';
			}
		}
		else
		{
			$string = $model->__toString();
		}

		$string = trim($string);

		// build slug using given slug style
		if ( is_null($method) )
		{
			$slug = Str::slug($string);
		}
		else if ( $method instanceof Closure )
		{
			$slug = $method($string, $separator);
		}
		else if ( is_callable($method) )
		{
			$slug = call_user_func($method, $string, $separator);
		}
		else
		{
			throw new \UnexpectedValueException("Sluggable method is not a callable, closure or null.");
		}

		// save this for later tests against uniqueness
		$base_slug = $slug;

		// check for reserved names
		if ( $reserved instanceof Closure )
		{
			$reserved = $reserved($model);
		}

		if ( is_array($reserved) && !empty($reserved) )
		{
			// if the generated slug is a reserved word, then append "-1" to it to prevent
			// a collision (assumes there are no reserved slugs that end in "-1" ).
			if ( in_array($slug, $reserved) )
			{
				$slug .= $separator . '1';
			}
		}
		else if ( !is_null($reserved) )
		{
			throw new \UnexpectedValueException("Sluggable reserved is not null, an array, or a closure that returns null/array.");
		}

		// check for uniqueness?
		if ( $unique )
		{
			// find all models where the slug is similar to the generated slug
			$class = get_class($model);
			if ( $include_trashed && $model->softDelete )
			{
				$collection = $class::where($save_to, 'LIKE', $base_slug.'%')
					->withTrashed()
					->get();
			}
			else
			{
				$collection = $class::where($save_to, 'LIKE', $base_slug.'%')
					->get();
			}

			// if there are no matching models, then we're okay with the generated slug
			if ( $collection->isEmpty() )
			{
				$model->{$save_to} = $slug;
				return true;
			}

			// extract the slug fields
			$list = $collection->lists($save_to, $model->getKeyName());

			// if the current model exists in the list -- i.e. the existing slug is either
			// equal to or an incremented version of the new slug -- then the slug doesn't
			// need to change and we can just return
			if ( array_key_exists($model->getKey(), $list) )
			{
				return true;
			}

			// does the exact new slug exist, or did we create a new slug because of a reserved word?
			if ( $base_slug != $slug || in_array($slug, $list) )
			{
				// filter the collection to only include the base slug, or the base slug + separator + number
				$collection->filter( function($obj) use ($base_slug, $separator, $save_to)
				{
					// keep the base slug
					if ( $obj->{$save_to} === $base_slug )
					{
						return true;
					}

					if ( strpos($obj->{$save_to}, $base_slug.$separator) === 0 )
					{
						// return if rest of slug is numbers
						$remainder = substr($obj->{$save_to}, strlen($base_slug.$separator));
						return preg_match( '/^\d+$/', $remainder );
					}

					return false;

				});

				// resort the collection by stripping the base slug
				$collection->sortBy( function($obj) use ($base_slug, $separator, $save_to)
				{
					return intval(substr($obj->{$save_to}, strlen($base_slug.$separator)));
				});

				// find the "highest" numbered version of the slug and increment it.
				$idx = substr($collection->last()->{$save_to}, $len);
				$idx = intval($idx);
				$idx++;

				$slug = $base_slug . $separator . $idx;

			}

		}

		// update the slug field
		$model->{$save_to} = $slug;

		// done!
		return true;

	}

}||||||||	public function make( Model $model, $force = false )
	{
		// if the model isn't sluggable, then do nothing
		if ( !isset($model::$sluggable) )
		{
			return true;
		}

		// load the configuration and use nicer variables for readability
		$config = array_merge($this->config, $model::$sluggable);
		$build_from = $save_to = $method = $separator = $unique = $on_update = $include_trashed = $reserved = null;
		extract($config, EXTR_IF_EXISTS);

		// skip slug generation if the model exists or the slug field is already populated,
		// and on_update is false ... unless we are forcing things!
		if ( !$force )
		{
			if ( ( $model->exists || !empty($model->{$save_to}) ) && !$on_update )
			{
				return true;
			}
		}

		// build the slug string
		if ( is_string($build_from) )
		{
			$string = $model->{$build_from};
		}
		elseif ( is_array($build_from) )
		{
			$string = '';
			foreach( $build_from as $field )
			{
				$string .= $model->{$field} . ' ';
			}
		}
		else
		{
			$string = $model->__toString();
		}

		$string = trim($string);

		// build slug using given slug style
		if ( is_null($method) )
		{
			$slug = Str::slug($string);
		}
		else if ( $method instanceof Closure )
		{
			$slug = $method($string, $separator);
		}
		else if ( is_callable($method) )
		{
			$slug = call_user_func($method, $string, $separator);
		}
		else
		{
			throw new \UnexpectedValueException("Sluggable method is not a callable, closure or null.");
		}

		// save this for later tests against uniqueness
		$base_slug = $slug;

		// check for reserved names
		if ( $reserved instanceof Closure )
		{
			$reserved = $reserved($model);
		}

		if ( is_array($reserved) && !empty($reserved) )
		{
			// if the generated slug is a reserved word, then append "-1" to it to prevent
			// a collision (assumes there are no reserved slugs that end in "-1" ).
			if ( in_array($slug, $reserved) )
			{
				$slug .= $separator . '1';
			}
		}
		else if ( !is_null($reserved) )
		{
			throw new \UnexpectedValueException("Sluggable reserved is not null, an array, or a closure that returns null/array.");
		}

		// check for uniqueness?
		if ( $unique )
		{
			// find all models where the slug is similar to the generated slug
			$class = get_class($model);
			if ( $include_trashed && $model->softDelete )
			{
				$collection = $class::where($save_to, 'LIKE', $base_slug.'%')
					->withTrashed()
					->get();
			}
			else
			{
				$collection = $class::where($save_to, 'LIKE', $base_slug.'%')
					->get();
			}

			// if there are no matching models, then we're okay with the generated slug
			if ( $collection->isEmpty() )
			{
				$model->{$save_to} = $slug;
				return true;
			}

			// extract the slug fields
			$list = $collection->lists($save_to, $model->getKeyName());

			// if the current model exists in the list -- i.e. the existing slug is either
			// equal to or an incremented version of the new slug -- then the slug doesn't
			// need to change and we can just return
			if ( array_key_exists($model->getKey(), $list) )
			{
				return true;
			}

			// does the exact new slug exist, or did we create a new slug because of a reserved word?
			if ( $base_slug != $slug || in_array($slug, $list) )
			{
				// filter the collection to only include the base slug, or the base slug + separator + number
				$collection->filter( function($obj) use ($base_slug, $separator, $save_to)
				{
					// keep the base slug
					if ( $obj->{$save_to} === $base_slug )
					{
						return true;
					}

					if ( strpos($obj->{$save_to}, $base_slug.$separator) === 0 )
					{
						// return if rest of slug is numbers
						$remainder = substr($obj->{$save_to}, strlen($base_slug.$separator));
						return preg_match( '/^\d+$/', $remainder );
					}

					return false;

				});

				// resort the collection by stripping the base slug
				$collection->sortBy( function($obj) use ($base_slug, $separator, $save_to)
				{
					return intval(substr($obj->{$save_to}, strlen($base_slug.$separator)));
				});

				// find the "highest" numbered version of the slug and increment it.
				$idx = substr($collection->last()->{$save_to}, strlen($base_slug.$separator));
				$idx = intval($idx);
				$idx++;

				$slug = $base_slug . $separator . $idx;

			}

		}

		// update the slug field
		$model->{$save_to} = $slug;

		// done!
		return true;

	}

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_STATIC_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_STATIC_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONST)))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_UNARY_OP
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (SCALAR)))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR)))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_IF
                                                (AST_IF_ELEM
                                                    (AST_BINARY_OP
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (AST_VAR))
                                                    (
                                                        (AST_RETURN
                                                            (AST_CONST)))))
                                            (AST_IF
                                                (AST_IF_ELEM
                                                    (AST_BINARY_OP
                                                        (AST_CALL
                                                            (
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_BINARY_OP
                                                                    (AST_VAR)
                                                                    (AST_VAR))))
                                                        (SCALAR))
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_VAR)
                                                            (AST_CALL
                                                                (
                                                                    (AST_PROP
                                                                        (AST_VAR))
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_BINARY_OP
                                                                                (AST_VAR)
                                                                                (AST_VAR)))))))
                                                        (AST_RETURN
                                                            (AST_CALL
                                                                (
                                                                    (SCALAR)
                                                                    (AST_VAR)))))))
                                            (AST_RETURN
                                                (AST_CONST))))))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_RETURN
                                                (AST_CALL
                                                    (
                                                        (AST_CALL
                                                            (
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_CALL
                                                                    (
                                                                        (AST_BINARY_OP
                                                                            (AST_VAR)
                                                                            (AST_VAR)))))))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (AST_VAR))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_POST_INC
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_STATIC_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_STATIC_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONST)))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_PROP
                                            (AST_VAR)))))
                            (AST_UNARY_OP
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (SCALAR)))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR)))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_IF
                                                (AST_IF_ELEM
                                                    (AST_BINARY_OP
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (AST_VAR))
                                                    (
                                                        (AST_RETURN
                                                            (AST_CONST)))))
                                            (AST_IF
                                                (AST_IF_ELEM
                                                    (AST_BINARY_OP
                                                        (AST_CALL
                                                            (
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_BINARY_OP
                                                                    (AST_VAR)
                                                                    (AST_VAR))))
                                                        (SCALAR))
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_VAR)
                                                            (AST_CALL
                                                                (
                                                                    (AST_PROP
                                                                        (AST_VAR))
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_BINARY_OP
                                                                                (AST_VAR)
                                                                                (AST_VAR)))))))
                                                        (AST_RETURN
                                                            (AST_CALL
                                                                (
                                                                    (SCALAR)
                                                                    (AST_VAR)))))))
                                            (AST_RETURN
                                                (AST_CONST))))))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (AST_CLOSURE_USES
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR)
                                            (AST_CLOSURE_VAR))
                                        (
                                            (AST_RETURN
                                                (AST_CALL
                                                    (
                                                        (AST_CALL
                                                            (
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (AST_CALL
                                                                    (
                                                                        (AST_BINARY_OP
                                                                            (AST_VAR)
                                                                            (AST_VAR)))))))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_VAR)))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (AST_POST_INC
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))