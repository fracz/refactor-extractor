	public function __call( $name, $arguments )
	{
        // Convert to snake case
        $name   = strtolower( preg_replace( '/(.)([A-Z])/', '$1_$2', $name ) );

        // The first argument is the string we want to echo out
        $output = reset( $arguments );

        $found  = $this->checkForSimpleMethods( $name );

        if ( $found )
        {
            if ( $output )
            {
                return $this->out( $output );
            }

            return $this;
        }

        $found = $this->checkForTerminalObject( $name, $arguments );

        if ( $found )
        {
            return $this;
        }

        return $this->checkForAdvancedMethods( $name, $output );
    }
}||||||||	public function __call( $requested_method, $arguments )
	{
        // Convert to snake case
        $name   = strtolower( preg_replace( '/(.)([A-Z])/', '$1_$2', $requested_method ) );

        // The first argument is the string|array|object we want to echo out
        $output = reset( $arguments );

        // Get all of the possible style attributes
        $method_search = array_keys( $this->style->getMergedAttributes() );

        // A flag to see if we are still finding valid methods
        // We need this flag because of terminal objects
        // and failing gracefully when a whack method is passed in
        $found_method = TRUE;

        // While we still have a name left and we keep finding methods,
        // loop through the possibilities
        while ( strlen( $name ) > 0 && $found_method )
        {
            // We haven't found a method in the current loop yet
            $current_loop_found = FALSE;

            // Loop through the possible methods
            foreach ( $method_search as $method )
            {
                // See if we found a valid method
                $new_name = $this->searchForMethod( $method, $name );

                // If we haven't found one in the loop yet and the name changed,
                // guess what: we found a valid method
                if ( !$current_loop_found && $new_name != $name )
                {
                    $current_loop_found = TRUE;
                }

                // Reset name to the new name
                $name = $new_name;
            }

            // Set the found method flag just in case we don't have any more valid methods
            $found_method = $current_loop_found;
        }

        // If we have fulfilled all of the requested methods and we have output, output it
        if ( !strlen( $name ) && $this->hasOutput( $output ) )
        {
            return $this->out( $output );
        }

        // If we still have something left, let's see if it's a terminal object
        if ( strlen( $name ) )
        {
            // If it is, let's execute it
            if ( class_exists( $this->getFullTerminalObjectClass( $name ) ) )
            {
                $this->executeTerminalObject( $name, $arguments );
            }
            else
            {
                // If we can't find it at this point, let's fail gracefully
                return $this->out( $output );
            }
        }

        return $this;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_VAR))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CONST)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_VAR)))