    public function it_builds_arguments_from_a_single_array()
    {
        // Test Description
        //
        // Usage: test-script [-b both-prefixes, --both both-prefixes] [-d, --defined] [--long only-long-prefix] [-r required] [-s only-short-prefix] [-v default-value (default: test)] [no-prefix]
        //
        // Required Arguments:
        //     -r required
        //         Required
        //
        // Optional Arguments:
        //     -b both-prefixes, --both both-prefixes
        //         Both short and long prefixes
        //     -d, --defined
        //         True when defined
        //     -s only-short-prefix
        //         Only short prefix
        //     --long only-long-prefix
        //         Only long prefix
        //     -v default-value (default: test)
        //         Has a default value

        $this->output->shouldReceive("sameLine");
        $this->shouldWrite("\e[mTest Description\e[0m");
        $this->shouldWrite("\e[m\e[0m");
        $this->shouldWrite("\e[mUsage: test-script "
                            . "[-b both-prefixes, --both both-prefixes] [-d, --defined] "
                            . "[--long only-long-prefix] [-r required] [-s only-short-prefix] "
                            . "[-v default-value (default: test)] [no-prefix]\e[0m");

        $this->shouldWrite("\e[m\e[0m");
        $this->shouldWrite("\e[mRequired Arguments:\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-r required\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mRequired\e[0m");

        $this->shouldWrite("\e[m\e[0m");
        $this->shouldWrite("\e[mOptional Arguments:\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-b both-prefixes, --both both-prefixes\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mBoth short and long prefixes\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-d, --defined\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mTrue when defined\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m--long only-long-prefix\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mOnly long prefix\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-s only-short-prefix\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mOnly short prefix\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-v default-value (default: test)\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mHas a default value\e[0m");
        $this->shouldHavePersisted(31);

        $this->cli->description('Test Description');
        $this->cli->arguments->add([
            'only-short-prefix' => [
                'prefix'      => 's',
                'description' => 'Only short prefix',
            ],
            'only-long-prefix' => [
                'longPrefix'  => 'long',
                'description' => 'Only long prefix',
            ],
            'both-prefixes' => [
                'prefix'      => 'b',
                'longPrefix'  => 'both',
                'description' => 'Both short and long prefixes',
            ],
            'no-prefix' => [
                'description' => 'Not defined by a prefix',
            ],
            'defined-only' => [
                'prefix'      => 'd',
                'longPrefix'  => 'defined',
                'description' => 'True when defined',
                'noValue'     => true,
            ],
            'required' => [
                'prefix'      => 'r',
                'description' => 'Required',
                'required'    => true,
            ],
            'default-value' => [
                'prefix'       => 'v',
                'description'  => 'Has a default value',
                'defaultValue' => 'test',
            ],
        ]);

        $command = 'test-script';
        $this->cli->usage([$command]);
    }

    /** @test */
||||||||    public function it_builds_arguments_from_a_single_array()
    {
        // Test Description
        //
        // Usage: test-script [-b both-prefixes, --both both-prefixes] [-d, --defined] [--long only-long-prefix] [-r required] [-s only-short-prefix] [-v default-value (default: test)] [no-prefix]
        //
        // Required Arguments:
        //     -r required
        //         Required
        //
        // Optional Arguments:
        //     -b both-prefixes, --both both-prefixes
        //         Both short and long prefixes
        //     -d, --defined
        //         True when defined
        //     -s only-short-prefix
        //         Only short prefix
        //     --long only-long-prefix
        //         Only long prefix
        //     -v default-value (default: test)
        //         Has a default value

        $this->output->shouldReceive("sameLine");
        $this->shouldWrite("\e[mTest Description\e[0m");
        $this->shouldWrite("\e[m\e[0m");
        $this->shouldWrite("\e[mUsage: test-script "
                            . "[-b both-prefixes, --both both-prefixes] [-d, --defined] "
                            . "[--long only-long-prefix] [-r required] [-s only-short-prefix] "
                            . "[-v default-value (default: test)] [no-prefix]\e[0m");

        $this->shouldWrite("\e[m\e[0m");
        $this->shouldWrite("\e[mRequired Arguments:\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-r required\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mRequired\e[0m");

        $this->shouldWrite("\e[m\e[0m");
        $this->shouldWrite("\e[mOptional Arguments:\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-b both-prefixes, --both both-prefixes\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mBoth short and long prefixes\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-d, --defined\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mTrue when defined\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m--long only-long-prefix\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mOnly long prefix\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-s only-short-prefix\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mOnly short prefix\e[0m");

        $this->shouldWrite("\e[m\t\e[0m");
        $this->shouldWrite("\e[m-v default-value (default: test)\e[0m");
        $this->shouldWrite("\e[m\t\t\e[0m");
        $this->shouldWrite("\e[mHas a default value\e[0m");
        $this->shouldHavePersisted(31);

        $this->cli->description('Test Description');
        $this->cli->arguments->add($this->getFullArguments());

        $command = 'test-script';
        $this->cli->usage([$command]);
    }

    /** @test */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))))))