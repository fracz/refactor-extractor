    public function compile($filename = 'codecept.phar')
    {
        if(file_exists($filename)) {
            unlink($filename);
        }

        $phar = new \Phar($filename, 0, 'codecept.phar');
        $phar->setSignatureAlgorithm(\Phar::SHA1);

        $phar->startBuffering();

            $finder = new Finder();
            $finder->files()
                    ->ignoreVCS(true)
                    ->name('*.php')
                    ->in($this->compileDir . '/src')
            ;

            foreach ($finder as $file) {
                $this->addFile($phar, $file);
            }

        $finder = new Finder();
        $finder
            ->files()
            ->ignoreVCS(true)
            ->name('*.php')
            ->name('*.js')
            ->name('*.tpl.dist')
            ->name('*.html.dist')
            ->exclude('Tests')
            ->exclude('tests')
            ->exclude('benchmark')
            ->exclude('demo')
            ->in($this->compileDir.'/vendor')
        ;

        foreach($finder as $file) {
            $this->addFile($phar, $file);
        }

        $this->addFile($phar, new \SplFileInfo($this->compileDir.'/autoload.php'));

        $phar->stopBuffering();

        if(in_array('GZ', \Phar::getSupportedCompression())) {
            echo "Compressed\r\n";
            //do not use compressFiles as it has issue with temporary file when adding large amount of files
//            $phar->compressFiles(\Phar::GZ);
            if (file_exists('codecept.phar.gz')) unlink('codecept.phar.gz');

            $phar = $phar->compress(\Phar::GZ);
            $this->setMainExecutable($phar);
            $this->setStub($phar);

            unlink('codecept.phar');
            rename('codecept.phar.gz', 'codecept.phar');

        } else {
            $this->setMainExecutable($phar);
            $this->setStub($phar);
        }


        unset($phar);
    }

    /**
     * Add file to phar archive
     * @param $phar
     * @param $file
     */
||||||||    public function compile($filename = 'codecept.phar')
    {
        if(file_exists($filename)) {
            unlink($filename);
        }

        $phar = new \Phar($filename, 0, 'codecept.phar');
        $phar->setSignatureAlgorithm(\Phar::SHA1);

        $phar->startBuffering();

            $finder = new Finder();
            $finder->files()
                    ->ignoreVCS(true)
                    ->name('*.php')
                    ->name('*.tpl.dist')
                    ->name('*.html.dist')
                    ->in($this->compileDir . '/src')
            ;

            foreach ($finder as $file) {
                $this->addFile($phar, $file);
            }

        $finder = new Finder();
        $finder
            ->files()
            ->ignoreVCS(true)
            ->name('*.php')
            ->name('*.js')
            ->name('*.tpl.dist')
            ->name('*.html.dist')
            ->exclude('Tests')
            ->exclude('tests')
            ->exclude('benchmark')
            ->exclude('demo')
            ->in($this->compileDir.'/vendor')
        ;

        foreach($finder as $file) {
            $this->addFile($phar, $file);
        }

        $this->addFile($phar, new \SplFileInfo($this->compileDir.'/autoload.php'));

        $phar->stopBuffering();

        if(in_array('GZ', \Phar::getSupportedCompression())) {
            echo "Compressed\r\n";
            //do not use compressFiles as it has issue with temporary file when adding large amount of files
//            $phar->compressFiles(\Phar::GZ);
            if (file_exists('codecept.phar.gz')) unlink('codecept.phar.gz');

            $phar = $phar->compress(\Phar::GZ);
            $this->setMainExecutable($phar);
            $this->setStub($phar);

            unlink('codecept.phar');
            rename('codecept.phar.gz', 'codecept.phar');

        } else {
            $this->setMainExecutable($phar);
            $this->setStub($phar);
        }


        unset($phar);
    }

    /**
     * Add file to phar archive
     * @param $phar
     * @param $file
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_CONST)))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (
                                                (AST_CONST)))
                                        (
                                            (SCALAR)))
                                    (
                                        (SCALAR)))
                                (
                                    (SCALAR)))
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR)))
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_STATIC_CALL)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_CALL
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_UNSET
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_CONST)))
                    (
                        (SCALAR)))
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (
                                                (AST_CONST)))
                                        (
                                            (SCALAR)))
                                    (
                                        (SCALAR)))
                                (
                                    (SCALAR)))
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR)))
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_STATIC_CALL)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_CALL
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_UNSET
        (AST_VAR)))