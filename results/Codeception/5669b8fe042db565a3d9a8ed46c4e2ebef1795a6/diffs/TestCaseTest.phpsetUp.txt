    public function setUp() {
        $this->dispatcher = new Symfony\Component\EventDispatcher\EventDispatcher;
        $di = new \Codeception\Lib\Di();
        $this->moduleContainer = new \Codeception\Lib\ModuleContainer($di, []);
        \Codeception\Module\EmulateModuleHelper::$onlyActions = [];
        \Codeception\Module\EmulateModuleHelper::$excludeActions = [];
        $module = $this->moduleContainer->create('EmulateModuleHelper');
        $module->_initialize();


        $this->testcase = new \Codeception\TestCase\Cept;
        $this->testcase->configDispatcher($this->dispatcher)
            ->configName('mocked test')
            ->configFile(codecept_data_dir().'SimpleCept.php')
            ->configDi($di)
            ->configModules($this->moduleContainer)
            ->initConfig();
    }

    /**
     * @group core
     */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)
                (AST_ARRAY))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (SCALAR)))
                    (
                        (AST_BINARY_OP
                            (AST_CALL)
                            (SCALAR))))
                (
                    (AST_VAR)))
            (
                (AST_PROP
                    (AST_VAR))))))||||||||