    protected function runStep(StepNode $step)
    {
        $params = [];
        if ($step->hasArguments()) {
            $args = $step->getArguments();
            $table = $args[0];
            if ($table instanceof TableNode) {
                $params = [$table->getTableAsString()];
            }
        }
        $meta = new Meta($step->getText(), $params);
        $meta->setPrefix($step->getKeyword());
        $this->scenario->setMetaStep($meta); // enable metastep
        $stepText = $step->getText();
        $executed = false;
        $this->getScenario()->comment(null); // make metastep to be printed even if no steps
        foreach ($this->steps as $pattern => $context) {
            $matches = [];
            if (!preg_match($pattern, $stepText, $matches)) {
                continue;
            }
            array_shift($matches);
            if ($step->hasArguments()) {
                $matches = array_merge($matches, $step->getArguments());
            }
            call_user_func_array($context, $matches); // execute the step
            $executed = true;
            break;
        }
        $this->scenario->setMetaStep(null); // disable metastep
        if (!$executed) {
            throw new \PHPUnit_Framework_IncompleteTestError("Step definition for `$stepText` not found in contexts");
        }
    }

||||||||    protected function runStep(StepNode $stepNode)
    {
        $params = [];
        if ($stepNode->hasArguments()) {
            $args = $stepNode->getArguments();
            $table = $args[0];
            if ($table instanceof TableNode) {
                $params = [$table->getTableAsString()];
            }
        }
        $meta = new Meta($stepNode->getText(), $params);
        $meta->setPrefix($stepNode->getKeyword());
        $this->scenario->setMetaStep($meta); // enable metastep
        $stepText = $stepNode->getText();
        $this->getScenario()->comment(null); // make metastep to be printed even if no steps
        foreach ($this->steps as $pattern => $context) {
            $matches = [];
            if (!preg_match($pattern, $stepText, $matches)) {
                continue;
            }
            array_shift($matches);
            if ($stepNode->hasArguments()) {
                $matches = array_merge($matches, $stepNode->getArguments());
            }
            call_user_func_array($context, $matches); // execute the step
            break;
        }
        $this->scenario->setMetaStep(null); // disable metastep
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (NULL))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_BREAK
                (NULL))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (NULL))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_BREAK
                (NULL))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST))))