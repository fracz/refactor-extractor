    public function _before(\Codeception\TestCase $test)
    {
        if ($this->dependentModule) {
            $this->em = $this->dependentModule->_getEntityManager();
        } else {
            if (is_callable($this->config['connection_callback'])) {
                $this->em = call_user_func($this->config['connection_callback']);
            }
        }

        if (!$this->em) {
            throw new ModuleConfigException(
                __CLASS__,
                "Doctrine2 module requires EntityManager explicitly set.\n" .
                "You can use your bootstrap file to assign the EntityManager:\n\n" .
                '\Codeception\Module\Doctrine2::$em = $em'
            );
        }

        if (!$this->em instanceof \Doctrine\ORM\EntityManager) {
            throw new ModuleConfigException(
                __CLASS__,
                "Entity Manager was not properly set.\n" .
                "You can use your bootstrap file to assign the EntityManager:\n\n" .
                '\Codeception\Module\Doctrine2::$em = $em'
            );
        }

        $this->em->getConnection()->connect();
        if ($this->config['cleanup']) {
            $this->em->getConnection()->beginTransaction();
        }
    }

||||||||    public function _before(\Codeception\TestCase $test)
    {
        if ($this->dependentModule) {
            $this->em = $this->dependentModule->_getEntityManager();
        } else {
            if (is_callable($this->config['connection_callback'])) {
                $this->em = call_user_func($this->config['connection_callback']);
            }
        }

        if (!$this->em) {
            throw new ModuleConfigException(
                __CLASS__,
                "Doctrine2 module requires EntityManager explicitly set.\n" .
                "Please specify either `connection_callback` config option\n" .
                "with callable which will return instance of EntityManager or\n" .
                "pass a dependent module which are Symfony2 or ZF2\n" .
                "to connect to Doctrine using Dependency Injection Container"
            );
        }

        if (!$this->em instanceof \Doctrine\ORM\EntityManager) {
            throw new ModuleConfigException(
                __CLASS__,
                "Connection object is not an instance of \\Doctrine\\ORM\\EntityManager.\n" .
                "Use `connection_callback` or dependent framework modules to specify one"
            );
        }

        $this->em->getConnection()->connect();
        if ($this->config['cleanup']) {
            $this->em->getConnection()->beginTransaction();
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_MAGIC_CONST)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_MAGIC_CONST)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_MAGIC_CONST)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_MAGIC_CONST)
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))))))