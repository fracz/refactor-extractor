    public function load($name, $project_id)
    {
        switch ($name) {
            case 'TaskClose':
                require_once __DIR__.'/../actions/task_close.php';
                $className = '\Action\TaskClose';
                return new $className($project_id, new Task($this->db, $this->event));
            case 'TaskAssignCurrentUser':
                require_once __DIR__.'/../actions/task_assign_current_user.php';
                $className = '\Action\TaskAssignCurrentUser';
                return new $className($project_id, new Task($this->db, $this->event), new Acl($this->db, $this->event));
            case 'TaskAssignSpecificUser':
                require_once __DIR__.'/../actions/task_assign_specific_user.php';
                $className = '\Action\TaskAssignSpecificUser';
                return new $className($project_id, new Task($this->db, $this->event));
            case 'TaskDuplicateAnotherProject':
                require_once __DIR__.'/../actions/task_duplicate_another_project.php';
                $className = '\Action\TaskDuplicateAnotherProject';
                return new $className($project_id, new Task($this->db, $this->event));
            case 'TaskAssignColorUser':
                require_once __DIR__.'/../actions/task_assign_color_user.php';
                $className = '\Action\TaskAssignColorUser';
                return new $className($project_id, new Task($this->db, $this->event));
            case 'TaskAssignColorCategory':
                require_once __DIR__.'/../actions/task_assign_color_category.php';
                $className = '\Action\TaskAssignColorCategory';
                return new $className($project_id, new Task($this->db, $this->event));
            default:
                throw new \LogicException('Action not found: '.$name);
        }
    }

    /**
     * Validate action creation
     *
     * @access public
     * @param  array   $values           Required parameters to save an action
     * @return array   $valid, $errors   [0] = Success or not, [1] = List of errors
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_RETURN
                        (AST_NEW
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_RETURN
                        (AST_NEW
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR))))
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_RETURN
                        (AST_NEW
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_RETURN
                        (AST_NEW
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_RETURN
                        (AST_NEW
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_RETURN
                        (AST_NEW
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_VAR)))))))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))))))))))||||||||