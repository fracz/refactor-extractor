    public function load()
    {
        if (func_num_args() < 1 || func_num_args() > 2) {
            die('Invalid template arguments');
        }

        if (! file_exists(self::PATH.func_get_arg(0).'.php')) {
            die('Unable to load the template: "'.func_get_arg(0).'"');
        }

        if (func_num_args() === 2) {

            if (! is_array(func_get_arg(1))) {
                die('Template variables must be an array');
            }

            extract(func_get_arg(1));
        }

        ob_start();

        include self::PATH.func_get_arg(0).'.php';

        return ob_get_clean();
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL)
                    (SCALAR)))
            (
                (AST_EXIT
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (SCALAR))))
                            (SCALAR)))))
            (
                (AST_EXIT
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR))))))
                        (
                            (AST_EXIT
                                (SCALAR)))))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR))))))))
    (AST_CALL)
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_RETURN
        (AST_CALL)))||||||||