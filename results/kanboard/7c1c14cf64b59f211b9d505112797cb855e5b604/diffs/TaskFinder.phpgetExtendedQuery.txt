||||||||    public function getExtendedQuery()
    {
        return $this->db
            ->table(Task::TABLE)
            ->columns(
                '(SELECT count(*) FROM comments WHERE task_id=tasks.id) AS nb_comments',
                '(SELECT count(*) FROM task_has_files WHERE task_id=tasks.id) AS nb_files',
                '(SELECT count(*) FROM task_has_subtasks WHERE task_id=tasks.id) AS nb_subtasks',
                '(SELECT count(*) FROM task_has_subtasks WHERE task_id=tasks.id AND status=2) AS nb_completed_subtasks',
                'tasks.id',
                'tasks.reference',
                'tasks.title',
                'tasks.description',
                'tasks.date_creation',
                'tasks.date_modification',
                'tasks.date_completed',
                'tasks.date_due',
                'tasks.color_id',
                'tasks.project_id',
                'tasks.column_id',
                'tasks.swimlane_id',
                'tasks.owner_id',
                'tasks.creator_id',
                'tasks.position',
                'tasks.is_active',
                'tasks.score',
                'tasks.category_id',
                'users.username AS assignee_username',
                'users.name AS assignee_name'
            )
            ->join(User::TABLE, 'id', 'owner_id');
    }

    /**
     * Get all tasks shown on the board (sorted by position)
     *
     * @access public
     * @param  integer    $project_id     Project id
     * @param  integer    $column_id      Column id
     * @param  integer    $swimlane_id    Swimlane id
     * @return array
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR)
                (SCALAR)))))