	protected function _loadData()
	{
		// Lets load the content if it doesn't already exist
		if (empty($this->_data))
		{
			$file		= $this->_client->path.DS.'templates'.DS.$this->_template.DS.'index.php';

			// Read the source file
			jimport('joomla.filesystem.file');
			$content = JFile::read($file);

			if ($content === false)
			{
				$this->setError(JText::sprintf('Operation Failed Could not open', $file));
				return false;
			}
			$content = htmlspecialchars($content, ENT_COMPAT, 'UTF-8');

			$this->_data = $content;
			return (boolean) $this->_data;
		}
		return true;
	}

	/**
	 * Method to initialise the Template data
	 *
	 * @return	boolean	True on success
	 * @since	1.6
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (AST_CONST))
                                        (SCALAR))
                                    (AST_CONST))
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_CONST))
                        (SCALAR)))
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (SCALAR)
                                            (AST_VAR)))))
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_RETURN
                    (AST_CAST
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CONST)))||||||||