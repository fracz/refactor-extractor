||||||||	function findKeyItem()
	{
		global $mainframe;

		/*
		 * Initialize variables
		 */
		$db			= & $mainframe->getDBO();
		$user		= & $mainframe->getUser();
		$now		= $mainframe->get('requestTime');
		$keyref	= $db->getEscaped(JRequest::getVar('keyref'));
		$pop		= JRequest::getVar('pop', 0, '', 'int');
		$option	= JRequest::getVar('option');

		$query = "SELECT id" .
				"\n FROM #__content" .
				"\n WHERE attribs LIKE '%keyref=$keyref%'";
		$db->setQuery($query);
		$id = $db->loadResult();
		if ($id > 0)
		{
			showItem($id, $user->get('gid'), $pop, $option, $now);
		}
		else
		{
			JError::raiseError( 404, JText::_("Key Not Found") );
		}
	}
}

class JContentControllerHelper{

	function show($row, $params, $gid, & $access, $pop, $option, $ItemidCount = NULL)
	{
		global $mainframe;

		/*
		 * Initialize variables
		 */
		$db = & $mainframe->getDBO();
		$noauth = !$mainframe->getCfg('shownoauth');

		if ($access->canEdit)
		{
			if ($row->id === null || $row->access > $gid)
			{
				mosNotAuth();
				return;
			}
		}
		else
		{
			if ($row->id === null || $row->state == 0)
			{
				mosNotAuth();
				return;
			}
			if ($row->access > $gid)
			{
				if ($noauth)
				{
					mosNotAuth();
					return;
				}
				else
				{
					if (!($params->get('intro_only')))
					{
						mosNotAuth();
						return;
					}
				}
			}
		}

		/*
		 * Get some parameters from global configuration
		 */
		$params->def('link_titles',		$mainframe->getCfg('link_titles'));
		$params->def('author',			!$mainframe->getCfg('hideAuthor'));
		$params->def('createdate',	!$mainframe->getCfg('hideCreateDate'));
		$params->def('modifydate',	!$mainframe->getCfg('hideModifyDate'));
		$params->def('print',				!$mainframe->getCfg('hidePrint'));
		$params->def('pdf',					!$mainframe->getCfg('hidePdf'));
		$params->def('email',				!$mainframe->getCfg('hideEmail'));
		$params->def('rating',				$mainframe->getCfg('vote'));
		$params->def('icons',				$mainframe->getCfg('icons'));
		$params->def('readmore',		$mainframe->getCfg('readmore'));

		/*
		 * Get some item specific parameters
		 */
		$params->def('image',					1);
		$params->def('section',				0);
		$params->def('section_link',		0);
		$params->def('category',			0);
		$params->def('category_link',	0);
		$params->def('introtext',			1);
		$params->def('pageclass_sfx',	'');
		$params->def('item_title',			1);
		$params->def('url',						1);

		if ($params->get('section_link') || $params->get('category_link'))
		{
			// loads the link for Section name
			if ($params->get('section_link') || $params->get('category_link'))
			{
				// pull values from mainframe
				$secLinkID = $mainframe->get('secID_'.$row->sectionid, -1);
				$secLinkURL = $mainframe->get('secURL_'.$row->sectionid);

				// check if values have already been placed into mainframe memory
				if ($secLinkID == -1)
				{
					$query = "SELECT id, link" .
							"\n FROM #__menu" .
							"\n WHERE published = 1" .
							"\n AND type IN ( 'content_section', 'content_blog_section' )" .
							"\n AND componentid = $row->sectionid" .
							"\n ORDER BY type DESC, ordering";
					$database->setQuery($query);
					//$secLinkID = $database->loadResult();
					$result = $database->loadRow();

					$secLinkID = $result[0];
					$secLinkURL = $result[1];

					if ($secLinkID == null)
					{
						$secLinkID = 0;
						// save 0 query result to mainframe
						$mainframe->set('secID_'.$row->sectionid, 0);
					}
					else
					{
						// save query result to mainframe
						$mainframe->set('secID_'.$row->sectionid, $secLinkID);
						$mainframe->set('secURL_'.$row->sectionid, $secLinkURL);
					}
				}

				$_Itemid = '';
				// use Itemid for section found in query
				if ($secLinkID != -1 && $secLinkID)
				{
					$_Itemid = '&amp;Itemid='.$secLinkID;
				}
				if ($secLinkURL)
				{
					$link = sefRelToAbs($secLinkURL.$_Itemid);
				}
				else
				{
					$link = sefRelToAbs('index.php?option=com_content&amp;task=section&amp;id='.$row->sectionid.$_Itemid);
				}
				$row->section = '<a href="'.$link.'">'.$row->section.'</a>';
			}

			// loads the link for Category name
			if ($params->get('category_link') && $row->catid)
			{
				// pull values from mainframe
				$catLinkID = $mainframe->get('catID_'.$row->catid, -1);
				$catLinkURL = $mainframe->get('catURL_'.$row->catid);

				// check if values have already been placed into mainframe memory
				if ($catLinkID == -1)
				{
					$query = "SELECT id, link" .
							"\n FROM #__menu" .
							"\n WHERE published = 1" .
							"\n AND type IN ( 'content_category', 'content_blog_category' )" .
							"\n AND componentid = $row->catid" .
							"\n ORDER BY type DESC, ordering";
					$database->setQuery($query);
					//$catLinkID = $database->loadResult();
					$result = $database->loadRow();

					$catLinkID = $result[0];
					$catLinkURL = $result[1];

					if ($catLinkID == null)
					{
						$catLinkID = 0;
						// save 0 query result to mainframe
						$mainframe->set('catID_'.$row->catid, 0);
					}
					else
					{
						// save query result to mainframe
						$mainframe->set('catID_'.$row->catid, $catLinkID);
						$mainframe->set('catURL_'.$row->catid, $catLinkURL);
					}
				}

				$_Itemid = '';
				// use Itemid for category found in query
				if ($catLinkID != -1 && $catLinkID)
				{
					$_Itemid = '&amp;Itemid='.$catLinkID;
				}
				else
					if ($secLinkID != -1 && $secLinkID)
					{
						// use Itemid for section found in query
						$_Itemid = '&amp;Itemid='.$secLinkID;
					}
				if ($catLinkURL)
				{
					$link = sefRelToAbs($catLinkURL.$_Itemid);
				}
				else
				{
					$link = sefRelToAbs('index.php?option=com_content&amp;task=category&amp;sectionid='.$row->sectionid.'&amp;id='.$row->catid.$_Itemid);
				}
				$row->category = '<a href="'.$link.'">'.$row->category.'</a>';
			}
		}

		// show/hides the intro text
		if ($params->get('introtext'))
		{
			$row->text = $row->introtext. ($params->get('intro_only') ? '' : chr(13).chr(13).$row->fulltext);
		}
		else
		{
			$row->text = $row->fulltext;
		}

		// deal with the {mospagebreak} plugins
		// only permitted in the full text area
		$page = JRequest::getVar('limitstart', 0, '', 'int');

		// record the hit
		if (!$params->get('intro_only') && ($page == 0))
		{
			$obj = & JModel::getInstance('content', $db);
			$obj->hit($row->id);
		}

		JContentViewHTML::show($row, $params, $access, $page, $option, $ItemidCount);
	}

	function orderbyPrimary($orderby)
	{
		switch ($orderby)
		{
			case 'alpha' :
				$orderby = 'cc.title, ';
				break;

			case 'ralpha' :
				$orderby = 'cc.title DESC, ';
				break;

			case 'order' :
				$orderby = 'cc.ordering, ';
				break;

			default :
				$orderby = '';
				break;
		}

		return $orderby;
	}

	function orderbySecondary($orderby)
	{
		switch ($orderby)
		{
			case 'date' :
				$orderby = 'a.created';
				break;

			case 'rdate' :
				$orderby = 'a.created DESC';
				break;

			case 'alpha' :
				$orderby = 'a.title';
				break;

			case 'ralpha' :
				$orderby = 'a.title DESC';
				break;

			case 'hits' :
				$orderby = 'a.hits';
				break;

			case 'rhits' :
				$orderby = 'a.hits DESC';
				break;

			case 'order' :
				$orderby = 'a.ordering';
				break;

			case 'author' :
				$orderby = 'a.created_by_alias, u.name';
				break;

			case 'rauthor' :
				$orderby = 'a.created_by_alias DESC, u.name DESC';
				break;

			case 'front' :
				$orderby = 'f.ordering';
				break;

			default :
				$orderby = 'a.ordering';
				break;
		}

		return $orderby;
	}

	/*
	* @param int 0 = Archives, 1 = Section, 2 = Category
	*/
	function _where($type = 1, & $access, & $noauth, $gid, $id, $now = NULL, $year = NULL, $month = NULL)
	{
		global $database, $mainframe;

		$noauth = !$mainframe->getCfg('shownoauth');
		$nullDate = $database->getNullDate();
		$where = array ();

		// normal
		if ($type > 0)
		{
			$where[] = "a.state = 1";
			if (!$access->canEdit)
			{
				$where[] = "( a.publish_up = '$nullDate' OR a.publish_up <= '$now' )";
				$where[] = "( a.publish_down = '$nullDate' OR a.publish_down >= '$now' )";
			}
			if ($id > 0)
			{
				if ($type == 1)
				{
					$where[] = "a.sectionid IN ( $id ) ";
				}
				else
					if ($type == 2)
					{
						$where[] = "a.catid IN ( $id ) ";
					}
			}
		}

		// archive
		if ($type < 0)
		{
			$where[] = "a.state='-1'";
			if ($year)
			{
				$where[] = "YEAR( a.created ) = '$year'";
			}
			if ($month)
			{
				$where[] = "MONTH( a.created ) = '$month'";
			}
			if ($id > 0)
			{
				if ($type == -1)
				{
					$where[] = "a.sectionid = $id";
				}
				else
					if ($type == -2)
					{
						$where[] = "a.catid = $id";
					}
			}
		}

		if ($id == 0)
		{
			$where[] = "s.published = 1";
			$where[] = "cc.published = 1";
			if ($noauth)
			{
				$where[] = "a.access <= $gid";
				$where[] = "s.access <= $gid";
				$where[] = "cc.access <= $gid";
			}
		}

		return $where;
	}

	function _votingQuery()
	{
		global $mainframe;

		$voting = $mainframe->getCfg('vote');

		if ($voting)
		{
			// calculate voting count
			$select = "\n , ROUND( v.rating_sum / v.rating_count ) AS rating, v.rating_count";
			$join = "\n LEFT JOIN #__content_rating AS v ON a.id = v.content_id";
		}
		else
		{
			$select = '';
			$join = '';
		}

		$results = array ('select' => $select, 'join' => $join);

		return $results;
	}
}
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))))))