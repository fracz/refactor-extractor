	function getAuthorisedUsergroups($action, $recursive = false)
	{
		// Get a database object.
		$db	= &JFactory::getDbo();

		// Build the base query.
		$query	= new JQuery;
		$query->select('DISTINCT ug2.id');
		$query->from('`#__access_actions` AS a');
		// Map actions to rules
		$query->join('INNER',	'`#__access_action_rule_map` AS arm ON arm.action_id = a.id');
		$query->join('INNER',	'`#__access_rules` AS r ON r.id = arm.rule_id');
		// Map users and/or user groups to rules
		$query->join('INNER',	'`#__usergroup_rule_map` AS ugrm ON ugrm.rule_id = r.id');

		if ($recursive) {
			$query->join('INNER', '#__usergroups AS ug1 ON ug1.id = ugrm.group_id');
			$query->join('LEFT', '#__usergroups AS ug2 ON ug2.left_id >= ug1.left_id AND ug2.right_id <= ug1.right_id');
		}
		else {
			$query->join('INNER', '#__usergroups AS ug2 ON ug2.id = ugrm.group_id');
		}

		$query->where('r.enabled = 1');
		$query->where('r.allow = 1');
		$query->where('a.name = '.$db->Quote($action));

		$db->setQuery($query->toString());

		$this->_quiet or $this->_log($db->getQuery());

		$ids = $db->loadResultArray();

		// Check for a database error.
		if ($db->getErrorNum()) {
			JError::raiseNotice(500, $db->getErrorMsg());
			return false;
		}

		$this->_quiet or $this->_log(print_r($ids, 1));

		return $ids;
	}


||||||||	function getAuthorisedUsergroups($action, $recursive = false)
	{
		// Get a database object.
		$db	= &JFactory::getDbo();

		// Build the base query.
		$query	= new JQuery;
		$query->select('DISTINCT ug2.id');
		$query->from('`#__access_actions` AS a');
		// Map actions to rules
		$query->join('INNER',	'`#__access_action_rule_map` AS arm ON arm.action_id = a.id');
		$query->join('INNER',	'`#__access_rules` AS r ON r.id = arm.rule_id');
		// Map users and/or user groups to rules
		$query->join('INNER',	'`#__usergroup_rule_map` AS ugrm ON ugrm.rule_id = r.id');

		if ($recursive) {
			$query->join('INNER', '#__usergroups AS ug1 ON ug1.id = ugrm.group_id');
			$query->join('LEFT', '#__usergroups AS ug2 ON ug2.left_id >= ug1.left_id AND ug2.right_id <= ug1.right_id');
		}
		else {
			$query->join('INNER', '#__usergroups AS ug2 ON ug2.id = ugrm.group_id');
		}

		$query->where('r.enabled = 1');
		$query->where('r.allow = 1');

		// Handle an array of actions or just a single action.
		if (is_array($action))
		{
			// Quote the actions.
			foreach ($action as $k => $v) {
				$action[$k] = $db->Quote($v);
			}
			$query->where('(a.name = '.implode(' OR a.name = ', $action).')');
		}
		else {
			$query->where('a.name = '.$db->Quote($action));
		}

		$db->setQuery($query->toString());

		$this->_quiet or $this->_log($db->getQuery());

		$ids = $db->loadResultArray();

		// Check for a database error.
		if ($db->getErrorNum()) {
			JError::raiseNotice(500, $db->getErrorMsg());
			return false;
		}

		$this->_quiet or $this->_log(print_r($ids, 1));

		return $ids;
	}


||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_BINARY_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_BINARY_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_BINARY_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_BINARY_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))