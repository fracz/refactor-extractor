||||||||	function displayHtml()
	{
		$app		= &$this->getApplication();
		$user 		= & $app->getUser();
		$mParams	= JComponentHelper::getMenuParams();

		// Push a model into the view
		$ctrl	= &$this->getController();
		$model	= & $ctrl->getModel('category', 'JContactModel');
		$this->setModel($model, true);

		// Selected Request vars
		$categoryId		= JRequest::getVar( 'catid', $mParams->get('category_id', 0 ), '', 'int' );
		$limit				= JRequest::getVar('limit', $mParams->get('display_num'), '', 'int');
		$limitstart			= JRequest::getVar('limitstart', 0, '', 'int');
		$filter_order		= JRequest::getVar('filter_order', 		'cd.ordering');
		$filter_order_Dir	= JRequest::getVar('filter_order_Dir', 	'ASC');

		// query options
		$qOptions['gid']			= $user->get('gid');

		$categories = $model->getCategories( $qOptions );

		$qOptions['category_id']	= $categoryId;
		$qOptions['limit']			= $limit;
		$qOptions['limitstart']		= $limitstart;
		$qOptions['order by']		= "$filter_order $filter_order_Dir, cd.ordering";

		$contacts = &$model->getContacts( $qOptions );
		$contactCount = $model->getContactCount( $qOptions );

		// find current category
		// TODO: Move to model
		$currentCategory = null;
		foreach ($categories as $i => $_cat)
		{
			if ($_cat->id == $categoryId)
			{
				$currentCategory = &$categories[$i];
				break;
			}
		}
		if ($currentCategory == null)
		{
			$db = &JFactory::getDBO();
			$currentCategory = JTable::getInstance( 'category', $db );
		}

		// Set the page title and breadcrumbs
		$breadcrumbs = & $app->getPathWay();

		if ($currentCategory->name)
		{
			// Add the category breadcrumbs item
			$breadcrumbs->addItem($currentCategory->name, '');
			$app->setPageTitle(JText::_('Contact').' - '.$currentCategory->name);
		}
		else
		{
			$app->SetPageTitle(JText::_('Contact'));
		}

		$cParams = &JComponentHelper::getControlParams();
		$template = JRequest::getVar( 'tpl', $cParams->get( 'template_name', 'table' ) );
		$template = preg_replace( '#\W#', '', $template );
		$tmplPath = dirname( __FILE__ ) . '/tmpl/' . $template . '.php';

		if (!file_exists( $tmplPath ))
		{
			$tmplPath = dirname( __FILE__ ) . '/tmpl/table.php';
		}

		require($tmplPath);
	}

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_ASSIGN_REF
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (SCALAR))))))
    (AST_INCLUDE_OR_EVAL
        (AST_VAR)))