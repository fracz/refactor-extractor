	function _createSession( $name, $useCookies = true)
	{
		JSession::useCookies(true);
		JSession::start(md5( $name ));

		$session = & JTable::getInstance('session', $this->getDBO());
		$session->purge( intval( $this->getCfg( 'lifetime' ) ) );

		if ($session->load( JSession::id())) {
			// Session cookie exists, update time in session table
			$session->update();
		} else {

			//make sure the session is cleared if we are logging in
			$option = JRequest::getVar('option');
			if ($option == 'login') {
				JSession::clear();
			}

			//create persistance store in the session
			JSession::set('registry', new JRegistry('application'));

			if (!$session->insert( JSession::id(), $this->getClientId())) {
				die( $session->getError() );
			}

			//TODO::Fix remember me (harden and move out of function)
			//$usercookie = mosGetParam( $_COOKIE, 'usercookie', null );
			//if ($usercookie) {
				// Remember me cookie exists. Login with usercookie info.
			//	$this->login( $usercookie['username'], $usercookie['password'] );
			//}
		}

		$this->_session = $session;

		JSession::setIdle($this->getCfg('lifetime'));

		return true;
	}

	/**
	 * Gets the client id of the current running application
	 *
	 * @access	public
	 * @return	int			A client identifier
	 * @since		1.5
	 */
||||||||	function _createSession( $name, $useCookies = true)
	{
		JSession::useCookies(true);
		JSession::start(md5( $name ));

		$session = & JTable::getInstance('session', $this->getDBO());
		$session->purge( intval( $this->getCfg( 'lifetime' ) ) );

		if ($session->load( JSession::id())) {
			// Session cookie exists, update time in session table
			$session->update();
		} else {

			//make sure the session is cleared if we are logging in
			$option = JRequest::getVar('option');
			if ($option == 'login') {
				JSession::clear();
			}

			//create persistance store in the session
			JSession::set('registry', new JRegistry('application'));

			if (!$session->insert( JSession::id(), $this->getClientId())) {
				die( $session->getError() );
			}

			//TODO::Fix remember me (harden and move out of function)
			//$usercookie = mosGetParam( $_COOKIE, 'usercookie', null );
			//if ($usercookie) {
				// Remember me cookie exists. Login with usercookie info.
			//	$this->login( $usercookie['username'], $usercookie['password'] );
			//}
		}

		JSession::setIdle($this->getCfg('lifetime'));
		JSession::setGcMaxLifetime($this->getCfg('lifetime'));

		return true;
	}

	/**
	 * Gets the client id of the current running application
	 *
	 * @access	public
	 * @return	int			A client identifier
	 * @since		1.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_STATIC_CALL)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL))))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_NEW
                            (
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_STATIC_CALL)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (
                            (AST_EXIT
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_STATIC_CALL)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL))))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_NEW
                            (
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_STATIC_CALL)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))))
                        (
                            (AST_EXIT
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_RETURN
        (AST_CONST)))