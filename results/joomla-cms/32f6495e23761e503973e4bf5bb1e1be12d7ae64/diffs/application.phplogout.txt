	function logout()
	{
		// Initialize variables
		$retval = false;

		// Get a user object from the JApplication
		$user = $this->getUser();

		// Build the credentials array
		$credentials['username'] 	= $user->get('username');
		$credentials['id'] 			= $user->get('id');

		// Import the user plugin group
		JPluginHelper::importPlugin('user');

		// OK, the credentials are built. Lets fire the onLogout event
		$results = $this->triggerEvent( 'onLogout', $credentials);

		/*
		 * If any of the authentication plugins did not successfully complete the logout
		 * routine then the whole method fails.  Any errors raised should be done in
		 * the plugin as this provides the ability to provide much more information
		 * about why the routine may have failed.
		 */
		if (!in_array(false, $results, true))
		{
			// TODO: JRegistry will make this unnecessary
			// Get the session object
			$session =& $this->_session;
			$session->destroy();

			// Destroy the session for this user
			JSession::destroy();

			$retval = true;
		}
		return $retval;
	}

	/**
	 * Return the application option string [main component]
	 *
	 * @access public
	 * @return string Option
	 * @since 1.5
	 */
||||||||	function logout()
	{
		// Initialize variables
		$retval = false;

		// Get a user object from the JApplication
		$user = JFactory::getUser();

		// Build the credentials array
		$credentials['username'] 	= $user->get('username');
		$credentials['id'] 			= $user->get('id');

		// Import the user plugin group
		JPluginHelper::importPlugin('user');

		// OK, the credentials are built. Lets fire the onLogout event
		$results = $this->triggerEvent( 'onLogout', $credentials);

		/*
		 * If any of the authentication plugins did not successfully complete the logout
		 * routine then the whole method fails.  Any errors raised should be done in
		 * the plugin as this provides the ability to provide much more information
		 * about why the routine may have failed.
		 */
		if (!in_array(false, $results, true))
		{
			// Remove the session from the session table
			$session = & JTable::getInstance('session', $this->getDBO());
			$session->load( JSession::id());
			$session->destroy();

			// Destroy the php session for this user
			JSession::destroy();

			$retval = true;
		}

		// Hit the user last visit field
		$user->setLastVisit();

		return $retval;
	}

	/**
	 * Return the application option string [main component]
	 *
	 * @access public
	 * @return string Option
	 * @since 1.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_CONST)
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_STATIC_CALL)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_CONST)
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL)))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_STATIC_CALL)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))