	function uploadpackage()
	{
		global $mainframe;

		/*
		 * Get a database connector
		 */
		$db = & $mainframe->getDBO();

		/*
		 * Get the uploaded file information
		 */
		$userfile	= JRequest::getVar('userfile', '', 'files', 'array');
		$baseDir	= JPath::clean(JPATH_SITE.DS.'media');

		/*
		 * Make sure that file uploads are enabled in php
		 */
		if (!(bool) ini_get('file_uploads')) {
			JError::raiseError('SOME_ERROR_CODE', JText::_('WARNINSTALLFILE'));
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * Make sure that zlib is loaded so that the package can be unpacked
		 */
		if (!extension_loaded('zlib')) {
			JError::raiseError('SOME_ERROR_CODE', JText::_('WARNINSTALLZLIB'));
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * If there is no uploaded file, we have a problem...
		 */
		if (!is_array($userfile) || $userfile['size'] < 1) {
			JError::raiseError('SOME_ERROR_CODE', JText::_('No file selected'));
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * Move uploaded file
		 */
		$uploaded = JFile::upload($userfile['tmp_name'], $baseDir.$userfile['name']);

		/*
		 * Unpack the downloaded package file
		 */
		$package = JInstallerHelper::unpack($userfile['name']);

		/*
		 * Was the package unpacked?
		 */
		if (!$package) {
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * Get an installer instance
		 */
		$installer = & JInstaller::getInstance($db, $package['type']);

		/*
		 * Install the package
		 */
		if (!$installer->install($package['dir'])) {
			/*
			 * There was an error in installing the package
			 */
			$msg = sprintf(JText::_('INSTALLEXT'), $package['type'], JText::_('Error'));
			JInstallerScreens::showInstallMessage($msg, $installer->description, $installer->message);
			// Cleanup the install files
			JInstallerHelper::cleanupInstall($baseDir.$userfile['name'], $package['extractdir']);
		} else {
			/*
			 * Package installed sucessfully
			 */
			$msg = sprintf(JText::_('INSTALLEXT'), $package['type'], JText::_('Success'));
			JInstallerScreens::showInstallMessage($msg, $installer->description, $installer->message);
			// Cleanup the install files
			JInstallerHelper::cleanupInstall($baseDir.$userfile['name'], $package['extractdir']);
		}
	}

	/**
	 * Install an extension from a directory
	 *
	 * @static
	 * @return boolean True on success
	 * @since 1.0
	 */
||||||||	function uploadpackage()
	{
		global $mainframe;

		/*
		 * Get a database connector
		 */
		$db = & $mainframe->getDBO();

		/*
		 * Get the uploaded file information
		 */
		$userfile	= JRequest::getVar('userfile', '', 'files', 'array');
		$baseDir	= JPATH_SITE.DS.'media';

		/*
		 * Make sure that file uploads are enabled in php
		 */
		if (!(bool) ini_get('file_uploads')) {
			JError::raiseError('SOME_ERROR_CODE', JText::_('WARNINSTALLFILE'));
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * Make sure that zlib is loaded so that the package can be unpacked
		 */
		if (!extension_loaded('zlib')) {
			JError::raiseError('SOME_ERROR_CODE', JText::_('WARNINSTALLZLIB'));
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * If there is no uploaded file, we have a problem...
		 */
		if (!is_array($userfile) || $userfile['size'] < 1) {
			JError::raiseError('SOME_ERROR_CODE', JText::_('No file selected'));
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * Move uploaded file
		 */
	    jimport('joomla.filesystem.file');
		$uploaded = JFile::upload($userfile['tmp_name'], $baseDir.DS.$userfile['name']);

		/*
		 * Unpack the downloaded package file
		 */
		$package = JInstallerHelper::unpack($userfile['name']);

		/*
		 * Was the package unpacked?
		 */
		if (!$package) {
			JInstallerScreens::showInstallForm();
			return false;
		}

		/*
		 * Get an installer instance
		 */
		$installer = & JInstaller::getInstance($db, $package['type']);

		/*
		 * Install the package
		 */
		if (!$installer->install($package['dir'])) {
			/*
			 * There was an error in installing the package
			 */
			$msg = sprintf(JText::_('INSTALLEXT'), $package['type'], JText::_('Error'));
			JInstallerScreens::showInstallMessage($msg, $installer->description, $installer->message);
			// Cleanup the install files
			JInstallerHelper::cleanupInstall($baseDir.DS.$userfile['name'], $package['extractdir']);
		} else {
			/*
			 * Package installed sucessfully
			 */
			$msg = sprintf(JText::_('INSTALLEXT'), $package['type'], JText::_('Success'));
			JInstallerScreens::showInstallMessage($msg, $installer->description, $installer->message);
			// Cleanup the install files
			JInstallerHelper::cleanupInstall($baseDir.DS.$userfile['name'], $package['extractdir']);
		}
	}

	/**
	 * Install an extension from a directory
	 *
	 * @static
	 * @return boolean True on success
	 * @since 1.0
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CAST
                    (AST_CALL
                        (
                            (SCALAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONST)
                (AST_CONST))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CAST
                    (AST_CALL
                        (
                            (SCALAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_STATIC_CALL)
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))))))