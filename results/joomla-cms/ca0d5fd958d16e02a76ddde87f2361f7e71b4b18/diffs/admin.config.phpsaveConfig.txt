	function saveConfig($task)
	{
		global $mainframe;

		$mainframe->_registry->loadArray($_POST);

		/*
		 * Handle the server time offset
		 */
		$server_time = date('O') / 100;
		$offset = JRequest::getVar('offset_user', 0, 'post', 'int') - $server_time;
		$mainframe->_registry->setValue('config.offset', $offset);

		// Get the path of the configuration file
		$fname = JPATH_CONFIGURATION.'/configuration.php';

		/*
		 * Now we get the config registry in PHP class format and write it to
		 * configuation.php then redirect appropriately.
		 */
		if (JFile::write($fname, $mainframe->_registry->toString('PHP', 'config', array('class' => 'JConfig')))) {

			$msg = JText::_('The Configuration Details have been updated');

			switch ($task) {
				case 'apply' :
					josRedirect('index2.php?option=com_config', $msg);
					break;

				case 'save' :
				default :
					josRedirect('index2.php', $msg);
					break;
			}
		} else {
			josRedirect('index2.php', JText::_('ERRORCONFIGFILE'));
		}
	}
}
?>||||||||	function saveConfig($task)
	{
		global $mainframe;

		$mainframe->_registry->loadArray($_POST);

		/*
		 * Handle the server time offset
		 */
		$server_time = date('O') / 100;
		$offset = JRequest::getVar('offset_user', 0, 'post', 'int') - $server_time;
		$mainframe->_registry->setValue('config.offset', $offset);

		// Get the path of the configuration file
		$fname = JPATH_CONFIGURATION.'/configuration.php';

		/*
		 * Now we get the config registry in PHP class format and write it to
		 * configuation.php then redirect appropriately.
		 */
		jimport('joomla.filesystem.file');
		if (JFile::write($fname, $mainframe->_registry->toString('PHP', 'config', array('class' => 'JConfig')))) {

			$msg = JText::_('The Configuration Details have been updated');

			switch ($task) {
				case 'apply' :
					josRedirect('index2.php?option=com_config', $msg);
					break;

				case 'save' :
				default :
					josRedirect('index2.php', $msg);
					break;
			}
		} else {
			josRedirect('index2.php', JText::_('ERRORCONFIGFILE'));
		}
	}
}
?>||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_SWITCH
                    (AST_VAR)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR))
                        (AST_SWITCH_CASE
                            (NULL)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_SWITCH
                    (AST_VAR)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR))
                        (AST_SWITCH_CASE
                            (NULL)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_BREAK
                                    (NULL))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))))))