	function _parseXMLLanguageFiles( $dir=null ) {
		mosFS::load( '@domit' );

		if ($dir == null ) {
			return null;
		}

		$languages = array();
		$files = mosFS::listFiles( $dir, '^([A-Za-z]*)\.xml$' );
		foreach ($files as $file) {
			if ($content = file_get_contents( $dir . $file )) {
				$xmlDoc = new DOMIT_Lite_Document();
				$xmlDoc->resolveErrors( true );
				if (!$xmlDoc->loadXML( $dir . $file, false, true )) {
					continue;
				}
				$language = &$xmlDoc->documentElement;

				// Check that it's am installation file
				if ($language->getTagName() != 'mosinstall') {
					continue;
				}

				$lang = str_replace( '.xml', '', $file );
				if ($language->getAttribute( 'type' ) == 'language') {
					$nameElement =& $language->getElementsByPath( 'name', 1 );
					$name = $nameElement->getText();
				}

				$languages[$lang] = $name;
			}
		}
		return $languages;
	}
}

/**
 * @package Joomla
 * @subpackage Language
 */
class mosLanguageFactory {
	/**
	 * Builds a list of the system languages which can be used in a select option
	 * @param string	client key for the area
	 * @param array	An array of arrays ( text, value, selected )
	 */
	function buildLanguageList( $client=2, $actualLanguage ) {
		global $_LANG;

		$list = array();

		if( is_string( $client ) ) {
			$client = mosMainFrame::getClientID( $client );
		}

		// cache activation
		if( class_exists( 'mosCache' ) ) {
			$cache =& mosCache::getCache( 'mosLanguage' );
			$langs = $cache->call( 'mosLanguage::getKnownLanguages', $client );
		} else {
			$langs = mosLanguage::getKnownLanguages( $client );
		}

		foreach ($langs as $lang=>$name) {
			$option = array();

			$option['text'] = $_LANG->_( $name );
			$option['value'] = $lang;
			if( $lang == $actualLanguage ) {
				$option['selected'] = 'selected="true"';
			}
			$list[] = $option;
		}

		return $list;
	}

	/**
	 * @return object A template installer object
	 */
	function &createInstaller() {
		mosFS::load( '/administrator/components/com_installer/installer.class.php' );
		mosFS::load( '/administrator/components/com_languages/languages.installer.php' );
		return new mosLanguageInstaller();
	}
}
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_VAR))
                                            (AST_CONST)
                                            (AST_CONST))))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN_REF
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)))
                                    (SCALAR))
                                (
                                    (AST_ASSIGN_REF
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)
                                                (SCALAR))))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||