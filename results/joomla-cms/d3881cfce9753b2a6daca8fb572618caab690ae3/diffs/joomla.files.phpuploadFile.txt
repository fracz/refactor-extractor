	function uploadFile( $srcFile, $destFile, &$msg ) {
		$srcFile = mosFS::getNativePath( $srcFile, false );
		$destFile = mosFS::getNativePath( $destFile, false );
		mosFS::check( $destFile );

		$baseDir = dirname( $destFile );

		if (file_exists( $baseDir )) {
			if (is_writable( $baseDir )) {
				if (move_uploaded_file( $srcFile, $destFile )) {
					if (mosFS::CHMOD( $destFile )) {
						return true;
					} else {
						$msg = MOSFS_ERR01;
					}
				} else {
					$msg = MOSFS_ERR02;
				}
			} else {
				$msg = MOSFS_ERR03;
			}
		} else {
			$msg = MOSFS_ERR04;
		}
		return false;
	}
}

/** boolean True if a Windows based host */
define( 'MOSFS_ISWIN', (substr(PHP_OS, 0, 3) == 'WIN') );

define( 'MOSFS_ERR01', 'Warning - Failed to change file permissions' );
define( 'MOSFS_ERR02', 'Warning - Failed to move file' );
define( 'MOSFS_ERR03', 'Upload failed, directory not writable' );
define( 'MOSFS_ERR04', 'Upload failed, directory does not exist' );

if (!defined( 'MOSFS_ROOT' )) {
	/** string The root directory of the file system in native format */
	define( 'MOSFS_ROOT', mosFS::getNativePath( $mosConfig_absolute_path ) );
}
if (!defined( 'MOSFS_FILEPEMS' )) {
	/** string The default directory permissions */
	define( 'MOSFS_FILEPEMS',  !empty( $mosConfig_fileperms ) ? octdec( $mosConfig_fileperms ) : null );
}
if (!defined( 'MOSFS_DIRPEMS' )) {
	/** string The default directory permissions */
	define( 'MOSFS_DIRPEMS',  !empty( $mosConfig_dirperms ) ? octdec( $mosConfig_dirperms ) : null );
}

/**
 * Gets the base path for a client type
 * @param mixed String or interger value for the client
 * @return string
 */
function mosGetBasePath( $client=null ) {
	global $mosConfig_absolute_path;

	switch ($client) {
		case '2':
		case 'installer':
			$basePath = $mosConfig_absolute_path . '/installation/';
			break;
		case '1':
		case 'admin':
		case 'administrator':
			$basePath = $mosConfig_absolute_path . '/administrator/';
			break;
		default:
			$basePath = $mosConfig_absolute_path;
			break;
	}
	return mosFS::getNativePath( $basePath );
}
/**
* Legacy function, use mosFS::getNativePath instead
*/
function mosPathName($p_path, $p_addtrailingslash = true) {
	return mosFS::getNativePath( $p_path, $p_addtrailingslash );
}

/**
* Legacy function, use mosFS::listFiles or mosFS::listFolders instead
*/
function mosReadDirectory( $path, $filter='.', $recurse=false, $fullpath=false  ) {
	$arr = array();
	if (!@is_dir( $path )) {
		return $arr;
	}
	$handle = opendir( $path );

	while ($file = readdir($handle)) {
		$dir = mosPathName( $path.'/'.$file, false );
		$isDir = is_dir( $dir );
		if (($file <> ".") && ($file <> "..")) {
			if (preg_match( "/$filter/", $file )) {
				if ($fullpath) {
					$arr[] = trim( mosPathName( $path.'/'.$file, false ) );
				} else {
					$arr[] = trim( $file );
				}
			}
			if ($recurse && $isDir) {
				$arr2 = mosReadDirectory( $dir, $filter, $recurse, $fullpath );
				$arr = array_merge( $arr, $arr2 );
			}
		}
	}
	closedir($handle);
	asort($arr);
	return $arr;
}

/**
 * Legacy function, use mosFS::CHMOD instead
 */
function mosChmod( $path ) {
	return mosFS::CHMOD( $path );
}

/**
 * Legacy function, use mosFS::CHMOD instead
 */
function mosChmodRecursive( $path, $filemode=NULL, $dirmode=NULL ) {
	return mosFS::CHMOD( $path, $filemode, $dirmode );
}

/**
* Legacy function, use mosFS::canCHMOD
*/
function mosIsChmodable( $file ) {
	return mosFS::canCHMOD( $file );
}

/**
* @param string An existing base path
* @param string A path to create from the base path
* @param int Directory permissions
* @return boolean True if successful
*/
function mosMakePath($base, $path='', $mode = NULL)
{
	global $mosConfig_dirperms;

	// convert windows paths
	$path = str_replace( '\\', '/', $path );
	$path = str_replace( '//', '/', $path );

	// check if dir exists
	if (file_exists( $base . $path )) return true;

	// set mode
	$origmask = NULL;
	if (isset($mode)) {
		$origmask = @umask(0);
	} else {
		if ($mosConfig_dirperms=='') {
			// rely on umask
			$mode = 0777;
		} else {
			$origmask = @umask(0);
			$mode = octdec($mosConfig_dirperms);
		} // if
	} // if

	$parts = explode( '/', $path );
	$n = count( $parts );
	$ret = true;
	if ($n < 1) {
		$ret = @mkdir($base, $mode);
	} else {
		$path = $base;
		for ($i = 0; $i < $n; $i++) {
			$path .= $parts[$i] . '/';
			if (!file_exists( $path )) {
				if (!@mkdir( $path, $mode )) {
					$ret = false;
					break;
				}
			}
		}
	}
	if (isset($origmask)) @umask($origmask);
	return $ret;
}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)))
                                                (
                                                    (AST_RETURN
                                                        (AST_CONST))))
                                            (AST_IF_ELEM
                                                (NULL)
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_CONST)))))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST)))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||