	public function restart()
	{
		$this->destroy();

		if ($this->getState() !== 'destroyed')
		{
			// @TODO :: generated error here
			return false;
		}

		// Re-register the session handler after a session has been destroyed, to avoid PHP bug
		$this->_store->register();

		$this->_state = 'restart';

		// Regenerate session id
		$this->_start();
		$this->_handler->regenerate(true, null);
		$this->_state = 'active';

		if (!$this->_validate())
		{
			/**
			 * Destroy the session if it's not valid - we can't restart the session here unlike in the start method
			 * else we risk recursion.
			 */
			$this->destroy();
		}

		$this->_setCounter();

		return true;
	}

	/**
	 * Create a new session and copy variables from the old one
	 *
	 * @return  boolean $result true on success
	 *
	 * @since   11.1
	 */
||||||||	public function restart()
	{
		$this->destroy();

		if ($this->_state !== 'destroyed')
		{
			// @TODO :: generated error here
			return false;
		}

		// Re-register the session handler after a session has been destroyed, to avoid PHP bug
		$this->_store->register();

		$this->_state = 'restart';

		// Regenerate session id
		$this->_start();
		$this->_handler->regenerate(true, null);
		$this->_state = 'active';

		if (!$this->_validate())
		{
			/**
			 * Destroy the session if it's not valid - we can't restart the session here unlike in the start method
			 * else we risk recursion.
			 */
			$this->destroy();
		}

		$this->_setCounter();

		return true;
	}

	/**
	 * Create a new session and copy variables from the old one
	 *
	 * @return  boolean $result true on success
	 *
	 * @since   11.1
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))