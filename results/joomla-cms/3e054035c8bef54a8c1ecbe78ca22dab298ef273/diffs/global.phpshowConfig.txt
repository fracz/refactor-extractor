	function showConfig( &$row, &$lists )
	{
		global $mainframe;

		$document =& JFactory::getDocument();
		$document->addScript(JURI::base().'components/com_config/assets/switcher.js');

		$contents = '';
		ob_start();
			require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'navigation.html');
		$contents = ob_get_contents();
		ob_end_clean();

		$document->set('module', 'submenu', $contents);
		require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'writeable.html');
		mosCommonHTML::loadOverlib();
		?>
		<form action="index2.php" method="post" name="adminForm">

		<div id="config-document">
			<div id="page-site">
				<table class="noshow">
					<tr>
						<td with="65%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_site.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_metadata.html'); ?>
						</td>
						<td width="35%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_debug.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_statistics.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_seo.html'); ?>
						</td>
					</tr>
				</table>
			</div>

			<div id="page-user">
				<table class="noshow">
					<tr>
						<td with="50%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_register.html'); ?>
						</td>
						<td with="50%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_user.html'); ?>
						</td>
					</tr>
				</table>

			</div>

			<div id="page-content">
				<table class="noshow">
					<tr>
						<td with="50%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_content.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_feeds.html'); ?>
						</td>
						<td width="50%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_content2.html'); ?>
						</td>
					</tr>
				</table>
			</div>

			<div id="page-server">
				<table class="noshow">
					<tr>
						<td with="60%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_server.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_locale.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_cache.html'); ?>
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS. (JUtility::isWinOS() ? 'config_noftp.html':'config_ftp.html')); ?>
						</td>
						<td width="40%">
							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_database.html'); ?>

							<?php require_once(JPATH_COMPONENT.DS.'tmpl'.DS.'config_mail.html'); ?>
						</td>
					</tr>
				</table>
			</div>
		</div>
		<div class="clr"></div>

		<input type="hidden" name="c" value="global" />
		<input type="hidden" name="option" value="com_config" />
		<input type="hidden" name="secret" value="<?php echo $row->secret; ?>" />
		<input type="hidden" name="multilingual_support" value="<?php echo $row->multilingual_support; ?>" />
	  	<input type="hidden" name="lang_site" value="<?php echo $row->lang_site; ?>" />
	  	<input type="hidden" name="lang_administrator" value="<?php echo $row->lang_administrator; ?>" />
	  	<input type="hidden" name="task" value="" />
		</form>
		<?php
	}
}
?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_STATIC_CALL)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_CALL)
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_CALL)
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (AST_CONDITIONAL
                (AST_STATIC_CALL)
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR)))||||||||