	public function testAddLink()
	{
		$expected = new JFeedLink('http://domain.com/path/to/resource');
		$this->_instance->addLink($expected);

		$properties = TestReflection::getValue($this->_instance, 'properties');

		// Make sure the link we added actually exists.
		$this->assertTrue(
			in_array(
				$expected,
				$properties['links']
			)
		);

		$this->_instance->addLink($expected);

		$properties = TestReflection::getValue($this->_instance, 'properties');

		// Make sure we aren't adding the same link more than once.
		$this->assertTrue(count($properties['links']) == 1);
	}

	/**
	 * Tests the JFeedEntry::removeCategory method.
	 *
	 * @return  void
	 *
	 * @since   12.3
	 */
||||||||	public function testAddLink()
	{
		$expected = new JFeedLink('http://domain.com/path/to/resource');
		$this->_instance->addLink($expected);

		$properties = TestReflection::getValue($this->_instance, 'properties');

		// Make sure the link we added actually exists.
		$this->assertTrue(
			in_array(
				$expected,
				$properties['links']
			)
		);

		$this->_instance->addLink($expected);

		$properties = TestReflection::getValue($this->_instance, 'properties');

		// Make sure we aren't adding the same link more than once.
		$this->assertCount(1, $properties['links']);
	}

	/**
	 * Tests the JFeedEntry::removeCategory method.
	 *
	 * @return  void
	 *
	 * @since   12.3
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR)))))