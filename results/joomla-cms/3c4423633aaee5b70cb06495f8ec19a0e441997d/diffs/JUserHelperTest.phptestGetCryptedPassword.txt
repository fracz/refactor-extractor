	public function testGetCryptedPassword()
	{
		$this->assertSame(
			'mySuperSecretPassword',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'plain'),
			'Plain text password is returned'
		);

		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt')) === 13,
			'Password is hashed to crypt without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt-des')) === 13,
			'Password is hashed to crypt-des without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-des');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt-des with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-des', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt-des with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt-md5')) === 34,
			'Password is hashed to crypt-md5 without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-md5');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt-md5 with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-md5', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt-md5 with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt-blowfish')) === 60,
			'Password is hashed to crypt-blowfish without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-blowfish');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt-blowfish with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-blowfish', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt-blowfish with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'aprmd5');

		$this->assertTrue(strlen($password) === 37, 'Password is hashed to APRMD5 without salt');
		$this->assertSame('$apr1$', substr($password, 0, 6), 'Password hash uses expected prefix');

		$this->assertSame(
			'$apr1$myPasssw$8f98MlB.CDF6iheQgsFmE.',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '$apr1$myPasssw$8f98MlB.CDF6iheQgsFmE.', 'aprmd5'),
			'Password is hashed to APRMD5 with salt'
		);

		// Length should be 81 characters but due to a bug which causes the prefix to always render it adds 8 characters
		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'sha256')) === 89,
			'Password is hashed to SHA256 without salt'
		);

		// Due to a bug which causes the prefix to always render it is present here
		$this->assertSame(
			'{SHA256}612994683da31910fdcabce8237303a57740e9b68b0584b2b1647539ccc28578:879334ce9ac922c6',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '879334ce9ac922c6', 'sha256'),
			'Password is hashed to SHA256 with salt'
		);

		$this->assertSame(
			'{SHA256}612994683da31910fdcabce8237303a57740e9b68b0584b2b1647539ccc28578:879334ce9ac922c6',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '879334ce9ac922c6', 'sha256', true),
			'Password is hashed to SHA256 with salt with encryption prefix'
		);

		$this->assertSame(
			'693560686f4d591d8dd5e34006442061',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'md5-hex'),
			'Password is hashed to MD5-HEX without salt'
		);

		$this->assertSame(
			'a334d9084fa0dc4ea5449afa047480e8',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', 'myPassswordHasSalt', 'md5-hex'),
			'Password is hashed to MD5-HEX with salt'
		);

		$this->assertSame(
			'{MD5}a334d9084fa0dc4ea5449afa047480e8',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', 'myPassswordHasSalt', 'md5-hex', true),
			'Password is hashed to MD5-HEX with salt with encryption prefix'
		);
	}

	/**
	 * Testing getCryptedPassword(). This is an extension of the method above but requires
	 * the PHP Mhash function which is missing in Travis and our current Jenkins Build
	 *
	 * @covers  JUserHelper::getCryptedPassword
	 * @return  void
	 *
	 * @since   3.5
	 */
||||||||	public function testGetCryptedPassword()
	{
		$this->assertSame(
			'mySuperSecretPassword',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'plain'),
			'Plain text password is returned'
		);

		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt')), 13, 'Password is hashed to crypt without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt-des')), 13, 'Password is hashed to crypt-des without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-des');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt-des with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-des', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt-des with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt-md5')), 34, 'Password is hashed to crypt-md5 without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-md5');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt-md5 with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-md5', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt-md5 with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'crypt-blowfish')), 60, 'Password is hashed to crypt-blowfish without salt'
		);

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-blowfish');

		$this->assertSame('myA38Ex7aHbws', $password, 'Password is hashed to crypt-blowfish with salt');
		$this->assertSame('my', substr($password, 0, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '{crypt}myA38Ex7aHbws', 'crypt-blowfish', true);

		$this->assertSame('{crypt}myA38Ex7aHbws', $password, 'Password is hashed to crypt-blowfish with salt with encryption prefix');
		$this->assertSame('my', substr($password, 7, 2), 'Password hash uses expected salt');

		$password = JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'aprmd5');

		$this->assertSame(strlen($password), 37, 'Password is hashed to APRMD5 without salt');
		$this->assertSame('$apr1$', substr($password, 0, 6), 'Password hash uses expected prefix');

		$this->assertSame(
			'$apr1$myPasssw$8f98MlB.CDF6iheQgsFmE.',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '$apr1$myPasssw$8f98MlB.CDF6iheQgsFmE.', 'aprmd5'),
			'Password is hashed to APRMD5 with salt'
		);

		// Length should be 81 characters but due to a bug which causes the prefix to always render it adds 8 characters
		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'sha256')), 89, 'Password is hashed to SHA256 without salt'
		);

		// Due to a bug which causes the prefix to always render it is present here
		$this->assertSame(
			'{SHA256}612994683da31910fdcabce8237303a57740e9b68b0584b2b1647539ccc28578:879334ce9ac922c6',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '879334ce9ac922c6', 'sha256'),
			'Password is hashed to SHA256 with salt'
		);

		$this->assertSame(
			'{SHA256}612994683da31910fdcabce8237303a57740e9b68b0584b2b1647539ccc28578:879334ce9ac922c6',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '879334ce9ac922c6', 'sha256', true),
			'Password is hashed to SHA256 with salt with encryption prefix'
		);

		$this->assertSame(
			'693560686f4d591d8dd5e34006442061',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'md5-hex'),
			'Password is hashed to MD5-HEX without salt'
		);

		$this->assertSame(
			'a334d9084fa0dc4ea5449afa047480e8',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', 'myPassswordHasSalt', 'md5-hex'),
			'Password is hashed to MD5-HEX with salt'
		);

		$this->assertSame(
			'{MD5}a334d9084fa0dc4ea5449afa047480e8',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', 'myPassswordHasSalt', 'md5-hex', true),
			'Password is hashed to MD5-HEX with salt with encryption prefix'
		);
	}

	/**
	 * Testing getCryptedPassword(). This is an extension of the method above but requires
	 * the PHP Mhash function which is missing in Travis and our current Jenkins Build
	 *
	 * @covers  JUserHelper::getCryptedPassword
	 * @return  void
	 *
	 * @since   3.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR))))