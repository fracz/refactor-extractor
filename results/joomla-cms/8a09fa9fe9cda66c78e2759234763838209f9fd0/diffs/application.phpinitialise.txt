	function initialise($options = array())
	{
		//Set the language in the class
		$conf =& JFactory::getConfig();
		// Check that we were given a language in the array (since by default may be blank)
		if(isset($options['language'])) $conf->setValue('config.language', $options['language']);

		//set language debug -> lazy load it later
		$lang =& JFactory::getLanguage();
		$lang->setDebug($this->getCfg('debug_lang'));

		//define date formats
		//define('DATE_FORMAT_LC' , JText::_('DATE_FORMAT_LC' ));
		//define('DATE_FORMAT_LC2', JText::_('DATE_FORMAT_LC2'));
		//define('DATE_FORMAT_LC3', JText::_('DATE_FORMAT_LC3'));
		//define('DATE_FORMAT_LC4', JText::_('DATE_FORMAT_LC4'));

		// create the backward compatible language value for old 3PD components
		if($conf->getValue('config.legacy')) {
			$GLOBALS['mosConfig_lang'] = $lang->getBackwardLang();
		}

		//create the router -> lazy load it later
		$this->_createRouter();
	}

	/**
	* Route the applicaiton.
	*
	* Routing is the process of examining the request environment to determine which
	* which component should receive the request. This component optional parameters
	* are then set in the request object to be processed when the application is being
	* dispatched
	*
	* @abstract
	* @access public
	*/
||||||||	function initialise($options = array())
	{
		//Set the language in the class
		$conf =& JFactory::getConfig();
		// Check that we were given a language in the array (since by default may be blank)
		if(isset($options['language'])) $conf->setValue('config.language', $options['language']);

		//define date formats
		//define('DATE_FORMAT_LC' , JText::_('DATE_FORMAT_LC' ));
		//define('DATE_FORMAT_LC2', JText::_('DATE_FORMAT_LC2'));
		//define('DATE_FORMAT_LC3', JText::_('DATE_FORMAT_LC3'));
		//define('DATE_FORMAT_LC4', JText::_('DATE_FORMAT_LC4'));

		//create the router -> lazy load it later
		$this->_createRouter();
	}

	/**
	* Route the applicaiton.
	*
	* Routing is the process of examining the request environment to determine which
	* which component should receive the request. This component optional parameters
	* are then set in the request object to be processed when the application is being
	* dispatched
	*
	* @abstract
	* @access public
	*/
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)))