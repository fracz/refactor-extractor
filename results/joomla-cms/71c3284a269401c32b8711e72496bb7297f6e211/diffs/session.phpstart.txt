	function start($name = 'SessionID', $id = null)
    {
        JSession::name($name);
        if (is_null(JSession::_detectID())) {
            JSession::id($id ? $id : JSession::_createID());
        }
		session_cache_limiter('none');
        session_start();
		// Send modified header for IE 6.0 Security Policy
		header('P3P: CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"');

        if (!isset($_SESSION['__HTTP_SESSION_INFO'])) {
            $_SESSION['__HTTP_SESSION_INFO'] = HTTP_SESSION_STARTED;
        } else {
            $_SESSION['__HTTP_SESSION_INFO'] = HTTP_SESSION_CONTINUED;
        }
    }

	 /**
     * Writes session data and ends session
     *
     * Session data is usually stored after your script terminated without the need
     * to call JSession::stop(),but as session data is locked to prevent concurrent
     * writes only one script may operate on a session at any time. When using
     * framesets together with sessions you will experience the frames loading one
     * by one due to this locking. You can reduce the time needed to load all the
     * frames by ending the session as soon as all changes to session variables are
     * done.
     *
     * @static
     * @access public
     * @return void
     * @see    session_write_close()
     */
||||||||    function start()
    {
		//  start session if not startet
		if( $this->_state == 'restart' ) {
            session_id( $this->_createId() );
        }

		session_cache_limiter('none');
        session_start();

		// Send modified header for IE 6.0 Security Policy
		header('P3P: CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"');

        return true;
    }


	/**
     * Frees all session variables and destroys all data registered to a session
     *
     * This method resets the $_SESSION variable and destroys all of the data associated
     * with the current session in its storage (file or DB). It forces new session to be
     * started after this method is called. It does not unset the session cookie.
     *
     * @static
     * @access public
     * @return void
     * @see    session_unset()
     * @see    session_destroy()
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_STATIC_CALL)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_VAR)
                            (AST_VAR)
                            (AST_STATIC_CALL)))))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL)
    (AST_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL)
    (AST_CALL
        (
            (SCALAR)))
    (AST_RETURN
        (AST_CONST)))