	public function testIsEnabledWithAdminApp()
	{
		$mockApplication = $this->getMock('JApplicationAdministrator');
		$mockApplication->expects($this->any())
			->method('isSite')
			->willReturn(false);
		JFactory::$application = $mockApplication;

		$this->assertFalse(
			JLanguageMultilang::isEnabled()
		);
	}
}||||||||	public function testIsEnabledWithAdminApp()
	{
		// Build the mock object.
		$mockApplication = $this->getMockBuilder('JApplicationAdministrator')->getMock();
		$mockApplication->expects($this->any())
			->method('isSite')
			->willReturn(false);
		JFactory::$application = $mockApplication;

		$this->assertFalse(
			JLanguageMultilang::isEnabled()
		);
	}
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL))))