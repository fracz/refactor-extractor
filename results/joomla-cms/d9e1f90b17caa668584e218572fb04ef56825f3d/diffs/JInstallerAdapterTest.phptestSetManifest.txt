	public function testSetManifest()
	{
		$mockInstaller = $this->getMock('JInstaller');
		$mockDatabase = $this->getMockDatabase();
		$object = $this->getMockForAbstractClass('JInstallerAdapter', array($mockInstaller, $mockDatabase));
		$manifestObject = simplexml_load_string($this->sampleManifest);

		$this->assertInstanceOf(
			'JInstallerAdapter',
			$object->setManifest($manifestObject),
			'JInstallerAdapter::setManifest() should return an instance of itself'
		);

		$this->assertEquals(
			$manifestObject,
			$object->manifest,
			'The manifest was not set correctly as a class variable'
		);
	}


	/**
	 * @testdox Test setting a string as the route
	 *
	 * @covers  JInstallerAdapter::setRoute
	 */
||||||||	public function testSetManifest()
	{
		$mockInstaller = $this->getMockBuilder('JInstaller')->getMock();
		$mockDatabase = $this->getMockDatabase();
		$object = $this->getMockForAbstractClass('JInstallerAdapter', array($mockInstaller, $mockDatabase));
		$manifestObject = simplexml_load_string($this->sampleManifest);

		$this->assertInstanceOf(
			'JInstallerAdapter',
			$object->setManifest($manifestObject),
			'JInstallerAdapter::setManifest() should return an instance of itself'
		);

		$this->assertEquals(
			$manifestObject,
			$object->manifest,
			'The manifest was not set correctly as a class variable'
		);
	}


	/**
	 * @testdox Test setting a string as the route
	 *
	 * @covers  JInstallerAdapter::setRoute
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR))))