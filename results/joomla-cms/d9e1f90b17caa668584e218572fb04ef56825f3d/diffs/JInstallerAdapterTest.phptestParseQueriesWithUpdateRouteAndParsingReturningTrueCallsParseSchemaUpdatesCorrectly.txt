	public function testParseQueriesWithUpdateRouteAndParsingReturningTrueCallsParseSchemaUpdatesCorrectly()
	{
		// The sample Schema
		$schema = simplexml_load_string('<extension><update><schemas><schemapath type="mysql">sql/updates/mysql</schemapath></schemas></update></extension>');

		$mockInstaller = $this->getMock('JInstaller', array('parseSchemaUpdates'));
		$mockInstaller->expects($this->once())
			->method('parseSchemaUpdates')
			->with($schema->update->schemas, 444)
			->willReturn(true);

		$mockDatabase = $this->getMockDatabase();
		$object = $this->getMockForAbstractClass(
			'JInstallerAdapter',
			array($mockInstaller, $mockDatabase),
			'',
			true,
			true,
			true,
			array('getManifest')
		);
		TestReflection::setValue($object, 'route', 'update');

		// Set up a mock JTableExtension
		$mockTableExtension = $this->getMock('JTableExtension', array('find', 'load'), array($this->getMockDatabase()));
		$mockTableExtension->extension_id = 444;
		TestReflection::setValue($object, 'extension', $mockTableExtension);

		// Set up the mock manifest object
		$object->expects($this->any())
			->method('getManifest')
			->willReturn($schema);

		TestReflection::invoke($object, 'parseQueries');
	}

	/**
	 * @testdox Test setting a SimpleXML object into the manifest
	 *
	 * @covers  JInstallerAdapter::setManifest
	 */
||||||||	public function testParseQueriesWithUpdateRouteAndParsingReturningTrueCallsParseSchemaUpdatesCorrectly()
	{
		// The sample Schema
		$schema = simplexml_load_string('<extension><update><schemas><schemapath type="mysql">sql/updates/mysql</schemapath></schemas></update></extension>');

		$mockInstaller = $this->getMockBuilder('JInstaller')
						->setMethods(array('parseSchemaUpdates'))
						->getMock();
		$mockInstaller->expects($this->once())
			->method('parseSchemaUpdates')
			->with($schema->update->schemas, 444)
			->willReturn(true);

		$mockDatabase = $this->getMockDatabase();
		$object = $this->getMockForAbstractClass(
			'JInstallerAdapter',
			array($mockInstaller, $mockDatabase),
			'',
			true,
			true,
			true,
			array('getManifest')
		);
		TestReflection::setValue($object, 'route', 'update');

		// Set up a mock JTableExtension
		$mockTableExtension = $this->getMockBuilder('JTableExtension')
							->setMethods(array('find', 'load'))
							->setConstructorArgs(array($this->getMockDatabase()))
							->getMock();
		$mockTableExtension->extension_id = 444;
		TestReflection::setValue($object, 'extension', $mockTableExtension);

		// Set up the mock manifest object
		$object->expects($this->any())
			->method('getManifest')
			->willReturn($schema);

		TestReflection::invoke($object, 'parseQueries');
	}

	/**
	 * @testdox Test setting a SimpleXML object into the manifest
	 *
	 * @covers  JInstallerAdapter::setManifest
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (SCALAR)
                (AST_CONST)
                (AST_CONST)
                (AST_CONST)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (SCALAR)
                (AST_CONST)
                (AST_CONST)
                (AST_CONST)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))))
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (NULL)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR))))