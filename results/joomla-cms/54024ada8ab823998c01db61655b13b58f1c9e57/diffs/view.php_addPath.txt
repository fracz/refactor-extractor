	function _addPath($type, $path)
	{
		// convert from path string to array of directories
		if (is_string($path) && ! strpos($path, '://'))
		{
			// the path config is a string, and it's not a stream
			// identifier (the "://" piece). add it as a path string.
			$path = explode(PATH_SEPARATOR, $path);

			// typically in path strings, the first one is expected
			// to be searched first. however, JView uses a stack,
			// so the first would be last.  reverse the path string
			// so that it behaves as expected with path strings.
			$path = array_reverse($path);
		}
		else
		{
			// just force to array
			settype($path, 'array');
		}

		// loop through the path directories
		foreach ($path as $dir)
		{
			// no surrounding spaces allowed!
			$dir = trim($dir);

			// add trailing separators as needed
			if (strpos($dir, '://') && substr($dir, -1) != '/') {
				// stream
				$dir .= '/';
			} elseif (substr($dir, -1) != DIRECTORY_SEPARATOR) {
				// directory
				$dir .= DIRECTORY_SEPARATOR;
			}

			// add to the top of the search dirs
			array_unshift($this->_path[$type], $dir);
		}
	}

   /**
	* Searches the directory paths for a given file.
	*
	* @access protected
	* @param array $type The type of path to search (template or resource).
	* @param string $file The file name to look for.
	*
	* @return string|bool The full path and file name for the target file,
	* or boolean false if the file is not found in any of the paths.
	*/
||||||||	function _addPath($type, $path)
	{
		// just force to array
		settype($path, 'array');

		// loop through the path directories
		foreach ($path as $dir)
		{
			// no surrounding spaces allowed!
			$dir = trim($dir);

			// add trailing separators as needed
			if (substr($dir, -1) != DIRECTORY_SEPARATOR) {
				// directory
				$dir .= DIRECTORY_SEPARATOR;
			}

			// add to the top of the search dirs
			array_unshift($this->_path[$type], $dir);
		}
	}

	/**
	 * Create the filename for a resource
	 *
	 * @access private
	 * @param string 	$type  The resource type to create the filename for
	 * @param array 	$parts An associative array of filename information
	 * @return string The filename
	 * @since 1.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR))))
                            (SCALAR)))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (SCALAR))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (SCALAR))))
                        (AST_CONST))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_CALL
                (
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (SCALAR))))
                        (AST_CONST))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CONST)))))
            (AST_CALL
                (
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR))))))