	function changelog()
	{
		?>
		<pre>
			<?php
			readfile( JPATH_SITE.DS.'CHANGELOG.php' );
			?>
		</pre>
		<?php
	}
}

function writableCell( $folder, $relative=1, $text='', $visible=1 )
{
	$writeable		= '<b><font color="green">'. JText::_( 'Writable' ) .'</font></b>';
	$unwriteable	= '<b><font color="red">'. JText::_( 'Unwritable' ) .'</font></b>';

	echo '<tr>';
	echo '<td class="item">';
	echo $text;
	if ( $visible ) {
		echo $folder . '/';
	}
	echo '</td>';
	echo '<td >';
	if ( $relative ) {
		echo is_writable( "../$folder" )	? $writeable : $unwriteable;
	} else {
		echo is_writable( "$folder" )		? $writeable : $unwriteable;
	}
	echo '</td>';
	echo '</tr>';
}

/**
 * Compiles the help table of contents
 * @param string A specific keyword on which to filter the resulting list
 */
function getHelpTOC( $helpsearch )
{
	global $mainframe;

	$lang =& JFactory::getLanguage();
	jimport( 'joomla.filesystem.folder' );

	$helpurl		= $mainframe->getCfg('helpurl');

	// Check for files in the actual language
	$langTag = $lang->getTag();
	if( !JFolder::exists( JPATH_BASE.DS.'help'.DS.$langTag ) ) {
		$langTag = 'en-GB';		// use english as fallback
	}
	$files = JFolder::files( JPATH_BASE.DS.'help'.DS.$langTag, '\.xml$|\.html$' );

	$toc = array();
	foreach ($files as $file) {
		$buffer = file_get_contents( JPATH_BASE.DS.'help'.DS.$langTag.DS.$file );
		if (preg_match( '#<title>(.*?)</title>#', $buffer, $m )) {
			$title = trim( $m[1] );
			if ($title) {
				if ($helpurl) {
					// strip the extension
					$file = preg_replace( '#\.xml$|\.html$#', '', $file );
				}
				if ($helpsearch) {
					if (JString::strpos( strip_tags( $buffer ), $helpsearch ) !== false) {
						$toc[$file] = $title;
					}
				} else {
					$toc[$file] = $title;
				}
			}
		}
	}
	asort( $toc );
	return $toc;
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CONST))
                (SCALAR))))
    (AST_ECHO
        (SCALAR)))||||||||