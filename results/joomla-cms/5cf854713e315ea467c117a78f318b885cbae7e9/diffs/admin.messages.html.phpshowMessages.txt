	function showMessages(&$rows, &$pageNav, $option, &$lists)
	{
		// Initialize variables
		$user	= &JFactory::getUser();
		?>
		<form action="index.php?option=com_messages" method="post" name="adminForm">

		<table>
		<tr>
			<td align="left" width="100%">
				<?php echo JText::_('Search'); ?>:
				<input type="text" name="search" id="search" value="<?php echo $lists['search'];?>" class="text_area" onchange="document.adminForm.submit();" />
				<button onclick="this.form.submit();"><?php echo JText::_('Go'); ?></button>
				<button onclick="document.getElementById('search').value='';this.form.getElementById('filter_state').value='';this.form.submit();"><?php echo JText::_('Reset'); ?></button>
			</td>
			<td nowrap="nowrap">
				<?php
				echo $lists['state'];
				?>
			</td>
		</tr>
		</table>

		<div id="tablecell">
			<table class="adminlist">
			<thead>
				<tr>
					<th width="20">
						<?php echo JText::_('NUM'); ?>
					</th>
					<th width="20" class="title">
						<input type="checkbox" name="toggle" value="" onclick="checkAll(<?php echo count($rows); ?>);" />
					</th>
					<th width="50%" class="title">
						<?php echo JHtml::_('grid.sort',   'Subject', 'a.subject', @$lists['order_Dir'], @$lists['order']); ?>
					</th>
					<th width="5%" class="title" align="center">
						<?php echo JHtml::_('grid.sort',   'Read', 'a.state', @$lists['order_Dir'], @$lists['order']); ?>
					</th>
					<th width="25%" class="title">
						<?php echo JHtml::_('grid.sort',   'From', 'user_from', @$lists['order_Dir'], @$lists['order']); ?>
					</th>
					<th width="15%" class="title" nowrap="nowrap" align="center">
						<?php echo JHtml::_('grid.sort',   'Date', 'a.date_time', @$lists['order_Dir'], @$lists['order']); ?>
					</th>
				</tr>
			</thead>
			<tfoot>
				<tr>
					<td colspan="6">
						<?php echo $pageNav->getListFooter(); ?>
					</td>
				</tr>
			</tfoot>
			<tbody>
			<?php
			$k = 0;
			for ($i=0, $n=count($rows); $i < $n; $i++) {
				$row = &$rows[$i];
				$img = $row->state ? 'tick.png' : 'publish_x.png';
				$alt = $row->state ? JText::_('Read') : JText::_('Read');

				if ($user->authorize('core.users.manage')) {
					$linkA 	= 'index.php?option=com_users&view=user&task=edit&cid[]='. $row->user_id_from;
					$author = '<a href="'. JRoute::_($linkA) .'" title="'. JText::_('Edit User') .'">'. $row->user_from .'</a>';
				} else {
					$author = $row->user_from;
				}

				?>
				<tr class="<?php echo "row$k"; ?>">
					<td>
						<?php echo $i+1+$pageNav->limitstart;?>
					</td>
					<td>
						<?php echo JHtml::_('grid.id', $i, $row->message_id); ?>
					</td>
					<td>
						<a href="#edit" onclick="return listItemTask('cb<?php echo $i;?>','view')">
							<?php echo $row->subject; ?></a>
					</td>
					<td align="center">
						<a href="javascript: void(0);">
							<img src="images/<?php echo $img;?>" width="16" height="16" border="0" alt="<?php echo $alt; ?>" /></a>
					</td>
					<td>
						<?php echo $author; ?>
					</td>
					<td>
						<?php echo JHtml::_('date', $row->date_time, JText::_('DATE_FORMAT_LC2')); ?>
					</td>
				</tr>
				<?php $k = 1 - $k;
				}
			?>
			</tbody>
			</table>
		</div>

		<input type="hidden" name="option" value="<?php echo $option;?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="boxchecked" value="0" />
		<input type="hidden" name="filter_order" value="<?php echo $lists['order']; ?>" />
		<input type="hidden" name="filter_order_Dir" value="<?php echo $lists['order_Dir']; ?>" />
		<?php echo JHtml::_('form.token'); ?>
		</form>
		<?php
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN_REF
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_VAR))))
                                                (SCALAR))
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR))))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))
            (AST_ECHO
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR)))||||||||