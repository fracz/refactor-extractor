	public function edit($key = null, $urlVar = null)
	{
		$app     = JFactory::getApplication();
		$cid     = $this->input->post->get('cid', array(), 'array');
		$context = "$this->option.edit.$this->context";

		// Get the constant name.
		$recordId = (count($cid) ? $cid[0] : $this->input->get('id'));

		// Access check.
		if (!$this->allowEdit())
		{
			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));
			$this->setMessage($this->getError(), 'error');
			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));

			return;
		}

		$app->setUserState($context . '.data', null);
		$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, 'id'));
	}

	/**
	 * Method to save an override.
	 *
	 * @param   string  $key     The name of the primary key of the URL variable (not used here).
	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (not used here).
	 *
	 * @return  void
	 *
	 * @since   2.5
	 */
||||||||	public function edit($key = null, $urlVar = null)
	{
		// Do not cache the response to this, its a redirect
		JFactory::getApplication()->allowCache(false);

		$app     = JFactory::getApplication();
		$cid     = $this->input->post->get('cid', array(), 'array');
		$context = "$this->option.edit.$this->context";

		// Get the constant name.
		$recordId = (count($cid) ? $cid[0] : $this->input->get('id'));

		// Access check.
		if (!$this->allowEdit())
		{
			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));
			$this->setMessage($this->getError(), 'error');
			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));

			return;
		}

		$app->setUserState($context . '.data', null);
		$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, 'id'));
	}

	/**
	 * Method to save an override.
	 *
	 * @param   string  $key     The name of the primary key of the URL variable (not used here).
	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (not used here).
	 *
	 * @return  void
	 *
	 * @since   2.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR)
                (AST_ARRAY)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_CONST)))))
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR)
                (AST_ARRAY)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_CONST)))))
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (SCALAR)))))))