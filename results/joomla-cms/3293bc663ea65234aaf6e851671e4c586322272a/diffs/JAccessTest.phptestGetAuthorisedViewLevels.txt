	public function testGetAuthorisedViewLevels() {
		// Run the parent::setUp() method here to save time (since we only need to run it once)
		parent::setUp();

		if (defined('DB_NOT_AVAILABLE')) {
			$this->markTestSkipped('The database is not available');
		}

		$access = new JAccess();
		$array1 = array(
		0	=> 1,
		1   => 3
		);

		$this->assertThat(
			$array1,
			$this->equalTo($access->getAuthorisedViewLevels(42))
		);

		$array2 = array(
		0       => 1
		);
		$this->assertThat(
			$array2,
			$this->equalTo($access->getAuthorisedViewLevels(50))
		);
	}

	/**
	 * Test cases for testCheck and testCheckGroups
	 *
	 * Each test case provides
	 * - integer		userid	a user id
	 * - integer		groupid  a group id
	 * - string	    action	an action to test permission for
	 * - integer		assetid id of asset to check
	 * - mixed		true is have permission, null if no permission
	 * - string		message if fails
	 *
	 * @return array
	 */
||||||||	public function testGetAuthorisedViewLevels() {
		// Run the parent::setUp() method here to save time (since we only need to run it once)
		parent::setUp();

		if (defined('DB_NOT_AVAILABLE')) {
			$this->markTestSkipped('The database is not available');
		}

		$access = new JAccess();
		$array1 = array(
		0	=> 1,
		1   => 3
		);

		$this->assertThat(
			$access->getAuthorisedViewLevels(42),
			$this->equalTo($array1),
			'Line:'.__Line__.' Super user gets Public, Special (levels 1,3)'
		);

		$array2 = array(
		0       => 1
		);
		$this->assertThat(
			$access->getAuthorisedViewLevels(50),
			$this->equalTo($array2),
			'Line:'.__Line__.' User 50 gets Public (level 1)'
		);

		$array3 = array(
		0       => 1,
		1		=> 4
		);
		$this->assertThat(
			$access->getAuthorisedViewLevels(99),
			$this->equalTo($array3),
			'Line:'.__Line__.' User 99 gets Level 4'
		);
	}

	/**
	 * Test cases for testCheck and testCheckGroups
	 *
	 * Each test case provides
	 * - integer		userid	a user id
	 * - integer		groupid  a group id
	 * - string	    action	an action to test permission for
	 * - integer		assetid id of asset to check
	 * - mixed		true is have permission, null if no permission
	 * - string		message if fails
	 *
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_MAGIC_CONST))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_MAGIC_CONST))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_MAGIC_CONST))
                (SCALAR)))))