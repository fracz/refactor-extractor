	function _initEngine($template, $caching = false)
	{
		jimport('joomla.template.template');
		$instance =& JTemplate::getInstance();

		//set a reference to the document in the engine
		$instance->doc =& $this;

		//set the caching
		if($caching) {
			$instance->enableTemplateCache('File', JPATH_BASE.DS.'cache'.DS);
			$instance->setTemplateCachePrefix('tmpl_');
		}

		//set the namespace
		$instance->setNamespace( 'jdoc' );

		//add module directories
		$instance->addModuleDir('Function'    , dirname(__FILE__). DS .'function');

		//Add template variables
		$instance->addVar( 'document', 'lang_tag', $this->getLanguage() );
		$instance->addVar( 'document', 'lang_dir', $this->getDirection() );
		$instance->addVar( 'document', 'template', $template);

		//Legacy for popups
		//This is a dirty fix for now until we reach some sort of better way.
		//Requests running through component are supposed to load the default css for BC
		global $mainframe;
		$a_template = $mainframe->getTemplate();
		$instance->addVar( 'document', 'assigned_template', $a_template);

		return $instance;
	}

	/**
	 * Parse a document template
	 *
	 * @access public
	 * @param string 	$directory	The template directory
	 * @param string 	$file 		The actual template file
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN_REF
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_CONST))
                                (SCALAR))
                            (AST_CONST))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (AST_CONST))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||