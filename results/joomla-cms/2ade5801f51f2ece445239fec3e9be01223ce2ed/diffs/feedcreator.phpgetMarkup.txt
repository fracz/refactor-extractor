||||||||	function getMarkup() {
		if (!strlen($this->enclosure_url) || ($this->enclosure_length==0) || !strlen($this->enclosure_type) ) return "";

		return sprintf(
			"<enclosure url=\"%s\" length=\"%s\" type=\"%s\" />\n",
			$this->enclosure_url,
			$this->enclosure_length,
			$this->enclosure_type
		);
	}

}

/**
 * RSSCreatorPodCast is a FeedCreator that implements RDF Site Summary (RSS)
 * 2.0 with Podcast extensions.
 *
 * @see http://phobos.apple.com/static/iTunesRSS.htm
 * @since 1.7.3
 * @author Steve Blinch <code@blitzaffe.com>
 */
class RSSCreatorPodcast extends RSSCreator20 {

	var $podcast;

    function RSSCreatorPodcast() {
        parent::_setRSSVersion("2.0");

        $this->addNameSpace("xmlns:itunes","http://www.itunes.com/dtds/podcast-1.0.dtd");
        $this->encoding = "UTF-8";

		$this->podcast = new Podcast();
    }

	function createFeed() {
		$this->additionalMarkup .= $this->podcast->getMarkup();

		$this->podcast->getElements($this->additionalElements);

		foreach ($this->items as $k=>$item) {
			$this->items[$k]->podcast->getElements($this->items[$k]->additionalElements);
			$this->items[$k]->additionalMarkup .= $this->items[$k]->podcast->getMarkup();
		}

		return parent::createFeed();
	}


}


/*** TEST SCRIPT *********************************************************

//include("feedcreator.class.php");

$rss = new UniversalFeedCreator();
$rss->useCached();
$rss->title = "PHP news";
$rss->description = "daily news from the PHP scripting world";

//optional
//$rss->descriptionTruncSize = 500;
//$rss->descriptionHtmlSyndicated = true;
//$rss->xslStyleSheet = "http://feedster.com/rss20.xsl";

$rss->link = "http://www.dailyphp.net/news";
$rss->feedURL = "http://www.dailyphp.net/".$PHP_SELF;

$image = new FeedImage();
$image->title = "dailyphp.net logo";
$image->url = "http://www.dailyphp.net/images/logo.gif";
$image->link = "http://www.dailyphp.net";
$image->description = "Feed provided by dailyphp.net. Click to visit.";

//optional
$image->descriptionTruncSize = 500;
$image->descriptionHtmlSyndicated = true;

$rss->image = $image;

//optional -- applies only if this is a podcast
$rss->podcast = new Podcast();
$rss->podcast->subtitle = "Podcast subtitle";
$rss->podcast->author = "Some Guy";
$rss->podcast->summary = "Podcast summary"
$rss->podcast->keywords = "php podcast rss itunes";
$rss->podcast->owner_email = "owner@example.com";
$rss->podcast->owner_name = "Some Guy";

// file this podcast under Technology->Computers
$podcast_tech_category = new PodcastCategory('Technology');
$podcast_comp_category = new PodcastCategory('Computers');
$podcast_tech_category->addCategory($podcast_comp_category);
$podcast->addCategory($podcast_tech_category);

// get your news items from somewhere, e.g. your database:
//mysql_select_db($dbHost, $dbUser, $dbPass);
//$res = mysql_query("SELECT * FROM news ORDER BY newsdate DESC");
//while ($data = mysql_fetch_object($res)) {
	$item = new FeedItem();
	$item->title = "This is an the test title of an item";
	$item->link = "http://localhost/item/";
	$item->description = "<b>description in </b><br/>HTML";

	//optional
	//item->descriptionTruncSize = 500;
	$item->descriptionHtmlSyndicated = true;

	$item->date = time();
	$item->source = "http://www.dailyphp.net";
	$item->author = "John Doe";

	// optional -- applies only if this is a podcast
    $item->podcast = new PodcastItem();
    $item->podcast->duration = 120;
    $item->podcast->enclosure_url = "http://www.example.com/podcasts/media.mp3";
    $item->podcast->enclosure_length = 1234567;
    $item->podcast->enclosure_type = "audio/mpeg";


	$rss->addItem($item);
//}

// valid format strings are: RSS0.91, RSS1.0, RSS2.0, PIE0.1, MBOX, OPML, ATOM0.3, HTML, JS, PODCAST
echo $rss->saveFeed("PODCAST", "feed.xml");



***************************************************************************/
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))))))