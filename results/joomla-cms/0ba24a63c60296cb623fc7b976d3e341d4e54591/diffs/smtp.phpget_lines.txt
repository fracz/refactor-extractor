||||||||	function get_lines() {
		$data = "";
		while($str = fgets($this->smtp_conn,515)) {
			if($this->do_debug >= 4) {
				echo "SMTP -> get_lines(): \$data was \"$data\"" .
						 $this->CRLF;
				echo "SMTP -> get_lines(): \$str is \"$str\"" .
						 $this->CRLF;
			}
			$data .= $str;
			if($this->do_debug >= 4) {
				echo "SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF;
			}
			# if the 4th character is a space then we are done reading
			# so just break the loop
			if(substr($str,3,1) == " ") { break; }
		}
		return $data;
	}

}


 ?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR)))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_BREAK
                            (NULL)))))))
    (AST_RETURN
        (AST_VAR)))