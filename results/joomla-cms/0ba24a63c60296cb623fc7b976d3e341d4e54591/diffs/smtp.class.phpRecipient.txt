	function Recipient($to) {
		$this->error = null; # so no confusion is caused

		if(!$this->connected()) {
			$this->error = array(
					"error" => "Called Recipient() without being connected");
			return false;
		}

		fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);

		$rply = $this->get_lines();
		$code = substr($rply,0,3);

		if($this->do_debug >= 2) {
			echo "SMTP -> FROM SERVER:" . $this->CRLF . $rply;
		}

		if($code != 250 && $code != 251) {
			$this->error =
				array("error" => "RCPT not accepted from server",
					  "smtp_code" => $code,
					  "smtp_msg" => substr($rply,4));
			if($this->do_debug >= 1) {
				echo "SMTP -> ERROR: " . $this->error["error"] .
						 ": " . $rply . $this->CRLF;
			}
			return false;
		}
		return true;
	}

	/**
	 * Sends the RSET command to abort and transaction that is
	 * currently in progress. Returns true if successful false
	 * otherwise.
	 *
	 * Implements rfc 821: RSET <CRLF>
	 *
	 * SMTP CODE SUCCESS: 250
	 * SMTP CODE ERROR  : 500,501,504,421
	 * @access public
	 * @return bool
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))
                        (
                            (AST_ECHO
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_DIM
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (SCALAR)))
                                            (SCALAR))
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||