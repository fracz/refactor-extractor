||||||||	function show(& $category, & $other_categories, & $items, & $access, & $params, & $pagination, & $lists, $order)
	{
		global $Itemid;

		if ($params->get('page_title'))
		{
		?>
			<div class="componentheading<?php echo $params->get( 'pageclass_sfx' ); ?>">
				<?php echo $category->name; ?>
			</div>
		<?php

		}
		?>
		<table width="100%" cellpadding="0" cellspacing="0" border="0" align="center" class="contentpane<?php echo $params->get( 'pageclass_sfx' ); ?>">
		<tr>
			<td width="60%" valign="top" class="contentdescription<?php echo $params->get( 'pageclass_sfx' ); ?>" colspan="2">
				<?php

		if ($category->image)
		{
			$link = 'images/stories/'.$category->image;
		?>
						<img src="<?php echo $link;?>" align="<?php echo $category->image_position;?>" hspace="6" alt="<?php echo $category->image;?>" />
				<?php

		}
		echo $category->description;
		?>
			</td>
		</tr>
		<tr>
			<td>
			<?php

		// Displays the Table of Items in Category View
		if (count($items))
		{
			JContentViewHTML_category::buildItemTable($items, $pagination, $params, $lists, $access, $category->id, $category->sectionid, $order);
		}
		else
			if ($category->id)
			{
		?>
					<br />
					<?php echo JText::_( 'This Category is currently empty' ); ?>
					<br /><br />
					<?php

			}
		// New Content icon
		if (($access->canEdit || $access->canEditOwn) && count($other_categories) > 0)
		{
			$link = sefRelToAbs('index.php?option=com_content&amp;task=new&amp;sectionid='.$category->sectionid.'&amp;Itemid='.$Itemid);
		?>
					<a href="<?php echo $link; ?>">
						<img src="images/M_images/new.png" width="13" height="14" align="middle" border="0" alt="<?php echo JText::_( 'New' );?>" />
						&nbsp;<?php echo JText::_( 'New' );?>...</a>
					<br /><br />
					<?php

		}
		?>
			</td>
		</tr>
		<tr>
			<td colspan="2">
				<?php

		// Displays listing of Categories
		if (count($other_categories) > 0)
		{
			if ($params->get('other_cat'))
			{
				JContentViewHTML_category::buildCategories($other_categories, $params, $category->id, $category->sectionid);
			}
		}
		?>
			</td>
		</tr>
		</table>
		<?php

	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_VAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_ECHO
                                (SCALAR))
                            (AST_ECHO
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))
                            (AST_ECHO
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_VAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_VAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))))))))))
    (AST_ECHO
        (SCALAR)))