	public function execute()
	{
		// Create halting events
		$this->createEvents();

		// Setup if necessary
		if (!$this->isSetup()) {
			$this->command->error('Server is not ready, running Setup task');
			$this->executeTask('Setup');
		}

		// Update current release
		$release = $this->releasesManager->updateCurrentRelease();

		// Run halting methods
		foreach ($this->halting as $method) {
			if (!$this->fireEvent($method)) {
				return false;
			}

			if (!$this->$method()) {
				return $this->halt();
			}
		}

		// Set permissions
		$this->setApplicationPermissions();

		// Run migrations
		$this->runMigrationsAndSeed();

		// Synchronize shared folders and files
		$this->syncSharedFolders();

		// Run before-symlink events
		if (!$this->fireEvent('before-symlink')) {
			return $this->halt();
		}

		// Update symlink and mark release as valid
		$this->updateSymlink();
		$this->releasesManager->markReleaseAsValid($release);

		$this->command->info('Successfully deployed release '.$release);
	}

	////////////////////////////////////////////////////////////////////
	/////////////////////////////// SUBTASKS ///////////////////////////
	////////////////////////////////////////////////////////////////////

	/**
	 * Run PHPUnit tests
	 *
	 * @return void
	 */
||||||||	public function execute()
	{
		// Create halting events
		$this->createEvents();

		// Setup if necessary
		if (!$this->isSetup()) {
			$this->command->error('Server is not ready, running Setup task');
			$this->executeTask('Setup');
		}

		// Update current release
		$release = $this->releasesManager->updateCurrentRelease();

		// Run halting methods
		foreach ($this->halting as $method) {
			if (!$this->fireEvent($method['as'])) {
				return false;
			}

			list ($class, $method) = $method['on'];
			if (!$class->$method()) {
				return $this->halt();
			}
		}

		// Set permissions
		$this->setApplicationPermissions();

		// Run migrations
		$this->runMigrationsAndSeed();

		// Synchronize shared folders and files
		$this->syncSharedFolders();

		// Run before-symlink events
		if (!$this->fireEvent('before-symlink')) {
			return $this->halt();
		}

		// Update symlink and mark release as valid
		$this->updateSymlink();
		$this->releasesManager->markReleaseAsValid($release);

		$this->command->info('Successfully deployed release '.$release);
	}

	////////////////////////////////////////////////////////////////////
	/////////////////////////////// SUBTASKS ///////////////////////////
	////////////////////////////////////////////////////////////////////

	/**
	 * Run PHPUnit tests
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR)))))