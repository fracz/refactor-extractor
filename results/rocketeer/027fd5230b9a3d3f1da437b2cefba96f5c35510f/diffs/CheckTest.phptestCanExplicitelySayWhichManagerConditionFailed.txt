    public function testCanExplicitelySayWhichManagerConditionFailed()
    {
        /** @var Composer $manager */
        $manager = $this->prophesize(Composer::class);
        $manager->getName()->willReturn('Composer');
        $manager->getManifestContents()->willReturn(null);
        $manager->isExecutable()->willReturn(false);
        $manager->hasManifest()->willReturn(false);
        $manager->getManifest()->willReturn('composer.json');

        $this->builder->buildStrategy('check')->setManager($manager->reveal());
        $this->task('Check')->fire();
        $this->assertContains('[{username}@production] No manifest (composer.json) was found for Composer', $this->logs->getLogs());

        $manager->hasManifest()->willReturn(true);
        $this->builder->buildStrategy('check')->setManager($manager->reveal());

        $this->task('Check')->fire();
        $this->assertContains('[{username}@production] The Composer package manager could not be found', $this->logs->getLogs());
    }

||||||||    public function testCanExplicitelySayWhichManagerConditionFailed($hasManifest, $expected)
    {
        /** @var Composer $manager */
        $manager = $this->prophesize(Composer::class);
        $manager->getName()->willReturn('Composer');
        $manager->getManifestContents()->willReturn(null);
        $manager->isExecutable()->willReturn(false);
        $manager->hasManifest()->willReturn($hasManifest);
        $manager->getManifest()->willReturn('composer.json');

        $this->builder->buildStrategy('check')->setManager($manager->reveal());
        $this->task('Check')->fire();
        $this->assertContains('[{username}@production] '.$expected, $this->logs->getLogs());
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))))