    public function getCurrentConnection()
    {
        // Return local handle
        if ($this->rocketeer->isLocal()) {
            $handle = $this->credentials->createConnectionKey('local');
            $handle->username = $this->remote->connected() ? $this->remote->connection()->getUsername() : null;
        } elseif ($this->hasCurrentConnection()) {
            $handle = $this->current;
        } else {
            $this->current = $handle = $this->credentials->createConnectionKey();
        }

        return $handle;
    }

    /**
     * @return bool
     */
||||||||    public function getCurrentConnection()
    {
        $key = $this->getCurrentConnectionKey();
        $isConnected = $this->remote->isConnected($key);

        // Create and save to cache
        $connection = $this->remote->make($key);

        // Fire connected event the first time
        if (!$isConnected) {
            $event = 'connected.'.$key->toHandle();
            $this->events->emit($event);
        }

        return $connection;
    }

    /**
     * Set the current connection.
     *
     * @param ConnectionKey|string $connection
     * @param int|null             $server
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONDITIONAL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_CONST)))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))