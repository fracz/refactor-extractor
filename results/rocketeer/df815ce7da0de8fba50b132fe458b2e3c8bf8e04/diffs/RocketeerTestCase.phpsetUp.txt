    public function setUp()
    {
        parent::setUp();

        // Compute ls results
        $files = preg_grep('/^([^.0])/', scandir(__DIR__.'/../..'));
        sort($files);

        static::$currentFiles = array_values($files);

        // Bind dummy AbstractTask
        $this->task = $this->task('Cleanup');

        $this->recreateVirtualServer();

        // Bind new LocalStorage instance
        $this->app->singleton('rocketeer.storage.local', function ($app) {
            $folder = dirname($this->deploymentsFile);

            return new LocalStorage($app, 'deployments', $folder);
        });

        // Mock OS
        $this->usesLaravel(true);
        $this->mockOperatingSystem('Linux');

        // Cache paths
        $this->binaries = $this->binaries ?: [
            'php' => exec('which php') ?: 'php',
            'bundle' => exec('which bundle') ?: 'bundle',
            'phpunit' => exec('which phpunit') ?: 'phpunit',
            'composer' => exec('which composer') ?: 'composer',
        ];
    }

    /**
     * Cleanup tests.
     */
||||||||    public function setUp()
    {
        parent::setUp();

        // Compute ls results
        $files = preg_grep('/^([^.0])/', scandir(__DIR__.'/../..'));
        sort($files);

        static::$currentFiles = array_values($files);

        // Bind dummy AbstractTask
        $this->task = $this->task('Cleanup');

        $this->recreateVirtualServer();

        // Bind new Storage instance
        $this->app->singleton('rocketeer.storage.local', function ($app) {
            $folder = dirname($this->deploymentsFile);

            return new Storage($app, 'local', $folder, 'deployments');
        });

        // Mock OS
        $this->usesLaravel(true);
        $this->mockOperatingSystem('Linux');

        // Cache paths
        $this->binaries = $this->binaries ?: [
            'php' => exec('which php') ?: 'php',
            'bundle' => exec('which bundle') ?: 'bundle',
            'phpunit' => exec('which phpunit') ?: 'phpunit',
            'composer' => exec('which composer') ?: 'composer',
        ];
    }

    /**
     * Cleanup tests.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_PROP
                (AST_VAR))
            (NULL)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_PROP
                (AST_VAR))
            (NULL)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (NULL)
                        (SCALAR))
                    (SCALAR))))))