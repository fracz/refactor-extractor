    public function __construct(Container $app, $file = 'deployments', $folder = null)
    {
        parent::__construct($app, $file);

        // Create personal storage if necessary
        if (!$this->app->bound('path.storage')) {
            $folder = $this->paths->getRocketeerConfigFolder();
            $this->files->createDir($folder);
        }

        // Set path to storage folder
        $this->folder = $folder ?: $this->app['path.storage'].DS.'meta';

        // Flush if necessary
        if ($this->shouldFlush()) {
            $this->destroy();
        }

        $this->set('hash', $this->getHash());
    }

    ////////////////////////////////////////////////////////////////////
    //////////////////////////////// SALTS /////////////////////////////
    ////////////////////////////////////////////////////////////////////

    /**
     * Get the current salt in use.
     *
     * @return string|null
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_VAR)
            (NULL)
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_CONST))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||