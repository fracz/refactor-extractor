  public function invoke(LimeMockInvocation $invocation)
  {
    try
    {
      if (!is_null($this->constraint))
      {
        $this->constraint->evaluate($invocation->getParameter($this->index-1));
      }
    }
    catch (LimeConstraintException $e)
    {
      $message = LimeTools::indent($e->getMessage(), 2);

      throw new LimeMockInvocationMatcherException("was called with wrong parameter $this->index\n".$message);
    }
    catch (OutOfRangeException $e)
    {
      throw new LimeMockInvocationMatcherException("was not called with $this->index or more parameters");
    }
  }

  /**
   * Returns whether this matcher matches the given invocation.
   *
   * @param  LimeMockInvocation $invocation
   * @return boolean
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR)))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))))
        (NULL)))||||||||