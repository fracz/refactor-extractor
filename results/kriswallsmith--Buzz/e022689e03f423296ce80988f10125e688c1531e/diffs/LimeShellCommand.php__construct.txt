  public function __construct($file, array $arguments = array())
  {
    foreach ($arguments as $argument => $value)
    {
      $arguments[$argument] = '--'.$argument;

      if ($value !== true)
      {
        if (!is_string($value))
        {
          $value = var_export($value, true);
        }

        $arguments[$argument] .= '='.escapeshellarg($value);
      }
    }

    $this->errorFile = tempnam(sys_get_temp_dir(), 'lime');

    // see http://trac.symfony-project.org/ticket/5437 for the explanation on the weird "cd" thing
    $this->command = sprintf(
      'cd & %s %s %s 2>%s',
      escapeshellarg(LimeShell::getExecutable()),
      escapeshellarg($file),
      implode(' ', $arguments),
      $this->errorFile
    );
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_CONST)))))))
                        (AST_ASSIGN_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_CALL)
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_STATIC_CALL)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR))))))||||||||