  public function is(LimeTesterInterface $expected)
  {
    // allow comparison with strings if object implements __toString()
    if ($expected instanceof LimeTesterString && method_exists($this->object, '__toString'))
    {
      if ($expected->value != (string)$this->object)
      {
        throw new LimeAssertionFailedException($this, $expected);
      }
    }
    else
    {
      // don't compare twice to allow for cyclic dependencies
      if (in_array(array($this->value, $expected->value), self::$equal, true) || in_array(array($expected->value, $this->value), self::$equal, true))
      {
        return;
      }

      self::$equal[] = array($this->value, $expected->value);

      // don't compare objects if they are identical
      // this helps to avoid the error "maximum function nesting level reached"
      // CAUTION: this conditional clause is not tested
      if (!$expected instanceof self || $this->object !== $expected->object)
      {
        parent::is($expected);
      }
    }
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_INSTANCEOF
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CAST
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (NULL)))
                                    (AST_STATIC_PROP)
                                    (AST_CONST)))
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (AST_PROP
                                                (AST_VAR))
                                            (NULL)))
                                    (AST_STATIC_PROP)
                                    (AST_CONST))))
                        (
                            (AST_RETURN
                                (NULL)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (NULL))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (NULL))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_INSTANCEOF
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))))))))||||||||