  public function isnt(LimeTesterInterface $expected)
  {
    if (!$expected instanceof LimeTesterArray || $this->getType() !== $expected->getType())
    {
      return;
    }

    foreach ($expected as $key => $value)
    {
      if (!isset($this[$key]))
      {
        return;
      }

      try
      {
        $this[$key]->isnt($value);
        return;
      }
      catch (LimeAssertionFailedException $e)
      {
      }
    }

    throw new LimeAssertionFailedException($this, $expected);
  }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (NULL)))))
            (AST_TRY
                (
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_RETURN
                        (NULL)))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)))
                (NULL))))
    (AST_THROW
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)))))||||||||