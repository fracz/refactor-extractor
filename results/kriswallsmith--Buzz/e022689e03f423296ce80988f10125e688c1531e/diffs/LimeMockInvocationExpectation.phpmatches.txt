  public function matches(LimeMockMethodInterface $method)
  {
    if ($this->invocation->getClass() != $method->getClass() || $this->invocation->getMethod() != $method->getMethod())
    {
      return false;
    }
    else if ($method instanceof LimeMockInvocation && !$this->withAnyParameters)
    {
      $index = 0;

      foreach ($this->parameterMatchers as $matcher)
      {
        $index = max($index, $matcher->getIndex());
      }

      return count($method->getParameters()) == $index;
    }
    else
    {
      return true;
    }
  }

  /**
   * Returns whether this object may be invoked.
   *
   * This method returns FALSE if the next call to invoke() would throw a
   * LimeMockInvocationException.
   *
   * @return boolean
   */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_INSTANCEOF
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR))
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))
                            (AST_RETURN
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))))
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_CONST)))))))))||||||||