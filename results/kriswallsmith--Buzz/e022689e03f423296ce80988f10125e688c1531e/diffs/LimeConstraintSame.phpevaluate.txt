  public function evaluate($value)
  {
    try
    {
      LimeTester::create($value)->same(LimeTester::create($this->expected));
    }
    catch (LimeAssertionFailedException $e)
    {
      throw new LimeConstraintException(sprintf("     got: %s\nexpected: %s", $e->getActual(10), $e->getExpected(10)));
    }
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))))))))))
        (NULL)))||||||||