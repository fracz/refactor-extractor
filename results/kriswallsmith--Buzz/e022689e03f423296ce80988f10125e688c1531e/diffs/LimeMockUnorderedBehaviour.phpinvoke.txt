  public function invoke(LimeMockInvocation $invocation)
  {
    $exceptionStack = new LimeMockInvocationExceptionStack();

    foreach ($this->invocations as $invocationExpectation)
    {
      try
      {
        if ($invocationExpectation->matches($invocation))
        {
          return $invocationExpectation->invoke($invocation);
        }
      }
      catch (LimeMockInvocationException $e)
      {
        // make sure to test all expectations
        $exceptionStack->add($e);
      }
    }

    // no invocation matched and at least one exception was thrown
    if (!$exceptionStack->isEmpty())
    {
      throw $exceptionStack;
    }

    parent::invoke($invocation);
  }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_TRY
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (
                                (AST_RETURN
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))||||||||