    function startDiaDoc($paper,$topMargin,$bottomMargin,$leftMargin,$rightMargin,$portrait)
    {
        if($portrait == 'P'){
            $isPortrait='true';
        }else{
            $isPortrait='false';
        }
        $this->startElement('dia:diagram');
        $this->writeAttribute('xmlns:dia', 'http://www.lysator.liu.se/~alla/dia/');
        $this->startElement('dia:diagramdata');
        $this->writeRaw (
        '<dia:attribute name="background">
          <dia:color val="#ffffff"/>
        </dia:attribute>
        <dia:attribute name="pagebreak">
          <dia:color val="#000099"/>
        </dia:attribute>
        <dia:attribute name="paper">
          <dia:composite type="paper">
            <dia:attribute name="name">
              <dia:string>#'.$paper.'#</dia:string>
            </dia:attribute>
            <dia:attribute name="tmargin">
              <dia:real val="'.$topMargin.'"/>
            </dia:attribute>
            <dia:attribute name="bmargin">
              <dia:real val="'.$bottomMargin.'"/>
            </dia:attribute>
            <dia:attribute name="lmargin">
              <dia:real val="'.$leftMargin.'"/>
            </dia:attribute>
            <dia:attribute name="rmargin">
              <dia:real val="'.$rightMargin.'"/>
            </dia:attribute>
            <dia:attribute name="is_portrait">
              <dia:boolean val="'.$isPortrait.'"/>
            </dia:attribute>
            <dia:attribute name="scaling">
              <dia:real val="1"/>
            </dia:attribute>
            <dia:attribute name="fitto">
              <dia:boolean val="false"/>
            </dia:attribute>
          </dia:composite>
        </dia:attribute>
        <dia:attribute name="grid">
          <dia:composite type="grid">
            <dia:attribute name="width_x">
              <dia:real val="1"/>
            </dia:attribute>
            <dia:attribute name="width_y">
              <dia:real val="1"/>
            </dia:attribute>
            <dia:attribute name="visible_x">
              <dia:int val="1"/>
            </dia:attribute>
            <dia:attribute name="visible_y">
              <dia:int val="1"/>
            </dia:attribute>
            <dia:composite type="color"/>
          </dia:composite>
        </dia:attribute>
        <dia:attribute name="color">
          <dia:color val="#d8e5e5"/>
        </dia:attribute>
        <dia:attribute name="guides">
          <dia:composite type="guides">
            <dia:attribute name="hguides"/>
            <dia:attribute name="vguides"/>
          </dia:composite>
        </dia:attribute>');
         $this->endElement();
         $this->startElement('dia:layer');
         $this->writeAttribute('name', 'Background');
         $this->writeAttribute('visible', 'true');
         $this->writeAttribute('active', 'true');

    }

||||||||    function startDiaDoc($paper,$topMargin,$bottomMargin,$leftMargin,$rightMargin,$portrait)
    {
        if($portrait == 'P'){
            $isPortrait='true';
        }else{
            $isPortrait='false';
        }
        $this->startElement('dia:diagram');
        $this->writeAttribute('xmlns:dia', 'http://www.lysator.liu.se/~alla/dia/');
        $this->startElement('dia:diagramdata');
        $this->writeRaw (
        '<dia:attribute name="background">
          <dia:color val="#ffffff"/>
        </dia:attribute>
        <dia:attribute name="pagebreak">
          <dia:color val="#000099"/>
        </dia:attribute>
        <dia:attribute name="paper">
          <dia:composite type="paper">
            <dia:attribute name="name">
              <dia:string>#'.$paper.'#</dia:string>
            </dia:attribute>
            <dia:attribute name="tmargin">
              <dia:real val="'.$topMargin.'"/>
            </dia:attribute>
            <dia:attribute name="bmargin">
              <dia:real val="'.$bottomMargin.'"/>
            </dia:attribute>
            <dia:attribute name="lmargin">
              <dia:real val="'.$leftMargin.'"/>
            </dia:attribute>
            <dia:attribute name="rmargin">
              <dia:real val="'.$rightMargin.'"/>
            </dia:attribute>
            <dia:attribute name="is_portrait">
              <dia:boolean val="'.$isPortrait.'"/>
            </dia:attribute>
            <dia:attribute name="scaling">
              <dia:real val="1"/>
            </dia:attribute>
            <dia:attribute name="fitto">
              <dia:boolean val="false"/>
            </dia:attribute>
          </dia:composite>
        </dia:attribute>
        <dia:attribute name="grid">
          <dia:composite type="grid">
            <dia:attribute name="width_x">
              <dia:real val="1"/>
            </dia:attribute>
            <dia:attribute name="width_y">
              <dia:real val="1"/>
            </dia:attribute>
            <dia:attribute name="visible_x">
              <dia:int val="1"/>
            </dia:attribute>
            <dia:attribute name="visible_y">
              <dia:int val="1"/>
            </dia:attribute>
            <dia:composite type="color"/>
          </dia:composite>
        </dia:attribute>
        <dia:attribute name="color">
          <dia:color val="#d8e5e5"/>
        </dia:attribute>
        <dia:attribute name="guides">
          <dia:composite type="guides">
            <dia:attribute name="hguides"/>
            <dia:attribute name="vguides"/>
          </dia:composite>
        </dia:attribute>');
         $this->endElement();
         $this->startElement('dia:layer');
         $this->writeAttribute('name', 'Background');
         $this->writeAttribute('visible', 'true');
         $this->writeAttribute('active', 'true');

    }

    /**
     * Ends Dia Document
     *
     * @return void
     * @access public
     * @see XMLWriter::endElement(),XMLWriter::endDocument()
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR))))