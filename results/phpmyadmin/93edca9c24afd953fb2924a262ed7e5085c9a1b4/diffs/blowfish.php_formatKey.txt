    function _formatKey($key)
    {
        return array_values(unpack('C*', $key));
    }

}

// higher-level functions:
/**
 * Encryption using blowfish algorithm
 *
 * @param   string  original data
 * @param   string  the secret
 *
 * @return  string  the encrypted result
 *
 * @access  public
 *
 */
function PMA_blowfish_encrypt($data, $secret)
{
    $pma_cipher = new Horde_Cipher_blowfish;
    $encrypt = '';

    $mod = strlen($data) % 8;

    if ($mod > 0) {
        $data .= str_repeat("\0", 8 - $mod);
    }

    foreach (str_split($data, 8) as $chunk) {
        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);
    }
    return base64_encode($encrypt);
}

/**
 * Decryption using blowfish algorithm
 *
 * @param   string  encrypted data
 * @param   string  the secret
 *
 * @return  string  original data
 *
 * @access  public
 *
 */
function PMA_blowfish_decrypt($encdata, $secret)
{
    $pma_cipher = new Horde_Cipher_blowfish;
    $decrypt = '';
    $data = base64_decode($encdata);

    foreach (str_split($data, 8) as $chunk) {
        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);
    }
    return trim($decrypt);
}

?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))))))||||||||