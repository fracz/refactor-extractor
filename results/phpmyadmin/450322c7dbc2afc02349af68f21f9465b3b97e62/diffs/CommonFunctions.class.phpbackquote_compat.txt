||||||||    public function backquote_compat($a_name, $do_it = true)
    {

        if (is_array($a_name)) {
            foreach ($a_name as &$data) {
                $data = $this->backquote_compat($data, $do_it);
            }
            return $a_name;
        }

        if (! $do_it) {
            global $PMA_SQPdata_forbidden_word;

            if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {
                return $a_name;
            }
        }

        // @todo add more compatibility cases (ORACLE for example)
        switch ($GLOBALS['sql_compatibility']) {
            case 'MSSQL': $quote = '"'; break;
            default: (isset($GLOBALS['sql_backquotes'])) ? $quote = "`" : $quote = ''; break;
        }

        // '0' is also empty for php :-(
        if (strlen($a_name) && $a_name !== '*') {
            return $quote . $a_name . $quote;
        } else {
            return $a_name;
        }

    } // end of the 'backquote_compat()' function

    /**
     * Defines the <CR><LF> value depending on the user OS.
     *
     * @return string   the <CR><LF> value to use
     *
     * @access  public
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_VAR)
                    (AST_REF
                        (AST_VAR))
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_GLOBAL
                    (AST_VAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_SWITCH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_BREAK
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_VAR))))))