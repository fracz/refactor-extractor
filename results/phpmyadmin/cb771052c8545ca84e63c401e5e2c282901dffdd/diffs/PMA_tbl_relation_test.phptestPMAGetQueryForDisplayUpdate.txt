    public function testPMAGetQueryForDisplayUpdate()
    {
        $disp = true;
        $display_field = '';
        $db = "pma_db";
        $table = "pma_table";
        $cfgRelation = array(
            'displaywork' => true,
            'relwork' => true,
            'displaywork' => true,
            'table_info' => 'table_info',
        );

        $GLOBALS['cfgRelation']['db'] = 'global_db';

        //case 1: $disp == true && $display_field == ''
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = "DELETE FROM `global_db`.`table_info` "
            . "WHERE db_name  = 'pma_db' AND table_name = 'pma_table'";
        $this->assertEquals(
            $query_expect,
            $query
        );

        //case 2: $disp == true && $display_field == 'display_field'
        $display_field == 'display_field';
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = "DELETE FROM `global_db`.`table_info` "
            . "WHERE db_name  = 'pma_db' AND table_name = 'pma_table'";
        $this->assertEquals(
            $query_expect,
            $query
        );

        //case 3: $disp == false && $display_field == 'display_field'
        $disp = false;
        $display_field = 'display_field';
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = "INSERT INTO `global_db`.`table_info`"
            . "(db_name, table_name, display_field)"
            . " VALUES('pma_db','pma_table','display_field')";
        $this->assertEquals(
            $query_expect,
            $query
        );

        //case 4: $disp == false && $display_field == ''
        $disp = false;
        $display_field = '';
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = '';
        $this->assertEquals(
            $query_expect,
            $query
        );
    }
}

/**
 * Mock class for DataBasePMAMock
 *
 * @package PhpMyAdmin-test
 */
Class DataBasePMAMockForTblRelation
{
    var $databases;
}

/**
 * Mock class for DataBaseMock
 *
 * @package PhpMyAdmin-test
 */
Class DataBaseMockForTblRelation
{
    /**
     * mock function to return table is existed
     *
     * @param string $name table name
     *
     * @return bool
     */
    function exists($name)
    {
        return true;
    }
}
?>||||||||    public function testPMAGetQueryForDisplayUpdate()
    {
    /*
        $disp = true;
        $display_field = '';
        $db = "pma_db";
        $table = "pma_table";
        $cfgRelation = array(
            'displaywork' => true,
            'relwork' => true,
            'displaywork' => true,
            'table_info' => 'table_info',
        );

        $GLOBALS['cfgRelation']['db'] = 'global_db';

        //case 1: $disp == true && $display_field == ''
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = "DELETE FROM `global_db`.`table_info` "
            . "WHERE db_name  = 'pma_db' AND table_name = 'pma_table'";
        $this->assertEquals(
            $query_expect,
            $query
        );

        //case 2: $disp == true && $display_field == 'display_field'
        $display_field == 'display_field';
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = "DELETE FROM `global_db`.`table_info` "
            . "WHERE db_name  = 'pma_db' AND table_name = 'pma_table'";
        $this->assertEquals(
            $query_expect,
            $query
        );

        //case 3: $disp == false && $display_field == 'display_field'
        $disp = false;
        $display_field = 'display_field';
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = "INSERT INTO `global_db`.`table_info`"
            . "(db_name, table_name, display_field)"
            . " VALUES('pma_db','pma_table','display_field')";
        $this->assertEquals(
            $query_expect,
            $query
        );

        //case 4: $disp == false && $display_field == ''
        $disp = false;
        $display_field = '';
        $query = PMA_getQueryForDisplayUpdate(
            $disp, $display_field, $db, $table, $cfgRelation
        );
        $query_expect = '';
        $this->assertEquals(
            $query_expect,
            $query
        );*/
    }
}

/**
 * Mock class for DataBasePMAMock
 *
 * @package PhpMyAdmin-test
 */
Class DataBasePMAMockForTblRelation
{
    var $databases;
}

/**
 * Mock class for DataBaseMock
 *
 * @package PhpMyAdmin-test
 */
Class DataBaseMockForTblRelation
{
    /**
     * mock function to return table is existed
     *
     * @param string $name table name
     *
     * @return bool
     */
    function exists($name)
    {
        return true;
    }
}
?>||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_BINARY_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE