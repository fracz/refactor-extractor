	function escapeSpecialChars($text) {
		$tokens = $this->tokenizeHTML($text);

		$text = '';   # rebuild $text from the tokens
	#	$in_pre = 0;  # Keep track of when we're inside <pre> or <code> tags.
	#	$tags_to_skip = "!<(/?)(?:pre|code|kbd|script|math)[\s>]!";

		foreach ($tokens as $cur_token) {
			if ($cur_token[0] == 'tag') {
				# Within tags, encode * and _ so they don't conflict
				# with their use in Markdown for italics and strong.
				# We're replacing each such character with its
				# corresponding MD5 checksum value; this is likely
				# overkill, but it should prevent us from colliding
				# with the escape values by accident.
				$cur_token[1] = str_replace(array('*', '_'),
					array($this->escape_table['*'], $this->escape_table['_']),
					$cur_token[1]);
				$text .= $cur_token[1];
			} else {
				$t = $cur_token[1];
				$t = $this->encodeBackslashEscapes($t);
				$text .= $t;
			}
		}
		return $text;
	}


||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_DIM
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (NULL))
                                        (AST_ARRAY_ELEM
                                            (AST_DIM
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (NULL)))
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||