||||||||	function hashClean($text) {
	#
	# Called whenever a tag must be hashed when a function insert a "clean" tag
	# in $text, it pass through this function and is automaticaly escaped,
	# blocking invalid nested overlap.
	#
		# Swap back any tag hash found in $text so we do not have to `unhash`
		# multiple times at the end.
		$text = $this->unhash($text);

		# Then hash the tag.
		$key = md5($text);
		$this->html_cleans[$key] = $text;
		$this->html_hashes[$key] = $text;
		return $key; # String that will replace the clean tag.
	}


//	function runBlockGamut($text, $hash_html_blocks = true) {
//	#
//	# Redefined to add definition lists and move HTML block hashing at the start.
//	#
//		if ($hash_html_blocks) {
//			# We need to escape raw HTML in Markdown source before doing anything
//			# else. This need to be done for each block, and not only at the
//			# begining in the Markdown function since hashed blocks can be part of
//			# a list item and could have been indented. Indented blocks would have
//			# been seen as a code block in previous pass of _HashHTMLBlocks.
//			$text = $this->hashHTMLBlocks($text);
//		}
//
//		$text = $this->doHeaders($text);
//		$text = $this->doTables($text);
//
//		# Do Horizontal Rules:
//		$text = preg_replace(
//			array('{^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$}mx',
//				  '{^[ ]{0,2}([ ]? -[ ]?){3,}[ \t]*$}mx',
//				  '{^[ ]{0,2}([ ]? _[ ]?){3,}[ \t]*$}mx'),
//			$this->hashBlock("\n<hr$this->empty_element_suffix\n"), $text);
//
//		$text = $this->doLists($text);
//		$text = $this->doDefLists($text);
//		$text = $this->doCodeBlocks($text);
//		$text = $this->doBlockQuotes($text);
//		$text = $this->formParagraphs($text);
//
//		return $text;
//	}


||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))