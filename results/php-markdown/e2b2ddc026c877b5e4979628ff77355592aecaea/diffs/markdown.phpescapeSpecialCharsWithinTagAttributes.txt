	function escapeSpecialCharsWithinTagAttributes($text) {
	#
	# Within tags -- meaning between < and > -- encode [\ ` * _] so they
	# don't conflict with their use in Markdown for code, italics and strong.
	# We're replacing each such character with its corresponding MD5 checksum
	# value; this is likely overkill, but it should prevent us from colliding
	# with the escape values by accident.
	#
		if ($this->no_markup)  return $text;

		$tokens = $this->tokenizeHTML($text);
		$text = '';   # rebuild $text from the tokens

		foreach ($tokens as $cur_token) {
			if ($cur_token[0] == 'tag') {
//				$cur_token[1] = str_replace('\\', $this->escape_table['\\'], $cur_token[1]);
//				$cur_token[1] = str_replace('`', $this->escape_table['`'], $cur_token[1]);
//				$cur_token[1] = str_replace('*', $this->escape_table['*'], $cur_token[1]);
//				$cur_token[1] = str_replace('_', $this->escape_table['_'], $cur_token[1]);
				$cur_token[1] = $this->hashSpan($cur_token[1]);
			}
			$text .= $cur_token[1];
		}
		return $text;
	}


||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||