    public function run(PHPUnit_Framework_Test $test)
    {
        $this->startTest($test);

        $errorHandlerSet = FALSE;

        if (version_compare(phpversion(), '5.2.0RC1', '>=')) {
            $oldErrorHandler = set_error_handler('PHPUnit_Util_ErrorHandler', E_RECOVERABLE_ERROR | E_USER_ERROR);
        } else {
            $oldErrorHandler = set_error_handler('PHPUnit_Util_ErrorHandler', E_USER_ERROR);
        }

        if ($oldErrorHandler === NULL) {
            $errorHandlerSet = TRUE;
        } else {
            restore_error_handler();
        }

        $globalsBackup = $GLOBALS;

        $useXdebug = (extension_loaded('xdebug') && $this->collectCodeCoverageInformation);

        if ($useXdebug && !defined('PHPUnit_INSIDE_OWN_TESTSUITE')) {
            xdebug_start_code_coverage(XDEBUG_CC_UNUSED);
        }

        try {
            $test->runBare();
        }

        catch (PHPUnit_Framework_AssertionFailedError $e) {
            $this->addFailure($test, $e);
        }

        catch (Exception $e) {
            $this->addError($test, $e);
        }

        if ($useXdebug) {
            $this->codeCoverageInformation[] = array(
              'test'  => $test,
              'files' => xdebug_get_code_coverage()
            );

            xdebug_stop_code_coverage();

            if (defined('PHPUnit_INSIDE_OWN_TESTSUITE')) {
                xdebug_start_code_coverage(XDEBUG_CC_UNUSED);
            }
        }

        $GLOBALS = $globalsBackup;

        if ($errorHandlerSet === TRUE) {
            restore_error_handler();
        }

        $this->endTest($test);
    }

    /**
     * Gets the number of run tests.
     *
     * @return integer
     * @access public
     */
||||||||    public function run(PHPUnit_Framework_Test $test)
    {
        $this->startTest($test);

        $errorHandlerSet = FALSE;

        if (version_compare(phpversion(), '5.2.0RC1', '>=')) {
            $oldErrorHandler = set_error_handler('PHPUnit_Util_ErrorHandler', E_RECOVERABLE_ERROR | E_USER_ERROR);
        } else {
            $oldErrorHandler = set_error_handler('PHPUnit_Util_ErrorHandler', E_USER_ERROR);
        }

        if ($oldErrorHandler === NULL) {
            $errorHandlerSet = TRUE;
        } else {
            restore_error_handler();
        }

        $globalsBackup = $GLOBALS;

        $useXdebug = (extension_loaded('xdebug') && $this->collectCodeCoverageInformation);

        if ($useXdebug && !defined('PHPUnit_INSIDE_OWN_TESTSUITE')) {
            xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);
        }

        try {
            $test->runBare();
        }

        catch (PHPUnit_Framework_AssertionFailedError $e) {
            $this->addFailure($test, $e);
        }

        catch (Exception $e) {
            $this->addError($test, $e);
        }

        if ($useXdebug) {
            $this->codeCoverageInformation[] = array(
              'test'  => $test,
              'files' => xdebug_get_code_coverage()
            );

            xdebug_stop_code_coverage();

            if (defined('PHPUnit_INSIDE_OWN_TESTSUITE')) {
                xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);
            }
        }

        $GLOBALS = $globalsBackup;

        if ($errorHandlerSet === TRUE) {
            restore_error_handler();
        }

        $this->endTest($test);
    }

    /**
     * Gets the number of run tests.
     *
     * @return integer
     * @access public
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_CALL)
                    (SCALAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)))
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))))
            (
                (AST_CALL
                    (
                        (AST_CONST))))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CALL)
                            (SCALAR))))
                (AST_CALL)
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_CALL
                                (
                                    (AST_CONST)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_CALL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_CALL)
                    (SCALAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)))
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))))
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_CALL)
                            (SCALAR))))
                (AST_CALL)
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (AST_CONST))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_CALL))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))