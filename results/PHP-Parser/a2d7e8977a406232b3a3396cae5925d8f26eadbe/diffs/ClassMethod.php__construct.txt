    public function __construct($name, array $subNodes = array(), array $attributes = array()) {
        $type = isset($subNodes['type']) ? $subNodes['type'] : 0;

        parent::__construct(
            array(
                'type'   => $type,
                'byRef'  => isset($subNodes['byRef'])  ? $subNodes['byRef']  : false,
                'name'   => $name,
                'params' => isset($subNodes['params']) ? $subNodes['params'] : array(),
                'stmts'  => array_key_exists('stmts', $subNodes) ? $subNodes['stmts'] : array(),
            ),
            $attributes
        );

        if ($this->type & Class_::MODIFIER_STATIC) {
            switch (strtolower($this->name)) {
                case '__construct':
                    throw new Error(sprintf('Constructor %s() cannot be static', $this->name));
                case '__destruct':
                    throw new Error(sprintf('Destructor %s() cannot be static', $this->name));
                case '__clone':
                    throw new Error(sprintf('Clone method %s() cannot be static', $this->name));
            }
        }
    }

||||||||    public function __construct($name, array $subNodes = array(), array $attributes = array()) {
        parent::__construct(null, $attributes);
        $this->type = isset($subNodes['type']) ? $subNodes['type'] : 0;
        $this->byRef = isset($subNodes['byRef'])  ? $subNodes['byRef']  : false;
        $this->name = $name;
        $this->params = isset($subNodes['params']) ? $subNodes['params'] : array();
        $this->stmts = array_key_exists('stmts', $subNodes) ? $subNodes['stmts'] : array();

        if ($this->type & Class_::MODIFIER_STATIC) {
            switch (strtolower($this->name)) {
                case '__construct':
                    throw new Error(sprintf('Constructor %s() cannot be static', $this->name));
                case '__destruct':
                    throw new Error(sprintf('Destructor %s() cannot be static', $this->name));
                case '__clone':
                    throw new Error(sprintf('Clone method %s() cannot be static', $this->name));
            }
        }
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_ARRAY))
                    (SCALAR)))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_SWITCH
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_CONST)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_SWITCH
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_PROP
                                                        (AST_VAR)))))))))))))))