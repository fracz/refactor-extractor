	public function get($domain, $cb) {
		$conn = $this->getConnectionByKey($domain);
		if (!$conn) {
			return false;
		}
 		$conn->onResponse->push($cb);
		$conn->setFree(false);
		$e = explode(':', $domain, 3);
		$domain = $e[0];
		$qtype = isset($e[1]) ? $e[1] : 'A';
		$qclass = isset($e[2]) ? $e[2] : 'IN';
		$QD = array();
		$qtypeInt = array_search($qtype, DNSClient::$type, true);
		$qclassInt = array_search($qclass, DNSClient::$class, true);
		if (($qtypeInt === false) || ($qclassInt === false)) {
			call_user_func($cb, false);
			return;
		}
		$q =	Binary::labels($domain) .  // domain
				Binary::word($qtypeInt) .
				Binary::word($qclassInt);
		$QD[] = $q;
		$packet =
			Binary::word(++$conn->seq) . // Query ID
			Binary::bitmap2bytes(
				'0' . // QR = 0
				'0000' . // OPCODE = 0000 (standard query)
				'0' . // AA = 0
				'0' . // TC = 0
				'1' . // RD = 1

				'0' . // RA = 0,
				'000' . // reserved
				'0000' // RCODE
			, 2) .
			Binary::word(sizeof($QD)) . // QDCOUNT
			Binary::word(0) . // ANCOUNT
			Binary::word(0) . // NSCOUNT
			Binary::word(0) . // ARCOUNT
			implode('', $QD);
		$conn->write(Binary::word(strlen($packet)) . $packet);

	}
}
class DNSClientConnection extends NetworkClientConnection {
	protected $lowMark = 2;
	public $seq = 0;
	public $keepalive = false;


	/**
	 * Called when new data received
	 * @param string New data
	 * @return void
	 */
	public function stdin($buf) {
		$this->buf .= $buf;
		$length = Binary::bytes2int(binarySubstr($this->buf, 0, 2));
		if ($length > strlen($this->buf) + 2) {
			return; // not enough data yet

		}
		$packet = binarySubstr($this->buf, 2, $length);
		$this->buf = binarySubstr($this->buf, $length + 2);

		$id = Binary::getWord($packet);
		$bitmap = Binary::getBitmap(Binary::getByte($packet)) . Binary::getBitmap(Binary::getByte($packet));
		$qr = (int) $bitmap[0];
		$this->response['opcode'] = bindec(substr($bitmap, 1, 4));
		$this->response['aa'] = (int) $bitmap[5];
		$tc = (int) $bitmap[6];
		$rd = (int) $bitmap[7];
		$ra = (int) $bitmap[8];
		$z = bindec(substr($bitmap, 9, 3));
		$this->response['qdcount']= Binary::getWord($packet);
		$this->response['ancount'] = Binary::getWord($packet);
		$this->response['nscount'] = Binary::getWord($packet);
		$this->response['arcount'] = Binary::getWord($packet);
		$this->response = array();
		$domain = Binary::parseLabels($packet);
		while (strlen($packet) > 0) {
			$qtypeInt = Binary::getWord($packet);
			$qtype = isset(DNSClient::$type[$qtypeInt]) ? DNSClient::$type[$qtypeInt] : 'UNK(' . $qtypeInt . ')';
			$qclassInt = Binary::getWord($packet);
			$qclass = isset(DNSClient::$class[$qclassInt]) ? DNSClient::$class[$qclassInt] : 'UNK(' . $qclassInt . ')';
			if (binarySubstr($packet, 0, 2) === "\xc0\x0c") {
				$packet = binarySubstr($packet, 2);
				continue;
			}
			$ttl = Binary::getDWord($packet);
			$rdlength = Binary::getWord($packet);
			$rdata = binarySubstr($packet, 0, $rdlength);
			$packet = binarySubstr($packet, $rdlength);
			$record = array(
				'type' => $qtype,
				'domain' => $domain,
				'ttl' => $ttl,
				'class' => $qclass,
			);
			if ($qtype === 'A') {
				if ($rdata === "\x00") {
					$record['ip'] = false;
					$record['ttl'] = 5;
					$packet = '';
					break;
				} else {
					$record['ip'] = inet_ntop($rdata);
				}
			}
			elseif ($qtype === 'NS') {
				$record['ns'] = Binary::parseLabels($rdata);
			}
			if (!isset($this->response[$qtype])) {
				$this->response[$qtype] = array();
			}
			$this->response[$qtype][] = $record;
			if (binarySubstr($packet, 0, 2) === "\xc0\x0c") {
				$packet = binarySubstr($packet, 2);
				continue;
			}
		}
		$this->requestFinished();
	}

	public function requestFinished() {
		$cb = $this->onResponse->isEmpty() ? null : $this->onResponse->shift();
		if ($cb) {
			call_user_func($cb, $this->response);
		}
		if (!$this->keepalive) {
			$this->finish();
		} else {
			$this->checkFree();
		}
	}
}||||||||	public function get($domain, $cb) {
		$conn = $this->getConnectionByKey($domain);
		if (!$conn) {
			call_user_func($cb, false);
			return false;
		}
 		$conn->onResponse->push($cb);
		$conn->setFree(false);
		$e = explode(':', $domain, 3);
		$domain = $e[0];
		$qtype = isset($e[1]) ? $e[1] : 'A';
		$qclass = isset($e[2]) ? $e[2] : 'IN';
		$QD = array();
		$qtypeInt = array_search($qtype, DNSClient::$type, true);
		$qclassInt = array_search($qclass, DNSClient::$class, true);
		if (($qtypeInt === false) || ($qclassInt === false)) {
			call_user_func($cb, false);
			return;
		}
		$q =	Binary::labels($domain) .  // domain
				Binary::word($qtypeInt) .
				Binary::word($qclassInt);
		$QD[] = $q;
		$packet =
			Binary::word(++$conn->seq) . // Query ID
			Binary::bitmap2bytes(
				'0' . // QR = 0
				'0000' . // OPCODE = 0000 (standard query)
				'0' . // AA = 0
				'0' . // TC = 0
				'1' . // RD = 1

				'0' . // RA = 0,
				'000' . // reserved
				'0000' // RCODE
			, 2) .
			Binary::word(sizeof($QD)) . // QDCOUNT
			Binary::word(0) . // ANCOUNT
			Binary::word(0) . // NSCOUNT
			Binary::word(0) . // ARCOUNT
			implode('', $QD);
		$conn->write(Binary::word(strlen($packet)) . $packet);

	}
}
class DNSClientConnection extends NetworkClientConnection {
	protected $lowMark = 2;
	public $seq = 0;
	public $keepalive = false;


	/**
	 * Called when new data received
	 * @param string New data
	 * @return void
	 */
	public function stdin($buf) {
		$this->buf .= $buf;
		$length = Binary::bytes2int(binarySubstr($this->buf, 0, 2));
		if ($length > strlen($this->buf) + 2) {
			return; // not enough data yet

		}
		$packet = binarySubstr($this->buf, 2, $length);
		$this->buf = binarySubstr($this->buf, $length + 2);

		$id = Binary::getWord($packet);
		$bitmap = Binary::getBitmap(Binary::getByte($packet)) . Binary::getBitmap(Binary::getByte($packet));
		$qr = (int) $bitmap[0];
		$this->response['opcode'] = bindec(substr($bitmap, 1, 4));
		$this->response['aa'] = (int) $bitmap[5];
		$tc = (int) $bitmap[6];
		$rd = (int) $bitmap[7];
		$ra = (int) $bitmap[8];
		$z = bindec(substr($bitmap, 9, 3));
		$this->response['qdcount']= Binary::getWord($packet);
		$this->response['ancount'] = Binary::getWord($packet);
		$this->response['nscount'] = Binary::getWord($packet);
		$this->response['arcount'] = Binary::getWord($packet);
		$this->response = array();
		$domain = Binary::parseLabels($packet);
		while (strlen($packet) > 0) {
			$qtypeInt = Binary::getWord($packet);
			$qtype = isset(DNSClient::$type[$qtypeInt]) ? DNSClient::$type[$qtypeInt] : 'UNK(' . $qtypeInt . ')';
			$qclassInt = Binary::getWord($packet);
			$qclass = isset(DNSClient::$class[$qclassInt]) ? DNSClient::$class[$qclassInt] : 'UNK(' . $qclassInt . ')';
			if (binarySubstr($packet, 0, 2) === "\xc0\x0c") {
				$packet = binarySubstr($packet, 2);
				continue;
			}
			$ttl = Binary::getDWord($packet);
			$rdlength = Binary::getWord($packet);
			$rdata = binarySubstr($packet, 0, $rdlength);
			$packet = binarySubstr($packet, $rdlength);
			$record = array(
				'type' => $qtype,
				'domain' => $domain,
				'ttl' => $ttl,
				'class' => $qclass,
			);
			if ($qtype === 'A') {
				if ($rdata === "\x00") {
					$record['ip'] = false;
					$record['ttl'] = 5;
					$packet = '';
					break;
				} else {
					$record['ip'] = inet_ntop($rdata);
				}
			}
			elseif ($qtype === 'NS') {
				$record['ns'] = Binary::parseLabels($rdata);
			}
			if (!isset($this->response[$qtype])) {
				$this->response[$qtype] = array();
			}
			$this->response[$qtype][] = $record;
			if (binarySubstr($packet, 0, 2) === "\xc0\x0c") {
				$packet = binarySubstr($packet, 2);
				continue;
			}
		}
		$this->requestFinished();
	}

	public function requestFinished() {
		$cb = $this->onResponse->isEmpty() ? null : $this->onResponse->shift();
		if ($cb) {
			call_user_func($cb, $this->response);
		}
		if (!$this->keepalive) {
			$this->finish();
		} else {
			$this->checkFree();
		}
	}
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_STATIC_PROP)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_STATIC_PROP)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (AST_PRE_INC
                                            (AST_PROP
                                                (AST_VAR)))))
                                (AST_STATIC_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_BINARY_OP
                                                                    (SCALAR)
                                                                    (SCALAR))
                                                                (SCALAR))
                                                            (SCALAR))
                                                        (SCALAR))
                                                    (SCALAR))
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))))
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_STATIC_PROP)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_STATIC_PROP)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (AST_PRE_INC
                                            (AST_PROP
                                                (AST_VAR)))))
                                (AST_STATIC_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (AST_BINARY_OP
                                                                (AST_BINARY_OP
                                                                    (SCALAR)
                                                                    (SCALAR))
                                                                (SCALAR))
                                                            (SCALAR))
                                                        (SCALAR))
                                                    (SCALAR))
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))))
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_VAR)))))