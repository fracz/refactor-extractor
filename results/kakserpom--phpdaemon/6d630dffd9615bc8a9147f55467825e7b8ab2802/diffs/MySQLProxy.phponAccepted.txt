	protected function onAccepted($connId, $addr) {
		$this->sessions[$connId] = new MySQLProxySession($connId, $this);
		return TRUE;
	}

}

class MySQLProxySession extends SocketSession {

	public $upstream;

	/**
	 * Constructor.
	 * @return void
	 */
	public function init() {
		$e = explode(':', $this->appInstance->config->upserver->value);

		$connId = $this->appInstance->connectTo($e[0], $e[1]);

		$this->upstream = $this->appInstance->sessions[$connId] = new MySQLProxyUpserverSession($connId, $this->appInstance);
		$this->upstream->downstream = $this;
	}

	/**
	 * Called when new data received.
	 * @param string New data.
	 * @return void
	 */
	public function stdin($buf) {
		// from client to mysqld.
		if ($this->appInstance->config->protologging->value) {
			Daemon::log('MySQLProxy: Client --> Server: ' . Debug::exportBytes($buf) . "\n\n");
		}

		$this->upstream->write($buf);
	}

	/**
	 * Event of SocketSession (asyncServer).
	 * @return void
	 */
	public function onFinish() {
		$this->upstream->finish();
	}
}

class MySQLProxyUpserverSession extends SocketSession {

	public $downstream;

	/**
	 * Called when new data received.
	 * @param string New data.
	 * @return void
	 */
	public function stdin($buf) {
		// from mysqld to client.
		if ($this->appInstance->config->protologging->value) {
			Daemon::log('MysqlProxy: Server --> Client: ' . Debug::exportBytes($buf) . "\n\n");
		}

		$this->downstream->write($buf);
	}

	/**
	 * Event of SocketSession (asyncServer).
	 * @return void
	 */
	public function onFinish() {
		$this->downstream->finish();
	}

}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CONST)))||||||||