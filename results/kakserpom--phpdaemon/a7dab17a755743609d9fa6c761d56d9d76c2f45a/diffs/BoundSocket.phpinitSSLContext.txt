	protected function initSSLContext() {
		if (!EventUtil::sslRandPoll()) {
	 		Daemon::$process->log(get_class($this->pool) . ': EventUtil::sslRandPoll failed');
	 		$this->errorneous = true;
	 		return false;
	 	}
	 	$this->ctx = new EventSslContext(EventSslContext::SSLv3_SERVER_METHOD, $a = [
 			EventSslContext::OPT_LOCAL_CERT  => $this->certfile,
 			EventSslContext::OPT_LOCAL_PK    => $this->pkfile,
 			EventSslContext::OPT_PASSPHRASE  => $this->passphrase,
 			EventSslContext::OPT_VERIFY_PEER => $this->verifypeer,
 			EventSslContext::OPT_ALLOW_SELF_SIGNED => $this->allowselfsigned,
		]);
	}

	/**
	 * Attach to ConnectionPool
	 * @param ConnectionPool
	 * @return void
	 */
||||||||	protected function initSSLContext() {
		if (!EventUtil::sslRandPoll()) {
	 		Daemon::$process->log(get_class($this->pool) . ': EventUtil::sslRandPoll failed');
	 		$this->errorneous = true;
	 		return false;
	 	}
	 	$this->ctx = new EventSslContext(EventSslContext::SSLv3_SERVER_METHOD, [
 			EventSslContext::OPT_LOCAL_CERT  => $this->certfile,
 			EventSslContext::OPT_LOCAL_PK    => $this->pkfile,
 			EventSslContext::OPT_PASSPHRASE  => $this->passphrase,
 			EventSslContext::OPT_VERIFY_PEER => $this->verifypeer,
 			EventSslContext::OPT_ALLOW_SELF_SIGNED => $this->allowselfsigned,
		]);
	}

	/**
	 * Attach to ConnectionPool
	 * @param ConnectionPool
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_ARRAY_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))))))