    public function onReady() {

        // Adding listener
        // ComplexJob - STATE_WAITING
        $job = new ComplexJob(function($job) {
        	// ComplexJob - STATE_DONE
            /*array (
              'bar' =>
              array (
                    'job' => 'bar',
                    'success' => false,
                    'line' => 63,
              ),
              'foo' =>
              array (
                    'job' => 'foo',
                    'success' => true,
                    'line' => 84,
                    'arg' =>
                    array (
                      'param' => 'value',
                    ),
              ),
              'baz' =>
              array (
                    'job' => 'baz',
                    'success' => false,
                    'line' => 94,
              ),
            )*/
            Daemon::log($job->results);
        });

        // Adding listener
        // ComplexJob - STATE_WAITING
        $job->addListener(function($job) {
			// ComplexJob - STATE_DONE
        });

        // Incapsulate some property in job
        $job->appInstance = $this;

        // Adding async job foo
        $job('foo', $this->foo(array('param' => 'value')));

        // Adding with 1 sec delay
        Daemon_TimedEvent::add(function($event) use ($job) {

            // Adding async job bar
            $job('bar', function($jobname, $job) {
                Daemon_TimedEvent::add(function($event) use($jobname, $job) {
                    // Job done
                    $job->setResult($jobname, array('job' => 'bar', 'success' => false, 'line' => __LINE__));
                    $event->finish();
                }, 1e3 * 50);
            });

            // Adding async job baz. Equal $job('baz', $job->appInstance->baz());
            $job->addJob('baz', $job->appInstance->baz());

            // Run jobs. All listeners will be called when the jobs done
            // ComplexJob - STATE_RUNNING
            $job();

            $event->finish();
        }, 1e6 * 1);

    }

||||||||    public function onReady() {

        // Adding listener
        // ComplexJob - STATE_WAITING
        $job = new ComplexJob(function($job) {
        	// ComplexJob - STATE_DONE
            /*array (
              'bar' =>
              array (
                    'job' => 'bar',
                    'success' => false,
                    'line' => 63,
              ),
              'foo' =>
              array (
                    'job' => 'foo',
                    'success' => true,
                    'line' => 84,
                    'arg' =>
                    array (
                      'param' => 'value',
                    ),
              ),
              'baz' =>
              array (
                    'job' => 'baz',
                    'success' => false,
                    'line' => 94,
              ),
            )*/
            Daemon::log($job->results);
            unset($job);
        });

        // Adding listener
        // ComplexJob - STATE_WAITING
        $job->addListener(function($job) {
			// ComplexJob - STATE_DONE
        });

        // Incapsulate some property in job
        $job->appInstance = $this;

        // Adding async job foo
        $job('foo', $this->foo(array('param' => 'value')));

        // Adding with 1 sec delay
        Daemon_TimedEvent::add(function($event) use ($job) {

            // Adding async job bar
            $job('bar', function($jobname, $job) {
                Daemon_TimedEvent::add(function($event) use($jobname, $job) {
                    // Job done
                    $job->setResult($jobname, array('job' => 'bar', 'success' => false, 'line' => __LINE__));
                    $event->finish();
                }, 1e3 * 50);
            });

            // Adding async job baz. Equal $job('baz', $job->appInstance->baz());
            $job->addJob('baz', $job->appInstance->baz());

            // Run jobs. All listeners will be called when the jobs done
            // ComplexJob - STATE_RUNNING
            $job();

            $event->finish();
        }, 1e6 * 1);

    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))))))
    (AST_STATIC_CALL
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                                (NULL)
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_CLOSURE
                                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                                (AST_CLOSURE_USES
                                                    (AST_CLOSURE_VAR)
                                                    (AST_CLOSURE_VAR))
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR)
                                                            (AST_ARRAY
                                                                (AST_ARRAY_ELEM
                                                                    (SCALAR)
                                                                    (SCALAR))
                                                                (AST_ARRAY_ELEM
                                                                    (AST_CONST)
                                                                    (SCALAR))
                                                                (AST_ARRAY_ELEM
                                                                    (AST_MAGIC_CONST)
                                                                    (SCALAR)))))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (SCALAR))))))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_UNSET
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))))))
    (AST_STATIC_CALL
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                                (NULL)
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_CLOSURE
                                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                                (AST_CLOSURE_USES
                                                    (AST_CLOSURE_VAR)
                                                    (AST_CLOSURE_VAR))
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR)
                                                            (AST_ARRAY
                                                                (AST_ARRAY_ELEM
                                                                    (SCALAR)
                                                                    (SCALAR))
                                                                (AST_ARRAY_ELEM
                                                                    (AST_CONST)
                                                                    (SCALAR))
                                                                (AST_ARRAY_ELEM
                                                                    (AST_MAGIC_CONST)
                                                                    (SCALAR)))))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (SCALAR))))))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))))
                    (AST_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR)))))