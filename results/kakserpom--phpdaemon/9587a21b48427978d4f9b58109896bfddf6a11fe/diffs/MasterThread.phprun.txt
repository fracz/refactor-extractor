||||||||	protected function run() {

		Daemon::$process = $this;

		$this->prepareSystemEnv();
		class_exists('Timer'); // ensure loading this class
		gc_enable();

		//$this->eventBase = new EventBase;

		if ($this->eventBase) {
			$this->registerEventSignals();
		}
		else {
			$this->registerSignals();
		}

		$this->workers                   = new ThreadCollection();
		$this->collections['workers']    = $this->workers;
		$this->ipcthreads                = new ThreadCollection;
		$this->collections['ipcthreads'] = $this->ipcthreads;

		Daemon::$appResolver = require Daemon::$appResolverPath;
		Daemon::$appResolver->preload(true);

		$this->callbacks = new StackCallbacks();
		$this->spawnIPCThread();
		$this->spawnWorkers(min(
								Daemon::$config->startworkers->value,
								Daemon::$config->maxworkers->value
							));
		$this->timerCb = function ($event) use (&$cbs) {
			static $c = 0;

			++$c;

			if ($c > 0xFFFFF) {
				$c = 1;
			}

			if (($c % 10 == 0)) {
				$this->workers->removeTerminated(true);
				$this->ipcthreads->removeTerminated(true);
				gc_collect_cycles();
			}
			else {
				$this->workers->removeTerminated();
				$this->ipcthreads->removeTerminated();
			}

			if (!$this->lastMpmActionTs || ((microtime(true) - $this->lastMpmActionTs) > $this->minMpmActionInterval)) {
				$this->callMPM();
			}
			if ($event) {
				$event->timeout();
			}
		};

		if ($this->eventBase) { // we are using libevent in Master
			Timer::add($this->timerCb, 1e6 * Daemon::$config->mpmdelay->value, 'MPM');
			while (!$this->breakMainLoop) {
				$this->callbacks->executeAll($this);
				if (!$this->eventBase->dispatch()) {
					break;
				}
			}
		}
		else { // we are NOT using libevent in Master
			$lastTimerCall = microtime(true);
			while (!$this->breakMainLoop) {
				$this->callbacks->executeAll($this);
				if (microtime(true) > $lastTimerCall + Daemon::$config->mpmdelay->value) {
					call_user_func($this->timerCb, null);
					$lastTimerCall = microtime(true);
				}
				$this->sigwait();
			}
		}
	}

	/**
	 * Log something
	 * @param string - Message.
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_INCLUDE_OR_EVAL
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_PROP
                        (AST_PROP
                            (AST_STATIC_PROP)))
                    (AST_PROP
                        (AST_PROP
                            (AST_STATIC_PROP)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR))
            (
                (AST_STATIC
                    (AST_VAR)
                    (SCALAR))
                (AST_PRE_INC
                    (AST_VAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CONST)))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CONST)))
                            (AST_CALL)))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CONST)))
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_PROP
                                    (AST_STATIC_PROP))))
                        (SCALAR)))
                (AST_WHILE
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_BREAK
                                        (NULL)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CONST))))
                (AST_WHILE
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CONST)))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_STATIC_PROP)))))
                                (
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CONST)))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_CONST)))))))
                        (AST_METHOD_CALL
                            (AST_VAR))))))))