||||||||	public static function uncaughtExceptionHandler(\Exception $e) {
		$msg = $e->getMessage();
		Daemon::log('Uncaught ' . get_class($e) . ' (' . $e->getCode() . ')' . (strlen($msg) ? ': ' . $msg : '') . ".\n" . $e->getTraceAsString());
		if (Daemon::$req) {
			Daemon::$req->out('<b>Uncaught ' . get_class($e) . ' (' . $e->getCode() . ')</b>' . (strlen($msg) ? ': ' . $msg : '') . '.<br />');
		}
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_CONDITIONAL
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR))))
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_CONDITIONAL
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR)))
                            (SCALAR))))))))