	protected function spawnWorkers($n) {
		if (FS::$supported) {
			eio_event_loop();
		}
		$n = (int) $n;

		for ($i = 0; $i < $n; ++$i) {
			$thread = new Daemon_WorkerThread;
			$this->workers->push($thread);
			$this->callbacks->push(function($self) use ($thread) {
				$thread->start();
				$pid = $thread->getPid();
				if ($pid < 0) {
					Daemon::$process->log('could not fork worker');
				} elseif ($pid === 0) { // worker
					Daemon::log('Unexcepted execution return to outside of Thread->start()');
					exit;
				}
			});

		}
		if ($n > 0) {
			$this->lastMpmActionTs = microtime(true);
			if ($this->eventBase) {
				$this->eventBase->stop();
			}
		}
		return true;
	}

		/**
	 * Spawn IPC process
	 * @param $n - integer - number of workers to spawn
	 * @return boolean - success
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CLOSURE
                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_STATIC_PROP)
                                            (
                                                (SCALAR)))))
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR))
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (SCALAR)))
                                        (AST_EXIT
                                            (NULL)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_CONST))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_CONST)))||||||||