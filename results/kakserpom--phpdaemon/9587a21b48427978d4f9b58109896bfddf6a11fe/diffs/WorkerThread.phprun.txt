||||||||	protected function run() {
		$this->callbacks = new StackCallbacks();
		if (Daemon::$process instanceof MasterThread) {
			Daemon::$process->unregisterSignals();
		}
		if (Daemon::$process && Daemon::$process->eventBase) {
			Daemon::$process->eventBase->reinit();
			$this->eventBase = Daemon::$process->eventBase;
		}
		else {
			$this->eventBase = new \EventBase();
		}
		Daemon::$process = $this;
		if (Daemon::$logpointerAsync) {
			$oldfd                       = Daemon::$logpointerAsync->fd;
			Daemon::$logpointerAsync->fd = null;
			Daemon::$logpointerAsync     = null;
		}
		class_exists('Timer');
		$this->autoReloadLast = time();
		$this->reloadDelay    = Daemon::$config->mpmdelay->value + 2;
		$this->setState(Daemon::WSTATE_PREINIT);

		if (Daemon::$config->autogc->value > 0) {
			gc_enable();
			gc_collect_cycles();
		}
		else {
			gc_disable();
		}

		if (Daemon::$runworkerMode) {
			Daemon::$appResolver = require Daemon::$appResolverPath;
			Daemon::$appResolver->preload(true);
		}

		$this->prepareSystemEnv();
		$this->overrideNativeFuncs();

		$this->setState(Daemon::WSTATE_INIT);;
		$this->dnsBase = new EventDnsBase($this->eventBase, false); // @TODO: test with true
		$this->registerEventSignals();

		FS::init();
		FS::initEvent();
		Daemon::openLogs();

		$this->IPCManager = Daemon::$appResolver->getInstanceByAppName('IPCManager');

		Daemon::$appResolver->preload();

		foreach (Daemon::$appInstances as $app) {
			foreach ($app as $appInstance) {
				if (!$appInstance->ready) {
					$appInstance->ready = true;
					$appInstance->onReady();
				}
			}
		}

		$this->setState(Daemon::WSTATE_IDLE);

		Timer::add(function ($event) {

			if (!Daemon::$runworkerMode) {
				$this->IPCManager->ensureConnection();
			}

			$this->breakMainLoopCheck();
			if ($this->breakMainLoop) {
				$this->eventBase->exit();
				return;
			}

			if (Daemon::checkAutoGC()) {
				$this->callbacks->push(function ($thread) {
					gc_collect_cycles();
				});
				$this->eventBase->exit();
			}

			$event->timeout();
		}, 1e6 * 1, 'breakMainLoopCheck');
		if (Daemon::$config->autoreload->value > 0) {
			Timer::add(function ($event) {
				static $n = 0;
				$list = get_included_files();
				$s    = sizeof($list);
				if ($s > $n) {
					$slice = array_map('realpath', array_slice($list, $n));
					Daemon::$process->IPCManager->sendPacket(['op' => 'addIncludedFiles', 'files' => $slice]);
					$n = $s;
				}
				$event->timeout();
			}, 1e6 * Daemon::$config->autoreload->value, 'watchIncludedFiles');
		}

		while (!$this->breakMainLoop) {
			$this->callbacks->executeAll($this);
			if (!$this->eventBase->dispatch()) {
				break;
			}
		}
		$this->shutdown();
	}

	/**
	 * Overrides native PHP functions.
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_STATIC_PROP))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_PROP
                    (AST_STATIC_PROP)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_STATIC_PROP)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_STATIC_PROP)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CONST)))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_PROP
                (AST_PROP
                    (AST_STATIC_PROP)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_PROP
                        (AST_STATIC_PROP)))
                (SCALAR))
            (
                (AST_CALL)
                (AST_CALL)))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_INCLUDE_OR_EVAL
                        (AST_STATIC_PROP)))
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_STATIC_PROP)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_STATIC_PROP))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))))))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_RETURN
                                    (NULL)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_STATIC_CALL)
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_CLOSURE
                                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                            (NULL)
                                            (
                                                (AST_CALL)))))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))))))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_PROP
                        (AST_STATIC_PROP)))
                (SCALAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (NULL)
                            (
                                (AST_STATIC
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)
                                                                (AST_VAR))))))
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_STATIC_PROP))
                                                (
                                                    (AST_ARRAY
                                                        (AST_ARRAY_ELEM
                                                            (SCALAR)
                                                            (SCALAR))
                                                        (AST_ARRAY_ELEM
                                                            (AST_VAR)
                                                            (SCALAR)))))
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_PROP
                                    (AST_STATIC_PROP))))
                        (SCALAR))))))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_BREAK
                            (NULL)))))))
    (AST_METHOD_CALL
        (AST_VAR)))