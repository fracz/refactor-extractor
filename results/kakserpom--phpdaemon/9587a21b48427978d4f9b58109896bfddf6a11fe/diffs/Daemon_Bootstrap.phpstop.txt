	public static function stop($mode = 1) {
		$ok = Daemon_Bootstrap::$pid && posix_kill(Daemon_Bootstrap::$pid, $mode === 3 ? SIGINT:SIGTERM);

		if (!$ok) {
			echo '[WARN]. It seems that phpDaemon is not running' . (Daemon_Bootstrap::$pid ? ' (PID ' . Daemon_Bootstrap::$pid . ')' : '') . ".\n";
		}

		if (
			$ok
			&& ($mode > 1)
		) {
			$i = 0;

			while ($r = Thread::ifExistsByPid(Daemon_Bootstrap::$pid)) {
				usleep(10000);
				++$i;
			}
		}
	}

	/**
	 * Parses command-line arguments.
	 * @param array $_SERVER['argv']
	 * @return array Arguments
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_PROP)
            (AST_CALL
                (
                    (AST_STATIC_PROP)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CONDITIONAL
                                (AST_STATIC_PROP)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_STATIC_PROP))
                                    (SCALAR))
                                (SCALAR)))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_WHILE
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_STATIC_PROP))))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_PRE_INC
                            (AST_VAR))))))))||||||||