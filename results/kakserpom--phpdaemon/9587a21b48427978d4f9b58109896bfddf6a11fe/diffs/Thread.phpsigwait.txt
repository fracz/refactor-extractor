	protected function sigwait($sec = 0, $nano = 0.3e9) {
		$siginfo = null;
		$signo = @pcntl_sigtimedwait(self::$signalsno, $siginfo, $sec, $nano);

		if (is_bool($signo)) {
			return $signo;
		}

		if ($signo > 0) {
			$this->sighandler($signo);

			return true;
		}

		return false;
	}
}

if (!function_exists('pcntl_sigtimedwait')) { // For Mac OS where missing the orignal function
	function pcntl_sigtimedwait($signals, $siginfo, $sec, $nano) {
		pcntl_signal_dispatch();
		if (time_nanosleep($sec, $nano) === true) {
			return false;
		}
		pcntl_signal_dispatch();
		return true;
	}
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_STATIC_PROP)
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||