	public function removeTerminated($check = FALSE) {
		$n = 0;
		foreach ($this->threads as $id => $thread) {
			if ($thread->isTerminated() || !$thread->getPid() || ($check && !$thread->ifExists())) {
				unset($this->threads[$id]);
				continue;
			}
			++$n;
		}

		return $n;
	}

	/**
	 * Send a signal to threads
	 * @param integer Signal's number
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_UNSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_PRE_INC
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||