||||||||	public function requestOut($req, $out) {
		$cs = $this->pool->config->chunksize->value;
		if (strlen($out) > $cs) {
			while (($ol = strlen($out)) > 0) {
				$l = min($cs, $ol);
				if ($this->sendChunk($req, binarySubstr($out, 0, $l)) === false) {
					$req->abort();
					return false;
				}
				$out = binarySubstr($out, $l);
			}
		}
		elseif ($this->sendChunk($req, $out) === false) {
			$req->abort();
			return false;
		}
		return true;
	}

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)))))
                                    (AST_CONST))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_RETURN
                                        (AST_CONST)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))