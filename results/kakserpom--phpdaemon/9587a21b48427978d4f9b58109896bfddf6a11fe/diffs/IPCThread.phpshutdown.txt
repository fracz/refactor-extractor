||||||||	public function shutdown($hard = false) {
		$error = error_get_last();
		if ($error) {
			if ($error['type'] === E_ERROR) {
				$this->log('crashed by error \'' . $error['message'] . '\' at ' . $error['file'] . ':' . $error['line']);
			}

		}
		if (Daemon::$config->logevents->value) {
			$this->log('event shutdown(' . ($hard ? 'HARD' : '') . ') invoked.');
		}

		if (Daemon::$config->throwexceptiononshutdown->value) {
			throw new \Exception('event shutdown');
		}

		@ob_flush();

		if ($this->terminated === true) {
			if ($hard) {
				exit(0);
			}

			return;
		}

		$this->terminated = true;
		if ($hard) {
			exit(0);
		}
		FS::waitAllEvents(); // ensure that all I/O events completed before suicide
		posix_kill(posix_getppid(), SIGCHLD); // praying to Master
		exit(0); // R.I.P.
	}

	/**
	 * Handler of the SIGINT (hard shutdown) signal in worker process.
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_DIM
                                                            (AST_VAR)
                                                            (SCALAR)))
                                                    (SCALAR))
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR)))
                                            (SCALAR))
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_PROP
                    (AST_STATIC_PROP)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CONDITIONAL
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_PROP
                    (AST_STATIC_PROP)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_UNARY_OP
        (AST_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_EXIT
                                (SCALAR)))))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_EXIT
                    (SCALAR)))))
    (AST_STATIC_CALL)
    (AST_CALL
        (
            (AST_CALL)
            (AST_CONST)))
    (AST_EXIT
        (SCALAR)))