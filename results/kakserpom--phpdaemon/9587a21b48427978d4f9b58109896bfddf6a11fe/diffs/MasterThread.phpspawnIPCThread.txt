||||||||	protected function spawnIPCThread() {
		if (FS::$supported) {
			eio_event_loop();
		}
		$thread = new Daemon_IPCThread;
		$this->ipcthreads->push($thread);

		$this->callbacks->push(function ($self) use ($thread) {
			$thread->start();
			$pid = $thread->getPid();
			if ($pid < 0) {
				Daemon::$process->log('could not fork IPCThread');
			}
			elseif ($pid === 0) { // worker
				$this->log('Unexcepted execution return to outside of Thread->start()');
				exit;
			}
		});
		if ($this->eventBase) {
			$this->eventBase->stop();
		}
		return true;
	}

	/**
	 * Stop the workers
	 * @param $n - integer - number of workers to stop
	 * @return boolean - success
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_STATIC_PROP)
                                    (
                                        (SCALAR)))))
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))
                                (AST_EXIT
                                    (NULL)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))