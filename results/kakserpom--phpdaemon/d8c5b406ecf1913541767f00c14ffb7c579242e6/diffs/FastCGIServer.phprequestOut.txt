	public function requestOut($req, $output) {
		$outlen = strlen($output);

		$conn = $this->getConnectionById($req->attrs->connId);

		if (!$conn) {
			return false;
		}

		/*
		* Iterate over every character in the string,
		* escaping with a slash or encoding to UTF-8 where necessary
		*/
		// string bytes counter
		$d = 0;
		for ($c = 0; $c < $outlen; ++$c) {

		  $ord_var_c = ord($output{$d});

		  switch (true) {
			  case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):
				  // characters U-00000000 - U-0000007F (same as ASCII)
				  $d++;
				  break;

			  case (($ord_var_c & 0xE0) == 0xC0):
				  // characters U-00000080 - U-000007FF, mask 110XXXXX
				  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
				  $d+=2;
				  break;

			  case (($ord_var_c & 0xF0) == 0xE0):
				  // characters U-00000800 - U-0000FFFF, mask 1110XXXX
				  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
				  $d+=3;
				  break;

			  case (($ord_var_c & 0xF8) == 0xF0):
				  // characters U-00010000 - U-001FFFFF, mask 11110XXX
				  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
				  $d+=4;
				  break;

			  case (($ord_var_c & 0xFC) == 0xF8):
				  // characters U-00200000 - U-03FFFFFF, mask 111110XX
				  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
				  $d+=5;
				  break;

			  case (($ord_var_c & 0xFE) == 0xFC):
				  // characters U-04000000 - U-7FFFFFFF, mask 1111110X
				  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
				  $d+=6;
				  break;
			  default:
				$d++;
		  }
		}

		for ($o = 0; $o < $d;) {
			$c = min($this->config->chunksize->value, $d - $o);
			$w = $conn->write(
				  "\x01"												// protocol version
				. "\x06"												// record type (STDOUT)
				. pack('nn', $req->attrs->id, $c)					// id, content length
				. "\x00" 												// padding length
				. "\x00"												// reserved
				. ($c === $d ? $output : binarySubstr($output, $o, $c)) // content
			);
			if ($w === false) {
				$req->abort();
				return false;
			}
			$o += $c;
		}
		return true;
	}

	/**
	 * Handles the output from downstream requests.
	 * @return void
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_SWITCH
                (AST_CONST)
                (AST_SWITCH_LIST
                    (AST_SWITCH_CASE
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_POST_INC
                                (AST_VAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BREAK
                                (NULL))))
                    (AST_SWITCH_CASE
                        (NULL)
                        (
                            (AST_POST_INC
                                (AST_VAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_PROP
                                                        (AST_VAR)))
                                                (AST_VAR))))
                                    (SCALAR))
                                (SCALAR))
                            (AST_CONDITIONAL
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CONST)))||||||||