||||||||	public function findPair($local, $foreign) {
		return
			isset($this->pairs[$local . ':' .$foreign])
		 	? $this->pairs[$local . ':' .$foreign]
		 	: false;
	}
}

class IdentServerConnection extends Connection {
	public $EOL = "\r\n";
	protected $highMark = 64;
	/**
	 * Called when new data received.
	 * @param string New data.
	 * @return void
	 */
	public function stdin($buf) {
		$this->buf .= $buf;
		if (strlen($this->buf) > 64) {
			$this->finish();
			return;
		}
		while (($line = $this->gets()) !== false) {
			$e = explode(',', str_replace("\x20", '', $line = trim($line)));
			if ((sizeof($e) <> 2) || !ctype_digit($e[0]) || !ctype_digit($e[1])) {
				$this->writeln($line. ' : ERROR : INVALID-PORT');
				$this->finish();
				return;
			}
			$local = (int) $e[0];
			$foreign = (int) $e[1];
			if ($user = $this->pool->findPair($local, $foreign)) {
				$this->writeln($line. ' : USERID : ' . $user);

			} else {
				$this->writeln($line. ' : ERROR : NO-USER');
			}
		}
	}
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR))))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))
            (AST_CONST))))