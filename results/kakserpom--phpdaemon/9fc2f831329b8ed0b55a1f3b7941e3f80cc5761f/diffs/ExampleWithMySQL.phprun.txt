	public function run() {
		try {$this->header('Content-Type: text/html');} catch (Exception $e) {}

?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Example with MySQL</title>
</head>
<body>
<?php
if ($r = $this->job->getResult('showvar')) {
	echo '<h1>It works! Be happy! ;-)</h1>Result of SHOW VARIABLES: <pre>';
	var_dump(array_slice($r, 0, 5));
	echo '</pre>';

	echo '<br />Result of SHOW DATABASES: <pre>';
	var_dump($this->job->getResult('showdbs'));
	echo '</pre>';

} else {
	echo '<h1>Something went wrong! We have no result.</h1>';
}
echo '<br />Request (http) took: '.round(microtime(TRUE) - $this->attrs->server['REQUEST_TIME_FLOAT'],6);
?>
</body>
</html>
<?php
	}

}||||||||	public function run() {
		try {$this->header('Content-Type: text/html');} catch (Exception $e) {}

?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Example with MySQL</title>
</head>
<body>
<?php
if ($r = $this->job->getResult('showvar')) {
	echo '<h1>It works! Be happy! ;-)</h1>Result of SHOW VARIABLES: <pre>';
	var_dump($r);
	echo '</pre>';

	echo '<br />Result of SHOW DATABASES: <pre>';
	var_dump($this->job->getResult('showdbs'));
	echo '</pre>';

} else {
	echo '<h1>Something went wrong! We have no result.</h1>';
}
echo '<br />Request (http) took: '.round(microtime(TRUE) - $this->attrs->server['REQUEST_TIME_FLOAT'],6);
?>
</body>
</html>
<?php
	}

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_CONST)))
                        (AST_DIM
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_CONST)))
                        (AST_DIM
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR)))