||||||||	public function getConnectionByName($name) {
		if (
			($this->dtags_enabled)
			&& (($sp = strpos($name, '[')) !== FALSE)
			&& (($ep = strpos($name, ']')) !== FALSE)
			&& ($ep > $sp)
		) {
			$name = substr($name,$sp + 1, $ep - $sp - 1);
		}

		srand(crc32($name));
		$addr = array_rand($this->servers);
		srand();

		return $this->getConnection($addr);
	}
}

class LockClientConnection extends Connection {

	/**
	 * Called when new data received
	 * @param string New data
	 * @return void
	 */
	public function stdin($buf) {
		$this->buf .= $buf;

		while (($l = $this->gets()) !== FALSE) {
			$e = explode(' ', rtrim($l, "\r\n"));

			if ($e[0] === 'RUN') {
				if (isset($this->pool->jobs[$e[1]])) {
					call_user_func($this->pool->jobs[$e[1]][0], $e[0], $e[1], $this->pool);
				}
			}
			elseif ($e[0] === 'DONE') {
				if (isset($this->pool->jobs[$e[1]][1])) {
					call_user_func($this->pool->jobs[$e[1]][1], $e[0], $e[1], $this->pool);
				}
			}
			elseif ($e[0] === 'FAILED') {
				if (isset($this->pool->jobs[$e[1]][2])) {
					call_user_func($this->pool->jobs[$e[1]][2], $e[0], $e[1], $this->pool);
				}
			}
			if($this->pool->config->protologging->value) {
				Daemon::log('Lock client <-- Lock server: ' . Debug::exportBytes(implode(' ', $e)) . "\n");
			}
		}
	}
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_CONST)))
                    (AST_BINARY_OP
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_CONST)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_CALL
        (
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_CALL)
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))