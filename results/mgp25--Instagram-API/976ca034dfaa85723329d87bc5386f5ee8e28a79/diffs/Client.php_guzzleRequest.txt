    protected function _guzzleRequest(
        $method,
        $uri,
        array $guzzleOptions = [])
    {
        // Add critically important options for authenticating the request.
        $guzzleOptions = $this->_buildGuzzleOptions($guzzleOptions);

        // Attempt the request. Will throw in case of socket errors!
        try {
            $response = $this->_guzzleClient->request($method, $uri, $guzzleOptions);
        } catch (\Exception $e) {
            // Re-wrap Guzzle's exception using our own NetworkException.
            throw new \InstagramAPI\Exception\NetworkException($e);
        }

        // Detect very serious HTTP status codes in the response.
        $httpCode = $response->getStatusCode();
        switch ($httpCode) {
        case 429: // "429 Too Many Requests"
            throw new \InstagramAPI\Exception\ThrottledException('Throttled by Instagram because of too many API requests.');
            break;
        // NOTE: Detecting "404" errors was intended to help us detect when API
        // endpoints change. But it turns out that A) Instagram uses "valid" 404
        // status codes in actual API replies to indicate "user not found" and
        // similar states for various lookup functions. So we can't die on 404,
        // since "404" API calls actually succeeded in most cases. And B) Their
        // API doesn't 404 if you try an invalid endpoint URL. Instead, it just
        // redirects you to their official homepage. So catching 404 is both
        // pointless and harmful. This is a warning to future contributors!
        // ---
        // case 404: // "404 Not Found"
        //     die("The requested URL was not found (\"{$uri}\").");
        //     break;
        }

        // Save the new, most up-to-date cookies.
        $this->saveCookieJar();

        // The response may still have serious but "valid response" errors, such
        // as "400 Bad Request". But it's up to the CALLER to handle those!
        return $response;
    }

    /**
     * Internal wrapper around _guzzleRequest().
     *
     * This takes care of many common additional tasks needed by our library,
     * so you should try to always use this instead of the raw _guzzleRequest()!
     *
     * Available library options are:
     * - 'noDebug': Can be set to TRUE to forcibly hide debugging output for
     *   this request. The user controls debugging globally, but this is an
     *   override that prevents them from seeing certain requests that you may
     *   not want to trigger debugging (such as perhaps individual steps of a
     *   file upload process). However, debugging SHOULD be allowed in MOST cases!
     *   So only use this feature if you have a very good reason.
     * - 'debugUploadedBody': Set to TRUE to make debugging display the data that
     *   was uploaded in the body of the request. DO NOT use this if your function
     *   uploaded binary data, since printing those bytes would kill the terminal!
     * - 'debugUploadedBytes': Set to TRUE to make debugging display the size of
     *   the uploaded body data. Should ALWAYS be TRUE when uploading binary data.
     * - 'decodeToObject': If this option is provided, it MUST either be an instance
     *   of a new class object, or FALSE to signify that you don't want us to do any
     *   object decoding. Omitting this option entirely is the same as FALSE, but
     *   it is highly recommended to ALWAYS include this option (even if FALSE),
     *   for code clarity about what you intend to do with this function's response!
     *
     * @param string $method         HTTP method ("GET" or "POST").
     * @param int    $apiVersion     The Instagram API version to call (1, 2, etc).
     * @param string $endpoint       Relative API endpoint, such as "upload/photo/",
     *                               but can also be a full URI starting with "http:"
     *                               or "https:", which is then used as-provided
     *                               (and apiVersion will be ignored).
     * @param array  $guzzleOptions  Guzzle request() options to apply to the HTTP request.
     * @param array  $libraryOptions Additional options for controlling Library features
     *                               such as the debugging output and response decoding.
     *
     * @throws \InstagramAPI\Exception\NetworkException   For any network/socket related errors.
     * @throws \InstagramAPI\Exception\ThrottledException When we're throttled by server.
     * @throws \InstagramAPI\Exception\InstagramException When "decodeToObject"
     *                                                    was requested and the
     *                                                    API response was
     *                                                    invalid or failed or
     *                                                    class decode failed.
     * @throws \InvalidArgumentException                  If no object provided.
     *
     * @return array An array with the Guzzle "response" object, and the raw
     *               non-decoded HTTP "body" of the request, and the "object" if
     *               the "decodeToObject" library option was used.
     */
||||||||    protected function _guzzleRequest(
        $method,
        $uri,
        array $guzzleOptions = [])
    {
        // Add critically important options for authenticating the request.
        $guzzleOptions = $this->_buildGuzzleOptions($guzzleOptions);

        // Attempt the request. Will throw in case of socket errors!
        try {
            $response = $this->_guzzleClient->request($method, $uri, $guzzleOptions);
        } catch (\Exception $e) {
            // Re-wrap Guzzle's exception using our own NetworkException.
            throw new \InstagramAPI\Exception\NetworkException($e);
        }

        // Detect very serious HTTP status codes in the response.
        $httpCode = $response->getStatusCode();
        switch ($httpCode) {
        case 429: // "429 Too Many Requests"
            throw new \InstagramAPI\Exception\ThrottledException('Throttled by Instagram because of too many API requests.');
            break;
        // NOTE: Detecting "404" errors was intended to help us detect when API
        // endpoints change. But it turns out that A) Instagram uses "valid" 404
        // status codes in actual API replies to indicate "user not found" and
        // similar states for various lookup functions. So we can't die on 404,
        // since "404" API calls actually succeeded in most cases. And B) Their
        // API doesn't 404 if you try an invalid endpoint URL. Instead, it just
        // redirects you to their official homepage. So catching 404 is both
        // pointless and harmful. This is a warning to future contributors!
        // ---
        // case 404: // "404 Not Found"
        //     die("The requested URL was not found (\"{$uri}\").");
        //     break;
        }

        // Save the new, most up-to-date cookies.
        // NOTE: This code has been disabled since it was wasteful to constantly
        // save cookies. Instead, our parent saves our cookies "in bulk" when
        // the user's session finishes, via SettingsHandler's "onCloseUser".
        //$this->saveCookieJar();

        // The response may still have serious but "valid response" errors, such
        // as "400 Bad Request". But it's up to the CALLER to handle those!
        return $response;
    }

    /**
     * Internal wrapper around _guzzleRequest().
     *
     * This takes care of many common additional tasks needed by our library,
     * so you should try to always use this instead of the raw _guzzleRequest()!
     *
     * Available library options are:
     * - 'noDebug': Can be set to TRUE to forcibly hide debugging output for
     *   this request. The user controls debugging globally, but this is an
     *   override that prevents them from seeing certain requests that you may
     *   not want to trigger debugging (such as perhaps individual steps of a
     *   file upload process). However, debugging SHOULD be allowed in MOST cases!
     *   So only use this feature if you have a very good reason.
     * - 'debugUploadedBody': Set to TRUE to make debugging display the data that
     *   was uploaded in the body of the request. DO NOT use this if your function
     *   uploaded binary data, since printing those bytes would kill the terminal!
     * - 'debugUploadedBytes': Set to TRUE to make debugging display the size of
     *   the uploaded body data. Should ALWAYS be TRUE when uploading binary data.
     * - 'decodeToObject': If this option is provided, it MUST either be an instance
     *   of a new class object, or FALSE to signify that you don't want us to do any
     *   object decoding. Omitting this option entirely is the same as FALSE, but
     *   it is highly recommended to ALWAYS include this option (even if FALSE),
     *   for code clarity about what you intend to do with this function's response!
     *
     * @param string $method         HTTP method ("GET" or "POST").
     * @param int    $apiVersion     The Instagram API version to call (1, 2, etc).
     * @param string $endpoint       Relative API endpoint, such as "upload/photo/",
     *                               but can also be a full URI starting with "http:"
     *                               or "https:", which is then used as-provided
     *                               (and apiVersion will be ignored).
     * @param array  $guzzleOptions  Guzzle request() options to apply to the HTTP request.
     * @param array  $libraryOptions Additional options for controlling Library features
     *                               such as the debugging output and response decoding.
     *
     * @throws \InstagramAPI\Exception\NetworkException   For any network/socket related errors.
     * @throws \InstagramAPI\Exception\ThrottledException When we're throttled by server.
     * @throws \InstagramAPI\Exception\InstagramException When "decodeToObject"
     *                                                    was requested and the
     *                                                    API response was
     *                                                    invalid or failed or
     *                                                    class decode failed.
     * @throws \InvalidArgumentException                  If no object provided.
     *
     * @return array An array with the Guzzle "response" object, and the raw
     *               non-decoded HTTP "body" of the request, and the "object" if
     *               the "decodeToObject" library option was used.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))))
    (AST_RETURN
        (AST_VAR)))