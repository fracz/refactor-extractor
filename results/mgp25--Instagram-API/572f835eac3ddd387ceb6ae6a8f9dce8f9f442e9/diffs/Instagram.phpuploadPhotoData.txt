||||||||    public function uploadPhotoData(
        $targetFeed,
        $photoFilename,
        $fileType = 'photofile',
        $uploadId = null)
    {
        // Verify that the file exists locally.
        if (!is_file($photoFilename)) {
            throw new \InvalidArgumentException(sprintf('The photo file "%s" does not exist on disk.', $photoFilename));
        }

        // Determine which file contents to upload.
        if ($fileType == 'videofile') {
            // Generate a thumbnail from a video file.
            $photoData = Utils::createVideoIcon($photoFilename);
        } else {
            $photoData = file_get_contents($photoFilename);
        }

        // Generate an upload ID if none was provided.
        if (is_null($uploadId)) {
            $uploadId = Utils::generateUploadId();
        }

        // Prepare payload for the upload request.
        $request = $this->request('upload/photo/')
            ->setSignedPost(false)
            ->addPost('upload_id', $uploadId)
            ->addPost('_uuid', $this->uuid)
            ->addPost('_csrftoken', $this->client->getToken())
            ->addPost('image_compression', '{"lib_name":"jt","lib_version":"1.3.0","quality":"87"}')
            ->addFileData('photo', $photoData, 'pending_media_'.Utils::generateUploadId().'.jpg');

        if ($targetFeed == 'album') {
            $request->addPost('is_sidecar', '1');
            if ($fileType == 'videofile') {
                $request->addPost('media_type', '2');
            }
        }

        return $request->getResponse(new Response\UploadPhotoResponse());
    }

    /**
     * INTERNAL. Asks Instagram for parameters for uploading a new video.
     *
     * @param string $targetFeed       Target feed for this media ("timeline", "story", "album" or "direct_v2").
     * @param array  $internalMetadata (optional) Internal library-generated metadata key-value pairs.
     *
     * @throws \InstagramAPI\Exception\InstagramException If the request fails.
     *
     * @return array
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))
                                (
                                    (AST_CONST)))
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))))
                (
                    (SCALAR)
                    (SCALAR)))
            (
                (SCALAR)
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_STATIC_CALL))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_NEW)))))