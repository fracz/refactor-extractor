||||||||    protected function _handleReplace()
    {
        if ($this->_isPathStartsWith('/direct_v2/threads')) {
            if ($this->_isPathEndsWith('has_seen')) {
                $this->_updateSeen();
            } else {
                $this->_upsertThreadItem();
            }
        } elseif ($this->_isPathStartsWith('/direct_v2/inbox/threads')) {
            $this->_upsertThread();
        } elseif ($this->_isPathStartsWith('/direct_v2/inbox') || $this->_isPathStartsWith('/direct_v2/visual_inbox')) {
            if ($this->_isPathEndsWith('unseen_count')) {
                $this->_updateUnseenCount();
            }
        } elseif ($this->_isPathStartsWith('/direct_v2/visual_action_badge')) {
            $this->_directStoryAction();
        } elseif ($this->_isPathStartsWith('/direct_v2/visual_thread')) {
            if ($this->_isPathEndsWith('screenshot')) {
                $this->_notifyDirectStoryScreenshot();
            } elseif ($this->_isPathEndsWith('create')) {
                $this->_createDirectStory();
            }
        } else {
            $this->_client->debug('Unsupported REPLACE path "%s"', $this->path);
        }
    }

    /**
     * Handler for thread item removal.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))))))