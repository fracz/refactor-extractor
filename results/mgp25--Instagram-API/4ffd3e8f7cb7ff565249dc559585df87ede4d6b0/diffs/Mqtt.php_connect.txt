||||||||    protected function _connect()
    {
        $host = self::DEFAULT_HOST;
        $port = self::DEFAULT_PORT;
        $this->debug('Connecting to "%s:%d"', $host, $port);
        $connector = new Connector($this->_rtc->getLoop(), $this->getConnector($host, false), $this->getConnector($host, true));
        /** @var ReactMqttClient $connection */
        $connection = $connector(true);
        try {
            $password = $this->_getMqttPassword();
        } catch (\Exception $e) {
            $this->_rtc->emit('error', $e);

            return;
        }
        $this->_beforeConnect($connection);
        $connection->connect($host, $port, new DefaultConnection(
            $this->_getMqttUsername(),
            $password,
            null,
            $this->_getMqttClientId(),
            self::MQTT_KEEPALIVE,
            self::MQTT_VERSION,
            true
        ))->then(function () use ($connection) {
            $this->_afterConnect($connection);
        }, function (\Exception $e) {
            $this->debug($e->getMessage());
            $this->debug('Retrying connection attempt because of the error');
            $this->reconnect();
        });
    }

    /**
     * Subscribe to all topics.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (AST_VAR)
            (
                (AST_CONST))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (AST_RETURN
                        (NULL)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR)
                        (AST_CONST)
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CONST)))))
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))
            (AST_CLOSURE
                (PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)))))))