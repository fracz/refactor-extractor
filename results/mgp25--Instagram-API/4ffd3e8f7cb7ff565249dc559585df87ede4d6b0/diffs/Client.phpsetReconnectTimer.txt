||||||||    public function setReconnectTimer(
        $interval)
    {
        // Cancel existing timers to prevent double-firing.
        $this->cancelKeepaliveTimer();
        $this->cancelReconnectTimer();
        // Do not reconnect on shutdown.
        if ($this->_shutdown) {
            return;
        }
        // We must keep interval sane.
        $this->_reconnectTimerInterval = max(0.1, min($interval, self::MAX_RECONNECT_INTERVAL));
        $this->debug('Setting up connection timer to %.1f seconds', $this->_reconnectTimerInterval);
        // Set up new timer.
        $this->_reconnectTimer = $this->_rtc->getLoop()->addTimer($this->_reconnectTimerInterval, function () {
            $this->_keepaliveTimerInterval = self::KEEPALIVE_INTERVAL;
            $this->_connect();
        });
    }

    /**
     * Perform first connection in a row.
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CLOSURE
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_METHOD_CALL
                            (AST_VAR))))))))