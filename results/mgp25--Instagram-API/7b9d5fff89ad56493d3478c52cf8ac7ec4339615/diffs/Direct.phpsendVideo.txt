    public function sendVideo(
        $recipients,
        $videoFilename,
        array $options = [])
    {
        // Direct videos use different upload IDs.
        $internalMetadata = new InternalMetadata(Utils::generateUploadId(true));
        // Attempt to upload the video data.
        $internalMetadata = $this->ig->internal->uploadVideo('direct_v2', $videoFilename, $internalMetadata);

        // We must use the same client_context for all attempts to prevent double-posting.
        if (!isset($options['client_context'])) {
            $options['client_context'] = Signatures::generateUUID(true);
        }

        // Send the uploaded video to recipients.
        $result = null;
        for ($attempt = 1; $attempt <= Internal::MAX_CONFIGURE_RETRIES; ++$attempt) {
            try {
                $videoUploadResponse = $internalMetadata->getVideoUploadResponse();
                // Attempt to configure video parameters (which sends it to the thread).
                $result = $this->_sendDirectItem('video', $recipients, array_merge($options, [
                    'upload_id'    => $internalMetadata->getUploadId(),
                    'video_result' => $videoUploadResponse !== null ? $videoUploadResponse->getResult() : '',
                ]));
                break; // Success. Exit loop.
            } catch (\InstagramAPI\Exception\InstagramException $e) {
                if ($attempt < Internal::MAX_CONFIGURE_RETRIES && strpos($e->getMessage(), 'Transcode timeout') !== false) {
                    // Do nothing, since we'll be retrying the failed configure...
                    sleep(1); // Just wait a little before the next retry.
                } else {
                    // Re-throw all unhandled exceptions.
                    throw $e;
                }
            }
        }
        if ($result === null) { // Safeguard since _sendDirectItem() may return null in some cases.
            throw new \InstagramAPI\Exception\UploadFailedException('Failed to configure video for direct_v2.');
        }

        return $result;
    }

    /**
     * Send a disappearing video (upload) via direct message to a user's inbox.
     *
     * @param array  $recipients       An array with "users" or "thread" keys.
     *                                 To start a new thread, provide "users" as an array
     *                                 of numerical UserPK IDs. To use an existing thread
     *                                 instead, provide "thread" with the thread ID.
     * @param string $videoFilename    The video filename.
     * @param array  $externalMetadata (optional) User-provided metadata key-value pairs.
     *
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @throws \InstagramAPI\Exception\InstagramException
     * @throws \InstagramAPI\Exception\UploadFailedException If the video upload fails.
     *
     * @return \InstagramAPI\Response\ConfigureResponse
     *
     * @see Internal::configureSingleVideo() for available metadata fields.
     */
||||||||    public function sendVideo(
        $recipients,
        $videoFilename,
        array $options = [])
    {
        // Direct videos use different upload IDs.
        $internalMetadata = new InternalMetadata(Utils::generateUploadId(true));
        // Attempt to upload the video data.
        $internalMetadata = $this->ig->internal->uploadVideo('direct_v2', $videoFilename, $internalMetadata);

        // We must use the same client_context for all attempts to prevent double-posting.
        if (!isset($options['client_context'])) {
            $options['client_context'] = Signatures::generateUUID(true);
        }

        // Send the uploaded video to recipients.
        /** @var \InstagramAPI\Response\DirectSendItemResponse $result */
        $result = $this->ig->internal->configureWithRetries(
            $videoFilename,
            function () use ($internalMetadata, $recipients, $options) {
                $videoUploadResponse = $internalMetadata->getVideoUploadResponse();
                // Attempt to configure video parameters (which sends it to the thread).
                return $this->_sendDirectItem('video', $recipients, array_merge($options, [
                    'upload_id'    => $internalMetadata->getUploadId(),
                    'video_result' => $videoUploadResponse !== null ? $videoUploadResponse->getResult() : '',
                ]));
            }
        );

        return $result;
    }

    /**
     * Send a disappearing video (upload) via direct message to a user's inbox.
     *
     * @param array  $recipients       An array with "users" or "thread" keys.
     *                                 To start a new thread, provide "users" as an array
     *                                 of numerical UserPK IDs. To use an existing thread
     *                                 instead, provide "thread" with the thread ID.
     * @param string $videoFilename    The video filename.
     * @param array  $externalMetadata (optional) User-provided metadata key-value pairs.
     *
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     * @throws \InstagramAPI\Exception\InstagramException
     * @throws \InstagramAPI\Exception\UploadFailedException If the video upload fails.
     *
     * @return \InstagramAPI\Response\ConfigureResponse
     *
     * @see Internal::configureSingleVideo() for available metadata fields.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_CALL
                    (
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_VAR)))
        (
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CONDITIONAL
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (AST_CONST))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (SCALAR))))))))
                    (AST_BREAK
                        (NULL)))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (SCALAR)))
                                            (AST_CONST)))
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_THROW
                                            (AST_VAR))))))))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_CALL
                    (
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR)
                (AST_CLOSURE
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR)
                        (AST_CLOSURE_VAR)
                        (AST_CLOSURE_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_ARRAY_ELEM
                                                    (AST_CONDITIONAL
                                                        (AST_BINARY_OP
                                                            (AST_VAR)
                                                            (AST_CONST))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (SCALAR)))))))))))))
    (AST_RETURN
        (AST_VAR)))