    public function archiveMedia(
        $mediaId,
        $mediaType,
        $onlyMe)
    {
        switch ($mediaType) {
            case 'photo':
                $mediaCode = 1;
                break;
            case 'video':
                $mediaCode = 2;
                break;
            case 'album':
                $mediaCode = 8;
            default:
                throw new \InvalidArgumentException('You must provide a valid media type.');
                break;
        }

        if ($onlyMe) {
            $endpoint = 'only_me';
        } else {
            $endpoint = 'undo_only_me';
        }

        return $this->request("media/{$mediaId}/{$endpoint}/?media_type={$mediaCode}")
        ->addPost('_uuid', $this->uuid)
        ->addPost('_uid', $this->account_id)
        ->addPost('_csrftoken', $this->token)
        ->addPost('media_id', $mediaId)
        ->getResponse(new Response\ArchiveMediaResponse());
    }

    /**
     * Tag a user in a media item.
     *
     * @param string      $mediaId     The media ID in Instagram's internal format (ie "3482384834_43294").
     * @param string      $userId      Numerical UserPK ID.
     * @param array|float $position    Position relative to image where the tag should sit. Example: [0.4890625,0.6140625]
     * @param string      $captionText Caption text.
     *
     * @throws \InstagramAPI\Exception\InstagramException
     *
     * @return \InstagramAPI\Response\EditMediaResponse
     */
||||||||    public function archiveMedia(
        $mediaId,
        $mediaType,
        $onlyMe)
    {
        switch ($mediaType) {
            case 'photo':
                $mediaCode = 1;
                break;
            case 'video':
                $mediaCode = 2;
                break;
            case 'album':
                $mediaCode = 8;
            default:
                throw new \InvalidArgumentException('You must provide a valid media type.');
                break;
        }

        if ($onlyMe) {
            $endpoint = 'only_me';
        } else {
            $endpoint = 'undo_only_me';
        }

        return $this->request("media/{$mediaId}/{$endpoint}/?media_type={$mediaCode}")
        ->addPost('_uuid', $this->uuid)
        ->addPost('_uid', $this->account_id)
        ->addPost('_csrftoken', $this->client->getToken())
        ->addPost('media_id', $mediaId)
        ->getResponse(new Response\ArchiveMediaResponse());
    }

    /**
     * Tag a user in a media item.
     *
     * @param string      $mediaId     The media ID in Instagram's internal format (ie "3482384834_43294").
     * @param string      $userId      Numerical UserPK ID.
     * @param array|float $position    Position relative to image where the tag should sit. Example: [0.4890625,0.6140625]
     * @param string      $captionText Caption text.
     *
     * @throws \InstagramAPI\Exception\InstagramException
     *
     * @return \InstagramAPI\Response\EditMediaResponse
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_NEW)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (SCALAR))))
                    (AST_BREAK
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))))
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))))
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_NEW)))))