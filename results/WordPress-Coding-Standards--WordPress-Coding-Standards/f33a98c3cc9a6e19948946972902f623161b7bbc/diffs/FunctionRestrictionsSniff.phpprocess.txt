	public function process( PHP_CodeSniffer_File $phpcsFile, $stackPtr )
	{
		$tokens = $phpcsFile->getTokens();

		$token = $tokens[$stackPtr];

		// exclude function definitions, class methods, and namespaced calls
		if (
			$token['code'] == T_STRING
			&&
			( $prev = $phpcsFile->findPrevious( T_WHITESPACE, $stackPtr - 1, null, true ) )
			&&
			(
				// Skip sniffing if calling a method, or on function definitions
				in_array( $tokens[$prev]['code'], array( T_FUNCTION, T_DOUBLE_COLON, T_OBJECT_OPERATOR ) )
				||
				(
					// Skip namespaced functions, ie: \foo\bar() not \bar()
					$tokens[$prev]['code'] == T_NS_SEPARATOR
					&&
					( $pprev = $phpcsFile->findPrevious( T_WHITESPACE, $prev - 1, null, true ) )
					&&
					$tokens[$pprev]['code'] == T_STRING
				)
			)
			) {
			return;
		}

		$exclude = explode( ',', $this->exclude );

		$groups = $this->getGroups();

		if ( empty( $groups ) ) {
			return;
		}

		foreach ( $groups as $groupName => $group ) {

			if ( in_array( $groupName, $exclude ) ) {
				continue;
			}

			$functions = implode( '|', $group['functions'] );
			$functions = preg_replace( '#[^\.]\*#', '.*', $functions ); // So you can use * instead of .*

			if ( preg_match( '#\b(' . $functions . ')\b#', $token['content'] ) < 1 ) {
				continue;
			}

			if ( $group['type'] == 'warning' ) {
				$addWhat = array( $phpcsFile, 'addWarning' );
			} else {
				$addWhat = array( $phpcsFile, 'addError' );
			}

			call_user_func(
				$addWhat,
				$group['message'],
				$stackPtr,
				$groupName,
				array( $token['content'] )
				);

		}

	}//end process()


}//end class||||||||	public function process( PHP_CodeSniffer_File $phpcsFile, $stackPtr )
	{
		$tokens = $phpcsFile->getTokens();

		$token = $tokens[$stackPtr];

		// exclude function definitions, class methods, and namespaced calls
		if (
			$token['code'] == T_STRING
			&&
			( $prev = $phpcsFile->findPrevious( T_WHITESPACE, $stackPtr - 1, null, true ) )
			&&
			(
				// Skip sniffing if calling a method, or on function definitions
				in_array( $tokens[$prev]['code'], array( T_FUNCTION, T_DOUBLE_COLON, T_OBJECT_OPERATOR ) )
				||
				(
					// Skip namespaced functions, ie: \foo\bar() not \bar()
					$tokens[$prev]['code'] == T_NS_SEPARATOR
					&&
					( $pprev = $phpcsFile->findPrevious( T_WHITESPACE, $prev - 1, null, true ) )
					&&
					$tokens[$pprev]['code'] == T_STRING
				)
			)
			) {
			return;
		}

		$exclude = explode( ',', $this->exclude );

		$groups = $this->getGroups();

		if ( empty( $groups ) ) {
			return count( $tokens ) + 1;
		}

		foreach ( $groups as $groupName => $group ) {

			if ( in_array( $groupName, $exclude ) ) {
				continue;
			}

			$functions = implode( '|', $group['functions'] );
			$functions = preg_replace( '#[^\.]\*#', '.*', $functions ); // So you can use * instead of .*

			if ( preg_match( '#\b(' . $functions . ')\b#', $token['content'] ) < 1 ) {
				continue;
			}

			if ( $group['type'] == 'warning' ) {
				$addWhat = array( $phpcsFile, 'addWarning' );
			} else {
				$addWhat = array( $phpcsFile, 'addError' );
			}

			call_user_func(
				$addWhat,
				$group['message'],
				$stackPtr,
				$groupName,
				array( $token['content'] )
				);

		}

	}//end process()


}//end class||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST)
                                (AST_CONST)))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL)))))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CONST))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_CONST)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CONST)
                                        (AST_CONST)))))
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CONST)))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (NULL))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST)
                                (AST_CONST)))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL)))))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CONST))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_CONST)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CONST)
                                        (AST_CONST)))))
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CONST)))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (NULL))))))))