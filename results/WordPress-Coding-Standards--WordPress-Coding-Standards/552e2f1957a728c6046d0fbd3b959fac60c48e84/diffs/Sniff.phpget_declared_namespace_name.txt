||||||||	public function get_declared_namespace_name( $stackPtr ) {

		// Check for the existence of the token.
		if ( false === $stackPtr || ! isset( $this->tokens[ $stackPtr ] ) ) {
			return false;
		}

		if ( T_NAMESPACE !== $this->tokens[ $stackPtr ]['code'] ) {
			return false;
		}

		if ( T_NS_SEPARATOR === $this->tokens[ ( $stackPtr + 1 ) ]['code'] ) {
			// Not a namespace declaration, but use of, i.e. `namespace\someFunction();`.
			return false;
		}

		$nextToken = $this->phpcsFile->findNext( PHP_CodeSniffer_Tokens::$emptyTokens, ( $stackPtr + 1 ), null, true, null, true );
		if ( T_OPEN_CURLY_BRACKET === $this->tokens[ $nextToken ]['code'] ) {
			// Declaration for global namespace when using multiple namespaces in a file.
			// I.e.: `namespace {}`.
			return '';
		}

		// Ok, this should be a namespace declaration, so get all the parts together.
		$validTokens = array(
			T_STRING       => true,
			T_NS_SEPARATOR => true,
			T_WHITESPACE   => true,
		);

		$namespaceName = '';
		while ( isset( $validTokens[ $this->tokens[ $nextToken ]['code'] ] ) ) {
			$namespaceName .= trim( $this->tokens[ $nextToken ]['content'] );
			$nextToken++;
		}

		return $namespaceName;
	}

	/**
	 * Check if a content string contains a specific html open tag.
	 *
	 * {@internal For PHP 5.3+ this is straightforward, just check if $content
	 * contains the tag.
	 * PHP 5.2 however, creates a separate token for `<s` when used in inline HTML,
	 * so in that case we need to check that the next token starts with the rest
	 * of the tag.
	 * I.e. PHP 5.2 tokenizes the inline HTML `text <span>text</span> text` as:
	 * - T_INLINE_HTML 'text'
	 * - T_INLINE_HTML '<s'
	 * - T_INLINE_HTML 'pan>text</span> text'
	 *
	 * We don't need to worry about checking the rest of the content of the next
	 * token as sniffs using this function will be sniffing for all text string
	 * tokens, so the next token will be passed to the sniff in the next iteration
	 * and checked then.
	 * Similarly, no need to check content before the '<s' as the bug will break up the
	 * inline html to several string tokens if it plays up.}}
	 *
	 * @link  https://bugs.php.net/bug.php?id=48446
	 *
	 * @since 0.11.0
	 *
	 * @param string $tag_name The name of the HTML tag without brackets. So if
	 *                         searching for '<span...', this would be 'span'.
	 * @param int    $stackPtr The position of the current token in the token stack.
	 * @param string $content  Optionally, the current content string, might be a
	 *                         substring of the original string.
	 *                         Defaults to `false` to distinguish between a passed
	 *                         empty string and not passing the $content string.
	 *
	 * @return bool True if the string contains an <tag_name> open tag, false otherwise.
	 */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_ISSET
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_PROP)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST)
                (AST_CONST)
                (AST_CONST)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CONST)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_ISSET
            (AST_DIM
                (AST_VAR)
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR))))
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (SCALAR)))))
            (AST_POST_INC
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))