public static function loadLanguage($language = "")
{
	// Clear the currently loaded definitions.
	self::$definitions = array();

	// If the specified language doesn't exist, use the default language.
	self::$language = file_exists(PATH_LANGUAGES."/".sanitizeFileName($language)."/definitions.php") ? $language : C("esoTalk.language");

	// Load the main definitions file.
	$languagePath = PATH_LANGUAGES."/".sanitizeFileName(self::$language);
	self::loadDefinitions("$languagePath/definitions.php");

	// Loop through the loaded plugins and include their definition files, if they exist.
	foreach (C("esoTalk.enabledPlugins") as $plugin) {
		if (file_exists($file = "$languagePath/definitions.".sanitizeFileName($plugin).".php"))
			self::loadDefinitions($file);
	}
}


/**
 * Load definitions from a language file into the definitions array.
 *
 * @param string $file The file to load definitions from.
 * @return void
 */
||||||||public static function loadLanguage($language = "")
{
	// Clear the currently loaded definitions.
	self::$definitions = array();

	// If the specified language doesn't exist, use the default language.
	self::$language = file_exists(PATH_LANGUAGES."/".sanitizeFileName($language)."/definitions.php") ? $language : C("esoTalk.language");

	// Load the main definitions file.
	$languagePath = PATH_LANGUAGES."/".sanitizeFileName(self::$language);
	self::loadDefinitions("$languagePath/definitions.php");

	// Loop through the loaded plugins and include their definition files, if they exist.
	foreach (C("esoTalk.enabledPlugins") as $plugin) {
		if (file_exists($file = "$languagePath/definitions.".sanitizeFileName($plugin).".php"))
			self::loadDefinitions($file);
	}

	// Re-define runtime definitions.
	foreach (self::$runtimeDefinitions as $k => $v)
		ET::define($k, $v);
}


/**
 * Load definitions from a language file into the definitions array.
 *
 * @param string $file The file to load definitions from.
 * @return void
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))))
            (AST_VAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))
            (AST_CALL
                (
                    (AST_STATIC_PROP)))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (SCALAR)))))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))))
            (AST_VAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))
            (AST_CALL
                (
                    (AST_STATIC_PROP)))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (SCALAR)))))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR))))))