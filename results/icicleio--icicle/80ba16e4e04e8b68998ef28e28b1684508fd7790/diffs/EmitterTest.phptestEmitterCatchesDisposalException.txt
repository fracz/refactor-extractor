    public function testEmitterCatchesDisposalException()
    {
        $emitter = new Emitter(function (callable $emit) {
            try {
                yield $emit(new Delayed());
            } catch (DisposedException $exception) {
                yield $emit(1); // Should throw again.
            }

            $this->fail('Emitting after disposal should throw.');
        });

        $awaitable = new Coroutine($emitter->each($this->createCallback(0)));

        Loop\tick(false);

        $emitter->dispose();

        $awaitable->wait();
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_TRY
                            (
                                (AST_YIELD
                                    (AST_CALL
                                        (AST_VAR)
                                        (
                                            (AST_NEW)))
                                    (NULL)))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_YIELD
                                            (AST_CALL
                                                (AST_VAR)
                                                (
                                                    (SCALAR)))
                                            (NULL)))))
                            (NULL))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))))
    (AST_CALL
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||