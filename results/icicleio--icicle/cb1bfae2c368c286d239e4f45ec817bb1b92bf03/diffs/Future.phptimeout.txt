||||||||    public function timeout($timeout, $reason = null)
    {
        if (null !== $this->result) {
            return $this->unwrap()->timeout($timeout, $reason);
        }

        ++$this->children;

        $timer = Loop\timer($timeout, function () use ($reason) {
            if (!$reason instanceof Exception) {
                $reason = new TimeoutException($reason);
            }
            $this->cancel($reason);
        });

        $future = new self(function (Exception $exception) use (&$timer) {
            $timer->stop();

            if (0 === --$this->children) {
                $this->cancel($exception);
            }
        });

        $onResolved = function () use ($future, $timer) {
            $future->resolve($this->result);
            $timer->stop();
        };

        $this->done($onResolved, $onResolved);

        return $future;
    }

    /**
     * {@inheritdoc}
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_PRE_INC
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CLOSURE
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_INSTANCEOF
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_NEW
                                            (
                                                (AST_VAR)))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PRE_DEC
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))