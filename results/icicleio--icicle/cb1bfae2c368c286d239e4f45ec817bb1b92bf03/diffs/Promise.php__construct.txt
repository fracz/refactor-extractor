    public function __construct(callable $resolver)
    {
        /**
         * Resolves the promise with the given promise or value. If another promise, this promise takes
         * on the state of that promise. If a value, the promise will be fulfilled with that value.
         *
         * @param mixed $value A promise can be resolved with anything other than itself.
         */
        $resolve = function ($value = null) {
            if ($value instanceof Thenable) {
                $value = $value->unwrap();
                if ($this === $value) {
                    $value = new RejectedPromise(
                        new CircularResolutionError('Circular reference in promise resolution chain.')
                    );
                }
            } else {
                $value = new FulfilledPromise($value);
            }

            $this->resolve($value);
        };

        /**
         * Rejects the promise with the given exception.
         *
         * @param mixed $reason
         */
        $reject = function ($reason = null) {
            $this->resolve(new RejectedPromise($reason));
        };

        try {
            $this->onCancelled = $resolver($resolve, $reject);
            if (null !== $this->onCancelled && !is_callable($this->onCancelled)) {
                throw new InvalidResolverError('The resolver must return a callable or null.');
            }
        } catch (Exception $exception) {
            $reject($exception);
        }
    }

    /**
     * Resolves this promise with the given promise if this promise is still pending.
     *
     * @param \Icicle\Promise\Thenable $result
     */
||||||||    public function __construct(callable $resolver)
    {
        /**
         * Resolves the promise with the given promise or value. If another promise, this promise takes
         * on the state of that promise. If a value, the promise will be fulfilled with that value.
         *
         * @param mixed $value A promise can be resolved with anything other than itself.
         */
        $resolve = function ($value = null) {
            $this->resolve($value);
        };

        /**
         * Rejects the promise with the given exception.
         *
         * @param mixed $reason
         */
        $reject = function ($reason = null) {
            $this->reject($reason);
        };

        try {
            $onCancelled = $resolver($resolve, $reject);
            if (null !== $onCancelled && !is_callable($onCancelled)) {
                throw new InvalidResolverError('The resolver must return a callable or null.');
            }
            parent::__construct($onCancelled);
        } catch (Exception $exception) {
            $reject($exception);
        }
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPEPARAM_DEFAULT)
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (
                                                    (AST_NEW
                                                        (
                                                            (SCALAR)))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPEPARAM_DEFAULT)
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR))))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPEPARAM_DEFAULT)
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPEPARAM_DEFAULT)
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_VAR))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_STATIC_CALL
                (
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (NULL)))