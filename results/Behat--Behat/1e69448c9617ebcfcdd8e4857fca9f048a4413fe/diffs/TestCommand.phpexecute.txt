    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $featuresPath = realpath($input->getArgument('features'));

        // Find features path
        if (is_dir($featuresPath . '/features')) {
            $basePath = $featuresPath . '/features';
        } elseif (is_file($featuresPath)) {
            $basePath = dirname($featuresPath);
        } else {
            $basePath = $featuresPath;
        }

        // Configure DIC
        $container = new ServiceContainer();
        $container->setParameter('i18n.path',           realpath(__DIR__ . '/../../../../../i18n'));
        $container->setParameter('filter.tags',         $input->getOption('tags'));
        $container->setParameter('features.file',       $featuresPath);
        $container->setParameter('features.path',       $basePath);
        $container->setParameter('steps.path',          $basePath . '/steps');
        $container->setParameter('environment.file',    $basePath . '/support/env.php');
        $container->setParameter('formatter.output',    $output);
        $container->setParameter('formatter.verbose',   $input->getOption('verbose'));
        $container->setParameter('formatter.name',      ucfirst($input->getOption('format')));

        // Check if we had redundant definitions
        try {
            $container->getStepsLoaderService();
        } catch (Redundant $e) {
            $output->write(sprintf("\033[31m%s\033[0m",
                strtr($e->getMessage(), array($basePath . '/' => ''))
            ), true, 1);
            return 1;
        }

        // Get features loader, run test suite & return exit code
        return $container->
            getFeaturesLoaderService()->
            getFeaturesRunner()->
            run();
    }
}||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $featuresPath   = realpath($input->getArgument('features'));
        $featureFile    = null;

        // Find features path
        if (is_dir($featuresPath . '/features')) {
            $featuresPath = $featuresPath . '/features';
        } elseif (is_file($featuresPath)) {
            $featureFile    = $featuresPath;
            $featuresPath   = dirname($featuresPath);
        }

        // Load container
        $container  = new ContainerBuilder();
        $xmlLoader  = new XmlFileLoader($container);
        $xmlLoader->load(__DIR__ . '/../../ServiceContainer/container.xml');

        // Init default parameters
        $container->set('output',                       $output);
        $container->setParameter('features.file',       $featureFile);
        $container->setParameter('features.path',       $featuresPath);
        $container->setParameter('filter.tags',         $input->getOption('tags'));
        $container->setParameter('formatter.verbose',   $input->getOption('verbose'));
        $container->setParameter('formatter.name',      $input->getOption('format'));
        $container->setParameter('i18n.path',           realpath(__DIR__ . '/../../../../../i18n'));

        // Load external config file (behat.(xml/yml))
        if (is_file(($cwd = getcwd()) . '/behat.xml')) {
            $xmlLoader->import($cwd . '/behat.xml');
        } elseif (is_file($cwd . '/behat.yml')) {
            $yamlLoader = new YamlFileLoader($container);
            $yamlLoader->import($cwd . '/behat.yml');
        }

        // Fill embed parameter holders
        $container->setParameter('formatter.name',
            ucfirst($container->getParameter('formatter.name'))
        );
        foreach ($container->getParameterBag()->all() as $key => $value) {
            $container->setParameter($key,
                preg_replace_callback('/%%([^%]+)%%/', function($matches) use($container) {
                    return $container->getParameter($matches[1]);
                }
              , $value
            ));
        }

        // Check if we had redundant definitions
        try {
            $container->getStepsLoaderService();
        } catch (Redundant $e) {
            $output->write(sprintf("\033[31m%s\033[0m",
                strtr($e->getMessage(), array($basePath . '/' => ''))
            ), true, 1);
            return 1;
        }

        // Get features loader, run test suite & return exit code
        return $container->
            getFeaturesLoaderService()->
            getFeaturesRunner()->
            run();
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_MAGIC_CONST)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))))))))
                            (AST_CONST)
                            (SCALAR)))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_MAGIC_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_MAGIC_CONST)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL))
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CLOSURE
                                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                (AST_CLOSURE_USES
                                    (AST_CLOSURE_VAR))
                                (
                                    (AST_RETURN
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR)))))))
                            (AST_VAR)))))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))))))))
                            (AST_CONST)
                            (SCALAR)))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))))))