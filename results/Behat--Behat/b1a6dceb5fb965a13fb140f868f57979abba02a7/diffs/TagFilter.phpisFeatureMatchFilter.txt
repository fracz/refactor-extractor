||||||||    public function isFeatureMatchFilter(FeatureNode $feature, $filter = null)
    {
        return $this->isClosuresMatchFilter(
            function($tag) use ($feature) {
                return $feature->hasTag($tag);
            }
          , function($tag) use ($feature) {
                return !$feature->hasTag($tag);
            }
          , null !== $filter ? $filter : $this->filterString
        );
    }

    /**
     * Check If Scenario Or Outline Matches Specified Filter.
     *
     * @param   ScenarioNode|OutlineNode    $scenario   scenario or outline
     * @param   string                      $filter     filter string (optional)
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_RETURN
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_VAR))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))))