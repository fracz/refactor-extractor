    protected function write($string = '', $result = null, $newline = true)
    {
        $string = $this->colorize($string, $result);

        $event  = new Event($this, 'behat.output.write', array('string' => $string, 'newline' => $newline));
        $this->getDispatcher()->notify($event);
    }

    /**
     * Return result code for custom status.
     *
     * @param   string  $status status (passed/skipped/failed etc.)
     *
     * @return  integer         result code
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_VAR))))||||||||