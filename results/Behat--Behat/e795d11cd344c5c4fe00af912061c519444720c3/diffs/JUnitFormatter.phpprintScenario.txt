    public function printScenario(Event $event)
    {
        $scenario = $event->getSubject();

        $className  = $scenario->getFeature()->getTitle() . '.' . $scenario->getTitle();
        $name       = $scenario->getTitle();
        $time       = $this->container->get('behat.statistics_collector')->getLastScenarioTime();

        $this->testsCount       += 1;
        $this->failuresCount    += 0 < $event->get('result') ? 1 : 0;
        $this->totalTime        += $time;

        $this->xml .= sprintf('<testcase clasname="%s" name="%s" time="%f">' . "\n", $className, $name, $time);
        foreach ($this->scenarioExceptions as $exception) {
            $this->xml .= sprintf(
                '<failure message="%s" type="%s"><![CDATA[%s]]></failure>' . "\n"
              , htmlspecialchars($exception->getMessage())
              , $this->statuses[$event->get('result')]
              , $exception
            );
        }
        $this->xml .= '</testcase>' . "\n";

        $this->scenarioExceptions = array();
    }

    /**
      * Listen to `step.run.after` event & collect step information.
      *
      * @param   Event   $event  notified event
      */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR))
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))
                        (AST_VAR))))))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY)))||||||||