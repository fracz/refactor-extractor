    public function printFeatureHeader(Event $event)
    {
        $feature = $event->getSubject();

        $this->html .= '<div class="feature">';

        // Print tags if had ones
        $this->html .= $this->getTagsHtml($feature);

        // Print feature header
        $this->html .= '<h2>';
        $this->html .= $this->getKeywordHtml('Feature', $feature->getLocale());
        $this->html .= $this->getTitleHtml($feature->getTitle());
        $this->html .= '</h2>';

        // Print feature description
        if ($feature->hasDescription()) {
            $this->html .= '<p>';
            foreach ($feature->getDescription() as $line) {
                $this->html .= htmlspecialchars($line) . '<br/>';
            }
            $this->html .= '</p>';
        }

        // Run fake background to test if it runs without errors & print it output
        if ($feature->hasBackground()) {
            $this->container->get('behat.statistics_collector')->pause();

            $environment = $this->container->get('behat.environment_builder')->buildEnvironment();

            // Fire `scenario.before` hooks for 1st scenario
            $scenarios = $feature->getScenarios();
            $this->container->get('behat.hooks_container')->fireScenarioHooks(
                new Event($scenarios[0], 'scenario.run.before', array('environment' => $environment))
            );

            // Run fake background
            $tester = $this->container->get('behat.background_tester');
            $tester->setEnvironment($environment);
            $feature->getBackground()->accept($tester);

            $this->container->get('behat.statistics_collector')->resume();
            $this->backgroundPrinted = true;
        }
    }

    /**
     * Listen to `feature.run.after` event & print feature footer.
     *
     * @param   Event   $event  notified event
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (SCALAR)))))
                (AST_ASSIGN_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (
                        (AST_NEW
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))))))||||||||