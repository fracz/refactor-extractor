    public function load($paths)
    {
        $this->dispatcher->notify(new Event($this, 'steps.load.before'));

        $steps = $this;
        foreach ((array) $paths as $path) {
            if (is_dir($path)) {
                $finder = new Finder();
                foreach ($finder->files()->name('*.php')->in($path) as $definitionFile) {
                    require $definitionFile;
                }
            }
        }

        $this->dispatcher->notify(new Event($this, 'steps.load.after'));
    }

    /**
     * Define argument transformation to container.
     *
     * @param   string      $regex      regex to argument for transformation
     * @param   callback    $callback   transformation callback (returns transformed argument)
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_FOREACH
        (AST_CAST
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW))
                        (AST_FOREACH
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR)))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_INCLUDE_OR_EVAL
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR))))))||||||||