    protected function configure()
    {
        $this->container = new ContainerBuilder();

        $this->setName('behat');
        $this->setProcessors(array(
            new Processor\ContainerProcessor(),
            new Processor\LocatorProcessor(),
            new Processor\InitProcessor(),
            new Processor\ContextProcessor(),
            new Processor\FormatProcessor(),
            new Processor\HelpProcessor(),
            new Processor\GherkinProcessor(),
            new Processor\RerunProcessor(),
        ));

        $this->addArgument('features', InputArgument::OPTIONAL,
            'Feature(s) to run. Could be a dir (<comment>features/</comment>), ' .
            'a feature (<comment>*.feature</comment>) or a scenario at specific line ' .
            '(<comment>*.feature:10</comment>).'
        );
        $this->configureProcessors();
        $this->addOption('--strict', null, InputOption::VALUE_NONE,
            '       ' .
            'Fail if there are any undefined or pending steps.'
        );
    }

    /**
     * {@inheritdoc}
     */
||||||||    protected function configure()
    {
        $this->container = new ContainerBuilder();

        $this
            ->setName('behat')
            ->setProcessors(array(
                new Processor\ContainerProcessor(),
                new Processor\LocatorProcessor(),
                new Processor\InitProcessor(),
                new Processor\ContextProcessor(),
                new Processor\FormatProcessor(),
                new Processor\HelpProcessor(),
                new Processor\GherkinProcessor(),
                new Processor\RerunProcessor(),
            ))
            ->addArgument('features', InputArgument::OPTIONAL,
                'Feature(s) to run. Could be a dir (<comment>features/</comment>), ' .
                'a feature (<comment>*.feature</comment>) or a scenario at specific line ' .
                '(<comment>*.feature:10</comment>).'
            )
            ->configureProcessors()
            ->addOption('--strict', null, InputOption::VALUE_NONE,
                'Fail if there are any undefined or pending steps.'
            )
        ;
    }

    /**
     * {@inheritdoc}
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONST)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_NEW)
                                (NULL)))))
                (
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR))
                        (SCALAR)))))
        (
            (SCALAR)
            (AST_CONST)
            (AST_CLASS_CONST
                (SCALAR))
            (SCALAR))))