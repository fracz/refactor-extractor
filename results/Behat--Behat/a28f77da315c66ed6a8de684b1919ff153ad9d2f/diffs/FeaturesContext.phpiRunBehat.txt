    public function iRunBehat($command)
    {
        $php     = 0 === mb_strpos(BEHAT_PHP_BIN_PATH, '/usr/bin/env')
                 ? BEHAT_PHP_BIN_PATH
                 : escapeshellarg(BEHAT_PHP_BIN_PATH);
        $command = strtr($command, array('\'' => '"'));

        exec($php . ' ' . escapeshellarg(BEHAT_BIN_PATH) . ' --no-time --no-colors ' . $command, $output, $return);

        $this->command = $command;
        $this->output  = trim(implode("\n", $output));
        $this->return  = $return;
    }

    /**
     * @Then /^it should (fail|pass) with:$/
     */
||||||||    public function iRunBehat($command)
    {
        $php     = 0 === mb_strpos(BEHAT_PHP_BIN_PATH, '/usr/bin/env')
                 ? BEHAT_PHP_BIN_PATH
                 : escapeshellarg(BEHAT_PHP_BIN_PATH);
        $command = strtr($command, array('\'' => '"'));

        exec($php . ' ' . escapeshellarg(BEHAT_BIN_PATH) . ' --no-time --no-colors ' . $command, $output, $return);

        $this->command = $command;
        $this->output  = trim(implode("\n", $output));
        $this->return  = $return;
    }

    /**
     * @Then /^it should (fail|pass) with:$/
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_CONST)
                        (SCALAR))))
            (AST_CONST)
            (AST_CALL
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CALL
                            (
                                (AST_CONST))))
                    (SCALAR))
                (AST_VAR))
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_CONST)
                        (SCALAR))))
            (AST_CONST)
            (AST_CALL
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_CALL
                            (
                                (AST_CONST))))
                    (SCALAR))
                (AST_VAR))
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))