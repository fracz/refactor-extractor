    public function compile($version)
    {
        if (file_exists($package = "behat-$version.phar")) {
            unlink($package);
        }

        // create phar
        $phar = new \Phar($package, 0, 'behat.phar');
        $phar->setSignatureAlgorithm(\Phar::SHA1);
        $phar->startBuffering();

        $finder = new Finder();
        $finder->files()
            ->ignoreVCS(true)
            ->name('*.php')
            ->name('*.xsd')
            ->name('*.xml')
            ->name('LICENSE')
            ->notName('PharCompiler.php')
            ->notName('PearCompiler.php')
            ->in($this->libPath . '/src')
            ->in($this->libPath . '/vendor');

        foreach ($finder as $file) {
            // don't compile test suites
            if (!preg_match('/\/tests\/|\/test\//i', $file->getRealPath())) {
                $this->addFileToPhar($file, $phar);
            }
        }

        // license and autoloading
        $this->addFileToPhar(new \SplFileInfo($this->libPath . '/LICENSE'), $phar);
        $this->addFileToPhar(new \SplFileInfo($this->libPath . '/i18n.php'), $phar);

        // stub
        $phar->setStub($this->getStub($version));
        $phar->stopBuffering();

        unset($phar);
    }

    /**
     * Adds a file to phar archive.
     *
     * @param SplFileInfo $file file info
     * @param Phar        $phar phar packager
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (AST_CONST)))
                                    (
                                        (SCALAR)))
                                (
                                    (SCALAR)))
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR)))
                (
                    (SCALAR)))
            (
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_UNSET
        (AST_VAR)))||||||||