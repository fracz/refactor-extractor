    protected function configureDefinitionsTranslations(InputInterface $input, ContainerInterface $container)
    {
        $translator = $container->get('behat.translator');

        foreach ((array) $container->getParameter('behat.paths.steps_i18n') as $path) {
            $path = $this->preparePath($path);

            if (is_dir($path)) {
                $finder = new Finder();
                $files  = $finder->files()->name('*.xliff')->in($path);

                foreach ($files as $file) {
                    $translator->addResource('xliff', $file, basename($file, '.xliff'), 'behat.definitions');
                }
            }
        }

        return $translator;
    }

    /**
     * Configures hook dispatcher with provided input.
     *
     * @param   Symfony\Component\Console\Input\InputInterface              $input      input instance
     * @param   Symfony\Component\DependencyInjection\ContainerInterface    $container  service container
     *
     * @return  Behat\Behat\Hook\HookDispatcher
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_CAST
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR)))
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||