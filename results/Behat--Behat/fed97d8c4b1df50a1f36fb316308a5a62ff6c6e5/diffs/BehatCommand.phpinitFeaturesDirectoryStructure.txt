||||||||    protected function initFeaturesDirectoryStructure(PathLocator $locator, OutputInterface $output)
    {
        $basePath       = getcwd() . ('/' === DIRECTORY_SEPARATOR ? '/' : '');
        $featuresPath   = $locator->getFeaturesPath();
        $supportPath    = $locator->getSupportPath();
        $stepsPath      = current($locator->locateDefinitionsPaths(false));
        $envPath        = current($locator->locateEnvironmentConfigsPaths(false));
        $bootPath       = current($locator->locateBootstrapsPaths(false));

        if (!is_dir($featuresPath)) {
            mkdir($featuresPath, 0777, true);
            $output->writeln(
                '<info>+d</info> ' .
                str_replace($basePath, '', $featuresPath) .
                ' <comment>⎯ place your *.feature files here</comment>'
            );
        }

        if (!is_dir($stepsPath)) {
            mkdir($stepsPath, 0777, true);
            $output->writeln(
                '<info>+d</info> ' .
                str_replace($basePath, '', $stepsPath) .
                ' <comment>⎯ place step definition files here</comment>'
            );

            file_put_contents($stepsPath . DIRECTORY_SEPARATOR . 'steps.php', <<<DEFINITIONS
<?php

/**
 * Define your steps here with:
 *
 *     \$steps->Given('/REGEX/', function(\$world) {
 *         // do something or throw exception
 *     });
 */


DEFINITIONS
            );
            $output->writeln(
                '<info>+f</info> ' .
                str_replace($basePath, '', $stepsPath) . DIRECTORY_SEPARATOR . 'steps.php' .
                ' <comment>⎯ place some step definitions in this file</comment>'
            );
        }

        if (!is_dir($supportPath)) {
            mkdir($supportPath, 0777, true);
            $output->writeln(
                '<info>+d</info> ' .
                str_replace($basePath, '', $supportPath) .
                ' <comment>⎯ place support scripts and static files here</comment>'
            );

            file_put_contents($bootPath, <<<BOOTSTRAP
<?php

/**
 * Place bootstrap scripts here:
 *
 *     require_once 'PHPUnit/Autoload.php';
 *     require_once 'PHPUnit/Framework/Assert/Functions.php';
 */


BOOTSTRAP
            );
            $output->writeln(
                '<info>+f</info> ' .
                str_replace($basePath, '', $bootPath) .
                ' <comment>⎯ place bootstrap scripts in this file</comment>'
            );

            file_put_contents($envPath, <<<ENVIRONMENT
<?php

/**
 * Place environment initialization scripts here:
 *
 *     \$world->initialSum = 231;
 *     \$world->calc = function() {
 *         // ...
 *     };
 */


ENVIRONMENT
            );
            $output->writeln(
                '<info>+f</info> ' .
                str_replace($basePath, '', $envPath) .
                ' <comment>⎯ place environment initialization scripts in this file</comment>'
            );
        }
    }

    /**
     * Prints features usage example in specified language (--lang) to the console.
     *
     * @param   Behat\Gherkin\Keywords\KeywordsDumper           $dumper     keywords dumper
     * @param   string                                          $lang       locale name
     * @param   Symfony\Component\Console\Input\OutputInterface $output     output console
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL)
            (AST_CONDITIONAL
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CONST))
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_CONST)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_CONST)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (SCALAR))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_VAR))))
                                    (AST_CONST))
                                (SCALAR))
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_CONST)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR))))
                            (SCALAR))))))))