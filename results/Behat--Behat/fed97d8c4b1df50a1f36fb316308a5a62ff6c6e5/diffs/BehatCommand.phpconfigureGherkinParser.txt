    protected function configureGherkinParser(InputInterface $input, ContainerInterface $container)
    {
        $gherkinParser = $container->get('gherkin');

        if ($name = $input->getOption('name')) {
            $gherkinParser->addFilter(new NameFilter($name));
        } elseif ($name = $container->getParameter('gherkin.filter.name')) {
            $gherkinParser->addFilter(new NameFilter($name));
        }
        if ($tags = $input->getOption('tags')) {
            $gherkinParser->addFilter(new TagFilter($tags));
        } elseif ($filter = $container->getParameter('gherkin.filter.tags')) {
            $gherkinParser->addFilter(new TagFilter($tags));
        }

        return $gherkinParser;
    }

    /**
     * Configures formatter with provided input.
     *
     * @param   Symfony\Component\Console\Input\InputInterface              $input          input instance
     * @param   Symfony\Component\DependencyInjection\ContainerInterface    $container      service container
     * @param   boolean                                                     $isDecorated    is colorized
     *
     * @return  Behat\Behat\Formatter\FormatterInterface
     *
     * @throws  RuntimeException            if provided in input formatter name doesn't exists
     *
     * @uses    setupFormatter()
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||