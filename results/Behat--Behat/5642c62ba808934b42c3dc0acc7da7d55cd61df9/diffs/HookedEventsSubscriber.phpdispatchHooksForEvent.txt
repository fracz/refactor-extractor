    public function dispatchHooksForEvent(LifecycleEvent $event, $eventName)
    {
        $this->eventDispatcher->dispatch(HookDispatched::BEFORE, new HookDispatched($eventName, $event));
        $callResults = $this->hookDispatcher->dispatchEventHooks($eventName, $event);
        $this->eventDispatcher->dispatch(HookDispatched::AFTER, new HookDispatched($eventName, $event, $callResults));

        $this->rethrowException($callResults);
    }

    /**
     * Rethrows exception from provided call results.
     *
     * @param CallResults $callResults
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||