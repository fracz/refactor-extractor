    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $basePath = realpath($input->getArgument('features'));
        $featureFiles = array();

        if (is_dir($basePath.'/features')) {
            $basePath .= '/features';
        } elseif (is_file($basePath)) {
            $featureFiles[] = $basePath;
            $basePath = dirname($basePath);
        }

        // Configure DIC
        $container = new Container();
        $container->setParameter('container',           $container);
        $container->setParameter('output',              $output);
        $container->setParameter('i18n.path',           realpath(__DIR__ . '/../../../../../i18n'));
        $container->setParameter('features.path',       $basePath);
        $container->setParameter('world.file',          $basePath . '/support/env.php');
        $container->setParameter('steps.loader.path',   $basePath . '/steps');
        $container->setParameter('logger.verbose',      $input->getOption('verbose'));

        // Check if we had redundant definitions
        try {
            $container->getSteps_LoaderService();
        } catch (Redundant $e) {
            $output->writeln(sprintf("<failed>%s</failed>",
                strtr($e->getMessage(), array($basePath . '/' => ''))
            ));
            return 1;
        }

        foreach ($container->getFeatures_LoaderService() as $feature) {
            $feature->run();
        }
    }
}||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $basePath = realpath($input->getArgument('features'));
        $featureFiles = array();

        if (is_dir($basePath.'/features')) {
            $basePath .= '/features';
        } elseif (is_file($basePath)) {
            $featureFiles[] = $basePath;
            $basePath = dirname($basePath);
        }

        // Configure DIC
        $container = new Container();
        $container->setParameter('container',           $container);
        $container->setParameter('output',              $output);
        $container->setParameter('i18n.path',           realpath(__DIR__ . '/../../../../../i18n'));
        $container->setParameter('features.path',       $basePath);
        $container->setParameter('world.file',          $basePath . '/support/env.php');
        $container->setParameter('steps.loader.path',   $basePath . '/steps');
        $container->setParameter('logger.verbose',      $input->getOption('verbose'));

        // Check if we had redundant definitions
        try {
            $container->getSteps_LoaderService();
        } catch (Redundant $e) {
            $output->writeln(sprintf("<failed>%s</failed>",
                strtr($e->getMessage(), array($basePath . '/' => ''))
            ));
            return 1;
        }

        $container->
            getFeatures_LoaderService()->
            getFeaturesRunner()->
            run();
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_MAGIC_CONST)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))))))))))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_MAGIC_CONST)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))))))))))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))))