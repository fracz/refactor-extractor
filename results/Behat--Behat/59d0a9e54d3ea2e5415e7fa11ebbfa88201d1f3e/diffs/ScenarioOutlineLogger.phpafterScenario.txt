    public function afterScenario(ScenarioLogger $logger)
    {
        if (0 === $this->scenarioNumber) {
            foreach ($logger->getStepLoggers() as $stepLogger) {
                $runner = $stepLogger->getRunner();
                $description = sprintf('    %s %s',
                    $runner->getSubject()->getType(), $runner->getSubject()->getText()
                );
                $this->output->write(sprintf("\033[36m%s\033[0m", $description), false, 1);
                if (null !== $runner->getDefinition()) {
                    $this->output->writeln($this->helper->getLineSourceComment(
                        mb_strlen($description),
                        $this->getMaxLineLength(),
                        strtr($runner->getDefinition()->getFile(), array(
                            $this->container->getParameter('features.path') . '/' => ''
                        )),
                        $runner->getDefinition()->getLine()
                    ));
                } else {
                    $this->output->writeln('');
                }
            }

            $this->output->writeln(sprintf("\n    %s:",
                $this->outline->getI18n()->__('examples', 'Examples')
            ));

            $this->output->writeln(preg_replace(
                '/|([^|]*)|/',
                '<skipped>$1</skipped>',
                '      ' . $this->examples->getKeysAsString()
            ));
        }
        $this->output->writeln(preg_replace(
            '/|([^|]*)|/',
            sprintf('<%s>$1</%s>', $logger->getStatus(), $logger->getStatus()),
            '      ' . $this->examples->getRowAsString($this->scenarioNumber)
        ));
        foreach ($logger->getExceptions() as $exception) {
            if ($this->verbose) {
                $error = (string) $exception;
            } else {
                $error = $exception->getMessage();
            }
            $this->output->writeln(sprintf("      <failed>%s</failed>",
                strtr($error, array(
                    "\n"    =>  "\n      ",
                    "<"     =>  "[",
                    ">"     =>  "]"
                ))
            ));
        }
        ++$this->scenarioNumber;
    }
}||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_FOREACH
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_CONST)
                                (SCALAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR))
                                                (
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (AST_CALL
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR)))
                                                            (AST_ARRAY
                                                                (AST_ARRAY_ELEM
                                                                    (SCALAR)
                                                                    (AST_BINARY_OP
                                                                        (AST_METHOD_CALL
                                                                            (AST_PROP
                                                                                (AST_VAR))
                                                                            (
                                                                                (SCALAR)))
                                                                        (SCALAR))))))
                                                    (AST_METHOD_CALL
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)))))))))
                            (AST_IF_ELEM
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (SCALAR))))))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (SCALAR)
                                        (SCALAR)))))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))))))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CAST
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (SCALAR)))))))))))
    (AST_PRE_INC
        (AST_PROP
            (AST_VAR))))||||||||