    protected function configure()
    {
        $this->setName('behat');
        $this->setDefinition(array(
            new InputArgument('features',
                InputArgument::OPTIONAL,
                'Feature(s) to run. Could be <info>directory path</info>, <info>single feature path</info> ' .
                'or scenario at specific feature line ("<info>*.feature:10</info>").'
            ),
            new InputOption('--config',         '-c',
                InputOption::VALUE_REQUIRED,
                '  ' .
                'Specify external configuration file to load. ' .
                '<info>behat.yml</info> or <info>config/behat.yml</info> will be used by default.'
            ),
            new InputOption('--out',            null,
                InputOption::VALUE_REQUIRED,
                '          ' .
                'Write formatter output to a file/directory instead of STDOUT.'
            ),
            new InputOption('--name',           '-n',
                InputOption::VALUE_REQUIRED,
                '    ' .
                'Only execute the feature elements (features or scenarios) which match part of the given name or regex.'
            ),
            new InputOption('--tags',           '-t',
                InputOption::VALUE_REQUIRED,
                '    ' .
                'Only execute the features or scenarios with tags matching tag filter expression.'
            ),
            new InputOption('--strict',         '-s',
                InputOption::VALUE_NONE,
                '  ' .
                'Fail if there are any undefined or pending steps.'
            ),


            new InputOption('--init',           null,
                InputOption::VALUE_NONE,
                '         ' .
                'Create features/ directory structure'
            ),
            new InputOption('--usage',          null,
                InputOption::VALUE_NONE,
                '        ' .
                'Print *.feature example in specified language (--lang).'
            ),
            new InputOption('--steps',          null,
                InputOption::VALUE_NONE,
                '        ' .
                'Print available steps in specified language (--lang).'
            ),


            new InputOption('--format',         '-f',
                InputOption::VALUE_REQUIRED,
                '  ' .
                'How to format features (Default: pretty). Available formats is ' .
                '<info>pretty</info>, <info>progress</info>, <info>junit</info>, <info>html</info>.'
            ),
            new InputOption('--colors',         null,
                InputOption::VALUE_NONE,
                '       ' .
                'Force Behat to use ANSI color in the output.'
            ),
            new InputOption('--no-colors',      null,
                InputOption::VALUE_NONE,
                '    ' .
                'Do not use ANSI color in the output.'
            ),
            new InputOption('--no-time',        null,
                InputOption::VALUE_NONE,
                '      ' .
                'Hide time in output.'
            ),
            new InputOption('--lang',           null,
                InputOption::VALUE_REQUIRED,
                '         ' .
                'Print formatter output in particular language.'
            ),
            new InputOption('--no-multiline',   null,
                InputOption::VALUE_NONE,
                ' ' .
                'No multiline arguments in output.'
            ),
        ));
    }

    /**
     * {@inheritdoc}
     *
     * @uses    configureContainer()
     * @uses    printUsageExample()
     * @uses    locateFeaturesPaths()
     * @uses    loadBootstraps()
     * @uses    configureFormatter()
     * @uses    configureGherkinParser()
     * @uses    configureDefinitionDispatcher()
     * @uses    configureHookDispatcher()
     * @uses    configureEnvironmentBuilder()
     * @uses    configureEventDispathcer()
     * @uses    runFeatures()
     */
||||||||    protected function configure()
    {
        $this->setName('behat');
        $this->setDefinition(array(
            new InputArgument('features',
                InputArgument::OPTIONAL,
                'Feature(s) to run. Could be <info>directory path</info>, <info>single feature path</info> ' .
                'or scenario at specific feature line ("<info>*.feature:10</info>").'
            ),
            new InputOption('--config',         '-c',
                InputOption::VALUE_REQUIRED,
                '  ' .
                'Specify external configuration file to load. ' .
                '<info>behat.yml</info> or <info>config/behat.yml</info> will be used by default.'
            ),
            new InputOption('--out',            null,
                InputOption::VALUE_REQUIRED,
                '          ' .
                'Write formatter output to a file/directory instead of STDOUT.'
            ),
            new InputOption('--name',           '-n',
                InputOption::VALUE_REQUIRED,
                '    ' .
                'Only execute the feature elements (features or scenarios) which match part of the given name or regex.'
            ),
            new InputOption('--tags',           '-t',
                InputOption::VALUE_REQUIRED,
                '    ' .
                'Only execute the features or scenarios with tags matching tag filter expression.'
            ),
            new InputOption('--strict',         '-s',
                InputOption::VALUE_NONE,
                '  ' .
                'Fail if there are any undefined or pending steps.'
            ),


            new InputOption('--init',           null,
                InputOption::VALUE_NONE,
                '         ' .
                'Create features/ directory structure'
            ),
            new InputOption('--usage',          null,
                InputOption::VALUE_NONE,
                '        ' .
                'Print *.feature example in specified language (--lang).'
            ),
            new InputOption('--steps',          null,
                InputOption::VALUE_NONE,
                '        ' .
                'Print available steps in specified language (--lang).'
            ),


            new InputOption('--format',         '-f',
                InputOption::VALUE_REQUIRED,
                '  ' .
                'How to format features (Default: pretty). Available formats is ' .
                implode(', ',
                    array_map(function($name) {
                        return "<info>$name</info>";
                    }, array_keys($this->defaultFormatters))
                )
            ),
            new InputOption('--colors',         null,
                InputOption::VALUE_NONE,
                '       ' .
                'Force Behat to use ANSI color in the output.'
            ),
            new InputOption('--no-colors',      null,
                InputOption::VALUE_NONE,
                '    ' .
                'Do not use ANSI color in the output.'
            ),
            new InputOption('--no-time',        null,
                InputOption::VALUE_NONE,
                '      ' .
                'Hide time in output.'
            ),
            new InputOption('--lang',           null,
                InputOption::VALUE_REQUIRED,
                '         ' .
                'Print formatter output in particular language.'
            ),
            new InputOption('--no-multiline',   null,
                InputOption::VALUE_NONE,
                ' ' .
                'No multiline arguments in output.'
            ),
        ));
    }

    /**
     * {@inheritdoc}
     *
     * @uses    configureContainer()
     * @uses    printUsageExample()
     * @uses    locateFeaturesPaths()
     * @uses    loadBootstraps()
     * @uses    configureFormatter()
     * @uses    configureGherkinParser()
     * @uses    configureDefinitionDispatcher()
     * @uses    configureHookDispatcher()
     * @uses    configureEnvironmentBuilder()
     * @uses    configureEventDispathcer()
     * @uses    runFeatures()
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_CLOSURE
                                                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                                    (NULL)
                                                    (
                                                        (AST_RETURN
                                                            (AST_ENCAPS_LIST
                                                                (SCALAR)
                                                                (AST_VAR)
                                                                (SCALAR)))))
                                                (AST_CALL
                                                    (
                                                        (AST_PROP
                                                            (AST_VAR)))))))))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))
                    (NULL))))))