    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $featuresPath   = realpath($input->getArgument('features'));
        $featureFile    = null;

        // Find features path
        if (is_dir($featuresPath . '/features')) {
            $featuresPath = $featuresPath . '/features';
        } elseif (is_file($featuresPath)) {
            $featureFile    = $featuresPath;
            $featuresPath   = dirname($featuresPath);
        }

        // Set container parameters
        $this->container->set('output',                     $output);
        $this->container->setParameter('features.path',     $featuresPath);
        $this->container->setParameter('features.file',     $featureFile);
        $this->container->setParameter('formatter.name',    $input->getOption('format'));
        $this->container->setParameter('filter.tags',       $input->getOption('tags'));
        $this->container->setParameter('formatter.verbose', $input->getOption('verbose'));

        // Fill embed parameter holders
        $this->container->setParameter('formatter.name',
            ucfirst($this->container->getParameter('formatter.name'))
        );
        foreach ($this->container->getParameterBag()->all() as $key => $value) {
            $compiled   = array();
            $container  = $this->container;
            foreach ((array) $value as $i => $item) {
                $compiled[$i] =
                    preg_replace_callback('/%%([^%]+)%%/', function($matches) use($container) {
                        return $container->getParameter($matches[1]);
                    }, $item);
            }
            if (!isset($compiled[0])) {
                $compiled[0] = $value;
            }
            $this->container->setParameter($key, is_array($value) ? $compiled : $compiled[0]);
        }

        // Load & bind hooks
        $this->container->getHooksLoaderService();

        // Check if we had redundant definitions
        try {
            $this->container->getStepsLoaderService();
        } catch (Redundant $e) {
            $output->write(sprintf("\033[31m%s\033[0m", strtr($e->getMessage(),
                array($this->container->getParameter('features.path') . '/' => '')
            )), true, 1);
            return 1;
        }

        // Get features loader, run test suite & return exit code
        return $this->container->
            getFeaturesLoaderService()->
            getFeaturesRunner()->
            run();
    }
}||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $featuresPath   = realpath($input->getArgument('features'));
        $featureFile    = null;

        // Find features path
        if (is_dir($featuresPath . '/features')) {
            $featuresPath = $featuresPath . '/features';
        } elseif (is_file($featuresPath)) {
            $featureFile    = $featuresPath;
            $featuresPath   = dirname($featuresPath);
        }

        // Set container parameters
        $this->container->set('output',                     $output);
        $this->container->setParameter('features.file',     $featureFile);
        $this->container->setParameter('features.path',     $featuresPath);
        $this->container->setParameter('formatter.name',    $input->getOption('format'));
        $this->container->setParameter('filter.tags',       $input->getOption('tags'));
        $this->container->setParameter('formatter.verbose', $input->getOption('verbose'));

        // Fill embedded parameter holders
        $this->container->setParameter('formatter.name',
            ucfirst($this->container->getParameter('formatter.name'))
        );
        foreach ($this->container->getParameterBag()->all() as $key => $value) {
            $compiled   = array();
            $container  = $this->container;
            foreach ((array) $value as $i => $item) {
                $compiled[$i] = preg_replace_callback('/%%([^%]+)%%/',
                    function($matches) use($container) {
                        return $container->getParameter($matches[1]);
                    }
                  , $item
                );
            }
            if (!isset($compiled[0])) {
                $compiled[0] = $value;
            }
            $this->container->setParameter($key, is_array($value) ? $compiled : $compiled[0]);
        }

        // Load hooks
        $this->container->
            getHooksLoaderService()->
            load($this->container->getParameter('hooks.file'));

        // Load steps
        try {
            $this->container->
                getStepsLoaderService()->
                load($this->container->getParameter('steps.path'));
        } catch (Redundant $e) {
            $output->write(sprintf("\033[31m%s\033[0m", strtr($e->getMessage(),
                array($this->container->getParameter('features.path') . '/' => '')
            )), true, 1);
            return 1;
        }

        // Load features runner
        $runner = $this->container->
            getFeaturesLoaderService()->
            load(
                is_file($this->container->getParameter('features.file'))
                ? $this->container->getParameter('features.file')
                : $this->container->getParameter('features.path')
            );

        // Run test suite & return exit code
        return $runner->run();
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_FOREACH
                (AST_CAST
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CLOSURE
                                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                    (AST_CLOSURE_USES
                                        (AST_CLOSURE_VAR))
                                    (
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (AST_BINARY_OP
                                                        (AST_METHOD_CALL
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (
                                                                (SCALAR)))
                                                        (SCALAR))))))))
                            (AST_CONST)
                            (SCALAR)))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_FOREACH
                (AST_CAST
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CLOSURE
                                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                    (AST_CLOSURE_USES
                                        (AST_CLOSURE_VAR))
                                    (
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (AST_BINARY_OP
                                                        (AST_METHOD_CALL
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (
                                                                (SCALAR)))
                                                        (SCALAR))))))))
                            (AST_CONST)
                            (SCALAR)))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_CONDITIONAL
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (SCALAR)))))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))