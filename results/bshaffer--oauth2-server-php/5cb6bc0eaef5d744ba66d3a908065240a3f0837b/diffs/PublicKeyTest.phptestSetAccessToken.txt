||||||||    public function testSetAccessToken($storage)
    {
        if (is_null($storage) || !$storage instanceof PublicKeyInterface) {
            return $this->markTestSkipped('Invalid storage for public key test');
        }

        $configDir = Bootstrap::getInstance()->getConfigDir();
        $globalPublicKey  = file_get_contents($configDir.'/keys/id_rsa.pub');
        $globalPrivateKey = file_get_contents($configDir.'/keys/id_rsa');

        /* assert values from storage */
        $this->assertEquals($storage->getPublicKey(), $globalPublicKey);
        $this->assertEquals($storage->getPrivateKey(), $globalPrivateKey);
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR))))