	public static function factory($adapterName, & $dbInfos)
	{
		if($dbInfos['port'][0] == '/')
		{
			$dbInfos['unix_socket'] = $dbInfos['port'];
			unset($dbInfos['host']);
			unset($dbInfos['port']);
		}

		// not used by Zend Framework
		unset($dbInfos['tables_prefix']);
		unset($dbInfos['adapter']);

		$className = self::getAdapterClassName($adapterName);
		$adapter = new $className($dbInfos);
		$adapter->getConnection();

		Zend_Db_Table::setDefaultAdapter($adapter);

		// we don't want this information to appear in the logs
		$adapter->resetConfig();

		return $adapter;
	}

	/**
	 * Get adapter class name
	 *
	 * @param string $adapterName
	 * @return string
	 */
||||||||	public static function factory($adapterName, & $dbInfos)
	{
		if($dbInfos['port'][0] == '/')
		{
			$dbInfos['unix_socket'] = $dbInfos['port'];
			unset($dbInfos['host']);
			unset($dbInfos['port']);
		}

		// not used by Zend Framework
		unset($dbInfos['tables_prefix']);
		unset($dbInfos['adapter']);
		unset($dbInfos['schema']);

		$className = self::getAdapterClassName($adapterName);
		$adapter = new $className($dbInfos);
		$adapter->getConnection();

		Zend_Db_Table::setDefaultAdapter($adapter);

		// we don't want the connection information to appear in the logs
		$adapter->resetConfig();

		return $adapter;
	}

	/**
	 * Get adapter class name
	 *
	 * @param string $adapterName
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))