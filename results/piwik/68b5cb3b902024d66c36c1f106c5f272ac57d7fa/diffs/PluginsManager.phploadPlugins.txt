	public function loadPlugins()
	{
//		$defaultPlugins = array(
//			array( 'fileName' => 'Provider', 'className' => 'Piwik_Plugin_LogStats_Provider' ),
//		//	'Piwik_Plugin_LogStats_UserSettings',
//		);

		foreach($this->pluginsToLoad as $pluginName)
		{
			$pluginFileName = $pluginName . ".php";
			$pluginClassName = "Piwik_".$pluginName;

			// TODO make sure the plugin name is secure
			// make sure thepluigin is a child of Piwik_Plugin
			$path =
//					PIWIK_INCLUDE_PATH
//					. $this->pluginsPath
//					. $this->pluginsCategory
					$pluginFileName;

			if(is_file($path))
			{
				throw new Exception("The plugin file $path couldn't be found.");
			}

			require_once $path;

			if($pluginClassName instanceof Piwik_Plugin)
			{
				throw new Exception("The plugin $pluginClassName in the file $path must inherit from Piwik_Plugin.");
			}
			$newPlugin = new $pluginClassName;


			if($this->doInstallPlugins())
			{
				try{
					$newPlugin->install();
				} catch(Exception $e) {
					//TODO Better plugin management....
				}
			}

			if($this->doLoadPlugins)
			{
				$this->addPluginObservers( $newPlugin );
			}
		}
	}

	/**
	 * For the given plugin, add all the observers of this plugin.
	 */
||||||||	public function loadPlugins()
	{
//		$defaultPlugins = array(
//			array( 'fileName' => 'Provider', 'className' => 'Piwik_Plugin_LogStats_Provider' ),
//		//	'Piwik_Plugin_LogStats_UserSettings',
//		);

		foreach($this->pluginsToLoad as $pluginName)
		{
			$pluginFileName = $pluginName . ".php";
			$pluginClassName = "Piwik_".$pluginName;

			// TODO make sure the plugin name is secure
			// make sure thepluigin is a child of Piwik_Plugin
			$path =
//					PIWIK_INCLUDE_PATH
//					. $this->pluginsPath
//					. $this->pluginsCategory
					$pluginFileName;

			if(is_file($path))
			{
				throw new Exception("The plugin file $path couldn't be found.");
			}

			require_once $path;

			if($pluginClassName instanceof Piwik_Plugin)
			{
				throw new Exception("The plugin $pluginClassName in the file $path must inherit from Piwik_Plugin.");
			}
			$newPlugin = new $pluginClassName;


			if($this->doInstallPlugins())
			{
				try{
					$newPlugin->install();
				} catch(Exception $e) {
					//TODO Better plugin management....
				}
			}

			if($this->doLoadPlugins)
			{

				$newPlugin->registerTranslation( $this->languageToLoad );
				$this->addPluginObservers( $newPlugin );

			}
		}
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_INCLUDE_OR_EVAL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_TRY
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)))
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_INCLUDE_OR_EVAL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_TRY
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)))
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))))))