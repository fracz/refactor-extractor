    public function render()
    {
        $this->overrideSomeConfigPropertiesIfNeeded();

        try {
            $this->beforeLoadDataTable();
            $this->loadDataTableFromAPI();
            $this->postDataTableLoadedFromAPI();

            $requestPropertiesAfterLoadDataTable = $this->requestConfig->getProperties();

            $this->applyFilters();
            $this->addVisualizationInfoFromMetricMetadata();
            $this->afterAllFiltersAreApplied();
            $this->beforeRender();

            $this->logMessageIfRequestPropertiesHaveChanged($requestPropertiesAfterLoadDataTable);
        } catch (NoAccessException $e) {
            throw $e;
        } catch (\Exception $e) {
            Log::error("Failed to get data from API: " . $e->getMessage() . "\n" . $e->getTraceAsString());

            $message = $e->getMessage();
            if (\Piwik_ShouldPrintBackTraceWithMessage()) {
                $message .= "\n" . $e->getTraceAsString();
            }

            $loadingError = array('message' => $message);
        }

        $view = new View("@CoreHome/_dataTable");

        if (!empty($loadingError)) {
            $view->error = $loadingError;
        }

        $view->assign($this->templateVars);
        $view->visualization         = $this;
        $view->visualizationTemplate = static::TEMPLATE_FILE;
        $view->visualizationCssClass = $this->getDefaultDataTableCssClass();
        $view->reportMetdadata = $this->getReportMetadata();

        if (null === $this->dataTable) {
            $view->dataTable = null;
        } else {
            $view->dataTableHasNoData = !$this->isThereDataToDisplay();
            $view->dataTable          = $this->dataTable;

            // if it's likely that the report data for this data table has been purged,
            // set whether we should display a message to that effect.
            $view->showReportDataWasPurgedMessage = $this->hasReportBeenPurged();
            $view->deleteReportsOlderThan         = Option::get('delete_reports_older_than');
        }

        $view->idSubtable  = $this->requestConfig->idSubtable;
        $view->clientSideParameters = $this->getClientSideParametersToSet();
        $view->clientSideProperties = $this->getClientSidePropertiesToSet();
        $view->properties  = array_merge($this->requestConfig->getProperties(), $this->config->getProperties());
        $view->reportLastUpdatedMessage = $this->reportLastUpdatedMessage;
        $view->footerIcons = $this->config->footer_icons;
        $view->isWidget    = Common::getRequestVar('widget', 0, 'int');

        return $view->render();
    }

    /**
     * @internal
     */
||||||||    public function render()
    {
        $this->overrideSomeConfigPropertiesIfNeeded();

        try {
            $this->beforeLoadDataTable();
            $this->loadDataTableFromAPI();
            $this->postDataTableLoadedFromAPI();

            $requestPropertiesAfterLoadDataTable = $this->requestConfig->getProperties();

            $this->applyFilters();
            $this->addVisualizationInfoFromMetricMetadata();
            $this->afterAllFiltersAreApplied();
            $this->beforeRender();

            $this->logMessageIfRequestPropertiesHaveChanged($requestPropertiesAfterLoadDataTable);
        } catch (NoAccessException $e) {
            throw $e;
        } catch (\Exception $e) {
            Log::error("Failed to get data from API: " . $e->getMessage() . "\n" . $e->getTraceAsString());

            $message = $e->getMessage();
            if (\Piwik_ShouldPrintBackTraceWithMessage()) {
                $message .= "\n" . $e->getTraceAsString();
            }

            $loadingError = array('message' => $message);
        }

        $view = new View("@CoreHome/_dataTable");

        if (!empty($loadingError)) {
            $view->error = $loadingError;
        }

        $view->assign($this->templateVars);
        $view->visualization         = $this;
        $view->visualizationTemplate = static::TEMPLATE_FILE;
        $view->visualizationCssClass = $this->getDefaultDataTableCssClass();
        $view->reportMetdadata = $this->getReportMetadata();

        if (null === $this->dataTable) {
            $view->dataTable = null;
        } else {
            $view->dataTableHasNoData = !$this->isThereDataToDisplay();
            $view->dataTable          = $this->dataTable;

            // if it's likely that the report data for this data table has been purged,
            // set whether we should display a message to that effect.
            $view->showReportDataWasPurgedMessage = $this->hasReportBeenPurged();
            $view->deleteReportsOlderThan         = Option::get('delete_reports_older_than');
        }

        $view->idSubtable  = $this->requestConfig->idSubtable;
        $clientSideParameters = $this->getClientSideParametersToSet();
        if (isset($clientSideParameters['showtitle'])) {
            unset($clientSideParameters['showtitle']);
        }
        $view->clientSideParameters = $clientSideParameters;
        $view->clientSideProperties = $this->getClientSidePropertiesToSet();
        $view->properties  = array_merge($this->requestConfig->getProperties(), $this->config->getProperties());
        $view->reportLastUpdatedMessage = $this->reportLastUpdatedMessage;
        $view->footerIcons = $this->config->footer_icons;
        $view->isWidget    = Common::getRequestVar('widget', 0, 'int');

        return $view->render();
    }

    /**
     * @internal
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR)))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))