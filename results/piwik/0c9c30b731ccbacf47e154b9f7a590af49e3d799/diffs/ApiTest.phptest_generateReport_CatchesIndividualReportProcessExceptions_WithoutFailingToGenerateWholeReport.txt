    public function test_generateReport_CatchesIndividualReportProcessExceptions_WithoutFailingToGenerateWholeReport()
    {
        $realProxy = new Proxy();

        $mockProxy = $this->getMock('Piwik\API\Proxy', array('call'));
        $mockProxy->expects($this->any())->method('call')->willReturnCallback(function ($className, $methodName, $parametersRequest) use ($realProxy) {
            switch ($className) {
                case '\Piwik\Plugins\VisitsSummary\API':
                    $result = new DataTable();
                    $result->addRowFromSimpleArray(array('label' => 'visits label', 'nb_visits' => 1));
                    return $result;
                case '\Piwik\Plugins\UserCountry\API':
                    throw new \Exception("error");
                case '\Piwik\Plugins\Referrers\API':
                    $result = new DataTable();
                    $result->addRowFromSimpleArray(array('label' => 'referrers label', 'nb_visits' => 1));
                    return $result;
                case '\Piwik\Plugins\API\API':
                    return $realProxy->call($className, $methodName, $parametersRequest);
                default:
                    throw new \Exception("Unexpected method $className::$methodName.");
            }
        });
        Proxy::setSingletonInstance($mockProxy);

        $idReport = APIScheduledReports::getInstance()->addReport(
            1,
            '',
            Schedule::PERIOD_DAY,
            0,
            ScheduledReports::EMAIL_TYPE,
            ReportRenderer::HTML_FORMAT,
            array(
                'VisitsSummary_get',
                'UserCountry_getCountry',
                'Referrers_getWebsites',
            ),
            array(ScheduledReports::DISPLAY_FORMAT_PARAMETER => ScheduledReports::DISPLAY_FORMAT_TABLES_ONLY)
        );

        ob_start();
        $result = APIScheduledReports::getInstance()->generateReport($idReport, Date::factory('now')->toString(),
            $language = false, $outputType = APIScheduledReports::OUTPUT_RETURN);
        ob_end_clean();

        $this->assertContains('id="VisitsSummary_get"', $result);
        $this->assertContains('id="Referrers_getWebsites"', $result);
        $this->assertNotContains('id="UserCountry_getCountry"', $result);
    }

||||||||    public function test_generateReport_CatchesIndividualReportProcessExceptions_WithoutFailingToGenerateWholeReport()
    {
        $realProxy = new Proxy();

        $mockProxy = $this->getMockBuilder('Piwik\API\Proxy')->setMethods(array('call'))->getMock();
        $mockProxy->expects($this->any())->method('call')->willReturnCallback(function ($className, $methodName, $parametersRequest) use ($realProxy) {
            switch ($className) {
                case '\Piwik\Plugins\VisitsSummary\API':
                    $result = new DataTable();
                    $result->addRowFromSimpleArray(array('label' => 'visits label', 'nb_visits' => 1));
                    return $result;
                case '\Piwik\Plugins\UserCountry\API':
                    throw new \Exception("error");
                case '\Piwik\Plugins\Referrers\API':
                    $result = new DataTable();
                    $result->addRowFromSimpleArray(array('label' => 'referrers label', 'nb_visits' => 1));
                    return $result;
                case '\Piwik\Plugins\API\API':
                    return $realProxy->call($className, $methodName, $parametersRequest);
                default:
                    throw new \Exception("Unexpected method $className::$methodName.");
            }
        });
        Proxy::setSingletonInstance($mockProxy);

        $idReport = APIScheduledReports::getInstance()->addReport(
            1,
            '',
            Schedule::PERIOD_DAY,
            0,
            ScheduledReports::EMAIL_TYPE,
            ReportRenderer::HTML_FORMAT,
            array(
                'VisitsSummary_get',
                'UserCountry_getCountry',
                'Referrers_getWebsites',
            ),
            array(ScheduledReports::DISPLAY_FORMAT_PARAMETER => ScheduledReports::DISPLAY_FORMAT_TABLES_ONLY)
        );

        ob_start();
        $result = APIScheduledReports::getInstance()->generateReport($idReport, Date::factory('now')->toString(),
            $language = false, $outputType = APIScheduledReports::OUTPUT_RETURN);
        ob_end_clean();

        $this->assertContains('id="VisitsSummary_get"', $result);
        $this->assertContains('id="Referrers_getWebsites"', $result);
        $this->assertNotContains('id="UserCountry_getCountry"', $result);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_NEW))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR)))))
                                    (AST_RETURN
                                        (AST_VAR))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_NEW))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR)))))
                                    (AST_RETURN
                                        (AST_VAR))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_RETURN
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR))))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)))))))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR)
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_CALL)
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_SWITCH
                        (AST_VAR)
                        (AST_SWITCH_LIST
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_NEW))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR)))))
                                    (AST_RETURN
                                        (AST_VAR))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (SCALAR))))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_NEW))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (SCALAR)))))
                                    (AST_RETURN
                                        (AST_VAR))))
                            (AST_SWITCH_CASE
                                (SCALAR)
                                (
                                    (AST_RETURN
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR))))))
                            (AST_SWITCH_CASE
                                (NULL)
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)))))))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR)
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_CALL)
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))