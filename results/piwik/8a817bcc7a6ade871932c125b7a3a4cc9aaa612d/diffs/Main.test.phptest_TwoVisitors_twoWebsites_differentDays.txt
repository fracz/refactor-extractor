	function test_TwoVisitors_twoWebsites_differentDays()
	{
		// Tests run in UTC, the Tracker in UTC
    	$dateTime = '2010-01-03 11:22:33';
    	$idSite = $this->createWebsite($dateTime);
    	$idSite2 = $this->createWebsite($dateTime);
    	$this->setApiToCall(array('VisitFrequency.get', 'VisitsSummary.get','Referers.getWebsites', 'Actions.getPageUrls', 'Actions.getPageTitles'));
    	ob_start();

    	// -
    	// First visitor on Idsite 1: two page views
        $visitorA = $this->getTracker($idSite, $dateTime, $defaultInit = true);
        $visitorA->setUrlReferer( 'http://referer.com/page.htm?param=valuewith some spaces');
        $visitorA->setUrl('http://example.org/homepage');
        $this->checkResponse($visitorA->doTrackPageView('first page view'));
    	$visitorA->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.1)->getDatetime());
        $this->checkResponse($visitorA->doTrackPageView('first visitor/second page view'));

        // -
    	// Second new visitor on Idsite 1: one page view
        $visitorB = $this->getTracker($idSite, $dateTime, $defaultInit = true);
    	$visitorB->setIp('100.52.656.83');
    	$visitorB->setResolution(800, 300);
    	$visitorB->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(1)->getDatetime());
        $visitorB->setUrlReferer( '' );
    	$visitorB->setUserAgent('Opera/9.63 (Windows NT 5.1; U; en) Presto/2.1.1');
    	$visitorB->setUrl('http://example.org/products');
    	$this->checkResponse($visitorB->doTrackPageView('first page view'));

    	// -
    	// Second visitor again on Idsite 1: 2 page views 2 days later, 2010-01-05
    	$visitorB->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(48)->getDatetime());
        $visitorB->setUrlReferer( 'http://referer.com/Other_Page.htm' );
    	$visitorB->setUrl('http://example.org/homepage');
    	$this->checkResponse($visitorB->doTrackPageView('second visitor/two days later/a new visit'));
    	// Second page view 6 minutes later
    	$visitorB->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(48)->addHour(0.1)->getDatetime());
    	$visitorB->setUrl('http://example.org/thankyou');
    	$this->checkResponse($visitorB->doTrackPageView('second visitor/two days later/second page view'));

    	// -
    	// First visitor on Idsite 2: one page view, with Website referer
        $visitorAsite2 = $this->getTracker($idSite2, Piwik_Date::factory($dateTime)->addHour(24)->getDatetime(), $defaultInit = true);
        $visitorAsite2->setUserAgent('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0;)');
        $visitorAsite2->setUrlReferer('http://only-homepage-referer.com/');
        $visitorAsite2->setUrl('http://example2.com/home');
        $this->checkResponse($visitorAsite2->doTrackPageView('Website 2 page view'));

        // Returning visitor on Idsite 2 1 day later, one page view, with chinese referer
//    	$t2->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(48 + 10)->getDatetime());
//        $t2->setUrlReferer('http://www.baidu.com/s?wd=%D0%C2+%CE%C5&n=2');
//        $t2->setUrl('http://example2.com/home');
//        $this->checkResponse($t2->doTrackPageView('I\'m a returning visitor...'));

        // -
    	// Test Referer.get* methods in XML
    	$periods = array('day', 'week', 'month', 'year');
    	// Request data for both websites at once
    	$idSite = 'all';
    	// Request data for the last 6 periods
        $this->callGetApiCompareOutput(__FUNCTION__, 'xml', $idSite = 'all', $dateTime, $periods, $setDateLastN = true);
	}

}||||||||	function test_TwoVisitors_twoWebsites_differentDays()
	{
		// Tests run in UTC, the Tracker in UTC
    	$dateTime = '2010-01-03 11:22:33';
    	$idSite = $this->createWebsite($dateTime);
    	$idSite2 = $this->createWebsite($dateTime);
    	$this->setApiToCall(array('VisitFrequency.get',
    								'VisitsSummary.get',
    								'Referers.getWebsites',
    								'Actions.getPageUrls',
    								'Actions.getPageTitles'));
    	ob_start();

    	// -
    	// First visitor on Idsite 1: two page views
    	$datetimeSpanOverTwoDays = '2010-01-03 23:55:00';
        $visitorA = $this->getTracker($idSite, $datetimeSpanOverTwoDays, $defaultInit = true);
        $visitorA->setUrlReferer( 'http://referer.com/page.htm?param=valuewith some spaces');
        $visitorA->setUrl('http://example.org/homepage');
        $this->checkResponse($visitorA->doTrackPageView('first page view'));
    	$visitorA->setForceVisitDateTime(Piwik_Date::factory($datetimeSpanOverTwoDays)->addHour(0.1)->getDatetime());
    	$visitorA->setUrl('  ');
        $this->checkResponse($visitorA->doTrackPageView('  '));

        // -
    	// Second new visitor on Idsite 1: one page view
        $visitorB = $this->getTracker($idSite, $dateTime, $defaultInit = true);
    	$visitorB->setIp('100.52.656.83');
    	$visitorB->setResolution(800, 300);
    	$visitorB->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(1)->getDatetime());
        $visitorB->setUrlReferer( '' );
    	$visitorB->setUserAgent('Opera/9.63 (Windows NT 5.1; U; en) Presto/2.1.1');
    	$visitorB->setUrl('http://example.org/products');
    	$this->checkResponse($visitorB->doTrackPageView('first page view'));

    	// -
    	// Second visitor again on Idsite 1: 2 page views 2 days later, 2010-01-05
    	$visitorB->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(48)->getDatetime());
        $visitorB->setUrlReferer( 'http://referer.com/Other_Page.htm' );
    	$visitorB->setUrl('http://example.org/homepage');
    	$this->checkResponse($visitorB->doTrackPageView('second visitor/two days later/a new visit'));
    	// Second page view 6 minutes later
    	$visitorB->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(48)->addHour(0.1)->getDatetime());
    	$visitorB->setUrl('http://example.org/thankyou');
    	$this->checkResponse($visitorB->doTrackPageView('second visitor/two days later/second page view'));

    	// -
    	// First visitor on Idsite 2: one page view, with Website referer
        $visitorAsite2 = $this->getTracker($idSite2, Piwik_Date::factory($dateTime)->addHour(24)->getDatetime(), $defaultInit = true);
        $visitorAsite2->setUserAgent('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0;)');
        $visitorAsite2->setUrlReferer('http://only-homepage-referer.com/');
        $visitorAsite2->setUrl('http://example2.com/home');
        $this->checkResponse($visitorAsite2->doTrackPageView('Website 2 page view'));

        // Returning visitor on Idsite 2 1 day later, one page view, with chinese referer
//    	$t2->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(48 + 10)->getDatetime());
//        $t2->setUrlReferer('http://www.baidu.com/s?wd=%D0%C2+%CE%C5&n=2');
//        $t2->setUrl('http://example2.com/home');
//        $this->checkResponse($t2->doTrackPageView('I\'m a returning visitor...'));

        // -
    	// Test Referer.get* methods in XML
    	$periods = array('day', 'week', 'month', 'year');
    	// Request data for both websites at once
    	$idSite = 'all';
    	// Request data for the last 6 periods
        $this->callGetApiCompareOutput(__FUNCTION__, 'xml', $idSite = 'all', $dateTime, $periods, $setDateLastN = true);
	}

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_MAGIC_CONST)
            (SCALAR)
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_VAR)
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_MAGIC_CONST)
            (SCALAR)
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_VAR)
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))))