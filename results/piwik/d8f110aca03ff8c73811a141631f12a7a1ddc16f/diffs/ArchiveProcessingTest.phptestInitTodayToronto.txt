    public function testInitTodayToronto()
    {
        if (!Piwik::isTimezoneSupportEnabled()) {
            $this->markTestSkipped('timezones needs to be supported');
        }

        $now = time();
        $siteTimezone = 'America/Toronto';
        $timestamp = Piwik_Date::factory('now', $siteTimezone)->getTimestamp();
        $dateLabel = date('Y-m-d', $timestamp);

        Piwik_ArchiveProcessing::setBrowserTriggerArchiving(true);

        $archiveProcessing = $this->_createArchiveProcessing('day', $dateLabel, $siteTimezone);
        $archiveProcessing->time = $now;

        // we look at anything processed within the time to live range
        $dateMinArchived = $now - Piwik_ArchiveProcessing::getTodayArchiveTimeToLive();
        $this->assertEquals($archiveProcessing->getMinTimeArchivedProcessed(), $dateMinArchived);
        $this->assertTrue($archiveProcessing->isArchiveTemporary());

        // when browsers don't trigger archives, we force ArchiveProcessing
        // to fetch any of the most recent archive
        Piwik_ArchiveProcessing::setBrowserTriggerArchiving(false);
        // see isArchivingDisabled()
        // Running in CLI doesn't impact the time to live today's archive we are loading
        // From CLI, we will not return data that is 'stale'
        if (!Piwik_Common::isPhpCliMode()) {
            $dateMinArchived = 0;
        }
        $this->assertEquals($archiveProcessing->getMinTimeArchivedProcessed(), $dateMinArchived);

        // this test varies with DST
        $this->assertTrue($archiveProcessing->getStartDatetimeUTC() == date('Y-m-d', $timestamp) . ' 04:00:00' ||
            $archiveProcessing->getStartDatetimeUTC() == date('Y-m-d', $timestamp) . ' 05:00:00');
        $this->assertTrue($archiveProcessing->getEndDatetimeUTC() == date('Y-m-d', $timestamp + 86400) . ' 03:59:59' ||
            $archiveProcessing->getEndDatetimeUTC() == date('Y-m-d', $timestamp + 86400) . ' 04:59:59');

        $this->assertTrue($archiveProcessing->isArchiveTemporary());
    }

    /**
     * Testing batch insert
     * @group Core
     * @group ArchiveProcessing
     */
||||||||    public function testInitTodayToronto()
    {
        if (!Piwik::isTimezoneSupportEnabled()) {
            $this->markTestSkipped('timezones needs to be supported');
        }

        $now = time();
        $siteTimezone = 'America/Toronto';
        $timestamp = Piwik_Date::factory('now', $siteTimezone)->getTimestamp();
        $dateLabel = date('Y-m-d', $timestamp);

        Piwik_ArchiveProcessor_Rules::setBrowserTriggerArchiving(true);

        $archiveProcessing = $this->_createArchiveProcessing('day', $dateLabel, $siteTimezone);
        $archiveProcessing->time = $now;

        // we look at anything processed within the time to live range
        $dateMinArchived = $now - Piwik_ArchiveProcessor_Rules::getTodayArchiveTimeToLive();
        $this->assertEquals($archiveProcessing->getMinTimeArchivedProcessed(), $dateMinArchived);
        $this->assertTrue($archiveProcessing->isArchiveTemporary());

        // when browsers don't trigger archives, we force ArchiveProcessing
        // to fetch any of the most recent archive
        Piwik_ArchiveProcessor_Rules::setBrowserTriggerArchiving(false);
        // see isArchivingDisabled()
        // Running in CLI doesn't impact the time to live today's archive we are loading
        // From CLI, we will not return data that is 'stale'
        if (!Piwik_Common::isPhpCliMode()) {
            $dateMinArchived = 0;
        }
        $this->assertEquals($archiveProcessing->getMinTimeArchivedProcessed(), $dateMinArchived);

        // this test varies with DST
        $this->assertTrue($archiveProcessing->getDateStart()->getDateStartUTC() == date('Y-m-d', $timestamp) . ' 04:00:00' ||
            $archiveProcessing->getDateStart()->getDateStartUTC() == date('Y-m-d', $timestamp) . ' 05:00:00');
        $this->assertTrue($archiveProcessing->getDateEnd()->getDateEndUTC() == date('Y-m-d', $timestamp + 86400) . ' 03:59:59' ||
            $archiveProcessing->getDateEnd()->getDateEndUTC() == date('Y-m-d', $timestamp + 86400) . ' 04:59:59');

        $this->assertTrue($archiveProcessing->isArchiveTemporary());
    }

    /**
     * Testing batch insert
     * @group Core
     * @group ArchiveProcessing
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)))))