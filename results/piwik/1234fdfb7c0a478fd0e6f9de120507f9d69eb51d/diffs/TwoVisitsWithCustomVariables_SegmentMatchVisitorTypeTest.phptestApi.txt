    public function testApi()
    {
        $testData = $this->getApiForTesting();

        foreach ($testData AS $data) {
            $api    = $data[0];
            $params = $data[1];
            $this->runApiTests($api, $params);
        }

                // ----------------------------------------------
        // Implementation Checks
        // ----------------------------------------------
        // Verify that, when a segment is specified, only the requested report is processed
        // In this case, check that only the Custom Variables blobs have been processed

        if (IntegrationTestCase::$apiTestingLevel != IntegrationTestCase::NO_API_TESTING) {
            $tests = array(
                // 1) CHECK 'day' archive stored in January
                // We expect 2 segments * (1 custom variable name + 2 ref metrics + 6 subtable for the custom var values + 5 Referers blob)
                'archive_blob_2010_01'    => 28,
                // This contains all 'last N' weeks & days,
                // (1 metrics
                //  + 2 referer metrics
                //  + 3 done flag )
                //  * 2 segments
                // + 1 Done flag per Plugin, for each "Last N" date
                'archive_numeric_2010_01' => 138,

                // 2) CHECK 'week' archive stored in December (week starts the month before)
                // We expect 2 segments * (1 custom variable name + 2 ref metrics + 6 subtable for the values of the name + 5 referers blob)
                'archive_blob_2009_12'    => 28,
                // 6 metrics,
                // 2 Referer metrics (Referers_distinctSearchEngines/Referers_distinctKeywords),
                // 3 done flag (referers, CustomVar, VisitsSummary),
                // X * 2 segments
                'archive_numeric_2009_12' => (6 + 2 + 3) * 2,
            );
            foreach ($tests as $table => $expectedRows) {
                $sql        = "SELECT count(*) FROM " . Piwik_Common::prefixTable($table);
                $countBlobs = Zend_Registry::get('db')->fetchOne($sql);
                $this->assertEqual($expectedRows, $countBlobs, "$table: %s");
            }
        }
    }

||||||||    public function testApi($api, $params)
    {
        $this->runApiTests($api, $params);
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_ENCAPS_LIST
                                    (AST_VAR)
                                    (SCALAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))