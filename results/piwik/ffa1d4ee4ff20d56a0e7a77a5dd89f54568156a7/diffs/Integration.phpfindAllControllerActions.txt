	protected function findAllControllerActions()
	{
		// list of plugins & actions that should not be tested this way. at the moment, only
		// read-only operations can be tested.
		//
		// NOTE: at the moment whole plugins are blacklisted. its possible to only specify the
		// actions, but this becomes harder to maintain. Using a mock config that doesn't save,
		// might remove the need for a blacklist... will also need to know which actions require
		// admin access & which don't.
		static $blacklist = array(
			'TranslationsAdmin', 'CorePluginsAdmin', 'CoreAdminHome', 'CoreHome', 'CoreUpdater', 'Proxy', 'Dashboard',
			'Feedback', 'UsersManager', 'Installation', 'LanguagesManager', 'Login', 'VisitorGenerator',
			'Widgetize', 'PrivacyManager', 'ImageGraph', 'ExampleFeedburner.saveFeedburnerName',
			'Referers.getKeywordsForPage', // tries to do a request to this host, but when testing, the url
										   // ends up as http://whatever/tests/integration/?...
										   // Problem is w/ Piwik_Url::getCurrentUrlWithoutFileName (FIXME)
			'SitesManager', // some API calls require admin access (like getDefaultCurrency (why this?)), so
							// testing w/ anonymous access fails.
			'UserCountryMap.outputImage', 'UserCountryMap.exportImage', // uses Proxy
			'Goals.getLastNbConversionsGraph','Goals.getLastConversionRateGraph','Goals.getLastRevenueGraph',
		);

		// the cached result
		static $result = null;
		if (!is_null($result))
		{
			return $result;
		}

		// methods in the Piwik_Controller class, which will be detected but should not be
		// considered controller actios
		$baseControllerMethods = get_class_methods('Piwik_Controller');

		$result = array();

		$plugins = Piwik_PluginsManager::getInstance()->getLoadedPlugins();
		foreach ($plugins as $plugin)
		{
			$pluginName = $plugin->getPluginName();
			$controllerClass = 'Piwik_' . $pluginName . '_Controller';

			if (in_array($pluginName, $blacklist) || !class_exists($controllerClass))
			{
				continue;
			}

			foreach (get_class_methods($controllerClass) as $methodName)
			{
				if ($methodName == '__construct' || $methodName == '__destruct' || $methodName == $controllerClass
					|| in_array($methodName, $baseControllerMethods)
					|| $methodName == 'getEvolutionGraph' // evolution graphs require a columns request var,
														  // so they can't be tested here
					)
				{
					continue;
				}

				$actionId = "$pluginName.$methodName";
				if (in_array($actionId, $blacklist))
				{
					continue;
				}

				$result[] = $actionId;
			}
		}

		return $result;
	}

||||||||	protected function findAllControllerActions()
	{
		// list of plugins & actions that should not be tested this way. at the moment, only
		// read-only operations can be tested.
		//
		// NOTE: at the moment whole plugins are blacklisted. its possible to only specify the
		// actions, but this becomes harder to maintain. Using a mock config that doesn't save,
		// might remove the need for a blacklist... will also need to know which actions require
		// admin access & which don't.
		static $blacklist = array(
			'TranslationsAdmin', 'CorePluginsAdmin', 'CoreAdminHome', 'CoreHome', 'CoreUpdater', 'Proxy', 'Dashboard',
			'Feedback', 'UsersManager', 'Installation', 'LanguagesManager', 'Login', 'VisitorGenerator',
			'Widgetize', 'PrivacyManager', 'ImageGraph', 'ExampleFeedburner.saveFeedburnerName', 'ExampleRssWidget',
			'Referers.getKeywordsForPage', // tries to do a request to this host, but when testing, the url
										   // ends up as http://whatever/tests/integration/?...
										   // Problem is w/ Piwik_Url::getCurrentUrlWithoutFileName (FIXME)
			'SitesManager', // some API calls require admin access (like getDefaultCurrency (why this?)), so
							// testing w/ anonymous access fails.
			'UserCountryMap.outputImage', 'UserCountryMap.exportImage', // uses Proxy
			'Goals.getLastNbConversionsGraph','Goals.getLastConversionRateGraph','Goals.getLastRevenueGraph',
		);

		// the cached result
		static $result = null;
		if (!is_null($result))
		{
			return $result;
		}

		// methods in the Piwik_Controller class, which will be detected but should not be
		// considered controller actios
		$baseControllerMethods = get_class_methods('Piwik_Controller');

		$result = array();

		$plugins = Piwik_PluginsManager::getInstance()->getLoadedPlugins();
		foreach ($plugins as $plugin)
		{
			$pluginName = $plugin->getPluginName();
			$controllerClass = 'Piwik_' . $pluginName . '_Controller';

			if (in_array($pluginName, $blacklist) || !class_exists($controllerClass))
			{
				continue;
			}

			foreach (get_class_methods($controllerClass) as $methodName)
			{
				if ($methodName == '__construct' || $methodName == '__destruct' || $methodName == $controllerClass
					|| in_array($methodName, $baseControllerMethods)
					|| $methodName == 'getEvolutionGraph' // evolution graphs require a columns request var,
														  // so they can't be tested here
					)
				{
					continue;
				}

				$actionId = "$pluginName.$methodName";
				if (in_array($actionId, $blacklist))
				{
					continue;
				}

				$result[] = $actionId;
			}
		}

		return $result;
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_FOREACH
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_FOREACH
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR)))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))