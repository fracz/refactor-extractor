	static public function getLocalReferer()
	{
		// verify that the referer contains the current URL (minus the filename & query parameters), http://example.org/dir1/dir2/
		$referer = self::getReferer();
		if($referer !== false)
		{
			// handle case-sensitivity differences
			$pathContains = strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? 'stripos' : 'strpos';

			// get current URL without filename
			if (!empty($_SERVER['HTTP_X_FORWARDED_HOST']))
			{
				$proxies = explode(',', $_SERVER['HTTP_X_FORWARDED_HOST']);
				$host = self::getCurrentScheme() . '://' . $proxies[0];
			}
			else
			{
				$host = self::getCurrentHost();
			}
			$proxyUrl = $host . self::getCurrentScriptPath();

			// determine the offset to begin the comparison;
			// rationale: we can't rely on the scheme/protocol portion of the reconstructed "current" URL as there may be a reverse proxy
			$offset = strpos($referer, '://');
			$current = strstr($proxyUrl, '://');
			if($pathContains($referer, $current, $offset) === $offset)
			{
				return $referer;
			}
		}
		return false;
	}
}||||||||	static public function getLocalReferer()
	{
		// verify that the referer contains the current URL (minus the filename & query parameters), http://example.org/dir1/dir2/
		$referer = self::getReferer();
		if($referer !== false)
		{
			// handle case-sensitivity differences
			$pathContains = strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? 'stripos' : 'strpos';

			// determine the offset to begin the comparison;
			// rationale: we can't rely on the scheme/protocol portion of the reconstructed "current" URL as there may be a reverse proxy
			$offset = strpos($referer, '://');
			$current = strstr(self::getCurrentUrlWithoutFileName(), '://');
			if($pathContains($referer, $current, $offset) === $offset)
			{
				return $referer;
			}
		}
		return false;
	}
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_CONST)
                                            (SCALAR)
                                            (SCALAR)))))
                            (SCALAR))
                        (SCALAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_STATIC_CALL)
                                        (SCALAR))
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_STATIC_CALL)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_CONST)
                                            (SCALAR)
                                            (SCALAR)))))
                            (SCALAR))
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_STATIC_CALL)
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)))
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))