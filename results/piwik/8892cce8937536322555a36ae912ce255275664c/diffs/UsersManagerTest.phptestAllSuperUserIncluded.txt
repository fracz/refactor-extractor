    public function testAllSuperUserIncluded()
    {
        Config::getInstance()->superuser = array(
            'login'    => 'superusertest',
            'password' => 'passwordsuperusertest',
            'email'    => 'superuser@example.com'
        );

        $user = array('login'    => 'user',
                      'password' => "geqgeagae",
                      'email'    => "test@test.com",
                      'alias'    => "alias");
        API::getInstance()->addUser($user['login'], $user['password'], $user['email'], $user['alias']);

        $exceptionNotRaised = false;
        try {
            API::getInstance()->addUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        try {
            API::getInstance()->updateUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        try {
            API::getInstance()->deleteUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        try {
            API::getInstance()->deleteUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        if ($exceptionNotRaised) {
            $this->fail();
        }
    }

    /**
     * bad password => exception
     */
||||||||    public function testAllSuperUserIncluded()
    {
        $this->api->addUser('user', 'geqgeagae', 'test@test.com', 'alias');

        $exceptionNotRaised = false;
        try {
            $this->api->addUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        try {
            $this->api->updateUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        try {
            $this->api->deleteUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        try {
            $this->api->deleteUser('superusertest', 'te', 'fake@fale.co', 'ega');
            $exceptionNotRaised = true;
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionSuperUser)", $expected->getMessage());
        }
        if ($exceptionNotRaised) {
            $this->fail();
        }
    }

    /**
     * bad password => exception#
     * @expectedException \Exception
     * @expectedExceptionMessage UsersManager_ExceptionInvalidPassword
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_CALL))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))))))
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR))))))