	public function filter($label, $dataTable, $apiModule=false, $apiMethod=false,
			$request=array())
	{
		// make sure we have the right classes
		if (!($dataTable instanceof Piwik_DataTable)
				&& !($dataTable instanceof Piwik_DataTable_Array))
		{
			return $dataTable;
		}

		// check whether the label is recursive
		if ($apiModule && $apiMethod && count($request))
		{
			$this->apiModule = $apiModule;
			$this->apiMethod = $apiMethod;
			$this->request = $request;

			$label = explode(self::SEPARATOR_RECURSIVE_LABEL, $label);
			$label = array_map('urldecode', $label);

			if (count($label) > 1)
			{
				// do a recursive search
				return $this->filterRecursive($label, $dataTable);
			}
			$label = $label[0];
		}

		// do a non-recursive search
		foreach ($this->getLabelVariations($label) as $label)
		{
			$result = $dataTable->getFilteredTableFromLabel($label);
			if ($result->getFirstRow() !== false)
			{
				return $result;
			}
		}

		return $result;
	}

	/** Use variations of the label to make it easier to specify the desired label */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (
                            (AST_RETURN
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_RETURN
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||