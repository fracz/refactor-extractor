    public function test_checkArchiveRecords_whenPeriodIsRange()
    {
        // we expect 5 blobs for Actions plugins, because flat=1 or expanded=1 was not set
        // so we only archived the parent table
        $expectedActionsBlobs = 5;

        // When flat=1, Actions plugin will process 5 + 3 extra blobs (URL = 'http://example.org/sub1/sub2/sub3/news')
        $expectedActionsBlobsWhenFlattened = $expectedActionsBlobs + 3;

        $tests = array(
            // TODO Implement fix, then remove the +3 below
            'archive_blob_2010_12'    => ( ($expectedActionsBlobs+3) /*Actions*/
                                            + 8 /* UserSettings */
                                            + 2 /* VisitTime */) * 3,

            /**
             *  In Each "Period=range" Archive, we expect following non zero numeric entries:
             *                 5 metrics + 1 flag  // VisitsSummary
             *               + 2 metrics + 1 flag // Actions
             *               + 1 flag // UserSettings
             *               + 1 flag // VisitTime
             *               = 11
             *
             *   because we call VisitFrequency.get, this creates an archive for the visitorType==returning segment.
             *          -> There are two archives for each segment (one for "countryCode!=aa"
             *                      and VisitFrequency creates one for "countryCode!=aa;visitorType==returning")
             *
             * So each period=range will have = 11 records + (5 metrics + 1 flag // VisitsSummary)
             *                                = 17
             *
             * Total expected records = count unique archives * records per archive
             *                        = 3 * 17
             *                        = 51
             */
            'archive_numeric_2010_12' => 17 * 3,


            /**
             * In the January date range,
             * we archive only Actions plugins.
             * It is flattened so all 3 sub-tables should be archived.
             */
            'archive_blob_2011_01'    => $expectedActionsBlobsWhenFlattened,

            /**
             *   5 metrics + 1 flag // VisitsSummary
             * + 2 metrics + 1 flag // Actions
             */
            'archive_numeric_2011_01' => (6 + 3),

            // nothing in Feb
            'archive_blob_2011_02'    => 0,
            'archive_numeric_2011_02' => 0,
        );
        foreach ($tests as $table => $expectedRows) {
            $sql = "SELECT count(*) FROM " . Common::prefixTable($table) . " WHERE period = " . Piwik::$idPeriods['range'];
            $countBlobs = Db::get()->fetchOne($sql);

            if($expectedRows != $countBlobs) {
                var_export(Db::get()->fetchAll("SELECT * FROM " . Common::prefixTable($table). " WHERE period = " . Piwik::$idPeriods['range'] . " ORDER BY idarchive ASC"));
            }
            $this->assertEquals($expectedRows, $countBlobs, "$table expected $expectedRows, got $countBlobs");
        }
    }

}

Test_Piwik_Integration_OneVisitorOneWebsite_SeveralDaysDateRange_ArchivingTests::$fixture
    = new Test_Piwik_Fixture_VisitsOverSeveralDays();
||||||||    public function test_checkArchiveRecords_whenPeriodIsRange()
    {
        // we expect 5 blobs for Actions plugins, because flat=1 or expanded=1 was not set
        // so we only archived the parent table
        $expectedActionsBlobs = 5;

        // When flat=1, Actions plugin will process 5 + 3 extra blobs (URL = 'http://example.org/sub1/sub2/sub3/news')
        $expectedActionsBlobsWhenFlattened = $expectedActionsBlobs + 3;

        $tests = array(
            'archive_blob_2010_12'    => ( $expectedActionsBlobs /*Actions*/
                                            + 8 /* UserSettings */
                                            + 2 /* VisitTime */) * 3,

            /**
             *  In Each "Period=range" Archive, we expect following non zero numeric entries:
             *                 5 metrics + 1 flag  // VisitsSummary
             *               + 2 metrics + 1 flag // Actions
             *               + 1 flag // UserSettings
             *               + 1 flag // VisitTime
             *               = 11
             *
             *   because we call VisitFrequency.get, this creates an archive for the visitorType==returning segment.
             *          -> There are two archives for each segment (one for "countryCode!=aa"
             *                      and VisitFrequency creates one for "countryCode!=aa;visitorType==returning")
             *
             * So each period=range will have = 11 records + (5 metrics + 1 flag // VisitsSummary)
             *                                = 17
             *
             * Total expected records = count unique archives * records per archive
             *                        = 3 * 17
             *                        = 51
             */
            'archive_numeric_2010_12' => 17 * 3,


            /**
             * In the January date range,
             * we archive only Actions plugins.
             * It is flattened so all 3 sub-tables should be archived.
             */
            'archive_blob_2011_01'    => $expectedActionsBlobsWhenFlattened,

            /**
             *   5 metrics + 1 flag // VisitsSummary
             * + 2 metrics + 1 flag // Actions
             */
            'archive_numeric_2011_01' => (6 + 3),

            // nothing in Feb
            'archive_blob_2011_02'    => 0,
            'archive_numeric_2011_02' => 0,
        );
        foreach ($tests as $table => $expectedRows) {
            $sql = "SELECT count(*) FROM " . Common::prefixTable($table) . " WHERE period = " . Piwik::$idPeriods['range'];
            $countBlobs = Db::get()->fetchOne($sql);

            if($expectedRows != $countBlobs) {
                $this->printDebugWhenTestFails($table);
            }
            $this->assertEquals($expectedRows, $countBlobs, "$table expected $expectedRows, got $countBlobs");
        }
    }

    /**
     * @param $table
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_STATIC_CALL)
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_STATIC_CALL
                                                            (
                                                                (AST_VAR))))
                                                    (SCALAR))
                                                (AST_DIM
                                                    (AST_STATIC_PROP)
                                                    (SCALAR)))
                                            (SCALAR)))))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)))))))