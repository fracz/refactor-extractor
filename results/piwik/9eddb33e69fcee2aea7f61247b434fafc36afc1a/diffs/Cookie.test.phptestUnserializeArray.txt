||||||||    public function testUnserializeArray()
    {
		$a = array('value1', 'value2');
		$as = serialize($a);
		$expected = 'a:2:{i:0;s:6:"value1";i:1;s:6:"value2";}';
		$this->assertEqual( $as, $expected );

		$ua = Piwik_Cookie::unserialize_array($as);
		$this->assertTrue( is_array($ua) && count($ua) == 2 && $ua[0] === 'value1' && $ua[1] === 'value2' );

		$a = 'O:31:"Test_Piwik_Cookie_Phantom_Class":0:{}';
		try {
			unserialize($a);
			$this->fail("Expected exception not raised");
		} catch(Exception $expected) {
			echo "test: unserializing an object where class not (yet) defined<br>\n";
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		$a = 'O:28:"Test_Piwik_Cookie_Mock_Class":0:{}';
		try {
			unserialize($a);
			echo "test: unserializing an object where class is defined<br>\n";
		} catch(Exception $unexpected) {
			$this->fail("Unexpected exception raised");
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		$a = 'a:1:{i:0;O:28:"Test_Piwik_Cookie_Mock_Class":0:{}}';
		try {
			unserialize($a);
			echo "test: unserializing nested object where class is defined<br>\n";
		} catch(Exception $unexpected) {
			$this->fail("Unexpected exception raised");
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		$a = 'a:2:{i:0;s:4:"test";i:1;O:28:"Test_Piwik_Cookie_Mock_Class":0:{}}';
		try {
			unserialize($a);
			echo "test: unserializing another nested object where class is defined<br>\n";
		} catch(Exception $unexpected) {
			$this->fail("Unexpected exception raised");
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		$a = 'O:28:"Test_Piwik_Cookie_Mock_Class":1:{s:34:"'."\0".'Test_Piwik_Cookie_Mock_Class'."\0".'name";s:4:"test";}';
		try {
			unserialize($a);
			echo "test: unserializing object with member where class is defined<br>\n";
		} catch(Exception $unexpected) {
			$this->fail("Unexpected exception raised");
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		$a = 'a:1:{s:4:"test";s:1:"'."\0".'";}';
		try {
			unserialize($a);
			echo "test: unserializing with leading null byte<br>\n";
		} catch(Exception $unexpected) {
			$this->fail("Unexpected exception raised");
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		$a = 'a:1:{s:4:"test";s:3:"'."a\0b".'";}';
		try {
			unserialize($a);
			echo "test: unserializing with leading intervening byte<br>\n";
		} catch(Exception $unexpected) {
			$this->fail("Unexpected exception raised");
		}

		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );

		// arrays and objects cannot be used as keys, i.e., generates "Warning: Illegal offset type ..."
		$a = 'a:2:{i:0;a:0:{}O:28:"Test_Piwik_Cookie_Mock_Class":0:{}s:4:"test";';
		$ua = Piwik_Cookie::unserialize_array($a);
		$this->assertEqual( $a, $ua );
    }
}
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR)))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ECHO
                        (SCALAR)))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))
                    (SCALAR))
                (SCALAR))
            (SCALAR)))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (SCALAR)))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (SCALAR)))
    (AST_TRY
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))