    function __construct($logToFileFilename,
                         $fileFormatter,
                         $screenFormatter,
                         $logToDatabaseTableName,
                         $logToDatabaseColumnMapping)
    {
        parent::__construct();

        $this->currentRequestKey = substr(Common::generateUniqId(), 0, 8);

        $log_dir = Config::getInstance()->log['logger_file_path'];
        if ($log_dir[0] != '/' && $log_dir[0] != DIRECTORY_SEPARATOR) {
            $log_dir = PIWIK_USER_PATH . '/' . $log_dir;
        }
        $this->logToFileFilename = $log_dir . '/' . $logToFileFilename;

        $this->fileFormatter = $fileFormatter;
        $this->screenFormatter = $screenFormatter;
        $this->logToDatabaseTableName = Common::prefixTable($logToDatabaseTableName);
        $this->logToDatabaseColumnMapping = $logToDatabaseColumnMapping;
    }

||||||||    public function __construct()
    {
        $logConfig = Config::getInstance()->log;
        $this->setCurrentLogLevelFromConfig($logConfig);
        $this->setLogWritersFromConfig($logConfig);
        $this->setLogFilePathFromConfig($logConfig);
        $this->setLogDatabaseTableFromConfig($logConfig);
        $this->disableLoggingBasedOnConfig($logConfig);
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_STATIC_CALL)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_STATIC_CALL))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))