	function hollow($is_hollow)
	{
		$this->hollow = $is_hollow;
	}
}

/**
 * Draw a 'bow tie' shape.
 */
class bow extends dot_base
{
	/**
	 * The constructor, takes an optional $value
	 */
	function bow($value=null)
	{
		parent::dot_base( 'bow', $value );
	}

	/**
	 * Rotate the anchor object.
	 * @param $angle is an integer.
	 */
	function rotation($angle)
	{
		$this->rotation = $angle;
		return $this;
	}
}

/**
 * An <i><b>n</b></i> sided shape.
 */
class anchor extends dot_base
{
	/**
	 * The constructor, takes an optional $value
	 */
	function anchor($value=null)
	{
		parent::dot_base( 'anchor', $value );
	}

	/**
	 * Rotate the anchor object.
	 * @param $angle is an integer.
	 */
	function rotation($angle)
	{
		$this->rotation = $angle;
		return $this;
	}

	/**
	 * @param $sides is an integer. Number of sides this shape has.
	 */
	function sides($sides)
	{
		$this->sides = $sides;
		return $this;
	}
}

/**
 * A simple dot
 */
class dot extends dot_base
{
	/**
	 * The constructor, takes an optional $value
	 */
	function dot($value=null)
	{
		parent::dot_base( 'dot', $value );
	}
}

/**
 * A simple dot
 */
class solid_dot extends dot_base
{
	/**
	 * The constructor, takes an optional $value
	 */
	function solid_dot($value=null)
	{
		parent::dot_base( 'solid-dot', $value );
	}
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||