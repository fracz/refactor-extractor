||||||||	public function run()
	{
		$test = new GroupTest("Piwik - running '{$this->testGroupType}' tests...");

		$intro = '';
		if (!$this->databaseRequired)
		{
			$intro .= $this->getTestDatabaseInfoMessage();
		}

		$intro .= self::$testsHelpLinks . "<hr/>";
		$intro .= $this->introAppend;

		$toInclude = array();
		foreach ($this->dirsToGlob as $dir)
		{
			$toInclude = array_merge($toInclude, Piwik::globr(PIWIK_INCLUDE_PATH . $dir, '*.test.php'));
		}

		// if present, make sure Database.test.php is first
		$idx = array_search(PIWIK_INCLUDE_PATH . '/tests/core/Database.test.php', $toInclude);
		if ($idx !== FALSE)
		{
			unset($toInclude[$idx]);
			array_unshift($toInclude, PIWIK_INCLUDE_PATH . '/tests/core/Database.test.php');
		}

		foreach($toInclude as $file)
		{
			$test->addFile($file);
		}

		$result = $test->run(new HtmlTimerReporter($intro));
		if (SimpleReporter::inCli()) {
			exit($result ? 0 : 1);
		}
	}

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_STATIC_PROP)
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_NEW
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL)
            (
                (AST_EXIT
                    (AST_CONDITIONAL
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))))))