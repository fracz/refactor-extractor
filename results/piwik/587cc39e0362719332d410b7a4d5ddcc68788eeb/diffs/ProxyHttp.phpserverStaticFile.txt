    public static function serverStaticFile($file, $contentType, $expireFarFutureDays = 100, $byteStart = false,
                                            $byteEnd = false)
    {
        // if the file cannot be found return HTTP status code '404'
        if (!file_exists($file)) {
            Common::sendResponseCode(404);
            return;
        }

        $modifiedSince = Http::getModifiedSinceHeader();

        $fileModifiedTime = @filemtime($file);
        $lastModified = gmdate('D, d M Y H:i:s', $fileModifiedTime) . ' GMT';

        // set some HTTP response headers
        self::overrideCacheControlHeaders('public');
        Common::sendHeader('Vary: Accept-Encoding');
        Common::sendHeader('Content-Disposition: inline; filename=' . basename($file));

        if ($expireFarFutureDays) {
            // Required by proxy caches potentially in between the browser and server to cache the request indeed
            Common::sendHeader(self::getExpiresHeaderForFutureDay($expireFarFutureDays));
        }

        // Return 304 if the file has not modified since
        if ($modifiedSince === $lastModified) {
            Common::sendResponseCode(304);
            return;
        }

        // if we have to serve the file, serve it now, either in the clear or compressed
        if ($byteStart === false) {
            $byteStart = 0;
        }

        if ($byteEnd === false) {
            $byteEnd = filesize($file);
        }

        $compressed = false;
        $encoding = '';
        $compressedFileLocation = AssetManager::getInstance()->getAssetDirectory() . '/' . basename($file);

        if (!($byteStart == 0
              && $byteEnd == filesize($file))
        ) {
            $compressedFileLocation .= ".$byteStart.$byteEnd";
        }

        $phpOutputCompressionEnabled = self::isPhpOutputCompressed();
        if (isset($_SERVER['HTTP_ACCEPT_ENCODING']) && !$phpOutputCompressionEnabled) {
            list($encoding, $extension) = self::getCompressionEncodingAcceptedByClient();
            $filegz = $compressedFileLocation . $extension;

            if (self::canCompressInPhp()) {
                if (!empty($encoding)) {
                    // compress the file if it doesn't exist or is newer than the existing cached file, and cache
                    // the compressed result
                    if (self::shouldCompressFile($file, $filegz)) {
                        self::compressFile($file, $filegz, $encoding, $byteStart, $byteEnd);
                    }

                    $compressed = true;
                    $file = $filegz;

                    $byteStart = 0;
                    $byteEnd = filesize($file);
                }
            } else {
                // if a compressed file exists, the file was manually compressed so we just serve that
                if ($extension == '.gz'
                    && !self::shouldCompressFile($file, $filegz)
                ) {
                    $compressed = true;
                    $file = $filegz;

                    $byteStart = 0;
                    $byteEnd = filesize($file);
                }
            }
        }

        Common::sendHeader('Last-Modified: ' . $lastModified);

        if (!$phpOutputCompressionEnabled) {
            Common::sendHeader('Content-Length: ' . ($byteEnd - $byteStart));
        }

        if (!empty($contentType)) {
            Common::sendHeader('Content-Type: ' . $contentType);
        }

        if ($compressed) {
            Common::sendHeader('Content-Encoding: ' . $encoding);
        }

        if (!_readfile($file, $byteStart, $byteEnd)) {
            Common::sendResponseCode(500);
        }
    }

    /**
     * Test if php output is compressed
     *
     * @return bool  True if php output is (or suspected/likely) to be compressed
     */
||||||||    public static function serverStaticFile($file, $contentType, $expireFarFutureDays = 100, $byteStart = false,
                                            $byteEnd = false, $filename = false)
    {
        // if the file cannot be found return HTTP status code '404'
        if (!file_exists($file)) {
            Common::sendResponseCode(404);
            return;
        }

        $modifiedSince = Http::getModifiedSinceHeader();

        $fileModifiedTime = @filemtime($file);
        $lastModified = gmdate('D, d M Y H:i:s', $fileModifiedTime) . ' GMT';

        // set some HTTP response headers
        self::overrideCacheControlHeaders('public');
        Common::sendHeader('Vary: Accept-Encoding');

        if (false === $filename) {
            $filename = basename($file);
        }

        Common::sendHeader('Content-Disposition: inline; filename=' . $filename);

        if ($expireFarFutureDays) {
            // Required by proxy caches potentially in between the browser and server to cache the request indeed
            Common::sendHeader(self::getExpiresHeaderForFutureDay($expireFarFutureDays));
        }

        // Return 304 if the file has not modified since
        if ($modifiedSince === $lastModified) {
            Common::sendResponseCode(304);
            return;
        }

        // if we have to serve the file, serve it now, either in the clear or compressed
        if ($byteStart === false) {
            $byteStart = 0;
        }

        if ($byteEnd === false) {
            $byteEnd = filesize($file);
        }

        $compressed = false;
        $encoding = '';
        $compressedFileLocation = AssetManager::getInstance()->getAssetDirectory() . '/' . basename($file);

        if (!($byteStart == 0
              && $byteEnd == filesize($file))
        ) {
            $compressedFileLocation .= ".$byteStart.$byteEnd";
        }

        $phpOutputCompressionEnabled = self::isPhpOutputCompressed();
        if (isset($_SERVER['HTTP_ACCEPT_ENCODING']) && !$phpOutputCompressionEnabled) {
            list($encoding, $extension) = self::getCompressionEncodingAcceptedByClient();
            $filegz = $compressedFileLocation . $extension;

            if (self::canCompressInPhp()) {
                if (!empty($encoding)) {
                    // compress the file if it doesn't exist or is newer than the existing cached file, and cache
                    // the compressed result
                    if (self::shouldCompressFile($file, $filegz)) {
                        self::compressFile($file, $filegz, $encoding, $byteStart, $byteEnd);
                    }

                    $compressed = true;
                    $file = $filegz;

                    $byteStart = 0;
                    $byteEnd = filesize($file);
                }
            } else {
                // if a compressed file exists, the file was manually compressed so we just serve that
                if ($extension == '.gz'
                    && !self::shouldCompressFile($file, $filegz)
                ) {
                    $compressed = true;
                    $file = $filegz;

                    $byteStart = 0;
                    $byteEnd = filesize($file);
                }
            }
        }

        Common::sendHeader('Last-Modified: ' . $lastModified);

        if (!$phpOutputCompressionEnabled) {
            Common::sendHeader('Content-Length: ' . ($byteEnd - $byteStart));
        }

        if (!empty($contentType)) {
            Common::sendHeader('Content-Type: ' . $contentType);
        }

        if ($compressed) {
            Common::sendHeader('Content-Encoding: ' . $encoding);
        }

        if (!_readfile($file, $byteStart, $byteEnd)) {
            Common::sendResponseCode(500);
        }
    }

    /**
     * Test if php output is compressed
     *
     * @return bool  True if php output is (or suspected/likely) to be compressed
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_STATIC_CALL))
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_CALL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_VAR)))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR)))
                                                (
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR))))))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_UNARY_OP
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))))))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_STATIC_CALL))
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_CALL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_VAR)))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR)))
                                                (
                                                    (AST_STATIC_CALL
                                                        (
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR))))))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_UNARY_OP
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))))))))))))
    (AST_STATIC_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))))))