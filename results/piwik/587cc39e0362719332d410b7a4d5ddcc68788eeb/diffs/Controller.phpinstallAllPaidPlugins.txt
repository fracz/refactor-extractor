||||||||    public function installAllPaidPlugins()
    {
        Piwik::checkUserHasSuperUserAccess();

        $this->dieIfPluginsAdminIsDisabled();
        Plugin\ControllerAdmin::displayWarningIfConfigFileNotWritable();

        Nonce::checkNonce(static::INSTALL_NONCE);

        $paidPlugins = $this->plugins->getAllPaidPlugins();

        $hasErrors = false;
        foreach ($paidPlugins as $paidPlugin) {
            if (!$this->canPluginBeInstalled($paidPlugin)) {
                continue;
            }

            $pluginName = $paidPlugin['name'];

            try {

                $this->pluginInstaller->installOrUpdatePluginFromMarketplace($pluginName);

            } catch (\Exception $e) {

                $notification = new Notification($e->getMessage());
                $notification->context = Notification::CONTEXT_ERROR;
                Notification\Manager::notify('Marketplace_Install' . $pluginName, $notification);

                $hasErrors = true;
            }
        }

        if ($hasErrors) {
            Url::redirectToReferrer();
            return;
        }

        $dependency = new Plugin\Dependency();

        for ($i = 0; $i <= 10; $i++) {
            foreach ($paidPlugins as $index => $paidPlugin) {
                $pluginName = $paidPlugin['name'];

                if ($this->pluginManager->isPluginActivated($pluginName)) {
                    unset($paidPlugins[$index]);
                    continue;
                }

                if (empty($paidPlugin['require'])
                    || !$dependency->hasDependencyToDisabledPlugin($paidPlugin['require'])) {

                    unset($paidPlugins[$index]);

                    try {
                        $this->pluginManager->activatePlugin($pluginName);
                    } catch (Exception $e) {

                        $hasErrors = true;
                        $notification = new Notification($e->getMessage());
                        $notification->context = Notification::CONTEXT_ERROR;
                        Notification\Manager::notify('Marketplace_Install' . $pluginName, $notification);
                    }
                }
            }
        }

        if ($hasErrors) {
            $notification = new Notification(Piwik::translate('Marketplace_OnlySomePaidPluginsInstalledAndActivated'));
            $notification->context = Notification::CONTEXT_INFO;
        } else {
            $notification = new Notification(Piwik::translate('Marketplace_AllPaidPluginsInstalledAndActivated'));
            $notification->context = Notification::CONTEXT_SUCCESS;
        }

        Notification\Manager::notify('Marketplace_InstallAll', $notification);

        Url::redirectToReferrer();
    }

||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_TRY
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_STATIC_CALL
                                (
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST)))))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL)
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)))
                            (
                                (AST_UNSET
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_EMPTY
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))))
                            (
                                (AST_UNSET
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_TRY
                                    (
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_VAR))))
                                    (AST_CATCH_LIST
                                        (AST_CATCH
                                            (AST_NAME_LIST)
                                            (AST_VAR)
                                            (
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_CONST))
                                                (AST_ASSIGN
                                                    (AST_VAR)
                                                    (AST_NEW
                                                        (
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)))))
                                                (AST_ASSIGN
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (AST_CLASS_CONST
                                                        (SCALAR)))
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_VAR))
                                                        (AST_VAR))))))
                                    (NULL)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLASS_CONST
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_VAR)))
    (AST_STATIC_CALL))