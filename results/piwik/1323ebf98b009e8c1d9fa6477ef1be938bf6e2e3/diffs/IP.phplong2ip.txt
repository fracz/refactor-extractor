	static public function long2ip($ip)
	{
		// in case mbstring overloads strlen and substr functions
		$strlen = function_exists('mb_orig_strlen') ? 'mb_orig_strlen' : 'strlen';
		$substr = function_exists('mb_orig_substr') ? 'mb_orig_substr' : 'substr';

		// IPv4
		if($strlen($ip) == 4)
		{
			return self::N2P($ip);
		}

		// IPv6 - transitional address?
		if($strlen($ip) == 16)
		{
			if(substr_compare($ip, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff", 0, 12) === 0
				|| substr_compare($ip, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 0, 12) === 0)
			{
				// remap 128-bit IPv4-mapped and IPv4-compat addresses
				return self::N2P($substr($ip, 12));
			}
		}

		return '0.0.0.0';
	}

	/**
	 * Get low and high IP addresses for a specified range.
	 *
	 * @param array $ipRange An IP address range in presentation format
	 * @return array|false Array ($lowIp, $highIp) in network address format, or false if failure
	 */
||||||||	static public function long2ip($ip)
	{
		// IPv4
		if(Piwik_Common::strlen($ip) == 4)
		{
			return self::N2P($ip);
		}

		// IPv6 - transitional address?
		if(Piwik_Common::strlen($ip) == 16)
		{
			if(substr_compare($ip, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff", 0, 12) === 0
				|| substr_compare($ip, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 0, 12) === 0)
			{
				// remap 128-bit IPv4-mapped and IPv4-compat addresses
				return self::N2P(Piwik_Common::substr($ip, 12));
			}
		}

		return '0.0.0.0';
	}

	/**
	 * Get low and high IP addresses for a specified range.
	 *
	 * @param array $ipRange An IP address range in presentation format
	 * @return array|false Array ($lowIp, $highIp) in network address format, or false if failure
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)))
            (SCALAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (SCALAR))))))))))))
    (AST_RETURN
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR))))))))))))
    (AST_RETURN
        (SCALAR)))