	private function getVisitorUniqueId()
	{
		if($this->isVisitorKnown())
		{
			return -1;
		}
		else
		{
			return Piwik_Common::generateUniqId();
		}
	}

}

class Piwik_LogStats_Controller
{
	private $stateValid;

	private $urlToRedirect;

	private $db = null;

	const STATE_NOTHING_TO_NOTICE = 1;
	const STATE_TO_REDIRECT_URL = 2;
	const STATE_LOGGING_DISABLE = 10;
	const STATE_NO_GET_VARIABLE = 11;

	const COOKIE_INDEX_IDVISITOR 				= 1;
	const COOKIE_INDEX_TIMESTAMP_LAST_ACTION 	= 2;
	const COOKIE_INDEX_TIMESTAMP_FIRST_ACTION 	= 3;
	const COOKIE_INDEX_ID_VISIT 				= 4;
	const COOKIE_INDEX_ID_LAST_ACTION 			= 5;

	const VISIT_STANDARD_LENGTH = 1800;

	public function __construct()
	{
		$this->stateValid = self::STATE_NOTHING_TO_NOTICE;
	}

	// create the database object
	function connectDatabase()
	{
		$configDb = Piwik_LogStats_Config::getInstance()->database;
		$this->db = new Piwik_LogStats_Db( 	$configDb['host'],
										$configDb['username'],
										$configDb['password'],
										$configDb['dbname']
							);
		$this->db->connect();
	}

	private function initProcess()
	{
		$saveStats = Piwik_LogStats_Config::getInstance()->LogStats['record_statistics'];

		if($saveStats == 0)
		{
			$this->setState(self::STATE_LOGGING_DISABLE);
		}

		if( count($_GET) == 0)
		{
			$this->setState(self::STATE_NO_GET_VARIABLE);
		}

		$downloadVariableName = Piwik_LogStats_Config::getInstance()->LogStats['download_url_var_name'];
		$urlDownload = Piwik_Common::getRequestVar( $downloadVariableName, '', 'string');

		if( !empty($urlDownload) )
		{
			$this->setState( self::STATE_TO_REDIRECT_URL );
			$this->setUrlToRedirect ( $urlDownload);
		}

		$outlinkVariableName = Piwik_LogStats_Config::getInstance()->LogStats['outlink_url_var_name'];
		$urlOutlink = Piwik_Common::getRequestVar( $outlinkVariableName, '', 'string');

		if( !empty($urlOutlink) )
		{
			$this->setState( self::STATE_TO_REDIRECT_URL );
			$this->setUrlToRedirect ( $urlOutlink);
		}
	}

	private function processVisit()
	{
		return $this->stateValid !== self::STATE_LOGGING_DISABLE
				&&  $this->stateValid !== self::STATE_NO_GET_VARIABLE;
	}
	private function getState()
	{
		return $this->stateValid;
	}

	private function setUrlToRedirect( $url )
	{
		$this->urlToRedirect = $url;
	}
	private function getUrlToRedirect()
	{
		return $this->urlToRedirect;
	}
	private function setState( $value )
	{
		$this->stateValid = $value;
	}

	// main algorithm
	// => input : variables filtered
	// => action : read cookie, read database, database logging, cookie writing
	function main( $class_LogStats_Visit = "Piwik_LogStats_Visit")
	{
		$this->initProcess();

		if( $this->processVisit() )
		{
			$this->connectDatabase();
			$visit = new $class_LogStats_Visit( $this->db );
			$visit->handle();
		}
		$this->endProcess();
	}

	// display the logo or pixel 1*1 GIF
	// or a marketing page if no parameters in the url
	// or redirect to a url (transmit the cookie as well)
	// or load a URL (rss feed) (transmit the cookie as well)
	private function endProcess()
	{
		switch($this->getState())
		{
			case self::STATE_LOGGING_DISABLE:
				printDebug("Logging disabled, display transparent logo");
			break;

			case self::STATE_NO_GET_VARIABLE:
				printDebug("No get variables => piwik page");
			break;


			case self::STATE_TO_REDIRECT_URL:
				$this->sendHeader('Location: ' . $this->getUrlToRedirect());
			break;


			case self::STATE_NOTHING_TO_NOTICE:
			default:
				printDebug("Nothing to notice => default behaviour");
			break;
		}
		printDebug("End of the page.");
	}

	protected function sendHeader($header)
	{
		header($header);
	}
}



function printDebug( $info = '' )
{
	if(isset($GLOBALS['DEBUGPIWIK']) && $GLOBALS['DEBUGPIWIK'])
	{
		if(is_array($info))
		{
			print("<PRE>");
			print(var_export($info,true));
			print("</PRE>");
		}
		else
		{
			print($info . "<br>\n");
		}
	}
}
?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_UNARY_OP
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_STATIC_CALL))))))||||||||