||||||||	protected function compute()
	{
		$this->logTable = Piwik::prefixTable('log_visit');
		$this->logActionTable = Piwik::prefixTable('log_link_visit_action');

		$db = Zend_Registry::get('db');

		$query = "SELECT 	count(distinct visitor_idcookie) as nb_uniq_visitors,
							count(*) as nb_visits,
							sum(visit_total_actions) as nb_actions,
							max(visit_total_actions) as max_actions,
							sum(visit_total_time) as sum_visit_length,
							sum(case visit_total_actions when 1 then 1 else 0 end) as bounce_count
					FROM ".$this->logTable."
					WHERE visit_server_date = ?
						AND idsite = ?
					GROUP BY visit_server_date
				 ";
		$row = $db->fetchRow($query, array($this->strDateStart,$this->idsite ) );

		if($row === false)
		{
			Piwik::log("No visits for this day!");
			//TODO to implement no visit
			return;
		}

		foreach($row as $name => $value)
		{
			$record = new Archive_Processing_Record_Numeric($name, $value);
		}

/*
		$query = "SELECT count(distinct l.idaction) as nb_uniq_actions
				 FROM ".$this->logTable." as v
					LEFT JOIN ".$this->logActionTable." as l USING (idvisit)
				 WHERE v.visit_server_date = ?
				 	AND v.idsite = ?
				 LIMIT 1";
		$row = $db->fetchRow($query, array( $this->strDateStart, $this->idsite ) );
		$record = new Archive_Processing_Numeric_Record('nb_uniq_actions', $row['nb_uniq_actions']);
		*/

		$query = "SELECT 	count(distinct visitor_idcookie) as nb_uniq_visitors_returning,
							count(*) as nb_visits_returning,
							sum(visit_total_actions) as nb_actions_returning,
							max(visit_total_actions) as max_actions_returning,
							sum(visit_total_time) as sum_visit_length_returning,
							sum(case visit_total_actions when 1 then 1 else 0 end) as bounce_count_returning
				 	FROM ".$this->logTable."
				 	WHERE visit_server_date = ?
				 		AND idsite = ?
				 		AND visitor_returning = 1
				 	GROUP BY visitor_returning";
		$row = $db->fetchRow($query, array( $this->strDateStart, $this->idsite ) );

		foreach($row as $name => $value)
		{
			$record = new Archive_Processing_Record_Numeric($name, $value);
		}

		/**
		 * referers
		 */

		$this->computeReferer();
	}

||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (NULL))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)))