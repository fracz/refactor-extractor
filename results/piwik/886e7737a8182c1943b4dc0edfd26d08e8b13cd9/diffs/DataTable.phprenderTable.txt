	function renderTable($table)
	{
		static $depth=0;
		$output = '';
		$i = 1;
		foreach($table->getRows() as $row)
		{
			$columns=array();
			foreach($row->getColumns() as $column => $value)
			{
				$columns[] = "'$column' => $value";
			}
			$columns = implode(", ", $columns);
			$details=array();
			foreach($row->getDetails() as $detail => $value)
			{
				$details[] = "'$detail' => $value";
			}
			$details = implode(", ", $details);
			$output.= str_repeat($this->prefixRows, $depth) . "- $i [".$columns."] [".$details."] [idsubtable = ".$row->getIdSubDataTable()."]<br>\n";

			if($row->getIdSubDataTable() !== null)
			{
				$depth++;
				$output.= $this->renderTable( Piwik_DataTable_Manager::getInstance()->getTable($row->getIdSubDataTable()));
				$depth--;
			}
			$i++;
		}

		return $output;

	}
}

class Piwik_DataTable_Row
{
	public $content = array();
	const COLUMNS = 0;
	const DETAILS = 1;
	const DATATABLE_ASSOCIATED = 2;

	public function __construct( $row )
	{
		$this->loadFromArray($row);
	}
	public function getColumn( $name )
	{
		if(!isset($this->content[self::COLUMNS][$name]))
		{
			return false;
		}
		return $this->content[self::COLUMNS][$name];
	}
	public function getColumns()
	{
		return $this->content[self::COLUMNS];
	}

	public function getDetails()
	{
		return $this->content[self::DETAILS];
	}

	public function getIdSubDataTable()
	{
		return $this->content[self::DATATABLE_ASSOCIATED];
	}
	/**
	 * Very efficient load of the Row structure from a well structured php array
	 *
	 * @param array The row array has the structure
	 * 					array(
	 * 						DataTable_Row::COLUMNS => array(
	 * 										0 => 1554,
	 * 										1 => 42,
	 * 										2 => 657,
	 * 										3 => 155744,
	 * 									),
	 * 						DataTable_Row::DETAILS => array(
	 * 										'logo' => 'test.png'
	 * 									),
	 * 						DataTable_Row::DATATABLE_ASSOCIATED => #DataTable object // numeric idDataTable
	 * 					)
	 */
	public function loadFromArray( $array )
	{
		$this->content[self::COLUMNS] = array();
		$this->content[self::DETAILS] = array();
		$this->content[self::DATATABLE_ASSOCIATED] = null;

		if(isset($array[self::COLUMNS]))
		{
			$this->content[self::COLUMNS] = $array[self::COLUMNS];
		}
		if(isset($array[self::DETAILS]))
		{
			$this->content[self::DETAILS] = $array[self::DETAILS];
		}
		if(isset($array[self::DATATABLE_ASSOCIATED]))
		{
			$this->content[self::DATATABLE_ASSOCIATED] = $array[self::DATATABLE_ASSOCIATED]->getId();
		}
	}

}

abstract class Piwik_DataTable_Filter
{
	protected $table;

	public function __construct($table)
	{
		if(!($table instanceof Piwik_DataTable))
		{
			throw new Exception("The filter accepts only a Piwik_DataTable object.");
		}
		$this->table = $table;
	}

	abstract protected function filter();
}


class Piwik_DataTable_Filter_Pattern extends Piwik_DataTable_Filter
{
	private $columnToFilter;
	private $patternToSearch;

	public function __construct( $table, $columnToFilter, $patternToSearch )
	{
		parent::__construct($table);
		$this->patternToSearch = $patternToSearch;
		$this->columnToFilter = $columnToFilter;
		$this->filter();
	}

	protected function filter()
	{
		foreach($this->table->getRows() as $key => $row)
		{
			if( !ereg($this->patternToSearch, $row->getColumn($this->columnToFilter)))
			{
				$this->table->deleteRow($key);
			}
		}
	}
}

class Piwik_DataTable_Filter_Limit extends Piwik_DataTable_Filter
{
	public function __construct( $table, $offset, $limit )
	{
		parent::__construct($table);
		$this->offset = $offset;
		$this->limit = abs($limit);
		$this->filter();
	}

	protected function filter()
	{
		$table = $this->table;

		$rowsCount = $table->getRowsCount();

		// we have to delete
		// - from 0 to offset

		// at this point the array has offset less elements
		// - from limit - offset to the end - offset
		$table->deleteRowsOffset( 0, $this->offset );
		$table->deleteRowsOffset( $this->limit );
	}
}

/**
 * ---- Other
 * We can also imagine building a DataTable_Compare which would take 2 DataTable that have the same
 * structure and would compare them, by computing the percentages of differences, etc.
 *
 * For example
 * DataTable1 = [ keyword1, 1550 visits]
 * 				[ keyword2, 154 visits ]
 * DataTable2 = [ keyword1, 1004 visits ]
 * 				[ keyword3, 659 visits ]
 * DataTable_Compare = result of comparison of table1 with table2
 * 						[ keyword1, +154% ]
 * 						[ keyword2, +1000% ]
 * 						[ keyword3, -430% ]
 */
?>||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (AST_VAR)))
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_POST_INC
                            (AST_VAR))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))
                        (AST_POST_DEC
                            (AST_VAR)))))
            (AST_POST_INC
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||