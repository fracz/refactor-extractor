	public function getMinTimeArchivedProcessed()
	{
		// if the current archive is a DAY and if it's today,
		// we set this minDatetimeArchiveProcessedUTC that defines the lifetime value of today's archive
		if( $this->period->getNumberOfSubperiods() == 0
			&& $this->startTimestampUTC <= time() && $this->endTimestampUTC > time()
			)
		{
			$minDatetimeArchiveProcessedUTC = time() - Zend_Registry::get('config')->General->time_before_today_archive_considered_outdated;
			$browserArchivingEnabled = Zend_Registry::get('config')->General->enable_browser_archiving_triggering;
			// see #1150; if new archives are not triggered from the browser,
			// we still want to try and return the latest archive available for today (rather than return nothing)
			if(!$browserArchivingEnabled)
			{
				return false;
			}
		}
		// either
		// - if the period we're looking for is finished, we look for a ts_archived that
		//   is greater than the last day of the archive
		// - if the period we're looking for is not finished, we look for a recent enough archive
		//   recent enough means minDatetimeArchiveProcessedUTC = 00:00:01 this morning
		else
		{
			if($this->endTimestampUTC <= time())
			{
				$minDatetimeArchiveProcessedUTC = $this->endTimestampUTC+1;
			}
			else
			{
				$minDatetimeArchiveProcessedUTC = Piwik_Date::today()->setTimezone($this->site->getTimezone())->getTimestamp();
			}
		}
		return $minDatetimeArchiveProcessedUTC;
	}

	/**
	 * This method returns the idArchive ; if necessary, it triggers the archiving process.
	 *
	 * If the archive was not processed yet, it will launch the archiving process.
	 * If the current archive needs sub-archives (eg. a month archive needs all the days archive)
	 *  it will recursively launch the archiving (using this loadArchive() on the sub-periods)
	 *
	 * @return int|false The idarchive of the archive, false if the archive is not archived yet
	 */
||||||||	public function getMinTimeArchivedProcessed()
	{
		// if the current archive is a DAY and if it's today,
		// we set this minDatetimeArchiveProcessedUTC that defines the lifetime value of today's archive
		if( $this->period->getNumberOfSubperiods() == 0
			&& $this->startTimestampUTC <= time() && $this->endTimestampUTC > time()
			)
		{
			$minDatetimeArchiveProcessedUTC = time() - self::getTodayArchiveTimeToLive();
			$browserArchivingEnabled = self::isBrowserTriggerArchivingEnabled();
			// see #1150; if new archives are not triggered from the browser,
			// we still want to try and return the latest archive available for today (rather than return nothing)
			if(!$browserArchivingEnabled)
			{
				return false;
			}
		}
		// either
		// - if the period we're looking for is finished, we look for a ts_archived that
		//   is greater than the last day of the archive
		// - if the period we're looking for is not finished, we look for a recent enough archive
		//   recent enough means minDatetimeArchiveProcessedUTC = 00:00:01 this morning
		else
		{
			if($this->endTimestampUTC <= time())
			{
				$minDatetimeArchiveProcessedUTC = $this->endTimestampUTC+1;
			}
			else
			{
				$minDatetimeArchiveProcessedUTC = Piwik_Date::today()->setTimezone($this->site->getTimezone())->getTimestamp();
			}
		}
		return $minDatetimeArchiveProcessedUTC;
	}

	/**
	 * This method returns the idArchive ; if necessary, it triggers the archiving process.
	 *
	 * If the archive was not processed yet, it will launch the archiving process.
	 * If the current archive needs sub-archives (eg. a month archive needs all the days archive)
	 *  it will recursively launch the archiving (using this loadArchive() on the sub-periods)
	 *
	 * @return int|false The idarchive of the archive, false if the archive is not archived yet
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL)
                        (AST_PROP
                            (AST_PROP
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CALL))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR)))))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CALL)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL)
                        (AST_STATIC_CALL)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CALL))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR)))))))))))))
    (AST_RETURN
        (AST_VAR)))