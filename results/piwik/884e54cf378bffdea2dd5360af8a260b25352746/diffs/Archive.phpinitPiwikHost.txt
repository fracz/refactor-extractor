	private function initPiwikHost()
	{
		// If archive.php run as a web cron, we use the current hostname
		if(!Piwik_Common::isPhpCliMode())
		{
			// example.org/piwik/misc/cron/
			$piwikUrl = Piwik_Common::sanitizeInputValue(Piwik_Url::getCurrentUrlWithoutFileName());
			// example.org/piwik/
			$piwikUrl = $piwikUrl . "../../";
		}
		// If archive.php run as CLI/shell we require the piwik url to be set
		else
		{
			$piwikUrl = $this->isParameterSet("url", true);
			if(!$piwikUrl
				|| !Piwik_Common::isLookLikeUrl($piwikUrl))
			{
				$this->logFatalError("archive.php expects the argument --url to be set to your Piwik URL, for example: --url=http://example.org/piwik/ ", $backtrace = false);
			}
			// ensure there is a trailing slash
			if($piwikUrl[strlen($piwikUrl)-1] != '/')
			{
				$piwikUrl .= '/';
			}
		}
		if(Zend_Registry::get('config')->General->force_ssl == 1)
		{
			$piwikUrl = str_replace('http://', 'https://', $piwikUrl);
		}
		$this->piwikUrl = $piwikUrl . "index.php";
	}


	/**
	 * Returns if the requested parameter is defined in the command line arguments.
	 * If $valuePossible is true, then a value is possibly set for this parameter,
	 * ie. --force-timeout-for-periods=3600 would return 3600
	 *
	 * @return true or the value (int,string) if set, false otherwise
	 */
||||||||	private function initPiwikHost()
	{
		// If archive.php run as a web cron, we use the current hostname
		if(!Piwik_Common::isPhpCliMode())
		{
			// example.org/piwik/misc/cron/
			$piwikUrl = Piwik_Common::sanitizeInputValue(Piwik_Url::getCurrentUrlWithoutFileName());
			// example.org/piwik/
			$piwikUrl = $piwikUrl . "../../";
		}
		// If archive.php run as CLI/shell we require the piwik url to be set
		else
		{
			$piwikUrl = $this->isParameterSet("url", true);
			if(!$piwikUrl
				|| !Piwik_Common::isLookLikeUrl($piwikUrl))
			{
				$this->logFatalError("archive.php expects the argument --url to be set to your Piwik URL, for example: --url=http://example.org/piwik/ ", $backtrace = false);
			}
			// ensure there is a trailing slash
			if($piwikUrl[strlen($piwikUrl)-1] != '/')
			{
				$piwikUrl .= '/';
			}
		}
		if(Piwik_Config::getInstance()->General['force_ssl'] == 1)
		{
			$piwikUrl = str_replace('http://', 'https://', $piwikUrl);
		}
		$this->piwikUrl = $piwikUrl . "index.php";
	}


	/**
	 * Returns if the requested parameter is defined in the command line arguments.
	 * If $valuePossible is true, then a value is possibly set for this parameter,
	 * ie. --force-timeout-for-periods=3600 would return 3600
	 *
	 * @return true or the value (int,string) if set, false otherwise
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_PROP
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_STATIC_CALL))
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR))))