||||||||	 public function record( $idVisit, $idRefererAction, $timeSpentRefererAction)
	 {
	 	$this->db->query("INSERT INTO ".$this->db->prefixTable('log_link_visit_action')
						." (idvisit, idaction, idaction_ref, time_spent_ref_action) VALUES (?,?,?,?)",
					array($idVisit, $this->idAction, $idRefererAction, $timeSpentRefererAction)
					);
	 }

}

class Piwik_LogStats_Visit
{

	function __construct( $db )
	{
		$this->db = $db;
	}

	// test if the visitor is excluded because of
	// - IP
	// - cookie
	// - configuration option?
	private function isExcluded()
	{
		$excluded = 0;

		if($excluded)
		{
			printDebug("Visitor excluded.");
			return true;
		}

		return false;
	}

	/**
	 * Handles the visitor.
	 *
	 * We have to split the visitor into one of the category
	 * - Known visitor
	 * - New visitor
	 *
	 * A known visitor is a visitor that has already visited the website in the current month.
	 * We define a known visitor using (in order of importance):
	 * 1) A cookie that contains
	 * 		// a unique id for the visitor
	 * 		- id_visitor
	 *
	 * 		// the timestamp of the last action in the most recent visit
	 * 		- timestamp_last_action
	 *
 	 *  	// the timestamp of the first action in the most recent visit
	 * 		- timestamp_first_action
	 *
	 * 		// the ID of the most recent visit (which could be in the past or the current visit)
	 * 		- id_visit
	 *
	 * 		// the ID of the most recent action
	 * 		- id_last_action
	 * 2) If the visitor doesn't have a cookie, we try to look for a similar visitor configuration.
	 * 	  We search for a visitor with the same plugins/OS/Browser/Resolution for today for this website.
	 */
	private function recognizeTheVisitor()
	{
		$this->visitorKnown = false;
	}

	private function isVisitorKnown()
	{
		return $this->visitorKnown === true;
	}

	/**
	 * Once we have the visitor information, we have to define if the visit is a new or a known visit.
	 *
	 * 1) When the last action was done more than 30min ago,
	 * 	  or if the visitor is new, then this is a new visit.
	 *
	 * 2) If the last action is less than 30min ago, then the same visit is going on.
	 *	Because the visit goes on, we can get the time spent during the last action.
	 *
	 * NB:
	 *  - In the case of a new visit, then the time spent
	 *	during the last action of the previous visit is unknown.
	 *
	 *	- In the case of a new visit but with a known visitor,
	 *	we can set the 'returning visitor' flag.
	 *
	 */

	/**
	 * In all the cases we set a cookie to the visitor with the new information.
	 */
	public function handle()
	{
		if(!$this->isExcluded())
		{
			$this->recognizeTheVisitor();

			// known visitor
			if($this->isVisitorKnown())
			{
				if($this->isLastActionInTheSameVisit())
				{
					$this->handleKnownVisit();
				}
				else
				{
					$this->handleNewVisit();
				}
			}
			// new visitor
			else
			{
				$this->handleNewVisit();
			}

			$this->updateCookie();

		}
	}

	private function updateCookie()
	{
		printDebug("We manage the cookie...");
	}

	/**
	 * In the case of a known visit, we have to do the following actions:
	 *
	 * 1) Insert the new action
	 *
	 * 2) Update the visit information
	 */
	private function handleKnownVisit()
	{
		printDebug("Visit known.");
	}

	/**
	 * In the case of a new visit, we have to do the following actions:
	 *
	 * 1) Insert the new action
	 *
	 * 2) Insert the visit information
	 */
	private function handleNewVisit()
	{
		printDebug("New Visit.");

		/**
		 * Get the variables from the REQUEST
		 */

		/*
		 * Configuration settings
		 */
		$plugin_Flash 			= Piwik_Common::getRequestVar( 'fla', 0, 'int');
		$plugin_Director 		= Piwik_Common::getRequestVar( 'dir', 0, 'int');
		$plugin_Quicktime		= Piwik_Common::getRequestVar( 'qt', 0, 'int');
		$plugin_RealPlayer 		= Piwik_Common::getRequestVar( 'realp', 0, 'int');
		$plugin_Pdf 			= Piwik_Common::getRequestVar( 'pdf', 0, 'int');
		$plugin_WindowsMedia 	= Piwik_Common::getRequestVar( 'wma', 0, 'int');
		$plugin_Java 			= Piwik_Common::getRequestVar( 'java', 0, 'int');
		$plugin_Cookie 			= Piwik_Common::getRequestVar( 'cookie', 0, 'int');

		$userAgent		= Piwik_Common::sanitizeInputValues(@$_SERVER['HTTP_USER_AGENT']);
		$aBrowserInfo	= Piwik_Common::getBrowserInfo($userAgent);
		$browserName	= $aBrowserInfo['name'];
		$browserVersion	= $aBrowserInfo['version'];

		$os				= Piwik_Common::getOs($userAgent);

		$resolution		= Piwik_Common::getRequestVar('res', 'unknown', 'string');
		$colorDepth		= Piwik_Common::getRequestVar('col', 32, 'numeric');



		/*
		 * General information
		 */
		$ip				= Piwik_Common::getIp();
		$ip 			= ip2long($ip);
		$localTime				= Piwik_Common::getRequestVar( 'h', date("H"), 'numeric')
							.':'. Piwik_Common::getRequestVar( 'm', date("i"), 'numeric')
							.':'. Piwik_Common::getRequestVar( 's', date("s"), 'numeric');

		$serverDate 	= date("Y-m-d");
		$serverTime 	= date("H:i:s");

		$idsite = Piwik_Common::getRequestVar('idsite', 0, 'int');
		if($idsite <= 0)
		{
			throw new Exception("The 'idsite' in the request is not acceptable.");
		}

		$idcookie = $this->getVisitorUniqueId();

		$defaultTimeOnePageVisit = Piwik_LogStats_Config::getInstance()->LogStats['default_time_one_page_visit'];

		/*
		 * Location information
		 */
		$browserLang	= Piwik_Common::sanitizeInputValues(@$_SERVER['HTTP_ACCEPT_LANGUAGE']);
		$country 		= Piwik_Common::getCountry($browserLang);

		$continent		= Piwik_Common::getContinent( $country );

		/*
		 * Misc
		 */
		$configurationHash = $this->getConfigHash(
												$os,
												$browserName,
												$browserVersion,
												$resolution,
												$colorDepth,
												$plugin_Flash,
												$plugin_Director,
												$plugin_RealPlayer,
												$plugin_Pdf,
												$plugin_WindowsMedia,
												$plugin_Java,
												$plugin_Cookie,
												$ip,
												$browserLang);
		/**
		 * Init the action
		 */
		$action = new Piwik_LogStats_Action( $this->db );

		$actionId = $action->getActionId();

		printDebug("idAction = $actionId");


		/**
		 * Save the visitor
		 */

		$informationToSave = array(
			//'idvisit' => ,
			'idsite' 				=> $idsite,
			'visitor_localtime' 	=> $localTime,
			'visitor_idcookie' 		=> $idcookie,
			'visitor_returning' 	=> 0,
			'visitor_last_visit_time' => 0,
			'visit_server_date' 	=> $serverDate,
			'visit_server_time' 	=> $serverTime,
			'visit_exit_idaction' 	=> $actionId,
			'visit_entry_idaction' 	=> $actionId,
			'visit_total_actions' 	=> 1,
			'visit_total_time' 		=> $defaultTimeOnePageVisit,
			'referer_type' 			=> '',
			'referer_name' 			=> '',
			'referer_url' 			=> '',
			'referer_keyword' 		=> '',
			'config_md5config' 		=> $configurationHash,
			'config_os' 			=> $os,
			'config_browser_name' 	=> $browserName,
			'config_browser_version' => $browserVersion,
			'config_resolution' 	=> $resolution,
			'config_color_depth' 	=> $colorDepth,
			'config_pdf' 			=> $plugin_Pdf,
			'config_flash' 			=> $plugin_Flash,
			'config_java' 			=> $plugin_Java,
			'config_director' 		=> $plugin_Director,
			'config_quicktime' 		=> $plugin_Quicktime,
			'config_realplayer' 	=> $plugin_RealPlayer,
			'config_windowsmedia' 	=> $plugin_WindowsMedia,
			'config_cookie' 		=> $plugin_RealPlayer,
			'location_ip' 			=> $ip,
			'location_browser_lang' => $browserLang,
			'location_country' 		=> $country,
			'location_continent' 	=> $continent,
		);

		$fields = implode(", ", array_keys($informationToSave));
		$values = substr(str_repeat( "?,",count($informationToSave)),0,-1);

		$this->db->query( "INSERT INTO ".$this->db->prefixTable('log_visit').
						" ($fields) VALUES ($values)", array_values($informationToSave));

		$idVisit = $this->db->lastInsertId();

		/**
		 * Save the action
		 */
		$action->record( $idVisit, 0, 0 );

	}

	/**
	 * Compute the following information
	 * - referer_type
	 *		- direct			-- absence of referer URL
	 *		- site				-- based on the referer URL
	 *		- search_engine		-- based on the referer URL
	 *		- cpc				-- based on campaign URL parameter
	 *		- newsletter		-- based on campaign URL parameter
	 *		- partner			-- based on campaign URL parameter
	 *
	 * - referer_name
	 * 		- piwik.net
	 * 		- ()
	 * 		- google.fr
	 * 		- adwords-search
	 * 		- beta-release
	 * 		- my-nice-partner
	 *
	 * - referer_keyword
	 * 		- ()
	 * 		- ()
	 * 		- my keyword
	 * 		- my paid keyword
	 * 		- ()
	 * 		- ()
	 *
	 * - referer_url : the same for all the referer types
	 *
	 */
	private function handleReferer()
	{
		/*
		 * Referer analysis
		 */
		$refererUrl	= Piwik_Common::getRequestVar( 'urlref', '', 'string');
		$url		= Piwik_Common::getRequestVar( 'url', '', 'string');


		 /*
		  *
		  * - Campaign tagging specification
		  *		* newsletter / beta-release
		  *     * partner / Amazon / [autofilled by piwik http://amazon.com/refererpage.html]
		  *   	* CPC / adwords-search / myKeyword
		  */


	}

	private function getConfigHash( $os, $browserName, $browserVersion, $resolution, $colorDepth, $plugin_Flash, $plugin_Director, $plugin_RealPlayer, $plugin_Pdf, $plugin_WindowsMedia, $plugin_Java, $plugin_Cookie, $ip, $browserLang)
	{
		return md5( $os . $browserName . $browserVersion . $resolution . $colorDepth . $plugin_Flash . $plugin_Director . $plugin_RealPlayer . $plugin_Pdf . $plugin_WindowsMedia . $plugin_Java . $plugin_Cookie . $ip . $browserLang );
	}

	private function getVisitorUniqueId()
	{
		if($this->isVisitorKnown())
		{
			return -1;
		}
		else
		{
			return Piwik_Common::generateUniqId();
		}
	}

}

printDebug($_GET);

class Piwik_LogStats
{
	private $stateValid;

	private $urlToRedirect;

	private $db = null;

	const NOTHING_TO_NOTICE = 1;
	const TO_REDIRECT_URL = 2;
	const LOGGING_DISABLE = 10;
	const NO_GET_VARIABLE = 11;

	public function __construct()
	{
		$this->stateValid = self::NOTHING_TO_NOTICE;
	}

	// create the database object
	function connectDatabase()
	{
		$configDb = Piwik_LogStats_Config::getInstance()->database;
		$this->db = new Piwik_LogStats_Db( 	$configDb['host'],
										$configDb['username'],
										$configDb['password'],
										$configDb['dbname']
							);
		$this->db->connect();
	}

	private function initProcess()
	{
		$saveStats = Piwik_LogStats_Config::getInstance()->LogStats['record_statistics'];

		if($saveStats == 0)
		{
			$this->setState(self::LOGGING_DISABLE);
		}

		if( count($_GET) == 0)
		{
			$this->setState(self::NO_GET_VARIABLE);
		}

		$downloadVariableName = Piwik_LogStats_Config::getInstance()->LogStats['download_url_var_name'];
		$urlDownload = Piwik_Common::getRequestVar( $downloadVariableName, '', 'string');

		if( !empty($urlDownload) )
		{
			$this->setState( self::TO_REDIRECT_URL );
			$this->setUrlToRedirect ( $urlDownload);
		}

		$outlinkVariableName = Piwik_LogStats_Config::getInstance()->LogStats['outlink_url_var_name'];
		$urlOutlink = Piwik_Common::getRequestVar( $outlinkVariableName, '', 'string');

		if( !empty($urlOutlink) )
		{
			$this->setState( self::TO_REDIRECT_URL );
			$this->setUrlToRedirect ( $urlOutlink);
		}
	}

	private function processVisit()
	{
		return $this->stateValid !== self::LOGGING_DISABLE
				&&  $this->stateValid !== self::NO_GET_VARIABLE;
	}
	private function getState()
	{
		return $this->stateValid;
	}

	private function setUrlToRedirect( $url )
	{
		$this->urlToRedirect = $url;
	}
	private function getUrlToRedirect()
	{
		return $this->urlToRedirect;
	}
	private function setState( $value )
	{
		$this->stateValid = $value;
	}

	// main algorithm
	// => input : variables filtered
	// => action : read cookie, read database, database logging, cookie writing
	function main()
	{
		$this->initProcess();

		if( $this->processVisit() )
		{
			$this->connectDatabase();
			$visit = new Piwik_LogStats_Visit( $this->db );
			$visit->handle();
		}
		$this->endProcess();
	}

	// display the logo or pixel 1*1 GIF
	// or a marketing page if no parameters in the url
	// or redirect to a url (transmit the cookie as well)
	// or load a URL (rss feed) (transmit the cookie as well)
	private function endProcess()
	{
		switch($this->getState())
		{
			case self::LOGGING_DISABLE:
				printDebug("Logging disabled, display transparent logo");
			break;

			case self::NO_GET_VARIABLE:
				printDebug("No get variables => piwik page");
			break;


			case self::TO_REDIRECT_URL:
				header('Location: ' . $this->getUrlToRedirect());
			break;


			case self::NOTHING_TO_NOTICE:
			default:
				printDebug("Nothing to notice => default behaviour");
			break;
		}
		printDebug("End of the page.");
		exit;
	}
}

$process = new Piwik_LogStats;
$process->main();

// yet to do
// known visitor test 1h
// known visitor update 1h
// referer analysis 3h
// unit testing the module 7h
ob_end_flush();
?>||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (SCALAR))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))))))