	function save()
	{}
}

class Piwik_LogStats_Visit
{

	function __construct()
	{
	}

	// test if the visitor is excluded because of
	// - IP
	// - cookie
	// - configuration option?
	private function isExcluded()
	{
		$excluded = 0;

		if($excluded)
		{
			printDebug("Visitor excluded.");
			return true;
		}

		return false;
	}

	/**
	 * Handles the visitor.
	 *
	 * We have to split the visitor into one of the category
	 * - Known visitor
	 * - New visitor
	 *
	 * A known visitor is a visitor that has already visited the website in the current month.
	 * We define a known visitor using (in order of importance):
	 * 1) A cookie that contains
	 * 		// a unique id for the visitor
	 * 		- id_visitor
	 *
	 * 		// the timestamp of the last action in the most recent visit
	 * 		- timestamp_last_action
	 *
 	 *  	// the timestamp of the first action in the most recent visit
	 * 		- timestamp_first_action
	 *
	 * 		// the ID of the most recent visit (which could be in the past or the current visit)
	 * 		- id_visit
	 *
	 * 		// the ID of the most recent action
	 * 		- id_last_action
	 * 2) If the visitor doesn't have a cookie, we try to look for a similar visitor configuration.
	 * 	  We search for a visitor with the same plugins/OS/Browser/Resolution for today for this website.
	 */
	private function recognizeTheVisitor()
	{
		$this->visitorKnown = false;
	}

	private function isVisitorKnown()
	{
		return $this->visitorKnown === true;
	}

	/**
	 * Once we have the visitor information, we have to define if the visit is a new or a known visit.
	 *
	 * 1) When the last action was done more than 30min ago,
	 * 	  or if the visitor is new, then this is a new visit.
	 *
	 * 2) If the last action is less than 30min ago, then the same visit is going on.
	 *	Because the visit goes on, we can get the time spent during the last action.
	 *
	 * NB:
	 *  - In the case of a new visit, then the time spent
	 *	during the last action of the previous visit is unknown.
	 *
	 *	- In the case of a new visit but with a known visitor,
	 *	we can set the 'returning visitor' flag.
	 *
	 */

	/**
	 * In all the cases we set a cookie to the visitor with the new information.
	 */
	public function handle()
	{
		if(!$this->isExcluded())
		{
			$this->recognizeTheVisitor();

			// known visitor
			if($this->isVisitorKnown())
			{
				if($this->isLastActionInTheSameVisit())
				{
					$this->handleKnownVisit();
				}
				else
				{
					$this->handleNewVisit();
				}
			}
			// new visitor
			else
			{
				$this->handleNewVisit();
			}
		}
	}

	/**
	 * In the case of a known visit, we have to do the following actions:
	 *
	 * 1) Insert the new action
	 *
	 * 2) Update the visit information
	 */
	private function handleKnownVisit()
	{
		printDebug("Visit known.");
	}

	/**
	 * In the case of a new visit, we have to do the following actions:
	 *
	 * 1) Insert the new action
	 *
	 * 2) Insert the visit information
	 */
	private function handleNewVisit()
	{
		printDebug("New Visit.");

		/**
		 * Get the variables from the REQUEST
		 */
		$plugin_Flash 			= Piwik_Common::getRequestVar( 'fla', 0, 'int');
		$plugin_Director 		= Piwik_Common::getRequestVar( 'dir', 0, 'int');
		$plugin_RealPlayer 		= Piwik_Common::getRequestVar( 'realp', 0, 'int');
		$plugin_Pdf 			= Piwik_Common::getRequestVar( 'pdf', 0, 'int');
		$plugin_WindowsMedia 	= Piwik_Common::getRequestVar( 'wma', 0, 'int');
		$plugin_Java 			= Piwik_Common::getRequestVar( 'java', 0, 'int');
		$plugin_Cookie 			= Piwik_Common::getRequestVar( 'cookie', 0, 'int');

		$localTime				= Piwik_Common::getRequestVar( 'h', date("H"), 'numeric')
							.':'. Piwik_Common::getRequestVar( 'm', date("i"), 'numeric')
							.':'. Piwik_Common::getRequestVar( 's', date("s"), 'numeric');

		$userAgent		= Piwik_Common::sanitizeInputValues(@$_SERVER['HTTP_USER_AGENT']);
		$aBrowserInfo	= Piwik_Common::getBrowserInfo($userAgent);
		$os				= Piwik_Common::getOs($userAgent);

		$resolution		= Piwik_Common::getRequestVar('res', 'unknown', 'string');
		$colorDept		= Piwik_Common::getRequestVar('col', 32, 'numeric');

		$urlReferer		= Piwik_Common::getRequestVar( 'urlref', '', 'string');

		$ip				= Piwik_Common::getIp();

		$serverDate 	= date("Y-m-d");
		$serverTime 	= date("H:i:s");

		$browserLang	= Piwik_Common::sanitizeInputValues(@$_SERVER['HTTP_ACCEPT_LANGUAGE']);
		$country 		= Piwik_Common::getCountry($browserLang);

		$continent		= Piwik_Common::getContinent( $country );

		/**
		 * Init the action
		 */
		$action = new Piwik_LogStats_Action;

		$actionId = $action->getActionId();


		/**
		 * Save the visitor
		 */
		$visitorId = 1;


		/**
		 * Save the action
		 */
		$action->save( $visitorId );

			/*	CREATE TABLE log_visit (
		  idvisit INTEGER(10) UNSIGNED NOT NULL,
		  idsite INTEGER(10) UNSIGNED NOT NULL,
		  visitor_localtime TIME NOT NULL DEFAULT 00:00:00,
		  visitor_idcookie CHAR(32) NOT NULL,
		  visitor_returning TINYINT(1) NOT NULL,
		  visitor_last_visit_time TIME NOT NULL DEFAULT 00:00:00,
		  visit_server_date DATE NOT NULL,
		  visit_server_time TIME NOT NULL DEFAULT 00:00:00,
		  visit_exit_idpage INTEGER(11) NOT NULL,
		  visit_entry_idpage INTEGER(11) NOT NULL,
		  visit_entry_idpageurl INTEGER(11) NOT NULL,
		  visit_total_pages SMALLINT(5) UNSIGNED NOT NULL,
		  visit_total_time SMALLINT(5) UNSIGNED NOT NULL,
		  referer_type INTEGER UNSIGNED NULL,
		  referer_name VARCHAR(70) NULL,
		  referer_url TEXT NOT NULL,
		  referer_keyword VARCHAR(255) NULL,
		  config_md5config CHAR(32) NOT NULL,
		  -config_os CHAR(3) NOT NULL,
		  -config_browser_name VARCHAR(10) NOT NULL,
		  -config_browser_version VARCHAR(20) NOT NULL,
		  -config_resolution VARCHAR(9) NOT NULL,
		  -config_color_depth TINYINT(2) UNSIGNED NOT NULL,
		  -config_pdf TINYINT(1) NOT NULL,
		  -config_flash TINYINT(1) NOT NULL,
		  -config_java TINYINT(1) NOT NULL,
		  -config_javascript TINYINT(1) NOT NULL,
		  -config_director TINYINT(1) NOT NULL,
		  -config_quicktime TINYINT(1) NOT NULL,
		  -config_realplayer TINYINT(1) NOT NULL,
		  -config_windowsmedia TINYINT(1) NOT NULL,
		  -config_cookie TINYINT(1) NOT NULL,
		  -location_ip BIGINT(11) NOT NULL,
		  -location_browser_lang VARCHAR(20) NOT NULL,
		  -location_country CHAR(3) NOT NULL,
		  -location_continent CHAR(3) NOT NULL,
		  PRIMARY KEY(idvisit)
		);
		*/
	}
}

printDebug($_GET);

class Piwik_LogStats
{
	private $stateValid;

	const NOTHING_TO_NOTICE = 1;
	const LOGGING_DISABLE = 10;
	const NO_GET_VARIABLE = 11;

	public function __construct()
	{
		$this->stateValid = self::NOTHING_TO_NOTICE;
	}

	// create the database object
	function connectDatabase()
	{
		$configDb = Piwik_LogStats_Config::getInstance()->database;
		$db = new Piwik_LogStats_Db( 	$configDb['host'],
										$configDb['username'],
										$configDb['password'],
										$configDb['dbname']
							);
		$db->connect();
	}

	private function initProcess()
	{

		$saveStats = Piwik_LogStats_Config::getInstance()->LogStats['record_statistics'];
		if($saveStats == 0)
		{
			$this->setState(self::LOGGING_DISABLE);
		}

		if( count($_GET) == 0)
		{
			$this->setState(self::NO_GET_VARIABLE);
		}
	}

	private function processVisit()
	{
		return $this->stateValid === self::NOTHING_TO_NOTICE;
	}
	private function getState()
	{
		return $this->stateValid;
	}
	private function setState( $value )
	{
		$this->stateValid = $value;
	}

	// main algorithm
	// => input : variables filtered
	// => action : read cookie, read database, database logging, cookie writing
	function main()
	{
		$this->initProcess();

		if( $this->processVisit() )
		{
			$visit = new Piwik_LogStats_Visit;
			$visit->handle();
		}
		$this->endProcess();
	}

	// display the logo or pixel 1*1 GIF
	// or a marketing page if no parameters in the url
	// or redirect to a url (transmit the cookie as well)
	// or load a URL (rss feed) (transmit the cookie as well)
	private function endProcess()
	{
		switch($this->getState())
		{
			case self::LOGGING_DISABLE:
				printDebug("Logging disabled, display transparent logo");
			break;
			case self::NO_GET_VARIABLE:
				printDebug("No get variables => piwik page");
			break;
			case self::NOTHING_TO_NOTICE:
			default:
				printDebug("Nothing to notice => default behaviour");
			break;
		}
		printDebug("End of the page.");
	}
}

$process = new Piwik_LogStats;
$process->main();

ob_end_flush();
?>||||||||	public function save()
	{
		$this->setP3PHeader();
		$this->setCookie( $this->name, $this->generateContentString(), $this->expire);
	}

	/**
	 * Load the cookie content into a php array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR)))))