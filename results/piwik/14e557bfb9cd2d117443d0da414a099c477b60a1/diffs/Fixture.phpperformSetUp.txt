    public function performSetUp($setupEnvironmentOnly = false)
    {
        try {
            if ($this->createConfig) {
                Config::getInstance()->setTestEnvironment();
            }

            $this->dbName = $this->getDbName();

            if ($this->persistFixtureData) {
                $this->dropDatabaseInSetUp = false;
                $this->dropDatabaseInTearDown = false;
                $this->overwriteExisting = false;
                $this->removeExistingSuperUser = false;

                Config::getInstance()->database_tests['dbname'] = Config::getInstance()->database['dbname'] = $this->dbName;

                $this->getTestEnvironment()->dbName = $this->dbName;
            }

            if ($this->dbName === false) { // must be after test config is created
                $this->dbName = Config::getInstance()->database['dbname'];
            }

            static::connectWithoutDatabase();

            if ($this->dropDatabaseInSetUp
                || $this->resetPersistedFixture
            ) {
                $this->dropDatabase();
            }

            DbHelper::createDatabase($this->dbName);
            DbHelper::disconnectDatabase();

            // reconnect once we're sure the database exists
            Config::getInstance()->database['dbname'] = $this->dbName;
            Db::createDatabaseObject();

            Db::get()->query("SET wait_timeout=28800;");

            DbHelper::createTables();

            Manager::getInstance()->unloadPlugins();

        } catch (Exception $e) {
            static::fail("TEST INITIALIZATION FAILED: " . $e->getMessage() . "\n" . $e->getTraceAsString());
        }

        include "DataFiles/SearchEngines.php";
        include "DataFiles/Socials.php";
        include "DataFiles/Languages.php";
        include "DataFiles/Countries.php";
        include "DataFiles/Currencies.php";
        include "DataFiles/LanguageToCountry.php";
        include "DataFiles/Providers.php";

        if (!$this->isFixtureSetUp()) {
            DbHelper::truncateAllTables();
        }

        static::createAccessInstance();

        // We need to be SU to create websites for tests
        Access::getInstance()->setSuperUserAccess();

        Cache::deleteTrackerCache();

        static::loadAllPlugins($this->getTestEnvironment(), $this->testCaseClass, $this->extraPluginsToLoad);

        self::updateDatabase();

        self::installAndActivatePlugins();

        $_GET = $_REQUEST = array();
        $_SERVER['HTTP_REFERER'] = '';

        // Make sure translations are loaded to check messages in English
        if ($this->loadTranslations) {
            Translate::reloadLanguage('en');
            APILanguageManager::getInstance()->setLanguageForUser('superUserLogin', 'en');
        }

        FakeAccess::$superUserLogin = 'superUserLogin';

        SettingsPiwik::$cachedKnownSegmentsToArchive = null;
        CacheFile::$invalidateOpCacheBeforeRead = true;

        if ($this->configureComponents) {
            IPAnonymizer::deactivate();
            DoNotTrackHeaderChecker::deactivate();
        }

        if ($this->createSuperUser) {
            self::createSuperUser($this->removeExistingSuperUser);
        }

        if ($setupEnvironmentOnly) {
            return;
        }

        $this->getTestEnvironment()->save();
        $this->getTestEnvironment()->executeSetupTestEnvHook();
        Piwik_TestingEnvironment::addSendMailHook();

        if ($this->overwriteExisting
            || !$this->isFixtureSetUp()
        ) {
            $this->setUp();

            $this->markFixtureSetUp();
            $this->log("Database {$this->dbName} marked as successfully set up.");
        } else {
            $this->log("Using existing database {$this->dbName}.");
        }
    }

||||||||    public function performSetUp($setupEnvironmentOnly = false)
    {
        try {
            if ($this->createConfig) {
                Config::getInstance()->setTestEnvironment();
            }

            $this->dbName = $this->getDbName();

            if ($this->persistFixtureData) {
                $this->dropDatabaseInSetUp = false;
                $this->dropDatabaseInTearDown = false;
                $this->overwriteExisting = false;
                $this->removeExistingSuperUser = false;

                Config::getInstance()->database_tests['dbname'] = Config::getInstance()->database['dbname'] = $this->dbName;

                $this->getTestEnvironment()->dbName = $this->dbName;
            }

            if ($this->dbName === false) { // must be after test config is created
                $this->dbName = Config::getInstance()->database['dbname'];
            }

            static::connectWithoutDatabase();

            if ($this->dropDatabaseInSetUp
                || $this->resetPersistedFixture
            ) {
                $this->dropDatabase();
            }

            DbHelper::createDatabase($this->dbName);
            DbHelper::disconnectDatabase();

            // reconnect once we're sure the database exists
            Config::getInstance()->database['dbname'] = $this->dbName;
            Db::createDatabaseObject();

            Db::get()->query("SET wait_timeout=28800;");

            DbHelper::createTables();

            Manager::getInstance()->unloadPlugins();

        } catch (Exception $e) {
            static::fail("TEST INITIALIZATION FAILED: " . $e->getMessage() . "\n" . $e->getTraceAsString());
        }

        include "DataFiles/SearchEngines.php";
        include "DataFiles/Socials.php";
        include "DataFiles/Languages.php";
        include "DataFiles/Countries.php";
        include "DataFiles/Currencies.php";
        include "DataFiles/LanguageToCountry.php";
        include "DataFiles/Providers.php";

        if (!$this->isFixtureSetUp()) {
            DbHelper::truncateAllTables();
        }

        static::createAccessInstance();

        // We need to be SU to create websites for tests
        Access::getInstance()->setSuperUserAccess();

        Cache::deleteTrackerCache();

        static::loadAllPlugins($this->getTestEnvironment(), $this->testCaseClass, $this->extraPluginsToLoad);

        self::updateDatabase();

        self::installAndActivatePlugins();

        $_GET = $_REQUEST = array();
        $_SERVER['HTTP_REFERER'] = '';

        // Make sure translations are loaded to check messages in English
        if ($this->loadTranslations) {
            Translate::reloadLanguage('en');
            APILanguageManager::getInstance()->setLanguageForUser('superUserLogin', 'en');
        }

        FakeAccess::$superUserLogin = 'superUserLogin';

        SettingsPiwik::$cachedKnownSegmentsToArchive = null;
        CacheFile::$invalidateOpCacheBeforeRead = true;

        if ($this->configureComponents) {
            IPAnonymizer::deactivate();
            $dntChecker = new DoNotTrackHeaderChecker();
            $dntChecker->deactivate();
        }

        if ($this->createSuperUser) {
            self::createSuperUser($this->removeExistingSuperUser);
        }

        if ($setupEnvironmentOnly) {
            return;
        }

        $this->getTestEnvironment()->save();
        $this->getTestEnvironment()->executeSetupTestEnvHook();
        Piwik_TestingEnvironment::addSendMailHook();

        if ($this->overwriteExisting
            || !$this->isFixtureSetUp()
        ) {
            $this->setUp();

            $this->markFixtureSetUp();
            $this->log("Database {$this->dbName} marked as successfully set up.");
        } else {
            $this->log("Using existing database {$this->dbName}.");
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_STATIC_CALL))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_STATIC_CALL))
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_PROP
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_STATIC_CALL))
                                (SCALAR))))))
            (AST_STATIC_CALL)
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_STATIC_CALL)
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_STATIC_CALL))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_STATIC_CALL)
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)))
            (AST_STATIC_CALL)
            (AST_METHOD_CALL
                (AST_STATIC_CALL)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_STATIC_CALL))))
    (AST_STATIC_CALL)
    (AST_METHOD_CALL
        (AST_STATIC_CALL))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL)
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_STATIC_CALL))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_STATIC_CALL))
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_PROP
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONST))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_STATIC_CALL))
                                (SCALAR))))))
            (AST_STATIC_CALL)
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_STATIC_CALL)
            (AST_ASSIGN
                (AST_DIM
                    (AST_PROP
                        (AST_STATIC_CALL))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_STATIC_CALL)
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)))
            (AST_STATIC_CALL)
            (AST_METHOD_CALL
                (AST_STATIC_CALL)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_STATIC_CALL))))
    (AST_STATIC_CALL)
    (AST_METHOD_CALL
        (AST_STATIC_CALL))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_STATIC_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))))))