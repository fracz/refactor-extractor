	static public function databaseInsertBatch($tableName, $fields, $values)
    {
        $fieldList = '('.join(',', $fields).')';

        try {
//        	throw new Exception('');
	        $filePath = PIWIK_USER_PATH . '/' . Piwik_AssetManager::MERGED_FILE_DIR . $tableName . '.csv';

	        if (Piwik_Common::isWindows()) {
	            // On windows, MySQL expects slashes as directory separators
	            $filePath = str_replace('\\', '/', $filePath);
	        }

	        // Set up CSV delimiters, quotes, etc
	        $delim = "\t";
	        $quote = '"';
	        $eol   = "\r\n";
	        $null  = 'NULL';

	        $fp = fopen($filePath, 'wb');
	        if (!$fp)
	        {
	            throw new Exception('Error creating the tmp file '.$filePath.', please check that the webserver has write permission to write this file.');
	        }

	        @chmod($filePath, 0777);

	        foreach ($values as $row)
	        {
	            $output = '';
	            foreach($row as $value)
	            {
	                if(!isset($value) || is_null($value) || $value === false)
	                {
	                    $output .= $null.$delim;
	                }
	                else
	                {
	                    $output .= $quote.$value.$quote.$delim;
	                }
	            }
	            // Replace delim with eol
	            unset($row[strlen($output)-strlen($delim)]);
	            $output .= $eol;

	            $ret = fwrite($fp, $output);
	            if (!$ret) {
	                fclose($fp);
	                unlink($filePath);
	                return MAX::raiseError('Error writing to the tmp file '.$filePath.' containing the batch INSERTs.', PEAR_ERROR_RETURN);
	            }
	        }
	        fclose($fp);

	        $local = '';
	        // we put the LOCAL keyword only when the server is actually remote
	        // otherwise, it is not necessary and it might actually trigger a known PHP BUG
	        // http://bugs.php.net/bug.php?id=54158
	        // If this php bug is triggered, then the code will fallback to the Plain insert
	        $dbHost = Zend_Registry::get('config')->database->host;
	        if(!in_array($dbHost, array('127.0.0.1', 'localhost')))
	        {
	        	$local = 'LOCAL';
	        }

			$query = "
	            LOAD DATA $local INFILE
	                '$filePath'
	            INTO TABLE
	                ".$tableName."
	            FIELDS TERMINATED BY
	                '".$delim."'
	            ENCLOSED BY
	                '".$quote."'
	            ESCAPED BY
	                ''
	            LINES TERMINATED BY
	                \"".$eol."\"
	        	$fieldList
	        ";
	        $result = @Piwik_Query($query);
	        @unlink($filePath);

	        if(empty($result)) {
	        	throw new Exception("LOAD DATA INFILE failed!");
	        }
	        return true;
        } catch(Exception $e) {
        	Piwik::log("'LOAD DATA INFILE failed or not supported, falling back to normal INSERTs... Error was:" . $e->getMessage(), Piwik_Log::WARN);
        	self::databaseInsertIterate($tableName, $fields, $values);
        }
        return false;
    }

    /**
     * NOTE: you should use databaseInsertBatch() which will fallback to this function is LOAD DATA INFILE not available
     */
||||||||	static public function databaseInsertBatch($tableName, $fields, $values)
    {
        $fieldList = '('.join(',', $fields).')';

        try {
//        	throw new Exception('');
	        $filePath = PIWIK_USER_PATH . '/' . Piwik_AssetManager::MERGED_FILE_DIR . $tableName . '-'.Piwik_Common::generateUniqId().'.csv';

	        if (Piwik_Common::isWindows()) {
	            // On windows, MySQL expects slashes as directory separators
	            $filePath = str_replace('\\', '/', $filePath);
	        }

	        // Set up CSV delimiters, quotes, etc
	        $delim = "\t";
	        $quote = '"';
	        $eol   = "\r\n";
	        $null  = 'NULL';

	        $fp = fopen($filePath, 'wb');
	        if (!$fp)
	        {
	            throw new Exception('Error creating the tmp file '.$filePath.', please check that the webserver has write permission to write this file.');
	        }

	        @chmod($filePath, 0777);

	        foreach ($values as $row)
	        {
	            $output = '';
	            foreach($row as $value)
	            {
	                if(!isset($value) || is_null($value) || $value === false)
	                {
	                    $output .= $null.$delim;
	                }
	                else
	                {
	                    $output .= $quote.$value.$quote.$delim;
	                }
	            }
	            // Replace delim with eol
	            unset($row[strlen($output)-strlen($delim)]);
	            $output .= $eol;

	            $ret = fwrite($fp, $output);
	            if (!$ret) {
	                fclose($fp);
	                unlink($filePath);
	                throw new Exception('Error writing to the tmp file '.$filePath.' containing the batch INSERTs.');
	            }
	        }
	        fclose($fp);

	        $local = '';
	        // we put the LOCAL keyword only when the server is actually remote
	        // otherwise, it is not necessary and it might actually trigger a known PHP BUG
	        // http://bugs.php.net/bug.php?id=54158
	        // If this php bug is triggered, then the code will fallback to the Plain insert
	        $dbHost = Zend_Registry::get('config')->database->host;
	        if(!in_array($dbHost, array('127.0.0.1', 'localhost')))
	        {
	        	$local = 'LOCAL';
	        }

			$query = "
	            LOAD DATA $local INFILE
	                '$filePath'
	            REPLACE
	            INTO TABLE
	                ".$tableName."
	            FIELDS TERMINATED BY
	                '".$delim."'
	            ENCLOSED BY
	                '".$quote."'
	            ESCAPED BY
	                ''
	            LINES TERMINATED BY
	                \"".$eol."\"
	        	$fieldList
	        ";
	        $result = @Piwik_Query($query);
	        unlink($filePath);

	        if(empty($result)) {
	        	throw new Exception("LOAD DATA INFILE failed!");
	        }
	        return true;
        } catch(Exception $e) {
        	Piwik::log("'LOAD DATA INFILE failed or not supported, falling back to normal INSERTs... Error was:" . $e->getMessage(), Piwik_Log::WARN);
        	self::databaseInsertIterate($tableName, $fields, $values);
        }
        return false;
    }

    /**
     * NOTE: you should use databaseInsertBatch() which will fallback to this function is LOAD DATA INFILE not available
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_CALL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))))))
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_UNARY_OP
                                                (AST_ISSET
                                                    (AST_VAR)))
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CONST)))
                                    (
                                        (AST_ASSIGN_OP
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_VAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN_OP
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (AST_VAR))
                                                    (AST_VAR))
                                                (AST_VAR))))))))
                    (AST_UNSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_RETURN
                                    (AST_STATIC_CALL
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_CONST)))))))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_PROP
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR))
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_RETURN
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (AST_VAR))
                            (SCALAR))
                        (AST_STATIC_CALL))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_CALL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))))))
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_UNARY_OP
                                                (AST_ISSET
                                                    (AST_VAR)))
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_CONST)))
                                    (
                                        (AST_ASSIGN_OP
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_VAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN_OP
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (AST_VAR))
                                                    (AST_VAR))
                                                (AST_VAR))))))))
                    (AST_UNSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_VAR))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (SCALAR))))))))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_PROP
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR)
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_VAR))
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_EMPTY
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_RETURN
                (AST_CONST)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))