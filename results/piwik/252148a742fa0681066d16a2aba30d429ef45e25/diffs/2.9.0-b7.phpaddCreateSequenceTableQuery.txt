    private static function addCreateSequenceTableQuery($sql)
    {
        $dbSettings = new Db\Settings();
        $engine = $dbSettings->getEngine();
        $table  = self::getSequenceTableName();

        $query = "CREATE TABLE `$table` (
                `name` VARCHAR(120) NOT NULL,
                `value` BIGINT(20) UNSIGNED NOT NULL,
                PRIMARY KEY(`name`)
        ) ENGINE=$engine DEFAULT CHARSET=utf8";

        $sql[$query] = 1050;

        return $sql;
    }

||||||||    private function addCreateSequenceTableQuery($sql)
    {
        $sql[] = $this->migration->db->createTable($this->sequenceTable, array(
           'name' => 'VARCHAR(120) NOT NULL',
           'value' => 'BIGINT(20) UNSIGNED NOT NULL',
        ), $primary = 'name');

        return $sql;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (AST_VAR))
        (SCALAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_PROP
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))