    private function initLog()
    {
        $config = Config::getInstance();
        /**
         * access a property that is not overriden by TestingEnvironment before accessing log as the
         * log section is used in TestingEnvironment. Otherwise access to magic __get('log') fails in
         * TestingEnvironment as it tries to acccess it already here with __get('log').
         * $config->log ==> __get('log') ==> Config.createConfigInstance ==> nested __get('log') ==> returns null
         */
        $initConfigToPreventErrorWhenAccessingLog = $config->mail;

        $log = $config->log;
        $log['log_only_when_debug_parameter'] = 0;
        $log[\Piwik\Log::LOG_WRITERS_CONFIG_OPTION] = array("screen");

        if (!empty($_GET['forcelogtoscreen'])) {
            Log::getInstance()->addLogWriter('screen');
        }

        // Make sure we log at least INFO (if logger is set to DEBUG then keep it)
        $logLevel = Log::getInstance()->getLogLevel();
        if ($logLevel != Log::VERBOSE
            && $logLevel != Log::DEBUG
        ) {
            Log::getInstance()->setLogLevel(Log::INFO);
        }

        $config->log = $log;
    }

    /**
     * Script does run on http:// ONLY if the SU token is specified
     */
||||||||    private function initLog()
    {
        $config = Config::getInstance();

        $log = $config->log;
        $log['log_only_when_debug_parameter'] = 0;
        $log[Log::LOG_WRITERS_CONFIG_OPTION][] = "screen";

        $config->log = $log;

        // Make sure we log at least INFO (if logger is set to DEBUG then keep it)
        $logLevel = Log::getInstance()->getLogLevel();
        if ($logLevel < Log::INFO) {
            Log::getInstance()->setLogLevel(Log::INFO);
        }
    }

    /**
     * Script does run on http:// ONLY if the SU token is specified
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR)))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (NULL))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))))))