||||||||	private function checkNoDataChanges()
	{
		// 11 visits total w/ 2 actions per visit & 2 conversions per visit. 1 e-commerce order per visit.
		$this->assertEqual(11, $this->getTableCount('log_visit'));
		$this->assertEqual(22, $this->getTableCount('log_conversion'));
		$this->assertEqual(22, $this->getTableCount('log_link_visit_action'));
		$this->assertEqual(11, $this->getTableCount('log_conversion_item'));

		$archiveTables = $this->getArchiveTableNames();

		// 2 entries per period w/ visits (5 for each metric) + 1 entry for every period in the month (the 'done' rows)
		$janMetricCount = self::JAN_METRIC_ARCHIVE_COUNT * 5 + self::TOTAL_JAN_ARCHIVE_COUNT;
		$this->assertEqual($janMetricCount, $this->getTableCount($archiveTables['numeric'][0])); // January

		$febMetricCount = self::FEB_METRIC_ARCHIVE_COUNT * 5 + self::TOTAL_FEB_ARCHIVE_COUNT;
		$this->assertEqual($febMetricCount, $this->getTableCount($archiveTables['numeric'][1])); // February

		// 1 entry per period w/ visits
		$this->assertEqual(self::JAN_METRIC_ARCHIVE_COUNT, $this->getTableCount($archiveTables['blob'][0])); // January
		$this->assertEqual(self::FEB_METRIC_ARCHIVE_COUNT, $this->getTableCount($archiveTables['blob'][1])); // February
	}

	/**
	 * Helper method. Performs checks after reports are purged. Checks that the january numeric table
	 * was dropped, that the february metric & blob tables are unaffected, and that the january blob
	 * table has a certain number of blobs.
	 */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))))))