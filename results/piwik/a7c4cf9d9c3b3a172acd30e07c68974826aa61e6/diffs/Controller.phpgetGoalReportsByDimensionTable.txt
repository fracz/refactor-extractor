||||||||	private function getGoalReportsByDimensionTable( $conversions, $ecommerce = false, $cartNbConversions = false )
	{
		$preloadAbandonedCart = $cartNbConversions !== false && $conversions == 0;

		$goalReportsByDimension = new Piwik_View_ReportsByDimension();

		// add ecommerce reports
		$ecommerceCustomParams = array();
		if ($ecommerce)
		{
			if ($preloadAbandonedCart)
			{
				$ecommerceCustomParams['viewDataTable'] = 'ecommerceAbandonedCart';
				$ecommerceCustomParams['filterEcommerce'] = 2;
			}

			$goalReportsByDimension->addReport(
				'Goals_EcommerceReports', 'Goals_ProductSKU', 'Goals.getItemsSku', $ecommerceCustomParams);
			$goalReportsByDimension->addReport(
				'Goals_EcommerceReports', 'Goals_ProductName', 'Goals.getItemsName', $ecommerceCustomParams);
			$goalReportsByDimension->addReport(
				'Goals_EcommerceReports', 'Goals_ProductCategory', 'Goals.getItemsCategory', $ecommerceCustomParams);
			$goalReportsByDimension->addReport(
				'Goals_EcommerceReports', 'Goals_EcommerceLog', 'Goals.getEcommerceLog', $ecommerceCustomParams);
		}

		if ($conversions > 0)
		{
			// for non-Goals reports, we show the goals table
			$customParams = $ecommerceCustomParams // TODO: not sure if this is necessary. only here to
												   // replicate logic of old code in table_by_dimension.tpl
						  + array('viewDataTable' => 'tableGoals', 'documentationForGoalsPage' => '1');

			if (Piwik_Common::getRequestVar('idGoal', '') === '') // if no idGoal, use 0 for overview
			{
				$customParams['idGoal'] = '0'; // NOTE: Must be string! Otherwise Piwik_View_HtmlTable_Goals fails.
			}

			$allReports = Piwik_Goals::getReportsWithGoalMetrics();
			foreach ($allReports as $category => $reports)
			{
				$categoryText = Piwik_Translate('Goals_ViewGoalsBy', $category);
				foreach ($reports as $report)
				{
					$goalReportsByDimension->addReport(
						$categoryText, $report['name'], $report['module'].'.'.$report['action'], $customParams);
				}
			}
		}

		return $goalReportsByDimension->render();
	}
}


// Used so that the template knows which datatable is being currently viewed
class Piwik_ViewDataTable_HtmlTable_EcommerceOrder extends Piwik_ViewDataTable_HtmlTable {
	protected function getViewDataTableId()
	{
		return Piwik_Archive::LABEL_ECOMMERCE_ORDER;
	}
}
class Piwik_ViewDataTable_HtmlTable_EcommerceAbandonedCart extends Piwik_ViewDataTable_HtmlTable {
	protected function getViewDataTableId()
	{
		return Piwik_Archive::LABEL_ECOMMERCE_CART;
	}
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))