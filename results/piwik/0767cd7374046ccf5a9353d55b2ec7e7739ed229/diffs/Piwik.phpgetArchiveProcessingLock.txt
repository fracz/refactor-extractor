	static public function getArchiveProcessingLock($idsite, $period)
	{
		$lockName = self::getArchiveProcessingLockName($idsite, $period);
		/*
		 * the server (e.g., shared hosting) may have a low wait timeout
		 * so instead of a single GET_LOCK() with a 30 second timeout,
		 * we use a 1 second timeout and loop, to avoid losing our MySQL
		 * connection
		 */
		$sql = 'SELECT GET_LOCK(?, 1)';

		$db = Zend_Registry::get('db');

		$maxRetries = 30;
		while ($maxRetries > 0)
		{
			if ($db->fetchOne($sql, array($lockName)) == '1')
			{
				return true;
			}
			$maxRetries--;
		}
		return false;
	}

	/**
	 * Release an advisory lock
	 *
	 * @param int $idsite
	 * @param Piwik_Period $period
	 * @return bool True if lock released; false otherwise
	 */
||||||||	static public function getArchiveProcessingLock($idsite, $period, $segment)
	{
		$lockName = self::getArchiveProcessingLockName($idsite, $period, $segment);
		/*
		 * the server (e.g., shared hosting) may have a low wait timeout
		 * so instead of a single GET_LOCK() with a 30 second timeout,
		 * we use a 1 second timeout and loop, to avoid losing our MySQL
		 * connection
		 */
		$sql = 'SELECT GET_LOCK(?, 1)';

		$db = Zend_Registry::get('db');

		$maxRetries = 30;
		while ($maxRetries > 0)
		{
			if ($db->fetchOne($sql, array($lockName)) == '1')
			{
				return true;
			}
			$maxRetries--;
		}
		return false;
	}

	/**
	 * Release an advisory lock
	 *
	 * @param int $idsite
	 * @param Piwik_Period $period
	 * @return bool True if lock released; false otherwise
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL)))))
                        (SCALAR))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_POST_DEC
                (AST_VAR))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (NULL)))))
                        (SCALAR))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_POST_DEC
                (AST_VAR))))
    (AST_RETURN
        (AST_CONST)))