    public function testViewGeneratesCorrectLookingYAMLForCore()
    {
        $view = new TravisYmlView();
        // no setPlugin call here signifies generating for core
        $view->processExistingTravisYml(PIWIK_INCLUDE_PATH . '/.travis.yml');
        $view->setExtraGlobalEnvVars(array('secure: artifactspass', 'secure: githubtoken'));
        $view->setGenerateYmlCommand('./console generate:travis-yml \'arg1\' arg2');
        $output = $view->render();

        $yaml = Spyc::YAMLLoadString($output);

        $this->assertNotEmpty($yaml['env']);
        $this->assertNotEmpty($yaml['env']['global']);

        $this->assertBuildSectionsNotEmpty($yaml);

        $this->assertViewDoesNotUsePluginSpecifiedTravisCommands($yaml);
    }

||||||||    public function testViewGeneratesCorrectLookingYAMLForCore()
    {
        $view = new TravisYmlView();
        $view->setGenerationMode('core');

        // no setPlugin call here signifies generating for core
        $parser = new Parser();
        $existingSections = $parser->processExistingTravisYml(PIWIK_INCLUDE_PATH . '/plugins/TestRunner/tests/resources/test.travis.yml');
        $view->setExistingSections($existingSections);

        $view->setExtraGlobalEnvVars(array('secure: artifactspass', 'secure: githubtoken'));
        $view->setGenerateYmlCommand('./console generate:travis-yml \'arg1\' arg2');
        $output = $view->render();

        $yaml = Spyc::YAMLLoadString($output);

        $this->assertNotEmpty($yaml['env']);
        $this->assertNotEmpty($yaml['env']['global']);

        $this->assertBuildSectionsNotEmpty($yaml);

        $this->assertViewDoesNotUsePluginSpecifiedTravisCommands($yaml);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))