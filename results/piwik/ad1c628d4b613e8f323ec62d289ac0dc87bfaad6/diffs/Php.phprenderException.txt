	function renderException()
	{
		$exceptionMessage = self::renderHtmlEntities($this->exception->getMessage());

		$return = array('result' => 'error', 'message' => $exceptionMessage);

		if($this->serialize)
		{
			$return = serialize($return);
		}

		return $this->output($return);
	}

	/**
	 * Produces a flat php array from the DataTable, putting "columns" and "metadata" on the same level.
	 *
	 * For example, when  a originalRender() would be
	 * 	array( 'columns' => array( 'col1_name' => value1, 'col2_name' => value2 ),
	 * 	       'metadata' => array( 'metadata1_name' => value_metadata) )
	 *
	 * a flatRender() is
	 * 	array( 'col1_name' => value1,
	 * 	       'col2_name' => value2,
	 * 	       'metadata1_name' => value_metadata )
	 *
	 * @return array Php array representing the 'flat' version of the datatable
	 *
	 */
||||||||	function renderException()
	{
		$this->renderHeader();

		$exceptionMessage = self::renderHtmlEntities($this->exception->getMessage());

		$return = array('result' => 'error', 'message' => $exceptionMessage);

		if($this->serialize)
		{
			$return = serialize($return);
		}

		return $return;
	}

	/**
	 * Produces a flat php array from the DataTable, putting "columns" and "metadata" on the same level.
	 *
	 * For example, when  a originalRender() would be
	 * 	array( 'columns' => array( 'col1_name' => value1, 'col2_name' => value2 ),
	 * 	       'metadata' => array( 'metadata1_name' => value_metadata) )
	 *
	 * a flatRender() is
	 * 	array( 'col1_name' => value1,
	 * 	       'col2_name' => value2,
	 * 	       'metadata1_name' => value_metadata )
	 *
	 * @return array Php array representing the 'flat' version of the datatable
	 *
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))