    static function getCacheWebsiteAttributes($idSite)
    {
        if($idSite == 'all') {
            return array();
        }
        $idSite = (int)$idSite;
        if($idSite <= 0) {
            return array();
        }

        $cache = self::getInstance();
        if (($cacheContent = $cache->get($idSite)) !== false) {
            return $cacheContent;
        }

        Tracker::initCorePiwikInTrackerMode();

        // save current user privilege and temporarily assume Super User privilege
        $isSuperUser = Piwik::hasUserSuperUserAccess();
        Piwik::setUserHasSuperUserAccess();

        $content = array();

        /**
         * Triggered to get the attributes of a site entity that might be used by the
         * Tracker.
         *
         * Plugins add new site attributes for use in other tracking events must
         * use this event to put those attributes in the Tracker Cache.
         *
         * **Example**
         *
         *     public function getSiteAttributes($content, $idSite)
         *     {
         *         $sql = "SELECT info FROM " . Common::prefixTable('myplugin_extra_site_info') . " WHERE idsite = ?";
         *         $content['myplugin_site_data'] = Db::fetchOne($sql, array($idSite));
         *     }
         *
         * @param array &$content Array mapping of site attribute names with values.
         * @param int $idSite The site ID to get attributes for.
         */
        Piwik::postEvent('Tracker.Cache.getSiteAttributes', array(&$content, $idSite));
        Common::printDebug("Website $idSite tracker cache was re-created.");

        // restore original user privilege
        Piwik::setUserHasSuperUserAccess($isSuperUser);

        // if nothing is returned from the plugins, we don't save the content
        // this is not expected: all websites are expected to have at least one URL
        if (!empty($content)) {
            $cache->set($idSite, $content);
        }
        return $content;
    }

    /**
     * Clear general (global) cache
     */
||||||||    static function getCacheWebsiteAttributes($idSite)
    {
        if ('all' == $idSite) {
            return array();
        }

        $idSite = (int)$idSite;
        if ($idSite <= 0) {
            return array();
        }

        $cache        = self::getInstance();
        $cacheContent = $cache->get($idSite);

        if (false !== $cacheContent) {
            return $cacheContent;
        }

        Tracker::initCorePiwikInTrackerMode();

        // save current user privilege and temporarily assume Super User privilege
        $isSuperUser = Piwik::hasUserSuperUserAccess();
        Piwik::setUserHasSuperUserAccess();

        $content = array();

        /**
         * Triggered to get the attributes of a site entity that might be used by the
         * Tracker.
         *
         * Plugins add new site attributes for use in other tracking events must
         * use this event to put those attributes in the Tracker Cache.
         *
         * **Example**
         *
         *     public function getSiteAttributes($content, $idSite)
         *     {
         *         $sql = "SELECT info FROM " . Common::prefixTable('myplugin_extra_site_info') . " WHERE idsite = ?";
         *         $content['myplugin_site_data'] = Db::fetchOne($sql, array($idSite));
         *     }
         *
         * @param array &$content Array mapping of site attribute names with values.
         * @param int $idSite The site ID to get attributes for.
         */
        Piwik::postEvent('Tracker.Cache.getSiteAttributes', array(&$content, $idSite));
        Common::printDebug("Website $idSite tracker cache was re-created.");

        // restore original user privilege
        Piwik::setUserHasSuperUserAccess($isSuperUser);

        // if nothing is returned from the plugins, we don't save the content
        // this is not expected: all websites are expected to have at least one URL
        if (!empty($content)) {
            $cache->set($idSite, $content);
        }

        return $content;
    }

    /**
     * Clear general (global) cache
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))