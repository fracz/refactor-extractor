||||||||	public function __construct($request, $outputFormat)
	{
		$this->request = $request;
		$this->outputFormat = $outputFormat;
	}

	/**
	 * This method processes the data resulting from the API call.
	 *
	 * - If the data resulted from the API call is a Piwik_DataTable then
	 * 		- we apply the standard filters if the parameters have been found
	 * 		  in the URL. For example to offset,limit the Table you can add the following parameters to any API
	 *  	  call that returns a DataTable: filter_limit=10&filter_offset=20
	 * 		- we apply the filters that have been previously queued on the DataTable
	 *        @see Piwik_DataTable::queueFilter()
	 * 		- we apply the renderer that generate the DataTable in a given format (XML, PHP, HTML, JSON, etc.)
	 * 		  the format can be changed using the 'format' parameter in the request.
	 *        Example: format=xml
	 *
	 * - If there is nothing returned (void) we display a standard success message
	 *
	 * - If there is a PHP array returned, we try to convert it to a dataTable
	 *   It is then possible to convert this datatable to any requested format (xml/etc)
	 *
	 * - If a bool is returned we convert to a string (true is displayed as 'true' false as 'false')
	 *
	 * - If an integer / float is returned, we simply return it
	 *
	 * @throws Exception If an object/resource is returned, if any of conversion fails, etc.
	 *
	 * @param mixed The initial returned value, before post process
	 * @return mixed Usually a string, but can still be a PHP data structure if the format requested is 'original'
	 */
||||||||||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))