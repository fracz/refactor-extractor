    public function main()
    {
        $this->checkPreconditions();

        try {
            $this->log(
                'Building package: '.$this->destinationFile->__toString(),
                Project::MSG_INFO
            );

            /**
             * Delete old package, if exists.
             */
            if ($this->destinationFile->exists()) {
                $this->destinationFile->delete();
            }
            $phar = $this->buildPhar();
            $phar->startBuffering();

            $baseDirectory = realpath($this->baseDirectory->getPath());

            foreach ($this->filesets as $fileset) {
                $this->log(
                    'Adding specified files in ' . $fileset->getDir($this->project) . ' to package',
                    Project::MSG_VERBOSE
                );

                if (Phar::NONE != $this->compression) {
                    foreach ($fileset as $file) {
                        $localName = substr($file, strlen($baseDirectory) + 1);
                        $phar->addFile($file, $localName);
                        $phar[$localName]->compress(Phar::GZ);
                    }
                } else {
                    $phar->buildFromIterator($fileset, $baseDirectory);
                }
            }

            $phar->stopBuffering();

            /**
             * File compression, if needed.
             */
            /*if (Phar::NONE != $this->compression) {
                $phar->compressFiles($this->compression);
            }*/
        } catch (Exception $e) {
            throw new BuildException(
                'Problem creating package: '.$e->getMessage(),
                $e,
                $this->getLocation()
            );
        }
    }

    /**
     * @throws BuildException
     */
||||||||    public function main()
    {
        $this->checkPreconditions();

        try {
            $this->log(
                'Building package: '.$this->destinationFile->__toString(),
                Project::MSG_INFO
            );

            $baseDirectory = realpath($this->baseDirectory->getPath());

            /**
             * Delete old package, if exists.
             */
            if ($this->destinationFile->exists()) {
                $this->destinationFile->delete();
            }
            $phar = $this->buildPhar();

            try {
                foreach ($this->filesets as $fileset) {
                    $this->log("Fileset " . $fileset->getDir($this->project) . " ... ", Project::MSG_VERBOSE);
                    $phar->buildFromIterator($fileset, $baseDirectory);
                }

                if (Phar::NONE != $this->compression) {
                    $phar->compressFiles($this->compression);
                }
            } catch (\RuntimeException $e) {
                $this->log('Most likely compression failed (known bug): ' . $e->getMessage());

                /**
                 * Delete old package, if exists.
                 */
                if ($this->destinationFile->exists()) {
                    $this->destinationFile->delete();
                }
                $phar = $this->buildPhar();
                $phar->startBuffering();

                foreach ($this->filesets as $fileset) {
                    $this->log(
                        'Adding specified files in ' . $fileset->getDir($this->project) . ' to package',
                        Project::MSG_VERBOSE
                    );

                    if (Phar::NONE != $this->compression) {
                        foreach ($fileset as $file) {
                            $localName = substr($file, strlen($baseDirectory) + 1);
                            $this->log($localName . "... ", Project::MSG_VERBOSE);
                            $phar->addFile($file, $localName);
                            $phar[$localName]->compress($this->compression);
                        }
                    } else {
                        $phar->buildFromIterator($fileset, $baseDirectory);
                    }
                }

                $phar->stopBuffering();
            }

            /**
             * File compression, if needed.
             */
            /*if (Phar::NONE != $this->compression) {
                $phar->compressFiles($this->compression);
            }*/
        } catch (Exception $e) {
            throw new BuildException(
                'Problem creating package: '.$e->getMessage(),
                $e,
                $this->getLocation()
            );
        }
    }

    /**
     * @throws BuildException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (AST_FOREACH
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR)))))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_FOREACH
                                    (AST_VAR)
                                    (AST_VAR)
                                    (NULL)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_BINARY_OP
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)))
                                                        (SCALAR)))))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_METHOD_CALL
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_VAR))
                                            (
                                                (AST_CLASS_CONST
                                                    (SCALAR))))))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_TRY
                (
                    (AST_FOREACH
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_PROP
                                                        (AST_VAR)))))
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_FOREACH
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_PROP
                                                                (AST_VAR)))))
                                                (SCALAR))
                                            (AST_CLASS_CONST
                                                (SCALAR))))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (
                                                (AST_FOREACH
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (NULL)
                                                    (
                                                        (AST_ASSIGN
                                                            (AST_VAR)
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR)
                                                                    (AST_BINARY_OP
                                                                        (AST_CALL
                                                                            (
                                                                                (AST_VAR)))
                                                                        (SCALAR)))))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (AST_BINARY_OP
                                                                    (AST_VAR)
                                                                    (SCALAR))
                                                                (AST_CLASS_CONST
                                                                    (SCALAR))))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)
                                                            (
                                                                (AST_VAR)
                                                                (AST_VAR)))
                                                        (AST_METHOD_CALL
                                                            (AST_DIM
                                                                (AST_VAR)
                                                                (AST_VAR))
                                                            (
                                                                (AST_PROP
                                                                    (AST_VAR))))))))
                                        (AST_IF_ELEM
                                            (NULL)
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR))))))))
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (NULL)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))
        (NULL)))