||||||||    private function compressEachFile($phar, $baseDirectory)
    {
        $phar->startBuffering();

        foreach ($this->filesets as $fileset) {
            $this->log(
                'Adding specified files in ' . $fileset->getDir($this->project) . ' to package',
                Project::MSG_VERBOSE
            );

            if (Phar::NONE != $this->compression) {
                foreach ($fileset as $file) {
                    $localName = substr($file, strlen($baseDirectory) + 1);
                    $this->log($localName . "... ", Project::MSG_VERBOSE);
                    $phar->addFile($file, $localName);
                    $phar[$localName]->compress($this->compression);
                }
            } else {
                $phar->buildFromIterator($fileset, $baseDirectory);
            }
        }

        $phar->stopBuffering();
    }

    /**
     * @param $phar
     * @param $baseDirectory
     */
||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (SCALAR)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CLASS_CONST
                                            (SCALAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)))