    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->detectMagento($output, true);
        if ($this->initMagento()) {
            $this->disableObservers();

            try {
                \Mage::dispatchEvent('shell_reindex_init_process');
                $indexCollection = $this->_getIndexerModel()->getProcessesCollection();
                foreach ($indexCollection as $indexer) {
                    $output->writeln(
                        '<info>Started reindex of: <comment>' . $indexer->getIndexerCode() . '</comment></info>'
                    );
                    /**
                     * Try to estimate runtime. If index was aborted or never created we have a timestamp < 0
                     */
                    $runtimeInSeconds = $this->getRuntimeInSeconds($indexer);
                    if ($runtimeInSeconds > 0) {
                        $estimatedEnd = new \DateTime('now', new \DateTimeZone('UTC'));
                        $estimatedEnd->add(new \DateInterval('PT' . $runtimeInSeconds . 'S'));
                        $output->writeln(
                            '<info>Estimated end: <comment>' . $estimatedEnd->format('Y-m-d H:i:s T') .
                            '</comment></info>'
                        );
                    }
                    $startTime = new \DateTime('now');
                    $dateTimeUtils = new \N98\Util\DateTime();
                    $indexer->reindexEverything();
                    \Mage::dispatchEvent($indexer->getIndexerCode() . '_shell_reindex_after');
                    $endTime = new \DateTime('now');
                    $output->writeln(
                        '<info>Successfully reindexed <comment>' . $indexer->getIndexerCode() .
                        '</comment> (Runtime: <comment>' . $dateTimeUtils->getDifferenceAsString(
                            $startTime,
                            $endTime
                        ) . '</comment>)</info>'
                    );
                }
                \Mage::dispatchEvent('shell_reindex_init_process');
            } catch (Exception $e) {
                \Mage::dispatchEvent('shell_reindex_init_process');
            }
        }
    }
}||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->detectMagento($output, true);
        if (!$this->initMagento()) {
            return;
        }

        $this->disableObservers();

        try {
            \Mage::dispatchEvent('shell_reindex_init_process');
            $indexCollection = $this->_getIndexerModel()->getProcessesCollection();
            foreach ($indexCollection as $indexer) {
                $output->writeln(
                    '<info>Started reindex of: <comment>' . $indexer->getIndexerCode() . '</comment></info>'
                );
                /**
                 * Try to estimate runtime. If index was aborted or never created we have a timestamp < 0
                 */
                $runtimeInSeconds = $this->getRuntimeInSeconds($indexer);
                if ($runtimeInSeconds > 0) {
                    $estimatedEnd = new \DateTime('now', new \DateTimeZone('UTC'));
                    $estimatedEnd->add(new \DateInterval('PT' . $runtimeInSeconds . 'S'));
                    $output->writeln(
                        '<info>Estimated end: <comment>' . $estimatedEnd->format('Y-m-d H:i:s T') .
                        '</comment></info>'
                    );
                }
                $startTime = new \DateTime('now');
                $dateTimeUtils = new \N98\Util\DateTime();
                $indexer->reindexEverything();
                \Mage::dispatchEvent($indexer->getIndexerCode() . '_shell_reindex_after');
                $endTime = new \DateTime('now');
                $output->writeln(
                    '<info>Successfully reindexed <comment>' . $indexer->getIndexerCode() .
                    '</comment> (Runtime: <comment>' . $dateTimeUtils->getDifferenceAsString(
                        $startTime,
                        $endTime
                    ) . '</comment>)</info>'
                );
            }
            \Mage::dispatchEvent('shell_reindex_init_process');
        } catch (Exception $e) {
            \Mage::dispatchEvent('shell_reindex_init_process');
        }
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_TRY
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))
                                            (SCALAR))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (
                                            (AST_ASSIGN
                                                (AST_VAR)
                                                (AST_NEW
                                                    (
                                                        (SCALAR)
                                                        (AST_NEW
                                                            (
                                                                (SCALAR))))))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_NEW
                                                        (
                                                            (AST_BINARY_OP
                                                                (AST_BINARY_OP
                                                                    (SCALAR)
                                                                    (AST_VAR))
                                                                (SCALAR))))))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_METHOD_CALL
                                                                (AST_VAR)
                                                                (
                                                                    (SCALAR))))
                                                        (SCALAR)))))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (SCALAR))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW))
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_STATIC_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR))))
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (SCALAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_VAR)
                                                        (AST_VAR))))
                                            (SCALAR))))))
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))))
                    (NULL))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_TRY
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (SCALAR)
                                            (AST_NEW
                                                (
                                                    (SCALAR))))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_NEW
                                            (
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (SCALAR))))
                                            (SCALAR)))))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW
                            (
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW
                            (
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR))))
                                (SCALAR))))))
            (AST_STATIC_CALL
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))))
        (NULL)))