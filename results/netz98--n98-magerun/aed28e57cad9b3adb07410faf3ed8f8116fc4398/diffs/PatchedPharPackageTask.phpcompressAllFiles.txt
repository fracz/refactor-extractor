    private function compressAllFiles(Phar $phar, $baseDirectory)
    {
        $total = 0;

        $phar->startBuffering();

        foreach ($this->filesets as $fileset) {
            $dir = $fileset->getDir($this->project);
            $msg = sprintf("Fileset %s ...", $dir);
            $this->log($msg, Project::MSG_VERBOSE);
            $added = $phar->buildFromIterator($fileset, $baseDirectory);
            $total += count($added);
        }

        $phar->stopBuffering();

        if (Phar::NONE === $this->compression) {
            return;
        }

        $msg = sprintf("Compressing %d files (compression: %s) ... ", $total, $this->getCompressionLabel());
        $this->log($msg, Project::MSG_VERBOSE);

        // safeguard open files soft limit
        if (function_exists('posix_getrlimit')) {
            $rlimit = posix_getrlimit();
            if ($rlimit['soft openfiles'] < ($total + 5)) {
                $msg = sprintf("Limit of openfiles (%d) is too low.", $rlimit['soft openfiles']);
                $this->log($msg, Project::MSG_VERBOSE);
            }
        }

        // safeguard compression
        try {
            $phar->compressFiles($this->compression);
        } catch (BadMethodCallException $e) {
            if ($e->getMessage() === 'unable to create temporary file') {
                $msg = sprintf("Info: Check openfiles limit it must be %d or higher", $total + 5);
                throw new BadMethodCallException($msg, 0, $e);
            }
            throw $e;
        }
    }
}||||||||||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR)))))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))))))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR)))))
                                (AST_THROW
                                    (AST_NEW
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR)))))))
                    (AST_THROW
                        (AST_VAR)))))
        (NULL)))||||||||