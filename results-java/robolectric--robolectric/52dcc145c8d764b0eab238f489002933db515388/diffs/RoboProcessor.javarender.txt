private void render() {
    // TODO: Because this was fairly simple to begin with I haven't
    // included a templating engine like Velocity but simply used
    // raw print() statements, in an effort to reduce the number of
    // dependencies that RAP has. However, if it gets too complicated
    // then using Velocity might be a good idea.
    String genFQ = shadowPackage + '.' + GEN_CLASS;
    messager.printMessage(Kind.NOTE, "Generating output file " + genFQ);
    final Filer filer = processingEnv.getFiler();
    try {
        JavaFileObject jfo = filer.createSourceFile(genFQ);
        PrintWriter writer = new PrintWriter(jfo.openWriter());
        try {
            writer.print("package " + shadowPackage + ";\n");
            for (String name : model.imports) {
                writer.println("import " + name + ';');
            }
            writer.println();
            writer.println("/**");
            writer.println(" * Shadow mapper. Automatically generated by the Robolectric Annotation Processor.");
            writer.println(" */");
            writer.println("@Generated(\"" + RoboProcessor.class.getCanonicalName() + "\")");
            writer.println("public class " + GEN_CLASS + " implements ShadowProvider {");
            writer.println();
            writer.print("  public static final Class<?>[] DEFAULT_SHADOW_CLASSES = {");
            boolean firstIteration = true;
            for (TypeElement shadow : model.shadowTypes.keySet()) {
                if (firstIteration) {
                    firstIteration = false;
                } else {
                    writer.print(",");
                }
                writer.print("\n    " + model.getReferentFor(shadow) + ".class");
            }
            writer.println("\n  };\n");
            for (Entry<TypeElement, TypeElement> entry : model.getShadowMap().entrySet()) {
                final TypeElement actualType = entry.getValue();
                if (!actualType.getModifiers().contains(Modifier.PUBLIC)) {
                    continue;
                }
                // Generics not handled specifically as yet.
                // int paramCount = 0;
                // StringBuilder builder = new StringBuilder("<");
                // for (TypeParameterElement typeParam : entry.getValue().getTypeParameters()) {
                // if (paramCount > 0) {
                // builder.append(',');
                // }
                // builder.append(typeParam).append(" extends ");
                // for (TypeMirror bound : typeParam.getBounds()) {
                // builder.append(bound).append(" & ");
                // }
                // paramCount++;
                // processingEnv.getElementUtils().printElements(writer, typeParam);
                // }
                // final String typeString = paramCount > 0 ? builder.append("> ").toString() : "";
                final String actual = model.getReferentFor(actualType);
                final String shadow = model.getReferentFor(entry.getKey());
                writer.println("  public static " + shadow + " shadowOf(" + actual + " actual) {");
                writer.println("    return (" + shadow + ") ShadowExtractor.extract(actual);");
                writer.println("  }");
                writer.println();
            }
            writer.println("  public void reset() {");
            for (Entry<TypeElement, ExecutableElement> entry : model.resetterMap.entrySet()) {
                writer.println("    " + model.getReferentFor(entry.getKey()) + "." + entry.getValue().getSimpleName() + "();");
            }
            writer.println("  }");
            writer.println('}');
        } finally {
            writer.close();
        }
        generateServiceLoaderMetadata(genFQ, filer);
    } catch (IOException e) {
        // TODO: Better error handling?
        throw new RuntimeException(e);
    }
}||||||||private void render() {
    final String fullyQualifiedClassName = shadowPackage + '.' + GEN_CLASS;
    generateShadowClass(processingEnv.getFiler(), fullyQualifiedClassName);
    generateServiceLoaderMetadata(processingEnv.getFiler(), fullyQualifiedClassName);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(CharLiteralExpr
							)
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ForeachStmt
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ContinueStmt
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(CharLiteralExpr
							)
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

