/**
 * You MUST perform any injector operations inside a synchronized(ContextScope.class) block that starts with
 * scope.enter(context) if working in a multithreaded environment
 *
 * @see ContextScope
 * @see ContextScopedRoboInjector
 * @see ContextScopedProvider
 * @param context the context to enter
 */
public void enter(Context context) {
    // BUG synchronizing on ContextScope.class may be overly conservative
    synchronized (ContextScope.class) {
        final Stack<Context> stack = getContextStack();
        final Map<Key<?>, Object> map = getOrCreateScopedObjectMap(context);
        if (deadToMe.contains(context.toString()))
            throw new UnsupportedOperationException(String.format("Attempt to enter scope for %s after onDestroy has already been called", context));
        // Mark this thread as for this context
        stack.push(context);
        // Add the context to the scope for key Context, Activity, etc.
        Class<?> c = context.getClass();
        do {
            map.put(Key.get(c), context);
            c = c.getSuperclass();
        } while (c != Object.class);
    }
}||||||||/**
 * You MUST perform any injector operations inside a synchronized(ContextScope.class) block that starts with
 * scope.enter(context) if working in a multithreaded environment
 *
 * @see ContextScope
 * @see ContextScopedRoboInjector
 * @see ContextScopedProvider
 * @param context the context to enter
 */
public void enter(Context context) {
    // BUG synchronizing on ContextScope.class may be overly conservative
    synchronized (ContextScope.class) {
        if (deadToMe.contains(context.toString()))
            throw new UnsupportedOperationException(String.format("Attempt to enter scope for %s after onDestroy has already been called", context));
        final Stack<Context> stack = getContextStack();
        final Map<Key<?>, Object> map = getOrCreateScopedObjectMap(context);
        // Mark this thread as for this context
        stack.push(context);
        // Add the context to the scope for key Context, Activity, etc.
        Class<?> c = context.getClass();
        do {
            map.put(Key.get(c), context);
            c = c.getSuperclass();
        } while (c != Object.class);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
					)
					LineComment
				)
				(DoStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(ClassExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
					)
					LineComment
				)
				(DoStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(ClassExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

