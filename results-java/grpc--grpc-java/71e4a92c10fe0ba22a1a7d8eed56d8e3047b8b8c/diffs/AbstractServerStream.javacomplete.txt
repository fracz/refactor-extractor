/**
 * The Stream is considered completely closed and there is no further opportunity for error. It
 * calls the listener's {@code closed()} if it was not already done by {@link #abortStream}. Note
 * that it is expected that either {@code closed()} or {@code abortStream()} was previously
 * called, since {@code closed()} is required for a normal stream closure and {@code
 * abortStream()} for abnormal.
 */
public void complete() {
    synchronized (stateLock) {
        if (listenerClosed) {
            return;
        }
        listenerClosed = true;
    }
    if (!gracefulClose) {
        listener.closed(new Status(Transport.Code.INTERNAL, "successful complete() without close()"));
        throw new IllegalStateException("successful complete() without close()");
    }
    listener.closed(Status.OK);
}||||||||/**
 * The Stream is considered completely closed and there is no further opportunity for error. It
 * calls the listener's {@code closed()} if it was not already done by {@link #abortStream}. Note
 * that it is expected that either {@code closed()} or {@code abortStream()} was previously
 * called, since {@code closed()} is required for a normal stream closure and {@code
 * abortStream()} for abnormal.
 */
public void complete() {
    synchronized (stateLock) {
        if (listenerClosed) {
            return;
        }
        listenerClosed = true;
    }
    if (!gracefulClose) {
        listener.closed(Status.INTERNAL.withDescription("successful complete() without close()"));
        throw new IllegalStateException("successful complete() without close()");
    }
    listener.closed(Status.OK);
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

