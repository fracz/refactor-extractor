/**
 * True return value indicates that the delayed transport is in a back-off interval (in
 * TRANSIENT_FAILURE), that all fail fast streams (including pending as well as new ones) should
 * fail immediately, and that non-fail fast streams can be created as {@link PendingStream} and
 * should keep pending during this back-off period.
 */
@VisibleForTesting
boolean isInBackoffPeriod() {
    synchronized (lock) {
        return backoffStatus != null;
    }
}||||||||/**
 * True return value indicates that the delayed transport is in a back-off interval (in
 * TRANSIENT_FAILURE), that all fail fast streams (including pending as well as new ones) should
 * fail immediately, and that non-fail fast streams can be created as {@link PendingStream} and
 * should keep pending during this back-off period.
 */
// TODO(zhangkun83): remove it once the LBv2 refactor is done.
@VisibleForTesting
final boolean isInBackoffPeriod() {
    synchronized (lock) {
        return backoffStatus != null;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ReturnStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ReturnStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	LineComment
)

