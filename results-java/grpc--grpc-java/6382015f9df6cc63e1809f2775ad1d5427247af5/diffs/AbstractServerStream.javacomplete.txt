/**
 * Indicates the stream is considered completely closed and there is no further opportunity for
 * error. It calls the listener's {@code closed()} if it was not already done by {@link
 * #abortStream}. Note that it is expected that either {@code closed()} or {@code abortStream()}
 * was previously called, since {@code closed()} is required for a normal stream closure and
 * {@code abortStream()} for abnormal.
 */
public void complete() {
    if (!gracefulClose) {
        closeListener(Status.INTERNAL.withDescription("successful complete() without close()"));
        throw new IllegalStateException("successful complete() without close()");
    }
    closeListener(Status.OK);
}||||||||/**
 * Indicates the stream is considered completely closed and there is no further opportunity for
 * error. It calls the listener's {@code closed()} if it was not already done by {@link
 * #transportReportStatus}.
 */
public void complete() {
    closeListener(Status.OK);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

