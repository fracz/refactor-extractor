/**
 * Aborts the stream with an error status, cleans up resources and notifies the listener if
 * necessary.
 *
 * <p>Unlike {@link #close(Status, Metadata.Trailers)}, this method is only called from the
 * transport. The transport should use this method instead of {@code close(Status)} for internal
 * errors to prevent exposing unexpected states and exceptions to the application.
 *
 * @param status the error status. Must not be Status.OK.
 * @param notifyClient true if the stream is still writable and you want to notify the client
 * about stream closure and send the status
 */
public final void abortStream(Status status, boolean notifyClient) {
    // TODO(user): Investigate whether we can remove the notification to the client
    // and rely on a transport layer stream reset instead.
    Preconditions.checkArgument(!status.isOk(), "status must not be OK");
    if (!listenerClosed) {
        listenerClosed = true;
        listener.closed(status);
    }
    if (notifyClient) {
        // TODO(user): Remove
        if (stashedTrailers == null) {
            stashedTrailers = new Metadata.Trailers();
        }
        writeStatusToTrailers(status);
        closeFramer(status);
    } else {
        dispose();
    }
}||||||||/**
 * Aborts the stream with an error status, cleans up resources and notifies the listener if
 * necessary.
 *
 * <p>Unlike {@link #close(Status, Metadata.Trailers)}, this method is only called from the
 * transport. The transport should use this method instead of {@code close(Status)} for internal
 * errors to prevent exposing unexpected states and exceptions to the application.
 *
 * @param status the error status. Must not be Status.OK.
 * @param notifyClient true if the stream is still writable and you want to notify the client
 * about stream closure and send the status
 */
public final void abortStream(Status status, boolean notifyClient) {
    // TODO(user): Investigate whether we can remove the notification to the client
    // and rely on a transport layer stream reset instead.
    Preconditions.checkArgument(!status.isOk(), "status must not be OK");
    if (!listenerClosed) {
        listenerClosed = true;
        listener.closed(status);
    }
    if (notifyClient) {
        // TODO(user): Remove
        if (stashedTrailers == null) {
            stashedTrailers = new Metadata.Trailers();
        }
        writeStatusToTrailers(status);
        closeFramer();
    } else {
        dispose();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

