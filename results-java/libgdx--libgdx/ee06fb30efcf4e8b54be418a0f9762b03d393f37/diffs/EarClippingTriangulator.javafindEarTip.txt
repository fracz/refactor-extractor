private int findEarTip() {
    for (int i = 0, n = vertexCount; i < n; i++) if (isEarTip(i))
        return i;
    // Desperate mode: if no vertex is an ear tip, we are dealing with a degenerate polygon (e.g. nearly collinear).
    // Note that the input was not necessarily degenerate, but we could have made it so by clipping some valid ears.
    // Idea taken from Martin Held, "FIST: Fast industrial-strength triangulation of polygons", Algorithmica (1998),
    // http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.115.291
    // Return a convex or tangential vertex if one exists.
    IntArray vertexTypes = this.vertexTypes;
    for (int i = 0, n = vertexCount; i < n; i++) if (vertexTypes.get(i) != CONCAVE)
        return i;
    // If all vertices are concave, just return the first one.
    return 0;
}||||||||private int findEarTip() {
    int vertexCount = this.vertexCount;
    for (int i = 0; i < vertexCount; i++) if (isEarTip(i))
        return i;
    // Desperate mode: if no vertex is an ear tip, we are dealing with a degenerate polygon (e.g. nearly collinear).
    // Note that the input was not necessarily degenerate, but we could have made it so by clipping some valid ears.
    // Idea taken from Martin Held, "FIST: Fast industrial-strength triangulation of polygons", Algorithmica (1998),
    // http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.115.291
    // Return a convex or tangential vertex if one exists.
    int[] vertexTypes = this.vertexTypes.items;
    for (int i = 0; i < vertexCount; i++) if (vertexTypes[i] != CONCAVE)
        return i;
    // If all vertices are concave, just return the first one.
    return 0;
}||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(IfStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForStmt
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(IntegerLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(IfStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(IfStmt
				(BinaryExpr
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(IntegerLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
)

