/**
 * Returns the Highlight object (contains x-index and DataSet index) of the
 * selected value at the given touch point inside the Line-, Scatter-, or
 * CandleStick-Chart.
 *
 * @param x
 * @param y
 * @return
 */
public Highlight getHighlightByTouchPoint(float x, float y) {
    if (mDataNotSet || mData == null) {
        Log.e(LOG_TAG, "Can't select by touch. No data set.");
        return null;
    }
    // create an array of the touch-point
    float[] pts = new float[2];
    pts[0] = x;
    // take any transformer to determine the x-axis value
    mLeftAxisTransformer.pixelsToValue(pts);
    double xTouchVal = pts[0];
    double base = Math.floor(xTouchVal);
    double touchOffset = mDeltaX * 0.025;
    // touch out of chart
    if (xTouchVal < -touchOffset || xTouchVal > mDeltaX + touchOffset)
        return null;
    if (base < 0)
        base = 0;
    if (base >= mDeltaX)
        base = mDeltaX - 1;
    int xIndex = (int) base;
    // check if we are more than half of a x-value or not
    if (xTouchVal - base > 0.5) {
        xIndex = (int) base + 1;
    }
    List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);
    float leftdist = Utils.getMinimumDistance(valsAtIndex, y, AxisDependency.LEFT);
    float rightdist = Utils.getMinimumDistance(valsAtIndex, y, AxisDependency.RIGHT);
    if (mData.getFirstRight() == null)
        rightdist = Float.MAX_VALUE;
    if (mData.getFirstLeft() == null)
        leftdist = Float.MAX_VALUE;
    AxisDependency axis = leftdist < rightdist ? AxisDependency.LEFT : AxisDependency.RIGHT;
    int dataSetIndex = Utils.getClosestDataSetIndex(valsAtIndex, y, axis);
    if (dataSetIndex == -1)
        return null;
    return new Highlight(xIndex, dataSetIndex);
}||||||||/**
 * Returns the Highlight object (contains x-index and DataSet index) of the
 * selected value at the given touch point inside the Line-, Scatter-, or
 * CandleStick-Chart.
 *
 * @param x
 * @param y
 * @return
 */
public Highlight getHighlightByTouchPoint(float x, float y) {
    if (mDataNotSet || mData == null) {
        Log.e(LOG_TAG, "Can't select by touch. No data set.");
        return null;
    } else
        return mHighlighter.getHighlight(x, y);
// // create an array of the touch-point
// float[] pts = new float[2];
// pts[0] = x;
// 
// // take any transformer to determine the x-axis value
// mLeftAxisTransformer.pixelsToValue(pts);
// 
// double xTouchVal = pts[0];
// double base = Math.floor(xTouchVal);
// 
// double touchOffset = mDeltaX * 0.025;
// 
// // touch out of chart
// if (xTouchVal < -touchOffset || xTouchVal > mDeltaX + touchOffset)
// return null;
// 
// if (base < 0)
// base = 0;
// if (base >= mDeltaX)
// base = mDeltaX - 1;
// 
// int xIndex = (int) base;
// 
// // check if we are more than half of a x-value or not
// if (xTouchVal - base > 0.5) {
// xIndex = (int) base + 1;
// }
// 
// List<SelectionDetail> valsAtIndex = getSelectionDetailsAtIndex(xIndex);
// 
// float leftdist = Utils.getMinimumDistance(valsAtIndex, y, AxisDependency.LEFT);
// float rightdist = Utils.getMinimumDistance(valsAtIndex, y, AxisDependency.RIGHT);
// 
// if (mData.getFirstRight() == null)
// rightdist = Float.MAX_VALUE;
// if (mData.getFirstLeft() == null)
// leftdist = Float.MAX_VALUE;
// 
// AxisDependency axis = leftdist < rightdist ? AxisDependency.LEFT : AxisDependency.RIGHT;
// 
// int dataSetIndex = Utils.getClosestDataSetIndex(valsAtIndex, y, axis);
// 
// if (dataSetIndex == -1)
// return null;
// 
// return new Highlight(xIndex, dataSetIndex);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(DoubleLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(DoubleLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(CastExpr
								NameExpr
									SimpleName
								(PrimitiveType
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(ReturnStmt
				NullLiteralExpr
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(ReturnStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

