// @Override
// protected void calculateOffsets() {
// super.calculateOffsets();
// 
// float offset = mData.getGreatestShapeSize() / 2f;
// mViewPortHandler.restrainViewPort(mViewPortHandler.offsetLeft() - offset,
// mViewPortHandler.offsetTop(), mViewPortHandler.offsetRight() - offset,
// mViewPortHandler.offsetBottom());
// 
// prepareOffsetMatrix();
// }
@Override
protected void calcMinMax() {
    super.calcMinMax();
    if (mDeltaX == 0 && mData.getYValCount() > 0)
        mDeltaX = 1;
}||||||||// @Override
// protected void calculateOffsets() {
// super.calculateOffsets();
// 
// float offset = mData.getGreatestShapeSize() / 2f;
// mViewPortHandler.restrainViewPort(mViewPortHandler.offsetLeft() - offset,
// mViewPortHandler.offsetTop(), mViewPortHandler.offsetRight() - offset,
// mViewPortHandler.offsetBottom());
// 
// prepareOffsetMatrix();
// }
@Override
protected void calcMinMax() {
    super.calcMinMax();
    if (mDeltaX == 0 && mData.getYValCount() > 0)
        mDeltaX = 1;
    mXChartMax += 0.5f;
    mDeltaX = Math.abs(mXChartMax - mXChartMin);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

