private boolean saveAndCleanup() {
    final IWorkbenchWindow workbenchWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    // IProgressMonitor nullMonitor = new NullProgressMonitor();
    DBRProgressMonitor nullMonitor = VoidProgressMonitor.INSTANCE;
    // final List<File> openFiles = new ArrayList<File>();
    for (IWorkbenchPage workbenchPage : workbenchWindow.getPages()) {
        for (IEditorReference editorRef : workbenchPage.getEditorReferences()) {
            try {
                IEditorInput editorInput = editorRef.getEditorInput();
                if (editorInput instanceof IAutoSaveEditorInput && ((IAutoSaveEditorInput) editorInput).isAutoSaveEnabled()) {
                    IEditorPart editor = editorRef.getEditor(false);
                    if (editor != null) {
                        if (!RuntimeUtils.validateAndSave(nullMonitor, editor)) {
                            return false;
                        }
                    }
                }
            /*
                    if (editorInput instanceof ProjectFileEditorInput) {
                        ProjectFileEditorInput sei = (ProjectFileEditorInput)editorInput;
                        openFiles.add(sei.getPath().toFile());
                    }
*/
            } catch (CoreException ex) {
                // $NON-NLS-1$
                log.error("Can't obtain editor storage", ex);
            }
        }
    // Save all other editors
    // if (!workbenchPage.saveAllEditors(true)) {
    // return false;
    // }
    }
    /*
        IFolder tempFolder = null;
        try {
            tempFolder = DBeaverCore.getInstance().getAutosaveFolder(VoidProgressMonitor.INSTANCE);
        }
        catch (IOException e) {
            log.error(e);
        }
        if (tempFolder != null) {
            try {
                IResource[] tempResources = tempFolder.members();
                for (IResource tempResource : tempResources) {
                    if (tempResource instanceof IFile) {
                        IFile tempFile = (IFile)tempResource;
                        if (!openFiles.contains(tempFile.getLocation().toFile())) {
                            tempFile.delete(true, false, nullMonitor);
                        }
                    }
                }
            } catch (CoreException ex) {
                log.warn("Error deleting autosave files", ex);
            }
        }
*/
    return true;
}||||||||private boolean saveAndCleanup() {
    final IWorkbenchWindow workbenchWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    DBRProgressMonitor nullMonitor = VoidProgressMonitor.INSTANCE;
    for (IWorkbenchPage workbenchPage : workbenchWindow.getPages()) {
        for (IEditorReference editorRef : workbenchPage.getEditorReferences()) {
            try {
                IEditorInput editorInput = editorRef.getEditorInput();
                if (editorInput instanceof IAutoSaveEditorInput && ((IAutoSaveEditorInput) editorInput).isAutoSaveEnabled()) {
                    IEditorPart editor = editorRef.getEditor(false);
                    if (editor != null) {
                        if (!RuntimeUtils.validateAndSave(nullMonitor, editor)) {
                            return false;
                        }
                    }
                }
            } catch (CoreException ex) {
                // $NON-NLS-1$
                log.error("Can't obtain editor storage", ex);
            }
        }
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											(EnclosedExpr
												(CastExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(BooleanLiteralExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(IfStmt
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockStmt
														(ReturnStmt
															(BooleanLiteralExpr
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			(BlockComment
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											(EnclosedExpr
												(CastExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(BooleanLiteralExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(IfStmt
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockStmt
														(ReturnStmt
															(BooleanLiteralExpr
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)

