static String createHtmlForRouteTarget(Object routeTarget) {
    String routeStr = routeTarget.toString();
    if (routeStr.contains("$$Lambda$")) {
        // This is a Route or Filter lambda
        Map<Object, String> fieldNameMap = getFieldNameMap(routeTarget);
        String className = routeStr.split("\\$")[0];
        if (fieldNameMap.containsKey(routeTarget)) {
            // Lambda name has been mapped in fieldNameMap
            return className + "<b>." + fieldNameMap.get(routeTarget) + "</b> <em>(field)</em>";
        }
        if (!getMethodName(routeTarget).contains("lambda$")) {
            // Method has name (is not anonymous lambda)
            return getClassName(routeTarget) + "<b>::" + getMethodName(routeTarget) + "</b> <em>(method reference)</em>";
        }
        return className + "<b>???</b> <em>(anonymous lambda)</em>";
    }
    if (routeStr.contains("@")) {
        // This is a Class implementing Route or Filter
        String packages = routeStr.split("@")[0].substring(0, routeStr.lastIndexOf("."));
        String className = routeStr.split("@")[0].substring(routeStr.lastIndexOf(".") + 1);
        return packages + ".<b>" + className + ".class</b> <em>(class)</em>";
    }
    return "<b>Mysterious route handler</b>";
}||||||||static String createHtmlForRouteTarget(Object routeTarget) {
    String routeStr = routeTarget.toString();
    if (routeStr.contains("$$Lambda$")) {
        // This is a Route or Filter lambda
        Map<Object, String> fieldNameMap = getFieldNameMap(routeTarget);
        String className = routeStr.split("\\$")[0];
        if (fieldNameMap.containsKey(routeTarget)) {
            // Lambda name has been mapped in fieldNameMap
            return className + "<b>." + fieldNameMap.get(routeTarget) + "</b> <em>(field)</em>";
        }
        if (!getMethodName(routeTarget).contains("lambda$")) {
            // Method has name (is not anonymous lambda)
            return getClassName(routeTarget) + "<b>::" + getMethodName(routeTarget) + "</b> <em>(method reference)</em>";
        }
        return className + "<b>???</b> <em>(anonymous lambda)</em>";
    }
    if (routeStr.contains("@")) {
        // This is a Class implementing Route or Filter
        String packages = routeStr.split("@")[0].substring(0, routeStr.lastIndexOf("."));
        String className = routeStr.split("@")[0].substring(routeStr.lastIndexOf(".") + 1);
        return packages + ".<b>" + className + ".class</b> <em>(class)</em>";
    }
    return "<b>Mysterious route handler</b>";
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
							)
							LineComment
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
										StringLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								StringLiteralExpr
							)
							LineComment
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			StringLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
							)
							LineComment
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
										StringLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								StringLiteralExpr
							)
							LineComment
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			StringLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

