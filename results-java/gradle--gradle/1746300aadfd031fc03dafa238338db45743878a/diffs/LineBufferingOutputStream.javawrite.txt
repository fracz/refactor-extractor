/**
 * Writes the specified byte to this output stream. The general contract for <code>write</code> is that one byte is
 * written to the output stream. The byte to be written is the eight low-order bits of the argument <code>b</code>.
 * The 24 high-order bits of <code>b</code> are ignored.
 *
 * @param b the <code>byte</code> to write
 * @throws java.io.IOException if an I/O error occurs. In particular, an <code>IOException</code> may be thrown if
 * the output stream has been closed.
 */
public void write(final int b) throws IOException {
    if (hasBeenClosed) {
        throw new IOException("The stream has been closed.");
    }
    if (count == buf.length) {
        // grow the buffer
        final int newBufLength = buf.length + bufferIncrement;
        final byte[] newBuf = new byte[newBufLength];
        System.arraycopy(buf, 0, newBuf, 0, buf.length);
        buf = newBuf;
    }
    buf[count] = (byte) b;
    count++;
    if (endsWithLineSeparator()) {
        flush();
    }
}||||||||/**
 * Writes the specified byte to this output stream. The general contract for <code>write</code> is that one byte is
 * written to the output stream. The byte to be written is the eight low-order bits of the argument <code>b</code>.
 * The 24 high-order bits of <code>b</code> are ignored.
 *
 * @param b the <code>byte</code> to write
 * @throws java.io.IOException if an I/O error occurs. In particular, an <code>IOException</code> may be thrown if
 * the output stream has been closed.
 */
public void write(final int b) throws IOException {
    if (hasBeenClosed) {
        throw new IOException("The stream has been closed.");
    }
    output.write(b);
    if (endsWithLineSeparator(b)) {
        flush();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayCreationExpr
								(PrimitiveType
								)
								(ArrayCreationLevel
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(CastExpr
					NameExpr
						SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

