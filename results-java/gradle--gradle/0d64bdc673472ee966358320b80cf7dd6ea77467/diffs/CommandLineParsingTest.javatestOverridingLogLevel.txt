/**
 * This verifies that the user can override the current log level on a command line. The issue here is that the UI
 * defines a default log level that will always be used for all commands, but there are time when you want to
 * override it. This is useful if someone enters something into the command line tab or just wants to make a
 * favorite that always uses a specific log level. All they have to do is specify a log level on their command line
 * and the won't append one. This verifies that the function that does the check if its already defined is working.
 */
public void testOverridingLogLevel() {
    // first try it with the log level at the end
    String commandLine = ":build:something -d";
    CommandLineAssistant commandLineAssistant = new CommandLineAssistant();
    String[] arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // now try it with the log level in the middle
    commandLine = ":build:something -d :clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // now try it with the log level at the beginning
    commandLine = "-d :clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // now try it with 'info' instead of debug
    commandLine = "-i :clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // lastly verify it doesn't inadvertantly detect a log level
    commandLine = ":clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertFalse(commandLineAssistant.hasLogLevelDefined(arguments));
}||||||||/**
 * This verifies that the user can override the current log level on a command line. The issue here is that the UI
 * defines a default log level that will always be used for all commands, but there are time when you want to
 * override it. This is useful if someone enters something into the command line tab or just wants to make a
 * favorite that always uses a specific log level. All they have to do is specify a log level on their command line
 * and the won't append one. This verifies that the function that does the check if its already defined is working.
 */
public void testOverridingLogLevel() {
    // first try it with the log level at the end
    String commandLine = ":build:something -d";
    CommandLineAssistant commandLineAssistant = new CommandLineAssistant();
    String[] arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // now try it with the log level in the middle
    commandLine = ":build:something -d :clean";
    arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // now try it with the log level at the beginning
    commandLine = "-d :clean";
    arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // now try it with 'info' instead of debug
    commandLine = "-i :clean";
    arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasLogLevelDefined(arguments));
    // lastly verify it doesn't inadvertantly detect a log level
    commandLine = ":clean";
    arguments = breakUpCommandLine(commandLine);
    assertFalse(commandLineAssistant.hasLogLevelDefined(arguments));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

