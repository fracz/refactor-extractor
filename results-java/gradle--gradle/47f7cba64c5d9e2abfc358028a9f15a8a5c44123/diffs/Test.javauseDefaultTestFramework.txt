public TestFramework useDefaultTestFramework(Closure testFrameworkConfigure) {
    try {
        final String testFrameworkDefault = (String) getProject().property(TEST_FRAMEWORK_DEFAULT_PROPERTY);
        if (testFrameworkDefault == null || "".equals(testFrameworkDefault) || "junit".equalsIgnoreCase(testFrameworkDefault)) {
            return useJUnit();
        } else if ("testng".equalsIgnoreCase(testFrameworkDefault)) {
            return useTestNG();
        } else {
            try {
                final Class testFrameworkClass = Class.forName(testFrameworkDefault);
                return useTestFramework((TestFramework) testFrameworkClass.newInstance(), testFrameworkConfigure);
            } catch (ClassNotFoundException e) {
                throw new GradleException(testFrameworkDefault + " could not be found on the classpath", e);
            } catch (Exception e) {
                throw new GradleException("Could not create an instance of the test framework class " + testFrameworkDefault + ". Make sure that it has a public noargs constructor.", e);
            }
        }
    } catch (MissingPropertyException e) {
        return useJUnit();
    }
}||||||||public TestFramework useDefaultTestFramework(Closure testFrameworkConfigure) {
    try {
        final String testFrameworkDefault = (String) getProject().property(TEST_FRAMEWORK_DEFAULT_PROPERTY);
        if (testFrameworkDefault == null || "".equals(testFrameworkDefault) || "junit".equalsIgnoreCase(testFrameworkDefault)) {
            return useJUnit(testFrameworkConfigure);
        } else if ("testng".equalsIgnoreCase(testFrameworkDefault)) {
            return useTestNG(testFrameworkConfigure);
        } else {
            try {
                final Class testFrameworkClass = Class.forName(testFrameworkDefault);
                return useTestFramework((TestFramework) testFrameworkClass.newInstance(), testFrameworkConfigure);
            } catch (ClassNotFoundException e) {
                throw new GradleException(testFrameworkDefault + " could not be found on the classpath", e);
            } catch (Exception e) {
                throw new GradleException("Could not create an instance of the test framework class " + testFrameworkDefault + ". Make sure that it has a public noargs constructor.", e);
            }
        }
    } catch (MissingPropertyException e) {
        return useJUnit(testFrameworkConfigure);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								StringLiteralExpr
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							StringLiteralExpr
						)
					)
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							StringLiteralExpr
						)
						(BlockStmt
							(TryStmt
								(CatchClause
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													NameExpr
														SimpleName
													StringLiteralExpr
												)
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(Parameter
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(CatchClause
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(Parameter
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ReturnStmt
										(MethodCallExpr
											(CastExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								StringLiteralExpr
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							StringLiteralExpr
						)
					)
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							StringLiteralExpr
						)
						(BlockStmt
							(TryStmt
								(CatchClause
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													NameExpr
														SimpleName
													StringLiteralExpr
												)
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(Parameter
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(CatchClause
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(Parameter
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ReturnStmt
										(MethodCallExpr
											(CastExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

