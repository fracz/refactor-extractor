/**
 * Starts watching for file changes on a separate background thread.
 *
 * It is guaranteed that file watching gets activated before this method returns.
 *
 * @param inputs the directories and files to watch for changes
 * @param callback gets called when file changes are found
 * @return Stoppable instance for stopping the file watching. Must be called to make sure that resources are released.
 */
Stoppable watch(FileWatchInputs inputs, Runnable callback);||||||||/**
 * Starts watching for file changes on a separate background thread.
 *
 * It is guaranteed that file watching gets activated before this method returns.
 *
 * @param inputs the directories and files to watch for changes
 * @param callback gets called when file changes are found
 * @return Stoppable instance for stopping the file watching. Must be called to make sure that resources are released.
 */
Stoppable watch(FileWatchInputs inputs, Runnable callback) throws IOException;||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

