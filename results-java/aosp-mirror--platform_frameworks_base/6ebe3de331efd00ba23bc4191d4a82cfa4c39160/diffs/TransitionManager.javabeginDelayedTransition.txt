/**
 * Static utility method to animate to a new scene defined by all changes within
 * the given scene root between calling this method and the next rendering frame.
 * Calling this method causes TransitionManager to capture current values in the
 * scene root and then post a request to run a transition on the next frame.
 * At that time, the new values in the scene root will be captured and changes
 * will be animated. There is no need to create a Scene; it is implied by
 * changes which take place between calling this method and the next frame when
 * the transition begins.
 *
 * <p>Calling this method several times before the next frame (for example, if
 * unrelated code also wants to make dynamic changes and run a transition on
 * the same scene root), only the first call will trigger capturing values
 * and exiting the current scene. Subsequent calls to the method with the
 * same scene root during the same frame will be ignored.</p>
 *
 * <p>Passing in <code>null</code> for the transition parameter will
 * cause the TransitionManager to use its default transition.</p>
 *
 * @param sceneRoot The root of the View hierarchy to run the transition on.
 * @param transition The transition to use for this change. A
 * value of null causes the TransitionManager to use the default transition.
 */
public static void beginDelayedTransition(final ViewGroup sceneRoot, Transition transition) {
    if (!sPendingTransitions.contains(sceneRoot)) {
        sPendingTransitions.add(sceneRoot);
        if (transition == null) {
            transition = sDefaultTransition;
        }
        final Transition finalTransition = transition;
        sceneChangeSetup(sceneRoot, transition);
        sceneRoot.setCurrentScene(null);
        sceneRoot.postOnAnimation(new Runnable() {

            @Override
            public void run() {
                sPendingTransitions.remove(sceneRoot);
                sceneChangeRunTransition(sceneRoot, finalTransition);
            }
        });
    }
}||||||||/**
 * Static utility method to animate to a new scene defined by all changes within
 * the given scene root between calling this method and the next rendering frame.
 * Calling this method causes TransitionManager to capture current values in the
 * scene root and then post a request to run a transition on the next frame.
 * At that time, the new values in the scene root will be captured and changes
 * will be animated. There is no need to create a Scene; it is implied by
 * changes which take place between calling this method and the next frame when
 * the transition begins.
 *
 * <p>Calling this method several times before the next frame (for example, if
 * unrelated code also wants to make dynamic changes and run a transition on
 * the same scene root), only the first call will trigger capturing values
 * and exiting the current scene. Subsequent calls to the method with the
 * same scene root during the same frame will be ignored.</p>
 *
 * <p>Passing in <code>null</code> for the transition parameter will
 * cause the TransitionManager to use its default transition.</p>
 *
 * @param sceneRoot The root of the View hierarchy to run the transition on.
 * @param transition The transition to use for this change. A
 * value of null causes the TransitionManager to use the default transition.
 */
public static void beginDelayedTransition(final ViewGroup sceneRoot, Transition transition) {
    if (!sPendingTransitions.contains(sceneRoot)) {
        sPendingTransitions.add(sceneRoot);
        if (transition == null) {
            transition = sDefaultTransition;
        }
        final Transition finalTransition = transition.clone();
        sceneChangeSetup(sceneRoot, transition);
        sceneRoot.setCurrentScene(null);
        sceneRoot.postOnAnimation(new Runnable() {

            @Override
            public void run() {
                sPendingTransitions.remove(sceneRoot);
                sceneChangeRunTransition(sceneRoot, finalTransition);
            }
        });
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

