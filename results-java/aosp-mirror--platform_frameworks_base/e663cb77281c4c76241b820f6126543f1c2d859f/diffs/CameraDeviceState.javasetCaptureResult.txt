/**
 * Set the result for a capture.
 *
 * <p>
 * If the device was in the {@code CAPTURING} state,
 * {@link CameraDeviceStateListener#onCaptureResult(CameraMetadataNative, RequestHolder)} will
 * be called with the given result, otherwise this will result in the device transitioning to
 * the {@code ERROR} state,
 * </p>
 *
 * @param request the {@link RequestHolder} request that created this result.
 * @param result the {@link CameraMetadataNative} result to set.
 * @return {@link CameraBinderDecorator#NO_ERROR}, or an error if one has occurred.
 */
public synchronized int setCaptureResult(final RequestHolder request, final CameraMetadataNative result) {
    if (mCurrentState != STATE_CAPTURING) {
        Log.e(TAG, "Cannot receive result while in state: " + mCurrentState);
        mCurrentError = CameraBinderDecorator.INVALID_OPERATION;
        doStateTransition(STATE_ERROR);
        return mCurrentError;
    }
    if (mCurrentHandler != null && mCurrentListener != null) {
        mCurrentHandler.post(new Runnable() {

            @Override
            public void run() {
                mCurrentListener.onCaptureResult(result, request);
            }
        });
    }
    return mCurrentError;
}||||||||/**
 * Set the result for a capture.
 *
 * <p>
 * If the device was in the {@code CAPTURING} state,
 * {@link CameraDeviceStateListener#onCaptureResult(CameraMetadataNative, RequestHolder)} will
 * be called with the given result, otherwise this will result in the device transitioning to
 * the {@code ERROR} state,
 * </p>
 *
 * @param request The {@link RequestHolder} request that created this result.
 * @param result The {@link CameraMetadataNative} result to set.
 * @param captureError Report a recoverable error for a single buffer or result using a valid
 * error code for {@code ICameraDeviceCallbacks}, or
 * {@link #NO_CAPTURE_ERROR}.
 * @return {@link CameraBinderDecorator#NO_ERROR}, or an error if one has occurred.
 */
public synchronized int setCaptureResult(final RequestHolder request, final CameraMetadataNative result, final int captureError) {
    if (mCurrentState != STATE_CAPTURING) {
        Log.e(TAG, "Cannot receive result while in state: " + mCurrentState);
        mCurrentError = CameraBinderDecorator.INVALID_OPERATION;
        doStateTransition(STATE_ERROR);
        return mCurrentError;
    }
    if (mCurrentHandler != null && mCurrentListener != null) {
        if (captureError != NO_CAPTURE_ERROR) {
            mCurrentHandler.post(new Runnable() {

                @Override
                public void run() {
                    mCurrentListener.onError(captureError, request);
                }
            });
        } else {
            mCurrentHandler.post(new Runnable() {

                @Override
                public void run() {
                    mCurrentListener.onCaptureResult(result, request);
                }
            });
        }
    }
    return mCurrentError;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(VoidType
										)
										SimpleName
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(VoidType
										)
										SimpleName
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

