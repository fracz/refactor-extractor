@Test
public void testClassRenaming() throws IOException, LogAbortException {
    ICreateInfo ci = new ICreateInfo() {

        @Override
        public Class<?>[] getInjectedClasses() {
            // classes to inject in the final JAR
            return new Class<?>[0];
        }

        @Override
        public String[] getDelegateMethods() {
            return EMPTY_STRING_ARRAY;
        }

        @Override
        public String[] getDelegateClassNatives() {
            return EMPTY_STRING_ARRAY;
        }

        @Override
        public String[] getRenamedClasses() {
            // classes to rename (so that we can replace them)
            return new String[] { "mock_android.view.View", "mock_android.view._Original_View", "not.an.actual.ClassName", "anoter.fake.NewClassName" };
        }

        @Override
        public String[] getJavaPkgClasses() {
            return EMPTY_STRING_ARRAY;
        }

        @Override
        public Set<String> getExcludedClasses() {
            return null;
        }

        @Override
        public String[] getDeleteReturns() {
            // methods deleted from their return type.
            return EMPTY_STRING_ARRAY;
        }

        @Override
        public String[] getPromotedFields() {
            return EMPTY_STRING_ARRAY;
        }

        @Override
        public String[] getPromotedClasses() {
            return EMPTY_STRING_ARRAY;
        }

        @Override
        public Map<String, InjectMethodRunnable> getInjectedMethodsMap() {
            return Collections.emptyMap();
        }
    };
    AsmGenerator agen = new AsmGenerator(mLog, mOsDestJar, ci);
    AsmAnalyzer aa = new AsmAnalyzer(mLog, mOsJarPath, agen, // derived from
    null, new String[] { // include classes
    "**" }, Collections.<String>emptySet(), /* excluded classes */
    new String[] {});
    aa.analyze();
    agen.generate();
    Set<String> notRenamed = agen.getClassesNotRenamed();
    assertArrayEquals(new String[] { "not/an/actual/ClassName" }, notRenamed.toArray());
}||||||||@Test
public void testClassRenaming() throws IOException, LogAbortException {
    ICreateInfo ci = new CreateInfoAdapter() {

        @Override
        public String[] getRenamedClasses() {
            // classes to rename (so that we can replace them)
            return new String[] { "mock_android.view.View", "mock_android.view._Original_View", "not.an.actual.ClassName", "anoter.fake.NewClassName" };
        }
    };
    AsmGenerator agen = new AsmGenerator(mLog, mOsDestJar, ci);
    AsmAnalyzer aa = new AsmAnalyzer(mLog, mOsJarPath, agen, // derived from
    null, new String[] { // include classes
    "**" }, Collections.emptySet(), /* excluded classes */
    new String[] {});
    aa.analyze();
    agen.generate();
    Set<String> notRenamed = agen.getClassesNotRenamed();
    assertArrayEquals(new String[] { "not/an/actual/ClassName" }, notRenamed.toArray());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
											)
										)
										(ArrayCreationLevel
											(IntegerLiteralExpr
											)
										)
									)
									LineComment
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										(ArrayCreationLevel
										)
									)
									LineComment
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NullLiteralExpr
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
									LineComment
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NullLiteralExpr
							LineComment
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayInitializerExpr
								StringLiteralExpr
									LineComment
							)
							(ArrayCreationLevel
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayInitializerExpr
							)
							(ArrayCreationLevel
							)
							(BlockComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ArrayCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
					(ArrayInitializerExpr
						StringLiteralExpr
					)
					(ArrayCreationLevel
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										(ArrayCreationLevel
										)
									)
									LineComment
								)
							)
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NullLiteralExpr
							LineComment
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayInitializerExpr
								StringLiteralExpr
									LineComment
							)
							(ArrayCreationLevel
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayInitializerExpr
							)
							(ArrayCreationLevel
							)
							(BlockComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ArrayCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
					(ArrayInitializerExpr
						StringLiteralExpr
					)
					(ArrayCreationLevel
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

