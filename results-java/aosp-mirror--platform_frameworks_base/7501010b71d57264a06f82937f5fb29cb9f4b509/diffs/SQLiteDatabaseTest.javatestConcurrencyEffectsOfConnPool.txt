/**
 * Test to ensure that readers are able to read the database data (old versions)
 * EVEN WHEN the writer is in a transaction on the same database.
 * <p>
 * This test starts 1 Writer and 2 Readers and sets up connection pool for readers
 * by calling the method {@link SQLiteDatabase#enableWriteAheadLogging()}.
 * <p>
 * Writer does the following in a tight loop
 * <pre>
 * begin transaction
 * insert into table_1
 * insert into table_2
 * commit
 * </pre>
 * <p>
 * As long a the writer is alive, Readers do the following in a tight loop at the same time
 * <pre>
 * Reader_K does "select count(*) from table_K"  where K = 1 or 2
 * </pre>
 * <p>
 * The test is run for TIME_TO_RUN_WAL_TEST_FOR sec.
 * <p>
 * The test is repeated for different connection-pool-sizes (1..3)
 * <p>
 * And at the end of of each test, the following statistics are printed
 * <ul>
 * <li>connection-pool-size</li>
 * <li>number-of-transactions by writer</li>
 * <li>number of reads by reader_K while the writer is IN or NOT-IN xaction</li>
 * </ul>
 */
@LargeTest
public void testConcurrencyEffectsOfConnPool() throws Exception {
    // run the test with sqlite WAL enable
    runConnectionPoolTest(true);
    // run the same test WITHOUT sqlite WAL enabled
    runConnectionPoolTest(false);
}||||||||/**
 * Test to ensure that readers are able to read the database data (old versions)
 * EVEN WHEN the writer is in a transaction on the same database.
 * <p>
 * This test starts 1 Writer and 2 Readers and sets up connection pool for readers
 * by calling the method {@link SQLiteDatabase#enableWriteAheadLogging()}.
 * <p>
 * Writer does the following in a tight loop
 * <pre>
 * begin transaction
 * insert into table_1
 * insert into table_2
 * commit
 * </pre>
 * <p>
 * As long a the writer is alive, Readers do the following in a tight loop at the same time
 * <pre>
 * Reader_K does "select count(*) from table_K"  where K = 1 or 2
 * </pre>
 * <p>
 * The test is run for TIME_TO_RUN_WAL_TEST_FOR sec.
 * <p>
 * The test is repeated for different connection-pool-sizes (1..3)
 * <p>
 * And at the end of of each test, the following statistics are printed
 * <ul>
 * <li>connection-pool-size</li>
 * <li>number-of-transactions by writer</li>
 * <li>number of reads by reader_K while the writer is IN or NOT-IN xaction</li>
 * </ul>
 */
@LargeTest
// run this test only if you need to collect the numbers from this test
@Suppress
public void testConcurrencyEffectsOfConnPool() throws Exception {
    // run the test with sqlite WAL enable
    runConnectionPoolTest(true);
    // run the same test WITHOUT sqlite WAL enabled
    runConnectionPoolTest(false);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
		LineComment
	)
	(JavadocComment
	)
)

