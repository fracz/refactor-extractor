/**
 * Helper function:
 * Called synchronized on mAudioFocusLock, then mMCStack
 * Check whether the remote control display should be updated, triggers the update if required
 * @param infoChangedFlags the flags corresponding to the remote control client information
 * that has changed, if applicable (checking for the update conditions might trigger a
 * clear, rather than an update event).
 */
private void checkUpdateRemoteControlDisplay_syncAfRcs(int infoChangedFlags) {
    // if either stack is empty, there is a mismatch, so clear the RC display
    if (mMCStack.isEmpty() || mFocusStack.isEmpty()) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // determine which entry in the AudioFocus stack to consider, and compare against the
    // top of the stack for the media button event receivers : simply using the top of the
    // stack would make the entry disappear from the RemoteControlDisplay in conditions such as
    // notifications playing during music playback.
    // Crawl the AudioFocus stack from the top until an entry is found with the following
    // characteristics:
    // - focus gain on STREAM_MUSIC stream
    // - non-transient focus gain on a stream other than music
    FocusRequester af = null;
    try {
        for (int index = mFocusStack.size() - 1; index >= 0; index--) {
            FocusRequester fr = mFocusStack.elementAt(index);
            if ((fr.getStreamType() == AudioManager.STREAM_MUSIC) || (fr.getGainRequest() == AudioManager.AUDIOFOCUS_GAIN)) {
                af = fr;
                break;
            }
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        Log.e(TAG, "Wrong index accessing audio focus stack when updating RCD: " + e);
        af = null;
    }
    if (af == null) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // if the audio focus and RC owners belong to different packages, there is a mismatch, clear
    if (!af.hasSamePackage(mMCStack.peek().mCallingPackageName)) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // control information will be retrieved, clear
    if (!af.hasSameUid(mMCStack.peek().mCallingUid)) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // refresh conditions were verified: update the remote controls
    // ok to call: synchronized mAudioFocusLock then on mMCStack, mMCStack is not empty
    updateRemoteControlDisplay_syncAfRcs(infoChangedFlags);
}||||||||/**
 * Helper function:
 * Called synchronized on mAudioFocusLock, then mMCStack
 * Check whether the remote control display should be updated, triggers the update if required
 * @param infoChangedFlags the flags corresponding to the remote control client information
 * that has changed, if applicable (checking for the update conditions might trigger a
 * clear, rather than an update event).
 */
private void checkUpdateRemoteControlDisplay_syncAfRcs(int infoChangedFlags) {
    // if either stack is empty, there is a mismatch, so clear the RC display
    if (mMCStack.isEmpty() || mFocusStack.isEmpty()) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // determine which entry in the AudioFocus stack to consider, and compare against the
    // top of the stack for the media button event receivers : simply using the top of the
    // stack would make the entry disappear from the RemoteControlDisplay in conditions such as
    // notifications playing during music playback.
    // Crawl the AudioFocus stack from the top until an entry is found with the following
    // characteristics:
    // - focus gain on STREAM_MUSIC stream
    // - non-transient focus gain on a stream other than music
    FocusRequester af = null;
    try {
        for (int index = mFocusStack.size() - 1; index >= 0; index--) {
            FocusRequester fr = mFocusStack.elementAt(index);
            if ((fr.getStreamType() == AudioManager.STREAM_MUSIC) || (fr.getGainRequest() == AudioManager.AUDIOFOCUS_GAIN)) {
                af = fr;
                break;
            }
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        Log.e(TAG, "Wrong index accessing audio focus stack when updating RCD: " + e);
        af = null;
    }
    if (af == null) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // if the audio focus and RC owners belong to different packages, there is a mismatch, clear
    if (!af.hasSamePackage(mMCStack.peek().getCallingPackageName())) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // control information will be retrieved, clear
    if (!af.hasSameUid(mMCStack.peek().getCallingUid())) {
        clearRemoteControlDisplay_syncAfRcs();
        return;
    }
    // refresh conditions were verified: update the remote controls
    // ok to call: synchronized mAudioFocusLock then on mMCStack, mMCStack is not empty
    updateRemoteControlDisplay_syncAfRcs(infoChangedFlags);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

