/**
 * Register an IRemoteControlDisplay.
 * Notify all IRemoteControlClient of the new display and cause the RemoteControlClient
 * at the top of the stack to update the new display with its information.
 * @see android.media.IAudioService#registerRemoteControlDisplay(android.media.IRemoteControlDisplay, int, int)
 * @param rcd the IRemoteControlDisplay to register. No effect if null.
 * @param w the maximum width of the expected bitmap. Negative or zero values indicate this
 * display doesn't need to receive artwork.
 * @param h the maximum height of the expected bitmap. Negative or zero values indicate this
 * display doesn't need to receive artwork.
 * @param listenerComp the component for the listener interface, may be null if it's not needed
 * to verify it belongs to one of the enabled notification listeners
 */
private void registerRemoteControlDisplay_int(IRemoteControlDisplay rcd, int w, int h, ComponentName listenerComp) {
    if (DEBUG_RC)
        Log.d(TAG, ">>> registerRemoteControlDisplay(" + rcd + ")");
    synchronized (mAudioFocusLock) {
        synchronized (mMCStack) {
            if ((rcd == null) || rcDisplayIsPluggedIn_syncRcStack(rcd)) {
                return;
            }
            DisplayInfoForServer di = new DisplayInfoForServer(rcd, w, h);
            di.mEnabled = true;
            di.mClientNotifListComp = listenerComp;
            if (!di.init()) {
                if (DEBUG_RC)
                    Log.e(TAG, " error registering RCD");
                return;
            }
            // add RCD to list of displays
            mRcDisplays.add(di);
            // let all the remote control clients know there is a new display (so the remote
            // control stack traversal order doesn't matter).
            Iterator<MediaController> stackIterator = mMCStack.iterator();
            while (stackIterator.hasNext()) {
                MediaController mcse = stackIterator.next();
                if (mcse.mRcClient != null) {
                    try {
                        mcse.mRcClient.plugRemoteControlDisplay(rcd, w, h);
                    } catch (RemoteException e) {
                        Log.e(TAG, "Error connecting RCD to client: ", e);
                    }
                }
            }
            // we have a new display, of which all the clients are now aware: have it be
            // initialized wih the current gen ID and the current client info, do not
            // reset the information for the other (existing) displays
            sendMsg(mEventHandler, MSG_RCDISPLAY_INIT_INFO, SENDMSG_QUEUE, w, /*arg1*/
            h, /*arg2*/
            rcd, /*obj*/
            0);
        }
    }
}||||||||/**
 * Register an IRemoteControlDisplay.
 * Notify all IRemoteControlClient of the new display and cause the RemoteControlClient
 * at the top of the stack to update the new display with its information.
 * @see android.media.IAudioService#registerRemoteControlDisplay(android.media.IRemoteControlDisplay, int, int)
 * @param rcd the IRemoteControlDisplay to register. No effect if null.
 * @param w the maximum width of the expected bitmap. Negative or zero values indicate this
 * display doesn't need to receive artwork.
 * @param h the maximum height of the expected bitmap. Negative or zero values indicate this
 * display doesn't need to receive artwork.
 * @param listenerComp the component for the listener interface, may be null if it's not needed
 * to verify it belongs to one of the enabled notification listeners
 */
private void registerRemoteControlDisplay_int(IRemoteControlDisplay rcd, int w, int h, ComponentName listenerComp) {
    if (DEBUG_RC)
        Log.d(TAG, ">>> registerRemoteControlDisplay(" + rcd + ")");
    synchronized (mAudioFocusLock) {
        synchronized (mMCStack) {
            if ((rcd == null) || rcDisplayIsPluggedIn_syncRcStack(rcd)) {
                return;
            }
            DisplayInfoForServer di = new DisplayInfoForServer(rcd, w, h);
            di.mEnabled = true;
            di.mClientNotifListComp = listenerComp;
            if (!di.init()) {
                if (DEBUG_RC)
                    Log.e(TAG, " error registering RCD");
                return;
            }
            // add RCD to list of displays
            mRcDisplays.add(di);
            // let all the remote control clients know there is a new display (so the remote
            // control stack traversal order doesn't matter).
            Iterator<MediaController> stackIterator = mMCStack.iterator();
            while (stackIterator.hasNext()) {
                MediaController mcse = stackIterator.next();
                if (mcse.getRcc() != null) {
                    try {
                        mcse.getRcc().plugRemoteControlDisplay(rcd, w, h);
                    } catch (RemoteException e) {
                        Log.e(TAG, "Error connecting RCD to client: ", e);
                    }
                }
            }
            // we have a new display, of which all the clients are now aware: have it be
            // initialized wih the current gen ID and the current client info, do not
            // reset the information for the other (existing) displays
            sendMsg(mEventHandler, MSG_RCDISPLAY_INIT_INFO, SENDMSG_QUEUE, w, /*arg1*/
            h, /*arg2*/
            rcd, /*obj*/
            0);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
									)
									(BlockStmt
										(TryStmt
											(CatchClause
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															StringLiteralExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(Parameter
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
									(BlockComment
									)
								NameExpr
									SimpleName
									(BlockComment
									)
								(IntegerLiteralExpr
									(BlockComment
									)
								)
								SimpleName
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
									)
									(BlockStmt
										(TryStmt
											(CatchClause
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															StringLiteralExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(Parameter
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
									(BlockComment
									)
								NameExpr
									SimpleName
									(BlockComment
									)
								(IntegerLiteralExpr
									(BlockComment
									)
								)
								SimpleName
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

