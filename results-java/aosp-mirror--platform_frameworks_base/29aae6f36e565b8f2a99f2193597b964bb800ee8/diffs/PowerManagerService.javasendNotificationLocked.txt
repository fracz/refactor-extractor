private void sendNotificationLocked(boolean on, int why) {
    if (!on) {
        mStillNeedSleepNotification = false;
    }
    // Add to the queue.
    int index = 0;
    while (mBroadcastQueue[index] != -1) {
        index++;
    }
    mBroadcastQueue[index] = on ? 1 : 0;
    mBroadcastWhy[index] = why;
    // on, so have to run the queue then.
    if (index == 2) {
        // is more significant than the first, then use the new one.
        if (!on && mBroadcastWhy[0] > why) {
            mBroadcastWhy[0] = why;
        }
        mBroadcastQueue[0] = on ? 1 : 0;
        mBroadcastQueue[1] = -1;
        mBroadcastQueue[2] = -1;
        mBroadcastWakeLock.release();
        mBroadcastWakeLock.release();
        index = 0;
    }
    if (index == 1 && !on) {
        mBroadcastQueue[0] = -1;
        mBroadcastQueue[1] = -1;
        index = -1;
        // The wake lock was being held, but we're not actually going to do any
        // broadcasts, so release the wake lock.
        EventLog.writeEvent(EventLogTags.POWER_SCREEN_BROADCAST_STOP, 1, mBroadcastWakeLock.mCount);
        mBroadcastWakeLock.release();
    }
    // Now send the message.
    if (index >= 0) {
        // Acquire the broadcast wake lock before changing the power
        // state. It will be release after the broadcast is sent.
        // We always increment the ref count for each notification in the queue
        // and always decrement when that notification is handled.
        mBroadcastWakeLock.acquire();
        EventLog.writeEvent(EventLogTags.POWER_SCREEN_BROADCAST_SEND, mBroadcastWakeLock.mCount);
        mHandler.post(mNotificationTask);
    }
}||||||||private void sendNotificationLocked(boolean on, int why) {
    if (!on) {
        mStillNeedSleepNotification = false;
    }
    // Add to the queue.
    int index = 0;
    while (mBroadcastQueue[index] != -1) {
        index++;
    }
    mBroadcastQueue[index] = on ? 1 : 0;
    mBroadcastWhy[index] = why;
    // on, so have to run the queue then.
    if (index == 2) {
        // is more significant than the first, then use the new one.
        if (!on && mBroadcastWhy[0] > why) {
            mBroadcastWhy[0] = why;
        }
        mBroadcastQueue[0] = on ? 1 : 0;
        mBroadcastQueue[1] = -1;
        mBroadcastQueue[2] = -1;
        mBroadcastWakeLock.release();
        mBroadcastWakeLock.release();
        index = 0;
    }
    if (index == 1 && !on) {
        mBroadcastQueue[0] = -1;
        mBroadcastQueue[1] = -1;
        index = -1;
        // The wake lock was being held, but we're not actually going to do any
        // broadcasts, so release the wake lock.
        EventLog.writeEvent(EventLogTags.POWER_SCREEN_BROADCAST_STOP, 1, mBroadcastWakeLock.mCount);
        mBroadcastWakeLock.release();
    }
    // The broadcast queue has changed; make sure the screen is on if it
    // is now possible for it to be.
    updateNativePowerStateLocked();
    // Now send the message.
    if (index >= 0) {
        // Acquire the broadcast wake lock before changing the power
        // state. It will be release after the broadcast is sent.
        // We always increment the ref count for each notification in the queue
        // and always decrement when that notification is handled.
        mBroadcastWakeLock.acquire();
        EventLog.writeEvent(EventLogTags.POWER_SCREEN_BROADCAST_SEND, mBroadcastWakeLock.mCount);
        mHandler.post(mNotificationTask);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(ConditionalExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(BinaryExpr
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ConditionalExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(ConditionalExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(BinaryExpr
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ConditionalExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

