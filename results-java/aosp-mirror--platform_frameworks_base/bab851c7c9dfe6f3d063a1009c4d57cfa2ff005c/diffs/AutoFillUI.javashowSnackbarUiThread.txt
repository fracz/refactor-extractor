// similar to a snackbar, but can be a bit custom since it is more than just text. This will
// allow two buttons for saving or not saving the autofill for instance as well.
private void showSnackbarUiThread(View snackBar) {
    final LayoutParams params = new LayoutParams();
    params.setTitle("AutoFill Save");
    // TODO(b/33197203) use app window token
    params.type = LayoutParams.TYPE_PHONE;
    params.flags = // don't receive input events,
    LayoutParams.FLAG_NOT_FOCUSABLE | // resize for soft input
    LayoutParams.FLAG_ALT_FOCUSABLE_IM | // outside touches go to windows behind us
    LayoutParams.FLAG_NOT_TOUCH_MODAL;
    params.softInputMode = // pan with soft input
    LayoutParams.SOFT_INPUT_ADJUST_PAN;
    params.gravity = Gravity.BOTTOM | Gravity.START;
    params.width = LayoutParams.MATCH_PARENT;
    params.height = LayoutParams.WRAP_CONTENT;
    UiThread.getHandler().runWithScissors(() -> {
        mSnackbar = snackBar;
        mWm.addView(mSnackbar, params);
    }, 0);
}||||||||// similar to a snackbar, but can be a bit custom since it is more than just text. This will
// allow two buttons for saving or not saving the autofill for instance as well.
private void showSnackbarUiThread(View snackBar) {
    final LayoutParams params = new LayoutParams();
    params.setTitle("AutoFill Save");
    // TODO(b/33197203) use app window token
    params.type = LayoutParams.TYPE_PHONE;
    params.flags = // don't receive input events,
    LayoutParams.FLAG_NOT_FOCUSABLE | // resize for soft input
    LayoutParams.FLAG_ALT_FOCUSABLE_IM | // outside touches go to windows behind us
    LayoutParams.FLAG_NOT_TOUCH_MODAL;
    params.softInputMode = // pan with soft input
    LayoutParams.SOFT_INPUT_ADJUST_PAN;
    params.gravity = Gravity.BOTTOM | Gravity.START;
    params.width = LayoutParams.MATCH_PARENT;
    params.height = LayoutParams.WRAP_CONTENT;
    UiThread.getHandler().runWithScissors(() -> {
        mSnackbar = snackBar;
        mWm.addView(mSnackbar, params);
    }, 0);
    if (DEBUG) {
        Slog.d(TAG, "showSnackbar(): auto dismissing it in " + SNACK_BAR_LIFETIME_MS + " ms");
    }
    mHandlerCaller.sendMessageDelayed(mHandlerCaller.obtainMessage(MSG_HIDE_SNACK_BAR), SNACK_BAR_LIFETIME_MS);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
							LineComment
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
							LineComment
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
						LineComment
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(LambdaExpr
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
							LineComment
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
							LineComment
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
						LineComment
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(LambdaExpr
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

