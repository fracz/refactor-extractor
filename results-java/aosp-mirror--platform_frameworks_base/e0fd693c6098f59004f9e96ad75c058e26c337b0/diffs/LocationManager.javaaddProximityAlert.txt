/**
 * Sets a proximity alert for the location given by the position
 * (latitude, longitude) and the given radius.  When the device
 * detects that it has entered or exited the area surrounding the
 * location, the given PendingIntent will be used to create an Intent
 * to be fired.
 *
 * <p> The fired Intent will have a boolean extra added with key
 * {@link #KEY_PROXIMITY_ENTERING}. If the value is true, the device is
 * entering the proximity region; if false, it is exiting.
 *
 * <p> Due to the approximate nature of position estimation, if the
 * device passes through the given area briefly, it is possible
 * that no Intent will be fired.  Similarly, an Intent could be
 * fired if the device passes very close to the given area but
 * does not actually enter it.
 *
 * <p> After the number of milliseconds given by the expiration
 * parameter, the location manager will delete this proximity
 * alert and no longer monitor it.  A value of -1 indicates that
 * there should be no expiration time.
 *
 * <p> In case the screen goes to sleep, checks for proximity alerts
 * happen only once every 4 minutes. This conserves battery life by
 * ensuring that the device isn't perpetually awake.
 *
 * <p> Internally, this method uses both {@link #NETWORK_PROVIDER}
 * and {@link #GPS_PROVIDER}.
 *
 * @param latitude the latitude of the central point of the
 * alert region
 * @param longitude the longitude of the central point of the
 * alert region
 * @param radius the radius of the central point of the
 * alert region, in meters
 * @param expiration time for this proximity alert, in milliseconds,
 * or -1 to indicate no expiration
 * @param intent a PendingIntent that will be used to generate an Intent to
 * fire when entry to or exit from the alert region is detected
 *
 * @throws SecurityException if no permission exists for the required
 * providers.
 */
public void addProximityAlert(double latitude, double longitude, float radius, long expiration, PendingIntent intent) {
    if (false) {
        Log.d(TAG, "addProximityAlert: latitude = " + latitude + ", longitude = " + longitude + ", radius = " + radius + ", expiration = " + expiration + ", intent = " + intent);
    }
    try {
        mService.addProximityAlert(latitude, longitude, radius, expiration, intent);
    } catch (RemoteException ex) {
        Log.e(TAG, "addProximityAlert: RemoteException", ex);
    }
}||||||||/**
 * Sets a proximity alert for the location given by the position
 * (latitude, longitude) and the given radius.  When the device
 * detects that it has entered or exited the area surrounding the
 * location, the given PendingIntent will be used to create an Intent
 * to be fired.
 *
 * <p> The fired Intent will have a boolean extra added with key
 * {@link #KEY_PROXIMITY_ENTERING}. If the value is true, the device is
 * entering the proximity region; if false, it is exiting.
 *
 * <p> Due to the approximate nature of position estimation, if the
 * device passes through the given area briefly, it is possible
 * that no Intent will be fired.  Similarly, an Intent could be
 * fired if the device passes very close to the given area but
 * does not actually enter it.
 *
 * <p> After the number of milliseconds given by the expiration
 * parameter, the location manager will delete this proximity
 * alert and no longer monitor it.  A value of -1 indicates that
 * there should be no expiration time.
 *
 * <p> In case the screen goes to sleep, checks for proximity alerts
 * happen only once every 4 minutes. This conserves battery life by
 * ensuring that the device isn't perpetually awake.
 *
 * <p> Internally, this method uses both {@link #NETWORK_PROVIDER}
 * and {@link #GPS_PROVIDER}.
 *
 * @param latitude the latitude of the central point of the
 * alert region
 * @param longitude the longitude of the central point of the
 * alert region
 * @param radius the radius of the central point of the
 * alert region, in meters
 * @param expiration time for this proximity alert, in milliseconds,
 * or -1 to indicate no expiration
 * @param intent a PendingIntent that will be used to generate an Intent to
 * fire when entry to or exit from the alert region is detected
 *
 * @throws SecurityException if no permission exists for the required
 * providers.
 */
public void addProximityAlert(double latitude, double longitude, float radius, long expiration, PendingIntent intent) {
    if (false) {
        Log.d(TAG, "addProximityAlert: latitude = " + latitude + ", longitude = " + longitude + ", radius = " + radius + ", expiration = " + expiration + ", intent = " + intent);
    }
    try {
        mService.addProximityAlert(latitude, longitude, radius, expiration, intent, mContext.getPackageName());
    } catch (RemoteException ex) {
        Log.e(TAG, "addProximityAlert: RemoteException", ex);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														StringLiteralExpr
													)
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														StringLiteralExpr
													)
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

