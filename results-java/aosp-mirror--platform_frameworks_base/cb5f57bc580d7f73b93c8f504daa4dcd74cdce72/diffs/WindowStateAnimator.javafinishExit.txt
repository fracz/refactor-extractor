void finishExit() {
    if (WindowManagerService.DEBUG_ANIM)
        Slog.v(TAG, "finishExit in " + this + ": exiting=" + mWin.mExiting + " remove=" + mWin.mRemoveOnExit + " windowAnimating=" + isWindowAnimating());
    final int N = mWin.mChildWindows.size();
    for (int i = 0; i < N; i++) {
        mWin.mChildWindows.get(i).mWinAnimator.finishExit();
    }
    if (mEnteringAnimation) {
        mEnteringAnimation = false;
        mService.requestTraversal();
        // to be informed about their entrance animation end.
        if (mWin.mAppToken == null) {
            try {
                mWin.mClient.dispatchWindowShown();
            } catch (RemoteException e) {
            }
        }
    }
    if (!isWindowAnimating()) {
        // TODO (multidisplay): Accessibility is supported only for the default display.
        if (mService.mAccessibilityController != null && mWin.getDisplayId() == DEFAULT_DISPLAY) {
            mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
        }
    }
    if (!mWin.mExiting) {
        return;
    }
    if (isWindowAnimating()) {
        return;
    }
    if (WindowManagerService.localLOGV)
        Slog.v(TAG, "Exit animation finished in " + this + ": remove=" + mWin.mRemoveOnExit);
    if (mSurfaceController != null && mSurfaceController.hasSurface()) {
        mService.mDestroySurface.add(mWin);
        mWin.mDestroying = true;
        hide("finishExit");
    }
    mWin.mExiting = false;
    if (mWin.mRemoveOnExit) {
        mService.mPendingRemove.add(mWin);
        mWin.mRemoveOnExit = false;
    }
    mWallpaperControllerLocked.hideWallpapers(mWin);
}||||||||void finishExit() {
    if (WindowManagerService.DEBUG_ANIM)
        Slog.v(TAG, "finishExit in " + this + ": exiting=" + mWin.mExiting + " remove=" + mWin.mRemoveOnExit + " windowAnimating=" + isWindowAnimating());
    final int N = mWin.mChildWindows.size();
    for (int i = 0; i < N; i++) {
        mWin.mChildWindows.get(i).mWinAnimator.finishExit();
    }
    if (mEnteringAnimation) {
        mEnteringAnimation = false;
        mService.requestTraversal();
        // to be informed about their entrance animation end.
        if (mWin.mAppToken == null) {
            try {
                mWin.mClient.dispatchWindowShown();
            } catch (RemoteException e) {
            }
        }
    }
    if (!isWindowAnimating()) {
        // TODO (multidisplay): Accessibility is supported only for the default display.
        if (mService.mAccessibilityController != null && mWin.getDisplayId() == DEFAULT_DISPLAY) {
            mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
        }
    }
    if (!mWin.shouldDestroySurfaceWhenAnimationFinishes()) {
        return;
    }
    if (isWindowAnimating()) {
        return;
    }
    if (localLOGV)
        Slog.v(TAG, "Exit animation finished in " + this + ": remove=" + mWin.mRemoveOnExit);
    if (mSurfaceController != null && mSurfaceController.hasSurface()) {
        mService.scheduleSurfaceDestroy(mWin);
        if (mWin.mExiting) {
            mWin.mDestroying = true;
        }
        hide("finishExit");
    }
    mWin.mExiting = false;
    if (mWin.mRemoveOnExit) {
        mService.mPendingRemove.add(mWin);
        mWin.mRemoveOnExit = false;
    }
    mWallpaperControllerLocked.hideWallpapers(mWin);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(ThisExpr
												)
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(ThisExpr
								)
							)
							StringLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(ThisExpr
												)
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(ThisExpr
								)
							)
							StringLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

