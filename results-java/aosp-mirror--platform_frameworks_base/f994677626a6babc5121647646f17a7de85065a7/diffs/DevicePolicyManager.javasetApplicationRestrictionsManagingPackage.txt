/**
 * Called by a profile owner or device owner to grant permission to a package to manage
 * application restrictions for the calling user via {@link #setApplicationRestrictions} and
 * {@link #getApplicationRestrictions}.
 * <p>
 * This permission is persistent until it is later cleared by calling this method with a
 * {@code null} value or uninstalling the managing package.
 * <p>
 * The supplied application restriction managing package must be installed when calling this
 * API, otherwise an {@link NameNotFoundException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param packageName The package name which will be given access to application restrictions
 * APIs. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if {@code packageName} is not found
 */
public void setApplicationRestrictionsManagingPackage(@NonNull ComponentName admin, @Nullable String packageName) throws NameNotFoundException {
    throwIfParentInstance("setApplicationRestrictionsManagingPackage");
    if (mService != null) {
        try {
            if (!mService.setApplicationRestrictionsManagingPackage(admin, packageName)) {
                throw new NameNotFoundException(packageName);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}||||||||/**
 * Called by a profile owner or device owner to grant permission to a package to manage
 * application restrictions for the calling user via {@link #setApplicationRestrictions} and
 * {@link #getApplicationRestrictions}.
 * <p>
 * This permission is persistent until it is later cleared by calling this method with a
 * {@code null} value or uninstalling the managing package.
 * <p>
 * The supplied application restriction managing package must be installed when calling this
 * API, otherwise an {@link NameNotFoundException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param packageName The package name which will be given access to application restrictions
 * APIs. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @throws NameNotFoundException if {@code packageName} is not found
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #setDelegatedScopes}
 * with the {@link #DELEGATION_APP_RESTRICTIONS} scope instead.
 */
@Deprecated
public void setApplicationRestrictionsManagingPackage(@NonNull ComponentName admin, @Nullable String packageName) throws NameNotFoundException {
    throwIfParentInstance("setApplicationRestrictionsManagingPackage");
    if (mService != null) {
        try {
            if (!mService.setApplicationRestrictionsManagingPackage(admin, packageName)) {
                throw new NameNotFoundException(packageName);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

