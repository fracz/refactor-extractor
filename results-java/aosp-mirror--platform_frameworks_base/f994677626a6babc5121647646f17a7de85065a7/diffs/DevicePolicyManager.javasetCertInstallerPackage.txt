/**
 * Called by a profile owner or device owner to grant access to privileged certificate
 * manipulation APIs to a third-party certificate installer app. Granted APIs include
 * {@link #getInstalledCaCerts}, {@link #hasCaCertInstalled}, {@link #installCaCert},
 * {@link #uninstallCaCert}, {@link #uninstallAllUserCaCerts} and {@link #installKeyPair}.
 * <p>
 * Delegated certificate installer is a per-user state. The delegated access is persistent until
 * it is later cleared by calling this method with a null value or uninstallling the certificate
 * installer.
 * <p>
 * <b>Note:</b>Starting from {@link android.os.Build.VERSION_CODES#N}, if the caller
 * application's target SDK version is {@link android.os.Build.VERSION_CODES#N} or newer, the
 * supplied certificate installer package must be installed when calling this API, otherwise an
 * {@link IllegalArgumentException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param installerPackage The package name of the certificate installer which will be given
 * access. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or a profile owner.
 */
public void setCertInstallerPackage(@NonNull ComponentName admin, @Nullable String installerPackage) throws SecurityException {
    throwIfParentInstance("setCertInstallerPackage");
    if (mService != null) {
        try {
            mService.setCertInstallerPackage(admin, installerPackage);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}||||||||/**
 * Called by a profile owner or device owner to grant access to privileged certificate
 * manipulation APIs to a third-party certificate installer app. Granted APIs include
 * {@link #getInstalledCaCerts}, {@link #hasCaCertInstalled}, {@link #installCaCert},
 * {@link #uninstallCaCert}, {@link #uninstallAllUserCaCerts} and {@link #installKeyPair}.
 * <p>
 * Delegated certificate installer is a per-user state. The delegated access is persistent until
 * it is later cleared by calling this method with a null value or uninstallling the certificate
 * installer.
 * <p>
 * <b>Note:</b>Starting from {@link android.os.Build.VERSION_CODES#N}, if the caller
 * application's target SDK version is {@link android.os.Build.VERSION_CODES#N} or newer, the
 * supplied certificate installer package must be installed when calling this API, otherwise an
 * {@link IllegalArgumentException} will be thrown.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @param installerPackage The package name of the certificate installer which will be given
 * access. If {@code null} is given the current package will be cleared.
 * @throws SecurityException if {@code admin} is not a device or a profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #setDelegatedScopes}
 * with the {@link #DELEGATION_CERT_INSTALL} scope instead.
 */
@Deprecated
public void setCertInstallerPackage(@NonNull ComponentName admin, @Nullable String installerPackage) throws SecurityException {
    throwIfParentInstance("setCertInstallerPackage");
    if (mService != null) {
        try {
            mService.setCertInstallerPackage(admin, installerPackage);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

