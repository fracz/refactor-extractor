/**
 * Gets the set of digests to which the key is restricted.
 *
 * @throws IllegalStateException if this restriction has not been specified.
 *
 * @see #isDigestsSpecified()
 *
 * @hide
 */
@KeyStoreKeyConstraints.DigestEnum
public int getDigests() {
    if (mDigests == null) {
        throw new IllegalStateException("Digests not specified");
    }
    return mDigests;
}||||||||/**
 * Gets the set of digest algorithms with which the key can be used.
 *
 * @throws IllegalStateException if this set has not been specified.
 *
 * @see #isDigestsSpecified()
 *
 * @hide
 */
public String[] getDigests() {
    if (mDigests == null) {
        throw new IllegalStateException("Digests not specified");
    }
    return ArrayUtils.cloneIfNotEmpty(mDigests);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
			Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ArrayType
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

