protected boolean turnOnUpstreamMobileConnection(int apnType) {
    if (apnType == ConnectivityManager.TYPE_NONE) {
        return false;
    }
    if (apnType != mMobileApnReserved) {
        // Unregister any previous mobile upstream callback because
        // this request, if any, will be different.
        turnOffUpstreamMobileConnection();
    }
    if (mMobileUpstreamCallback != null) {
        // Looks like we already filed a request for this apnType.
        return true;
    }
    switch(apnType) {
        case ConnectivityManager.TYPE_MOBILE_DUN:
        case ConnectivityManager.TYPE_MOBILE:
        case ConnectivityManager.TYPE_MOBILE_HIPRI:
            mMobileApnReserved = apnType;
            break;
        default:
            return false;
    }
    NetworkRequest.Builder builder = new NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
    if (apnType == ConnectivityManager.TYPE_MOBILE_DUN) {
        builder.addCapability(NetworkCapabilities.NET_CAPABILITY_DUN).removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED);
    } else {
        builder.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
    }
    NetworkRequest mobileUpstreamRequest = builder.build();
    // Other mechanisms notice network and interface changes and act upon them.
    // TODO, imminently: replace with a proper NetworkCallback-based scheme.
    // 
    // TODO: Change the timeout from 0 (no onUnavailable callback) to use some
    // moderate callback time (once timeout callbacks are implemented). This might
    // be useful for updating some UI. Additionally, we should definitely log a
    // message to aid in any subsequent debugging.
    mMobileUpstreamCallback = new ConnectivityManager.NetworkCallback();
    if (DBG)
        Log.d(TAG, "requesting mobile upstream network: " + mobileUpstreamRequest);
    getConnectivityManager().requestNetwork(mobileUpstreamRequest, mMobileUpstreamCallback, 0, apnType);
    return true;
}||||||||protected boolean turnOnUpstreamMobileConnection(int apnType) {
    if (apnType == ConnectivityManager.TYPE_NONE) {
        return false;
    }
    if (apnType != mMobileApnReserved) {
        // Unregister any previous mobile upstream callback because
        // this request, if any, will be different.
        turnOffUpstreamMobileConnection();
    }
    if (mMobileUpstreamCallback != null) {
        // Looks like we already filed a request for this apnType.
        return true;
    }
    switch(apnType) {
        case ConnectivityManager.TYPE_MOBILE_DUN:
        case ConnectivityManager.TYPE_MOBILE:
        case ConnectivityManager.TYPE_MOBILE_HIPRI:
            mMobileApnReserved = apnType;
            break;
        default:
            return false;
    }
    final NetworkRequest.Builder builder = new NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
    if (apnType == ConnectivityManager.TYPE_MOBILE_DUN) {
        builder.removeCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).addCapability(NetworkCapabilities.NET_CAPABILITY_DUN);
    } else {
        builder.addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET);
    }
    final NetworkRequest mobileUpstreamRequest = builder.build();
    // The UpstreamNetworkMonitor's callback will be notified.
    // Therefore, to avoid duplicate notifications, we only register a no-op.
    mMobileUpstreamCallback = new NetworkCallback();
    // message to aid in any subsequent debugging
    if (DBG)
        Log.d(TAG, "requesting mobile upstream network: " + mobileUpstreamRequest);
    getConnectivityManager().requestNetwork(mobileUpstreamRequest, mMobileUpstreamCallback, 0, apnType);
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

