private int performDexOptLI(PackageParser.Package pkg, String[] targetInstructionSets, boolean useProfiles, boolean extractOnly) {
    final String[] instructionSets = targetInstructionSets != null ? targetInstructionSets : getAppDexInstructionSets(pkg.applicationInfo);
    if (!canOptimizePackage(pkg)) {
        return DEX_OPT_SKIPPED;
    }
    final boolean vmSafeMode = (pkg.applicationInfo.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0;
    final boolean debuggable = (pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
    final List<String> paths = pkg.getAllCodePathsExcludingResourceOnly();
    boolean performedDexOpt = false;
    final String[] dexCodeInstructionSets = getDexCodeInstructionSets(instructionSets);
    for (String dexCodeInstructionSet : dexCodeInstructionSets) {
        if (!useProfiles && shouldSkipBasedOnISA(pkg, dexCodeInstructionSet)) {
            // Skip only if we do not use profiles since they might trigger a recompilation.
            continue;
        }
        for (String path : paths) {
            int dexoptNeeded;
            try {
                dexoptNeeded = DexFile.getDexOptNeeded(path, pkg.packageName, dexCodeInstructionSet, /* defer */
                false);
            } catch (IOException ioe) {
                Slog.w(TAG, "IOException reading apk: " + path, ioe);
                return DEX_OPT_FAILED;
            }
            dexoptNeeded = adjustDexoptNeeded(dexoptNeeded);
            if (dexoptNeeded == DexFile.NO_DEXOPT_NEEDED) {
                if (useProfiles) {
                    // Profiles may trigger re-compilation. The final decision is taken in
                    // installd.
                    dexoptNeeded = DexFile.DEX2OAT_NEEDED;
                } else {
                    // No dexopt needed and we don't use profiles. Nothing to do.
                    continue;
                }
            }
            final String dexoptType;
            String oatDir = null;
            if (dexoptNeeded == DexFile.DEX2OAT_NEEDED) {
                dexoptType = "dex2oat";
                oatDir = createOatDirIfSupported(pkg, dexCodeInstructionSet);
            } else if (dexoptNeeded == DexFile.PATCHOAT_NEEDED) {
                dexoptType = "patchoat";
            } else if (dexoptNeeded == DexFile.SELF_PATCHOAT_NEEDED) {
                dexoptType = "self patchoat";
            } else {
                throw new IllegalStateException("Invalid dexopt needed: " + dexoptNeeded);
            }
            Log.i(TAG, "Running dexopt (" + dexoptType + ") on: " + path + " pkg=" + pkg.applicationInfo.packageName + " isa=" + dexCodeInstructionSet + " vmSafeMode=" + vmSafeMode + " debuggable=" + debuggable + " extractOnly=" + extractOnly + " oatDir = " + oatDir);
            final int sharedGid = UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
            final int dexFlags = adjustDexoptFlags((!pkg.isForwardLocked() ? DEXOPT_PUBLIC : 0) | (vmSafeMode ? DEXOPT_SAFEMODE : 0) | (debuggable ? DEXOPT_DEBUGGABLE : 0) | (extractOnly ? DEXOPT_EXTRACTONLY : 0) | DEXOPT_BOOTCOMPLETE);
            try {
                mInstaller.dexopt(path, sharedGid, pkg.packageName, dexCodeInstructionSet, dexoptNeeded, oatDir, dexFlags, pkg.volumeUuid, useProfiles);
                performedDexOpt = true;
            } catch (InstallerException e) {
                Slog.w(TAG, "Failed to dexopt", e);
            }
        }
        if (!extractOnly) {
            // At this point we haven't failed dexopt and we haven't deferred dexopt. We must
            // either have either succeeded dexopt, or have had getDexOptNeeded tell us
            // it isn't required. We therefore mark that this package doesn't need dexopt unless
            // it's forced. performedDexOpt will tell us whether we performed dex-opt or skipped
            // it.
            recordSuccessfulDexopt(pkg, dexCodeInstructionSet);
        }
    }
    // package doesn't need dexopt any longer.
    return performedDexOpt ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;
}||||||||private int performDexOptLI(PackageParser.Package pkg, String[] targetInstructionSets, boolean useProfiles, boolean extractOnly) {
    final String[] instructionSets = targetInstructionSets != null ? targetInstructionSets : getAppDexInstructionSets(pkg.applicationInfo);
    if (!canOptimizePackage(pkg)) {
        return DEX_OPT_SKIPPED;
    }
    final boolean vmSafeMode = (pkg.applicationInfo.flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0;
    final boolean debuggable = (pkg.applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;
    final List<String> paths = pkg.getAllCodePathsExcludingResourceOnly();
    boolean performedDexOpt = false;
    final String[] dexCodeInstructionSets = getDexCodeInstructionSets(instructionSets);
    for (String dexCodeInstructionSet : dexCodeInstructionSets) {
        if (!useProfiles && shouldSkipBasedOnISA(pkg, dexCodeInstructionSet)) {
            // Skip only if we do not use profiles since they might trigger a recompilation.
            continue;
        }
        for (String path : paths) {
            if (useProfiles && isUsedByOtherApps(path)) {
                // We cannot use profile guided compilation if the apk was used by another app.
                useProfiles = false;
            }
            int dexoptNeeded;
            try {
                dexoptNeeded = DexFile.getDexOptNeeded(path, pkg.packageName, dexCodeInstructionSet, /* defer */
                false);
            } catch (IOException ioe) {
                Slog.w(TAG, "IOException reading apk: " + path, ioe);
                return DEX_OPT_FAILED;
            }
            dexoptNeeded = adjustDexoptNeeded(dexoptNeeded);
            if (dexoptNeeded == DexFile.NO_DEXOPT_NEEDED) {
                if (useProfiles) {
                    // Profiles may trigger re-compilation. The final decision is taken in
                    // installd.
                    dexoptNeeded = DexFile.DEX2OAT_NEEDED;
                } else {
                    // No dexopt needed and we don't use profiles. Nothing to do.
                    continue;
                }
            }
            final String dexoptType;
            String oatDir = null;
            if (dexoptNeeded == DexFile.DEX2OAT_NEEDED) {
                dexoptType = "dex2oat";
                oatDir = createOatDirIfSupported(pkg, dexCodeInstructionSet);
            } else if (dexoptNeeded == DexFile.PATCHOAT_NEEDED) {
                dexoptType = "patchoat";
            } else if (dexoptNeeded == DexFile.SELF_PATCHOAT_NEEDED) {
                dexoptType = "self patchoat";
            } else {
                throw new IllegalStateException("Invalid dexopt needed: " + dexoptNeeded);
            }
            Log.i(TAG, "Running dexopt (" + dexoptType + ") on: " + path + " pkg=" + pkg.applicationInfo.packageName + " isa=" + dexCodeInstructionSet + " vmSafeMode=" + vmSafeMode + " debuggable=" + debuggable + " extractOnly=" + extractOnly + " oatDir = " + oatDir);
            final int sharedGid = UserHandle.getSharedAppGid(pkg.applicationInfo.uid);
            // Profile guide compiled oat files should not be public.
            final boolean isPublic = !pkg.isForwardLocked() && !useProfiles;
            final int dexFlags = adjustDexoptFlags((isPublic ? DEXOPT_PUBLIC : 0) | (vmSafeMode ? DEXOPT_SAFEMODE : 0) | (debuggable ? DEXOPT_DEBUGGABLE : 0) | (extractOnly ? DEXOPT_EXTRACTONLY : 0) | DEXOPT_BOOTCOMPLETE);
            try {
                mInstaller.dexopt(path, sharedGid, pkg.packageName, dexCodeInstructionSet, dexoptNeeded, oatDir, dexFlags, pkg.volumeUuid, useProfiles);
                performedDexOpt = true;
            } catch (InstallerException e) {
                Slog.w(TAG, "Failed to dexopt", e);
            }
        }
        if (!extractOnly) {
            // At this point we haven't failed dexopt and we haven't deferred dexopt. We must
            // either have either succeeded dexopt, or have had getDexOptNeeded tell us
            // it isn't required. We therefore mark that this package doesn't need dexopt unless
            // it's forced. performedDexOpt will tell us whether we performed dex-opt or skipped
            // it.
            recordSuccessfulDexopt(pkg, dexCodeInstructionSet);
        }
    }
    // package doesn't need dexopt any longer.
    return performedDexOpt ? DEX_OPT_PERFORMED : DEX_OPT_SKIPPED;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
							LineComment
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										NameExpr
											SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											(BooleanLiteralExpr
												(BlockComment
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ContinueStmt
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NullLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							StringLiteralExpr
																							NameExpr
																								SimpleName
																						)
																						StringLiteralExpr
																					)
																					NameExpr
																						SimpleName
																				)
																				StringLiteralExpr
																			)
																			(FieldAccessExpr
																				SimpleName
																				(FieldAccessExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		StringLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																StringLiteralExpr
															)
															NameExpr
																SimpleName
														)
														StringLiteralExpr
													)
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(EnclosedExpr
															(ConditionalExpr
																(UnaryExpr
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(IntegerLiteralExpr
																)
																NameExpr
																	SimpleName
															)
														)
														(EnclosedExpr
															(ConditionalExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
																NameExpr
																	SimpleName
															)
														)
													)
													(EnclosedExpr
														(ConditionalExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
															NameExpr
																SimpleName
														)
													)
												)
												(EnclosedExpr
													(ConditionalExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
														NameExpr
															SimpleName
													)
												)
											)
											NameExpr
												SimpleName
										)
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
							LineComment
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										NameExpr
											SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											(BooleanLiteralExpr
												(BlockComment
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ContinueStmt
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NullLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							StringLiteralExpr
																							NameExpr
																								SimpleName
																						)
																						StringLiteralExpr
																					)
																					NameExpr
																						SimpleName
																				)
																				StringLiteralExpr
																			)
																			(FieldAccessExpr
																				SimpleName
																				(FieldAccessExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		StringLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																StringLiteralExpr
															)
															NameExpr
																SimpleName
														)
														StringLiteralExpr
													)
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(EnclosedExpr
															(ConditionalExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
																NameExpr
																	SimpleName
															)
														)
														(EnclosedExpr
															(ConditionalExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
																NameExpr
																	SimpleName
															)
														)
													)
													(EnclosedExpr
														(ConditionalExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
															NameExpr
																SimpleName
														)
													)
												)
												(EnclosedExpr
													(ConditionalExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
														NameExpr
															SimpleName
													)
												)
											)
											NameExpr
												SimpleName
										)
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

