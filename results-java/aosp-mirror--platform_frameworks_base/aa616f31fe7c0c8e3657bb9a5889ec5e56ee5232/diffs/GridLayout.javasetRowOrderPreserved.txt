/**
 * When this property is <code>false</code>, the default state, GridLayout
 * is at liberty to choose an order that better suits the heights of its children.
 * <p>
 * When this property is <code>true</code>, GridLayout is forced to place row boundaries
 * (the {@link Interval#min min} and {@link Interval#max max} values of
 * a {@link LayoutParams#rowGroup rowGroup}'s {@link Group#span span})
 * so that they appear in ascending order in the view.
 * <p>
 * GridLayout implements this specification by creating ordering constraints between
 * the variables that represent the locations of the row boundaries.
 *
 * When this property is <code>true</code>, constraints are added for each pair of consecutive
 * indices: i.e. between row boundaries: <code>[0..1], [1..2], [3..4],...</code> etc.
 *
 * When the property is <code>false</code>, the ordering constraints are placed
 * only between boundaries that separate opposing edges of the layout's children.
 *
 * @param rowOrderPreserved use true to force GridLayout to respect the order
 * of row boundaries.
 *
 * @see #isRowOrderPreserved()
 *
 * @attr ref android.R.styleable#GridLayout_rowOrderPreserved
 */
public void setRowOrderPreserved(boolean rowOrderPreserved) {
    mVerticalAxis.setOrderPreserved(rowOrderPreserved);
}||||||||/**
 * When this property is <code>false</code>, the default state, GridLayout
 * is at liberty to choose an order that better suits the heights of its children.
 * <p>
 * When this property is <code>true</code>, GridLayout is forced to place the row boundaries
 * so that their associated grid indices are in ascending order in the view.
 * <p>
 * GridLayout implements this specification by creating ordering constraints between
 * the variables that represent the locations of the row boundaries.
 *
 * When this property is <code>true</code>, constraints are added for each pair of consecutive
 * indices: i.e. between row boundaries: <code>[0..1], [1..2], [3..4],...</code> etc.
 *
 * When the property is <code>false</code>, the ordering constraints are placed
 * only between boundaries that separate opposing edges of the layout's children.
 *
 * @param rowOrderPreserved use true to force GridLayout to respect the order
 * of row boundaries.
 *
 * @see #isRowOrderPreserved()
 *
 * @attr ref android.R.styleable#GridLayout_rowOrderPreserved
 */
public void setRowOrderPreserved(boolean rowOrderPreserved) {
    mVerticalAxis.setOrderPreserved(rowOrderPreserved);
    invalidateStructure();
    requestLayout();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

