/**
 * Used by setVrThread and setPersistentVrThread to update a thread's priority. When proc is
 * non-null it must be in SCHED_GROUP_TOP_APP.  When it is null, the tid is unconditionally
 * rescheduled.
 */
private int updateVrThreadLocked(ProcessRecord proc, int lastTid, int pid, int tid) {
    // ensure the tid belongs to the process
    if (!Process.isThreadInProcess(pid, tid)) {
        throw new IllegalArgumentException("VR thread does not belong to process");
    }
    // the calling process
    if (lastTid != 0 && Process.isThreadInProcess(pid, lastTid)) {
        try {
            Process.setThreadScheduler(lastTid, Process.SCHED_OTHER, 0);
        } catch (IllegalArgumentException e) {
        // Ignore this.  Only occurs in race condition where previous VR thread
        // was destroyed during this method call.
        }
    }
    // promote to FIFO now if the tid is non-zero
    try {
        if ((proc == null || proc.curSchedGroup == ProcessList.SCHED_GROUP_TOP_APP) && tid > 0) {
            Process.setThreadScheduler(tid, Process.SCHED_FIFO | Process.SCHED_RESET_ON_FORK, 1);
        }
        return tid;
    } catch (IllegalArgumentException e) {
        Slog.e(TAG, "Failed to set scheduling policy, thread does" + " not exist:\n" + e);
    }
    return lastTid;
}||||||||/**
 * Used by setVrThread and setPersistentVrThread to update a thread's priority. When proc is
 * non-null it must be in SCHED_GROUP_TOP_APP.  When it is null, the tid is unconditionally
 * rescheduled.
 */
private int updateVrThreadLocked(ProcessRecord proc, int lastTid, int pid, int tid) {
    // ensure the tid belongs to the process
    if (!isThreadInProcess(pid, tid)) {
        throw new IllegalArgumentException("VR thread does not belong to process");
    }
    // the calling process
    if (lastTid != 0 && isThreadInProcess(pid, lastTid)) {
        try {
            setThreadScheduler(lastTid, SCHED_OTHER, 0);
        } catch (IllegalArgumentException e) {
        // Ignore this.  Only occurs in race condition where previous VR thread
        // was destroyed during this method call.
        }
    }
    // promote to FIFO now if the tid is non-zero
    try {
        if ((proc == null || proc.curSchedGroup == ProcessList.SCHED_GROUP_TOP_APP) && tid > 0) {
            setThreadScheduler(tid, SCHED_FIFO | SCHED_RESET_ON_FORK, 1);
        }
        return tid;
    } catch (IllegalArgumentException e) {
        Slog.e(TAG, "Failed to set scheduling policy, thread does" + " not exist:\n" + e);
    }
    return lastTid;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

