/**
 * Removes the stack associated with the given {@param stackId}.  If the {@param stackId} is the
 * pinned stack, then its tasks are not explicitly removed when the stack is destroyed, but
 * instead moved back onto the fullscreen stack.
 */
void removeStackLocked(int stackId) {
    final ActivityStack stack = getStack(stackId);
    if (stack == null) {
        return;
    }
    final ArrayList<TaskRecord> tasks = stack.getAllTasks();
    if (stack.getStackId() == PINNED_STACK_ID) {
        final ActivityStack fullscreenStack = getStack(FULLSCREEN_WORKSPACE_STACK_ID);
        if (fullscreenStack != null) {
            final boolean isFullscreenStackVisible = fullscreenStack.getStackVisibilityLocked(null) == STACK_VISIBLE;
            for (int i = 0; i < tasks.size(); i++) {
                // Insert the task either at the top of the fullscreen stack if it is hidden,
                // or just under the top task if it is currently visible
                final int insertPosition = isFullscreenStackVisible ? Math.max(0, fullscreenStack.getChildCount() - 1) : fullscreenStack.getChildCount();
                final TaskRecord task = tasks.get(i);
                // Defer resume until we remove all the tasks
                task.reparent(FULLSCREEN_WORKSPACE_STACK_ID, insertPosition, REPARENT_LEAVE_STACK_IN_PLACE, !ANIMATE, DEFER_RESUME, "removeStack");
            }
            ensureActivitiesVisibleLocked(null, 0, !PRESERVE_WINDOWS);
            resumeFocusedStackTopActivityLocked();
        } else {
            // If there is no fullscreen stack, then create the stack and move all the tasks
            // onto the stack
            moveTasksToFullscreenStackLocked(PINNED_STACK_ID, !ON_TOP);
        }
    } else {
        for (int i = tasks.size() - 1; i >= 0; i--) {
            removeTaskByIdLocked(tasks.get(i).taskId, true, /* killProcess */
            REMOVE_FROM_RECENTS);
        }
    }
}||||||||/**
 * Removes the stack associated with the given {@param stackId}.  If the {@param stackId} is the
 * pinned stack, then its tasks are not explicitly removed when the stack is destroyed, but
 * instead moved back onto the fullscreen stack.
 */
void removeStackLocked(int stackId) {
    mRemoveStackStackId = stackId;
    mWindowManager.inSurfaceTransaction(this::removeStackInnerLocked);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BooleanLiteralExpr
								)
								NameExpr
									SimpleName
									(BlockComment
									)
								SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(UnaryExpr
									NameExpr
										SimpleName
								)
								SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(MethodCallExpr
											NullLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ConditionalExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													(BinaryExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(IntegerLiteralExpr
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(UnaryExpr
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NullLiteralExpr
								(IntegerLiteralExpr
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodReferenceExpr
					(ThisExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

