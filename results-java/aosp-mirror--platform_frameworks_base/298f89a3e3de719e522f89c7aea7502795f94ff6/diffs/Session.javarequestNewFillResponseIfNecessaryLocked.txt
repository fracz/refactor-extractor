/**
 * Starts (if necessary) a new fill request upon entering a view.
 *
 * <p>A new request will be started in 2 scenarios:
 * <ol>
 * <li>If the user manually requested autofill after the view was already filled.
 * <li>If the view is part of a new partition.
 * </ol>
 *
 * @param id The id of the view that is entered.
 * @param viewState The view that is entered.
 * @param flags The flag that was passed by the AutofillManager.
 */
private void requestNewFillResponseIfNecessaryLocked(@NonNull AutofillId id, @NonNull ViewState viewState, int flags) {
    // First check if this is a manual request after view was autofilled.
    final int state = viewState.getState();
    final boolean restart = (state & STATE_AUTOFILLED) != 0 && (flags & FLAG_MANUAL_REQUEST) != 0;
    if (restart) {
        if (sDebug)
            Slog.d(TAG, "Re-starting session on view  " + id);
        viewState.setState(STATE_RESTARTED_SESSION);
        requestNewFillResponseLocked(flags);
        return;
    }
    // If it's not, then check if it it should start a partition.
    if (shouldStartNewPartitionLocked(id)) {
        if (sDebug)
            Slog.d(TAG, "Starting partition for view id " + id);
        viewState.setState(ViewState.STATE_STARTED_PARTITION);
        requestNewFillResponseLocked(flags);
    }
}||||||||/**
 * Starts (if necessary) a new fill request upon entering a view.
 *
 * <p>A new request will be started in 2 scenarios:
 * <ol>
 * <li>If the user manually requested autofill after the view was already filled.
 * <li>If the view is part of a new partition.
 * </ol>
 *
 * @param id The id of the view that is entered.
 * @param viewState The view that is entered.
 * @param flags The flag that was passed by the AutofillManager.
 */
private void requestNewFillResponseIfNecessaryLocked(@NonNull AutofillId id, @NonNull ViewState viewState, int flags) {
    // First check if this is a manual request after view was autofilled.
    final int state = viewState.getState();
    final boolean restart = (state & STATE_AUTOFILLED) != 0 && (flags & FLAG_MANUAL_REQUEST) != 0;
    if (restart) {
        if (sDebug)
            Slog.d(TAG, "Re-starting session on view  " + id);
        viewState.setState(STATE_RESTARTED_SESSION);
        requestNewFillResponseLocked(flags);
        return;
    }
    // If it's not, then check if it it should start a partition.
    if (shouldStartNewPartitionLocked(id)) {
        if (sDebug) {
            Slog.d(TAG, "Starting partition for view id " + id + ": " + viewState.getStateAsString());
        }
        viewState.setState(ViewState.STATE_STARTED_PARTITION);
        requestNewFillResponseLocked(flags);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

