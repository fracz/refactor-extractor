/**
 * Set the current value for the number picker.
 * <p>
 * If the argument is less than the {@link NumberPicker#getMinValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the
 * current value is set to the {@link NumberPicker#getMinValue()} value.
 * </p>
 * <p>
 * If the argument is less than the {@link NumberPicker#getMinValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the
 * current value is set to the {@link NumberPicker#getMaxValue()} value.
 * </p>
 * <p>
 * If the argument is less than the {@link NumberPicker#getMaxValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the
 * current value is set to the {@link NumberPicker#getMaxValue()} value.
 * </p>
 * <p>
 * If the argument is less than the {@link NumberPicker#getMaxValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the
 * current value is set to the {@link NumberPicker#getMinValue()} value.
 * </p>
 *
 * @param value The current value.
 * @see #setWrapSelectorWheel(boolean)
 * @see #setMinValue(int)
 * @see #setMaxValue(int)
 */
public void setValue(int value) {
    if (mValue == value) {
        return;
    }
    if (value < mMinValue) {
        value = mWrapSelectorWheel ? mMaxValue : mMinValue;
    }
    if (value > mMaxValue) {
        value = mWrapSelectorWheel ? mMinValue : mMaxValue;
    }
    mValue = value;
    updateInputTextView();
    updateIncrementAndDecrementButtonsVisibilityState();
}||||||||/**
 * Set the current value for the number picker.
 * <p>
 * If the argument is less than the {@link NumberPicker#getMinValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the
 * current value is set to the {@link NumberPicker#getMinValue()} value.
 * </p>
 * <p>
 * If the argument is less than the {@link NumberPicker#getMinValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the
 * current value is set to the {@link NumberPicker#getMaxValue()} value.
 * </p>
 * <p>
 * If the argument is less than the {@link NumberPicker#getMaxValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>false</code> the
 * current value is set to the {@link NumberPicker#getMaxValue()} value.
 * </p>
 * <p>
 * If the argument is less than the {@link NumberPicker#getMaxValue()} and
 * {@link NumberPicker#getWrapSelectorWheel()} is <code>true</code> the
 * current value is set to the {@link NumberPicker#getMinValue()} value.
 * </p>
 *
 * @param value The current value.
 * @see #setWrapSelectorWheel(boolean)
 * @see #setMinValue(int)
 * @see #setMaxValue(int)
 */
public void setValue(int value) {
    if (mValue == value) {
        return;
    }
    if (value < mMinValue) {
        value = mWrapSelectorWheel ? mMaxValue : mMinValue;
    }
    if (value > mMaxValue) {
        value = mWrapSelectorWheel ? mMinValue : mMaxValue;
    }
    mValue = value;
    initializeSelectorWheelIndices();
    updateInputTextView();
    updateIncrementAndDecrementButtonsVisibilityState();
    invalidate();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

