/**
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is
 * completely transparent and 1 means the view is completely opaque.</p>
 *
 * <p>If this view overrides {@link #onSetAlpha(int)} to return true, then this view is
 * responsible for applying the opacity itself. Otherwise, calling this method is
 * equivalent to calling {@link #setLayerType(int, android.graphics.Paint)} and
 * setting a hardware layer.</p>
 *
 * @param alpha The opacity of the view.
 *
 * @see #setLayerType(int, android.graphics.Paint)
 *
 * @attr ref android.R.styleable#View_alpha
 */
public void setAlpha(float alpha) {
    mAlpha = alpha;
    if (onSetAlpha((int) (alpha * 255))) {
        mPrivateFlags |= ALPHA_SET;
        // subclass is handling alpha - don't optimize rendering cache invalidation
        invalidate();
    } else {
        mPrivateFlags &= ~ALPHA_SET;
        invalidate(false);
    }
}||||||||/**
 * <p>Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is
 * completely transparent and 1 means the view is completely opaque.</p>
 *
 * <p>If this view overrides {@link #onSetAlpha(int)} to return true, then this view is
 * responsible for applying the opacity itself. Otherwise, calling this method is
 * equivalent to calling {@link #setLayerType(int, android.graphics.Paint)} and
 * setting a hardware layer.</p>
 *
 * @param alpha The opacity of the view.
 *
 * @see #setLayerType(int, android.graphics.Paint)
 *
 * @attr ref android.R.styleable#View_alpha
 */
public void setAlpha(float alpha) {
    mAlpha = alpha;
    if (onSetAlpha((int) (alpha * 255))) {
        mPrivateFlags |= ALPHA_SET;
        // subclass is handling alpha - don't optimize rendering cache invalidation
        invalidate();
    } else {
        mPrivateFlags &= ~ALPHA_SET;
        invalidate(false);
    }
    invalidateParentIfAccelerated();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

