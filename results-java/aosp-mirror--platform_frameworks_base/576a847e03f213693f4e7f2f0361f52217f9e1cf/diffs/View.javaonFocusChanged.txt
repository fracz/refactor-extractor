/**
 * Called by the view system when the focus state of this view changes.
 * When the focus change event is caused by directional navigation, direction
 * and previouslyFocusedRect provide insight into where the focus is coming from.
 * When overriding, be sure to call up through to the super class so that
 * the standard focus handling will occur.
 *
 * @param gainFocus True if the View has focus; false otherwise.
 * @param direction The direction focus has moved when requestFocus()
 * is called to give this view focus. Values are
 * {@link #FOCUS_UP}, {@link #FOCUS_DOWN}, {@link #FOCUS_LEFT},
 * {@link #FOCUS_RIGHT}, {@link #FOCUS_FORWARD}, or {@link #FOCUS_BACKWARD}.
 * It may not always apply, in which case use the default.
 * @param previouslyFocusedRect The rectangle, in this view's coordinate
 * system, of the previously focused view.  If applicable, this will be
 * passed in as finer grained information about where the focus is coming
 * from (in addition to direction).  Will be <code>null</code> otherwise.
 */
@CallSuper
protected void onFocusChanged(boolean gainFocus, @FocusDirection int direction, @Nullable Rect previouslyFocusedRect) {
    if (gainFocus) {
        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_FOCUSED);
    } else {
        notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
    }
    InputMethodManager imm = InputMethodManager.peekInstance();
    if (!gainFocus) {
        if (isPressed()) {
            setPressed(false);
        }
        if (imm != null && mAttachInfo != null && mAttachInfo.mHasWindowFocus) {
            imm.focusOut(this);
        }
        onFocusLost();
    } else if (imm != null && mAttachInfo != null && mAttachInfo.mHasWindowFocus) {
        imm.focusIn(this);
    }
    if (isAutoFillable()) {
        AutoFillManager afm = getAutoFillManager();
        if (afm != null) {
            afm.focusChanged(this, gainFocus);
        }
    }
    invalidate(true);
    ListenerInfo li = mListenerInfo;
    if (li != null && li.mOnFocusChangeListener != null) {
        li.mOnFocusChangeListener.onFocusChange(this, gainFocus);
    }
    if (mAttachInfo != null) {
        mAttachInfo.mKeyDispatchState.reset(this);
    }
}||||||||/**
 * Called by the view system when the focus state of this view changes.
 * When the focus change event is caused by directional navigation, direction
 * and previouslyFocusedRect provide insight into where the focus is coming from.
 * When overriding, be sure to call up through to the super class so that
 * the standard focus handling will occur.
 *
 * @param gainFocus True if the View has focus; false otherwise.
 * @param direction The direction focus has moved when requestFocus()
 * is called to give this view focus. Values are
 * {@link #FOCUS_UP}, {@link #FOCUS_DOWN}, {@link #FOCUS_LEFT},
 * {@link #FOCUS_RIGHT}, {@link #FOCUS_FORWARD}, or {@link #FOCUS_BACKWARD}.
 * It may not always apply, in which case use the default.
 * @param previouslyFocusedRect The rectangle, in this view's coordinate
 * system, of the previously focused view.  If applicable, this will be
 * passed in as finer grained information about where the focus is coming
 * from (in addition to direction).  Will be <code>null</code> otherwise.
 */
@CallSuper
protected void onFocusChanged(boolean gainFocus, @FocusDirection int direction, @Nullable Rect previouslyFocusedRect) {
    if (gainFocus) {
        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_FOCUSED);
    } else {
        notifyViewAccessibilityStateChangedIfNeeded(AccessibilityEvent.CONTENT_CHANGE_TYPE_UNDEFINED);
    }
    InputMethodManager imm = InputMethodManager.peekInstance();
    if (!gainFocus) {
        if (isPressed()) {
            setPressed(false);
        }
        if (imm != null && mAttachInfo != null && mAttachInfo.mHasWindowFocus) {
            imm.focusOut(this);
        }
        onFocusLost();
    } else if (imm != null && mAttachInfo != null && mAttachInfo.mHasWindowFocus) {
        imm.focusIn(this);
    }
    if (isAutoFillable()) {
        AutoFillManager afm = getAutoFillManager();
        if (afm != null) {
            boolean adjGainFocus = gainFocus;
            if (adjGainFocus && getResolvedAutoFillMode() == AUTO_FILL_MODE_MANUAL) {
                adjGainFocus = false;
            }
            afm.focusChanged(this, adjGainFocus);
        }
    }
    invalidate(true);
    ListenerInfo li = mListenerInfo;
    if (li != null && li.mOnFocusChangeListener != null) {
        li.mOnFocusChangeListener.onFocusChange(this, gainFocus);
    }
    if (mAttachInfo != null) {
        mAttachInfo.mKeyDispatchState.reset(this);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(IfStmt
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(ThisExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(IfStmt
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(ThisExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(MethodCallExpr
										SimpleName
									)
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

