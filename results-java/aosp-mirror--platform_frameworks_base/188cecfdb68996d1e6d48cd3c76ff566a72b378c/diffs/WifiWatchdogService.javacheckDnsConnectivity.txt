/**
 * Checks whether the DNS can be reached using multiple attempts according
 * to the current setting values.
 *
 * @return Whether the DNS is reachable
 */
private boolean checkDnsConnectivity() {
    InetAddress dns = getDns();
    if (dns == null) {
        if (V) {
            myLogV("checkDnsConnectivity: Invalid DNS, returning false");
        }
        return false;
    }
    if (V) {
        myLogV("checkDnsConnectivity: Checking " + dns.getHostAddress() + " for connectivity");
    }
    int numInitialIgnoredPings = getInitialIgnoredPingCount();
    int numPings = getPingCount();
    int pingDelay = getPingDelayMs();
    int acceptableLoss = getAcceptablePacketLossPercentage();
    /**
     * See {@link Secure#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT}
     */
    int ignoredPingCounter = 0;
    int pingCounter = 0;
    int successCounter = 0;
    // No connectivity check needed
    if (numPings == 0) {
        return true;
    }
    // Do the initial pings that we ignore
    for (; ignoredPingCounter < numInitialIgnoredPings; ignoredPingCounter++) {
        if (shouldCancel())
            return false;
        boolean dnsAlive = DnsPinger.isDnsReachable(dns, getPingTimeoutMs());
        if (dnsAlive) {
            /*
                 * Successful "ignored" pings are *not* ignored (they count in the total number
                 * of pings), but failures are really ignored.
                 */
            pingCounter++;
            successCounter++;
        }
        if (V) {
            Slog.v(TAG, (dnsAlive ? "  +" : "  Ignored: -"));
        }
        if (shouldCancel())
            return false;
        try {
            Thread.sleep(pingDelay);
        } catch (InterruptedException e) {
            Slog.w(TAG, "Interrupted while pausing between pings", e);
        }
    }
    // Do the pings that we use to measure packet loss
    for (; pingCounter < numPings; pingCounter++) {
        if (shouldCancel())
            return false;
        if (DnsPinger.isDnsReachable(dns, getPingTimeoutMs())) {
            successCounter++;
            if (V) {
                Slog.v(TAG, "  +");
            }
        } else {
            if (V) {
                Slog.v(TAG, "  -");
            }
        }
        if (shouldCancel())
            return false;
        try {
            Thread.sleep(pingDelay);
        } catch (InterruptedException e) {
            Slog.w(TAG, "Interrupted while pausing between pings", e);
        }
    }
    int packetLossPercentage = 100 * (numPings - successCounter) / numPings;
    if (D) {
        Slog.d(TAG, packetLossPercentage + "% packet loss (acceptable is " + acceptableLoss + "%)");
    }
    return !shouldCancel() && (packetLossPercentage <= acceptableLoss);
}||||||||/**
 * Checks whether the DNS can be reached using multiple attempts according
 * to the current setting values.
 *
 * @return Whether the DNS is reachable
 */
private boolean checkDnsConnectivity() {
    InetAddress dns = getDns();
    if (dns == null) {
        if (V) {
            myLogV("checkDnsConnectivity: Invalid DNS, returning false");
        }
        return false;
    }
    if (V) {
        myLogV("checkDnsConnectivity: Checking " + dns.getHostAddress() + " for connectivity");
    }
    int numInitialIgnoredPings = getInitialIgnoredPingCount();
    int numPings = getPingCount();
    int pingDelay = getPingDelayMs();
    int acceptableLoss = getAcceptablePacketLossPercentage();
    /**
     * See {@link Secure#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT}
     */
    int ignoredPingCounter = 0;
    int pingCounter = 0;
    int successCounter = 0;
    // No connectivity check needed
    if (numPings == 0) {
        return true;
    }
    // Do the initial pings that we ignore
    for (; ignoredPingCounter < numInitialIgnoredPings; ignoredPingCounter++) {
        if (shouldCancel())
            return false;
        boolean dnsAlive = DnsPinger.isDnsReachable(dns, getPingTimeoutMs());
        if (dnsAlive) {
            /*
                 * Successful "ignored" pings are *not* ignored (they count in the total number
                 * of pings), but failures are really ignored.
                 */
            // TODO: This is confusing logic and should be rewitten
            // Here, successful 'ignored' pings are interpreted as a success in the below loop
            pingCounter++;
            successCounter++;
        }
        if (V) {
            Slog.v(TAG, (dnsAlive ? "  +" : "  Ignored: -"));
        }
        if (shouldCancel())
            return false;
        try {
            Thread.sleep(pingDelay);
        } catch (InterruptedException e) {
            Slog.w(TAG, "Interrupted while pausing between pings", e);
        }
    }
    // Do the pings that we use to measure packet loss
    for (; pingCounter < numPings; pingCounter++) {
        if (shouldCancel())
            return false;
        if (DnsPinger.isDnsReachable(dns, getPingTimeoutMs())) {
            successCounter++;
            if (V) {
                Slog.v(TAG, "  +");
            }
        } else {
            if (V) {
                Slog.v(TAG, "  -");
            }
        }
        if (shouldCancel())
            return false;
        try {
            Thread.sleep(pingDelay);
        } catch (InterruptedException e) {
            Slog.w(TAG, "Interrupted while pausing between pings", e);
        }
    }
    // TODO: Integer division might cause problems down the road...
    int packetLossPercentage = 100 * (numPings - successCounter) / numPings;
    if (D) {
        Slog.d(TAG, packetLossPercentage + "% packet loss (acceptable is " + acceptableLoss + "%)");
    }
    return !shouldCancel() && (packetLossPercentage <= acceptableLoss);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(ConditionalExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										StringLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(IntegerLiteralExpr
							)
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(ConditionalExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										StringLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(IntegerLiteralExpr
							)
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

