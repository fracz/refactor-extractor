/**
 * Return the full width measurement information for this view as computed
 * by the most recent call to {@link #measure(int, int)}.  This result is a bit mask
 * as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.
 * This should be used during measurement and layout calculations only. Use
 * {@link #getWidth()} to see how wide a view is after layout.
 *
 * @return The measured width of this view as a bit mask.
 */
public final int getMeasuredWidthAndState() {
    return mMeasuredWidth;
}||||||||/**
 * Return the full width measurement information for this view as computed
 * by the most recent call to {@link #measure(int, int)}.  This result is a bit mask
 * as defined by {@link #MEASURED_SIZE_MASK} and {@link #MEASURED_STATE_TOO_SMALL}.
 * This should be used during measurement and layout calculations only. Use
 * {@link #getWidth()} to see how wide a view is after layout.
 *
 * @return The measured width of this view as a bit mask.
 */
@ViewDebug.ExportedProperty(category = "measurement", flagMapping = { @ViewDebug.FlagToString(mask = MEASURED_STATE_MASK, equals = MEASURED_STATE_TOO_SMALL, name = "MEASURED_STATE_TOO_SMALL") })
public final int getMeasuredWidthAndState() {
    return mMeasuredWidth;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(ArrayInitializerExpr
				(NormalAnnotationExpr
					(MemberValuePair
						SimpleName
						NameExpr
							SimpleName
					)
					(MemberValuePair
						SimpleName
						NameExpr
							SimpleName
					)
					(MemberValuePair
						SimpleName
						StringLiteralExpr
					)
					Name
						Name
				)
			)
		)
		Name
			Name
	)
	(JavadocComment
	)
)

