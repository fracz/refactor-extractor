/*
    @Override
    public SparseMatrix set(int i, int j, double x) {
        if (i < 0 || i >= nrows || j < 0 || j >= ncols) {
            throw new IllegalArgumentException("i = " + i + " j = " + j);
        }

        for (int k = colIndex[j]; k < colIndex[j + 1]; k++) {
            if (rowIndex[k] == i) {
                this.x[k] = x;
                return this;
            }
        }

        throw new IllegalArgumentException("SparseMatrix does not support changing zero values to non-zeros.");
    }
*/
@Override
public void ax(double[] x, double[] y) {
    Arrays.fill(y, 0.0);
    for (int j = 0; j < ncols; j++) {
        for (int i = colIndex[j]; i < colIndex[j + 1]; i++) {
            y[rowIndex[i]] += this.x[i] * x[j];
        }
    }
}||||||||@Override
public void ax(double[] x, double[] y) {
    Arrays.fill(y, 0.0);
    for (int j = 0; j < ncols; j++) {
        for (int i = colIndex[j]; i < colIndex[j + 1]; i++) {
            y[rowIndex[i]] += this.x[i] * x[j];
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(ArrayAccessExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(ArrayAccessExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

