/**
 * This method will return a borrowed object to the bag.  Objects
 * that are borrowed from the bag but never "requited" will result
 * in a memory leak.
 *
 * @param bagEntry the value to return to the bag
 * @throws NullPointerException if value is null
 * @throws IllegalStateException if the requited value was not borrowed from the bag
 */
@SuppressWarnings("unchecked")
public void requite(final T bagEntry) {
    if (bagEntry.state().compareAndSet(STATE_IN_USE, STATE_NOT_IN_USE)) {
        final List threadLocalList = threadList.get();
        if (threadLocalList != null) {
            threadLocalList.add((weakThreadLocals ? new WeakReference<>(bagEntry) : bagEntry));
        }
        sequence.increment();
        synchronizer.releaseShared(1);
    } else {
        LOGGER.warn("Attempt to remove an object from the bag that does not exist: {}", bagEntry);
    }
}||||||||/**
 * This method will return a borrowed object to the bag.  Objects
 * that are borrowed from the bag but never "requited" will result
 * in a memory leak.
 *
 * @param bagEntry the value to return to the bag
 * @throws NullPointerException if value is null
 * @throws IllegalStateException if the requited value was not borrowed from the bag
 */
@SuppressWarnings("unchecked")
public void requite(final T bagEntry) {
    if (bagEntry.state().compareAndSet(STATE_IN_USE, STATE_NOT_IN_USE)) {
        final List threadLocalList = threadList.get();
        if (threadLocalList != null) {
            threadLocalList.add((weakThreadLocals ? new WeakReference<>(bagEntry) : bagEntry));
        }
        synchronizer.increment();
    } else {
        LOGGER.warn("Attempt to remove an object from the bag that does not exist: {}", bagEntry);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(EnclosedExpr
									(ConditionalExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ObjectCreationExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(EnclosedExpr
									(ConditionalExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ObjectCreationExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)

