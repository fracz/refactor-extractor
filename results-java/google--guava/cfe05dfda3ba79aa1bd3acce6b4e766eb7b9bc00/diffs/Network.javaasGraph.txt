/**
 * Returns a live view of this network as a {@link Graph}. The resulting {@link Graph} will have
 * an edge connecting node A to node B iff this {@link Network} has an edge connecting A to B.
 *
 * <p>{@link Graph#edgeValue(Object, Object)} will return the set of edges connecting node A to
 * node B if the set is non-empty, otherwise, it will throw {@link IllegalArgumentException}.
 *
 * <p>If this network {@link #allowsParallelEdges()}, parallel edges will treated as if collapsed
 * into a single edge. For example, the {@link #degree(Object)} of a node in the {@link Graph}
 * view may be less than the degree of the same node in this {@link Network}.
 */
Graph<N, Set<E>> asGraph();||||||||/**
 * Returns a live view of this network as a {@link Graph}. The resulting {@link Graph} will have
 * an edge connecting node A to node B iff this {@link Network} has an edge connecting A to B.
 *
 * <p>If this network {@link #allowsParallelEdges()}, parallel edges will treated as if collapsed
 * into a single edge. For example, the {@link #degree(Object)} of a node in the {@link Graph}
 * view may be less than the degree of the same node in this {@link Network}.
 */
Graph<N> asGraph();||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

