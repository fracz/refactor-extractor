/**
 * Returns true iff {@code graph} has at least one cycle.
 */
// TODO(user): Implement a similar method for undirected graphs, taking into
// consideration the difference in implementation, due to the notion of undirected
// edges. For instance, we should keep track of the edge used to reach a node to avoid
// reusing it (making a cycle by getting back to that node). Also, parallel edges will
// need to be carefully handled for undirected graphs.
public static boolean isCyclic(DirectedGraph<?, ?> graph) {
    checkNotNull(graph, "Directed graph passed can't be null.");
    Map<Object, NodeVisitState> nodeToVisitState = Maps.newHashMap();
    for (Object node : graph.nodes()) {
        if (nodeToVisitState.get(node) == null) {
            if (isSubgraphCyclic(graph, nodeToVisitState, node)) {
                return true;
            }
        }
    }
    return false;
}||||||||/**
 * Returns true iff {@code graph} has at least one cycle.
 */
public static boolean isCyclic(Graph<?, ?> graph) {
    // TODO(user): Implement an algorithm that also works on undirected graphs.
    // For instance, we should keep track of the edge used to reach a node to avoid
    // reusing it (making a cycle by getting back to that node). Also, parallel edges
    // will need to be carefully handled for undirected graphs.
    checkArgument(graph.isDirected(), "isCyclic() currently only works on directed graphs");
    Map<Object, NodeVisitState> nodeToVisitState = Maps.newHashMap();
    for (Object node : graph.nodes()) {
        if (nodeToVisitState.get(node) == null) {
            if (isSubgraphCyclic(graph, nodeToVisitState, node)) {
                return true;
            }
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
			(WildcardType
			)
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
			(WildcardType
			)
		)
	)
	(JavadocComment
	)
)

