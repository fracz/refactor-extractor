/**
 * Search a record in the cache and if found add it in the Database's level-1 cache.
 *
 * @param iRID
 * RecordID to search
 * @param iDbCache
 * Database's cache
 * @return The record if found, otherwise null
 */
public ORecordInternal<?> findRecord(final ORID iRID) {
    if (!enabled)
        // PRECONDITIONS
        return null;
    ORecordInternal<?> record;
    // SEARCH INTO DATABASE'S 1-LEVEL CACHE
    acquireSharedLock();
    try {
        record = entries.get(iRID);
    } finally {
        releaseSharedLock();
    }
    if (record == null) {
        // SEARCH INTO THE STORAGE'S 2-LEVEL CACHE
        record = level2cache.retrieveRecord(iRID);
        if (record != null) {
            // FOUND: MOVE IT INTO THE DB'S CACHE
            record.setDatabase(database);
            acquireExclusiveLock();
            try {
                entries.put(record.getIdentity(), record);
            } finally {
                releaseExclusiveLock();
            }
        }
    }
    OProfiler.getInstance().updateCounter(record != null ? PROFILER_CACHE_FOUND : PROFILER_CACHE_NOTFOUND, +1);
    return record;
}||||||||/**
 * Search a record in the cache and if found add it in the Database's level-1 cache.
 *
 * @param iRID
 * RecordID to search
 * @param iDbCache
 * Database's cache
 * @return The record if found, otherwise null
 */
public ORecordInternal<?> findRecord(final ORID iRID) {
    if (!enabled)
        // PRECONDITIONS
        return null;
    ORecordInternal<?> record;
    // SEARCH INTO DATABASE'S 1-LEVEL CACHE
    acquireSharedLock();
    try {
        record = entries.get(iRID);
    } finally {
        releaseSharedLock();
    }
    if (record == null) {
        // SEARCH INTO THE STORAGE'S 2-LEVEL CACHE
        record = level2cache.retrieveRecord(iRID);
        if (record != null) {
            // FOUND: MOVE IT INTO THE DB'S CACHE
            acquireExclusiveLock();
            try {
                entries.put(record.getIdentity(), record);
            } finally {
                releaseExclusiveLock();
            }
        }
    }
    OProfiler.getInstance().updateCounter(record != null ? PROFILER_CACHE_FOUND : PROFILER_CACHE_NOTFOUND, +1);
    return record;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(ReturnStmt
				NullLiteralExpr
				LineComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(TryStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(ReturnStmt
				NullLiteralExpr
				LineComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(TryStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

