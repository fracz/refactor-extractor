protected RuntimeException manageConflicts() {
    if (!groupResponsesByResult || request.getTask().getQuorumType() == OCommandDistributedReplicateRequest.QUORUM_TYPE.NONE)
        // NO QUORUM
        return null;
    if (dManager.getNodeStatus() != ODistributedServerManager.NODE_STATUS.ONLINE)
        // CURRENT NODE OFFLINE: JUST RETURN
        return null;
    final int bestResponsesGroupIndex = getBestResponsesGroup();
    final List<ODistributedResponse> bestResponsesGroup = responseGroups.get(bestResponsesGroupIndex);
    // final Object payload = bestResponsesGroup.get(0).getPayload();
    // if (payload instanceof RuntimeException)
    // // PROPAGATE RUNTIME EXCEPTION
    // throw (RuntimeException) payload;
    // else if (payload instanceof Throwable)
    // // WRAP EXCEPTION
    // throw OException.wrapException(new ODistributedException("Error on executing distributed request"), (Throwable) payload);
    final int maxCoherentResponses = bestResponsesGroup.size();
    final int conflicts = getExpectedResponses() - (maxCoherentResponses + discardedResponses);
    boolean requireUndo = false;
    if (isMinimumQuorumReached()) {
        // QUORUM SATISFIED
        if (responseGroups.size() == 1)
            // NO CONFLICT
            return null;
        if (checkNoWinnerCase(bestResponsesGroup))
            return null;
        if (fixNodesInConflict(bestResponsesGroup, conflicts))
            // FIX SUCCEED
            return null;
    }
    // QUORUM HASN'T BEEN REACHED
    ODistributedServerLog.warn(this, dManager.getLocalNodeName(), null, DIRECTION.NONE, "detected %d node(s) in timeout or in conflict and quorum (%d) has not been reached, rolling back changes for request (%s)", conflicts, quorum, request);
    final StringBuilder msg = new StringBuilder(256);
    msg.append("Quorum " + getQuorum() + " not reached for request (" + request + "). Elapsed=" + (System.currentTimeMillis() - sentOn) + "ms");
    final List<ODistributedResponse> res = getConflictResponses();
    if (res.isEmpty())
        msg.append(" No server in conflict. ");
    else {
        msg.append(" Servers in timeout/conflict are:");
        for (ODistributedResponse r : res) {
            msg.append("\n - ");
            msg.append(r.getExecutorNodeName());
            msg.append(": ");
            msg.append(r.getPayload());
        }
        msg.append("\n");
    }
    msg.append("Received: ");
    msg.append(responses);
    ODistributedServerLog.warn(this, dManager.getLocalNodeName(), null, DIRECTION.NONE, msg.toString());
    undoRequest();
    final Object goodResponsePayload = bestResponsesGroup.isEmpty() ? null : bestResponsesGroup.get(0).getPayload();
    if (goodResponsePayload instanceof RuntimeException)
        // RESPONSE IS ALREADY AN EXCEPTION: THROW THIS
        return (RuntimeException) goodResponsePayload;
    else if (goodResponsePayload instanceof Throwable)
        return OException.wrapException(new ODistributedException(msg.toString()), (Throwable) goodResponsePayload);
    else
        return new ODistributedOperationException(msg.toString());
}||||||||protected RuntimeException manageConflicts() {
    if (!groupResponsesByResult || request.getTask().getQuorumType() == OCommandDistributedReplicateRequest.QUORUM_TYPE.NONE)
        // NO QUORUM
        return null;
    if (dManager.getNodeStatus() != ODistributedServerManager.NODE_STATUS.ONLINE)
        // CURRENT NODE OFFLINE: JUST RETURN
        return null;
    final int bestResponsesGroupIndex = getBestResponsesGroup();
    final List<ODistributedResponse> bestResponsesGroup = responseGroups.get(bestResponsesGroupIndex);
    // final Object payload = bestResponsesGroup.get(0).getPayload();
    // if (payload instanceof RuntimeException)
    // // PROPAGATE RUNTIME EXCEPTION
    // throw (RuntimeException) payload;
    // else if (payload instanceof Throwable)
    // // WRAP EXCEPTION
    // throw OException.wrapException(new ODistributedException("Error on executing distributed request"), (Throwable) payload);
    final int maxCoherentResponses = bestResponsesGroup.size();
    final int conflicts = getExpectedResponses() - (maxCoherentResponses + discardedResponses);
    boolean requireUndo = false;
    if (isMinimumQuorumReached()) {
        // QUORUM SATISFIED
        if (responseGroups.size() == 1)
            // NO CONFLICT
            return null;
        if (checkNoWinnerCase(bestResponsesGroup))
            return null;
        if (fixNodesInConflict(bestResponsesGroup, conflicts))
            // FIX SUCCEED
            return null;
    }
    // QUORUM HASN'T BEEN REACHED
    ODistributedServerLog.warn(this, dManager.getLocalNodeName(), null, DIRECTION.NONE, "detected %d node(s) in timeout or in conflict and quorum (%d) has not been reached, rolling back changes for request (%s)", conflicts, quorum, request);
    if (ODistributedServerLog.isDebugEnabled())
        ODistributedServerLog.debug(this, dManager.getLocalNodeName(), null, DIRECTION.NONE, composeConflictMessage());
    undoRequest();
    final Object goodResponsePayload = bestResponsesGroup.isEmpty() ? null : bestResponsesGroup.get(0).getPayload();
    if (goodResponsePayload instanceof RuntimeException)
        // RESPONSE IS ALREADY AN EXCEPTION: THROW THIS
        return (RuntimeException) goodResponsePayload;
    else if (goodResponsePayload instanceof Throwable)
        return OException.wrapException(new ODistributedException(composeConflictMessage()), (Throwable) goodResponsePayload);
    else
        return new ODistributedOperationException(composeConflictMessage());
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(ReturnStmt
				NullLiteralExpr
				LineComment
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
				NullLiteralExpr
				LineComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(ReturnStmt
						NullLiteralExpr
						LineComment
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(ReturnStmt
						NullLiteralExpr
						LineComment
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ThisExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
										)
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(EnclosedExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ThisExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NullLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
				(CastExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				LineComment
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(ReturnStmt
				NullLiteralExpr
				LineComment
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
				NullLiteralExpr
				LineComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(ReturnStmt
						NullLiteralExpr
						LineComment
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(ReturnStmt
						NullLiteralExpr
						LineComment
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ThisExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					(ThisExpr
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NullLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
				(CastExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				LineComment
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)

