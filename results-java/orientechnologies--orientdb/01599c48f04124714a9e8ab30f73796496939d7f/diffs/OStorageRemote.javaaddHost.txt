/**
 * Registers the remote server with port.
 */
protected String addHost(String host) {
    if (host.startsWith(LOCALHOST))
        host = LOCAL_IP + host.substring("localhost".length());
    if (host.contains("/"))
        host = host.substring(0, host.indexOf("/"));
    // REGISTER THE REMOTE SERVER+PORT
    if (!host.contains(":"))
        host += ":" + (clientConfiguration.getValueAsBoolean(OGlobalConfiguration.CLIENT_USE_SSL) ? getDefaultSSLPort() : getDefaultPort());
    else if (host.split(":").length < 2 || host.split(":")[1].trim().length() == 0)
        host += (clientConfiguration.getValueAsBoolean(OGlobalConfiguration.CLIENT_USE_SSL) ? getDefaultSSLPort() : getDefaultPort());
    // CONVERT 127.0.0.1 TO THE PUBLIC IP IF POSSIBLE
    if (host.startsWith(LOCAL_IP)) {
        try {
            final String publicIP = InetAddress.getLocalHost().getHostAddress();
            host = publicIP + host.substring(LOCAL_IP.length());
        } catch (UnknownHostException e) {
        // IGNORE IT
        }
    }
    synchronized (serverURLs) {
        if (!serverURLs.contains(host)) {
            serverURLs.add(host);
            OLogManager.instance().debug(this, "Registered the new available server '%s'", host);
        }
    }
    return host;
}||||||||/**
 * Registers the remote server with port.
 */
protected String addHost(String host) {
    if (host.startsWith(LOCALHOST))
        host = LOCAL_IP + host.substring("localhost".length());
    if (host.contains("/"))
        host = host.substring(0, host.indexOf("/"));
    // REGISTER THE REMOTE SERVER+PORT
    if (!host.contains(":"))
        host += ":" + (clientConfiguration.getValueAsBoolean(OGlobalConfiguration.CLIENT_USE_SSL) ? getDefaultSSLPort() : getDefaultPort());
    else if (host.split(":").length < 2 || host.split(":")[1].trim().length() == 0)
        host += (clientConfiguration.getValueAsBoolean(OGlobalConfiguration.CLIENT_USE_SSL) ? getDefaultSSLPort() : getDefaultPort());
    synchronized (serverURLs) {
        if (!serverURLs.contains(host)) {
            serverURLs.add(host);
            OLogManager.instance().debug(this, "Registered the new available server '%s'", host);
        }
    }
    return host;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(EnclosedExpr
							(ConditionalExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						(EnclosedExpr
							(ConditionalExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(EnclosedExpr
							(ConditionalExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						(EnclosedExpr
							(ConditionalExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

