@Test
public void shouldAllowSingleQuoteInsideFieldValue() {
    // Data contains a field with single quote: Miner O'Greedy
    // so the query must be enclosed inside double quote "
    process("{\n" + "  'config': {\n" + "    'log': 'DEBUG'\n" + "  },\n" + "  'source': {\n" + "    'content': {\n" + "      'value': \"name,surname\n Jay, Miner O'Greedy \n Jay, Miner O'Greedy   \"\n" + "    }\n" + "  },\n" + "  'transformers': [\n" + "    {\n" + "      'command': {\n" + "       'log': 'DEBUG',\n" + "       'language': 'sql',\n" + "        'command': \"SELECT FROM Person WHERE surname= \"={eval('$input.surname')}\"\"\n" + "      }\n" + "    }\n" + "  ],\n" + "  'extractor': {\n" + "    'csv': {}\n" + "  },\n" + "  'loader': {\n" + "      'orientdb': {\n" + "        'dbURL': 'memory:OETLBaseTest',\n" + "        'dbType': 'graph',\n" + "        'useLightweightEdges': false ,\n" + "         \"classes\": [\n" + "        {\"name\":\"Person\", \"extends\": \"V\" }" + "      ]" + "      }\n" + "    }\n" + "}");
    assertThat(graph.countVertices("Person")).isEqualTo(0);
}||||||||@Test
public void shouldAllowSingleQuoteInsideFieldValue() {
    // Data contains a field with single quote: Miner O'Greedy
    // so the query must be enclosed inside double quote "
    process("{\n" + "  'config': {\n" + "    'log': 'INFO'\n" + "  },\n" + "  'source': {\n" + "    'content': {\n" + "      'value': \"name,surname\n Jay, Miner O'Greedy \n Jay, Miner O'Greedy   \"\n" + "    }\n" + "  },\n" + "  'transformers': [\n" + "    {\n" + "      'command': {\n" + "       'log': 'INFO',\n" + "       'output': 'previous',\n" + "       'language': 'sql',\n" + "        'command': \"SELECT name FROM Person WHERE surname= \"={eval('$input.surname')}\"\"\n" + "      }\n" + "    },\n" + "  {vertex: {class:'Person', skipDuplicates:false}} " + "]," + "  'extractor': {\n" + "    'csv': {}\n" + "  },\n" + "  'loader': {\n" + "      'orientdb': {\n" + "        'dbURL': 'memory:OETLBaseTest',\n" + "        'dbType': 'graph',\n" + "        'useLightweightEdges': false ,\n" + "         \"classes\": [\n" + "        {\"name\":\"Person\", \"extends\": \"V\" }" + "      ]" + "      }\n" + "    }\n" + "}");
    assertThat(graph.countVertices("Person")).isEqualTo(2);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							(BinaryExpr
																								(BinaryExpr
																									(BinaryExpr
																										(BinaryExpr
																											(BinaryExpr
																												(BinaryExpr
																													(BinaryExpr
																														(BinaryExpr
																															(BinaryExpr
																																(BinaryExpr
																																	(BinaryExpr
																																		(BinaryExpr
																																			StringLiteralExpr
																																			StringLiteralExpr
																																		)
																																		StringLiteralExpr
																																	)
																																	StringLiteralExpr
																																)
																																StringLiteralExpr
																															)
																															StringLiteralExpr
																														)
																														StringLiteralExpr
																													)
																													StringLiteralExpr
																												)
																												StringLiteralExpr
																											)
																											StringLiteralExpr
																										)
																										StringLiteralExpr
																									)
																									StringLiteralExpr
																								)
																								StringLiteralExpr
																							)
																							StringLiteralExpr
																						)
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							(BinaryExpr
																								(BinaryExpr
																									(BinaryExpr
																										(BinaryExpr
																											(BinaryExpr
																												(BinaryExpr
																													(BinaryExpr
																														(BinaryExpr
																															(BinaryExpr
																																(BinaryExpr
																																	(BinaryExpr
																																		(BinaryExpr
																																			(BinaryExpr
																																				(BinaryExpr
																																					StringLiteralExpr
																																					StringLiteralExpr
																																				)
																																				StringLiteralExpr
																																			)
																																			StringLiteralExpr
																																		)
																																		StringLiteralExpr
																																	)
																																	StringLiteralExpr
																																)
																																StringLiteralExpr
																															)
																															StringLiteralExpr
																														)
																														StringLiteralExpr
																													)
																													StringLiteralExpr
																												)
																												StringLiteralExpr
																											)
																											StringLiteralExpr
																										)
																										StringLiteralExpr
																									)
																									StringLiteralExpr
																								)
																								StringLiteralExpr
																							)
																							StringLiteralExpr
																						)
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

