/**
 * Copies all of the mappings from the specified map to this map
 * (optional operation).  The effect of this call is equivalent to that
 * of calling {@link #put(Object, Object) put(k, v)} on this map once
 * for each mapping from key <tt>k</tt> to value <tt>v</tt> in the
 * specified map.  The behavior of this operation is undefined if the
 * specified map is modified while the operation is in progress.
 *
 * @param m mappings to be stored in this map
 * @throws UnsupportedOperationException if the <tt>putAll</tt> operation
 * is not supported by this map
 * @throws ClassCastException            if the class of a key or value in the
 * specified map prevents it from being stored in this map
 * @throws NullPointerException          if the specified map is null, or if
 * this map does not permit null keys or values, and the
 * specified map contains null keys or values
 * @throws IllegalArgumentException      if some property of a key or value in
 * the specified map prevents it from being stored in this map
 */
@Override
public void putAll(Map<? extends Pair<K, T>, ? extends V> m) {
    backedMap.putAll(m);
}||||||||/**
 * Copies all of the mappings from the specified map to this map
 * (optional operation).  The effect of this call is equivalent to that
 * of calling {@link #put(Object, Object) put(k, v)} on this map once
 * for each mapping from key <tt>k</tt> to value <tt>v</tt> in the
 * specified map.  The behavior of this operation is undefined if the
 * specified map is modified while the operation is in progress.
 *
 * @param m mappings to be stored in this map
 * @throws UnsupportedOperationException if the <tt>putAll</tt> operation
 * is not supported by this map
 * @throws ClassCastException            if the class of a key or value in the
 * specified map prevents it from being stored in this map
 * @throws NullPointerException          if the specified map is null, or if
 * this map does not permit null keys or values, and the
 * specified map contains null keys or values
 * @throws IllegalArgumentException      if some property of a key or value in
 * the specified map prevents it from being stored in this map
 */
public void putAll(Map<? extends Pair<K, T>, ? extends V> m) {
    backedMap.putAll(m);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
)

