/**
 * Base class for initializing the layers based on the input.
 * This is meant for capturing numbers such as input columns or other things.
 * @param input the input matrix for training
 */
public void initializeLayers(DoubleMatrix input) {
    if (input == null)
        throw new IllegalArgumentException("Unable to initialize layers with empty input");
    if (input.columns != nIns)
        throw new IllegalArgumentException(String.format("Unable to train on number of inputs; columns should be equal to number of inputs. Number of inputs was %d while number of columns was %d", nIns, input.columns));
    if (this.layers == null)
        this.layers = new NeuralNetwork[getnLayers()];
    for (int i = 0; i < hiddenLayerSizes.length; i++) if (hiddenLayerSizes[i] < 1)
        throw new IllegalArgumentException("All hidden layer sizes must be >= 1");
    this.input = input.dup();
    if (!initCalled)
        init();
    else
        feedForward(input);
}||||||||/**
 * Base class for initializing the layers based on the input.
 * This is meant for capturing numbers such as input columns or other things.
 * @param input the input matrix for training
 */
public void initializeLayers(DoubleMatrix input) {
    log.info("Initializing layers with input of dims " + input.rows + " x " + input.columns);
    if (input == null)
        throw new IllegalArgumentException("Unable to initialize layers with empty input");
    if (input.columns != nIns)
        throw new IllegalArgumentException(String.format("Unable to train on number of inputs; columns should be equal to number of inputs. Number of inputs was %d while number of columns was %d", nIns, input.columns));
    if (this.layers == null)
        this.layers = new NeuralNetwork[getnLayers()];
    for (int i = 0; i < hiddenLayerSizes.length; i++) if (hiddenLayerSizes[i] < 1)
        throw new IllegalArgumentException("All hidden layer sizes must be >= 1");
    this.input = input.dup();
    if (!initCalled)
        init();
    else
        feedForward(input);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ThrowStmt
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(ThrowStmt
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
		(ForStmt
			(IfStmt
				(BinaryExpr
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						StringLiteralExpr
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ThrowStmt
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(ThrowStmt
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
		(ForStmt
			(IfStmt
				(BinaryExpr
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

