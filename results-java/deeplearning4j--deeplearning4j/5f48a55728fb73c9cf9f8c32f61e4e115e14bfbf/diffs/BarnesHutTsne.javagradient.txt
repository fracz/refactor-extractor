/* compute the gradient given the current solution, the probabilities and the constant */
protected Pair<Double, INDArray> gradient(INDArray p) {
    this.p = p;
    return new Pair<>(score(), getGradient().gradientLookupTable().get(Y_GRAD));
}||||||||/* compute the gradient given the current solution, the probabilities and the constant */
@Override
protected Pair<Double, INDArray> gradient(INDArray p) {
    this.p = p;
    return new Pair<>(score(), y);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(BlockComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodCallExpr
					SimpleName
				)
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)

