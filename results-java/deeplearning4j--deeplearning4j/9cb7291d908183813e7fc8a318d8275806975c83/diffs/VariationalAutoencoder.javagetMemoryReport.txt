@Override
public LayerMemoryReport getMemoryReport(InputType inputType) {
    // For training: we'll assume unsupervised pretraining, as this has higher memory requirements
    InputType outputType = getOutputType(-1, inputType);
    int actElementsPerEx = outputType.arrayElementsPerExample();
    int numParams = initializer().numParams(this);
    int updaterStateSize = (int) getIUpdater().stateSize(numParams);
    int inferenceWorkingMemSizePerEx = 0;
    // Forward pass size through the encoder:
    for (int i = 1; i < encoderLayerSizes.length; i++) {
        inferenceWorkingMemSizePerEx += encoderLayerSizes[i];
    }
    // Forward pass size through the decoder, during training
    // p(Z|X) mean and stdev; pzxSigmaSquared, pzxSigma -> all size equal to nOut
    int decoderFwdSizeWorking = 4 * nOut;
    // plus, nSamples * decoder size
    // For each decoding: random sample (nOut), z (nOut), activations for each decoder layer
    decoderFwdSizeWorking += numSamples * (2 * nOut + ArrayUtil.sum(getDecoderLayerSizes()));
    // Plus, component of score
    decoderFwdSizeWorking += nOut;
    // Backprop size through the decoder and decoder: approx. 2x forward pass size
    int trainWorkingMemSize = 2 * (inferenceWorkingMemSizePerEx + decoderFwdSizeWorking);
    if (getDropOut() > 0) {
        if (false) {
        // TODO drop connect
        // Dup the weights... note that this does NOT depend on the minibatch size...
        } else {
            // Assume we dup the input
            trainWorkingMemSize += inputType.arrayElementsPerExample();
        }
    }
    // For
    // Dense layer does not use caching
    Map<CacheMode, Integer> trainMode = new HashMap<>();
    for (CacheMode cm : CacheMode.values()) {
        trainMode.put(cm, trainWorkingMemSize);
    }
    return LayerMemoryReport.builder().layerName(layerName).layerType(VariationalAutoencoder.class).inputType(inputType).outputType(outputType).parameterSize(numParams).activationSizePerEx(actElementsPerEx).updaterStateSize(updaterStateSize).inferenceWorkingSizePerEx(inferenceWorkingMemSizePerEx).trainingWorkingSizePerEx(trainMode).trainingWorkingSizeCachedPerEx(// No caching in VAE
    MemoryReport.CACHE_MODE_ALL_ZEROS).build();
}||||||||@Override
public LayerMemoryReport getMemoryReport(InputType inputType) {
    // For training: we'll assume unsupervised pretraining, as this has higher memory requirements
    InputType outputType = getOutputType(-1, inputType);
    int actElementsPerEx = outputType.arrayElementsPerExample();
    int numParams = initializer().numParams(this);
    int updaterStateSize = (int) getIUpdater().stateSize(numParams);
    int inferenceWorkingMemSizePerEx = 0;
    // Forward pass size through the encoder:
    for (int i = 1; i < encoderLayerSizes.length; i++) {
        inferenceWorkingMemSizePerEx += encoderLayerSizes[i];
    }
    // Forward pass size through the decoder, during training
    // p(Z|X) mean and stdev; pzxSigmaSquared, pzxSigma -> all size equal to nOut
    int decoderFwdSizeWorking = 4 * nOut;
    // plus, nSamples * decoder size
    // For each decoding: random sample (nOut), z (nOut), activations for each decoder layer
    decoderFwdSizeWorking += numSamples * (2 * nOut + ArrayUtil.sum(getDecoderLayerSizes()));
    // Plus, component of score
    decoderFwdSizeWorking += nOut;
    // Backprop size through the decoder and decoder: approx. 2x forward pass size
    int trainWorkingMemSize = 2 * (inferenceWorkingMemSizePerEx + decoderFwdSizeWorking);
    if (getDropOut() > 0) {
        if (false) {
        // TODO drop connect
        // Dup the weights... note that this does NOT depend on the minibatch size...
        } else {
            // Assume we dup the input
            trainWorkingMemSize += inputType.arrayElementsPerExample();
        }
    }
    return new LayerMemoryReport.Builder(layerName, VariationalAutoencoder.class, inputType, outputType).standardMemory(numParams, updaterStateSize).workingMemory(0, inferenceWorkingMemSizePerEx, 0, trainWorkingMemSize).cacheMemory(MemoryReport.CACHE_MODE_ALL_ZEROS, // No caching
    MemoryReport.CACHE_MODE_ALL_ZEROS).build();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BooleanLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
					(BlockStmt
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
						LineComment
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BooleanLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
					(BlockStmt
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
						LineComment
					)
					SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

