@Override
public LayerMemoryReport getMemoryReport(InputType inputType) {
    // Because of supervised + unsupervised modes: we'll assume unsupervised, which has the larger memory requiremnts
    InputType outputType = getOutputType(-1, inputType);
    int actElementsPerEx = outputType.arrayElementsPerExample() + inputType.arrayElementsPerExample();
    int numParams = initializer().numParams(this);
    int updaterStateSize = (int) getIUpdater().stateSize(numParams);
    int trainSizePerEx = 0;
    if (getDropOut() > 0) {
        if (false) {
        // TODO drop connect
        // Dup the weights... note that this does NOT depend on the minibatch size...
        } else {
            // Assume we dup the input
            trainSizePerEx += inputType.arrayElementsPerExample();
        }
    }
    // Also, during backprop: we do a preOut call -> gives us activations size equal to the output size
    // which is modified in-place by loss function
    trainSizePerEx += actElementsPerEx;
    // AutoEncoder layer does not use caching
    Map<CacheMode, Integer> trainMode = new HashMap<>();
    for (CacheMode cm : CacheMode.values()) {
        trainMode.put(cm, trainSizePerEx);
    }
    return LayerMemoryReport.builder().layerName(layerName).layerType(AutoEncoder.class).inputType(inputType).outputType(outputType).parameterSize(numParams).activationSizePerEx(actElementsPerEx).updaterStateSize(updaterStateSize).inferenceWorkingSizePerEx(// No additional working memory for forward pass, as per dense
    0).trainingWorkingSizePerEx(trainMode).trainingWorkingSizeCachedPerEx(// No caching in CenterLossOutputLayer
    MemoryReport.CACHE_MODE_ALL_ZEROS).build();
}||||||||@Override
public LayerMemoryReport getMemoryReport(InputType inputType) {
    // Because of supervised + unsupervised modes: we'll assume unsupervised, which has the larger memory requirements
    InputType outputType = getOutputType(-1, inputType);
    int actElementsPerEx = outputType.arrayElementsPerExample() + inputType.arrayElementsPerExample();
    int numParams = initializer().numParams(this);
    int updaterStateSize = (int) getIUpdater().stateSize(numParams);
    int trainSizePerEx = 0;
    if (getDropOut() > 0) {
        if (false) {
        // TODO drop connect
        // Dup the weights... note that this does NOT depend on the minibatch size...
        } else {
            // Assume we dup the input
            trainSizePerEx += inputType.arrayElementsPerExample();
        }
    }
    // Also, during backprop: we do a preOut call -> gives us activations size equal to the output size
    // which is modified in-place by loss function
    trainSizePerEx += actElementsPerEx;
    return new LayerMemoryReport.Builder(layerName, AutoEncoder.class, inputType, outputType).standardMemory(numParams, updaterStateSize).workingMemory(0, 0, 0, trainSizePerEx).cacheMemory(MemoryReport.CACHE_MODE_ALL_ZEROS, // No caching
    MemoryReport.CACHE_MODE_ALL_ZEROS).build();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BooleanLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
					(BlockStmt
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
						LineComment
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
								LineComment
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BooleanLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
					(BlockStmt
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
						LineComment
					)
					SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

