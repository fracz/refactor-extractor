/**
 * Helper function to import weights from nested Map into existing model. Depends critically
 * on matched layer and parameter names. In general this seems to be straightforward for most
 * Keras models and layers, but there may be edge cases.
 *
 * @param model             instantiated DL4J model (MultiLayerNetwork or ComputationGraph)
 * @param weights           nested Map from layer names to parameter names to INDArrays
 * @param weightsMetadata   Map of metadata (e.g., Keras backend)
 * @param isSequential      whether Keras model is Sequential
 * @param <T>
 * @return                  DL4J MultiLayerNetwork or ComputationGraph
 * @throws IncompatibleKerasConfigurationException
 *
 * TODO: change return type to shared model interface once we have one.
 */
private static <T> T importWeights(T model, Map<String, Map<String, INDArray>> weights, Map<String, Object> weightsMetadata, boolean isSequential) throws IncompatibleKerasConfigurationException {
    /* TODO: how might this break?
         * - mismatch between layer/parameter names?
         */
    String kerasBackend = weightsMetadata.containsKey("keras_backend") ? (String) weightsMetadata.get("keras_backend") : "none";
    for (String layerName : weights.keySet()) {
        Layer layer = null;
        if (isSequential)
            layer = ((MultiLayerNetwork) model).getLayer(layerName);
        else
            layer = ((ComputationGraph) model).getLayer(layerName);
        for (String kerasParamName : weights.get(layerName).keySet()) {
            String paramName = null;
            /* TensorFlow backend often appends ":" followed by one
                 * or more digits to parameter names, but this is not
                 * reflected in the model config. We must strip it off.
                 */
            Pattern p = Pattern.compile(":\\d+$");
            Matcher m = p.matcher(kerasParamName);
            if (m.find())
                paramName = m.replaceFirst("");
            else
                paramName = kerasParamName;
            INDArray W = weights.get(layerName).get(kerasParamName);
            if (layer instanceof ConvolutionLayer && paramName.equals("W")) {
                /* Theano and TensorFlow backends store convolutional weights
                     * with a different dimensional ordering than DL4J so we need
                     * to permute them to match.
                     *
                     * DL4J: (# outputs, # channels, # rows, # cols)
                     */
                if (kerasBackend.equals("tf")) {
                    /* TensorFlow convolutional weights: # rows, # cols, # channels, # outputs */
                    W = W.permute(3, 2, 0, 1);
                } else if (kerasBackend.equals("th")) {
                    /* Theano convolutional weights: # channels, # rows, # cols, # outputs */
                    W = W.permute(3, 0, 1, 2);
                } else {
                    throw new IncompatibleKerasConfigurationException("Unknown keras backend " + kerasBackend);
                }
                layer.setParam(paramName, W);
            }
            layer.setParam(paramName, W);
        }
    }
    return model;
}||||||||/**
 * Helper function to import weights from nested Map into existing model. Depends critically
 * on matched layer and parameter names. In general this seems to be straightforward for most
 * Keras models and layers, but there may be edge cases.
 *
 * @param model             DL4J Model interface
 * @param weights           nested Map from layer names to parameter names to INDArrays
 * @param layerConfigMap    Map from layerName to layerConfig
 * @return                  DL4J Model interface
 * @throws IncompatibleKerasConfigurationException
 */
private static org.deeplearning4j.nn.api.Model importWeights(org.deeplearning4j.nn.api.Model model, Map<String, Map<String, INDArray>> weights, Map<String, Object> layerConfigMap) throws IncompatibleKerasConfigurationException {
    boolean isSequential = (model instanceof MultiLayerNetwork);
    /* TODO: how might this break?
         * - mismatch between layer/parameter names?
         */
    for (String layerName : weights.keySet()) {
        Map<String, Object> layerConfig = (Map<String, Object>) layerConfigMap.get(layerName);
        Layer layer = null;
        if (isSequential)
            layer = ((MultiLayerNetwork) model).getLayer(layerName);
        else
            layer = ((ComputationGraph) model).getLayer(layerName);
        String dimOrdering = null;
        if (layerConfig.containsKey(KERAS_LAYER_PROPERTY_DIM_ORDERING))
            dimOrdering = (String) layerConfig.get(KERAS_LAYER_PROPERTY_DIM_ORDERING);
        for (String kerasParamName : weights.get(layerName).keySet()) {
            String paramName = null;
            /* TensorFlow backend often appends ":" followed by one
                 * or more digits to parameter names, but this is not
                 * reflected in the model config. We must strip it off.
                 */
            Pattern p = Pattern.compile(":\\d+$");
            Matcher m = p.matcher(kerasParamName);
            if (m.find())
                paramName = m.replaceFirst("");
            else
                paramName = kerasParamName;
            INDArray W = weights.get(layerName).get(kerasParamName);
            if (layer instanceof ConvolutionLayer && paramName.equals(ConvolutionParamInitializer.WEIGHT_KEY)) {
                /* Theano and TensorFlow backends store convolutional weights
                     * with a different dimensional ordering than DL4J so we need
                     * to permute them to match.
                     *
                     * DL4J: (# outputs, # channels, # rows, # cols)
                     */
                if (dimOrdering != null) {
                    if (dimOrdering.equals(KERAS_DIM_ORDERING_TENSORFLOW)) {
                        /* TensorFlow convolutional weights: # rows, # cols, # channels, # outputs */
                        W = W.permute(3, 2, 0, 1);
                    } else if (dimOrdering.equals(KERAS_DIM_ORDERING_THEANO)) {
                        /* Theano convolutional weights: # channels, # rows, # cols, # outputs */
                        W = W.permute(3, 0, 1, 2);
                    } else
                        throw new IncompatibleKerasConfigurationException("Unknown keras backend " + dimOrdering);
                } else
                    throw new IncompatibleKerasConfigurationException("Convolutional layer must have \"dim_ordering\" property.");
            }
            layer.setParam(paramName, W);
        }
    }
    return model;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
						(CastExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockComment
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NullLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(InstanceOfExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IfStmt
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ThrowStmt
												(ObjectCreationExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														(IntegerLiteralExpr
														)
														(IntegerLiteralExpr
														)
														(IntegerLiteralExpr
														)
														(IntegerLiteralExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(BlockComment
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													(IntegerLiteralExpr
													)
													(IntegerLiteralExpr
													)
													(IntegerLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockComment
											)
										)
									)
									(BlockComment
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(EnclosedExpr
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NullLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(InstanceOfExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(IfStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											(IfStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												(ThrowStmt
													(ObjectCreationExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																(IntegerLiteralExpr
																)
																(IntegerLiteralExpr
																)
																(IntegerLiteralExpr
																)
																(IntegerLiteralExpr
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(BlockComment
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(IntegerLiteralExpr
															)
															(IntegerLiteralExpr
															)
															(IntegerLiteralExpr
															)
															(IntegerLiteralExpr
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockComment
													)
												)
											)
										)
									)
									(BlockComment
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockComment
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

