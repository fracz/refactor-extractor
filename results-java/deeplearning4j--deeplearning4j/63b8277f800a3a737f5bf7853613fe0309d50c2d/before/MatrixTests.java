package org.deeplearning4j.nn.linalg;

import static org.junit.Assert.*;

import org.deeplearning4j.util.MatrixUtil;
import org.jblas.DoubleMatrix;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class MatrixTests {
    private static Logger log = LoggerFactory.getLogger(MatrixTests.class);

    @Test
    public void testSoftMax() {
        double[][] input = new double[][]  {
                { 0.0 , 0.0},
                { 0.0,0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0},
                { 0.0 , 0.0}};
        DoubleMatrix test = new DoubleMatrix(input);
        test = MatrixUtil.softmax(test);
        log.info(test.toString());


    }

    @Test
    public void testReverse() {
        DoubleMatrix r = DoubleMatrix.rand(1,2);
        DoubleMatrix reverse = MatrixUtil.reverse(r);
        int reverseIndex = 0;
        for(int i = r.length - 1; i >= 0; i--) {
            assertEquals(true, reverse.get(i) == r.get(reverseIndex));
            reverseIndex++;
        }
    }


    @Test
    public void testSigmoid() {
        double[][] test3 = new double[][] {
                {-7.25067769,-6.19433149,-17.0033974,8.98745366,14.30550463
                        ,-13.21522886,14.17218361,-7.12945766,-17.05297072,-12.41255303
                        ,12.29899021,-1.64831235,-16.1645499,-12.048707,13.65494118},
                {-10.01312476,-6.3479751,-14.79441769,9.71058066,14.16978231
                        ,-11.35349077,13.98626908,-9.87793885,-14.86681377,-10.63027895
                        ,12.51909286,-5.37358619,-14.03857187,-10.33264322,13.60084389},
                {-7.91751591,5.29727563,-13.82297759,5.88698006,11.05804915
                        ,-10.92276038,11.10324376,-8.70090769,-13.95534588,-10.04025558
                        ,8.90037784,6.63394887,-13.1934306,-9.952526,10.20579893},
                {-9.85383166,-9.07468389,-13.5015295,7.74401962,11.53662316
                        ,-10.28551473,11.39881506,6.82031733,-13.4642754,-9.82629144
                        ,10.11866638,-1.39349188,-12.79905781,-9.53424876,11.26982471},
                {6.87892443,-7.57445053,-13.90814413,7.41895199,11.49434131
                        ,-10.68518588,11.31421109,-8.68628835,-13.98394422,-10.03415764
                        ,10.03113786,-4.99222139,-13.21321936,-9.79233842,11.03724832},
                {-8.79680369,-7.81131271,13.8064215,-12.59755439,-17.46328754
                        ,11.04326085,-17.23322537,-9.99834351,13.99920422,9.96952428
                        ,-15.6277948,-8.88296202,13.08234881,-1.24798963,-16.91603047},
                {-10.72559843,-9.6092878,12.80337338,-10.95866988,-15.2697348
                        ,10.48260563,-15.02124257,-11.83601183,13.0170038,9.53414116
                        ,-13.57911129,-7.41629428,12.27125175,3.83954914,-14.75670803},
                {-11.24813886,6.49657626,11.53266167,-9.8278634,-14.0100366
                        ,8.91426274,-13.781709,-12.58770582,11.51897351,8.61219964
                        ,-12.46788713,-6.92526494,10.97787092,-2.24810024,-13.42118144},
                {-10.44328193,-9.67362559,11.09602833,-10.24368256,-14.04517369
                        ,8.93017129,-13.85074609,5.34883639,11.20418092,7.65861809
                        ,-12.55124021,-7.54229739,10.49256719,-2.57940985,-13.7716459},
                {6.16880702,-9.6668661,11.2113136,-10.00090068,-14.23978852
                        ,9.05873469,-14.06291841,-12.01927178,11.42514761,8.20023202
                        ,-12.72838934,-7.31605095,10.46972255,-2.28181977,-13.7336314}};

        double[][]  testOutput = new double[][] {{  7.09189963e-04,2.03681009e-03,4.12589637e-08,9.99875048e-01
                , 9.99999387e-01,1.82262885e-06,9.99999300e-01,8.00512435e-04
                , 3.92634897e-08,4.06719455e-06,9.99995444e-01,1.61337171e-01
                , 9.54608141e-08,5.85208324e-06,9.99998826e-01},
                {  4.48059519e-05,1.74722956e-03,3.75721348e-07,9.99939365e-01
                        , 9.99999298e-01,1.17283391e-05,9.99999157e-01,5.12912623e-05
                        , 3.49481880e-07,2.41723021e-05,9.99996344e-01,4.61606375e-03
                        , 8.00065155e-07,3.25518689e-05,9.99998761e-01},
                {  3.64173502e-04,9.95019716e-01,9.92559791e-07,9.97232336e-01
                        , 9.99984240e-01,1.80425369e-05,9.99984937e-01,1.66406975e-04
                        , 8.69500659e-07,4.36067246e-05,9.99863681e-01,9.98686767e-01
                        , 1.86279508e-06,4.76049596e-05,9.99963046e-01},
                {  5.25427097e-05,1.14515724e-04,1.36886193e-06,9.99566861e-01
                        , 9.99990234e-01,3.41226607e-05,9.99988791e-01,9.98909815e-01
                        , 1.42081938e-06,5.40097783e-05,9.99959682e-01,1.98850883e-01
                        , 2.76336732e-06,7.23264187e-05,9.99987248e-01},
                {  9.98971808e-01,5.13138994e-04,9.11526617e-07,9.99400582e-01
                        , 9.99989813e-01,2.28808838e-05,9.99987802e-01,1.68857191e-04
                        , 8.44986601e-07,4.38734366e-05,9.99955994e-01,6.74476248e-03
                        , 1.82629509e-06,5.58749560e-05,9.99983909e-01},
                {  1.51192773e-04,4.04961824e-04,9.99998991e-01,3.38026053e-06
                        , 2.60489711e-08,9.99984006e-01,3.27872735e-08,4.54731288e-05
                        , 9.99999168e-01,9.99953197e-01,1.63280712e-07,1.38713383e-04
                        , 9.99997918e-01,2.23048338e-01,4.50257850e-08},
                {  2.19746640e-05,6.70980950e-05,9.99997249e-01,1.74061444e-05
                        , 2.33581443e-07,9.99971981e-01,2.99472613e-07,7.23906089e-06
                        , 9.99997778e-01,9.99927666e-01,1.26667835e-06,6.01012110e-04
                        , 9.99995316e-01,9.78949364e-01,3.90160196e-07},
                {  1.30313587e-05,9.98493677e-01,9.99990196e-01,5.39249482e-05
                        , 8.23224065e-07,9.99865561e-01,1.03437825e-06,3.41371561e-06
                        , 9.99990060e-01,9.99818160e-01,3.84825416e-06,9.81678106e-04
                        , 9.99982925e-01,9.55134602e-02,1.48338648e-06},
                {  2.91425554e-05,6.29173558e-05,9.99984828e-01,3.55803107e-05
                        , 7.94800672e-07,9.99867682e-01,9.65377084e-07,9.95268811e-01
                        , 9.99986383e-01,9.99528263e-01,3.54049593e-06,5.29897258e-04
                        , 9.99972259e-01,7.04753810e-02,1.04483984e-06},
                {  9.97910642e-01,6.33440584e-05,9.99986480e-01,4.53570000e-05
                        , 6.54241572e-07,9.99883643e-01,7.80821557e-07,6.02689983e-06
                        , 9.99989083e-01,9.99725486e-01,2.96571531e-06,6.64340648e-04
                        , 9.99971618e-01,9.26398739e-02,1.08532347e-06}};

        DoubleMatrix input = new DoubleMatrix(test3);
        DoubleMatrix sigmoid = new DoubleMatrix(testOutput);
        log.info(sigmoid.toString());
        assertEquals(true,MatrixUtil.sigmoid(input).distance2(sigmoid) < 0.01);
    }


    @Test
    public void testMean() {
        double[][] test = new double[][] {
                {0.50021871,0.49850814,0.50210501,0.49344214,0.49911195,0.50533674,0.50604866,0.49416567,0.4790583,0.50389659,-0.49992323,-0.50655665,-0.49431736,-0.49479756,-0.51130932,-0.48282229,-0.49678906,-0.48692015,-0.47057121,-0.53486},
                {0.50071605,-0.50108163,0.50162902,0.49290868,0.49931222,0.50562758,0.5064783,0.49426375,0.47847549,0.5031663,-0.49995707,-0.50640282,-0.49418178,-0.49481667,-0.51182349,-0.48285197,-0.49643612,-0.48682798,-0.47086482,-0.53498016},
                {0.50006157,0.49890791,-0.49744363,0.49284893,0.49800231,0.50560602,0.50595113,0.49389978,-0.52030055,0.50375882,-0.50017945,-0.50603409,-0.49404611,-0.49411023,-0.51178275,-0.48268492,-0.49682285,-0.4864766,-0.47040188,-0.53544844},
                {0.50056612,0.49870383,0.50159447,0.49285162,-0.50063048,-0.49400475,0.5066204,0.49419333,0.47827186,0.50333242,-0.49985516,-0.50663154,-0.49442922,-0.4949211,-0.51201096,-0.48292091,-0.49651177,-0.4868211,-0.47059968,-0.53492234},
                {-0.49915324,0.49884655,0.50220602,0.49275975,0.49900168,0.50589395,0.50697471,0.49462799,0.47822872,-0.49582065,-0.49922477,-0.50657652,-0.49422741,-0.4953209,-0.51154733,-0.48318399,-0.49695562,-0.48677324,-0.47050422,-0.5347888,},
                {-0.49856056,-0.5006494,-0.49807552,-0.50734758,-0.50093597,-0.49319883,-0.49315184,-0.50564243,-0.52047708,-0.49541838,0.50046188,0.49212592,0.50476642,0.50327197,0.48866611,0.51481489,0.50158905,0.51222944,0.53049996,0.46599451},
                {-0.49852434,-0.50015994,-0.49811566,-0.50740725,-0.50080948,-0.49329244,-0.49323875,-0.50623588,-0.52103363,-0.49590142,0.5003137,-0.50654686,0.50540377,0.50385851,0.48793709,0.51562381,0.5025584,0.51277257,0.52933775,0.46476445},
                {-0.4987154,-0.50051243,-0.49764324,-0.50727789,-0.50102972,-0.49329802,-0.49337902,-0.50594272,-0.52135389,-0.4951293,0.50095301,0.49260042,-0.49483287,0.50365044,0.48834497,0.51627418,0.5024243,0.51295095,-0.46986142,0.46455648},
                {-0.49897052,-0.50075709,-0.49781,-0.50731335,-0.50125802,-0.49336792,-0.49329915,-0.5055779,-0.52058738,-0.49551151,0.50045138,0.4926737,0.50474484,0.50382357,-0.51147092,-0.48427756,0.50184896,0.51318945,0.53015714,0.46536246},
                {-0.49821355,-0.50055168,-0.49782585,-0.50724077,-0.50092037,-0.49281185,-0.49326322,-0.5058021,-0.52103466,-0.4953494,-0.49883541,0.49190006,0.50433124,0.50308831,0.48779675,0.51490607,0.50198284,0.51226583,0.53054579,-0.53384716}
        };

        DoubleMatrix getMean = new DoubleMatrix(test);

        double[] result = new double[] {-0.09905752,-0.10087458,-0.09793794,-0.00717757,-0.10101559,-0.09375095
                ,0.00657412,-0.00580505,-0.12107528,-0.09589765,-0.09957951,-0.10694484
                ,-0.09467885,0.00437263,-0.11171998,-0.08371227,0.00268881,0.01295892
                ,-0.07022626,-0.1348169};
        DoubleMatrix restResult = new DoubleMatrix(result);

        DoubleMatrix meanOf = MatrixUtil.mean(getMean, 0);
        assertEquals(true,restResult.distance2(meanOf) < 0.01);



    }
}