@Test
public void sampleTest() throws MalformedObjectNameException, IOException {
    AbstractGraphDatabase db = new ImpermanentGraphDatabase();
    Database database = new Database(db);
    DatabasePrimitivesSampleableBase sampleable = new NodeIdsInUseSampleable(db);
    assertTrue("There should be a single node in use.", sampleable.getValue() == 1);
    database.shutdown();
/*
        this makes no sense using direct object-references instead of jmx
        try
        {
            database.graph.shutdown();
            sampleable.getValue();
            throw new RuntimeException( "Expected UnableToSampleException to be thrown." );
        }
        catch ( UnableToSampleException e )
        {
            // Skip
        }

        database.graph = new EmbeddedGraphDatabase( createTempDir().getAbsolutePath() );

        assertTrue( "There should be a single node in use.", sampleable.getValue() == 1 );
        */
}||||||||@Test
public void sampleTest() throws MalformedObjectNameException, IOException {
    AbstractGraphDatabase db = new ImpermanentGraphDatabase();
    DatabasePrimitivesSampleableBase sampleable = new NodeIdsInUseSampleable(db);
    assertTrue("There should be a single node in use.", sampleable.getValue() == 1);
    db.shutdown();
/*
        this makes no sense using direct object-references instead of jmx
        try
        {
            database.graph.shutdown();
            sampleable.getValue();
            throw new RuntimeException( "Expected UnableToSampleException to be thrown." );
        }
        catch ( UnableToSampleException e )
        {
            // Skip
        }

        database.graph = new EmbeddedGraphDatabase( createTempDir().getAbsolutePath() );

        assertTrue( "There should be a single node in use.", sampleable.getValue() == 1 );
        */
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

