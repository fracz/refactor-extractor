/**
 * Dispose of all pooled transactions. This is done on shutdown or on internal events (like an HA mode switch) that
 * require transactions to be re-created.
 */
public void disposeAll() {
    for (KernelTransactionImplementation tx : allTransactions) {
        // we mark all transactions for termination since we want to make sure these transactions
        // won't be reused, ever. Each transaction has, among other things, a Locks.Client and we
        // certainly want to keep that from being reused from this point.
        tx.markForTermination();
    }
    localTxPool.disposeAll();
    globalTxPool.disposeAll();
}||||||||/**
 * Dispose of all active transactions. This is done on shutdown or on internal events (like an HA mode switch) that
 * require transactions to be re-created.
 */
public void disposeAll() {
    allTransactions.forEach(KernelTransaction::markForTermination);
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodReferenceExpr
					(TypeExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

