// -------------------------------------------------------------------------
@Test
public void shouldBeAbleToLoginWithLdapWhenSelectingRealmFromClient() throws Throwable {
    // --------------------------
    // When we have a native 'tank' that is read only, and ldap 'tank' that is publisher
    testCreateReaderUser("tank");
    // --------------------------
    // Then native "tank" is reader
    reconnect();
    testAuthWithReaderUser("tank", "native");
    // --------------------------
    // And ldap "tank" is publisher
    reconnect();
    testAuthWithPublisherUser("tank", "ldap");
}||||||||// -------------------------------------------------------------------------
@Test
public void shouldBeAbleToLoginWithLdapWhenSelectingRealmFromClient() throws Throwable {
    restartNeo4jServerWithOverriddenSettings(settings -> {
        settings.put(SecuritySettings.internal_authentication_enabled, "true");
        settings.put(SecuritySettings.internal_authorization_enabled, "true");
        settings.put(SecuritySettings.ldap_authentication_enabled, "true");
        settings.put(SecuritySettings.ldap_authorization_enabled, "true");
    });
    // --------------------------
    // When we have a native 'tank' that is read only, and ldap 'tank' that is publisher
    testCreateReaderUser("tank");
    // --------------------------
    // Then native "tank" is reader
    reconnect();
    testAuthWithReaderUser("tank", "native");
    // --------------------------
    // And ldap "tank" is publisher
    reconnect();
    testAuthWithPublisherUser("tank", "ldap");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(LambdaExpr
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

