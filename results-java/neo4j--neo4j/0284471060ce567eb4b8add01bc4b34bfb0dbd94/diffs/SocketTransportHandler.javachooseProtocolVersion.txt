private void chooseProtocolVersion(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception {
    HandshakeOutcome outcome = protocolChooser.handleVersionHandshakeChunk(buffer, ctx.channel());
    switch(outcome) {
        case PROTOCOL_CHOSEN:
            protocol = protocolChooser.chosenProtocol();
            ctx.writeAndFlush(ctx.alloc().buffer(4).writeInt(protocol.version()));
            // selected protocol.
            if (buffer.readableBytes() > 0) {
                channelRead(ctx, buffer);
            } else {
                buffer.release();
            }
            return;
        case NO_APPLICABLE_PROTOCOL:
            buffer.release();
            ctx.writeAndFlush(wrappedBuffer(new byte[] { 0, 0, 0, 0 })).sync().channel().close();
            return;
        case INVALID_HANDSHAKE:
            buffer.release();
            ctx.close();
            return;
        case PARTIAL_HANDSHAKE:
            return;
        default:
            throw new IllegalStateException("Unknown handshake outcome: " + outcome);
    }
}||||||||private void chooseProtocolVersion(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception {
    HandshakeOutcome outcome = protocolChooser.handleVersionHandshakeChunk(buffer, ctx.channel());
    switch(outcome) {
        case PROTOCOL_CHOSEN:
            // A protocol version has been successfully agreed upon, therefore we can
            // reply positively with four bytes reflecting this selection and leave
            // the connection open for INIT etc...
            protocol = protocolChooser.chosenProtocol();
            ctx.writeAndFlush(ctx.alloc().buffer(4).writeInt(protocol.version()));
            // selected protocol.
            if (buffer.readableBytes() > 0) {
                channelRead(ctx, buffer);
            } else {
                buffer.release();
            }
            return;
        case NO_APPLICABLE_PROTOCOL:
            // No protocol match could be found between the versions suggested by the
            // client and the versions supported by the server. In this case, we have
            // no option but to report a 'zero' version match and close the connection.
            buffer.release();
            ctx.writeAndFlush(wrappedBuffer(new byte[] { 0, 0, 0, 0 })).sync().channel().close();
            return;
        case INSECURE_HANDSHAKE:
        // for INVALID_HANDSHAKE below, so we can just fall through.
        case INVALID_HANDSHAKE:
            // The handshake went horribly wrong for some reason. As above, we'll
            // simply close the connection and say no more about it.
            buffer.release();
            ctx.close();
            return;
        case PARTIAL_HANDSHAKE:
            // complete so we'll simply return and take no specific action.
            return;
        default:
            throw new IllegalStateException("Unknown handshake outcome: " + outcome);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										(ArrayCreationExpr
											(PrimitiveType
											)
											(ArrayInitializerExpr
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										(ArrayCreationExpr
											(PrimitiveType
											)
											(ArrayInitializerExpr
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
				LineComment
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					LineComment
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

