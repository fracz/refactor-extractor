/**
 * First a note about tracking which nodes have been updated with new relationships by calls to
 * {@link #getAndPutRelationship(long, Direction, long, boolean)}:
 *
 * We use two high bits of the count field in the "main" array to mark whether or not a change
 * have been made to a node. One bit for a sparse node and one for a dense. Sparse and dense nodes
 * now have different import cycles. When importing the relationships, all relationships are imported,
 * one type at a time, but only dense nodes and relationship chains for dense nodes are updated
 * for every type. After all types have been imported the sparse chains and nodes are updated in one pass.
 *
 * Tells this cache which direction it's about to observe changes for. If {@code true} then changes
 * marked as the change-bit set and an unset change-bit means a change is the first one for that node.
 * {@code false} is the opposite. This is so that there won't need to be any clearing of the cache
 * in between forward and backward linking, since the cache can be rather large.
 *
 * @param forward {@code true} if going forward and having change marked as a set bit, otherwise
 * change is marked with an unset bit.
 */
public void setForwardScan(boolean forward) {
    this.forward = forward;
}||||||||/**
 * First a note about tracking which nodes have been updated with new relationships by calls to
 * {@link #getAndPutRelationship(long, int, Direction, long, boolean)}:
 *
 * We use two high bits of the count field in the "main" array to mark whether or not a change
 * have been made to a node. One bit for a sparse node and one for a dense. Sparse and dense nodes
 * now have different import cycles. When importing the relationships, all relationships are imported,
 * one type at a time, but only dense nodes and relationship chains for dense nodes are updated
 * for every type. After all types have been imported the sparse chains and nodes are updated in one pass.
 *
 * Tells this cache which direction it's about to observe changes for. If {@code true} then changes
 * marked as the change-bit set and an unset change-bit means a change is the first one for that node.
 * {@code false} is the opposite. This is so that there won't need to be any clearing of the cache
 * in between forward and backward linking, since the cache can be rather large.
 *
 * @param forward {@code true} if going forward and having change marked as a set bit, otherwise
 * change is marked with an unset bit.
 * @param denseNodes whether or not this is about dense nodes. If so then some additional cache
 * preparation work needs to be done.
 */
public void setForwardScan(boolean forward, boolean denseNodes) {
    if (this.forward == forward) {
        return;
    }
    // this is because that piece of memory is reused.
    if (denseNodes) {
        if (forward) {
            // Clear relationship group cache and references to it
            visitChangedNodes((nodeId, array) -> setRelationshipId(array, nodeId, EMPTY), NodeType.NODE_TYPE_DENSE);
            clearChangedChunks(true);
            relGroupCache.clear();
        } else {
            // Keep the relationship group cache entries, but clear all relationship chain heads
            relGroupCache.clearRelationshipIds();
        }
    }
    this.forward = forward;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(LambdaExpr
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

