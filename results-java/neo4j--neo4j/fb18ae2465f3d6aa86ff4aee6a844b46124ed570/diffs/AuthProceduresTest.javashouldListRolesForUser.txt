@Test
public void shouldListRolesForUser() throws Exception {
    testResult(adminSubject, "CALL dbms.listRolesForUser('adminSubject') YIELD value as roles RETURN roles", r -> resultKeyIs(r, "roles", ADMIN));
}||||||||// ---------- list roles for user -----------
@Test
public void shouldListRolesForUser() throws Exception {
    testResult(adminSubject, "CALL dbms.listRolesForUser('adminSubject') YIELD value as roles RETURN roles", r -> resultKeyIs(r, "roles", ADMIN));
    testResult(adminSubject, "CALL dbms.listRolesForUser('readSubject') YIELD value as roles RETURN roles", r -> resultKeyIs(r, "roles", READER));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

