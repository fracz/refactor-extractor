@Test
public void shouldNotCreateExistingUser() throws Exception {
    testCallEmpty(adminSubject, "CALL dbms.createUser('craig', '1234', true)");
    assertNotNull("User craig should exist", manager.getUser("craig"));
    testCallFail(adminSubject, "CALL dbms.createUser('craig', '1234', true)", QueryExecutionException.class, "The specified user already exists");
}||||||||/*
    TODO: uncomment and fix
    @Test
<<<<<<< 061656f5c3e1c3445f51c0387f2876d6c19e437d
    public void shouldNotCreateUserWithEmptyPassword() throws Exception
    {
        testCallFail( db, adminSubject, "CALL dbms.createUser('craig', '', true)", QueryExecutionException.class,
                "Password cannot be empty." );
    }

    @Test
    public void shouldNotCreateExistingUser() throws Exception
=======
    public void shouldNotCreateUserIfInvalidUsername() throws Exception
>>>>>>> Vastly increased AuthProcedures unit test coverage.
    {
        testCallFail( adminSubject, "CALL dbms.createUser('', '1234', true)", QueryExecutionException.class,
                "Username cannot be empty" );
        testCallFail( adminSubject, "CALL dbms.createUser('&%ss!', '1234', true)", QueryExecutionException.class,
                "Username cannot be empty" );
        testCallFail( adminSubject, "CALL dbms.createUser('&%ss!', '', true)", QueryExecutionException.class,
                "Username cannot be empty" );
    }
    */
/*
    TODO: uncomment and fix
    @Test
    public void shouldNotCreateUserIfInvalidPassword() throws Exception
    {
        testCallFail( adminSubject, "CALL dbms.createUser('craig', '', true)", QueryExecutionException.class,
                "Password cannot be empty" );
    }
    */
@Test
public void shouldNotCreateExistingUser() throws Exception {
    testCallFail(adminSubject, "CALL dbms.createUser('readSubject', '1234', true)", QueryExecutionException.class, "The specified user already exists");
    testCallFail(adminSubject, "CALL dbms.createUser('readSubject', '', true)", QueryExecutionException.class, "The specified user already exists");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

