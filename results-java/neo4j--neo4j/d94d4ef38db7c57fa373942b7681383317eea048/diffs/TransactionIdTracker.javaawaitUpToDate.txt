/**
 * Wait for a specific transaction (the Oldest Acceptable Transaction - OAT) to have been applied before
 * continuing. This method is useful in a clustered deployment, where different members of the cluster are expected
 * to apply transactions at slightly different times.
 * <p>
 * We assume the OAT will always have been applied on one member of the cluster, therefore it is sensible to wait
 * for it to be applied on this member.
 * <p>
 * The effect is either:
 * <ol>
 * <li>If the transaction in question has already been applied, return immediately.
 * This is the most common case because we expect the interval between dependent requests from the client
 * to be longer than the replication lag between cluster members.</li>
 * <li>The transaction has not yet been applied, block until the background replication process has applied it,
 * or timeout.</li>
 * </ol>
 *
 * @param oldestAcceptableTxId id of the Oldest Acceptable Transaction (OAT) that must have been applied before
 * continuing work.
 * @param timeout maximum duration to wait for OAT to be applied
 * @throws TransactionFailureException
 */
public void awaitUpToDate(long oldestAcceptableTxId, Duration timeout) throws TransactionFailureException {
    if (oldestAcceptableTxId <= BASE_TX_ID) {
        return;
    }
    if (!tryAwaitEx(() -> isReady(oldestAcceptableTxId), timeout.toMillis(), TimeUnit.MILLISECONDS, POLL_INTERVAL, POLL_UNIT)) {
        throw new TransactionFailureException(Status.Transaction.InstanceStateChanged, "Database not up to the requested version: %d. Latest database version is %d", oldestAcceptableTxId, transactionIdStore().getLastClosedTransactionId());
    }
}||||||||/**
 * Wait for a specific transaction (the Oldest Acceptable Transaction - OAT) to have been applied before
 * continuing. This method is useful in a clustered deployment, where different members of the cluster are expected
 * to apply transactions at slightly different times.
 * <p>
 * We assume the OAT will always have been applied on one member of the cluster, therefore it is sensible to wait
 * for it to be applied on this member.
 * <p>
 * The effect is either:
 * <ol>
 * <li>If the transaction in question has already been applied, return immediately.
 * This is the most common case because we expect the interval between dependent requests from the client
 * to be longer than the replication lag between cluster members.</li>
 * <li>The transaction has not yet been applied, block until the background replication process has applied it,
 * or timeout.</li>
 * </ol>
 *
 * @param oldestAcceptableTxId id of the Oldest Acceptable Transaction (OAT) that must have been applied before
 * continuing work.
 * @param timeout maximum duration to wait for OAT to be applied
 * @throws TransactionFailureException transaction failed
 */
public void awaitUpToDate(long oldestAcceptableTxId, Duration timeout) throws TransactionFailureException {
    if (oldestAcceptableTxId <= BASE_TX_ID) {
        return;
    }
    if (!availabilityGuard.isAvailable()) {
        throw new TransactionFailureException(Status.General.DatabaseUnavailable, "Database unavailable");
    }
    try {
        transactionIdStore().awaitClosedTransactionId(oldestAcceptableTxId, timeout.toMillis());
    } catch (InterruptedException | TimeoutException e) {
        if (e instanceof InterruptedException) {
            Thread.currentThread().interrupt();
        }
        throw new TransactionFailureException(Status.Transaction.InstanceStateChanged, e, "Database not up to the requested version: %d. Latest database version is %d", oldestAcceptableTxId, transactionIdStore().getLastClosedTransactionId());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(LambdaExpr
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						StringLiteralExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(UnionType
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

