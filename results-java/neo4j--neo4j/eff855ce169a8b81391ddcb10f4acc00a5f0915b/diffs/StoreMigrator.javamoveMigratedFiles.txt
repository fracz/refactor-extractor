@Override
public void moveMigratedFiles(FileSystemAbstraction fileSystem, File migrationDir, File storeDir, File leftOversDir) throws IOException {
    // The batch importer will create a whole store. so TODO delete everything except nodestore, relstore, relgroupstore here
    // Disregard the new and empty node/relationship".id" files, i.e. reuse the existing id files
    StoreFile20.deleteIdFile(fileSystem, migrationDir, allExcept(StoreFile20.RELATIONSHIP_GROUP_STORE));
    StoreFile20.deleteStoreFile(fileSystem, migrationDir, allExcept(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE, StoreFile20.RELATIONSHIP_GROUP_STORE));
    // Move the current ones into the leftovers directory
    StoreFile20.move(fileSystem, storeDir, leftOversDir, IteratorUtil.<StoreFile20>asIterable(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE), false, false, StoreFileType.STORE);
    // Move the migrated ones into the store directory
    StoreFile20.move(fileSystem, migrationDir, storeDir, StoreFile20.currentStoreFiles(), // allow skip non existent source files
    true, // allow overwrite target files
    true, StoreFileType.values());
    StoreFile20.ensureStoreVersion(fileSystem, storeDir, StoreFile20.currentStoreFiles());
// LogFiles.move( fileSystem, storeDir, leftOversDir );
}||||||||@Override
public void moveMigratedFiles(FileSystemAbstraction fileSystem, File migrationDir, File storeDir, File leftOversDir) throws IOException {
    // The batch importer will create a whole store. so
    // Disregard the new and empty node/relationship".id" files, i.e. reuse the existing id files
    StoreFile20.deleteIdFile(fileSystem, migrationDir, allExcept(StoreFile20.RELATIONSHIP_GROUP_STORE));
    StoreFile20.deleteStoreFile(fileSystem, migrationDir, allExcept(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE, StoreFile20.RELATIONSHIP_GROUP_STORE, StoreFile20.LABEL_TOKEN_STORE, StoreFile20.NODE_LABEL_STORE, StoreFile20.LABEL_TOKEN_NAMES_STORE, StoreFile20.SCHEMA_STORE));
    // Move the current ones into the leftovers directory
    StoreFile20.move(fileSystem, storeDir, leftOversDir, IteratorUtil.<StoreFile20>asIterable(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE), false, false, StoreFileType.STORE);
    // Move the migrated ones into the store directory
    StoreFile20.move(fileSystem, migrationDir, storeDir, StoreFile20.currentStoreFiles(), // allow skip non existent source files
    true, // allow overwrite target files
    true, StoreFileType.values());
    StoreFile20.ensureStoreVersion(fileSystem, storeDir, StoreFile20.currentStoreFiles());
// LogFiles.move( fileSystem, storeDir, leftOversDir );
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
					LineComment
				)
				(BooleanLiteralExpr
					LineComment
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
					LineComment
				)
				(BooleanLiteralExpr
					LineComment
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

