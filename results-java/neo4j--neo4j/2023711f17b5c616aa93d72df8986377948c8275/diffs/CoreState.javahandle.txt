public void handle(RaftMessages.StoreIdAwareMessage storeIdAwareMessage) {
    // Break out each if branch into a new CoreState instance
    StoreId storeId = storeIdAwareMessage.storeId();
    if (storeId.equals(localDatabase.storeId())) {
        try {
            ConsensusOutcome outcome = raftMachine.handle(storeIdAwareMessage.message());
            if (outcome.needsFreshSnapshot()) {
                notifyNeedFreshSnapshot(storeId);
            } else {
                notifyCommitted(outcome.getCommitIndex());
            }
        } catch (Throwable e) {
            raftMachine.stopTimers();
            localDatabase.panic(e);
        }
    } else {
        RaftMessages.RaftMessage message = storeIdAwareMessage.message();
        if (localDatabase.isEmpty() && !StoreId.isDefault(storeId)) {
            /*
                 * Checking for the actual value of StoreId is not a very pretty thing to do, but it is currently
                 * necessary, "currently" here meaning as long as raft message sending is not dependent on LocalDatabase
                 * start/stop state.
                 * The problem lies in how storeid is retrieved. LocalDatabase is the sole manager of the neo store
                 * lifecycle (technically the DataSourceManager) but the fact is that the storeid of the underlying
                 * store can be asked from it even if it is in the stopped state. That means that sender threads can
                 * ask for the storeid of a store that is not actually open. This is obviously a lifecycle management
                 * issue which needs to be solved properly, but until then...
                 * ...until then we accept the fact that storeid will be asked by raft message sending threads and they
                 * need to be provided with a value. This is quite simple, that value is StoreId.DEFAULT. However,
                 * members receiving that message will go through this handle() method and they need to make a call
                 * on it. That storeId by construction mismatches everything, so the message will not be processed.
                 * However, a StoreIdAwareMessage with a DEFAULT storeId should not be considered a legitimate
                 * bearer of storeId information, even if the local database is empty. This can manifest in a simple
                 * race, if for example a follower has just copied an empty store from the leader, the leader is
                 * shutting down but a leader thread sends a message after its LocalDatabase stops() but before the
                 * SenderService is stopped. This will result in the follower receiving a message with a DEFAULT
                 * storeId. The resulting mismatch will make the message be skipped but if we don't explicitly
                 * ignore DEFAULT storeId it will result in an attempt to copy a store from a member that is no longer
                 * there.
                 * Obviously the correct thing to do is not allow the leader to send that message (explicitly checking
                 * for the DEFAULT storeid in receivers may still be a correct thing to do, defensively, but it should
                 * not be the only way to guard against this).
                 */
            log.info("StoreId mismatch but store was empty so downloading new store from %s. Expected: " + "%s, Encountered: %s. ", message.from(), storeId, localDatabase.storeId());
            downloadSnapshot(message.from(), storeId);
        } else {
            log.info("Discarding message[%s] owing to mismatched storeId and non-empty store. " + "Expected: %s, Encountered: %s", message, storeId, localDatabase.storeId());
            listeners.forEach(l -> {
                MismatchedStoreIdService.MismatchedStoreIdException ex = new MismatchedStoreIdService.MismatchedStoreIdException(storeId, localDatabase.storeId());
                l.onMismatchedStore(ex);
            });
        }
    }
}||||||||public void handle(RaftMessages.StoreIdAwareMessage storeIdAwareMessage) {
    try {
        ConsensusOutcome outcome = raftMachine.handle(storeIdAwareMessage.message());
        if (outcome.needsFreshSnapshot()) {
            notifyNeedFreshSnapshot(storeIdAwareMessage.message().from());
        } else {
            notifyCommitted(outcome.getCommitIndex());
        }
    } catch (Throwable e) {
        raftMachine.stopTimers();
        localDatabase.panic(e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(LambdaExpr
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)

