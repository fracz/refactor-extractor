private void traverseDownToFirstLeaf() throws IOException {
    do {
        // Read
        do {
            // Where we are
            if (!readHeader()) {
                continue;
            }
            // Where we're going
            pos = searchKey(fromInclusive);
            if (isInternal) {
                pointerId = bTreeNode.childAt(cursor, pos, stableGeneration, unstableGeneration);
                readPointerGenOnSuccess();
            }
        } while (cursor.shouldRetry());
        checkOutOfBounds(cursor);
        // Act
        if (nodeType != NODE_TYPE_TREE_NODE || !saneKeyCountRead(keyCount) || !verifyNodeGenInvariants()) {
            // This node has been reused. Restart seek from root.
            generationCatchup();
            lastFollowedPointerGen = rootCatchup.get().goTo(cursor);
            // Force true in loop
            isInternal = true;
            keyCount = 1;
            continue;
        }
        if (goToNewGen()) {
            continue;
        }
        if (isInternal) {
            goToNext("child");
        }
    } while (isInternal && keyCount > 0);
    // We've now come to the first relevant leaf, initialize the state for the coming leaf scan
    pos--;
}||||||||private void traverseDownToFirstLeaf() throws IOException {
    do {
        // Read
        do {
            // Where we are
            if (!readHeader()) {
                continue;
            }
            // Where we're going
            pos = searchKey(fromInclusive);
            if (isInternal) {
                pointerId = bTreeNode.childAt(cursor, pos, stableGeneration, unstableGeneration);
                readPointerGenOnSuccess();
            }
        } while (cursor.shouldRetry());
        checkOutOfBounds(cursor);
        // Act
        if (nodeType != NODE_TYPE_TREE_NODE || !saneKeyCountRead(keyCount) || !verifyNodeGenInvariants()) {
            // This node has been reused. Restart seek from root.
            generationCatchup();
            lastFollowedPointerGen = rootCatchup.get().goTo(cursor);
            // Force true in loop
            isInternal = true;
            keyCount = 1;
            continue;
        }
        if (goToNewGen()) {
            continue;
        }
        if (isInternal) {
            goToNext("child");
        }
    } while (isInternal && keyCount > 0);
    // We've now come to the first relevant leaf, initialize the state for the coming leaf scan
    pos -= stride;
    if (!seekForward) {
        // The tree traversal is best effort when seeking backwards
        // need to trigger search for key in next
        concurrentWriteHappened = true;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(DoStmt
			(BlockStmt
				(DoStmt
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(UnaryExpr
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(DoStmt
			(BlockStmt
				(DoStmt
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(UnaryExpr
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

