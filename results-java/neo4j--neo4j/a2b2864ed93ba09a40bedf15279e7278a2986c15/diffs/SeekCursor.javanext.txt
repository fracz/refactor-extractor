@Override
public boolean next() throws IOException {
    while (true) {
        pos++;
        long newGen;
        // initialized to satisfy the compiler
        long rightSibling = -1;
        do {
            newGen = bTreeNode.newGen(cursor, stableGeneration, unstableGeneration);
            if (reread) {
                keyCount = bTreeNode.keyCount(cursor);
                // moving position back until we find previously returned key
                if (resetPosition) {
                    if (!first) {
                        int searchResult = KeySearch.search(cursor, bTreeNode, prevKey, mutableKey, keyCount);
                        pos = KeySearch.positionOf(searchResult);
                    } else {
                        pos = 0;
                    }
                }
            }
            // which has by then been consistently read. No decision can be made in here directly.
            if (pos >= keyCount) {
                // Go to next sibling
                rightSibling = bTreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);
            } else {
                // Read the next value in this leaf
                bTreeNode.keyAt(cursor, mutableKey, pos);
                bTreeNode.valueAt(cursor, mutableValue, pos);
            }
        } while (resetPosition = reread = cursor.shouldRetry());
        checkOutOfBounds(cursor);
        if (pointerCheckingWithGenerationCatchup(newGen, true)) {
            reread = resetPosition = true;
            continue;
        } else if (TreeNode.isNode(newGen)) {
            bTreeNode.goTo(cursor, "new gen", newGen, stableGeneration, unstableGeneration);
            reread = resetPosition = true;
            continue;
        }
        if (pos >= keyCount) {
            if (pointerCheckingWithGenerationCatchup(rightSibling, true)) {
                reread = resetPosition = true;
                continue;
            } else if (TreeNode.isNode(rightSibling)) {
                // TODO: Check if rightSibling is within expected range before calling next.
                // TODO: Possibly by getting highest expected from IdProvider
                bTreeNode.goTo(cursor, "right sibling", rightSibling, stableGeneration, unstableGeneration);
                pos = -1;
                reread = true;
                // in the outer loop, with the position reset to the beginning of the right sibling
                continue;
            }
        } else {
            if (layout.compare(mutableKey, toExclusive) < 0) {
                if (layout.compare(mutableKey, fromInclusive) < 0 || (!first && layout.compare(prevKey, mutableKey) >= 0)) {
                    // We've come across a bad read in the middle of a split
                    // This is outlined in InternalTreeLogic, skip this value (it's fine)
                    reread = true;
                    continue;
                }
                // A hit
                if (first) {
                    first = false;
                }
                layout.copyKey(mutableKey, prevKey);
                return true;
            }
        // else we've come too far and so this means the end of the result set
        }
        return false;
    }
}||||||||@Override
public boolean next() throws IOException {
    while (true) {
        pos++;
        long newGen;
        // initialized to satisfy the compiler
        long rightSibling = -1;
        do {
            newGen = bTreeNode.newGen(cursor, stableGeneration, unstableGeneration);
            if (rereadHeader) {
                rereadCurrentNodeHeader();
            }
            if (rediscoverKeyPosition) {
                rediscoverKeyPosition();
            }
            // which has by then been consistently read. No decision can be made in here directly.
            if (pos >= keyCount) {
                // Read right sibling
                rightSibling = bTreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);
            } else {
                // Read the next value in this leaf
                bTreeNode.keyAt(cursor, mutableKey, pos);
                bTreeNode.valueAt(cursor, mutableValue, pos);
            }
        } while (rediscoverKeyPosition = rereadHeader = cursor.shouldRetry());
        checkOutOfBounds(cursor);
        // Go to newGen if read successfully and
        if (pointerCheckingWithGenerationCatchup(newGen, true)) {
            // Reading newGen pointer resulted in a bad read, but generation had changed (a checkpoint has
            // occurred since we started this cursor) so the generation fields in this cursor are now updated
            // with the latest, so let's try that read again.
            rereadHeader = rediscoverKeyPosition = true;
            continue;
        } else if (TreeNode.isNode(newGen)) {
            // We ended up on a node which has a newGen set, let's go to it and read from that one instead.
            bTreeNode.goTo(cursor, "new gen", newGen, stableGeneration, unstableGeneration);
            rereadHeader = rediscoverKeyPosition = true;
            continue;
        }
        if (pos >= keyCount) {
            if (pointerCheckingWithGenerationCatchup(rightSibling, true)) {
                // Reading rightSibling pointer resulted in a bad read, but generation had changed
                // (a checkpoint has occurred since we started this cursor) so the generation fields in this
                // cursor are now updated with the latest, so let's try that read again.
                rereadHeader = rediscoverKeyPosition = true;
                continue;
            } else if (TreeNode.isNode(rightSibling)) {
                // TODO: Check if rightSibling is within expected range before calling next.
                // TODO: Possibly by getting highest expected from IdProvider
                bTreeNode.goTo(cursor, "right sibling", rightSibling, stableGeneration, unstableGeneration);
                if (first) {
                    // Have not yet found first hit among leaves.
                    // First hit can be several leaves to the right.
                    // Continue to use binary search in right leaf
                    rereadHeader = rediscoverKeyPosition = true;
                } else {
                    // It is likely that first key in right sibling is a next hit.
                    // Continue using scan
                    pos = -1;
                    rereadHeader = true;
                }
                // in the outer loop, with the position reset to the beginning of the right sibling
                continue;
            }
        } else if (layout.compare(mutableKey, toExclusive) < 0) {
            if (layout.compare(mutableKey, fromInclusive) < 0) {
                // too far to the left possibly because page reuse
                rereadHeader = rediscoverKeyPosition = true;
                continue;
            } else if (!first && layout.compare(prevKey, mutableKey) >= 0) {
                // We've come across a bad read in the middle of a split
                // This is outlined in InternalTreeLogic, skip this value (it's fine)
                rereadHeader = true;
                continue;
            }
            // A hit, it's within the range we search for
            if (first) {
                // Setting first to false include an additional check for coming potential
                // hits so that we cannot go backwards in our result. Going backwards can
                // happen when reading through concurrent splits or similar and is a benign
                // temporary observed state.
                first = false;
            }
            layout.copyKey(mutableKey, prevKey);
            return true;
        }
        // We've come too far and so this means the end of the result set
        return false;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(DoStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(IfStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(VariableDeclarationExpr
														(VariableDeclarator
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															(PrimitiveType
															)
														)
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
									LineComment
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
							)
							LineComment
						)
					)
					(AssignExpr
						NameExpr
							SimpleName
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
					)
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							(ContinueStmt
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										(EnclosedExpr
											(BinaryExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												(BinaryExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
											LineComment
										)
										(ContinueStmt
										)
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
									(ContinueStmt
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
								(ContinueStmt
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(DoStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
							)
							LineComment
						)
					)
					(AssignExpr
						NameExpr
							SimpleName
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
					)
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							(ContinueStmt
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							LineComment
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
											LineComment
										)
										(ContinueStmt
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										LineComment
									)
									(ContinueStmt
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
										LineComment
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(UnaryExpr
														(IntegerLiteralExpr
														)
													)
												)
												LineComment
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
												LineComment
											)
										)
									)
									(ContinueStmt
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
									LineComment
								)
								(ContinueStmt
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

