@Test
public void shouldRecoverIndexCountsBySamplingThemOnStartup() {
    // given some aliens in a database
    createAliens();
    // that have been indexed
    awaitIndexOnline(indexAliensBySpecimen());
    // where ALIEN and SPECIMEN are both the first ids of their kind
    int labelId = labelId(ALIEN);
    int pkId = pkId(SPECIMEN);
    // for which we don't have index counts
    resetIndexCounts(labelId, pkId);
    // when we shutdown the database and restart it
    restart();
    // then we should have re-sampled the index
    CountsTracker tracker = neoStores().getCounts();
    assertEqualRegisters("Unexpected updates and size for the index", newDoubleLongRegister(0, 32), tracker.indexUpdatesAndSize(labelId, pkId, newDoubleLongRegister()));
    assertEqualRegisters("Unexpected sampling result", newDoubleLongRegister(16, 32), tracker.indexSample(labelId, pkId, newDoubleLongRegister()));
    // and also
    assertLogExistsForRecoveryOn(":Alien(specimen)");
}||||||||@Test
public void shouldRecoverIndexCountsBySamplingThemOnStartup() {
    // given some aliens in a database
    createAliens();
    // that have been indexed
    awaitIndexOnline(indexAliensBySpecimen());
    // where ALIEN and SPECIMEN are both the first ids of their kind
    IndexDescriptor index = IndexDescriptorFactory.from(new NodePropertyDescriptor(labelId(ALIEN), pkId(SPECIMEN)));
    // for which we don't have index counts
    resetIndexCounts(index);
    // when we shutdown the database and restart it
    restart();
    // then we should have re-sampled the index
    CountsTracker tracker = neoStores().getCounts();
    assertEqualRegisters("Unexpected updates and size for the index", newDoubleLongRegister(0, 32), tracker.indexUpdatesAndSize(index, newDoubleLongRegister()));
    assertEqualRegisters("Unexpected sampling result", newDoubleLongRegister(16, 32), tracker.indexSample(index, newDoubleLongRegister()));
    // and also
    assertLogExistsForRecoveryOn(":Alien(specimen)");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

