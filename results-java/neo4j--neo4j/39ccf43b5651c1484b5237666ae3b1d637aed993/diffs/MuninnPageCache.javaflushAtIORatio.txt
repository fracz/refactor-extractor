private long flushAtIORatio(double ratio) {
    Thread thread = Thread.currentThread();
    long sleepPaymentThreshold = TimeUnit.MILLISECONDS.toNanos(backgroundFlushSleepDebtThreshold);
    boolean seenDirtyPages = false;
    boolean flushedPages = false;
    double sleepFactor = (1 - ratio) / ratio;
    try (MajorFlushEvent event = tracer.beginCacheFlush()) {
        for (MuninnPage page : pages) {
            if (page == null || thread.isInterrupted()) {
                // Null pages means the page cache has been closed.
                thread.interrupt();
                return 0;
            }
            // The rate is the percentage of time that we want to spend doing IO. If the rate is 0.3, then we
            // want to spend 30% of our time doing IO. We would then spend the other 70% of the time just
            // sleeping. This means that for every IO we do, we measure how long it takes. We can then compute
            // the amount of time we need to sleep. Basically, if we spend 30 microseconds doing IO, then we need
            // to sleep for 70 microseconds, with the 0.3 ratio. To get the sleep time, we can divide the IO time
            // T by the ratio R, and then multiply the result by 1 - R. This is equivalent to (T/R) - T = S.
            // Then, because we don't want to sleep too frequently in too small intervals, we sum up our S's and
            // only sleep when we have collected a sleep debt of at least 10 milliseconds.
            // IO is not the only point of contention, however. Doing a flush also means that we have to take a
            // pessimistic read-lock on the page, and if we do this on a page that is very popular for writing,
            // then it can noticeably impact the performance of the database. Therefore, we check the dirtiness of
            // a given page under and *optimistic* read lock, and we also decrement the usage counter to avoid
            // aggressively flushing very popular pages. We need to carefully balance this, though, since we are
            // at risk of the mutator threads performing so many writes that we can't decrement the usage
            // counters fast enough to reach zero.
            // Skip the page if it is already write locked, or not dirty, or too popular.
            boolean thisPageIsDirty = false;
            if (page.isWriteLocked() || !(thisPageIsDirty = page.isDirty()) || !page.decrementUsage()) {
                seenDirtyPages |= thisPageIsDirty;
                // Continue looping to the next page.
                continue;
            }
            long stamp = page.tryReadLock();
            if (stamp != 0) {
                try {
                    // Double-check that the page is still dirty. We could be racing with other flushing threads.
                    if (!page.isDirty()) {
                        // Continue looping to the next page.
                        continue;
                    }
                    long startNanos = System.nanoTime();
                    page.flush(event.flushEventOpportunity());
                    long elapsedNanos = System.nanoTime() - startNanos;
                    sleepDebtNanos += elapsedNanos * sleepFactor;
                    flushedPages = true;
                } catch (Throwable ignore) {
                // The MuninnPage.flush method will keep the page dirty if flushing fails, and the eviction
                // thread will eventually report the problem if its serious. Ergo, we can just ignore any and
                // all exceptions, and move on to the next page. If we end up not getting anything done this
                // iteration of flushAtIORatio, then that's fine too.
                } finally {
                    page.unlockRead(stamp);
                }
            }
            // Check if we've collected enough sleep debt, and if so, pay it back.
            if (sleepDebtNanos > sleepPaymentThreshold) {
                LockSupport.parkNanos(sleepDebtNanos);
                sleepDebtNanos = 0;
            }
        }
    }
    // we shouldn't take any break, since we are falling behind the mutator threads.
    return seenDirtyPages ? flushedPages ? backgroundFlushMediumBreak : backgroundFlushBusyBreak : backgroundFlushLongBreak;
}||||||||private long flushAtIORatio(double ratio) {
    Thread thread = Thread.currentThread();
    long sleepPaymentThreshold = TimeUnit.MILLISECONDS.toNanos(backgroundFlushSleepDebtThreshold);
    boolean seenDirtyPages = false;
    boolean flushedPages = false;
    double sleepFactor = (1 - ratio) / ratio;
    try (MajorFlushEvent event = tracer.beginCacheFlush()) {
        for (MuninnPage page : pages) {
            if (page == null || thread.isInterrupted()) {
                // Null pages means the page cache has been closed.
                thread.interrupt();
                return 0;
            }
            // The rate is the percentage of time that we want to spend doing IO. If the rate is 0.3, then we
            // want to spend 30% of our time doing IO. We would then spend the other 70% of the time just
            // sleeping. This means that for every IO we do, we measure how long it takes. We can then compute
            // the amount of time we need to sleep. Basically, if we spend 30 microseconds doing IO, then we need
            // to sleep for 70 microseconds, with the 0.3 ratio. To get the sleep time, we can divide the IO time
            // T by the ratio R, and then multiply the result by 1 - R. This is equivalent to (T/R) - T = S.
            // Then, because we don't want to sleep too frequently in too small intervals, we sum up our S's and
            // only sleep when we have collected a sleep debt of at least 10 milliseconds.
            // IO is not the only point of contention, however. Doing a flush also means that we have to take a
            // pessimistic read-lock on the page, and if we do this on a page that is very popular for writing,
            // then it can noticeably impact the performance of the database. Therefore, we check the dirtiness of
            // a given page under and *optimistic* read lock, and we also decrement the usage counter to avoid
            // aggressively flushing very popular pages. We need to carefully balance this, though, since we are
            // at risk of the mutator threads performing so many writes that we can't decrement the usage
            // counters fast enough to reach zero.
            // Skip the page if it is already write locked, or not dirty, or too popular.
            boolean thisPageIsDirty = false;
            if (page.isWriteLocked() || !(thisPageIsDirty = page.isDirty()) || !page.decrementUsage()) {
                seenDirtyPages |= thisPageIsDirty;
                // Continue looping to the next page.
                continue;
            }
            long stamp = page.tryReadLock();
            if (stamp != 0) {
                try {
                    // Double-check that the page is still dirty. We could be racing with other flushing threads.
                    if (!page.isDirty()) {
                        // Continue looping to the next page.
                        continue;
                    }
                    long startNanos = System.nanoTime();
                    page.flush(event.flushEventOpportunity());
                    long elapsedNanos = System.nanoTime() - startNanos;
                    sleepDebtNanos += elapsedNanos * sleepFactor;
                    flushedPages = true;
                } catch (Throwable ignore) {
                // The MuninnPage.flush method will keep the page dirty if flushing fails, and the eviction
                // thread will eventually report the problem if its serious. Ergo, we can just ignore any and
                // all exceptions, and move on to the next page. If we end up not getting anything done this
                // iteration of flushAtIORatio, then that's fine too.
                } finally {
                    page.unlockRead(stamp);
                }
            }
            // Check if we've collected enough sleep debt, and if so, pay it back.
            if (sleepDebtNanos > sleepPaymentThreshold) {
                LockSupport.parkNanos(sleepDebtNanos);
                sleepDebtNanos = 0;
            }
            // Check if we've been asked to pause, because another thread wants to focus on flushing.
            checkBackgroundFlushPause();
        }
    }
    // we shouldn't take any break, since we are falling behind the mutator threads.
    return seenDirtyPages ? flushedPages ? backgroundFlushMediumBreak : backgroundFlushBusyBreak : backgroundFlushLongBreak;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ReturnStmt
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ContinueStmt
									LineComment
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(IfStmt
											(UnaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ContinueStmt
													LineComment
												)
											)
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(BinaryExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ConditionalExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ReturnStmt
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ContinueStmt
									LineComment
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(IfStmt
											(UnaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ContinueStmt
													LineComment
												)
											)
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(BinaryExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ConditionalExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

