// TODO: Split this into area-specific tests, see PropertyIT.
/**
 * While we transition ownership from the Beans API to the Kernel API for core database
 * interactions, there will be a bit of a mess. Our first goal is an architecture like this:
 * <p/>
 * Users
 * /    \
 * Beans API   Cypher
 * \    /
 * Kernel API
 * |
 * Kernel Implementation
 * <p/>
 * But our current intermediate architecture looks like this:
 * <p/>
 * Users
 * /        \
 * Beans API <--- Cypher
 * |    \    /
 * |  Kernel API
 * |      |
 * Kernel Implementation
 * <p/>
 * Meaning Kernel API and Beans API both manipulate the underlying kernel, causing lots of corner cases. Most
 * notably, those corner cases are related to Transactions, and the interplay between three transaction APIs:
 * - The Beans API
 * - The JTA Transaction Manager API
 * - The Kernel TransactionContext API
 * <p/>
 * In the long term, the goal is for JTA compliant stuff to live outside of the kernel, as an addon. The Kernel
 * API will rule supreme over the land of transactions. We are a long way away from there, however, so as a first
 * intermediary step, the JTA transaction manager rules supreme, and the Kernel API piggybacks on it.
 * <p/>
 * This test shows us how to use both the Kernel API and the Beans API together in the same transaction,
 * during the transition phase.
 */
@Test
public void mixingBeansApiWithKernelAPI() throws Exception {
    // 1: Start your transactions through the Beans API
    Transaction beansAPITx = db.beginTx();
    // 2: Get a hold of a KernelAPI statement context for the *current* transaction this way:
    StatementOperations context = statementContextProvider.getCtxForWriting();
    StatementState statement = statementContextProvider.statementForWriting();
    // 3: Now you can interact through both the statement context and the kernel API to manipulate the
    // same transaction.
    Node node = db.createNode();
    long labelId = context.labelGetOrCreateForName(statement, "labello");
    context.nodeAddLabel(statement, node.getId(), labelId);
    // 4: Close the StatementContext
    context.close(statement);
    // 5: Commit through the beans API
    beansAPITx.success();
    beansAPITx.finish();
// NOTE: Transactions are still thread-bound right now, because we use JTA to "own" transactions,
// meaning if you use
// both the Kernel API to create transactions while a Beans API transaction is running in the same
// thread, the results are undefined.
// When the Kernel API implementation is done, the Kernel API transaction implementation is not meant
// to be bound to threads.
}||||||||// TODO: Split this into area-specific tests, see PropertyIT.
/**
 * While we transition ownership from the Beans API to the Kernel API for core database
 * interactions, there will be a bit of a mess. Our first goal is an architecture like this:
 * <p/>
 * Users
 * /    \
 * Beans API   Cypher
 * \    /
 * Kernel API
 * |
 * Kernel Implementation
 * <p/>
 * But our current intermediate architecture looks like this:
 * <p/>
 * Users
 * /        \
 * Beans API <--- Cypher
 * |    \    /
 * |  Kernel API
 * |      |
 * Kernel Implementation
 * <p/>
 * Meaning Kernel API and Beans API both manipulate the underlying kernel, causing lots of corner cases. Most
 * notably, those corner cases are related to Transactions, and the interplay between three transaction APIs:
 * - The Beans API
 * - The JTA Transaction Manager API
 * - The Kernel TransactionContext API
 * <p/>
 * In the long term, the goal is for JTA compliant stuff to live outside of the kernel, as an addon. The Kernel
 * API will rule supreme over the land of transactions. We are a long way away from there, however, so as a first
 * intermediary step, the JTA transaction manager rules supreme, and the Kernel API piggybacks on it.
 * <p/>
 * This test shows us how to use both the Kernel API and the Beans API together in the same transaction,
 * during the transition phase.
 */
@Test
public void mixingBeansApiWithKernelAPI() throws Exception {
    // 1: Start your transactions through the Beans API
    Transaction beansAPITx = db.beginTx();
    // 2: Get a hold of a KernelAPI statement context for the *current* transaction this way:
    StatementOperations context = statementContextProvider.getCtxForWriting().asStatementOperations();
    StatementState statement = statementContextProvider.statementForWriting();
    // 3: Now you can interact through both the statement context and the kernel API to manipulate the
    // same transaction.
    Node node = db.createNode();
    long labelId = context.labelGetOrCreateForName(statement, "labello");
    context.nodeAddLabel(statement, node.getId(), labelId);
    // 4: Close the StatementContext
    context.close(statement);
    // 5: Commit through the beans API
    beansAPITx.success();
    beansAPITx.finish();
// NOTE: Transactions are still thread-bound right now, because we use JTA to "own" transactions,
// meaning if you use
// both the Kernel API to create transactions while a Beans API transaction is running in the same
// thread, the results are undefined.
// When the Kernel API implementation is done, the Kernel API transaction implementation is not meant
// to be bound to threads.
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

