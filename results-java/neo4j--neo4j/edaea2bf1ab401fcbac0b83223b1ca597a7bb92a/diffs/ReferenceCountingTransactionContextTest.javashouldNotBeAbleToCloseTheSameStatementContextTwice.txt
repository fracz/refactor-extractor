// @Ignore( "Not valid I(MP)'d say" )
// @Test
// public void shouldNotBeAbleToInteractWithAClosedStatementContext() throws Exception
// {
// // GIVEN
// StatementState first = refCountingContext.newStatementState();
// refCountingContext.newStatementState();
// statementLogic.close( first );
// 
// // WHEN
// try
// {
// statementLogic.keyReadOperations().labelGetName( first, 0 );
// 
// fail( "expected exception" );
// }
// // THEN
// catch ( IllegalStateException e )
// {
// assertEquals( "This StatementContext has been closed. No more interaction allowed", e.getMessage() );
// }
// }
@Test
public void shouldNotBeAbleToCloseTheSameStatementContextTwice() throws Exception {
    // GIVEN
    StatementState first = refCountingContext.newStatementState();
    refCountingContext.newStatementState();
    refCountingOperations.close(first);
    // WHEN
    try {
        refCountingOperations.close(first);
        fail("expected exception");
    }// THEN
     catch (IllegalStateException e) {
        assertEqualsStatementClosed(e);
    }
    verify(actualState.refCounting(), never()).close();
}||||||||// @Ignore( "Not valid I(MP)'d say" )
// @Test
// public void shouldNotBeAbleToInteractWithAClosedStatementContext() throws Exception
// {
// // GIVEN
// StatementState first = refCountingContext.newStatementState();
// refCountingContext.newStatementState();
// statementLogic.close( first );
// 
// // WHEN
// try
// {
// statementLogic.keyReadOperations().labelGetName( first, 0 );
// 
// fail( "expected exception" );
// }
// // THEN
// catch ( IllegalStateException e )
// {
// assertEquals( "This StatementContext has been closed. No more interaction allowed", e.getMessage() );
// }
// }
@Test
public void shouldNotBeAbleToCloseTheSameStatementContextTwice() throws Exception {
    // GIVEN
    StatementState first = refCountingContext.newStatementState();
    refCountingContext.newStatementState();
    refCountingOperations.close(first);
    // WHEN
    try {
        refCountingOperations.close(first);
        fail("expected exception");
    }// THEN
     catch (IllegalStateException e) {
        assertEqualsStatementClosed(e);
    }
    verify(actualState, never()).markAsClosed();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				LineComment
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				LineComment
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

