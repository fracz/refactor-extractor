@Override
public void relationshipDelete(final KernelStatement state, long relationshipId) throws EntityNotFoundException {
    assertRelationshipExists(state, relationshipId);
    // NOTE: We implicitly delegate to neoStoreTransaction via txState.legacyState here. This is because that
    // call returns modified properties, which node manager uses to update legacy tx state. This will be cleaned up
    // once we've removed legacy tx state.
    legacyPropertyTrackers.relationshipDelete(relationshipId);
    final TransactionState txState = state.txState();
    if (txState.relationshipIsAddedInThisTx(relationshipId)) {
        txState.relationshipDoDeleteAddedInThisTx(relationshipId);
    } else {
        try {
            storeLayer.relationshipVisit(relationshipId, new RelationshipVisitor<RuntimeException>() {

                @Override
                public void visit(long relId, int type, long startNode, long endNode) {
                    txState.relationshipDoDelete(relId, type, startNode, endNode);
                }
            });
        } catch (EntityNotFoundException e) {
            // If it doesn't exist, it doesn't exist, and the user got what she wanted.
            return;
        }
    }
}||||||||@Override
public void relationshipDelete(final KernelStatement state, RelationshipItem relationship) {
    // NOTE: We implicitly delegate to neoStoreTransaction via txState.legacyState here. This is because that
    // call returns modified properties, which node manager uses to update legacy tx state. This will be cleaned up
    // once we've removed legacy tx state.
    legacyPropertyTrackers.relationshipDelete(relationship.id());
    final TransactionState txState = state.txState();
    if (txState.relationshipIsAddedInThisTx(relationship.id())) {
        txState.relationshipDoDeleteAddedInThisTx(relationship.id());
    } else {
        try {
            storeLayer.relationshipVisit(relationship.id(), new RelationshipVisitor<RuntimeException>() {

                @Override
                public void visit(long relId, int type, long startNode, long endNode) {
                    txState.relationshipDoDelete(relId, type, startNode, endNode);
                }
            });
        } catch (EntityNotFoundException e) {
            // If it doesn't exist, it doesn't exist, and the user got what she wanted.
            return;
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ReturnStmt
								LineComment
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(VoidType
										)
										SimpleName
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ReturnStmt
								LineComment
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(VoidType
										)
										SimpleName
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

