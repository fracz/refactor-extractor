@Override
public boolean next() {
    while (relationshipId != Record.NO_NEXT_RELATIONSHIP.intValue()) {
        relationshipRecord.setId(relationshipId);
        if (!relationshipStore.fillRecord(relationshipId, relationshipRecord, RecordLoad.CHECK)) {
            return false;
        }
        try {
            // Direction check
            if (direction != Direction.BOTH) {
                switch(direction) {
                    case INCOMING:
                        {
                            if (relationshipRecord.getSecondNode() != fromNodeId) {
                                continue;
                            }
                            break;
                        }
                    case OUTGOING:
                        {
                            if (relationshipRecord.getFirstNode() != fromNodeId) {
                                continue;
                            }
                            break;
                        }
                }
            }
            // Type check
            if (!checkType(relationshipRecord.getType())) {
                continue;
            }
            return true;
        } finally {
            // Pick next relationship
            if (relationshipRecord.getFirstNode() == fromNodeId) {
                relationshipId = relationshipRecord.getFirstNextRel();
            } else if (relationshipRecord.getSecondNode() == fromNodeId) {
                relationshipId = relationshipRecord.getSecondNextRel();
            } else {
                throw new InvalidRecordException("While loading relationships for Node[" + fromNodeId + "] a Relationship[" + relationshipRecord.getId() + "] was encountered that had startNode:" + " " + relationshipRecord.getFirstNode() + " and endNode: " + relationshipRecord.getSecondNode() + ", i.e. which had neither start nor end node as the node we're loading relationships for");
            }
            // traverse the next group
            if (relationshipId == Record.NO_NEXT_RELATIONSHIP.intValue() && isDense) {
                relationshipId = nextChainStart();
            }
        }
    }
    return false;
}||||||||@Override
public boolean next() {
    while (relationshipId != Record.NO_NEXT_RELATIONSHIP.intValue()) {
        relationshipRecord.setId(relationshipId);
        try {
            if (!relationshipStore.fillRecord(relationshipId, relationshipRecord, RecordLoad.CHECK)) {
                return false;
            }
        } catch (InvalidRecordException e) {
            relationshipId = Record.NO_NEXT_RELATIONSHIP.intValue();
            return false;
        }
        try {
            // Direction check
            if (direction != Direction.BOTH) {
                switch(direction) {
                    case INCOMING:
                        {
                            if (relationshipRecord.getSecondNode() != fromNodeId) {
                                continue;
                            }
                            break;
                        }
                    case OUTGOING:
                        {
                            if (relationshipRecord.getFirstNode() != fromNodeId) {
                                continue;
                            }
                            break;
                        }
                }
            }
            // Type check
            if (!checkType(relationshipRecord.getType())) {
                continue;
            }
            return true;
        } finally {
            // Pick next relationship
            if (relationshipRecord.getFirstNode() == fromNodeId) {
                relationshipId = relationshipRecord.getFirstNextRel();
            } else if (relationshipRecord.getSecondNode() == fromNodeId) {
                relationshipId = relationshipRecord.getSecondNextRel();
            } else {
                throw new InvalidRecordException("While loading relationships for Node[" + fromNodeId + "] a Relationship[" + relationshipRecord.getId() + "] was encountered that had startNode:" + " " + relationshipRecord.getFirstNode() + " and endNode: " + relationshipRecord.getSecondNode() + ", i.e. which had neither start nor end node as the node we're loading relationships for");
            }
            // traverse the next group
            if (relationshipId == Record.NO_NEXT_RELATIONSHIP.intValue() && isDense) {
                relationshipId = nextChainStart();
            }
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																			)
																			StringLiteralExpr
																		)
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(SwitchStmt
									(SwitchEntryStmt
										NameExpr
											SimpleName
										(BlockStmt
											(IfStmt
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ContinueStmt
													)
												)
											)
											(BreakStmt
											)
										)
									)
									(SwitchEntryStmt
										NameExpr
											SimpleName
										(BlockStmt
											(IfStmt
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ContinueStmt
													)
												)
											)
											(BreakStmt
											)
										)
									)
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																			)
																			StringLiteralExpr
																		)
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(SwitchStmt
									(SwitchEntryStmt
										NameExpr
											SimpleName
										(BlockStmt
											(IfStmt
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ContinueStmt
													)
												)
											)
											(BreakStmt
											)
										)
									)
									(SwitchEntryStmt
										NameExpr
											SimpleName
										(BlockStmt
											(IfStmt
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ContinueStmt
													)
												)
											)
											(BreakStmt
											)
										)
									)
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

