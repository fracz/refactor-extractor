@Override
public boolean next() throws IOException {
    while (true) {
        pos++;
        // some variables below are initialized to satisfy the compiler
        byte nodeType;
        long newGen = -1;
        long rightSibling = -1;
        long newGenGen = -1;
        long rightSiblingGen = -1;
        do {
            nodeType = TreeNode.nodeType(cursor);
            if (nodeType != TreeNode.NODE_TYPE_TREE_NODE) {
                // will be just random data when looking at it as if it were a tree node.
                continue;
            }
            currentNodeGen = bTreeNode.gen(cursor);
            newGen = bTreeNode.newGen(cursor, stableGeneration, unstableGeneration);
            keyCount = bTreeNode.keyCount(cursor);
            if (!keyCountIsSane()) {
                continue;
            }
            if (GenSafePointerPair.isSuccess(newGen)) {
                newGenGen = bTreeNode.pointerGen(cursor, newGen);
            }
            if (rediscoverKeyPosition) {
                rediscoverKeyPosition();
            }
            // which has by then been consistently read. No decision can be made in here directly.
            if (pos >= keyCount) {
                // Read right sibling
                rightSibling = bTreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);
                if (GenSafePointerPair.isSuccess(rightSibling)) {
                    rightSiblingGen = bTreeNode.pointerGen(cursor, rightSibling);
                }
            } else {
                // Read the next value in this leaf
                bTreeNode.keyAt(cursor, mutableKey, pos);
                bTreeNode.valueAt(cursor, mutableValue, pos);
            }
        } while (rediscoverKeyPosition = cursor.shouldRetry());
        checkOutOfBounds(cursor);
        if (nodeType != TreeNode.NODE_TYPE_TREE_NODE || !saneKeyCountRead(keyCount)) {
            // This node has been reused for something else than a tree node. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (!verifyNodeGenInvariants()) {
            // The node generation is newer than expected. This node has probably been reused during
            // seekers lifetime. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        // Go to newGen if read successfully and
        if (pointerCheckingWithGenerationCatchup(newGen, true)) {
            // Reading newGen pointer resulted in a bad read, but generation had changed (a checkpoint has
            // occurred since we started this cursor) so the generation fields in this cursor are now updated
            // with the latest, so let's try that read again.
            rediscoverKeyPosition = true;
            continue;
        } else if (TreeNode.isNode(newGen)) {
            // We ended up on a node which has a newGen set, let's go to it and read from that one instead.
            bTreeNode.goTo(cursor, "new gen", newGen);
            rediscoverKeyPosition = true;
            lastFollowedPointerGen = newGenGen;
            continue;
        }
        if (pos >= keyCount) {
            if (pointerCheckingWithGenerationCatchup(rightSibling, true)) {
                // Reading rightSibling pointer resulted in a bad read, but generation had changed
                // (a checkpoint has occurred since we started this cursor) so the generation fields in this
                // cursor are now updated with the latest, so let's try that read again.
                rediscoverKeyPosition = true;
                continue;
            } else if (TreeNode.isNode(rightSibling)) {
                // TODO: Check if rightSibling is within expected range before calling next.
                // TODO: Possibly by getting highest expected from IdProvider
                bTreeNode.goTo(cursor, "right sibling", rightSibling);
                lastFollowedPointerGen = rightSiblingGen;
                if (first) {
                    // Have not yet found first hit among leaves.
                    // First hit can be several leaves to the right.
                    // Continue to use binary search in right leaf
                    rediscoverKeyPosition = true;
                } else {
                    // It is likely that first key in right sibling is a next hit.
                    // Continue using scan
                    pos = -1;
                }
                // in the outer loop, with the position reset to the beginning of the right sibling
                continue;
            }
        } else if (layout.compare(mutableKey, toExclusive) < 0) {
            if (layout.compare(mutableKey, fromInclusive) < 0) {
                // too far to the left possibly because page reuse
                rediscoverKeyPosition = true;
                continue;
            } else if (!first && layout.compare(prevKey, mutableKey) >= 0) {
                // This is outlined in InternalTreeLogic, skip this value (it's fine)
                continue;
            }
            // A hit, it's within the range we search for
            if (first) {
                // Setting first to false include an additional check for coming potential
                // hits so that we cannot go backwards in our result. Going backwards can
                // happen when reading through concurrent splits or similar and is a benign
                // temporary observed state.
                first = false;
            }
            layout.copyKey(mutableKey, prevKey);
            return true;
        }
        // We've come too far and so this means the end of the result set
        return false;
    }
}||||||||@Override
public boolean next() throws IOException {
    while (true) {
        pos++;
        // Read
        do {
            // Where we are
            if (!readHeader()) {
                continue;
            }
            if (concurrentWriteHappened) {
                // Keys could have been moved to the left so we need to make sure we are not missing any keys by
                // moving position back until we find previously returned key
                pos = searchKey(first ? fromInclusive : prevKey);
            }
            // Next result
            if (pos >= keyCount) {
                // Read right sibling
                pointerId = bTreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);
                readPointerGenOnSuccess();
            } else {
                // Read the next value in this leaf
                bTreeNode.keyAt(cursor, mutableKey, pos);
                bTreeNode.valueAt(cursor, mutableValue, pos);
            }
        } while (concurrentWriteHappened = cursor.shouldRetry());
        checkOutOfBounds(cursor);
        // Act
        if (nodeType != TreeNode.NODE_TYPE_TREE_NODE || !saneKeyCountRead(keyCount)) {
            // This node has been reused for something else than a tree node. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (!verifyNodeGenInvariants()) {
            // The node generation is newer than expected. This node has probably been reused during
            // seekers lifetime. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (goToNewGen()) {
            continue;
        }
        if (pos >= keyCount) {
            if (goToSibling()) {
                // in the read loop above so that we can continue reading from that sibling
                continue;
            }
        } else if (layout.compare(mutableKey, toExclusive) < 0) {
            if (isResultKey()) {
                layout.copyKey(mutableKey, prevKey);
                // which marks this read a hit that user can see
                return true;
            }
            continue;
        }
        // We've come too far and so this means the end of the result set
        return false;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(DoStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
									LineComment
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
							LineComment
						)
					)
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
					)
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ContinueStmt
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(ContinueStmt
											LineComment
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
										LineComment
									)
									(ContinueStmt
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
										LineComment
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(UnaryExpr
														(IntegerLiteralExpr
														)
													)
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
												)
												LineComment
											)
										)
									)
									(ContinueStmt
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
									LineComment
								)
								(ContinueStmt
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(DoStmt
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(ConditionalExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
									LineComment
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							LineComment
						)
					)
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										(BooleanLiteralExpr
										)
										LineComment
									)
								)
							)
							(ContinueStmt
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ContinueStmt
									LineComment
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

