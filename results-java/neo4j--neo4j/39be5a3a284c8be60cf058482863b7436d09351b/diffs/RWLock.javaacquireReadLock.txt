/**
 * Tries to acquire read lock for a given transaction. If
 * <CODE>this.writeCount</CODE> is greater than the currents tx's write
 * count the transaction has to wait and the {@link RagManager#checkWaitOn}
 * method is invoked for deadlock detection.
 * <p>
 * If the lock can be acquired the lock count is updated on <CODE>this</CODE>
 * and the transaction lock element (tle).
 *
 * @throws DeadlockDetectedException
 * if a deadlock is detected
 */
synchronized void acquireReadLock(Transaction tx) throws DeadlockDetectedException {
    assertTransaction(tx);
    TxLockElement tle = txLockElementMap.get(tx);
    if (tle == null) {
        tle = new TxLockElement(tx);
    }
    try {
        tle.movedOn = false;
        while (writeCount > tle.writeCount) {
            ragManager.checkWaitOn(this, tx);
            waitingThreadList.addFirst(new WaitElement(tle, LockType.READ, Thread.currentThread()));
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.interrupted();
            }
            ragManager.stopWaitOn(this, tx);
        }
        if (tle.readCount == 0 && tle.writeCount == 0) {
            ragManager.lockAcquired(this, tx);
        }
        readCount++;
        tle.readCount++;
        tle.movedOn = true;
        // TODO: this put could be optimized?
        txLockElementMap.put(tx, tle);
    } finally {
        // if deadlocked, remove marking so lock is removed when empty
        marked--;
    }
}||||||||/**
 * Tries to acquire read lock for a given transaction. If
 * <CODE>this.writeCount</CODE> is greater than the currents tx's write
 * count the transaction has to wait and the {@link RagManager#checkWaitOn}
 * method is invoked for deadlock detection.
 * <p>
 * If the lock can be acquired the lock count is updated on <CODE>this</CODE>
 * and the transaction lock element (tle).
 *
 * @throws DeadlockDetectedException
 * if a deadlock is detected
 */
synchronized void acquireReadLock(Transaction tx) throws DeadlockDetectedException {
    TxLockElement tle = getOrCreateLockElement(tx);
    try {
        tle.movedOn = false;
        while (totalWriteCount > tle.writeCount) {
            deadlockGuardedWait(tx, tle, READ);
        }
        registerReadLockAcquired(tx, tle);
    } finally {
        // if deadlocked, remove marking so lock is removed when empty
        tle.movedOn = true;
        marked--;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(UnaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

