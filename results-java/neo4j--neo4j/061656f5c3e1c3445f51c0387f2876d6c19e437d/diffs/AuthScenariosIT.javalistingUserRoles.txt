/*
    Admin creates user Henrik with password bar
    Admin creates user Craig
    Admin adds user Craig to role Publisher
    Henrik logs in with correct password → ok
    Henrik lists all roles for user Craig → permission denied
    Admin lists all roles for user Craig → ok
    Admin adds user Henrik to role Publisher
    Henrik lists all roles for user Henrik → ok
    */
@Test
public void listingUserRoles() throws Exception {
    testCallEmpty(db, adminSubject, "CALL dbms.createUser('Henrik', 'bar', false)");
    testCallEmpty(db, adminSubject, "CALL dbms.createUser('Craig', 'foo', false)");
    testCallEmpty(db, adminSubject, "CALL dbms.addUserToRole('Craig', '" + PUBLISHER + "')");
    AuthSubject subject = manager.login(authToken("Henrik", "bar"));
    assertEquals(AuthenticationResult.SUCCESS, subject.getAuthenticationResult());
    testFailListUserRoles(subject, "Craig");
    testResult(db, adminSubject, "CALL dbms.listRolesForUser('Craig') YIELD value as roles RETURN roles", r -> resultKeyIs(r, "roles", PUBLISHER));
    testCallEmpty(db, adminSubject, "CALL dbms.addUserToRole('Henrik', '" + PUBLISHER + "')");
// TODO: uncomment the next line and make the test pass
// testResult( db, subject, "CALL dbms.listRolesForUser('Henrik') YIELD value as roles RETURN roles",
// r -> resultKeyIs( r, "roles", PUBLISHER ) );
}||||||||/*
    Admin creates user Henrik with password bar
    Admin creates user Craig
    Admin adds user Craig to role Publisher
    Henrik logs in with correct password → ok
    Henrik lists all roles for user Craig → permission denied
    Admin lists all roles for user Craig → ok
    Admin adds user Henrik to role Publisher
    Henrik lists all roles for user Henrik → ok
    */
@Test
public void listingUserRoles() throws Exception {
    testCallEmpty(adminSubject, "CALL dbms.createUser('Henrik', 'bar', false)");
    testCallEmpty(adminSubject, "CALL dbms.createUser('Craig', 'foo', false)");
    testCallEmpty(adminSubject, "CALL dbms.addUserToRole('Craig', '" + PUBLISHER + "')");
    AuthSubject subject = manager.login(authToken("Henrik", "bar"));
    assertEquals(AuthenticationResult.SUCCESS, subject.getAuthenticationResult());
    testFailListUserRoles(subject, "Craig");
    testResult(adminSubject, "CALL dbms.listRolesForUser('Craig') YIELD value as roles RETURN roles", r -> resultKeyIs(r, "roles", PUBLISHER));
    testCallEmpty(adminSubject, "CALL dbms.addUserToRole('Henrik', '" + PUBLISHER + "')");
// TODO: uncomment the next line and make the test pass
// testResult( subject, "CALL dbms.listRolesForUser('Henrik') YIELD value as roles RETURN roles",
// r -> resultKeyIs( r, "roles", PUBLISHER ) );
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				StringLiteralExpr
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)

