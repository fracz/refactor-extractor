@Test
public void shouldListCorrectBuiltinProcedures() throws Throwable {
    // When/Then
    assertThat(call("dbms.procedures"), containsInAnyOrder(record("dbms.listConfig", "dbms.listConfig(searchString =  :: STRING?) :: (name :: STRING?, description :: STRING?, " + "value" + " :: STRING?)", "List the currently active config of Neo4j."), record("dbms.reloadConfig", "dbms.reloadConfig(dryRun = false :: BOOLEAN?) :: (type :: STRING?, key :: STRING?, oldValue " + ":: STRING?, newValue :: STRING?)", "Reload the active config file of Neo4j. If testRun is true the config will be parsed and validated" + " and the changes will be listed."), record("db.awaitIndex", "db.awaitIndex(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID", "Wait for an index to come online (for example: CALL db.awaitIndex(\":Person(name)\"))."), record("db.awaitIndexes", "db.awaitIndexes(timeOutSeconds = 300 :: INTEGER?) :: VOID", "Wait for all indexes to come online (for example: CALL db.awaitIndexes(\"500\"))."), record("db.constraints", "db.constraints() :: (description :: STRING?)", "List all constraints in the database."), record("db.indexes", "db.indexes() :: (description :: STRING?, state :: STRING?, type :: STRING?)", "List all indexes in the database."), record("db.labels", "db.labels() :: (label :: STRING?)", "List all labels in the database."), record("db.propertyKeys", "db.propertyKeys() :: (propertyKey :: STRING?)", "List all property keys in the database."), record("db.relationshipTypes", "db.relationshipTypes() :: (relationshipType :: STRING?)", "List all relationship types in the database."), record("db.resampleIndex", "db.resampleIndex(index :: STRING?) :: VOID", "Schedule resampling of an index (for example: CALL db.resampleIndex(\":Person(name)\"))."), record("db.resampleOutdatedIndexes", "db.resampleOutdatedIndexes() :: VOID", "Schedule resampling of all outdated indexes."), record("db.schema", "db.schema() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)", "Show the schema of the data."), record("db.nodeManualIndexSearch", "db.nodeManualIndexSearch(indexName :: STRING?, query :: ANY?) :: (node :: NODE?)", "Search nodes from manual index. Replaces `START n=node:nodes('key:foo*')`"), record("db.nodeManualIndexSeek", "db.nodeManualIndexSeek(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (node :: NODE?)", "Get node from manual index. Replaces `START n=node:nodes(key = 'A')`"), record("db.relationshipManualIndexSearch", "db.relationshipManualIndexSearch(indexName :: STRING?, query :: ANY?) :: (relationship :: RELATIONSHIP?)", "Search relationship from manual index. Replaces `START r=relationship:relIndex('key:foo*')`"), record("db.relationshipManualIndexSeek", "db.relationshipManualIndexSeek(indexName :: STRING?, key :: STRING?, value :: ANY?) :: " + "(relationship :: RELATIONSHIP?)", "Get relationship from manual index. Replaces `START r=relationship:relIndex(key = 'A')`"), record("dbms.components", "dbms.components() :: (name :: STRING?, versions :: LIST? OF STRING?, edition :: STRING?)", "List DBMS components and their versions."), record("dbms.procedures", "dbms.procedures() :: (name :: STRING?, signature :: STRING?, description :: STRING?)", "List all procedures in the DBMS."), record("dbms.functions", "dbms.functions() :: (name :: STRING?, signature :: STRING?, description :: STRING?)", "List all user functions in the DBMS."), record("dbms.queryJmx", "dbms.queryJmx(query :: STRING?) :: (name :: STRING?, description :: STRING?, attributes :: " + "MAP?)", "Query JMX management data by domain and name. For instance, \"org.neo4j:*\"")));
}||||||||@Test
public void shouldListCorrectBuiltinProcedures() throws Throwable {
    // When/Then
    assertThat(call("dbms.procedures"), containsInAnyOrder(record("dbms.listConfig", "dbms.listConfig(searchString =  :: STRING?) :: (name :: STRING?, description :: STRING?, " + "value" + " :: STRING?)", "List the currently active config of Neo4j."), record("db.awaitIndex", "db.awaitIndex(index :: STRING?, timeOutSeconds = 300 :: INTEGER?) :: VOID", "Wait for an index to come online (for example: CALL db.awaitIndex(\":Person(name)\"))."), record("db.awaitIndexes", "db.awaitIndexes(timeOutSeconds = 300 :: INTEGER?) :: VOID", "Wait for all indexes to come online (for example: CALL db.awaitIndexes(\"500\"))."), record("db.constraints", "db.constraints() :: (description :: STRING?)", "List all constraints in the database."), record("db.indexes", "db.indexes() :: (description :: STRING?, state :: STRING?, type :: STRING?)", "List all indexes in the database."), record("db.labels", "db.labels() :: (label :: STRING?)", "List all labels in the database."), record("db.propertyKeys", "db.propertyKeys() :: (propertyKey :: STRING?)", "List all property keys in the database."), record("db.relationshipTypes", "db.relationshipTypes() :: (relationshipType :: STRING?)", "List all relationship types in the database."), record("db.resampleIndex", "db.resampleIndex(index :: STRING?) :: VOID", "Schedule resampling of an index (for example: CALL db.resampleIndex(\":Person(name)\"))."), record("db.resampleOutdatedIndexes", "db.resampleOutdatedIndexes() :: VOID", "Schedule resampling of all outdated indexes."), record("db.schema", "db.schema() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)", "Show the schema of the data."), record("db.nodeManualIndexSearch", "db.nodeManualIndexSearch(indexName :: STRING?, query :: ANY?) :: (node :: NODE?)", "Search nodes from manual index. Replaces `START n=node:nodes('key:foo*')`"), record("db.nodeManualIndexSeek", "db.nodeManualIndexSeek(indexName :: STRING?, key :: STRING?, value :: ANY?) :: (node :: NODE?)", "Get node from manual index. Replaces `START n=node:nodes(key = 'A')`"), record("db.relationshipManualIndexSearch", "db.relationshipManualIndexSearch(indexName :: STRING?, query :: ANY?) :: (relationship :: RELATIONSHIP?)", "Search relationship from manual index. Replaces `START r=relationship:relIndex('key:foo*')`"), record("db.relationshipManualIndexSeek", "db.relationshipManualIndexSeek(indexName :: STRING?, key :: STRING?, value :: ANY?) :: " + "(relationship :: RELATIONSHIP?)", "Get relationship from manual index. Replaces `START r=relationship:relIndex(key = 'A')`"), record("dbms.components", "dbms.components() :: (name :: STRING?, versions :: LIST? OF STRING?, edition :: STRING?)", "List DBMS components and their versions."), record("dbms.procedures", "dbms.procedures() :: (name :: STRING?, signature :: STRING?, description :: STRING?)", "List all procedures in the DBMS."), record("dbms.functions", "dbms.functions() :: (name :: STRING?, signature :: STRING?, description :: STRING?)", "List all user functions in the DBMS."), record("dbms.queryJmx", "dbms.queryJmx(query :: STRING?) :: (name :: STRING?, description :: STRING?, attributes :: " + "MAP?)", "Query JMX management data by domain and name. For instance, \"org.neo4j:*\"")));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

