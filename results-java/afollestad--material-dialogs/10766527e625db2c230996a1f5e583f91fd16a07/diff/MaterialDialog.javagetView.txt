@SuppressLint("WrongViewCast")
@Override
public View getView(final int index, View convertView, ViewGroup parent) {
    final View view = super.getView(index, convertView, parent);
    TextView tv = (TextView) view.findViewById(R.id.title);
    switch(listType) {
        case SINGLE:
            {
                @SuppressLint("CutPasteId") RadioButton radio = (RadioButton) view.findViewById(R.id.control);
                radio.setChecked(mBuilder.selectedIndex == index);
                break;
            }
        case MULTI:
            {
                @SuppressLint("CutPasteId") CheckBox checkbox = (CheckBox) view.findViewById(R.id.control);
                checkbox.setChecked(selectedIndicesList.contains(index));
                break;
            }
    }
    tv.setText(mBuilder.items[index]);
    tv.setTextColor(itemColor);
    setTypeface(tv, mBuilder.regularFont);
    view.setTag(index + ":" + mBuilder.items[index]);
    Drawable d = mBuilder.selector;
    if (d == null) {
        d = DialogUtils.resolveDrawable(mBuilder.context, R.attr.md_selector);
        if (d == null)
            d = DialogUtils.resolveDrawable(getContext(), R.attr.md_selector);
    }
    setBackgroundCompat(view, d);
    return view;
}||||||||@SuppressLint("WrongViewCast")
@Override
public View getView(final int index, View convertView, ViewGroup parent) {
    final View view = super.getView(index, convertView, parent);
    TextView tv = (TextView) view.findViewById(R.id.title);
    switch(listType) {
        case SINGLE:
            {
                @SuppressLint("CutPasteId") RadioButton radio = (RadioButton) view.findViewById(R.id.control);
                radio.setChecked(mBuilder.selectedIndex == index);
                break;
            }
        case MULTI:
            {
                @SuppressLint("CutPasteId") CheckBox checkbox = (CheckBox) view.findViewById(R.id.control);
                checkbox.setChecked(selectedIndicesList.contains(index));
                break;
            }
    }
    tv.setText(mBuilder.items[index]);
    tv.setTextColor(itemColor);
    setTypeface(tv, mBuilder.regularFont);
    view.setTag(index + ":" + mBuilder.items[index]);
    setBackgroundCompat(view, getSelector());
    return view;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
						NameExpr
						NameExpr
						(SuperExpr
						)
					)
					(ClassOrInterfaceType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							(FieldAccessExpr
								(FieldAccessExpr
									NameExpr
								)
							)
							NameExpr
						)
						(ClassOrInterfaceType
						)
					)
					(ClassOrInterfaceType
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(SingleMemberAnnotationExpr
								StringLiteralExpr
								Name
							)
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										(FieldAccessExpr
											(FieldAccessExpr
												NameExpr
											)
										)
										NameExpr
									)
									(ClassOrInterfaceType
									)
								)
								(ClassOrInterfaceType
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(FieldAccessExpr
									NameExpr
								)
								NameExpr
							)
							NameExpr
						)
					)
					(BreakStmt
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(SingleMemberAnnotationExpr
								StringLiteralExpr
								Name
							)
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										(FieldAccessExpr
											(FieldAccessExpr
												NameExpr
											)
										)
										NameExpr
									)
									(ClassOrInterfaceType
									)
								)
								(ClassOrInterfaceType
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
								NameExpr
							)
							NameExpr
						)
					)
					(BreakStmt
					)
				)
			)
			NameExpr
		)
		(ExpressionStmt
			(MethodCallExpr
				(ArrayAccessExpr
					NameExpr
					(FieldAccessExpr
						NameExpr
					)
				)
				NameExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
				NameExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
				(FieldAccessExpr
					NameExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
						StringLiteralExpr
					)
					(ArrayAccessExpr
						NameExpr
						(FieldAccessExpr
							NameExpr
						)
					)
				)
				NameExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						NameExpr
					)
					(ClassOrInterfaceType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
						(MethodCallExpr
							(FieldAccessExpr
								NameExpr
							)
							(FieldAccessExpr
								(FieldAccessExpr
									NameExpr
								)
							)
							NameExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
						NullLiteralExpr
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
							(MethodCallExpr
								(MethodCallExpr
								)
								(FieldAccessExpr
									(FieldAccessExpr
										NameExpr
									)
								)
								NameExpr
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
				NameExpr
			)
		)
		(ReturnStmt
			NameExpr
		)
	)
	(ClassOrInterfaceType
	)
	(Parameter
		(PrimitiveType
		)
	)
	(Parameter
		(ClassOrInterfaceType
		)
	)
	(Parameter
		(ClassOrInterfaceType
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
						NameExpr
						NameExpr
						(SuperExpr
						)
					)
					(ClassOrInterfaceType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							(FieldAccessExpr
								(FieldAccessExpr
									NameExpr
								)
							)
							NameExpr
						)
						(ClassOrInterfaceType
						)
					)
					(ClassOrInterfaceType
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(SingleMemberAnnotationExpr
								StringLiteralExpr
								Name
							)
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										(FieldAccessExpr
											(FieldAccessExpr
												NameExpr
											)
										)
										NameExpr
									)
									(ClassOrInterfaceType
									)
								)
								(ClassOrInterfaceType
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(FieldAccessExpr
									NameExpr
								)
								NameExpr
							)
							NameExpr
						)
					)
					(BreakStmt
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(SingleMemberAnnotationExpr
								StringLiteralExpr
								Name
							)
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										(FieldAccessExpr
											(FieldAccessExpr
												NameExpr
											)
										)
										NameExpr
									)
									(ClassOrInterfaceType
									)
								)
								(ClassOrInterfaceType
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
								NameExpr
							)
							NameExpr
						)
					)
					(BreakStmt
					)
				)
			)
			NameExpr
		)
		(ExpressionStmt
			(MethodCallExpr
				(ArrayAccessExpr
					NameExpr
					(FieldAccessExpr
						NameExpr
					)
				)
				NameExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
				NameExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
				(FieldAccessExpr
					NameExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
						StringLiteralExpr
					)
					(ArrayAccessExpr
						NameExpr
						(FieldAccessExpr
							NameExpr
						)
					)
				)
				NameExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
				(MethodCallExpr
				)
			)
		)
		(ReturnStmt
			NameExpr
		)
	)
	(ClassOrInterfaceType
	)
	(Parameter
		(PrimitiveType
		)
	)
	(Parameter
		(ClassOrInterfaceType
		)
	)
	(Parameter
		(ClassOrInterfaceType
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)

