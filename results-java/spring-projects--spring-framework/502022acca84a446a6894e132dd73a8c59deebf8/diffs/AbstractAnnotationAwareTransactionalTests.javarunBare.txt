/**
 * Overridden to populate transaction definition from annotations.
 */
@Override
public void runBare() throws Throwable {
    // getName will return the name of the method being run.
    if (isDisabledInThisEnvironment(getName())) {
        // Let superclass log that we didn't run the test.
        super.runBare();
        return;
    }
    final Method testMethod = getTestMethod();
    if (isDisabledInThisEnvironment(testMethod)) {
        recordDisabled();
        this.logger.info("**** " + getClass().getName() + "." + getName() + " is disabled in this environment: " + "Total disabled tests=" + getDisabledTestCount());
        return;
    }
    TransactionDefinition explicitTransactionDefinition = this.transactionAttributeSource.getTransactionAttribute(testMethod, getClass());
    if (explicitTransactionDefinition != null) {
        this.logger.info("Custom transaction definition [" + explicitTransactionDefinition + "] for test method [" + getName() + "].");
        setTransactionDefinition(explicitTransactionDefinition);
    } else if (testMethod.isAnnotationPresent(NotTransactional.class)) {
        // Don't have any transaction...
        preventTransaction();
    }
    // Let JUnit handle execution. We're just changing the state of the test class first.
    runTestTimed(new TestExecutionCallback() {

        @Override
        public void run() throws Throwable {
            try {
                AbstractAnnotationAwareTransactionalTests.super.runBare();
            } finally {
                // automatically.
                if (testMethod.isAnnotationPresent(DirtiesContext.class)) {
                    AbstractAnnotationAwareTransactionalTests.this.setDirty();
                }
            }
        }
    }, testMethod);
}||||||||/**
 * Overridden to populate transaction definition from annotations.
 */
@Override
public void runBare() throws Throwable {
    // getName will return the name of the method being run.
    if (isDisabledInThisEnvironment(getName())) {
        // Let superclass log that we didn't run the test.
        super.runBare();
        return;
    }
    final Method testMethod = getTestMethod();
    TransactionDefinition explicitTransactionDefinition = this.transactionAttributeSource.getTransactionAttribute(testMethod, getClass());
    if (explicitTransactionDefinition != null) {
        this.logger.info("Custom transaction definition [" + explicitTransactionDefinition + "] for test method [" + getName() + "].");
        setTransactionDefinition(explicitTransactionDefinition);
    }
    if (this.transactionDefinition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) {
        preventTransaction();
    }
    super.runBare();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(SuperExpr
						)
					)
					LineComment
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
											)
											StringLiteralExpr
										)
										(MethodCallExpr
											SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								SimpleName
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(MethodCallExpr
									SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(TryStmt
								(BlockStmt
									(IfStmt
										(MethodCallExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													(ThisExpr
														NameExpr
															SimpleName
													)
												)
											)
										)
										LineComment
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											(SuperExpr
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(SuperExpr
						)
					)
					LineComment
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(MethodCallExpr
									SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

