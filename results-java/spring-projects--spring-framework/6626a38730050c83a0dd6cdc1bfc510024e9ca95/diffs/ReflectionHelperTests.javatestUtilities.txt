/*
	@Test
	public void testFormatHelperForMethod() {
		Assert.assertEquals("foo(java.lang.String)",FormatHelper.formatMethodForMessage("foo", String.class));
		Assert.assertEquals("goo(java.lang.String,int[])",FormatHelper.formatMethodForMessage("goo", String.class,new int[1].getClass()));
		Assert.assertEquals("boo()",FormatHelper.formatMethodForMessage("boo"));
	}
	*/
@Test
public void testUtilities() throws ParseException {
    SpelExpression expr = (SpelExpression) parser.parseExpression("3+4+5+6+7-2");
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    SpelUtilities.printAbstractSyntaxTree(ps, expr);
    ps.flush();
    String s = baos.toString();
    // ===> Expression '3+4+5+6+7-2' - AST start
    // OperatorMinus  value:(((((3 + 4) + 5) + 6) + 7) - 2)  #children:2
    // OperatorPlus  value:((((3 + 4) + 5) + 6) + 7)  #children:2
    // OperatorPlus  value:(((3 + 4) + 5) + 6)  #children:2
    // OperatorPlus  value:((3 + 4) + 5)  #children:2
    // OperatorPlus  value:(3 + 4)  #children:2
    // CompoundExpression  value:3
    // IntLiteral  value:3
    // CompoundExpression  value:4
    // IntLiteral  value:4
    // CompoundExpression  value:5
    // IntLiteral  value:5
    // CompoundExpression  value:6
    // IntLiteral  value:6
    // CompoundExpression  value:7
    // IntLiteral  value:7
    // CompoundExpression  value:2
    // IntLiteral  value:2
    // ===> Expression '3+4+5+6+7-2' - AST end
    Assert.assertTrue(s.indexOf("===> Expression '3+4+5+6+7-2' - AST start") != -1);
    Assert.assertTrue(s.indexOf(" OpPlus  value:((((3 + 4) + 5) + 6) + 7)  #children:2") != -1);
}||||||||/*
	@Test
	public void testFormatHelperForMethod() {
		assertEquals("foo(java.lang.String)",FormatHelper.formatMethodForMessage("foo", String.class));
		assertEquals("goo(java.lang.String,int[])",FormatHelper.formatMethodForMessage("goo", String.class,new int[1].getClass()));
		assertEquals("boo()",FormatHelper.formatMethodForMessage("boo"));
	}
	*/
@Test
public void testUtilities() throws ParseException {
    SpelExpression expr = (SpelExpression) parser.parseExpression("3+4+5+6+7-2");
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    SpelUtilities.printAbstractSyntaxTree(ps, expr);
    ps.flush();
    String s = baos.toString();
    // ===> Expression '3+4+5+6+7-2' - AST start
    // OperatorMinus  value:(((((3 + 4) + 5) + 6) + 7) - 2)  #children:2
    // OperatorPlus  value:((((3 + 4) + 5) + 6) + 7)  #children:2
    // OperatorPlus  value:(((3 + 4) + 5) + 6)  #children:2
    // OperatorPlus  value:((3 + 4) + 5)  #children:2
    // OperatorPlus  value:(3 + 4)  #children:2
    // CompoundExpression  value:3
    // IntLiteral  value:3
    // CompoundExpression  value:4
    // IntLiteral  value:4
    // CompoundExpression  value:5
    // IntLiteral  value:5
    // CompoundExpression  value:6
    // IntLiteral  value:6
    // CompoundExpression  value:7
    // IntLiteral  value:7
    // CompoundExpression  value:2
    // IntLiteral  value:2
    // ===> Expression '3+4+5+6+7-2' - AST end
    assertTrue(s.indexOf("===> Expression '3+4+5+6+7-2' - AST start") != -1);
    assertTrue(s.indexOf(" OpPlus  value:((((3 + 4) + 5) + 6) + 7)  #children:2") != -1);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

