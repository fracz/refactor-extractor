/**
 * Create a new type descriptor for an object.
 * Use this factory method to introspect a source object's type before asking the conversion system to convert it to some another type.
 * Populates nested type descriptors for collection and map objects through object introspection.
 * If the provided object is null, returns {@link TypeDescriptor#NULL}.
 * If the object is not a collection or map, simply calls {@link #valueOf(Class)}.
 * If the object is a collection or map, this factory method will derive nested element or key/value types by introspecting the collection or map.
 * The introspection algorithm derives nested element or key/value types by resolving the "common element type" across the collection or map.
 * For example, if a Collection contained all java.lang.Integer elements, its element type would be java.lang.Integer.
 * If a Collection contained several distinct number types all extending from java.lang.Number, its element type would be java.lang.Number.
 * If a Collection contained a String and a java.util.Map element, its element type would be java.io.Serializable.
 * @param object the source object
 * @return the type descriptor
 * @see ConversionService#convert(Object, Class)
 */
public static TypeDescriptor forObject(Object object) {
    if (object == null) {
        return NULL;
    }
    if (object instanceof Collection<?>) {
        return new TypeDescriptor(object.getClass(), findCommonElement((Collection<?>) object));
    } else if (object instanceof Map<?, ?>) {
        Map<?, ?> map = (Map<?, ?>) object;
        return new TypeDescriptor(map.getClass(), findCommonElement(map.keySet()), findCommonElement(map.values()));
    } else {
        return valueOf(object.getClass());
    }
}||||||||/**
 * Create a new type descriptor for an object.
 * Use this factory method to introspect a source object's type before asking the conversion system to convert it to some another type.
 * Populates nested type descriptors for collection and map objects through object introspection.
 * If the provided object is null, returns {@link TypeDescriptor#NULL}.
 * If the object is not a collection or map, simply calls {@link #valueOf(Class)}.
 * If the object is a collection or map, this factory method will derive nested element or key/value types by introspecting the collection or map.
 * The introspection algorithm derives nested element or key/value types by resolving the "common element type" across the collection or map.
 * For example, if a Collection contained all java.lang.Integer elements, its element type would be java.lang.Integer.
 * If a Collection contained several distinct number types all extending from java.lang.Number, its element type would be java.lang.Number.
 * If a Collection contained a String and a java.util.Map element, its element type would be java.io.Serializable.
 * @param object the source object
 * @return the type descriptor
 * @see ConversionService#convert(Object, Class)
 */
public static TypeDescriptor forObject(Object object) {
    if (object == null) {
        return NULL;
    }
    if (object instanceof Collection<?>) {
        return new TypeDescriptor(object.getClass(), CommonElement.typeDescriptor((Collection<?>) object));
    } else if (object instanceof Map<?, ?>) {
        Map<?, ?> map = (Map<?, ?>) object;
        return new TypeDescriptor(map.getClass(), CommonElement.typeDescriptor(map.keySet()), CommonElement.typeDescriptor(map.values()));
    } else {
        return valueOf(object.getClass());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
					(WildcardType
					)
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
						(WildcardType
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
										(WildcardType
										)
										(WildcardType
										)
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
									(WildcardType
									)
								)
							)
						)
					)
					(ReturnStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
					(WildcardType
					)
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
						(WildcardType
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
										(WildcardType
										)
										(WildcardType
										)
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
									(WildcardType
									)
								)
							)
						)
					)
					(ReturnStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

