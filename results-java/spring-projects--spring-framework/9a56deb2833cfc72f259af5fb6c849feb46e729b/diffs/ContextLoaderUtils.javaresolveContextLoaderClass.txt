/**
 * Resolves the {@link ContextLoader} {@link Class} to use for the supplied
 * {@link Class test class}.
 *
 * <ol>
 * <li>If the {@link ContextConfiguration#loader() loader} attribute of
 * {@link ContextConfiguration &#064;ContextConfiguration} is configured
 * with an explicit class, that class will be returned.</li>
 * <li>If a <code>loader</code> class is not specified, the class hierarchy
 * will be traversed to find a parent class annotated with
 * <code>&#064;ContextConfiguration</code>; go to step #1.</li>
 * <li>If no explicit <code>loader</code> class is found after traversing
 * the class hierarchy, an attempt will be made to load and return the class
 * with the supplied <code>defaultContextLoaderClassName</code>.</li>
 * </ol>
 *
 * @param clazz the class for which to resolve the <code>ContextLoader</code>
 * class; must not be <code>null</code>
 * @param defaultContextLoaderClassName the name of the default
 * <code>ContextLoader</code> class to use; must not be <code>null</code> or empty
 * @return the <code>ContextLoader</code> class to use for the specified class
 * (never <code>null</code>)
 * @throws IllegalArgumentException if {@link ContextConfiguration
 * &#064;ContextConfiguration} is not <em>present</em> on the supplied class
 */
@SuppressWarnings("unchecked")
static Class<? extends ContextLoader> resolveContextLoaderClass(Class<?> clazz, String defaultContextLoaderClassName) {
    Assert.notNull(clazz, "Class must not be null");
    Assert.hasText(defaultContextLoaderClassName, "Default ContextLoader class name must not be null or empty");
    Class<ContextConfiguration> annotationType = ContextConfiguration.class;
    Class<?> declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, clazz);
    Assert.notNull(declaringClass, String.format("Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType, clazz));
    while (declaringClass != null) {
        ContextConfiguration contextConfiguration = declaringClass.getAnnotation(annotationType);
        if (logger.isTraceEnabled()) {
            logger.trace("Processing ContextLoader for @ContextConfiguration [" + contextConfiguration + "] and declaring class [" + declaringClass + "]");
        }
        Class<? extends ContextLoader> contextLoaderClass = contextConfiguration.loader();
        if (!ContextLoader.class.equals(contextLoaderClass)) {
            if (logger.isDebugEnabled()) {
                logger.debug("Found explicit ContextLoader [" + contextLoaderClass + "] for @ContextConfiguration [" + contextConfiguration + "] and declaring class [" + declaringClass + "]");
            }
            return contextLoaderClass;
        }
        declaringClass = AnnotationUtils.findAnnotationDeclaringClass(annotationType, declaringClass.getSuperclass());
    }
    try {
        if (logger.isTraceEnabled()) {
            ContextConfiguration contextConfiguration = clazz.getAnnotation(annotationType);
            logger.trace("Using default ContextLoader class [" + defaultContextLoaderClassName + "] for @ContextConfiguration [" + contextConfiguration + "] and class [" + clazz + "]");
        }
        return (Class<? extends ContextLoader>) ContextLoaderUtils.class.getClassLoader().loadClass(defaultContextLoaderClassName);
    } catch (ClassNotFoundException ex) {
        throw new IllegalStateException("Could not load default ContextLoader class [" + defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' " + "attribute or make the default loader class available.");
    }
}||||||||/**
 * Resolves the {@link ContextLoader} {@link Class} to use for the supplied
 * {@link Class test class}.
 *
 * <ol>
 * <li>If the {@link ContextConfiguration#loader() loader} attribute of
 * {@link ContextConfiguration &#064;ContextConfiguration} is configured
 * with an explicit class, that class will be returned.</li>
 * <li>If a <code>loader</code> class is not specified, the class hierarchy
 * will be traversed to find a parent class annotated with
 * <code>&#064;ContextConfiguration</code>; go to step #1.</li>
 * <li>If no explicit <code>loader</code> class is found after traversing
 * the class hierarchy, an attempt will be made to load and return the class
 * with the supplied <code>defaultContextLoaderClassName</code>.</li>
 * </ol>
 *
 * @param testClass the class for which to resolve the <code>ContextLoader</code>
 * class; must not be <code>null</code>
 * @param configAttributesList TODO Document parameter
 * @param defaultContextLoaderClassName the name of the default
 * <code>ContextLoader</code> class to use; must not be <code>null</code> or empty
 *
 * @return the <code>ContextLoader</code> class to use for the specified class
 * (never <code>null</code>)
 * @throws IllegalArgumentException if {@link ContextConfiguration
 * &#064;ContextConfiguration} is not <em>present</em> on the supplied class
 */
@SuppressWarnings("unchecked")
static Class<? extends ContextLoader> resolveContextLoaderClass(Class<?> testClass, List<ContextConfigurationAttributes> configAttributesList, String defaultContextLoaderClassName) {
    Assert.notNull(testClass, "Class must not be null");
    Assert.notEmpty(configAttributesList, "ContextConfigurationAttributes list must not be null or empty");
    Assert.hasText(defaultContextLoaderClassName, "Default ContextLoader class name must not be null or empty");
    for (ContextConfigurationAttributes configAttributes : configAttributesList) {
        if (logger.isTraceEnabled()) {
            logger.trace(String.format("Processing ContextLoader for context configuration attributes [%s] and test class [%s]", configAttributes, testClass));
        }
        Class<? extends ContextLoader> contextLoaderClass = configAttributes.getContextLoaderClass();
        if (!ContextLoader.class.equals(contextLoaderClass)) {
            if (logger.isDebugEnabled()) {
                logger.debug(String.format("Found explicit ContextLoader class [%s] for context configuration attributes [%s] and test class [%s]", contextLoaderClass, configAttributes, testClass));
            }
            return contextLoaderClass;
        }
    }
    try {
        if (logger.isTraceEnabled()) {
            logger.trace(String.format("Using default ContextLoader class [%s] for test class [%s]", defaultContextLoaderClassName, testClass));
        }
        return (Class<? extends ContextLoader>) ContextLoaderUtils.class.getClassLoader().loadClass(defaultContextLoaderClassName);
    } catch (ClassNotFoundException ex) {
        throw new IllegalStateException("Could not load default ContextLoader class [" + defaultContextLoaderClassName + "]. Specify @ContextConfiguration's 'loader' " + "attribute or make the default loader class available.");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(ClassExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
															)
															StringLiteralExpr
														)
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(ClassExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)

