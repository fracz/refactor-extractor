@Test
public void shouldNotSupportClassHavingOnlyVoidReturningSetter() throws IntrospectionException {
    @SuppressWarnings("unused")
    class C {

        public void setFoo(String s) {
        }
    }
    assertThat(factory.supports(C.class), is(false));
}||||||||@Test
public void shouldNotSupportClassHavingOnlyVoidReturningSetter() throws IntrospectionException {
    @SuppressWarnings("unused")
    class C {

        public void setFoo(String s) {
        }
    }
    assertThat(factory.getBeanInfo(C.class), nullValue());
}||||||||(MethodDeclaration
	(BlockStmt
		(LocalClassDeclarationStmt
			(ClassOrInterfaceDeclaration
				(MethodDeclaration
					(BlockStmt
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				(SingleMemberAnnotationExpr
					StringLiteralExpr
					Name
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(LocalClassDeclarationStmt
			(ClassOrInterfaceDeclaration
				(MethodDeclaration
					(BlockStmt
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				(SingleMemberAnnotationExpr
					StringLiteralExpr
					Name
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

