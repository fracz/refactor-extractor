/**
 * Route to the given router function if the given request predicate applies. This method can be
 * used to create <strong>nested routes</strong>, where a group of routes share a common path
 * (prefix), header, or other request predicate.
 * <p>For instance, the following example first creates a composed route that resolves to
 * {@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets
 * nested with a "/user" path predicate, so that GET requests for "/user" will list users,
 * and POST request for "/user" will create a new user.
 * <pre class="code">
 * RouterFunction&lt;ServerResponse&gt; userRoutes =
 * RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)
 * .andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser);
 *
 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
 * RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes);
 * </pre>
 * @param predicate the predicate to test
 * @param routerFunction the nested router function to delegate to if the predicate applies
 * @param <T> the type of response returned by the handler function
 * @return a router function that routes to {@code routerFunction} if
 * {@code predicate} evaluates to {@code true}
 * @see RequestPredicates
 */
public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, RouterFunction<T> routerFunction) {
    Assert.notNull(predicate, "'predicate' must not be null");
    Assert.notNull(routerFunction, "'routerFunction' must not be null");
    return request -> {
        if (predicate.test(request)) {
            ServerRequest subRequest = predicate.subRequest(request);
            return routerFunction.route(subRequest);
        } else {
            return Mono.empty();
        }
    };
}||||||||/**
 * Route to the given router function if the given request predicate applies. This method can be
 * used to create <strong>nested routes</strong>, where a group of routes share a common path
 * (prefix), header, or other request predicate.
 * <p>For instance, the following example first creates a composed route that resolves to
 * {@code listUsers} for a GET, and {@code createUser} for a POST. This composed route then gets
 * nested with a "/user" path predicate, so that GET requests for "/user" will list users,
 * and POST request for "/user" will create a new user.
 * <pre class="code">
 * RouterFunction&lt;ServerResponse&gt; userRoutes =
 * RouterFunctions.route(RequestPredicates.method(HttpMethod.GET), this::listUsers)
 * .andRoute(RequestPredicates.method(HttpMethod.POST), this::createUser);
 *
 * RouterFunction&lt;ServerResponse&gt; nestedRoute =
 * RouterFunctions.nest(RequestPredicates.path("/user"),userRoutes);
 * </pre>
 * @param predicate the predicate to test
 * @param routerFunction the nested router function to delegate to if the predicate applies
 * @param <T> the type of response returned by the handler function
 * @return a router function that routes to {@code routerFunction} if
 * {@code predicate} evaluates to {@code true}
 * @see RequestPredicates
 */
public static <T extends ServerResponse> RouterFunction<T> nest(RequestPredicate predicate, RouterFunction<T> routerFunction) {
    Assert.notNull(predicate, "'predicate' must not be null");
    Assert.notNull(routerFunction, "'routerFunction' must not be null");
    return request -> {
        if (predicate.test(request)) {
            if (logger.isDebugEnabled()) {
                logger.debug(String.format("Nested predicate \"%s\" matches against \"%s\"", predicate, request));
            }
            ServerRequest subRequest = predicate.nestRequest(request);
            return routerFunction.route(subRequest);
        } else {
            return Mono.empty();
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(LambdaExpr
				(BlockStmt
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ReturnStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(UnknownType
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(LambdaExpr
				(BlockStmt
					(IfStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ReturnStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(UnknownType
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

