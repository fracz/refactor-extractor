@Override
protected void parseInternal() throws SAXException, XMLStreamException {
    boolean documentStarted = false;
    boolean documentEnded = false;
    int elementDepth = 0;
    int eventType = reader.getEventType();
    while (true) {
        if (eventType != XMLStreamConstants.START_DOCUMENT && eventType != XMLStreamConstants.END_DOCUMENT && !documentStarted) {
            handleStartDocument();
            documentStarted = true;
        }
        switch(eventType) {
            case XMLStreamConstants.START_ELEMENT:
                elementDepth++;
                handleStartElement();
                break;
            case XMLStreamConstants.END_ELEMENT:
                elementDepth--;
                if (elementDepth >= 0) {
                    handleEndElement();
                }
                break;
            case XMLStreamConstants.PROCESSING_INSTRUCTION:
                handleProcessingInstruction();
                break;
            case XMLStreamConstants.CHARACTERS:
            case XMLStreamConstants.SPACE:
            case XMLStreamConstants.CDATA:
                handleCharacters();
                break;
            case XMLStreamConstants.START_DOCUMENT:
                setLocator(reader.getLocation());
                handleStartDocument();
                documentStarted = true;
                break;
            case XMLStreamConstants.END_DOCUMENT:
                handleEndDocument();
                documentEnded = true;
                break;
            case XMLStreamConstants.COMMENT:
                handleComment();
                break;
            case XMLStreamConstants.DTD:
                handleDtd();
                break;
            case XMLStreamConstants.ENTITY_REFERENCE:
                handleEntityReference();
                break;
        }
        if (reader.hasNext() && elementDepth >= 0) {
            eventType = reader.next();
        } else {
            break;
        }
    }
    if (!documentEnded) {
        handleEndDocument();
    }
}||||||||@Override
protected void parseInternal() throws SAXException, XMLStreamException {
    boolean documentStarted = false;
    boolean documentEnded = false;
    int elementDepth = 0;
    int eventType = reader.getEventType();
    while (true) {
        if (eventType != XMLStreamConstants.START_DOCUMENT && eventType != XMLStreamConstants.END_DOCUMENT && !documentStarted) {
            handleStartDocument();
            documentStarted = true;
        }
        switch(eventType) {
            case XMLStreamConstants.START_ELEMENT:
                elementDepth++;
                handleStartElement();
                break;
            case XMLStreamConstants.END_ELEMENT:
                elementDepth--;
                if (elementDepth >= 0) {
                    handleEndElement();
                }
                break;
            case XMLStreamConstants.PROCESSING_INSTRUCTION:
                handleProcessingInstruction();
                break;
            case XMLStreamConstants.CHARACTERS:
            case XMLStreamConstants.SPACE:
            case XMLStreamConstants.CDATA:
                handleCharacters();
                break;
            case XMLStreamConstants.START_DOCUMENT:
                handleStartDocument();
                documentStarted = true;
                break;
            case XMLStreamConstants.END_DOCUMENT:
                handleEndDocument();
                documentEnded = true;
                break;
            case XMLStreamConstants.COMMENT:
                handleComment();
                break;
            case XMLStreamConstants.DTD:
                handleDtd();
                break;
            case XMLStreamConstants.ENTITY_REFERENCE:
                handleEntityReference();
                break;
        }
        if (reader.hasNext() && elementDepth >= 0) {
            eventType = reader.next();
        } else {
            break;
        }
    }
    if (!documentEnded) {
        handleEndDocument();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

