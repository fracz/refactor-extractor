/**
 * Provides a {@link RequestMappingInfo} for the given method. <p>Only {@link RequestMapping @RequestMapping}-annotated
 * methods are considered. Type-level {@link RequestMapping @RequestMapping} annotations are also detected and their
 * attributes combined with method-level {@link RequestMapping @RequestMapping} attributes.
 *
 * @param method the method to create a mapping for
 * @param handlerType the actual handler type, possibly a sub-type of {@code method.getDeclaringClass()}
 * @return the mapping, or {@code null}
 * @see RequestMappingInfo#combine(RequestMappingInfo, PathMatcher)
 */
@Override
protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {
    RequestMapping annotation = AnnotationUtils.findAnnotation(method, RequestMapping.class);
    if (annotation != null) {
        RequestMappingInfo methodMapping = createFromRequestMapping(annotation);
        RequestMapping typeAnnot = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);
        if (typeAnnot != null) {
            RequestMappingInfo typeMapping = createFromRequestMapping(typeAnnot);
            return typeMapping.combine(methodMapping, getPathMatcher());
        } else {
            return methodMapping;
        }
    } else {
        return null;
    }
}||||||||/**
 * Provides a {@link RequestMappingInfo} for the given method. <p>Only {@link RequestMapping @RequestMapping}-annotated
 * methods are considered. Type-level {@link RequestMapping @RequestMapping} annotations are also detected and their
 * attributes combined with method-level {@link RequestMapping @RequestMapping} attributes.
 *
 * @param method the method to create a mapping for
 * @param handlerType the actual handler type, possibly a sub-type of {@code method.getDeclaringClass()}
 * @return the mapping, or {@code null}
 * @see RequestMappingInfo#combine(RequestMappingInfo, PathMatcher)
 */
@Override
protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {
    RequestMapping annotation = AnnotationUtils.findAnnotation(method, RequestMapping.class);
    if (annotation != null) {
        RequestMappingInfo methodMapping = createFromRequestMapping(annotation);
        RequestMapping typeAnnot = AnnotationUtils.findAnnotation(handlerType, RequestMapping.class);
        if (typeAnnot != null) {
            RequestMappingInfo typeMapping = createFromRequestMapping(typeAnnot);
            return typeMapping.combine(methodMapping);
        } else {
            return methodMapping;
        }
    } else {
        return null;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

