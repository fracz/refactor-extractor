/**
 * Checks if any of the patterns match the given request and returns an instance
 * that is guaranteed to contain matching patterns, sorted via
 * {@link PathMatcher#getPatternComparator(String)}.
 * <p>A matching pattern is obtained by making checks in the following order:
 * <ul>
 * <li>Direct match
 * <li>Pattern match with ".*" appended if the pattern doesn't already contain a "."
 * <li>Pattern match
 * <li>Pattern match with "/" appended if the pattern doesn't already end in "/"
 * </ul>
 * @param exchange the current exchange
 * @return the same instance if the condition contains no patterns;
 * or a new condition with sorted matching patterns;
 * or {@code null} if no patterns match.
 */
@Override
public PatternsRequestCondition getMatchingCondition(ServerWebExchange exchange) {
    if (this.patterns.isEmpty()) {
        return this;
    }
    String lookupPath = this.pathHelper.getLookupPathForRequest(exchange);
    List<String> matches = getMatchingPatterns(lookupPath);
    return matches.isEmpty() ? null : new PatternsRequestCondition(matches, this.pathHelper, this.pathMatcher, this.useSuffixPatternMatch, this.useTrailingSlashMatch, this.fileExtensions);
}||||||||/**
 * Checks if any of the patterns match the given request and returns an instance
 * that is guaranteed to contain matching patterns, sorted via
 * {@link PathMatcher#getPatternComparator(String)}.
 * <p>A matching pattern is obtained by making checks in the following order:
 * <ul>
 * <li>Direct match
 * <li>Pattern match with ".*" appended if the pattern doesn't already contain a "."
 * <li>Pattern match
 * <li>Pattern match with "/" appended if the pattern doesn't already end in "/"
 * </ul>
 * @param exchange the current exchange
 * @return the same instance if the condition contains no patterns;
 * or a new condition with sorted matching patterns;
 * or {@code null} if no patterns match.
 */
@Override
public PatternsRequestCondition getMatchingCondition(ServerWebExchange exchange) {
    if (this.patternRegistry.getPatterns().isEmpty()) {
        return this;
    }
    String lookupPath = this.pathHelper.getLookupPathForRequest(exchange);
    SortedSet<PathPattern> matches = getMatchingPatterns(lookupPath);
    if (!matches.isEmpty()) {
        PathPatternRegistry registry = new PathPatternRegistry();
        registry.addAll(matches);
        return new PatternsRequestCondition(registry, this.pathHelper);
    }
    return null;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				NullLiteralExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

