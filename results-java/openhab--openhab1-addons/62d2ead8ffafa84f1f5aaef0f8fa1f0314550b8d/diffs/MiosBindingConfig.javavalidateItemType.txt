/**
 * Validate the Item's data type against the BindingConfig.
 *
 * If this validation fails, then a BindingConfigParseException is thrown.
 * By default, this method will succeed if the Item is a StringItem,
 * NumberItem, SwitchItem, DimmerItem, ContactItem.
 *
 * Subclasses can augment this behavior or replace it, so that Bindings can
 * reconfigure their support for Item Types.
 *
 * @param item
 * the Item that requiring validation.
 * @exception BindingConfigParseException
 */
public void validateItemType(Item item) throws BindingConfigParseException {
    if (!(item instanceof StringItem) && !(item instanceof SwitchItem) && !(item instanceof DimmerItem) && !(item instanceof NumberItem) && !(item instanceof ContactItem) && !(item instanceof DateTimeItem)) {
        throw new BindingConfigParseException("item '" + item.getName() + "' is of type '" + item.getClass().getSimpleName() + "', but only String, Switch, Dimmer and Number items are allowed.");
    }
}||||||||/**
 * Validate the Item's data type against the <code>BindingConfig</code>.
 * <p>
 *
 * If this validation fails, then a <code>BindingConfigParseException</code>
 * is thrown. By default, this method will succeed if the Item is a
 * <code>StringItem</code>, <code>NumberItem</code>, <code>SwitchItem</code>
 * , <code>DimmerItem</code>, <code>ContactItem</code>,
 * <code>DataTimeItem</code>.
 * <p>
 * Subclasses can augment this behavior or replace it, so that Bindings can
 * reconfigure their support for Item Types.
 *
 * @param item
 * the Item that requiring validation.
 * @exception BindingConfigParseException
 * when the validation of the <code>BindingConfig</code>
 * fails for the Item.
 */
public void validateItemType(Item item) throws BindingConfigParseException {
    Class<? extends Item> t = getItemType();
    if (!((t == StringItem.class) || (t == SwitchItem.class) || (t == DimmerItem.class) || (t == NumberItem.class) || (t == ContactItem.class) || (t == DateTimeItem.class))) {
        throw new BindingConfigParseException(String.format("Item %s is of type %s, but only String, Switch, Dimmer, Number, Contact and DataTime Items are allowed.", item.getName(), item.getClass().getSimpleName()));
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(UnaryExpr
									(EnclosedExpr
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(UnaryExpr
									(EnclosedExpr
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(UnaryExpr
								(EnclosedExpr
									(InstanceOfExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(UnaryExpr
							(EnclosedExpr
								(InstanceOfExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(UnaryExpr
					(EnclosedExpr
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(MethodCallExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

