@Override
public void writeIndexingBuffer() throws EngineException {
    // since it flushes the index as well (though, in terms of concurrency, we are allowed to do it)
    try (ReleasableLock lock = readLock.acquire()) {
        ensureOpen();
        // TODO: it's not great that we secretly tie searcher visibility to "freeing up heap" here... really we should keep two
        // searcher managers, one for searching which is only refreshed by the schedule the user requested (refresh_interval, or invoking
        // refresh API), and another for version map interactions.  See #15768.
        final long versionMapBytes = versionMap.ramBytesUsedForRefresh();
        final long indexingBufferBytes = indexWriter.ramBytesUsed();
        final boolean useRefresh = versionMapRefreshPending.get() || (indexingBufferBytes / 4 < versionMapBytes);
        if (useRefresh) {
            // The version map is using > 25% of the indexing buffer, so we do a refresh so the version map also clears
            logger.debug("use refresh to write indexing buffer (heap size=[{}]), to also clear version map (heap size=[{}])", new ByteSizeValue(indexingBufferBytes), new ByteSizeValue(versionMapBytes));
            refresh("write indexing buffer");
        } else {
            // Most of our heap is used by the indexing buffer, so we do a cheaper (just writes segments, doesn't open a new searcher) IW.flush:
            logger.debug("use IndexWriter.flush to write indexing buffer (heap size=[{}]) since version map is small (heap size=[{}])", new ByteSizeValue(indexingBufferBytes), new ByteSizeValue(versionMapBytes));
            indexWriter.flush();
        }
    } catch (AlreadyClosedException e) {
        ensureOpen();
        maybeFailEngine("writeIndexingBuffer", e);
    } catch (EngineClosedException e) {
        throw e;
    } catch (Exception e) {
        try {
            failEngine("writeIndexingBuffer failed", e);
        } catch (Exception inner) {
            e.addSuppressed(inner);
        }
        throw new RefreshFailedEngineException(shardId, e);
    }
}||||||||@Override
public void writeIndexingBuffer() throws EngineException {
    // since it flushes the index as well (though, in terms of concurrency, we are allowed to do it)
    try (ReleasableLock lock = readLock.acquire()) {
        ensureOpen();
        // TODO: it's not great that we secretly tie searcher visibility to "freeing up heap" here... really we should keep two
        // searcher managers, one for searching which is only refreshed by the schedule the user requested (refresh_interval, or invoking
        // refresh API), and another for version map interactions.  See #15768.
        final long versionMapBytes = versionMap.ramBytesUsedForRefresh();
        final long indexingBufferBytes = indexWriter.ramBytesUsed();
        final boolean useRefresh = versionMapRefreshPending.get() || (indexingBufferBytes / 4 < versionMapBytes);
        if (useRefresh) {
            // The version map is using > 25% of the indexing buffer, so we do a refresh so the version map also clears
            logger.debug("use refresh to write indexing buffer (heap size=[{}]), to also clear version map (heap size=[{}])", new ByteSizeValue(indexingBufferBytes), new ByteSizeValue(versionMapBytes));
            refresh("write indexing buffer");
        } else {
            // Most of our heap is used by the indexing buffer, so we do a cheaper (just writes segments, doesn't open a new searcher) IW.flush:
            logger.debug("use IndexWriter.flush to write indexing buffer (heap size=[{}]) since version map is small (heap size=[{}])", new ByteSizeValue(indexingBufferBytes), new ByteSizeValue(versionMapBytes));
            indexWriter.flush();
        }
    } catch (AlreadyClosedException e) {
        failOnTragicEvent(e);
        throw e;
    } catch (EngineClosedException e) {
        throw e;
    } catch (Exception e) {
        try {
            failEngine("writeIndexingBuffer failed", e);
        } catch (Exception inner) {
            e.addSuppressed(inner);
        }
        throw new RefreshFailedEngineException(shardId, e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						NameExpr
							SimpleName
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ThrowStmt
						NameExpr
							SimpleName
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						NameExpr
							SimpleName
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

