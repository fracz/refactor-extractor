/**
 * Marks the shard with the provided allocation ID as in-sync with the primary shard. This method will block until the local checkpoint
 * on the specified shard advances above the current global checkpoint.
 *
 * @param allocationId    the allocation ID of the shard to mark as in-sync
 * @param localCheckpoint the current local checkpoint on the shard
 *
 * @throws InterruptedException if the thread is interrupted waiting for the local checkpoint on the shard to advance
 */
public synchronized void markAllocationIdAsInSync(final String allocationId, final long localCheckpoint) throws InterruptedException {
    if (sealed) {
        throw new IllegalStateException("global checkpoint tracker is sealed");
    }
    if (!trackingLocalCheckpoints.containsKey(allocationId)) {
        /*
             * This can happen if the recovery target has been failed and the cluster state update from the master has triggered removing
             * this allocation ID from the tracking map but this recovery thread has not yet been made aware that the recovery is
             * cancelled.
             */
        return;
    }
    updateLocalCheckpoint(allocationId, localCheckpoint, trackingLocalCheckpoints, "tracking");
    if (!pendingInSync.add(allocationId)) {
        throw new IllegalStateException("there is already a pending sync in progress for allocation ID [" + allocationId + "]");
    }
    try {
        waitForAllocationIdToBeInSync(allocationId);
    } finally {
        pendingInSync.remove(allocationId);
        updateGlobalCheckpointOnPrimary();
    }
}||||||||/**
 * Marks the shard with the provided allocation ID as in-sync with the primary shard. This method will block until the local checkpoint
 * on the specified shard advances above the current global checkpoint.
 *
 * @param allocationId    the allocation ID of the shard to mark as in-sync
 * @param localCheckpoint the current local checkpoint on the shard
 */
public synchronized void markAllocationIdAsInSync(final String allocationId, final long localCheckpoint) throws InterruptedException {
    assert invariant();
    assert primaryMode;
    assert handoffInProgress == false;
    LocalCheckpointState lcps = localCheckpoints.get(allocationId);
    if (lcps == null) {
        // can happen if replica was removed from cluster but recovery process is unaware of it yet
        throw new IllegalStateException("no local checkpoint tracking information available for " + allocationId);
    }
    assert localCheckpoint >= SequenceNumbersService.NO_OPS_PERFORMED : "expected known local checkpoint for " + allocationId + " but was " + localCheckpoint;
    assert pendingInSync.contains(allocationId) == false : "shard copy " + allocationId + " is already marked as pending in-sync";
    updateLocalCheckpoint(allocationId, lcps, localCheckpoint);
    // stuck from advancing
    assert !lcps.inSync || (lcps.localCheckpoint >= globalCheckpoint) : "shard copy " + allocationId + " that's already in-sync should have a local checkpoint " + lcps.localCheckpoint + " that's above the global checkpoint " + globalCheckpoint;
    if (lcps.localCheckpoint < globalCheckpoint) {
        pendingInSync.add(allocationId);
        try {
            while (true) {
                if (pendingInSync.contains(allocationId)) {
                    waitForLocalCheckpointToAdvance();
                } else {
                    break;
                }
            }
        } finally {
            pendingInSync.remove(allocationId);
        }
    } else {
        lcps.inSync = true;
        logger.trace("marked [{}] as in-sync", allocationId);
        updateGlobalCheckpointOnPrimary();
    }
    assert invariant();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BlockComment
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(AssertStmt
			NameExpr
				SimpleName
		)
		(AssertStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
		)
		(AssertStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				NameExpr
					SimpleName
			)
		)
		(AssertStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
				)
			)
			(BinaryExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				StringLiteralExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(AssertStmt
			(BinaryExpr
				(UnaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(TryStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(WhileStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(BreakStmt
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
											)
										)
									)
								)
							)
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
		)
		(AssertStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

