/**
 * Completes the relocation. Operations are blocked and current operations are drained before changing state to relocated. The provided
 * {@link Runnable} is executed after all operations are successfully blocked.
 *
 * @param reason    the reason for the relocation
 * @param consumer a {@link Runnable} that is executed after operations are blocked
 * @throws IllegalIndexShardStateException if the shard is not relocating due to concurrent cancellation
 * @throws InterruptedException            if blocking operations is interrupted
 */
public void relocated(final String reason, final Consumer<PrimaryContext> consumer) throws IllegalIndexShardStateException, InterruptedException {
    assert shardRouting.primary() : "only primaries can be marked as relocated: " + shardRouting;
    try {
        indexShardOperationPermits.blockOperations(30, TimeUnit.MINUTES, () -> {
            // no shard operation permits are being held here, move state from started to relocated
            assert indexShardOperationPermits.getActiveOperationsCount() == 0 : "in-flight operations in progress while moving shard state to relocated";
            /*
                 * We should not invoke the runnable under the mutex as the expected implementation is to handoff the primary context via a
                 * network operation. Doing this under the mutex can implicitly block the cluster state update thread on network operations.
                 */
            verifyRelocatingState();
            final PrimaryContext primaryContext = getEngine().seqNoService().primaryContext();
            try {
                consumer.accept(primaryContext);
                synchronized (mutex) {
                    verifyRelocatingState();
                    changeState(IndexShardState.RELOCATED, reason);
                }
            } catch (final Exception e) {
                try {
                    getEngine().seqNoService().releasePrimaryContext();
                } catch (final Exception inner) {
                    e.addSuppressed(inner);
                }
                throw e;
            }
        });
    } catch (TimeoutException e) {
        logger.warn("timed out waiting for relocation hand-off to complete");
        // This is really bad as ongoing replication operations are preventing this shard from completing relocation hand-off.
        // Fail primary relocation source and target shards.
        failShard("timed out waiting for relocation hand-off to complete", null);
        throw new IndexShardClosedException(shardId(), "timed out waiting for relocation hand-off to complete");
    }
}||||||||/**
 * Completes the relocation. Operations are blocked and current operations are drained before changing state to relocated. The provided
 * {@link Runnable} is executed after all operations are successfully blocked.
 *
 * @param reason    the reason for the relocation
 * @param consumer a {@link Runnable} that is executed after operations are blocked
 * @throws IllegalIndexShardStateException if the shard is not relocating due to concurrent cancellation
 * @throws InterruptedException            if blocking operations is interrupted
 */
public void relocated(final String reason, final Consumer<GlobalCheckpointTracker.PrimaryContext> consumer) throws IllegalIndexShardStateException, InterruptedException {
    assert shardRouting.primary() : "only primaries can be marked as relocated: " + shardRouting;
    try {
        indexShardOperationPermits.blockOperations(30, TimeUnit.MINUTES, () -> {
            // no shard operation permits are being held here, move state from started to relocated
            assert indexShardOperationPermits.getActiveOperationsCount() == 0 : "in-flight operations in progress while moving shard state to relocated";
            /*
                 * We should not invoke the runnable under the mutex as the expected implementation is to handoff the primary context via a
                 * network operation. Doing this under the mutex can implicitly block the cluster state update thread on network operations.
                 */
            verifyRelocatingState();
            final GlobalCheckpointTracker.PrimaryContext primaryContext = getEngine().seqNoService().startRelocationHandoff();
            try {
                consumer.accept(primaryContext);
                synchronized (mutex) {
                    verifyRelocatingState();
                    changeState(IndexShardState.RELOCATED, reason);
                }
                getEngine().seqNoService().completeRelocationHandoff();
            } catch (final Exception e) {
                try {
                    getEngine().seqNoService().abortRelocationHandoff();
                } catch (final Exception inner) {
                    e.addSuppressed(inner);
                }
                throw e;
            }
        });
    } catch (TimeoutException e) {
        logger.warn("timed out waiting for relocation hand-off to complete");
        // This is really bad as ongoing replication operations are preventing this shard from completing relocation hand-off.
        // Fail primary relocation source and target shards.
        failShard("timed out waiting for relocation hand-off to complete", null);
        throw new IndexShardClosedException(shardId(), "timed out waiting for relocation hand-off to complete");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BinaryExpr
				StringLiteralExpr
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NullLiteralExpr
							SimpleName
						)
						LineComment
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
							)
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(LambdaExpr
							(BlockStmt
								(AssertStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									StringLiteralExpr
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
									(BlockComment
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															(MethodCallExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																)
															)
														)
													)
												)
											)
											(ThrowStmt
												NameExpr
													SimpleName
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(SynchronizedStmt
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														SimpleName
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
														SimpleName
													)
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BinaryExpr
				StringLiteralExpr
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NullLiteralExpr
							SimpleName
						)
						LineComment
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
							)
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(LambdaExpr
							(BlockStmt
								(AssertStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									StringLiteralExpr
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
									(BlockComment
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															(MethodCallExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																)
															)
														)
													)
												)
											)
											(ThrowStmt
												NameExpr
													SimpleName
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(SynchronizedStmt
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														SimpleName
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
														SimpleName
													)
												)
											)
											NameExpr
												SimpleName
										)
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
											)
										)
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

