@Test
@Nightly
public void testPhraseBoundaryCases() throws IOException, URISyntaxException {
    CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS, // to get reliable statistics we should put this all into one shard
    1).put("index.analysis.analyzer.body.tokenizer", "standard").putArray("index.analysis.analyzer.body.filter", "lowercase").put("index.analysis.analyzer.bigram.tokenizer", "standard").putArray("index.analysis.analyzer.bigram.filter", "my_shingle", "lowercase").put("index.analysis.analyzer.ngram.tokenizer", "standard").putArray("index.analysis.analyzer.ngram.filter", "my_shingle2", "lowercase").put("index.analysis.analyzer.myDefAnalyzer.tokenizer", "standard").putArray("index.analysis.analyzer.myDefAnalyzer.filter", "shingle", "lowercase").put("index.analysis.filter.my_shingle.type", "shingle").put("index.analysis.filter.my_shingle.output_unigrams", false).put("index.analysis.filter.my_shingle.min_shingle_size", 2).put("index.analysis.filter.my_shingle.max_shingle_size", 2).put("index.analysis.filter.my_shingle2.type", "shingle").put("index.analysis.filter.my_shingle2.output_unigrams", true).put("index.analysis.filter.my_shingle2.min_shingle_size", 2).put("index.analysis.filter.my_shingle2.max_shingle_size", 2));
    XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store", "yes").field("termVector", "with_positions_offsets").endObject().startObject("properties").startObject("body").field("type", "string").field("analyzer", "body").endObject().startObject("bigram").field("type", "string").field("analyzer", "bigram").endObject().startObject("ngram").field("type", "string").field("analyzer", "ngram").endObject().endObject().endObject().endObject();
    assertAcked(builder.addMapping("type1", mapping));
    ensureGreen();
    for (String line : readMarvelHeroNames()) {
        index("test", "type1", line, "body", line, "bigram", line, "ngram", line);
    }
    refresh();
    NumShards numShards = getNumShards("test");
    // Lets make sure some things throw exceptions
    PhraseSuggestionBuilder phraseSuggestion = phraseSuggestion("simple_phrase").field("bigram").analyzer("body").addCandidateGenerator(candidateGenerator("does_not_exist").minWordLength(1).suggestMode("always")).realWordErrorLikelihood(0.95f).maxErrors(0.5f).size(1);
    try {
        searchSuggest("Xor the Got-Jewel", numShards.numPrimaries, phraseSuggestion);
        fail("field does not exists");
    } catch (SearchPhaseExecutionException e) {
    }
    phraseSuggestion.clearCandidateGenerators().analyzer(null);
    try {
        searchSuggest("Xor the Got-Jewel", numShards.numPrimaries, phraseSuggestion);
        fail("analyzer does only produce ngrams");
    } catch (SearchPhaseExecutionException e) {
    }
    phraseSuggestion.analyzer("bigram");
    try {
        searchSuggest("Xor the Got-Jewel", numShards.numPrimaries, phraseSuggestion);
        fail("analyzer does only produce ngrams");
    } catch (SearchPhaseExecutionException e) {
    }
    // Now we'll make sure some things don't
    phraseSuggestion.forceUnigrams(false);
    searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    // Field doesn't produce unigrams but the analyzer does
    phraseSuggestion.forceUnigrams(true).field("bigram").analyzer("ngram");
    searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    phraseSuggestion.field("ngram").analyzer("myDefAnalyzer").addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always"));
    Suggest suggest = searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    // "xorr the god jewel" and and "xorn the god jewel" have identical scores (we are only using unigrams to score), so we tie break by
    // earlier term (xorn):
    assertSuggestion(suggest, 0, "simple_phrase", "xorn the god jewel");
    phraseSuggestion.analyzer(null);
    suggest = searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    // In this case xorr has a better score than xorn because we set the field back to the default (my_shingle2) analyzer, so the
    // probability that the term is not in the dictionary but is NOT a misspelling is relatively high in this case compared to the
    // others that have no n-gram with the other terms in the phrase :) you can set this realWorldErrorLikelyhood
    assertSuggestion(suggest, 0, "simple_phrase", "xorr the god jewel");
}||||||||@Nightly
public void testPhraseBoundaryCases() throws IOException, URISyntaxException {
    CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS, // to get reliable statistics we should put this all into one shard
    1).put("index.analysis.analyzer.body.tokenizer", "standard").putArray("index.analysis.analyzer.body.filter", "lowercase").put("index.analysis.analyzer.bigram.tokenizer", "standard").putArray("index.analysis.analyzer.bigram.filter", "my_shingle", "lowercase").put("index.analysis.analyzer.ngram.tokenizer", "standard").putArray("index.analysis.analyzer.ngram.filter", "my_shingle2", "lowercase").put("index.analysis.analyzer.myDefAnalyzer.tokenizer", "standard").putArray("index.analysis.analyzer.myDefAnalyzer.filter", "shingle", "lowercase").put("index.analysis.filter.my_shingle.type", "shingle").put("index.analysis.filter.my_shingle.output_unigrams", false).put("index.analysis.filter.my_shingle.min_shingle_size", 2).put("index.analysis.filter.my_shingle.max_shingle_size", 2).put("index.analysis.filter.my_shingle2.type", "shingle").put("index.analysis.filter.my_shingle2.output_unigrams", true).put("index.analysis.filter.my_shingle2.min_shingle_size", 2).put("index.analysis.filter.my_shingle2.max_shingle_size", 2));
    XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store", "yes").field("termVector", "with_positions_offsets").endObject().startObject("properties").startObject("body").field("type", "string").field("analyzer", "body").endObject().startObject("bigram").field("type", "string").field("analyzer", "bigram").endObject().startObject("ngram").field("type", "string").field("analyzer", "ngram").endObject().endObject().endObject().endObject();
    assertAcked(builder.addMapping("type1", mapping));
    ensureGreen();
    for (String line : readMarvelHeroNames()) {
        index("test", "type1", line, "body", line, "bigram", line, "ngram", line);
    }
    refresh();
    NumShards numShards = getNumShards("test");
    // Lets make sure some things throw exceptions
    PhraseSuggestionBuilder phraseSuggestion = phraseSuggestion("simple_phrase").field("bigram").analyzer("body").addCandidateGenerator(candidateGenerator("does_not_exist").minWordLength(1).suggestMode("always")).realWordErrorLikelihood(0.95f).maxErrors(0.5f).size(1);
    try {
        searchSuggest("Xor the Got-Jewel", numShards.numPrimaries, phraseSuggestion);
        fail("field does not exists");
    } catch (SearchPhaseExecutionException e) {
    }
    phraseSuggestion.clearCandidateGenerators().analyzer(null);
    try {
        searchSuggest("Xor the Got-Jewel", numShards.numPrimaries, phraseSuggestion);
        fail("analyzer does only produce ngrams");
    } catch (SearchPhaseExecutionException e) {
    }
    phraseSuggestion.analyzer("bigram");
    try {
        searchSuggest("Xor the Got-Jewel", numShards.numPrimaries, phraseSuggestion);
        fail("analyzer does only produce ngrams");
    } catch (SearchPhaseExecutionException e) {
    }
    // Now we'll make sure some things don't
    phraseSuggestion.forceUnigrams(false);
    searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    // Field doesn't produce unigrams but the analyzer does
    phraseSuggestion.forceUnigrams(true).field("bigram").analyzer("ngram");
    searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    phraseSuggestion.field("ngram").analyzer("myDefAnalyzer").addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always"));
    Suggest suggest = searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    // "xorr the god jewel" and and "xorn the god jewel" have identical scores (we are only using unigrams to score), so we tie break by
    // earlier term (xorn):
    assertSuggestion(suggest, 0, "simple_phrase", "xorn the god jewel");
    phraseSuggestion.analyzer(null);
    suggest = searchSuggest("Xor the Got-Jewel", phraseSuggestion);
    // In this case xorr has a better score than xorn because we set the field back to the default (my_shingle2) analyzer, so the
    // probability that the term is not in the dictionary but is NOT a misspelling is relatively high in this case compared to the
    // others that have no n-gram with the other terms in the phrase :) you can set this realWorldErrorLikelyhood
    assertSuggestion(suggest, 0, "simple_phrase", "xorr the god jewel");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							(IntegerLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									(BooleanLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											(IntegerLiteralExpr
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													(BooleanLiteralExpr
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															StringLiteralExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																StringLiteralExpr
																SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	StringLiteralExpr
																	StringLiteralExpr
																	SimpleName
																	(MethodCallExpr
																		StringLiteralExpr
																		StringLiteralExpr
																		SimpleName
																		(MethodCallExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			SimpleName
																			(MethodCallExpr
																				StringLiteralExpr
																				StringLiteralExpr
																				SimpleName
																				(MethodCallExpr
																					StringLiteralExpr
																					StringLiteralExpr
																					SimpleName
																					(MethodCallExpr
																						StringLiteralExpr
																						StringLiteralExpr
																						SimpleName
																						(MethodCallExpr
																							NameExpr
																								SimpleName
																							(IntegerLiteralExpr
																								LineComment
																							)
																							SimpleName
																							(MethodCallExpr
																								(MethodCallExpr
																									SimpleName
																								)
																								SimpleName
																								(MethodCallExpr
																									SimpleName
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																	(MethodCallExpr
																		StringLiteralExpr
																		StringLiteralExpr
																		SimpleName
																		(MethodCallExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			SimpleName
																			(MethodCallExpr
																				StringLiteralExpr
																				SimpleName
																				(MethodCallExpr
																					StringLiteralExpr
																					SimpleName
																					(MethodCallExpr
																						SimpleName
																						(MethodCallExpr
																							StringLiteralExpr
																							StringLiteralExpr
																							SimpleName
																							(MethodCallExpr
																								StringLiteralExpr
																								StringLiteralExpr
																								SimpleName
																								(MethodCallExpr
																									StringLiteralExpr
																									SimpleName
																									(MethodCallExpr
																										StringLiteralExpr
																										SimpleName
																										(MethodCallExpr
																											SimpleName
																											(MethodCallExpr
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							(DoubleLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								(DoubleLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NullLiteralExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NullLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							(IntegerLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									(BooleanLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											(IntegerLiteralExpr
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													(BooleanLiteralExpr
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															StringLiteralExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																StringLiteralExpr
																SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	StringLiteralExpr
																	StringLiteralExpr
																	SimpleName
																	(MethodCallExpr
																		StringLiteralExpr
																		StringLiteralExpr
																		SimpleName
																		(MethodCallExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			SimpleName
																			(MethodCallExpr
																				StringLiteralExpr
																				StringLiteralExpr
																				SimpleName
																				(MethodCallExpr
																					StringLiteralExpr
																					StringLiteralExpr
																					SimpleName
																					(MethodCallExpr
																						StringLiteralExpr
																						StringLiteralExpr
																						SimpleName
																						(MethodCallExpr
																							NameExpr
																								SimpleName
																							(IntegerLiteralExpr
																								LineComment
																							)
																							SimpleName
																							(MethodCallExpr
																								(MethodCallExpr
																									SimpleName
																								)
																								SimpleName
																								(MethodCallExpr
																									SimpleName
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																	(MethodCallExpr
																		StringLiteralExpr
																		StringLiteralExpr
																		SimpleName
																		(MethodCallExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			SimpleName
																			(MethodCallExpr
																				StringLiteralExpr
																				SimpleName
																				(MethodCallExpr
																					StringLiteralExpr
																					SimpleName
																					(MethodCallExpr
																						SimpleName
																						(MethodCallExpr
																							StringLiteralExpr
																							StringLiteralExpr
																							SimpleName
																							(MethodCallExpr
																								StringLiteralExpr
																								StringLiteralExpr
																								SimpleName
																								(MethodCallExpr
																									StringLiteralExpr
																									SimpleName
																									(MethodCallExpr
																										StringLiteralExpr
																										SimpleName
																										(MethodCallExpr
																											SimpleName
																											(MethodCallExpr
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																										)
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							(DoubleLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								(DoubleLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NullLiteralExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NullLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

