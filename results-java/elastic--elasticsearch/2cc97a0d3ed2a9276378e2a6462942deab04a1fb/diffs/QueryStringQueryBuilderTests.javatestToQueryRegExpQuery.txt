@Test
public void testToQueryRegExpQuery() throws Exception {
    assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
    Query query = queryStringQuery("/foo*bar/").defaultField(STRING_FIELD_NAME).maxDeterminizedStates(5000).toQuery(createShardContext());
    assertThat(query, instanceOf(RegexpQuery.class));
    RegexpQuery regexpQuery = (RegexpQuery) query;
    assertTrue(regexpQuery.toString().contains("/foo*bar/"));
}||||||||public void testToQueryRegExpQuery() throws Exception {
    assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
    Query query = queryStringQuery("/foo*bar/").defaultField(STRING_FIELD_NAME).maxDeterminizedStates(5000).toQuery(createShardContext());
    assertThat(query, instanceOf(RegexpQuery.class));
    RegexpQuery regexpQuery = (RegexpQuery) query;
    assertTrue(regexpQuery.toString().contains("/foo*bar/"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

