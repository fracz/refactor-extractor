/**
 * test checks that we throw an {@link UnsupportedOperationException} if the query wrapped
 * by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}.
 * This is currently the case for {@link RangeQueryBuilder} when the target field is mapped
 * to a date.
 */
@Test
public void testUnsupportedInnerQueryType() throws IOException {
    QueryShardContext context = createShardContext();
    // test makes only sense if we have at least one type registered with date field mapping
    if (getCurrentTypes().length > 0 && context.fieldMapper(DATE_FIELD_NAME) != null) {
        try {
            RangeQueryBuilder query = new RangeQueryBuilder(DATE_FIELD_NAME);
            new SpanMultiTermQueryBuilder(query).toQuery(createShardContext());
            fail("Exception expected, range query on date fields should not generate a lucene " + MultiTermQuery.class.getName());
        } catch (UnsupportedOperationException e) {
            assert (e.getMessage().contains("unsupported inner query, should be " + MultiTermQuery.class.getName()));
        }
    }
}||||||||/**
 * test checks that we throw an {@link UnsupportedOperationException} if the query wrapped
 * by {@link SpanMultiTermQueryBuilder} does not generate a lucene {@link MultiTermQuery}.
 * This is currently the case for {@link RangeQueryBuilder} when the target field is mapped
 * to a date.
 */
public void testUnsupportedInnerQueryType() throws IOException {
    QueryShardContext context = createShardContext();
    // test makes only sense if we have at least one type registered with date field mapping
    if (getCurrentTypes().length > 0 && context.fieldMapper(DATE_FIELD_NAME) != null) {
        try {
            RangeQueryBuilder query = new RangeQueryBuilder(DATE_FIELD_NAME);
            new SpanMultiTermQueryBuilder(query).toQuery(createShardContext());
            fail("Exception expected, range query on date fields should not generate a lucene " + MultiTermQuery.class.getName());
        } catch (UnsupportedOperationException e) {
            assert (e.getMessage().contains("unsupported inner query, should be " + MultiTermQuery.class.getName()));
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(AssertStmt
								(EnclosedExpr
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(AssertStmt
								(EnclosedExpr
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

