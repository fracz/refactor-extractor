/**
 * Handles writing byte code for variable/method chains for all given possibilities
 * including String concatenation, compound assignment, regular assignment, and simple
 * reads.  Includes proper duplication for chained assignments and assignments that are
 * also read from.
 *
 * Example given 'x[0] += 5;' where x is an array of shorts and x[0] is 1.
 * Note this example has two links -- x (LVariable) and [0] (LBrace).
 * The following steps occur:
 * 1. call link{x}.write(...) -- no op [...]
 * 2. call link{x}.load(...) -- loads the address of the x array onto the stack [..., address(x)]
 * 3. call writer.dup(...) -- dup's the address of the x array onto the stack for later use with store [..., address(x), address(x)]
 * 4. call link{[0]}.write(...) -- load the array index value of the constant int 0 onto the stack [..., address(x), address(x), int(0)]
 * 5. call link{[0]}.load(...) -- load the short value from x[0] onto the stack [..., address(x), short(1)]
 * 6. call writer.writeCast(there) -- casts the short on the stack to an int so it can be added with the rhs [..., address(x), int(1)]
 * 7. call expression.write(...) -- puts the expression's value of the constant int 5 onto the stack [..., address(x), int(1), int(5)]
 * 8. call writer.writeBinaryInstruction(operation) -- writes the int addition instruction [..., address(x), int(6)]
 * 9. call writer.writeCast(back) -- convert the value on the stack back into a short [..., address(x), short(6)]
 * 10. call link{[0]}.store(...) -- store the value on the stack into the 0th index of the array x [...]
 */
@Override
void write(MethodWriter writer, Globals globals) {
    writer.writeDebugInfo(location);
    // For the case where the chain represents a String concatenation
    // we must, depending on the Java version, write a StringBuilder or
    // track types going onto the stack.  This must be done before the
    // links in the chain are read because we need the StringBuilder to
    // be placed on the stack ahead of any potential concatenation arguments.
    int catElementStackSize = 0;
    if (cat) {
        catElementStackSize = writer.writeNewStrings();
    }
    ALink last = links.get(links.size() - 1);
    // write, load, and store methods do.
    for (ALink link : links) {
        // call the write method on the link to prepare for a load/store operation
        link.write(writer, globals);
        if (link == last && link.store) {
            if (cat) {
                // Handle the case where we are doing a compound assignment
                // representing a String concatenation.
                // dup the top element and insert it before concat helper on stack
                writer.writeDup(link.size, catElementStackSize);
                // read the current link's value
                link.load(writer, globals);
                // append the link's value using the StringBuilder
                writer.writeAppendStrings(link.after);
                // write the bytecode for the rhs expression
                expression.write(writer, globals);
                if (!(expression instanceof EBinary) || ((EBinary) expression).operation != Operation.ADD || expression.actual.sort != Sort.STRING) {
                    // append the expression's value unless it's also a concatenation
                    writer.writeAppendStrings(expression.actual);
                }
                // put the value for string concat onto the stack
                writer.writeToStrings();
                // if necessary, cast the String to the lhs actual type
                writer.writeCast(back);
                if (link.load) {
                    // if this link is also read from dup the value onto the stack
                    writer.writeDup(link.after.sort.size, link.size);
                }
                // store the link's value from the stack in its respective variable/field/array
                link.store(writer, globals);
            } else if (operation != null) {
                // Handle the case where we are doing a compound assignment that
                // does not represent a String concatenation.
                // if necessary, dup the previous link's value to be both loaded from and stored to
                writer.writeDup(link.size, 0);
                // load the current link's value
                link.load(writer, globals);
                if (link.load && post) {
                    // dup the value if the link is also
                    writer.writeDup(link.after.sort.size, link.size);
                // read from and is a post increment
                }
                // if necessary cast the current link's value
                writer.writeCast(there);
                // to the promotion type between the lhs and rhs types
                // write the bytecode for the rhs expression
                expression.write(writer, globals);
                // write the operation instruction for compound assignment
                if (promote.sort == Sort.DEF) {
                    writer.writeDynamicBinaryInstruction(location, promote, Definition.DEF_TYPE, Definition.DEF_TYPE, operation, true);
                } else {
                    writer.writeBinaryInstruction(location, promote, operation);
                }
                // if necessary cast the promotion type value back to the link's type
                writer.writeCast(back);
                if (link.load && !post) {
                    // dup the value if the link is also
                    writer.writeDup(link.after.sort.size, link.size);
                // read from and is not a post increment
                }
                // store the link's value from the stack in its respective variable/field/array
                link.store(writer, globals);
            } else {
                // Handle the case for a simple write.
                // write the bytecode for the rhs expression
                expression.write(writer, globals);
                if (link.load) {
                    // dup the value if the link is also read from
                    writer.writeDup(link.after.sort.size, link.size);
                }
                // store the link's value from the stack in its respective variable/field/array
                link.store(writer, globals);
            }
        } else {
            // Handle the case for a simple read.
            // read the link's value onto the stack
            link.load(writer, globals);
        }
    }
    // if this is a branch node, write the bytecode to make an appropiate jump
    writer.writeBranch(tru, fals);
}||||||||/**
 * Handles writing byte code for variable/method chains for all given possibilities
 * including String concatenation, compound assignment, regular assignment, and simple
 * reads.  Includes proper duplication for chained assignments and assignments that are
 * also read from.
 *
 * Example given 'x[0] += 5;' where x is an array of shorts and x[0] is 1.
 * Note this example has two links -- x (LVariable) and [0] (LBrace).
 * The following steps occur:
 * 1. call link{x}.write(...) -- no op [...]
 * 2. call link{x}.load(...) -- loads the address of the x array onto the stack [..., address(x)]
 * 3. call writer.dup(...) -- dup's the address of the x array onto the stack for later use with store [..., address(x), address(x)]
 * 4. call link{[0]}.write(...) -- load the array index value of the constant int 0 onto the stack [..., address(x), address(x), int(0)]
 * 5. call link{[0]}.load(...) -- load the short value from x[0] onto the stack [..., address(x), short(1)]
 * 6. call writer.writeCast(there) -- casts the short on the stack to an int so it can be added with the rhs [..., address(x), int(1)]
 * 7. call expression.write(...) -- puts the expression's value of the constant int 5 onto the stack [..., address(x), int(1), int(5)]
 * 8. call writer.writeBinaryInstruction(operation) -- writes the int addition instruction [..., address(x), int(6)]
 * 9. call writer.writeCast(back) -- convert the value on the stack back into a short [..., address(x), short(6)]
 * 10. call link{[0]}.store(...) -- store the value on the stack into the 0th index of the array x [...]
 */
@Override
void write(MethodWriter writer, Globals globals) {
    writer.writeDebugInfo(location);
    // For the case where the chain represents a String concatenation
    // we must, depending on the Java version, write a StringBuilder or
    // track types going onto the stack.  This must be done before the
    // links in the chain are read because we need the StringBuilder to
    // be placed on the stack ahead of any potential concatenation arguments.
    int catElementStackSize = 0;
    if (cat) {
        catElementStackSize = writer.writeNewStrings();
    }
    ALink last = links.get(links.size() - 1);
    // write, load, and store methods do.
    for (ALink link : links) {
        // call the write method on the link to prepare for a load/store operation
        link.write(writer, globals);
        if (link == last && link.store) {
            if (cat) {
                // Handle the case where we are doing a compound assignment
                // representing a String concatenation.
                // dup the top element and insert it before concat helper on stack
                writer.writeDup(link.size, catElementStackSize);
                // read the current link's value
                link.load(writer, globals);
                // append the link's value using the StringBuilder
                writer.writeAppendStrings(link.after);
                // write the bytecode for the rhs expression
                expression.write(writer, globals);
                if (!(expression instanceof EBinary) || ((EBinary) expression).operation != Operation.ADD || expression.actual.sort != Sort.STRING) {
                    // append the expression's value unless it's also a concatenation
                    writer.writeAppendStrings(expression.actual);
                }
                // put the value for string concat onto the stack
                writer.writeToStrings();
                // if necessary, cast the String to the lhs actual type
                writer.writeCast(back);
                if (link.load) {
                    // if this link is also read from dup the value onto the stack
                    writer.writeDup(link.after.sort.size, link.size);
                }
                // store the link's value from the stack in its respective variable/field/array
                link.store(writer, globals);
            } else if (operation != null) {
                // Handle the case where we are doing a compound assignment that
                // does not represent a String concatenation.
                // if necessary, dup the previous link's value to be both loaded from and stored to
                writer.writeDup(link.size, 0);
                // load the current link's value
                link.load(writer, globals);
                if (link.load && post) {
                    // dup the value if the link is also
                    writer.writeDup(link.after.sort.size, link.size);
                // read from and is a post increment
                }
                // if necessary cast the current link's value
                writer.writeCast(there);
                // to the promotion type between the lhs and rhs types
                // write the bytecode for the rhs expression
                expression.write(writer, globals);
                // write the operation instruction for compound assignment
                if (promote.sort == Sort.DEF) {
                    writer.writeDynamicBinaryInstruction(location, promote, Definition.DEF_TYPE, Definition.DEF_TYPE, operation, DefBootstrap.OPERATOR_COMPOUND_ASSIGNMENT);
                } else {
                    writer.writeBinaryInstruction(location, promote, operation);
                }
                // if necessary cast the promotion type value back to the link's type
                writer.writeCast(back);
                if (link.load && !post) {
                    // dup the value if the link is also
                    writer.writeDup(link.after.sort.size, link.size);
                // read from and is not a post increment
                }
                // store the link's value from the stack in its respective variable/field/array
                link.store(writer, globals);
            } else {
                // Handle the case for a simple write.
                // write the bytecode for the rhs expression
                expression.write(writer, globals);
                if (link.load) {
                    // dup the value if the link is also read from
                    writer.writeDup(link.after.sort.size, link.size);
                }
                // store the link's value from the stack in its respective variable/field/array
                link.store(writer, globals);
            }
        } else {
            // Handle the case for a simple read.
            // read the link's value onto the stack
            link.load(writer, globals);
        }
    }
    // if this is a branch node, write the bytecode to make an appropiate jump
    writer.writeBranch(tru, fals);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											(UnaryExpr
												(EnclosedExpr
													(InstanceOfExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													(EnclosedExpr
														(CastExpr
															NameExpr
																SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(IfStmt
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											(UnaryExpr
												(EnclosedExpr
													(InstanceOfExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													(EnclosedExpr
														(CastExpr
															NameExpr
																SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(IfStmt
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

