/**
 * Looks up handle for a dynamic method call, with lambda replacement
 * <p>
 * A dynamic method call for variable {@code x} of type {@code def} looks like:
 * {@code x.method(args...)}
 * <p>
 * This method traverses {@code recieverClass}'s class hierarchy (including interfaces)
 * until it finds a matching whitelisted method. If one is not found, it throws an exception.
 * Otherwise it returns a handle to the matching method.
 * <p>
 * @param lookup caller's lookup
 * @param callSiteType callsite's type
 * @param receiverClass Class of the object to invoke the method on.
 * @param name Name of the method.
 * @param args bootstrap args passed to callsite
 * @return pointer to matching method to invoke. never returns null.
 * @throws IllegalArgumentException if no matching whitelisted method was found.
 * @throws Throwable if a method reference cannot be converted to an functional interface
 */
static MethodHandle lookupMethod(Lookup lookup, MethodType callSiteType, Class<?> receiverClass, String name, Object[] args) throws Throwable {
    long recipe = (Long) args[0];
    int numArguments = callSiteType.parameterCount();
    // simple case: no lambdas
    if (recipe == 0) {
        return lookupMethodInternal(receiverClass, name, numArguments - 1).handle;
    }
    // otherwise: first we have to compute the "real" arity. This is because we have extra arguments:
    // e.g. f(a, g(x), b, h(y), i()) looks like f(a, g, x, b, h, y, i).
    int arity = callSiteType.parameterCount() - 1;
    int upTo = 1;
    for (int i = 0; i < numArguments; i++) {
        if ((recipe & (1L << (i - 1))) != 0) {
            String signature = (String) args[upTo++];
            int numCaptures = Integer.parseInt(signature.substring(signature.indexOf(',') + 1));
            arity -= numCaptures;
        }
    }
    // lookup the method with the proper arity, then we know everything (e.g. interface types of parameters).
    // based on these we can finally link any remaining lambdas that were deferred.
    Method method = lookupMethodInternal(receiverClass, name, arity);
    MethodHandle handle = method.handle;
    int replaced = 0;
    upTo = 1;
    for (int i = 1; i < numArguments; i++) {
        // its a functional reference, replace the argument with an impl
        if ((recipe & (1L << (i - 1))) != 0) {
            // decode signature of form 'type.call,2'
            String signature = (String) args[upTo++];
            int separator = signature.indexOf('.');
            int separator2 = signature.indexOf(',');
            String type = signature.substring(1, separator);
            String call = signature.substring(separator + 1, separator2);
            int numCaptures = Integer.parseInt(signature.substring(separator2 + 1));
            Class<?>[] captures = new Class<?>[numCaptures];
            for (int capture = 0; capture < captures.length; capture++) {
                captures[capture] = callSiteType.parameterType(i + 1 + capture);
            }
            MethodHandle filter;
            Definition.Type interfaceType = method.arguments.get(i - 1 - replaced);
            if (signature.charAt(0) == 'S') {
                // the implementation is strongly typed, now that we know the interface type,
                // we have everything.
                filter = lookupReferenceInternal(lookup, interfaceType, type, call, captures);
            } else if (signature.charAt(0) == 'D') {
                // the interface type is now known, but we need to get the implementation.
                // this is dynamically based on the receiver type (and cached separately, underneath
                // this cache). It won't blow up since we never nest here (just references)
                MethodType nestedType = MethodType.methodType(interfaceType.clazz, captures);
                CallSite nested = DefBootstrap.bootstrap(lookup, call, nestedType, DefBootstrap.REFERENCE, interfaceType.name);
                filter = nested.dynamicInvoker();
            } else {
                throw new AssertionError();
            }
            // the filter now ignores the signature (placeholder) on the stack
            filter = MethodHandles.dropArguments(filter, 0, String.class);
            handle = MethodHandles.collectArguments(handle, i, filter);
            i += numCaptures;
            replaced += numCaptures;
        }
    }
    return handle;
}||||||||/**
 * Looks up handle for a dynamic method call, with lambda replacement
 * <p>
 * A dynamic method call for variable {@code x} of type {@code def} looks like:
 * {@code x.method(args...)}
 * <p>
 * This method traverses {@code recieverClass}'s class hierarchy (including interfaces)
 * until it finds a matching whitelisted method. If one is not found, it throws an exception.
 * Otherwise it returns a handle to the matching method.
 * <p>
 * @param lookup caller's lookup
 * @param callSiteType callsite's type
 * @param receiverClass Class of the object to invoke the method on.
 * @param name Name of the method.
 * @param args bootstrap args passed to callsite
 * @return pointer to matching method to invoke. never returns null.
 * @throws IllegalArgumentException if no matching whitelisted method was found.
 * @throws Throwable if a method reference cannot be converted to an functional interface
 */
static MethodHandle lookupMethod(Lookup lookup, MethodType callSiteType, Class<?> receiverClass, String name, Object[] args) throws Throwable {
    long recipe = (Long) args[0];
    int numArguments = callSiteType.parameterCount();
    // simple case: no lambdas
    if (recipe == 0) {
        return lookupMethodInternal(receiverClass, name, numArguments - 1).handle;
    }
    // otherwise: first we have to compute the "real" arity. This is because we have extra arguments:
    // e.g. f(a, g(x), b, h(y), i()) looks like f(a, g, x, b, h, y, i).
    int arity = callSiteType.parameterCount() - 1;
    int upTo = 1;
    for (int i = 0; i < numArguments; i++) {
        if ((recipe & (1L << (i - 1))) != 0) {
            String signature = (String) args[upTo++];
            int numCaptures = Integer.parseInt(signature.substring(signature.indexOf(',') + 1));
            arity -= numCaptures;
        }
    }
    // lookup the method with the proper arity, then we know everything (e.g. interface types of parameters).
    // based on these we can finally link any remaining lambdas that were deferred.
    Method method = lookupMethodInternal(receiverClass, name, arity);
    MethodHandle handle = method.handle;
    int replaced = 0;
    upTo = 1;
    for (int i = 1; i < numArguments; i++) {
        // its a functional reference, replace the argument with an impl
        if ((recipe & (1L << (i - 1))) != 0) {
            // decode signature of form 'type.call,2'
            String signature = (String) args[upTo++];
            int separator = signature.indexOf('.');
            int separator2 = signature.indexOf(',');
            String type = signature.substring(1, separator);
            String call = signature.substring(separator + 1, separator2);
            int numCaptures = Integer.parseInt(signature.substring(separator2 + 1));
            Class<?>[] captures = new Class<?>[numCaptures];
            for (int capture = 0; capture < captures.length; capture++) {
                captures[capture] = callSiteType.parameterType(i + 1 + capture);
            }
            MethodHandle filter;
            Definition.Type interfaceType = method.arguments.get(i - 1 - replaced);
            if (signature.charAt(0) == 'S') {
                // the implementation is strongly typed, now that we know the interface type,
                // we have everything.
                filter = lookupReferenceInternal(lookup, interfaceType, type, call, captures);
            } else if (signature.charAt(0) == 'D') {
                // the interface type is now known, but we need to get the implementation.
                // this is dynamically based on the receiver type (and cached separately, underneath
                // this cache). It won't blow up since we never nest here (just references)
                MethodType nestedType = MethodType.methodType(interfaceType.clazz, captures);
                CallSite nested = DefBootstrap.bootstrap(lookup, call, nestedType, 0, DefBootstrap.REFERENCE, interfaceType.name);
                filter = nested.dynamicInvoker();
            } else {
                throw new AssertionError();
            }
            // the filter now ignores the signature (placeholder) on the stack
            filter = MethodHandles.dropArguments(filter, 0, String.class);
            handle = MethodHandles.collectArguments(handle, i, filter);
            i += numCaptures;
            replaced += numCaptures;
        }
    }
    return handle;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(LongLiteralExpr
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											(BinaryExpr
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(LongLiteralExpr
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
											)
										)
										(ArrayCreationLevel
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
											)
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(CharLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(CharLiteralExpr
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(LongLiteralExpr
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											(BinaryExpr
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(LongLiteralExpr
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
											)
										)
										(ArrayCreationLevel
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
											)
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(CharLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(CharLiteralExpr
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

