/**
 * Notifies the shard of an increase in the primary term.
 *
 * @param newPrimaryTerm the new primary term
 * @param primaryReplicaSyncer the primary-replica resync action to trigger when a term is increased on a primary
 */
@Override
public void updatePrimaryTerm(final long newPrimaryTerm, CheckedBiConsumer<IndexShard, ActionListener<ResyncTask>, IOException> primaryReplicaSyncer) {
    assert shardRouting.primary() : "primary term can only be explicitly updated on a primary shard";
    synchronized (mutex) {
        if (newPrimaryTerm != primaryTerm) {
            // potentially preventing re-allocation.
            assert shardRouting.initializing() == false : "a started primary shard should never update its term; " + "shard " + shardRouting + ", " + "current term [" + primaryTerm + "], " + "new term [" + newPrimaryTerm + "]";
            assert newPrimaryTerm > primaryTerm : "primary terms can only go up; current term [" + primaryTerm + "], new term [" + newPrimaryTerm + "]";
            /*
                 * Before this call returns, we are guaranteed that all future operations are delayed and so this happens before we
                 * increment the primary term. The latch is needed to ensure that we do not unblock operations before the primary term is
                 * incremented.
                 */
            final CountDownLatch latch = new CountDownLatch(1);
            // to prevent primary relocation handoff while resync is not completed
            boolean resyncStarted = primaryReplicaResyncInProgress.compareAndSet(false, true);
            if (resyncStarted == false) {
                throw new IllegalStateException("cannot start resync while it's already in progress");
            }
            indexShardOperationPermits.asyncBlockOperations(30, TimeUnit.MINUTES, () -> {
                latch.await();
                try {
                    getEngine().fillSeqNoGaps(newPrimaryTerm);
                    primaryReplicaSyncer.accept(IndexShard.this, new ActionListener<ResyncTask>() {

                        @Override
                        public void onResponse(ResyncTask resyncTask) {
                            logger.info("primary-replica resync completed with {} operations", resyncTask.getResyncedOperations());
                            boolean resyncCompleted = primaryReplicaResyncInProgress.compareAndSet(true, false);
                            assert resyncCompleted : "primary-replica resync finished but was not started";
                        }

                        @Override
                        public void onFailure(Exception e) {
                            boolean resyncCompleted = primaryReplicaResyncInProgress.compareAndSet(true, false);
                            assert resyncCompleted : "primary-replica resync finished but was not started";
                            if (state == IndexShardState.CLOSED) {
                            // ignore, shutting down
                            } else {
                                failShard("exception during primary-replica resync", e);
                            }
                        }
                    });
                } catch (final AlreadyClosedException e) {
                // okay, the index was deleted
                }
            }, e -> failShard("exception during primary term transition", e));
            primaryTerm = newPrimaryTerm;
            latch.countDown();
        }
    }
}||||||||private void updatePrimaryTerm(final long newPrimaryTerm, final CheckedBiConsumer<IndexShard, ActionListener<ResyncTask>, IOException> primaryReplicaSyncer) {
    assert Thread.holdsLock(mutex);
    assert shardRouting.primary() : "primary term can only be explicitly updated on a primary shard";
    if (newPrimaryTerm != primaryTerm) {
        /* Note that due to cluster state batching an initializing primary shard term can failed and re-assigned
             * in one state causing it's term to be incremented. Note that if both current shard state and new
             * shard state are initializing, we could replace the current shard and reinitialize it. It is however
             * possible that this shard is being started. This can happen if:
             * 1) Shard is post recovery and sends shard started to the master
             * 2) Node gets disconnected and rejoins
             * 3) Master assigns the shard back to the node
             * 4) Master processes the shard started and starts the shard
             * 5) The node process the cluster state where the shard is both started and primary term is incremented.
             *
             * We could fail the shard in that case, but this will cause it to be removed from the insync allocations list
             * potentially preventing re-allocation.
             */
        assert shardRouting.initializing() == false : "a started primary shard should never update its term; " + "shard " + shardRouting + ", " + "current term [" + primaryTerm + "], " + "new term [" + newPrimaryTerm + "]";
        assert newPrimaryTerm > primaryTerm : "primary terms can only go up; current term [" + primaryTerm + "], new term [" + newPrimaryTerm + "]";
        /*
             * Before this call returns, we are guaranteed that all future operations are delayed and so this happens before we
             * increment the primary term. The latch is needed to ensure that we do not unblock operations before the primary term is
             * incremented.
             */
        final CountDownLatch latch = new CountDownLatch(1);
        // to prevent primary relocation handoff while resync is not completed
        boolean resyncStarted = primaryReplicaResyncInProgress.compareAndSet(false, true);
        if (resyncStarted == false) {
            throw new IllegalStateException("cannot start resync while it's already in progress");
        }
        indexShardOperationPermits.asyncBlockOperations(30, TimeUnit.MINUTES, () -> {
            latch.await();
            try {
                getEngine().fillSeqNoGaps(newPrimaryTerm);
                primaryReplicaSyncer.accept(IndexShard.this, new ActionListener<ResyncTask>() {

                    @Override
                    public void onResponse(ResyncTask resyncTask) {
                        logger.info("primary-replica resync completed with {} operations", resyncTask.getResyncedOperations());
                        boolean resyncCompleted = primaryReplicaResyncInProgress.compareAndSet(true, false);
                        assert resyncCompleted : "primary-replica resync finished but was not started";
                    }

                    @Override
                    public void onFailure(Exception e) {
                        boolean resyncCompleted = primaryReplicaResyncInProgress.compareAndSet(true, false);
                        assert resyncCompleted : "primary-replica resync finished but was not started";
                        if (state == IndexShardState.CLOSED) {
                        // ignore, shutting down
                        } else {
                            failShard("exception during primary-replica resync", e);
                        }
                    }
                });
            } catch (final AlreadyClosedException e) {
            // okay, the index was deleted
            }
        }, e -> failShard("exception during primary term transition", e));
        primaryTerm = newPrimaryTerm;
        latch.countDown();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			StringLiteralExpr
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(AssertStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																StringLiteralExpr
															)
															NameExpr
																SimpleName
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							LineComment
						)
						(AssertStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(IntegerLiteralExpr
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(LambdaExpr
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(TryStmt
											(CatchClause
												(BlockStmt
												)
												(Parameter
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															SimpleName
														)
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														(ThisExpr
															NameExpr
																SimpleName
														)
														(ObjectCreationExpr
															(MethodDeclaration
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(ExpressionStmt
																		(VariableDeclarationExpr
																			(VariableDeclarator
																				(MethodCallExpr
																					(BooleanLiteralExpr
																					)
																					(BooleanLiteralExpr
																					)
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				(PrimitiveType
																				)
																			)
																		)
																	)
																	(AssertStmt
																		NameExpr
																			SimpleName
																		StringLiteralExpr
																	)
																)
																(VoidType
																)
																SimpleName
																(Parameter
																	SimpleName
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
																(MarkerAnnotationExpr
																	Name
																)
															)
															(MethodDeclaration
																(BlockStmt
																	(ExpressionStmt
																		(VariableDeclarationExpr
																			(VariableDeclarator
																				(MethodCallExpr
																					(BooleanLiteralExpr
																					)
																					(BooleanLiteralExpr
																					)
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				(PrimitiveType
																				)
																			)
																		)
																	)
																	(AssertStmt
																		NameExpr
																			SimpleName
																		StringLiteralExpr
																	)
																	(IfStmt
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			(FieldAccessExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(MethodCallExpr
																					StringLiteralExpr
																					NameExpr
																						SimpleName
																					SimpleName
																				)
																			)
																		)
																		(BlockStmt
																		)
																	)
																)
																(VoidType
																)
																SimpleName
																(Parameter
																	SimpleName
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
																(MarkerAnnotationExpr
																	Name
																)
															)
															(ClassOrInterfaceType
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
								)
								(LambdaExpr
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(AssertStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			StringLiteralExpr
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(AssertStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BooleanLiteralExpr
						)
					)
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					(BlockComment
					)
				)
				(AssertStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(IntegerLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockComment
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								(BooleanLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(LambdaExpr
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(ThisExpr
													NameExpr
														SimpleName
												)
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	StringLiteralExpr
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			(BooleanLiteralExpr
																			)
																			(BooleanLiteralExpr
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(PrimitiveType
																		)
																	)
																)
															)
															(AssertStmt
																NameExpr
																	SimpleName
																StringLiteralExpr
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			(BooleanLiteralExpr
																			)
																			(BooleanLiteralExpr
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(PrimitiveType
																		)
																	)
																)
															)
															(AssertStmt
																NameExpr
																	SimpleName
																StringLiteralExpr
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																)
																(BlockStmt
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(LambdaExpr
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)

