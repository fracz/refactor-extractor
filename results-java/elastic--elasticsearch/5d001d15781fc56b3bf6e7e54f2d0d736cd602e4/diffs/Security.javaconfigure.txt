/**
 * Initializes SecurityManager for the environment
 * Can only happen once!
 */
static void configure(Environment environment) throws Exception {
    // set properties for jar locations
    setCodebaseProperties();
    // set properties for problematic plugins
    setPluginCodebaseProperties(environment);
    // enable security policy: union of template and environment-based paths.
    Policy.setPolicy(new ESPolicy(createPermissions(environment)));
    // enable security manager
    System.setSecurityManager(new SecurityManager() {

        // we disable this completely, because its granted otherwise:
        // 'Note: The "exitVM.*" permission is automatically granted to
        // all code loaded from the application class path, thus enabling
        // applications to terminate themselves.'
        @Override
        public void checkExit(int status) {
            throw new SecurityException("exit(" + status + ") not allowed by system policy");
        }
    });
    // do some basic tests
    selfTest();
}||||||||/**
 * Initializes SecurityManager for the environment
 * Can only happen once!
 */
static void configure(Environment environment) throws Exception {
    // set properties for jar locations
    setCodebaseProperties();
    // enable security policy: union of template and environment-based paths, and possibly plugin permissions
    Policy.setPolicy(new ESPolicy(createPermissions(environment), getPluginPermissions(environment)));
    // enable security manager
    System.setSecurityManager(new SecurityManager() {

        // we disable this completely, because its granted otherwise:
        // 'Note: The "exitVM.*" permission is automatically granted to
        // all code loaded from the application class path, thus enabling
        // applications to terminate themselves.'
        @Override
        public void checkExit(int status) {
            throw new SecurityException("exit(" + status + ") not allowed by system policy");
        }
    });
    // do some basic tests
    selfTest();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
						LineComment
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
						LineComment
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

