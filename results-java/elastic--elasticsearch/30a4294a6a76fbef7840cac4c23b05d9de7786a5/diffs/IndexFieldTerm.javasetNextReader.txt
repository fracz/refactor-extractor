// when the reader changes, we have to get the posting list for this term
// and reader
void setNextReader(LeafReader reader) {
    try {
        // Get the posting list for a specific term. Depending on the flags,
        // this
        // will either get a DocsEnum or a DocsAndPositionsEnum if
        // available.
        // get lucene frequency flag
        int luceneFrequencyFlag = getLuceneFrequencyFlag(flags);
        if (shouldRetrieveFrequenciesOnly()) {
            docsEnum = getOnlyDocsEnum(luceneFrequencyFlag, reader);
        } else {
            int lucenePositionsFlags = getLucenePositionsFlags(flags);
            docsEnum = getDocsAndPosEnum(lucenePositionsFlags, reader);
            if (docsEnum == null) {
                // no pos available
                docsEnum = getOnlyDocsEnum(luceneFrequencyFlag, reader);
            }
        }
    } catch (IOException e) {
        throw new ElasticsearchException("Unable to get posting list for field " + fieldName + " and term " + term, e);
    }
}||||||||// when the reader changes, we have to get the posting list for this term
// and reader
void setNextReader(LeafReader reader) {
    try {
        if (!shouldRetrieveFrequenciesOnly()) {
            postings = getPostings(getLucenePositionsFlags(flags), reader);
        }
        if (postings == null) {
            postings = getPostings(getLuceneFrequencyFlag(flags), reader);
            if (postings != null) {
                final PostingsEnum p = postings;
                postings = new PostingsEnum() {

                    @Override
                    public int freq() throws IOException {
                        return p.freq();
                    }

                    @Override
                    public int nextPosition() throws IOException {
                        return -1;
                    }

                    @Override
                    public int startOffset() throws IOException {
                        return -1;
                    }

                    @Override
                    public int endOffset() throws IOException {
                        return -1;
                    }

                    @Override
                    public BytesRef getPayload() throws IOException {
                        return null;
                    }

                    @Override
                    public int docID() {
                        return p.docID();
                    }

                    @Override
                    public int nextDoc() throws IOException {
                        return p.nextDoc();
                    }

                    @Override
                    public int advance(int target) throws IOException {
                        return p.advance(target);
                    }

                    @Override
                    public long cost() {
                        return p.cost();
                    }
                };
            }
        }
        if (postings == null) {
            postings = EMPTY_SCORER;
        }
    } catch (IOException e) {
        throw new ElasticsearchException("Unable to get posting list for field " + fieldName + " and term " + term, e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									LineComment
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											NameExpr
												SimpleName
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(ObjectCreationExpr
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(UnaryExpr
															(IntegerLiteralExpr
															)
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(UnaryExpr
															(IntegerLiteralExpr
															)
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(UnaryExpr
															(IntegerLiteralExpr
															)
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														NullLiteralExpr
													)
												)
												(ClassOrInterfaceType
													SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(Parameter
													SimpleName
													(PrimitiveType
													)
												)
												(ClassOrInterfaceType
													SimpleName
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(MarkerAnnotationExpr
													Name
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

