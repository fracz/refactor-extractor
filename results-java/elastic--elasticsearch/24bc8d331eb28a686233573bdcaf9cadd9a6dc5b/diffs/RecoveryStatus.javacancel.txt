public synchronized void cancel() {
    canceled = true;
}||||||||/**
 * cancel the recovery. calling this method will clean temporary files and release the store
 * unless this object is in use (in which case it will be cleaned once all ongoing users call
 * {@link #decRef()}
 *
 * if {@link #setWaitingRecoveryThread(Thread)} was used, the thread will be interrupted.
 */
public void cancel(String reason) {
    if (finished.compareAndSet(false, true)) {
        logger.debug("recovery canceled (reason: [{}])", reason);
        // release the initial reference. recovery files will be cleaned as soon as ref count goes to zero, potentially now
        decRef();
        final Thread thread = waitingRecoveryThread.get();
        if (thread != null) {
            thread.interrupt();
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

