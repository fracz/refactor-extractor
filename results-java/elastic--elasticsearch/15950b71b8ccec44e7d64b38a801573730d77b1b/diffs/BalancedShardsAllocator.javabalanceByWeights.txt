/**
 * Balances the nodes on the cluster model according to the weight
 * function. The configured threshold is the minimum delta between the
 * weight of the maximum node and the minimum node according to the
 * {@link WeightFunction}. This weight is calculated per index to
 * distribute shards evenly per index. The balancer tries to relocate
 * shards only if the delta exceeds the threshold. If the default case
 * the threshold is set to <tt>1.0</tt> to enforce gaining relocation
 * only, or in other words relocations that move the weight delta closer
 * to <tt>0.0</tt>
 */
private void balanceByWeights() {
    final NodeSorter sorter = newNodeSorter();
    final AllocationDeciders deciders = allocation.deciders();
    final ModelNode[] modelNodes = sorter.modelNodes;
    final float[] weights = sorter.weights;
    for (String index : buildWeightOrderedIndices(sorter)) {
        IndexMetaData indexMetaData = metaData.index(index);
        // find nodes that have a shard of this index or where shards of this index are allowed to stay
        // move these nodes to the front of modelNodes so that we can only balance based on these nodes
        int relevantNodes = 0;
        for (int i = 0; i < modelNodes.length; i++) {
            ModelNode modelNode = modelNodes[i];
            if (modelNode.getIndex(index) != null || deciders.canAllocate(indexMetaData, modelNode.getRoutingNode(), allocation).type() != Type.NO) {
                // swap nodes at position i and relevantNodes
                modelNodes[i] = modelNodes[relevantNodes];
                modelNodes[relevantNodes] = modelNode;
                relevantNodes++;
            }
        }
        if (relevantNodes < 2) {
            continue;
        }
        sorter.reset(index, 0, relevantNodes);
        int lowIdx = 0;
        int highIdx = relevantNodes - 1;
        while (true) {
            final ModelNode minNode = modelNodes[lowIdx];
            final ModelNode maxNode = modelNodes[highIdx];
            advance_range: if (maxNode.numShards(index) > 0) {
                final float delta = absDelta(weights[lowIdx], weights[highIdx]);
                if (lessThan(delta, threshold)) {
                    if (// is there a chance for a higher delta?
                    lowIdx > 0 && highIdx - 1 > 0 && // check if we need to break at all
                    (absDelta(weights[0], weights[highIdx - 1]) > threshold)) {
                        /* This is a special case if allocations from the "heaviest" to the "lighter" nodes is not possible
                                 * due to some allocation decider restrictions like zone awareness. if one zone has for instance
                                 * less nodes than another zone. so one zone is horribly overloaded from a balanced perspective but we
                                 * can't move to the "lighter" shards since otherwise the zone would go over capacity.
                                 *
                                 * This break jumps straight to the condition below were we start moving from the high index towards
                                 * the low index to shrink the window we are considering for balance from the other direction.
                                 * (check shrinking the window from MAX to MIN)
                                 * See #3580
                                 */
                        break advance_range;
                    }
                    if (logger.isTraceEnabled()) {
                        logger.trace("Stop balancing index [{}]  min_node [{}] weight: [{}]  max_node [{}] weight: [{}]  delta: [{}]", index, maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                    }
                    break;
                }
                if (logger.isTraceEnabled()) {
                    logger.trace("Balancing from node [{}] weight: [{}] to node [{}] weight: [{}]  delta: [{}]", maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                }
                /* pass the delta to the replication function to prevent relocations that only swap the weights of the two nodes.
                         * a relocation must bring us closer to the balance if we only achieve the same delta the relocation is useless */
                if (tryRelocateShard(minNode, maxNode, index, delta)) {
                    /*
                             * TODO we could be a bit smarter here, we don't need to fully sort necessarily
                             * we could just find the place to insert linearly but the win might be minor
                             * compared to the added complexity
                             */
                    weights[lowIdx] = sorter.weight(modelNodes[lowIdx]);
                    weights[highIdx] = sorter.weight(modelNodes[highIdx]);
                    sorter.sort(0, relevantNodes);
                    lowIdx = 0;
                    highIdx = relevantNodes - 1;
                    continue;
                }
            }
            if (lowIdx < highIdx - 1) {
                /* Shrinking the window from MIN to MAX
                         * we can't move from any shard from the min node lets move on to the next node
                         * and see if the threshold still holds. We either don't have any shard of this
                         * index on this node of allocation deciders prevent any relocation.*/
                lowIdx++;
            } else if (lowIdx > 0) {
                /* Shrinking the window from MAX to MIN
                         * now we go max to min since obviously we can't move anything to the max node
                         * lets pick the next highest */
                lowIdx = 0;
                highIdx--;
            } else {
                /* we are done here, we either can't relocate anymore or we are balanced */
                break;
            }
        }
    }
}||||||||/**
 * Balances the nodes on the cluster model according to the weight
 * function. The configured threshold is the minimum delta between the
 * weight of the maximum node and the minimum node according to the
 * {@link WeightFunction}. This weight is calculated per index to
 * distribute shards evenly per index. The balancer tries to relocate
 * shards only if the delta exceeds the threshold. In the default case
 * the threshold is set to <tt>1.0</tt> to enforce gaining relocation
 * only, or in other words relocations that move the weight delta closer
 * to <tt>0.0</tt>
 */
private void balanceByWeights() {
    final AllocationDeciders deciders = allocation.deciders();
    final ModelNode[] modelNodes = sorter.modelNodes;
    final float[] weights = sorter.weights;
    for (String index : buildWeightOrderedIndices()) {
        IndexMetaData indexMetaData = metaData.index(index);
        // find nodes that have a shard of this index or where shards of this index are allowed to be allocated to,
        // move these nodes to the front of modelNodes so that we can only balance based on these nodes
        int relevantNodes = 0;
        for (int i = 0; i < modelNodes.length; i++) {
            ModelNode modelNode = modelNodes[i];
            if (modelNode.getIndex(index) != null || deciders.canAllocate(indexMetaData, modelNode.getRoutingNode(), allocation).type() != Type.NO) {
                // swap nodes at position i and relevantNodes
                modelNodes[i] = modelNodes[relevantNodes];
                modelNodes[relevantNodes] = modelNode;
                relevantNodes++;
            }
        }
        if (relevantNodes < 2) {
            continue;
        }
        sorter.reset(index, 0, relevantNodes);
        int lowIdx = 0;
        int highIdx = relevantNodes - 1;
        while (true) {
            final ModelNode minNode = modelNodes[lowIdx];
            final ModelNode maxNode = modelNodes[highIdx];
            advance_range: if (maxNode.numShards(index) > 0) {
                final float delta = absDelta(weights[lowIdx], weights[highIdx]);
                if (lessThan(delta, threshold)) {
                    if (// is there a chance for a higher delta?
                    lowIdx > 0 && highIdx - 1 > 0 && // check if we need to break at all
                    (absDelta(weights[0], weights[highIdx - 1]) > threshold)) {
                        /* This is a special case if allocations from the "heaviest" to the "lighter" nodes is not possible
                                 * due to some allocation decider restrictions like zone awareness. if one zone has for instance
                                 * less nodes than another zone. so one zone is horribly overloaded from a balanced perspective but we
                                 * can't move to the "lighter" shards since otherwise the zone would go over capacity.
                                 *
                                 * This break jumps straight to the condition below were we start moving from the high index towards
                                 * the low index to shrink the window we are considering for balance from the other direction.
                                 * (check shrinking the window from MAX to MIN)
                                 * See #3580
                                 */
                        break advance_range;
                    }
                    if (logger.isTraceEnabled()) {
                        logger.trace("Stop balancing index [{}]  min_node [{}] weight: [{}]  max_node [{}] weight: [{}]  delta: [{}]", index, maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                    }
                    break;
                }
                if (logger.isTraceEnabled()) {
                    logger.trace("Balancing from node [{}] weight: [{}] to node [{}] weight: [{}]  delta: [{}]", maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                }
                /* pass the delta to the replication function to prevent relocations that only swap the weights of the two nodes.
                         * a relocation must bring us closer to the balance if we only achieve the same delta the relocation is useless */
                if (tryRelocateShard(minNode, maxNode, index, delta)) {
                    /*
                             * TODO we could be a bit smarter here, we don't need to fully sort necessarily
                             * we could just find the place to insert linearly but the win might be minor
                             * compared to the added complexity
                             */
                    weights[lowIdx] = sorter.weight(modelNodes[lowIdx]);
                    weights[highIdx] = sorter.weight(modelNodes[highIdx]);
                    sorter.sort(0, relevantNodes);
                    lowIdx = 0;
                    highIdx = relevantNodes - 1;
                    continue;
                }
            }
            if (lowIdx < highIdx - 1) {
                /* Shrinking the window from MIN to MAX
                         * we can't move from any shard from the min node lets move on to the next node
                         * and see if the threshold still holds. We either don't have any shard of this
                         * index on this node of allocation deciders prevent any relocation.*/
                lowIdx++;
            } else if (lowIdx > 0) {
                /* Shrinking the window from MAX to MIN
                         * now we go max to min since obviously we can't move anything to the max node
                         * lets pick the next highest */
                lowIdx = 0;
                highIdx--;
            } else {
                /* we are done here, we either can't relocate anymore or we are balanced */
                break;
            }
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(LabeledStmt
							SimpleName
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										(BlockStmt
											(IfStmt
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														(BinaryExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															(IntegerLiteralExpr
															)
														)
														LineComment
													)
													(EnclosedExpr
														(BinaryExpr
															(MethodCallExpr
																(ArrayAccessExpr
																	(IntegerLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
															)
															NameExpr
																SimpleName
														)
														LineComment
													)
												)
												(BlockStmt
													(BreakStmt
														SimpleName
														(BlockComment
														)
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BreakStmt
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(BlockComment
												)
											)
											(ExpressionStmt
												(AssignExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
											(ContinueStmt
											)
										)
										(BlockComment
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(BreakStmt
										(BlockComment
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockComment
										)
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockComment
									)
								)
							)
						)
					)
					(BooleanLiteralExpr
					)
				)
			)
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(LabeledStmt
							SimpleName
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										(BlockStmt
											(IfStmt
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														(BinaryExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															(IntegerLiteralExpr
															)
														)
														LineComment
													)
													(EnclosedExpr
														(BinaryExpr
															(MethodCallExpr
																(ArrayAccessExpr
																	(IntegerLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
															)
															NameExpr
																SimpleName
														)
														LineComment
													)
												)
												(BlockStmt
													(BreakStmt
														SimpleName
														(BlockComment
														)
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BreakStmt
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(BlockComment
												)
											)
											(ExpressionStmt
												(AssignExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
											(ContinueStmt
											)
										)
										(BlockComment
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(BreakStmt
										(BlockComment
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockComment
										)
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockComment
									)
								)
							)
						)
					)
					(BooleanLiteralExpr
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

