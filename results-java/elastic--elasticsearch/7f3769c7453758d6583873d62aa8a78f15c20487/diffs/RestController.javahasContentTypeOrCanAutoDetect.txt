/**
 * If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an
 * {@link XContentType} or the request is plain text, and content type is required. If content type is not required then this method
 * returns true unless a content type could not be inferred from the body and the rest handler does not support plain text
 */
private boolean hasContentTypeOrCanAutoDetect(final RestRequest restRequest, final RestHandler restHandler) {
    if (restRequest.getXContentType() == null) {
        if (restHandler != null && restHandler.supportsPlainText()) {
            // content type of null with a handler that supports plain text gets through for now. Once we remove plain text this can
            // be removed!
            deprecationLogger.deprecated("Plain text request bodies are deprecated. Use request parameters or body " + "in a supported format.");
        } else if (restHandler != null && restHandler.supportsContentStream() && restRequest.header("Content-Type") != null) {
            final String lowercaseMediaType = restRequest.header("Content-Type").toLowerCase(Locale.ROOT);
            // https://github.com/ndjson/ndjson-spec/blob/48ea03cea6796b614cfbff4d4eb921f0b1d35c26/specification.md
            if (lowercaseMediaType.equals("application/x-ldjson") || lowercaseMediaType.equals("application/x-ndjson")) {
                restRequest.setXContentType(XContentType.JSON);
            } else if (isContentTypeRequired) {
                return false;
            } else {
                return autoDetectXContentType(restRequest);
            }
        } else if (isContentTypeRequired) {
            return false;
        } else {
            return autoDetectXContentType(restRequest);
        }
    }
    return true;
}||||||||/**
 * If a request contains content, this method will return {@code true} if the {@code Content-Type} header is present, matches an
 * {@link XContentType} or the request is plain text, and content type is required. If content type is not required then this method
 * returns true unless a content type could not be inferred from the body and the rest handler does not support plain text
 */
private boolean hasContentTypeOrCanAutoDetect(final RestRequest restRequest, final RestHandler restHandler) {
    if (restRequest.getXContentType() == null) {
        if (restHandler != null && restHandler.supportsPlainText()) {
            // content type of null with a handler that supports plain text gets through for now. Once we remove plain text this can
            // be removed!
            deprecationLogger.deprecated("Plain text request bodies are deprecated. Use request parameters or body " + "in a supported format.");
        } else if (restHandler != null && restHandler.supportsContentStream() && restRequest.header("Content-Type") != null) {
            final String lowercaseMediaType = restRequest.header("Content-Type").toLowerCase(Locale.ROOT);
            // we also support newline delimited JSON: http://specs.okfnlabs.org/ndjson/
            if (lowercaseMediaType.equals("application/x-ndjson")) {
                restRequest.setXContentType(XContentType.JSON);
            } else if (isContentTypeRequired) {
                return false;
            } else {
                return autoDetectXContentType(restRequest);
            }
        } else if (isContentTypeRequired) {
            return false;
        } else {
            return autoDetectXContentType(restRequest);
        }
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ReturnStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ReturnStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

