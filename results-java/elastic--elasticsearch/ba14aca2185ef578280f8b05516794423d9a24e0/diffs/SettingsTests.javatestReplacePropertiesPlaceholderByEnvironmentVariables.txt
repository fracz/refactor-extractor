public void testReplacePropertiesPlaceholderByEnvironmentVariables() {
    final String hostname = randomAsciiOfLength(16);
    final Settings.Builder builder = new Settings.Builder() {

        @Override
        protected String getenv(String placeholderName) {
            return "HOSTNAME".equals(placeholderName) ? hostname : null;
        }
    };
    final Settings implicitEnvSettings = builder.put("setting1", "${HOSTNAME}").replacePropertyPlaceholders().build();
    assertThat(implicitEnvSettings.get("setting1"), equalTo(hostname));
}||||||||public void testReplacePropertiesPlaceholderByEnvironmentVariables() {
    final String hostname = randomAsciiOfLength(16);
    final Settings implicitEnvSettings = Settings.builder().put("setting1", "${HOSTNAME}").replacePropertyPlaceholders(name -> "HOSTNAME".equals(name) ? hostname : null).build();
    assertThat(implicitEnvSettings.get("setting1"), equalTo(hostname));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(ConditionalExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											StringLiteralExpr
										)
										NullLiteralExpr
										NameExpr
											SimpleName
									)
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(LambdaExpr
								(ExpressionStmt
									(ConditionalExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											StringLiteralExpr
										)
										NullLiteralExpr
										NameExpr
											SimpleName
									)
								)
								(Parameter
									SimpleName
									(UnknownType
									)
								)
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

