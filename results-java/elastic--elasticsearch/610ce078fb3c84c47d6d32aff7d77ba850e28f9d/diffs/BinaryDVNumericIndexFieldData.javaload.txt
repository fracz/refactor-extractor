@Override
public AtomicNumericFieldData load(AtomicReaderContext context) {
    try {
        final BinaryDocValues values = DocValues.getBinary(context.reader(), fieldNames.indexName());
        if (numericType.isFloatingPoint()) {
            return new AtomicDoubleFieldData(-1) {

                @Override
                public SortedNumericDoubleValues getDoubleValues() {
                    switch(numericType) {
                        case FLOAT:
                            return new BinaryAsSortedNumericFloatValues(values);
                        case DOUBLE:
                            return new BinaryAsSortedNumericDoubleValues(values);
                        default:
                            throw new ElasticsearchIllegalArgumentException("" + numericType);
                    }
                }
            };
        } else {
            return new AtomicLongFieldData(0) {

                @Override
                public SortedNumericDocValues getLongValues() {
                    return new BinaryAsSortedNumericDocValues(values);
                }
            };
        }
    } catch (IOException e) {
        throw new ElasticsearchIllegalStateException("Cannot load doc values", e);
    }
}||||||||@Override
public AtomicNumericFieldData load(LeafReaderContext context) {
    try {
        final BinaryDocValues values = DocValues.getBinary(context.reader(), fieldNames.indexName());
        if (numericType.isFloatingPoint()) {
            return new AtomicDoubleFieldData(-1) {

                @Override
                public SortedNumericDoubleValues getDoubleValues() {
                    switch(numericType) {
                        case FLOAT:
                            return new BinaryAsSortedNumericFloatValues(values);
                        case DOUBLE:
                            return new BinaryAsSortedNumericDoubleValues(values);
                        default:
                            throw new ElasticsearchIllegalArgumentException("" + numericType);
                    }
                }

                @Override
                public Iterable<? extends Accountable> getChildResources() {
                    return Collections.emptyList();
                }
            };
        } else {
            return new AtomicLongFieldData(0) {

                @Override
                public SortedNumericDocValues getLongValues() {
                    return new BinaryAsSortedNumericDocValues(values);
                }

                @Override
                public Iterable<? extends Accountable> getChildResources() {
                    return Collections.emptyList();
                }
            };
        }
    } catch (IOException e) {
        throw new ElasticsearchIllegalStateException("Cannot load doc values", e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											(ObjectCreationExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(IntegerLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(SwitchStmt
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ReturnStmt
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ReturnStmt
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(SwitchEntryStmt
												(ThrowStmt
													(ObjectCreationExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											(ObjectCreationExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(WildcardType
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(IntegerLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(SwitchStmt
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ReturnStmt
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ReturnStmt
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(SwitchEntryStmt
												(ThrowStmt
													(ObjectCreationExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(WildcardType
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

