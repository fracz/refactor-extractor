/**
 * Balances the nodes on the cluster model according to the weight
 * function. The configured threshold is the minimum delta between the
 * weight of the maximum node and the minimum node according to the
 * {@link WeightFunction}. This weight is calculated per index to
 * distribute shards evenly per index. The balancer tries to relocate
 * shards only if the delta exceeds the threshold. If the default case
 * the threshold is set to <tt>1.0</tt> to enforce gaining relocation
 * only, or in other words relocations that move the weight delta closer
 * to <tt>0.0</tt>
 *
 * @return <code>true</code> if the current configuration has been
 * changed, otherwise <code>false</code>
 */
public boolean balance() {
    if (this.nodes.isEmpty()) {
        /* with no nodes this is pointless */
        return false;
    }
    if (logger.isTraceEnabled()) {
        logger.trace("Start balancing cluster");
    }
    final TransactionalList<MutableShardRouting> unassigned = new TransactionalList<MutableShardRouting>(allocation.routingNodes().unassigned());
    boolean changed = initialize(allocation.routingNodes(), unassigned);
    NodeSorter sorter = newNodeSorter();
    if (nodes.size() > 1) {
        /* skip if we only have one node */
        for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) {
            sorter.reset(Operation.BALANCE, index);
            final float[] weights = sorter.weights;
            final ModelNode[] modelNodes = sorter.modelNodes;
            int lowIdx = 0;
            int highIdx = weights.length - 1;
            while (true) {
                final ModelNode minNode = modelNodes[lowIdx];
                final ModelNode maxNode = modelNodes[highIdx];
                advance_range: if (maxNode.numShards(index) > 0) {
                    float delta = weights[highIdx] - weights[lowIdx];
                    delta = delta <= threshold ? delta : sorter.weight(Operation.THRESHOLD_CHECK, maxNode) - sorter.weight(Operation.THRESHOLD_CHECK, minNode);
                    if (delta <= threshold) {
                        if (// is there a chance for a higher delta?
                        lowIdx > 0 && highIdx - 1 > 0 && // check if we need to break at all
                        (weights[highIdx - 1] - weights[0] > threshold)) {
                            /* This is a special case if allocations from the "heaviest" to the "lighter" nodes is not possible
                                     * due to some allocation decider restrictions like zone awareness. if one zone has for instance
                                     * less nodes than another zone. so one zone is horribly overloaded from a balanced perspective but we
                                     * can't move to the "lighter" shards since otherwise the zone would go over capacity.
                                     *
                                     * This break jumps straight to the condition below were we start moving from the high index towards
                                     * the low index to shrink the window we are considering for balance from the other direction.
                                     * (check shrinking the window from MAX to MIN)
                                     * See #3580
                                     */
                            break advance_range;
                        }
                        if (logger.isTraceEnabled()) {
                            logger.trace("Stop balancing index [{}]  min_node [{}] weight: [{}]  max_node [{}] weight: [{}]  delta: [{}]", index, maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                        }
                        break;
                    }
                    if (logger.isTraceEnabled()) {
                        logger.trace("Balancing from node [{}] weight: [{}] to node [{}] weight: [{}]  delta: [{}]", maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                    }
                    /* pass the delta to the replication function to prevent relocations that only swap the weights of the two nodes.
                             * a relocation must bring us closer to the balance if we only achive the same delta the relocation is useless */
                    if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) {
                        /*
                                 * TODO we could be a bit smarter here, we don't need to fully sort necessarily
                                 * we could just find the place to insert linearly but the win might be minor
                                 * compared to the added complexity
                                 */
                        weights[lowIdx] = sorter.weight(Operation.BALANCE, modelNodes[lowIdx]);
                        weights[highIdx] = sorter.weight(Operation.BALANCE, modelNodes[highIdx]);
                        sorter.sort(0, weights.length);
                        lowIdx = 0;
                        highIdx = weights.length - 1;
                        changed = true;
                        continue;
                    }
                }
                if (lowIdx < highIdx - 1) {
                    /* Shrinking the window from MIN to MAX
                             * we can't move from any shard from the min node lets move on to the next node
                             * and see if the threshold still holds. We either don't have any shard of this
                             * index on this node of allocation deciders prevent any relocation.*/
                    lowIdx++;
                } else if (lowIdx > 0) {
                    /* Shrinking the window from MAX to MIN
                             * now we go max to min since obviously we can't move anything to the max node
                             * lets pick the next highest */
                    lowIdx = 0;
                    highIdx--;
                } else {
                    /* we are done here, we either can't relocate anymore or we are balanced */
                    break;
                }
            }
        }
    }
    unassigned.commit();
    return changed;
}||||||||/**
 * Balances the nodes on the cluster model according to the weight
 * function. The configured threshold is the minimum delta between the
 * weight of the maximum node and the minimum node according to the
 * {@link WeightFunction}. This weight is calculated per index to
 * distribute shards evenly per index. The balancer tries to relocate
 * shards only if the delta exceeds the threshold. If the default case
 * the threshold is set to <tt>1.0</tt> to enforce gaining relocation
 * only, or in other words relocations that move the weight delta closer
 * to <tt>0.0</tt>
 *
 * @return <code>true</code> if the current configuration has been
 * changed, otherwise <code>false</code>
 */
public boolean balance() {
    if (this.nodes.isEmpty()) {
        /* with no nodes this is pointless */
        return false;
    }
    if (logger.isTraceEnabled()) {
        logger.trace("Start balancing cluster");
    }
    final RoutingNodes.UnassignedShards unassigned = routingNodes.unassigned().transactionBegin();
    boolean changed = initialize(routingNodes, unassigned);
    NodeSorter sorter = newNodeSorter();
    if (nodes.size() > 1) {
        /* skip if we only have one node */
        for (String index : buildWeightOrderedIndidces(Operation.BALANCE, sorter)) {
            sorter.reset(Operation.BALANCE, index);
            final float[] weights = sorter.weights;
            final ModelNode[] modelNodes = sorter.modelNodes;
            int lowIdx = 0;
            int highIdx = weights.length - 1;
            while (true) {
                final ModelNode minNode = modelNodes[lowIdx];
                final ModelNode maxNode = modelNodes[highIdx];
                advance_range: if (maxNode.numShards(index) > 0) {
                    float delta = weights[highIdx] - weights[lowIdx];
                    delta = delta <= threshold ? delta : sorter.weight(Operation.THRESHOLD_CHECK, maxNode) - sorter.weight(Operation.THRESHOLD_CHECK, minNode);
                    if (delta <= threshold) {
                        if (// is there a chance for a higher delta?
                        lowIdx > 0 && highIdx - 1 > 0 && // check if we need to break at all
                        (weights[highIdx - 1] - weights[0] > threshold)) {
                            /* This is a special case if allocations from the "heaviest" to the "lighter" nodes is not possible
                                     * due to some allocation decider restrictions like zone awareness. if one zone has for instance
                                     * less nodes than another zone. so one zone is horribly overloaded from a balanced perspective but we
                                     * can't move to the "lighter" shards since otherwise the zone would go over capacity.
                                     *
                                     * This break jumps straight to the condition below were we start moving from the high index towards
                                     * the low index to shrink the window we are considering for balance from the other direction.
                                     * (check shrinking the window from MAX to MIN)
                                     * See #3580
                                     */
                            break advance_range;
                        }
                        if (logger.isTraceEnabled()) {
                            logger.trace("Stop balancing index [{}]  min_node [{}] weight: [{}]  max_node [{}] weight: [{}]  delta: [{}]", index, maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                        }
                        break;
                    }
                    if (logger.isTraceEnabled()) {
                        logger.trace("Balancing from node [{}] weight: [{}] to node [{}] weight: [{}]  delta: [{}]", maxNode.getNodeId(), weights[highIdx], minNode.getNodeId(), weights[lowIdx], delta);
                    }
                    /* pass the delta to the replication function to prevent relocations that only swap the weights of the two nodes.
                             * a relocation must bring us closer to the balance if we only achive the same delta the relocation is useless */
                    if (tryRelocateShard(Operation.BALANCE, minNode, maxNode, index, delta)) {
                        /*
                                 * TODO we could be a bit smarter here, we don't need to fully sort necessarily
                                 * we could just find the place to insert linearly but the win might be minor
                                 * compared to the added complexity
                                 */
                        weights[lowIdx] = sorter.weight(Operation.BALANCE, modelNodes[lowIdx]);
                        weights[highIdx] = sorter.weight(Operation.BALANCE, modelNodes[highIdx]);
                        sorter.sort(0, weights.length);
                        lowIdx = 0;
                        highIdx = weights.length - 1;
                        changed = true;
                        continue;
                    }
                }
                if (lowIdx < highIdx - 1) {
                    /* Shrinking the window from MIN to MAX
                             * we can't move from any shard from the min node lets move on to the next node
                             * and see if the threshold still holds. We either don't have any shard of this
                             * index on this node of allocation deciders prevent any relocation.*/
                    lowIdx++;
                } else if (lowIdx > 0) {
                    /* Shrinking the window from MAX to MIN
                             * now we go max to min since obviously we can't move anything to the max node
                             * lets pick the next highest */
                    lowIdx = 0;
                    highIdx--;
                } else {
                    /* we are done here, we either can't relocate anymore or we are balanced */
                    break;
                }
            }
        }
    }
    routingNodes.unassigned().transactionEnd(unassigned);
    return changed;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					(BlockComment
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(LabeledStmt
									SimpleName
									(IfStmt
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BinaryExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(ConditionalExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(BinaryExpr
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														NameExpr
															SimpleName
													)
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(IfStmt
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																(BinaryExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	(IntegerLiteralExpr
																	)
																)
																LineComment
															)
															(EnclosedExpr
																(BinaryExpr
																	(BinaryExpr
																		(ArrayAccessExpr
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																			NameExpr
																				SimpleName
																		)
																		(ArrayAccessExpr
																			(IntegerLiteralExpr
																			)
																			NameExpr
																				SimpleName
																		)
																	)
																	NameExpr
																		SimpleName
																)
																LineComment
															)
														)
														(BlockStmt
															(BreakStmt
																SimpleName
																(BlockComment
																)
															)
														)
													)
													(IfStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	StringLiteralExpr
																	NameExpr
																		SimpleName
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	(ArrayAccessExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																	)
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	(ArrayAccessExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																	)
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
													(BreakStmt
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(ArrayAccessExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(BlockComment
														)
													)
													(ExpressionStmt
														(AssignExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(ArrayAccessExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(ExpressionStmt
														(MethodCallExpr
															(IntegerLiteralExpr
															)
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(BinaryExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(IntegerLiteralExpr
																)
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(BooleanLiteralExpr
															)
														)
													)
													(ContinueStmt
													)
												)
												(BlockComment
												)
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(BreakStmt
												(BlockComment
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(BlockComment
												)
											)
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											(BlockComment
											)
										)
									)
								)
							)
							(BooleanLiteralExpr
							)
						)
					)
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockComment
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					(BlockComment
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(LabeledStmt
									SimpleName
									(IfStmt
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BinaryExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(ConditionalExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(BinaryExpr
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														NameExpr
															SimpleName
													)
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(IfStmt
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																(BinaryExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	(IntegerLiteralExpr
																	)
																)
																LineComment
															)
															(EnclosedExpr
																(BinaryExpr
																	(BinaryExpr
																		(ArrayAccessExpr
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																			NameExpr
																				SimpleName
																		)
																		(ArrayAccessExpr
																			(IntegerLiteralExpr
																			)
																			NameExpr
																				SimpleName
																		)
																	)
																	NameExpr
																		SimpleName
																)
																LineComment
															)
														)
														(BlockStmt
															(BreakStmt
																SimpleName
																(BlockComment
																)
															)
														)
													)
													(IfStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	StringLiteralExpr
																	NameExpr
																		SimpleName
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	(ArrayAccessExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																	)
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	(ArrayAccessExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																	)
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
													(BreakStmt
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(ArrayAccessExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(BlockComment
														)
													)
													(ExpressionStmt
														(AssignExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(ArrayAccessExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(ExpressionStmt
														(MethodCallExpr
															(IntegerLiteralExpr
															)
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(BinaryExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(IntegerLiteralExpr
																)
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(BooleanLiteralExpr
															)
														)
													)
													(ContinueStmt
													)
												)
												(BlockComment
												)
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(BreakStmt
												(BlockComment
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(BlockComment
												)
											)
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											(BlockComment
											)
										)
									)
								)
							)
							(BooleanLiteralExpr
							)
						)
					)
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockComment
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

