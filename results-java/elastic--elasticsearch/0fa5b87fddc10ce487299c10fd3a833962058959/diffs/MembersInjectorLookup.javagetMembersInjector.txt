/**
 * Returns the looked up members injector. The result is not valid until this lookup has been
 * initialized, which usually happens when the injector is created. The members injector will
 * throw an {@code IllegalStateException} if you try to use it beforehand.
 */
public MembersInjector<T> getMembersInjector() {
    return new MembersInjector<T>() {

        public void injectMembers(T instance) {
            checkState(delegate != null, "This MembersInjector cannot be used until the Injector has been created.");
            delegate.injectMembers(instance);
        }

        @Override
        public String toString() {
            return "MembersInjector<" + type + ">";
        }
    };
}||||||||/**
 * Returns the looked up members injector. The result is not valid until this lookup has been
 * initialized, which usually happens when the injector is created. The members injector will
 * throw an {@code IllegalStateException} if you try to use it beforehand.
 */
public MembersInjector<T> getMembersInjector() {
    return new MembersInjector<T>() {

        @Override
        public void injectMembers(T instance) {
            checkState(delegate != null, "This MembersInjector cannot be used until the Injector has been created.");
            delegate.injectMembers(instance);
        }

        @Override
        public String toString() {
            return "MembersInjector<" + type + ">";
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								StringLiteralExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								StringLiteralExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

