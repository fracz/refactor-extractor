/**
 * Like {@link GifInfoHandle#seekToTime(long, int, android.graphics.Bitmap)}
 * but uses index of the frame instead of time.
 *
 * @param frameIndex index of the frame to seek to (zero based)
 * @throws IllegalArgumentException if frameIndex&lt;0
 */
public void seekToFrame(final int frameIndex) {
    if (frameIndex < 0) {
        throw new IllegalArgumentException("frameIndex is not positive");
    }
    mExecutor.execute(new SafeRunnable() {

        @Override
        public void doWork() {
            mNativeInfoHandle.seekToFrame(frameIndex, mBuffer);
            scheduleSelf(mInvalidateTask, 0L);
        }
    });
}||||||||/**
 * Like {@link GifInfoHandle#seekToTime(long, int, android.graphics.Bitmap)}
 * but uses index of the frame instead of time.
 *
 * @param frameIndex index of the frame to seek to (zero based)
 * @throws IllegalArgumentException if frameIndex&lt;0
 */
public void seekToFrame(final int frameIndex) {
    if (frameIndex < 0) {
        throw new IllegalArgumentException("frameIndex is not positive");
    }
    mExecutor.execute(new SafeRunnable(this) {

        @Override
        public void doWork() {
            mNativeInfoHandle.seekToFrame(frameIndex, mBuffer);
            scheduleSelf(mInvalidateTask, 0L);
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(LongLiteralExpr
									)
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(LongLiteralExpr
									)
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ThisExpr
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

