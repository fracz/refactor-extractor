/**
 * Provides translation between HTTP/2 and HTTP header objects while ensuring the stream
 * is in a valid state for additional headers.
 *
 * @param ctx The context for which this message has been received.
 * Used to send informational header if detected.
 * @param streamId The stream id the {@code headers} apply to
 * @param headers The headers to process
 * @param endOfStream {@code true} if the {@code streamId} has received the end of stream flag
 * @param allowAppend
 * <ul>
 * <li>{@code true} if headers will be appended if the stream already exists.</li>
 * <li>if {@code false} and the stream already exists this method returns {@code null}.</li>
 * </ul>
 * @param appendToTrailer
 * <ul>
 * <li>{@code true} if a message {@code streamId} already exists then the headers
 * should be added to the trailing headers.</li>
 * <li>{@code false} then appends will be done to the initial headers.</li>
 * </ul>
 * @return The object used to track the stream corresponding to {@code streamId}. {@code null} if
 * {@code allowAppend} is {@code false} and the stream already exists.
 * @throws Http2Exception If the stream id is not in the correct state to process the headers request
 */
protected FullHttpMessage processHeadersBegin(ChannelHandlerContext ctx, int streamId, Http2Headers headers, boolean endOfStream, boolean allowAppend, boolean appendToTrailer) throws Http2Exception {
    FullHttpMessage msg = messageMap.get(streamId);
    if (msg == null) {
        msg = newMessage(streamId, headers, validateHttpHeaders);
    } else if (allowAppend) {
        try {
            HttpConversionUtil.addHttp2ToHttpHeaders(streamId, headers, msg, appendToTrailer);
        } catch (Http2Exception e) {
            removeMessage(streamId);
            throw e;
        }
    } else {
        msg = null;
    }
    if (sendDetector.mustSendImmediately(msg)) {
        // Copy the message (if necessary) before sending. The content is not expected to be copied (or used) in
        // this operation but just in case it is used do the copy before sending and the resource may be released
        final FullHttpMessage copy = endOfStream ? null : sendDetector.copyIfNeeded(msg);
        fireChannelRead(ctx, msg, streamId);
        return copy;
    }
    return msg;
}||||||||/**
 * Provides translation between HTTP/2 and HTTP header objects while ensuring the stream
 * is in a valid state for additional headers.
 *
 * @param ctx The context for which this message has been received.
 * Used to send informational header if detected.
 * @param stream The stream the {@code headers} apply to
 * @param headers The headers to process
 * @param endOfStream {@code true} if the {@code stream} has received the end of stream flag
 * @param allowAppend
 * <ul>
 * <li>{@code true} if headers will be appended if the stream already exists.</li>
 * <li>if {@code false} and the stream already exists this method returns {@code null}.</li>
 * </ul>
 * @param appendToTrailer
 * <ul>
 * <li>{@code true} if a message {@code stream} already exists then the headers
 * should be added to the trailing headers.</li>
 * <li>{@code false} then appends will be done to the initial headers.</li>
 * </ul>
 * @return The object used to track the stream corresponding to {@code stream}. {@code null} if
 * {@code allowAppend} is {@code false} and the stream already exists.
 * @throws Http2Exception If the stream id is not in the correct state to process the headers request
 */
protected FullHttpMessage processHeadersBegin(ChannelHandlerContext ctx, Http2Stream stream, Http2Headers headers, boolean endOfStream, boolean allowAppend, boolean appendToTrailer) throws Http2Exception {
    FullHttpMessage msg = getMessage(stream);
    boolean release = true;
    if (msg == null) {
        msg = newMessage(stream, headers, validateHttpHeaders);
    } else if (allowAppend) {
        release = false;
        HttpConversionUtil.addHttp2ToHttpHeaders(stream.id(), headers, msg, appendToTrailer);
    } else {
        release = false;
        msg = null;
    }
    if (sendDetector.mustSendImmediately(msg)) {
        // Copy the message (if necessary) before sending. The content is not expected to be copied (or used) in
        // this operation but just in case it is used do the copy before sending and the resource may be released
        final FullHttpMessage copy = endOfStream ? null : sendDetector.copyIfNeeded(msg);
        fireChannelRead(ctx, msg, release, stream);
        return copy;
    }
    return msg;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				NameExpr
					SimpleName
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
				)
				(BlockStmt
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ThrowStmt
									NameExpr
										SimpleName
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				NameExpr
					SimpleName
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(BooleanLiteralExpr
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(BooleanLiteralExpr
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

