/**
 * Create a new {@link Queue} which is safe to use for multiple producers (different threads) and a single
 * consumer (one thread!).
 */
public static Queue<Runnable> newMpscQueue() {
    if (hasUnsafe()) {
        return new MpscLinkedQueue();
    } else {
        return new ConcurrentLinkedQueue<Runnable>();
    }
}||||||||/**
 * Create a new {@link Queue} which is safe to use for multiple producers (different threads) and a single
 * consumer (one thread!).
 */
public static <T> Queue<T> newMpscQueue() {
    if (hasUnsafe()) {
        return new MpscLinkedQueue<T>();
    } else {
        return new ConcurrentLinkedQueue<T>();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

