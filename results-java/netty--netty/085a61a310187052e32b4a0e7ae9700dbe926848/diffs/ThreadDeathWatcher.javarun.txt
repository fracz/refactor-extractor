@Override
public void run() {
    for (; ; ) {
        fetchWatchees();
        notifyWatchees();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ignore) {
        // Ignore the interrupt; do not terminate until all tasks are run.
        }
        if (watchees.isEmpty() && pendingEntries.isEmpty()) {
            // Mark the current worker thread as stopped.
            // The following CAS must always success and must be uncontended,
            // because only one watcher thread should be running at the same time.
            boolean stopped = started.compareAndSet(true, false);
            assert stopped;
            // Check if there are pending entries added by watch() while we do CAS above.
            if (pendingEntries.isEmpty()) {
                // -> safe to terminate the new watcher thread will take care the rest
                break;
            }
            // There are pending entries again, added by watch()
            if (!started.compareAndSet(false, true)) {
                // -> terminate this thread so that the new watcher reads from pendingEntries exclusively.
                break;
            }
        // watch() added an entry, but this worker was faster to set 'started' to true.
        // i.e. a new watcher thread was not started
        // -> keep this thread alive to handle the newly added entries.
        }
    }
}||||||||@Override
public void run() {
    for (; ; ) {
        fetchWatchees();
        notifyWatchees();
        // Try once again just in case notifyWatchees() triggered watch() or unwatch().
        fetchWatchees();
        notifyWatchees();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ignore) {
        // Ignore the interrupt; do not terminate until all tasks are run.
        }
        if (watchees.isEmpty() && pendingEntries.isEmpty()) {
            // Mark the current worker thread as stopped.
            // The following CAS must always success and must be uncontended,
            // because only one watcher thread should be running at the same time.
            boolean stopped = started.compareAndSet(true, false);
            assert stopped;
            // Check if there are pending entries added by watch() while we do CAS above.
            if (pendingEntries.isEmpty()) {
                // -> safe to terminate the new watcher thread will take care the rest
                break;
            }
            // There are pending entries again, added by watch()
            if (!started.compareAndSet(false, true)) {
                // -> terminate this thread so that the new watcher reads from pendingEntries exclusively.
                break;
            }
        // watch() added an entry, but this worker was faster to set 'started' to true.
        // i.e. a new watcher thread was not started
        // -> keep this thread alive to handle the newly added entries.
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(AssertStmt
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(BreakStmt
									LineComment
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									(BooleanLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(BreakStmt
									LineComment
								)
							)
							LineComment
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(AssertStmt
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(BreakStmt
									LineComment
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									(BooleanLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(BreakStmt
									LineComment
								)
							)
							LineComment
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

