/**
 * Find the next Multipart Delimiter
 *
 * @param delimiter
 * delimiter to find
 * @param dispositionStatus
 * the next getStatus if the delimiter is a start
 * @param closeDelimiterStatus
 * the next getStatus if the delimiter is a close delimiter
 * @return the next InterfaceHttpData if any
 * @throws ErrorDataDecoderException
 */
private InterfaceHttpData findMultipartDelimiter(String delimiter, MultiPartStatus dispositionStatus, MultiPartStatus closeDelimiterStatus) {
    // --AaB03x or --AaB03x--
    int readerIndex = undecodedChunk.readerIndex();
    try {
        skipControlCharacters();
    } catch (NotEnoughDataDecoderException ignored) {
        undecodedChunk.readerIndex(readerIndex);
        return null;
    }
    skipOneLine();
    String newline;
    try {
        newline = readDelimiter(delimiter);
    } catch (NotEnoughDataDecoderException ignored) {
        undecodedChunk.readerIndex(readerIndex);
        return null;
    }
    if (newline.equals(delimiter)) {
        currentStatus = dispositionStatus;
        return decodeMultipart(dispositionStatus);
    }
    if (newline.equals(delimiter + "--")) {
        // CLOSEDELIMITER or MIXED CLOSEDELIMITER found
        currentStatus = closeDelimiterStatus;
        if (currentStatus == MultiPartStatus.HEADERDELIMITER) {
            // MIXEDCLOSEDELIMITER
            // end of the Mixed part
            currentFieldAttributes = null;
            return decodeMultipart(MultiPartStatus.HEADERDELIMITER);
        }
        return null;
    }
    undecodedChunk.readerIndex(readerIndex);
    throw new ErrorDataDecoderException("No Multipart delimiter found");
}||||||||/**
 * Find the next Multipart Delimiter
 *
 * @param delimiter
 * delimiter to find
 * @param dispositionStatus
 * the next getStatus if the delimiter is a start
 * @param closeDelimiterStatus
 * the next getStatus if the delimiter is a close delimiter
 * @return the next InterfaceHttpData if any
 * @throws ErrorDataDecoderException
 */
private InterfaceHttpData findMultipartDelimiter(String delimiter, MultiPartStatus dispositionStatus, MultiPartStatus closeDelimiterStatus) {
    // --AaB03x or --AaB03x--
    int readerIndex = undecodedChunk.readerIndex();
    try {
        skipControlCharacters(undecodedChunk);
    } catch (NotEnoughDataDecoderException ignored) {
        undecodedChunk.readerIndex(readerIndex);
        return null;
    }
    skipOneLine();
    String newline;
    try {
        newline = readDelimiter(undecodedChunk, delimiter);
    } catch (NotEnoughDataDecoderException ignored) {
        undecodedChunk.readerIndex(readerIndex);
        return null;
    }
    if (newline.equals(delimiter)) {
        currentStatus = dispositionStatus;
        return decodeMultipart(dispositionStatus);
    }
    if (newline.equals(delimiter + "--")) {
        // CLOSEDELIMITER or MIXED CLOSEDELIMITER found
        currentStatus = closeDelimiterStatus;
        if (currentStatus == MultiPartStatus.HEADERDELIMITER) {
            // MIXEDCLOSEDELIMITER
            // end of the Mixed part
            currentFieldAttributes = null;
            return decodeMultipart(MultiPartStatus.HEADERDELIMITER);
        }
        return null;
    }
    undecodedChunk.readerIndex(readerIndex);
    throw new ErrorDataDecoderException("No Multipart delimiter found");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							LineComment
						)
						(ReturnStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				StringLiteralExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							LineComment
						)
						(ReturnStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				StringLiteralExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

