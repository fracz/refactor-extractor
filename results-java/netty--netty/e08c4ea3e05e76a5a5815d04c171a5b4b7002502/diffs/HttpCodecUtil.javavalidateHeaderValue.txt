static void validateHeaderValue(String value) {
    if (value == null) {
        throw new NullPointerException("value");
    }
    // 0 - the previous character was neither CR nor LF
    // 1 - the previous character was CR
    // 2 - the previous character was LF
    int state = 0;
    for (int i = 0; i < value.length(); i++) {
        char c = value.charAt(i);
        // Check the absolutely prohibited characters.
        switch(c) {
            case // Vertical tab
            0x0b:
                throw new IllegalArgumentException("value contains a prohibited character '\\v': " + value);
            case '\f':
                throw new IllegalArgumentException("value contains a prohibited character '\\f': " + value);
        }
        // Check the CRLF (HT | SP) pattern
        switch(state) {
            case 0:
                switch(c) {
                    case '\r':
                        state = 1;
                        break;
                    case '\n':
                        state = 2;
                        break;
                }
                break;
            case 1:
                switch(c) {
                    case '\n':
                        state = 2;
                        break;
                    default:
                        throw new IllegalArgumentException("Only '\\n' is allowed after '\\r': " + value);
                }
                break;
            case 2:
                switch(c) {
                    case '\t':
                    case ' ':
                        state = 0;
                        break;
                    default:
                        throw new IllegalArgumentException("Only ' ' and '\\t' are allowed after '\\n': " + value);
                }
        }
    }
    if (state != 0) {
        throw new IllegalArgumentException("value must not end with '\\r' or '\\n':" + value);
    }
}||||||||/**
 * Validates the specified header value
 *
 * @param value The value being validated
 */
static void validateHeaderValue(String headerValue) {
    // Check to see if the value is null
    if (headerValue == null) {
        throw new NullPointerException("Header values cannot be null");
    }
    /*
         * Set up the state of the validation
         *
         * States are as follows:
         *
         * 0: Previous character was neither CR nor LF
         * 1: The previous character was CR
         * 2: The previous character was LF
         */
    int state = 0;
    for (int index = 0; index < headerValue.length(); index++) {
        char character = headerValue.charAt(index);
        // Check the absolutely prohibited characters.
        switch(character) {
            case // Vertical tab
            0x0b:
                throw new IllegalArgumentException("Header value contains a prohibited character '\\v': " + headerValue);
            case '\f':
                throw new IllegalArgumentException("Header value contains a prohibited character '\\f': " + headerValue);
        }
        // Check the CRLF (HT | SP) pattern
        switch(state) {
            case 0:
                switch(character) {
                    case '\r':
                        state = 1;
                        break;
                    case '\n':
                        state = 2;
                        break;
                }
                break;
            case 1:
                switch(character) {
                    case '\n':
                        state = 2;
                        break;
                    default:
                        throw new IllegalArgumentException("Only '\\n' is allowed after '\\r': " + headerValue);
                }
                break;
            case 2:
                switch(character) {
                    case '\t':
                    case ' ':
                        state = 0;
                        break;
                    default:
                        throw new IllegalArgumentException("Only ' ' and '\\t' are allowed after '\\n': " + headerValue);
                }
        }
    }
    if (state != 0) {
        throw new IllegalArgumentException("Header value must not end with '\\r' or '\\n':" + headerValue);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
							LineComment
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							NameExpr
								SimpleName
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
							LineComment
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							NameExpr
								SimpleName
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

