/**
 * In this test, we block A which allows bytes to be written by C and D. Here's a view of the tree (stream A is
 * blocked).
 *
 * <pre>
 * 0
 * / \
 * [A]  B
 * / \
 * C   D
 * </pre>
 */
@Test
public void blockedStreamShouldSpreadDataToChildren() throws Http2Exception {
    // Block stream A
    exhaustStreamWindow(STREAM_A);
    // Block the connection
    exhaustStreamWindow(CONNECTION_STREAM_ID);
    // Try sending 10 bytes on each stream. They will be pending until we free up the
    // connection.
    FakeFlowControlled dataA = new FakeFlowControlled(10);
    FakeFlowControlled dataB = new FakeFlowControlled(10);
    FakeFlowControlled dataC = new FakeFlowControlled(10);
    FakeFlowControlled dataD = new FakeFlowControlled(10);
    sendData(STREAM_A, dataA);
    sendData(STREAM_B, dataB);
    sendData(STREAM_C, dataC);
    sendData(STREAM_D, dataD);
    dataA.assertNotWritten();
    dataB.assertNotWritten();
    dataC.assertNotWritten();
    dataD.assertNotWritten();
    // Verify that the entire frame was sent.
    incrementWindowSize(CONNECTION_STREAM_ID, 10);
    assertEquals(0, window(CONNECTION_STREAM_ID));
    // A is not written
    assertEquals(0, window(STREAM_A));
    dataA.assertNotWritten();
    // B is partially written
    assertEquals(DEFAULT_WINDOW_SIZE - 5, window(STREAM_B), 2);
    dataB.assertPartiallyWritten(5);
    // Verify that C and D each shared half of A's allowance. Since A's allowance (5) cannot
    // be split evenly, one will get 3 and one will get 2.
    assertEquals(2 * DEFAULT_WINDOW_SIZE - 5, window(STREAM_C) + window(STREAM_D), 5);
    dataC.assertPartiallyWritten(3);
    dataD.assertPartiallyWritten(2);
}||||||||/**
 * In this test, we block A which allows bytes to be written by C and D. Here's a view of the tree (stream A is
 * blocked).
 *
 * <pre>
 * 0
 * / \
 * [A]  B
 * / \
 * C   D
 * </pre>
 */
@Test
public void blockedStreamShouldSpreadDataToChildren() throws Http2Exception {
    // Block stream A
    exhaustStreamWindow(STREAM_A);
    // Block the connection
    exhaustStreamWindow(CONNECTION_STREAM_ID);
    // Try sending 10 bytes on each stream. They will be pending until we free up the
    // connection.
    FakeFlowControlled dataA = new FakeFlowControlled(10);
    FakeFlowControlled dataB = new FakeFlowControlled(10);
    FakeFlowControlled dataC = new FakeFlowControlled(10);
    FakeFlowControlled dataD = new FakeFlowControlled(10);
    sendData(STREAM_A, dataA);
    sendData(STREAM_B, dataB);
    sendData(STREAM_C, dataC);
    sendData(STREAM_D, dataD);
    controller.writePendingBytes();
    dataA.assertNotWritten();
    dataB.assertNotWritten();
    dataC.assertNotWritten();
    dataD.assertNotWritten();
    // Verify that the entire frame was sent.
    incrementWindowSize(CONNECTION_STREAM_ID, 10);
    controller.writePendingBytes();
    assertEquals(0, window(CONNECTION_STREAM_ID));
    // A is not written
    assertEquals(0, window(STREAM_A));
    dataA.assertNotWritten();
    // B is partially written
    assertEquals(DEFAULT_WINDOW_SIZE - 5, window(STREAM_B), 2);
    dataB.assertPartiallyWritten(5);
    verify(listener, times(1)).streamWritten(stream(STREAM_B), 5);
    // Verify that C and D each shared half of A's allowance. Since A's allowance (5) cannot
    // be split evenly, one will get 3 and one will get 2.
    assertEquals(2 * DEFAULT_WINDOW_SIZE - 5, window(STREAM_C) + window(STREAM_D), 5);
    dataC.assertPartiallyWritten(3);
    verify(listener, times(1)).streamWritten(stream(STREAM_C), 3);
    dataD.assertPartiallyWritten(2);
    verify(listener, times(1)).streamWritten(stream(STREAM_D), 2);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IntegerLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

