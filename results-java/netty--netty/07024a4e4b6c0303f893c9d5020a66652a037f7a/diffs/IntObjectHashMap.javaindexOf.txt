/**
 * Locates the index for the given key. This method probes using double hashing.
 *
 * @param key the key for an entry in the map.
 * @return the index where the key was found, or {@code -1} if no entry is found for that key.
 */
private int indexOf(int key) {
    int hash = hash(key);
    int capacity = capacity();
    int increment = 1 + hash % (capacity - 2);
    int index = hash % capacity;
    int startIndex = index;
    do {
        switch(states[index]) {
            case AVAILABLE:
                // It's available, so no chance that this value exists anywhere in the map.
                return -1;
            case OCCUPIED:
                if (key == keys[index]) {
                    // Found it!
                    return index;
                }
                break;
            default:
                break;
        }
        // REMOVED or OCCUPIED but wrong key, keep probing ...
        index += increment;
        if (index >= capacity) {
            // Handle wrap-around by decrement rather than mod.
            index -= capacity;
        }
    } while (index != startIndex);
    // Got back to the beginning. Not found.
    return -1;
}||||||||/**
 * Locates the index for the given key. This method probes using double hashing.
 *
 * @param key the key for an entry in the map.
 * @return the index where the key was found, or {@code -1} if no entry is found for that key.
 */
private int indexOf(int key) {
    int startIndex = hashIndex(key);
    int index = startIndex;
    for (; ; ) {
        if (values[index] == null) {
            // It's available, so no chance that this value exists anywhere in the map.
            return -1;
        } else if (key == keys[index]) {
            return index;
        }
        // Conflict, keep probing ...
        if ((index = probeNext(index)) == startIndex) {
            return -1;
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(DoStmt
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ReturnStmt
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							LineComment
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
									LineComment
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(BreakStmt
						)
					)
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(UnaryExpr
				(IntegerLiteralExpr
				)
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
					)
					LineComment
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

