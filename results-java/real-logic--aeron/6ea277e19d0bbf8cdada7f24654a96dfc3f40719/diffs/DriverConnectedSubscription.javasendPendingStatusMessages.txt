/**
 * Called from the {@link DriverConductor}.
 *
 * @return number of work items processed.
 */
public int sendPendingStatusMessages(final long now) {
    /*
         * General approach is to check tail and see if it has moved enough to warrant sending an SM.
         * - send SM when termId has moved (i.e. buffer rotation of LossHandler - i.e. term completed)
         * - send SM when (currentTail - lastSmTail) > X% of window (the window gain)
         * - send SM when currentTail > lastTail && timeOfLastSM too long
         */
    final int currentSmTail = lossHandler.highestContiguousOffset();
    final long currentSmTermId = lossHandler.activeTermId();
    // if term has rotated for loss handler, then send an SM
    if (lossHandler.activeTermId() != lastSmTermId) {
        lastSmTimestamp = now;
        return sendStatusMessage(currentSmTermId, currentSmTail, currentWindowSize);
    }
    // made progress since last time we sent an SM, so may send
    if (currentSmTail > lastSmTail) {
        // see if we have made enough progress to make sense to send an SM
        if ((currentSmTail - lastSmTail) > currentWindowGain) {
            lastSmTimestamp = now;
            return sendStatusMessage(currentSmTermId, currentSmTail, currentWindowSize);
        }
    // lastSmTimestamp might be 0 due to being initialized, but if we have sent some, then fine.
    // if (now > (lastSmTimestamp + STATUS_MESSAGE_TIMEOUT) && lastSmTimestamp > 0)
    // {
    // lastSmTimestamp = now;
    // return send(currentSmTermId, currentSmTail, currentWindowSize);
    // }
    }
    // invert the work count logic. We want to appear to be less busy once we send an SM
    return 1;
}||||||||/**
 * Called from the {@link DriverConductor}.
 *
 * @return number of work items processed.
 */
public int sendPendingStatusMessages(final long now) {
    /*
         * General approach is to check tail and see if it has moved enough to warrant sending an SM.
         * - send SM when termId has moved (i.e. buffer rotation of LossHandler - i.e. term completed)
         * - send SM when (currentTail - lastSmTail) > X% of window (the window gain)
         * - send SM when currentTail > lastTail && timeOfLastSM too long
         */
    final int currentSmTail = lossHandler.highestContiguousOffset();
    final long currentSmTermId = lossHandler.activeTermId();
    // send initial SM
    if (0 == lastSmTimestamp) {
        lastSmTimestamp = now;
        return sendStatusMessage(currentSmTermId, currentSmTail, currentWindowSize);
    }
    // if term has rotated for loss handler, then send an SM
    if (lossHandler.activeTermId() != lastSmTermId) {
        lastSmTimestamp = now;
        return sendStatusMessage(currentSmTermId, currentSmTail, currentWindowSize);
    }
    // made progress since last time we sent an SM, so may send
    if (currentSmTail > lastSmTail) {
        // see if we have made enough progress to make sense to send an SM
        if ((currentSmTail - lastSmTail) > currentWindowGain) {
            lastSmTimestamp = now;
            return sendStatusMessage(currentSmTermId, currentSmTail, currentWindowSize);
        }
    // lastSmTimestamp might be 0 due to being initialized, but if we have sent some, then fine.
    // if (now > (lastSmTimestamp + STATUS_MESSAGE_TIMEOUT) && lastSmTimestamp > 0)
    // {
    // lastSmTimestamp = now;
    // return send(currentSmTermId, currentSmTail, currentWindowSize);
    // }
    }
    // invert the work count logic. We want to appear to be less busy once we send an SM
    return 1;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(ReturnStmt
			(IntegerLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(ReturnStmt
			(IntegerLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

