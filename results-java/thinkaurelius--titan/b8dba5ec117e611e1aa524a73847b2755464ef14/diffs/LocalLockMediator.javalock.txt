/**
 * Acquire the lock specified by {@code kc}.
 * <p/>
 * <p/>
 * For any particular key-column, whatever value of {@code requestor} is
 * passed to this method must also be passed to the associated later call to
 * {@link #unlock(KeyColumn, ExpectedValueCheckingTransaction)}.
 * <p/>
 * If some requestor {@code r} calls this method on a KeyColumn {@code k}
 * and this method returns true, then subsequent calls to this method by
 * {@code r} on {@code l} merely attempt to update the {@code expiresAt}
 * timestamp. This differs from typical lock reentrance: multiple successful
 * calls to this method do not require an equal number of calls to
 * {@code #unlock()}. One {@code #unlock()} call is enough, no matter how
 * many times a {@code requestor} called {@code lock} beforehand. Note that
 * updating the timestamp may fail, in which case the lock is considered to
 * have expired and the calling context should assume it no longer holds the
 * lock specified by {@code kc}.
 * <p/>
 * The number of nanoseconds elapsed since the UNIX Epoch is not readily
 * available within the JVM. When reckoning expiration times, this method
 * uses the approximation implemented by
 * {@link com.thinkaurelius.titan.diskstorage.util.NanoTime#getApproxNSSinceEpoch(false)}.
 * <p/>
 * The current implementation of this method returns true when given an
 * {@code expiresAt} argument in the past. Future implementations may return
 * false instead.
 *
 * @param kc        lock identifier
 * @param requestor the object locking {@code kc}
 * @param expires   the absolute time since the UNIX epoch at which this lock will automatically expire
 * @param tu        the units of {@code expires}
 * @return true if the lock is acquired, false if it was not acquired
 */
public boolean lock(KeyColumn kc, T requestor, long expires, TimeUnit tu) {
    assert null != kc;
    assert null != requestor;
    AuditRecord<T> audit = new AuditRecord<T>(requestor, TimeUnit.NANOSECONDS.convert(expires, tu));
    AuditRecord<T> inmap = locks.putIfAbsent(kc, audit);
    boolean success = false;
    if (null == inmap) {
        // Uncontended lock succeeded
        if (log.isTraceEnabled()) {
            log.trace("New local lock created: {} namespace={} txn={}", new Object[] { kc, name, requestor });
        }
        success = true;
    } else if (inmap.equals(audit)) {
        // requestor has already locked kc; update expiresAt
        success = locks.replace(kc, inmap, audit);
        if (log.isTraceEnabled()) {
            if (success) {
                log.trace("Updated local lock expiration: {} namespace={} txn={} oldexp={} newexp={}", new Object[] { kc, name, requestor, inmap.expires, audit.expires });
            } else {
                log.trace("Failed to update local lock expiration: {} namespace={} txn={} oldexp={} newexp={}", new Object[] { kc, name, requestor, inmap.expires, audit.expires });
            }
        }
    } else if (inmap.expires <= Timestamps.NANO.getTime()) {
        // the recorded lock has expired; replace it
        success = locks.replace(kc, inmap, audit);
        if (log.isTraceEnabled()) {
            log.trace("Discarding expired lock: {} namespace={} txn={} expired={}", new Object[] { kc, name, inmap.holder, inmap.expires });
        }
    } else {
        // we lost to a valid lock
        if (log.isTraceEnabled()) {
            log.trace("Local lock failed: {} namespace={} txn={} (already owned by {})", new Object[] { kc, name, requestor, inmap });
        }
    }
    return success;
}||||||||/**
 * Acquire the lock specified by {@code kc}.
 * <p/>
 * <p/>
 * For any particular key-column, whatever value of {@code requestor} is
 * passed to this method must also be passed to the associated later call to
 * {@link #unlock(KeyColumn, ExpectedValueCheckingTransaction)}.
 * <p/>
 * If some requestor {@code r} calls this method on a KeyColumn {@code k}
 * and this method returns true, then subsequent calls to this method by
 * {@code r} on {@code l} merely attempt to update the {@code expiresAt}
 * timestamp. This differs from typical lock reentrance: multiple successful
 * calls to this method do not require an equal number of calls to
 * {@code #unlock()}. One {@code #unlock()} call is enough, no matter how
 * many times a {@code requestor} called {@code lock} beforehand. Note that
 * updating the timestamp may fail, in which case the lock is considered to
 * have expired and the calling context should assume it no longer holds the
 * lock specified by {@code kc}.
 * <p/>
 * The number of nanoseconds elapsed since the UNIX Epoch is not readily
 * available within the JVM. When reckoning expiration times, this method
 * uses the approximation implemented by
 * {@link com.thinkaurelius.titan.diskstorage.util.NanoTime#getApproxNSSinceEpoch(false)}.
 * <p/>
 * The current implementation of this method returns true when given an
 * {@code expiresAt} argument in the past. Future implementations may return
 * false instead.
 *
 * @param kc        lock identifier
 * @param requestor the object locking {@code kc}
 * @param expires   instant at which this lock will automatically expire
 * @return true if the lock is acquired, false if it was not acquired
 */
public boolean lock(KeyColumn kc, T requestor, Timepoint expires) {
    assert null != kc;
    assert null != requestor;
    AuditRecord<T> audit = new AuditRecord<T>(requestor, expires);
    AuditRecord<T> inmap = locks.putIfAbsent(kc, audit);
    boolean success = false;
    if (null == inmap) {
        // Uncontended lock succeeded
        if (log.isTraceEnabled()) {
            log.trace("New local lock created: {} namespace={} txn={}", new Object[] { kc, name, requestor });
        }
        success = true;
    } else if (inmap.equals(audit)) {
        // requestor has already locked kc; update expiresAt
        success = locks.replace(kc, inmap, audit);
        if (log.isTraceEnabled()) {
            if (success) {
                log.trace("Updated local lock expiration: {} namespace={} txn={} oldexp={} newexp={}", new Object[] { kc, name, requestor, inmap.expires, audit.expires });
            } else {
                log.trace("Failed to update local lock expiration: {} namespace={} txn={} oldexp={} newexp={}", new Object[] { kc, name, requestor, inmap.expires, audit.expires });
            }
        }
    } else if (0 > inmap.expires.compareTo(times.getTime())) {
        // the recorded lock has expired; replace it
        success = locks.replace(kc, inmap, audit);
        if (log.isTraceEnabled()) {
            log.trace("Discarding expired lock: {} namespace={} txn={} expired={}", new Object[] { kc, name, inmap.holder, inmap.expires });
        }
    } else {
        // we lost to a valid lock
        if (log.isTraceEnabled()) {
            log.trace("Local lock failed: {} namespace={} txn={} (already owned by {})", new Object[] { kc, name, requestor, inmap });
        }
    }
    return success;
}||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
		)
		(AssertStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						LineComment
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											(ArrayCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
												(ArrayInitializerExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(ArrayCreationLevel
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											(ArrayCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
												(ArrayInitializerExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(ArrayCreationLevel
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayInitializerExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(ArrayCreationLevel
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
		)
		(AssertStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						LineComment
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											(ArrayCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
												(ArrayInitializerExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(ArrayCreationLevel
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											(ArrayCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
												(ArrayInitializerExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(ArrayCreationLevel
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayInitializerExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(ArrayCreationLevel
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

