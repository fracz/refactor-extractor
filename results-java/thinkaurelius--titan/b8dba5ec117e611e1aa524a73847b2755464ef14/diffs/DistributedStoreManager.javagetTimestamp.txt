/**
 * This method attempts to generate Rid in the following three ways, in order,
 * returning the value produced by the first successful attempt in the sequence.
 * <p/>
 * <ol>
 * <li>
 * If {@code config} contains {@see GraphDatabaseConfiguration#INSTANCE_RID_RAW_KEY},
 * then read it as a String value.  Convert the String returned into a char[] and
 * call {@code org.apache.commons.codec.binary.Hex#decodeHex on the char[]}.  The
 * byte[] returned by {@code decodeHex} is then returned as Rid.
 * </li>
 * <li>
 * If {@code config} contains {@see GraphDatabaseConfiguration#INSTANCE_RID_SHORT_KEY},
 * then read it as a short value.  Call {@see java.net.InetAddress#getLocalHost()},
 * and on its return value call {@see java.net.InetAddress#getAddress()} to retrieve
 * the machine's IP address in byte[] form.  The returned Rid is a byte[] containing
 * the localhost address bytes in its lower indices and the short value in its
 * penultimate and final indices.
 * </li>
 * <li>
 * If both of the previous failed, then call
 * {@see java.lang.management.RuntimeMXBean#getName()} and then call
 * {@code String#getBytes()} on the returned value.  Return a Rid as described in the
 * previous point, replacing the short value with the byte[] representing the JVM name.
 * </li>
 * </ol>
 *
 * @param config commons config from which to read Rid-related keys
 * @return A byte array which should uniquely identify this machine
 */
// public static byte[] getRid(Configuration config) {
// Preconditions.checkArgument(config.has(UNIQUE_INSTANCE_ID));
// return config.get(UNIQUE_INSTANCE_ID).getBytes();
// 
// byte tentativeRid[] = null;
// 
// if (config.has(GraphDatabaseConfiguration.INSTANCE_RID_RAW)) {
// String ridText =
// config.get(GraphDatabaseConfiguration.INSTANCE_RID_RAW);
// try {
// tentativeRid = Hex.decodeHex(ridText.toCharArray());
// } catch (DecoderException e) {
// throw new TitanConfigurationException("Could not decode hex value", e);
// }
// 
// log.debug("Set rid from hex string: 0x{}", ridText);
// } else {
// final byte[] endBytes;
// 
// if (config.has(GraphDatabaseConfiguration.INSTANCE_RID_SHORT)) {
// 
// short s = config.get(
// GraphDatabaseConfiguration.INSTANCE_RID_SHORT);
// 
// endBytes = new byte[2];
// 
// endBytes[0] = (byte) ((s & 0x0000FF00) >> 8);
// endBytes[1] = (byte) (s & 0x000000FF);
// } else {
// //endBytes = ManagementFactory.getRuntimeMXBean().getName().getBytes();
// endBytes = new StringBuilder(String.valueOf(Thread.currentThread().getId()))
// .append("@")
// .append(ManagementFactory.getRuntimeMXBean().getName())
// .toString()
// .getBytes();
// }
// 
// byte[] addrBytes;
// try {
// addrBytes = Inet4Address.getLocalHost().getAddress();
// } catch (UnknownHostException e) {
// throw new TitanConfigurationException("Unknown host specified", e);
// }
// 
// tentativeRid = new byte[addrBytes.length + endBytes.length];
// System.arraycopy(addrBytes, 0, tentativeRid, 0, addrBytes.length);
// System.arraycopy(endBytes, 0, tentativeRid, addrBytes.length, endBytes.length);
// 
// if (log.isDebugEnabled()) {
// log.debug("Set rid: 0x{}", new String(Hex.encodeHex(tentativeRid)));
// }
// }
// 
// return tentativeRid;
// }
/**
 * Returns the {@link Timestamp} for a particular transaction
 * @param txh
 * @return
 */
protected Timestamp getTimestamp(StoreTransaction txh) {
    Long time = txh.getConfiguration().getTimestamp();
    if (null == time) {
        time = times.getTime();
    }
    // remove last bit
    time = time & 0xFFFFFFFFFFFFFFFEL;
    return new Timestamp(time | 1L, time);
}||||||||/**
 * This method attempts to generate Rid in the following three ways, in order,
 * returning the value produced by the first successful attempt in the sequence.
 * <p/>
 * <ol>
 * <li>
 * If {@code config} contains {@see GraphDatabaseConfiguration#INSTANCE_RID_RAW_KEY},
 * then read it as a String value.  Convert the String returned into a char[] and
 * call {@code org.apache.commons.codec.binary.Hex#decodeHex on the char[]}.  The
 * byte[] returned by {@code decodeHex} is then returned as Rid.
 * </li>
 * <li>
 * If {@code config} contains {@see GraphDatabaseConfiguration#INSTANCE_RID_SHORT_KEY},
 * then read it as a short value.  Call {@see java.net.InetAddress#getLocalHost()},
 * and on its return value call {@see java.net.InetAddress#getAddress()} to retrieve
 * the machine's IP address in byte[] form.  The returned Rid is a byte[] containing
 * the localhost address bytes in its lower indices and the short value in its
 * penultimate and final indices.
 * </li>
 * <li>
 * If both of the previous failed, then call
 * {@see java.lang.management.RuntimeMXBean#getName()} and then call
 * {@code String#getBytes()} on the returned value.  Return a Rid as described in the
 * previous point, replacing the short value with the byte[] representing the JVM name.
 * </li>
 * </ol>
 *
 * @param config commons config from which to read Rid-related keys
 * @return A byte array which should uniquely identify this machine
 */
// public static byte[] getRid(Configuration config) {
// Preconditions.checkArgument(config.has(UNIQUE_INSTANCE_ID));
// return config.get(UNIQUE_INSTANCE_ID).getBytes();
// 
// byte tentativeRid[] = null;
// 
// if (config.has(GraphDatabaseConfiguration.INSTANCE_RID_RAW)) {
// String ridText =
// config.get(GraphDatabaseConfiguration.INSTANCE_RID_RAW);
// try {
// tentativeRid = Hex.decodeHex(ridText.toCharArray());
// } catch (DecoderException e) {
// throw new TitanConfigurationException("Could not decode hex value", e);
// }
// 
// log.debug("Set rid from hex string: 0x{}", ridText);
// } else {
// final byte[] endBytes;
// 
// if (config.has(GraphDatabaseConfiguration.INSTANCE_RID_SHORT)) {
// 
// short s = config.get(
// GraphDatabaseConfiguration.INSTANCE_RID_SHORT);
// 
// endBytes = new byte[2];
// 
// endBytes[0] = (byte) ((s & 0x0000FF00) >> 8);
// endBytes[1] = (byte) (s & 0x000000FF);
// } else {
// //endBytes = ManagementFactory.getRuntimeMXBean().getName().getBytes();
// endBytes = new StringBuilder(String.valueOf(Thread.currentThread().getId()))
// .append("@")
// .append(ManagementFactory.getRuntimeMXBean().getName())
// .toString()
// .getBytes();
// }
// 
// byte[] addrBytes;
// try {
// addrBytes = Inet4Address.getLocalHost().getAddress();
// } catch (UnknownHostException e) {
// throw new TitanConfigurationException("Unknown host specified", e);
// }
// 
// tentativeRid = new byte[addrBytes.length + endBytes.length];
// System.arraycopy(addrBytes, 0, tentativeRid, 0, addrBytes.length);
// System.arraycopy(endBytes, 0, tentativeRid, addrBytes.length, endBytes.length);
// 
// if (log.isDebugEnabled()) {
// log.debug("Set rid: 0x{}", new String(Hex.encodeHex(tentativeRid)));
// }
// }
// 
// return tentativeRid;
// }
/**
 * Returns the {@link Timestamp} for a particular transaction
 * @param txh
 * @return
 */
protected Timestamp getTimestamp(StoreTransaction txh) {
    Timepoint txTime = txh.getConfiguration().getTimestamp();
    if (null == txTime) {
        txTime = times.getTime();
    }
    // return new Timestamp(txTime | 1L, txTime);
    return new Timestamp(txTime);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					(LongLiteralExpr
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(ObjectCreationExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(LongLiteralExpr
					)
				)
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

