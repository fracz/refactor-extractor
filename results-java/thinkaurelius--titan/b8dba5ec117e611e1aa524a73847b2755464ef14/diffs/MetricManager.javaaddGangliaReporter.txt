/**
 * Create a {@link GangliaReporter} attached to the Titan Metrics registry.
 * <p>
 * {@code groupOrHost} and {@code addressingMode} must be non-null. The
 * remaining non-primitive arguments may be null. If {@code protocol31} is
 * null, then true is assumed. Null values of {@code hostUUID} or
 * {@code spoof} are passed into the {@link GMetric} constructor, which
 * causes Ganglia to use its internal logic for generating a default UUID
 * and default reporting hostname (respectively).
 *
 * @param groupOrHost
 * the multicast group or unicast hostname to which Ganglia
 * events are sent
 * @param port
 * the port to which events are sent
 * @param addressingMode
 * whether to send events with multicast or unicast
 * @param ttl
 * multicast ttl (ignored for unicast)
 * @param protocol31
 * true to use Ganglia protocol version 3.1, false to use 3.0
 * @param hostUUID
 * uuid for the host
 * @param spoof
 * override this machine's IP/hostname as it appears on the
 * Ganglia server
 * @param reportIntervalInMS
 * milliseconds to wait before sending data to the ganglia
 * unicast host or multicast group
 * @throws IOException
 * when a {@link GMetric} can't be instantiated using the
 * provided arguments
 */
public synchronized void addGangliaReporter(String groupOrHost, int port, UDPAddressingMode addressingMode, int ttl, Boolean protocol31, UUID hostUUID, String spoof, long reportIntervalInMS) throws IOException {
    Preconditions.checkNotNull(groupOrHost);
    Preconditions.checkNotNull(addressingMode);
    if (null != gangliaReporter) {
        log.debug("Metrics GangliaReporter already active; not creating another");
        return;
    }
    if (null == protocol31)
        protocol31 = true;
    GMetric ganglia = new GMetric(groupOrHost, port, addressingMode, ttl, protocol31, hostUUID, spoof);
    GangliaReporter.Builder b = GangliaReporter.forRegistry(getRegistry());
    gangliaReporter = b.build(ganglia);
    gangliaReporter.start(reportIntervalInMS, TimeUnit.MILLISECONDS);
    log.info("Configured Ganglia Metrics reporter host={} interval={}ms port={} addrmode={} ttl={} proto31={} uuid={} spoof={}", new Object[] { groupOrHost, reportIntervalInMS, port, addressingMode, ttl, protocol31, hostUUID, spoof });
}||||||||/**
 * Create a {@link GangliaReporter} attached to the Titan Metrics registry.
 * <p>
 * {@code groupOrHost} and {@code addressingMode} must be non-null. The
 * remaining non-primitive arguments may be null. If {@code protocol31} is
 * null, then true is assumed. Null values of {@code hostUUID} or
 * {@code spoof} are passed into the {@link GMetric} constructor, which
 * causes Ganglia to use its internal logic for generating a default UUID
 * and default reporting hostname (respectively).
 *
 * @param groupOrHost
 * the multicast group or unicast hostname to which Ganglia
 * events are sent
 * @param port
 * the port to which events are sent
 * @param addressingMode
 * whether to send events with multicast or unicast
 * @param ttl
 * multicast ttl (ignored for unicast)
 * @param protocol31
 * true to use Ganglia protocol version 3.1, false to use 3.0
 * @param hostUUID
 * uuid for the host
 * @param spoof
 * override this machine's IP/hostname as it appears on the
 * Ganglia server
 * @param reportInterval
 * titme to wait before sending data to the ganglia
 * unicast host or multicast group
 * @throws IOException
 * when a {@link GMetric} can't be instantiated using the
 * provided arguments
 */
public synchronized void addGangliaReporter(String groupOrHost, int port, UDPAddressingMode addressingMode, int ttl, Boolean protocol31, UUID hostUUID, String spoof, Duration reportInterval) throws IOException {
    Preconditions.checkNotNull(groupOrHost);
    Preconditions.checkNotNull(addressingMode);
    if (null != gangliaReporter) {
        log.debug("Metrics GangliaReporter already active; not creating another");
        return;
    }
    if (null == protocol31)
        protocol31 = true;
    GMetric ganglia = new GMetric(groupOrHost, port, addressingMode, ttl, protocol31, hostUUID, spoof);
    GangliaReporter.Builder b = GangliaReporter.forRegistry(getRegistry());
    gangliaReporter = b.build(ganglia);
    gangliaReporter.start(reportInterval.getLength(SCHEDULING_TIME_UNIT), SCHEDULING_TIME_UNIT);
    log.info("Configured Ganglia Metrics reporter host={} interval={} port={} addrmode={} ttl={} proto31={} uuid={} spoof={}", new Object[] { groupOrHost, reportInterval, port, addressingMode, ttl, protocol31, hostUUID, spoof });
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(ArrayCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
					(ArrayInitializerExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(ArrayCreationLevel
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(ArrayCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
					(ArrayInitializerExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(ArrayCreationLevel
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

