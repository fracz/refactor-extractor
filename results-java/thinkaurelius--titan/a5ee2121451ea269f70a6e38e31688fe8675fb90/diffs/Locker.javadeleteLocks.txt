/**
 * Attempt to release every lock currently held by this instance.
 * <p>
 * Returns on success and throws an exception on failure.
 *
 * @param timeout
 * The maximum wallclock time to attempt locking in the face of
 * temporary failures (such as the lock being held by another
 * process) before giving up and throwing an exception
 * @param timeunits
 * The units of {@code timeout}
 * @throws PermanentLockingException
 * @throws TemporaryLockingException
 */
public void deleteLocks(StoreTransaction tx) throws StorageException;||||||||/**
 * Release every lock currently held by {@code tx}.
 * <p>
 * Returns on success and throws an exception on failure.
 *
 * @param tx
 * the transaction attempting to delete locks taken in previous
 * {@code writeLock(..., tx)} calls in which it was the
 * {@code tx} argument
 * @throws TemporaryLockingException
 * a failure likely to disappear if the call is retried
 * @throws PermanentLockingException
 * a failure unlikely to disappear if the call is retried
 */
public void deleteLocks(StoreTransaction tx) throws TemporaryLockingException, PermanentLockingException;||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

