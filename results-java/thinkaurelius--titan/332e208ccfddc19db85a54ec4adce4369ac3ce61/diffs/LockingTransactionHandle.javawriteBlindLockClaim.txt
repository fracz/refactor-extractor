/*
	 * This method first checks the local lock mediator to see whether
	 * another transaction in this process holds the lock described
	 * by this method's arguments.  If the local lock mediator determines
	 * that no other transaction holds the lock and assigns it to us,
	 * then we write a claim to the backing key-value store.  We do not
	 * yet check to see whether our locking claim is the most senior
	 * one present in the backing key-value store.  We also don't check
	 * whether the expectedValue matches the actual value stored at the
	 * key-column coordinates supplied.  These checks happen in
	 * #verifyAllLockClaims().
	 * <p>
	 * Once a lock is acquired in the local lock mediator and a claim
	 * written to the backing key-value store, this method appends a
	 * LockClaim object to the lockClaims field and then returns.
	 * <p>
	 * If we can't get the lock from the local lock mediator, then we
	 * throw a StorageException with a string message to that effect.
	 */
public void writeBlindLockClaim(LockConfig backer, ByteBuffer key, ByteBuffer column, ByteBuffer expectedValue) throws StorageException {
    LockClaim lc = new LockClaim(backer, key, column, expectedValue);
    // Check to see whether we already hold this lock
    if (lockClaims.contains(lc)) {
        log.trace("Skipping lock {}: already held", lc);
        return;
    }
    /* Check the local lock mediator.
		 *
		 * The timestamp calculated here is only approximate.  If it turns out that we
		 * spend longer than the expiration period attempting to finish the rest of
		 * this method, then there's a window of time in which the LocalLockMediator
		 * may tell other threads that our key-column target is unlocked.  Lock conflict
		 * is still detected in such cases during verifyAllLockClaims() below (it's
		 * just slower than when LocalLockMediator gives the correct answer).
		 *
		 * We'll also update the timestamp in the LocalLockMediator after we're done
		 * talking to the backend store.
		 *
		 * We use TimestampProvider.getApproxNSSinceEpoch()/1000 instead of the
		 * superficially equivalent System.currentTimeMillis() to get consistent timestamp
		 * rollovers.
		 */
    long tempts = TimestampProvider.getApproxNSSinceEpoch(false) + backer.getLockExpireMS() * 1000;
    if (!backer.getLocalLockMediator().lock(lc.getKc(), this, tempts)) {
        throw new PermanentLockingException("Lock could not be acquired because it is held by a local transaction [" + lc + "]");
    }
    /* Write lock to the backing store
		 *
		 * The key we write is a concatenation of the arguments key and column,
		 * prefixed by an int (4 bytes) representing the length of the argument key.
		 *
		 * The column we write is a concatenation of our rid and the timestamp.
		 */
    ByteBuffer lockKey = lc.getLockKey();
    ByteBuffer valBuf = ByteBuffer.allocate(4);
    valBuf.putInt(0).rewind();
    boolean ok = false;
    long ts = 0;
    try {
        for (int i = 0; i < backer.getLockRetryCount(); i++) {
            ts = TimestampProvider.getApproxNSSinceEpoch(false);
            Entry addition = new Entry(lc.getLockCol(ts, backer.getRid()), valBuf);
            long before = System.currentTimeMillis();
            backer.getLockStore().mutate(lockKey, Arrays.asList(addition), null, null);
            long after = System.currentTimeMillis();
            if (backer.getLockWaitMS() < after - before) {
                // Too slow
                // Delete lock claim and loop again
                ts = TimestampProvider.getApproxNSSinceEpoch(false);
                backer.getLockStore().mutate(lockKey, null, Arrays.asList(lc.getLockCol(ts, backer.getRid())), null);
            } else {
                ok = true;
                lastLockApplicationTimesMS.put(backer, before);
                lc.setTimestamp(ts);
                log.trace("Wrote lock: {}", lc);
                lockClaims.add(lc);
                return;
            }
        }
        throw new TemporaryLockingException("Lock failed: exceeded max timeouts [" + lc + "]");
    } finally {
        if (ok) {
            // Update the timeout
            assert 0 != ts;
            boolean expireTimeUpdated = backer.getLocalLockMediator().lock(lc.getKc(), this, ts + 1000 * backer.getLockExpireMS());
            if (!expireTimeUpdated)
                log.warn("Failed to update expiration time of local lock {}; is titan.storage.lock-expiry-time too low?");
        /*
				 * No action is immediately necessary even if we failed to re-lock locally.
				 *
				 * Any failure to re-lock locally will be detected later in verifyAllLockClaims().
				 */
        } else {
            backer.getLocalLockMediator().unlock(lc.getKc(), this);
        }
    }
}||||||||/*
	 * This method first checks the local lock mediator to see whether
	 * another transaction in this process holds the lock described
	 * by this method's arguments.  If the local lock mediator determines
	 * that no other transaction holds the lock and assigns it to us,
	 * then we write a claim to the backing key-value store.  We do not
	 * yet check to see whether our locking claim is the most senior
	 * one present in the backing key-value store.  We also don't check
	 * whether the expectedValue matches the actual value stored at the
	 * key-column coordinates supplied.  These checks happen in
	 * #verifyAllLockClaims().
	 * <p>
	 * Once a lock is acquired in the local lock mediator and a claim
	 * written to the backing key-value store, this method appends a
	 * LockClaim object to the lockClaims field and then returns.
	 * <p>
	 * If we can't get the lock from the local lock mediator, then we
	 * throw a StorageException with a string message to that effect.
	 */
public void writeBlindLockClaim(LockConfig backer, ByteBuffer key, ByteBuffer column, ByteBuffer expectedValue) throws StorageException {
    LockClaim lc = new LockClaim(backer, key, column, expectedValue);
    // Check to see whether we already hold this lock
    if (lockClaims.contains(lc)) {
        log.trace("Skipping lock {}: already held", lc);
        return;
    }
    /* Check the local lock mediator.
		 *
		 * The timestamp calculated here is only approximate.  If it turns out that we
		 * spend longer than the expiration period attempting to finish the rest of
		 * this method, then there's a window of time in which the LocalLockMediator
		 * may tell other threads that our key-column target is unlocked.  Lock conflict
		 * is still detected in such cases during verifyAllLockClaims() below (it's
		 * just slower than when LocalLockMediator gives the correct answer).
		 *
		 * We'll also update the timestamp in the LocalLockMediator after we're done
		 * talking to the backend store.
		 *
		 * We use TimestampProvider.getApproxNSSinceEpoch()/1000 instead of the
		 * superficially equivalent System.currentTimeMillis() to get consistent timestamp
		 * rollovers.
		 */
    long tempts = TimestampProvider.getApproxNSSinceEpoch(false) + backer.getLockExpireMS() * MILLION;
    if (!backer.getLocalLockMediator().lock(lc.getKc(), this, tempts)) {
        throw new PermanentLockingException("Lock could not be acquired because it is held by a local transaction [" + lc + "]");
    }
    /* Write lock to the backing store
		 *
		 * The key we write is a concatenation of the arguments key and column,
		 * prefixed by an int (4 bytes) representing the length of the argument key.
		 *
		 * The column we write is a concatenation of our rid and the timestamp.
		 */
    ByteBuffer lockKey = lc.getLockKey();
    ByteBuffer valBuf = ByteBuffer.allocate(4);
    valBuf.putInt(0).rewind();
    boolean ok = false;
    long tsNS = 0;
    try {
        for (int i = 0; i < backer.getLockRetryCount(); i++) {
            tsNS = TimestampProvider.getApproxNSSinceEpoch(false);
            Entry addition = new Entry(lc.getLockCol(tsNS, backer.getRid()), valBuf);
            long before = System.currentTimeMillis();
            backer.getLockStore().mutate(lockKey, Arrays.asList(addition), null, null);
            long after = System.currentTimeMillis();
            if (backer.getLockWaitMS() < after - before) {
                // Too slow
                // Delete lock claim and loop again
                tsNS = TimestampProvider.getApproxNSSinceEpoch(false);
                backer.getLockStore().mutate(lockKey, null, Arrays.asList(lc.getLockCol(tsNS, backer.getRid())), null);
            } else {
                ok = true;
                lastLockApplicationTimesMS.put(backer, before);
                lc.setTimestamp(tsNS);
                log.trace("Wrote lock: {}", lc);
                lockClaims.add(lc);
                return;
            }
        }
        throw new TemporaryLockingException("Lock failed: exceeded max timeouts [" + lc + "]");
    } finally {
        if (ok) {
            // Update the timeout
            assert 0 != tsNS;
            boolean expireTimeUpdated = backer.getLocalLockMediator().lock(lc.getKc(), this, tsNS + MILLION * backer.getLockExpireMS());
            if (!expireTimeUpdated)
                log.warn("Failed to update expiration time of local lock {}; is titan.storage.lock-expiry-time too low?");
        /*
				 * No action is immediately necessary even if we failed to re-lock locally.
				 *
				 * Any failure to re-lock locally will be detected later in verifyAllLockClaims().
				 */
        } else {
            backer.getLocalLockMediator().unlock(lc.getKc(), this);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							(BooleanLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ThisExpr
					)
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ThisExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(AssertStmt
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(ThisExpr
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(BinaryExpr
												(IntegerLiteralExpr
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
								NullLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(BooleanLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NullLiteralExpr
										(MethodCallExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(BlockComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							(BooleanLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ThisExpr
					)
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ThisExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(AssertStmt
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(ThisExpr
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(BinaryExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
								NullLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(BooleanLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NullLiteralExpr
										(MethodCallExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(BlockComment
	)
)

