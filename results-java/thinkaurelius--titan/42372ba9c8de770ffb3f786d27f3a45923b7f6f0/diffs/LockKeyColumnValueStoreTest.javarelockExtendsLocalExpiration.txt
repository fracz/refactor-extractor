@Test
public void relockExtendsLocalExpiration() throws StorageException, InterruptedException {
    /*
		 * This test is intrinsically racy and can emit false positives. Ther's
		 * no guarantee that the thread scheduler will put our test thread back
		 * on a core in a timely fashion after our Thread.sleep() argument
		 * elapses. In this case, we might wind up sleeping so long that the
		 * lock really does expire. Letting the lock expire and then acquiring a
		 * new lock is different from testing the reentering-extends-expiration
		 * property of a single lock. This test is nominally concerned with the
		 * latter case, but it can't guarantee which case it actually tests.
		 * Both cases are worth testing, but it would better if we could
		 * deterministically separate them into distinct methods or at least
		 * distinct assertions. As mentioned at the top, this conflation of
		 * cases is a problem because this test can give a false positive when
		 * one of these two cases is working and the other is broken.
		 */
    long start = System.currentTimeMillis();
    long targetDelta = (EXPIRE_MS + 50L) * 2;
    long target = start + targetDelta;
    int steps = 20;
    store1.acquireLock(k, k, null, host1tx1);
    for (int i = 0; i <= steps; i++) {
        if (target <= System.currentTimeMillis()) {
            break;
        }
        store1.acquireLock(k, k, null, host1tx1);
        Thread.sleep(targetDelta / steps);
    }
    try {
        store1.acquireLock(k, k, null, host1tx2);
    } catch (StorageException e) {
        assertTrue(e instanceof LockingException);
    }
}||||||||@Test
public void relockExtendsLocalExpiration() throws StorageException, InterruptedException {
    /*
		 * This test is intrinsically racy and can emit false positives. Ther's
		 * no guarantee that the thread scheduler will put our test thread back
		 * on a core in a timely fashion after our Thread.sleep() argument
		 * elapses. In this case, we might wind up sleeping so long that the
		 * lock really does expire. Letting the lock expire and then acquiring a
		 * new lock is different from testing the reentering-extends-expiration
		 * property of a single lock. This test is nominally concerned with the
		 * latter case, but it can't guarantee which case it actually tests.
		 * Both cases are worth testing, but it would better if we could
		 * deterministically separate them into distinct methods or at least
		 * distinct assertions. As mentioned at the top, this conflation of
		 * cases is a problem because this test can give a false positive when
		 * one of these two cases is working and the other is broken.
		 */
    long start = System.currentTimeMillis();
    long targetDelta = (EXPIRE_MS + 50L) * 2;
    long target = start + targetDelta;
    int steps = 20;
    store[0].acquireLock(k, k, null, tx[0][0]);
    for (int i = 0; i <= steps; i++) {
        if (target <= System.currentTimeMillis()) {
            break;
        }
        store[0].acquireLock(k, k, null, tx[0][0]);
        Thread.sleep(targetDelta / steps);
    }
    try {
        store[0].acquireLock(k, k, null, tx[0][1]);
    } catch (StorageException e) {
        assertTrue(e instanceof LockingException);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(LongLiteralExpr
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NullLiteralExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NullLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NullLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(LongLiteralExpr
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NullLiteralExpr
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					(ArrayAccessExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
				)
				SimpleName
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NullLiteralExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						SimpleName
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NullLiteralExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						SimpleName
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

