/**
 * {@inheritDoc}
 * <p>
 * If any store operation throws {@link PermanentStorageException}, then
 * this method attempts to delete any data associated with this
 * partially-written lock from the store (logging and discarding any
 * additional exceptions that might arise during the deletion attempt), and
 * then wraps the {@code PSE} in a {@link PermanentLockingException} and
 * throws that.
 * <p>
 * If any store operation throws {@link TemporaryStorageException}, then it
 * is logged and the operation is retried up to the configured retry limit.
 * If the retry limit is exceeded, then a cleanup attempt will be made as in
 * the {@code PermanentStorageException} case, and then the a new
 * {@link TemporaryLockingExceptino} is thrown. The
 * {@code TemporaryStorageException}s thrown and caught inside this method's
 * implementation will be logged but will be otherwise invisible to the
 * caller of this method.
 */
@Override
public void writeLock(KeyColumn lockID, StoreTransaction txh) throws StorageException {
    if (lockLocally(lockID, txh)) {
        boolean ok = false;
        try {
            tryLockRemotely(lockID, txh);
            // TODO thread unsafe and doesnt record txn
            uncheckedLocks.add(lockID);
            ok = true;
        } catch (TemporaryStorageException tse) {
            throw new TemporaryLockingException(tse);
        } catch (AssertionError ae) {
            // Concession to ease testing
            throw ae;
        } catch (Throwable t) {
            throw new PermanentLockingException(t);
        } finally {
            if (!ok)
                unlockLocally(lockID, txh);
        }
    } else {
        // Fail immediately with no retries on local contention
        throw new TemporaryLockingException("Local lock contention");
    }
}||||||||/**
 * {@inheritDoc}
 * <p>
 * If any store operation throws {@link PermanentStorageException}, then
 * this method attempts to delete any data associated with this
 * partially-written lock from the store (logging and discarding any
 * additional exceptions that might arise during the deletion attempt), and
 * then wraps the {@code PSE} in a {@link PermanentLockingException} and
 * throws that.
 * <p>
 * If any store operation throws {@link TemporaryStorageException}, then it
 * is logged and the operation is retried up to the configured retry limit.
 * If the retry limit is exceeded, then a cleanup attempt will be made as in
 * the {@code PermanentStorageException} case, and then the a new
 * {@link TemporaryLockingExceptino} is thrown. The
 * {@code TemporaryStorageException}s thrown and caught inside this method's
 * implementation will be logged but will be otherwise invisible to the
 * caller of this method.
 */
@Override
public void writeLock(KeyColumn lockID, StoreTransaction txh) throws StorageException {
    if (lockLocally(lockID, txh)) {
        boolean ok = false;
        boolean skipUnlock = false;
        try {
            tryLockRemotely(lockID, txh);
            // TODO thread unsafe and doesnt record txn
            uncheckedLocks.add(lockID);
            ok = true;
        } catch (TemporaryStorageException tse) {
            throw new TemporaryLockingException(tse);
        } catch (AssertionError ae) {
            skipUnlock = true;
            // Concession to ease testing
            throw ae;
        } catch (Throwable t) {
            throw new PermanentLockingException(t);
        } finally {
            if (!ok && !skipUnlock)
                unlockLocally(lockID, txh);
        }
    } else {
        // Fail immediately with no retries on local contention
        throw new TemporaryLockingException("Local lock contention");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ThrowStmt
								NameExpr
									SimpleName
								LineComment
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(ThrowStmt
								NameExpr
									SimpleName
								LineComment
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(UnaryExpr
									NameExpr
										SimpleName
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

