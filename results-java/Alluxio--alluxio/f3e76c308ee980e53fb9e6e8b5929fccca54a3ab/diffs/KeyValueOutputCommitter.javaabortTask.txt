/**
 * {@inheritDoc}
 * <p>
 * Deletes the completed key-value stores under the task's temporary output directory, and then
 * calls {@link FileOutputCommitter#abortTask(TaskAttemptContext)}.
 */
@Override
public void abortTask(TaskAttemptContext context) throws IOException {
    for (TachyonURI tempStoreUri : getTaskTemporaryStores(context.getJobConf())) {
        try {
            KEY_VALUE_STORES.delete(tempStoreUri);
        } catch (FileDoesNotExistException e) {
        // The goal of deleting the store is to cleanup directories before aborting the task, since
        // the store directory does not exist, it meets the goal, nothing needs to be done.
        } catch (TachyonException e) {
            throw new IOException(e);
        }
    }
    super.abortTask(context);
}||||||||/**
 * {@inheritDoc}
 * <p>
 * Deletes the completed key-value stores under the task's temporary output directory, and then
 * calls {@link FileOutputCommitter#abortTask(TaskAttemptContext)}.
 */
@Override
public void abortTask(TaskAttemptContext context) throws IOException {
    for (TachyonURI tempStoreUri : getTaskTemporaryStores(context.getJobConf())) {
        try {
            KEY_VALUE_STORES.delete(tempStoreUri);
        } catch (TachyonException e) {
            throw new IOException(e);
        }
    }
    super.abortTask(context);
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(SuperExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(SuperExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

