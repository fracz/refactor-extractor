/**
 * Handles IO exceptions thrown in response to the worker cache request. Cache stream is closed or
 * cancelled after logging some messages about the exceptions.
 *
 * @param e the exception to handle
 */
private void handleCacheStreamException(IOException e) {
    if (Throwables.getRootCause(e) instanceof AlreadyExistsException) {
        // This can happen if there are two readers trying to cache the same block. The first one
        // created the block (either as temp block or committed block). The second sees this
        // exception.
        LOG.info("The block with ID {} is already stored in the target worker, canceling the cache " + "request.", mPositionState.getBlockId());
    } else {
        LOG.warn("The block with ID {} could not be cached into Alluxio storage: {}", mPositionState.getBlockId(), e.toString());
    }
    closeOrCancelCacheStream();
}||||||||/**
 * Handles IO exceptions thrown in response to the worker cache request. Cache stream is closed or
 * cancelled after logging some messages about the exceptions.
 *
 * @param e the exception to handle
 */
private void handleCacheStreamException(IOException e) {
    if (Throwables.getRootCause(e) instanceof AlreadyExistsException) {
        // This can happen if there are two readers trying to cache the same block. The first one
        // created the block (either as temp block or committed block). The second sees this
        // exception.
        LOG.info("The block with ID {} is already stored in the target worker, canceling the cache " + "request.", mCurrentBlockId);
    } else {
        LOG.warn("The block with ID {} could not be cached into Alluxio storage: {}", mCurrentBlockId, e.toString());
    }
    closeOrCancelCacheStream();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

