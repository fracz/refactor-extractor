/**
 * Seeks to a file position with partial caching if needed. Blocks are cached even if they are not
 * fully read. This is only called by {@link FileInStream#seek}.
 *
 * The seek could involve at most two blocks: the current block and the target block. And it's
 * possible that the current block and the target block are the same block when the seek is within
 * the same block.
 *
 * The behavior for the current block:
 * <ol>
 * <li>If the current block is already available in the local worker, then the caching of the
 * current block is not needed. And if the seek position is within the current block, directly
 * move the position to the seek position. Otherwise the position is moved outside the current
 * block.</li>
 * <li>If the current block is not available locally, then the partial caching is needed. And data
 * needs to read from the current position till the seek position, when the position is within the
 * current block, otherwise reads the rest of the current block.</li>
 * <li>However, a caveat is that if this is the first seek before any data is read from the file
 * and this seeks is outside the first block, then the first block should not be cached.</li>
 * <li>Lastly, if the current block is from remote worker and there is no local worker then the
 * caching is not needed</li>
 * </ol>
 *
 * The behavior on the target block:
 * <ol>
 * <li>If the target block is already available in the local worker or it's from remote worker but
 * no local worker available, then the caching on the target block is not needed. Directly move
 * the position to the seek position.</li>
 * <li>Otherwise data from the beginning of the block till the seek position needs to be read and
 * cached.</li>
 * </ol>
 *
 * Invariant: if the current block is to be cached, [0, mPos) should have been cached already.
 *
 * @param pos The position to seek to. It is guaranteed to be valid (pos >= 0 && pos != mPos &&
 * pos <= mFileLength).
 */
private void seekInternalWithCachingPartiallyReadBlock(long pos) throws IOException {
    // Precompute this because mPos will be updated several times in this function.
    final boolean isInCurrentBlock = mPositionState.isInCurrentBlock(pos);
    if (isInCurrentBlock) {
        if (isReadFromLocalWorker()) {
            // no need to partial cache the current block, and the seek is within the block
            // so directly seeks to position.
            mPositionState.setPos(pos);
            if (mCurrentBlockInStream != null) {
                mCurrentBlockInStream.seek(mPositionState.getPos() % mBlockSize);
            } else {
                Preconditions.checkState(remaining() == 0);
            }
            return;
        }
    }
    // cache the current block if neither of these conditions hold:
    // (1) this is the first seek before any read, and the seek is outside the first block
    // (2) the in stream reads from the local worker
    // (3) the in stream reads from a remote worker but there is no local worker
    boolean firstSeekOutsideFirstBlock = mPositionState.getPos() == 0 && mCurrentBlockInStream == null && !isInCurrentBlock;
    if (!firstSeekOutsideFirstBlock && canCacheToLocalWorker()) {
        // Make sure that mCurrentBlockInStream and mCurrentCacheStream is updated.
        // mPos is not updated here.
        updateStreams();
        // block.
        if (isInCurrentBlock && pos > mPositionState.getPos()) {
            readCurrentBlockToPos(pos);
        } else {
            readCurrentBlockToEnd();
        }
        // enabled for this block.
        if (mPositionState.getPos() == pos) {
            return;
        }
        // The early return above guarantees that we won't close an incomplete cache stream.
        Preconditions.checkState(mCurrentCacheStream == null || mCurrentCacheStream.remaining() == 0);
        closeOrCancelCacheStream();
    }
    // lastly handle the target block
    // the seek is outside the current block, seek to the beginning of that block first
    mPositionState.setPos(pos / mBlockSize * mBlockSize);
    updateStreams();
    if (canCacheToLocalWorker()) {
        // cache till the seek position of the block unless
        // (1) the in stream reads from the local worker
        // (2) the in stream reads from a remote worker but there is no local worker
        readCurrentBlockToPos(pos);
    } else if (mCurrentBlockInStream != null) {
        // otherwise directly seek to the position
        seekInternal(pos);
    } else {
        Preconditions.checkState(remaining() == 0);
    }
}||||||||/**
 * Seeks to a file position with partial caching if needed. Blocks are cached even if they are not
 * fully read. This is only called by {@link FileInStream#seek}.
 *
 * The seek could involve at most two blocks: the current block and the target block. And it's
 * possible that the current block and the target block are the same block when the seek is within
 * the same block.
 *
 * The behavior for the current block:
 * <ol>
 * <li>If the current block is already available in the local worker, then the caching of the
 * current block is not needed. And if the seek position is within the current block, directly
 * move the position to the seek position. Otherwise the position is moved outside the current
 * block.</li>
 * <li>If the current block is not available locally, then the partial caching is needed. And data
 * needs to read from the current position till the seek position, when the position is within the
 * current block, otherwise reads the rest of the current block.</li>
 * <li>However, a caveat is that if this is the first seek before any data is read from the file
 * and this seeks is outside the first block, then the first block should not be cached.</li>
 * <li>Lastly, if the current block is from remote worker and there is no local worker then the
 * caching is not needed</li>
 * </ol>
 *
 * The behavior on the target block:
 * <ol>
 * <li>If the target block is already available in the local worker or it's from remote worker but
 * no local worker available, then the caching on the target block is not needed. Directly move
 * the position to the seek position.</li>
 * <li>Otherwise data from the beginning of the block till the seek position needs to be read and
 * cached.</li>
 * </ol>
 *
 * Invariant: if the current block is to be cached, [0, mPos) should have been cached already.
 *
 * @param pos The position to seek to. It is guaranteed to be valid (pos >= 0 && pos != mPos &&
 * pos <= mFileLength).
 */
private void seekInternalWithCachingPartiallyReadBlock(long pos) throws IOException {
    // Precompute this because mPos will be updated several times in this function.
    final boolean isInCurrentBlock = (pos >= mCurrentBlockStartPos) && (pos < mCurrentBlockEndPos);
    if (isInCurrentBlock) {
        if (isReadFromLocalWorker()) {
            // no need to partial cache the current block, and the seek is within the block
            // so directly seeks to position.
            mPositionState.setPos(pos);
            if (mCurrentBlockInStream != null) {
                mCurrentBlockInStream.seek(mPositionState.getPos() % mBlockSize);
            } else {
                Preconditions.checkState(remaining() == 0);
            }
            return;
        }
    }
    // cache the current block if neither of these conditions hold:
    // (1) this is the first seek before any read, and the seek is outside the first block
    // (2) the in stream reads from the local worker
    // (3) the in stream reads from a remote worker but there is no local worker
    boolean firstSeekOutsideFirstBlock = mPositionState.getPos() == 0 && mCurrentBlockInStream == null && !isInCurrentBlock;
    if (!firstSeekOutsideFirstBlock && canCacheToLocalWorker()) {
        // Make sure that mCurrentBlockInStream and mCurrentCacheStream is updated.
        // mPos is not updated here.
        updateStreams();
        // block.
        if (isInCurrentBlock && pos > mPositionState.getPos()) {
            readCurrentBlockToPos(pos);
        } else {
            readCurrentBlockToEnd();
        }
        // enabled for this block.
        if (mPositionState.getPos() == pos) {
            return;
        }
        // The early return above guarantees that we won't close an incomplete cache stream.
        Preconditions.checkState(mCurrentCacheStream == null || mCurrentCacheStream.remaining() == 0);
        closeOrCancelCacheStream();
    }
    // lastly handle the target block
    // the seek is outside the current block, seek to the beginning of that block first
    mPositionState.setPos(pos / mBlockSize * mBlockSize);
    updateStreams();
    if (canCacheToLocalWorker()) {
        // cache till the seek position of the block unless
        // (1) the in stream reads from the local worker
        // (2) the in stream reads from a remote worker but there is no local worker
        readCurrentBlockToPos(pos);
    } else if (mCurrentBlockInStream != null) {
        // otherwise directly seek to the position
        seekInternal(pos);
    } else {
        Preconditions.checkState(remaining() == 0);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ReturnStmt
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ReturnStmt
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

