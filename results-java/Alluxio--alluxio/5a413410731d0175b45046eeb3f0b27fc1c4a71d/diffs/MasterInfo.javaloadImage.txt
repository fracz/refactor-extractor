/**
 * Load the image from <code>parser</code>, which is created based on the <code>path</code>.
 * Assume this blocks the whole MasterInfo.
 *
 * @param parser
 * the JsonParser to load the image
 * @param path
 * the file to load the image
 * @throws IOException
 */
public void loadImage(JsonParser parser, String path) throws IOException {
    while (true) {
        Element ele;
        try {
            ele = parser.readValueAs(Element.class);
            LOG.debug("Read Element: " + ele);
        } catch (IOException e) {
            // Unfortunately brittle, but Jackson rethrows EOF with this message.
            if (e.getMessage().contains("end-of-input")) {
                break;
            } else {
                throw e;
            }
        }
        switch(ele.type) {
            case Version:
                {
                    if (ele.getInt("version") != Constants.JOURNAL_VERSION) {
                        throw new IOException("Image " + path + " has journal version " + ele.getInt("version") + " . The system has verion " + Constants.JOURNAL_VERSION);
                    }
                    break;
                }
            case Checkpoint:
                {
                    mInodeCounter.set(ele.getInt("inodeCounter"));
                    mCheckpointInfo.updateEditTransactionCounter(ele.getLong("editTransactionCounter"));
                    mCheckpointInfo.updateDependencyCounter(ele.getInt("dependencyCounter"));
                    break;
                }
            case Dependency:
                {
                    Dependency dep = Dependency.loadImage(ele);
                    mDependencies.put(dep.ID, dep);
                    if (!dep.hasCheckpointed()) {
                        mUncheckpointedDependencies.add(dep.ID);
                    }
                    for (int parentDependencyId : dep.PARENT_DEPENDENCIES) {
                        mDependencies.get(parentDependencyId).addChildrenDependency(dep.ID);
                    }
                    break;
                }
            case InodeFile:
                {
                    Inode inode = InodeFile.loadImage(ele);
                    // themselves. Fix this.
                    if (inode.getId() > mInodeCounter.get()) {
                        mInodeCounter.set(inode.getId());
                    }
                    addToInodeMap(inode, mInodes);
                    recomputePinnedFiles(inode, Optional.<Boolean>absent());
                    if (inode.getId() == 1) {
                        mRoot = (InodeFolder) inode;
                    }
                    break;
                }
            case InodeFolder:
                {
                    Inode inode = InodeFolder.loadImage(parser, ele);
                    // themselves. Fix this.
                    if (inode.getId() > mInodeCounter.get()) {
                        mInodeCounter.set(inode.getId());
                    }
                    addToInodeMap(inode, mInodes);
                    recomputePinnedFiles(inode, Optional.<Boolean>absent());
                    if (inode.getId() == 1) {
                        mRoot = (InodeFolder) inode;
                    }
                    break;
                }
            case RawTable:
                {
                    mRawTables.loadImage(ele);
                    break;
                }
            default:
                throw new IOException("Invalid element type " + ele);
        }
    }
}||||||||/**
 * Load the image from <code>parser</code>, which is created based on the <code>path</code>.
 * Assume this blocks the whole MasterInfo.
 *
 * @param parser
 * the JsonParser to load the image
 * @param path
 * the file to load the image
 * @throws IOException
 */
public void loadImage(JsonParser parser, String path) throws IOException {
    while (true) {
        Element ele;
        try {
            ele = parser.readValueAs(Element.class);
            LOG.debug("Read Element: " + ele);
        } catch (IOException e) {
            // Unfortunately brittle, but Jackson rethrows EOF with this message.
            if (e.getMessage().contains("end-of-input")) {
                break;
            } else {
                throw e;
            }
        }
        switch(ele.type) {
            case Version:
                {
                    if (ele.getInt("version") != Constants.JOURNAL_VERSION) {
                        throw new IOException("Image " + path + " has journal version " + ele.getInt("version") + " . The system has verion " + Constants.JOURNAL_VERSION);
                    }
                    break;
                }
            case Checkpoint:
                {
                    mInodeCounter.set(ele.getInt("inodeCounter"));
                    mCheckpointInfo.updateEditTransactionCounter(ele.getLong("editTransactionCounter"));
                    mCheckpointInfo.updateDependencyCounter(ele.getInt("dependencyCounter"));
                    break;
                }
            case Dependency:
                {
                    Dependency dep = Dependency.loadImage(ele);
                    mDependencies.put(dep.ID, dep);
                    if (!dep.hasCheckpointed()) {
                        mUncheckpointedDependencies.add(dep.ID);
                    }
                    for (int parentDependencyId : dep.PARENT_DEPENDENCIES) {
                        mDependencies.get(parentDependencyId).addChildrenDependency(dep.ID);
                    }
                    break;
                }
            case InodeFile:
                {
                    // This element should not be loaded here. It should be loaded by InodeFolder.
                    throw new IOException("Invalid element type " + ele);
                }
            case InodeFolder:
                {
                    Inode inode = InodeFolder.loadImage(parser, ele);
                    addToInodeMap(inode, mInodes);
                    recomputePinnedFiles(inode, Optional.<Boolean>absent());
                    if (inode.getId() != 1) {
                        throw new IOException("Invalid element type " + ele);
                    }
                    mRoot = (InodeFolder) inode;
                    break;
                }
            case RawTable:
                {
                    mRawTables.loadImage(ele);
                    break;
                }
            default:
                throw new IOException("Invalid element type " + ele);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ThrowStmt
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(BreakStmt
									)
								)
								LineComment
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
															)
															StringLiteralExpr
														)
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ForeachStmt
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ThrowStmt
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(BreakStmt
									)
								)
								LineComment
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
															)
															StringLiteralExpr
														)
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ForeachStmt
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								LineComment
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BreakStmt
							)
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

