/**
 * Implements file deletion.
 *
 * @param fileId the file id
 * @param recursive if the file id identifies a directory, this flag specifies whether the
 * directory content should be deleted recursively
 * @param replayed whether the operation is a result of replaying the journal
 * @param opTimeMs the time of the operation
 * @return
 * @throws FileDoesNotExistException if a non-existent file is encountered
 * @throws InvalidPathException if an invalid path is encountered
 * @throws IOException if an I/O error is encountered
 */
boolean deleteFileInternal(long fileId, boolean recursive, boolean replayed, long opTimeMs) throws FileDoesNotExistException, InvalidPathException, IOException {
    // This function should only be called from within synchronized (mInodeTree) blocks.
    // 
    // TODO(jiri): A crash after any UFS object is deleted and before the delete operation is
    // journaled will result in an inconsistency between Tachyon and UFS.
    Inode inode = mInodeTree.getInodeById(fileId);
    if (inode == null) {
        return true;
    }
    if (inode.isDirectory() && !recursive && ((InodeDirectory) inode).getNumberOfChildren() > 0) {
        // true
        return false;
    }
    if (mInodeTree.isRootId(inode.getId())) {
        // The root cannot be deleted.
        return false;
    }
    List<Inode> delInodes = new ArrayList<Inode>();
    delInodes.add(inode);
    if (inode.isDirectory()) {
        delInodes.addAll(mInodeTree.getInodeChildrenRecursive((InodeDirectory) inode));
    }
    // file, we deal with the checkpoints and blocks as well.
    for (int i = delInodes.size() - 1; i >= 0; i--) {
        Inode delInode = delInodes.get(i);
        // Currently, it will result in an inconsistency between Tachyon and UFS.
        if (!replayed && delInode.isPersisted()) {
            // Delete the file in the under file system.
            String ufsPath = mMountTable.resolve(mInodeTree.getPath(delInode)).toString();
            UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());
            if (!ufs.exists(ufsPath)) {
                LOG.warn("File does not exist the underfs: " + ufsPath);
            } else if (!ufs.delete(ufsPath, true)) {
                LOG.error("Failed to delete " + ufsPath);
                return false;
            }
        }
        if (delInode.isFile()) {
            // Remove corresponding blocks from workers.
            mBlockMaster.removeBlocks(((InodeFile) delInode).getBlockIds());
        }
        mInodeTree.deleteInode(delInode, opTimeMs);
    }
    MasterContext.getMasterSource().incFilesDeleted(delInodes.size());
    return true;
}||||||||/**
 * Implements file deletion.
 *
 * @param fileId the file id
 * @param recursive if the file id identifies a directory, this flag specifies whether the
 * directory content should be deleted recursively
 * @param replayed whether the operation is a result of replaying the journal
 * @param opTimeMs the time of the operation
 * @return
 * @throws FileDoesNotExistException if a non-existent file is encountered
 * @throws IOException if an I/O error is encountered
 */
boolean deleteFileInternal(long fileId, boolean recursive, boolean replayed, long opTimeMs) throws FileDoesNotExistException, IOException {
    // This function should only be called from within synchronized (mInodeTree) blocks.
    // 
    // TODO(jiri): A crash after any UFS object is deleted and before the delete operation is
    // journaled will result in an inconsistency between Tachyon and UFS.
    Inode inode = mInodeTree.getInodeById(fileId);
    if (inode == null) {
        return true;
    }
    if (inode.isDirectory() && !recursive && ((InodeDirectory) inode).getNumberOfChildren() > 0) {
        // true
        return false;
    }
    if (mInodeTree.isRootId(inode.getId())) {
        // The root cannot be deleted.
        return false;
    }
    List<Inode> delInodes = new ArrayList<Inode>();
    delInodes.add(inode);
    if (inode.isDirectory()) {
        delInodes.addAll(mInodeTree.getInodeChildrenRecursive((InodeDirectory) inode));
    }
    // file, we deal with the checkpoints and blocks as well.
    for (int i = delInodes.size() - 1; i >= 0; i--) {
        Inode delInode = delInodes.get(i);
        // Currently, it will result in an inconsistency between Tachyon and UFS.
        if (!replayed && delInode.isPersisted()) {
            // Delete the file in the under file system.
            try {
                String ufsPath = mMountTable.resolve(mInodeTree.getPath(delInode)).toString();
                UnderFileSystem ufs = UnderFileSystem.get(ufsPath, MasterContext.getConf());
                if (!ufs.exists(ufsPath)) {
                    LOG.warn("File does not exist the underfs: " + ufsPath);
                } else if (!ufs.delete(ufsPath, true)) {
                    LOG.error("Failed to delete " + ufsPath);
                    return false;
                }
            } catch (InvalidPathException e) {
                LOG.warn(e.getMessage());
            }
        }
        if (delInode.isFile()) {
            // Remove corresponding blocks from workers.
            mBlockMaster.removeBlocks(((InodeFile) delInode).getBlockIds());
        }
        mInodeTree.deleteInode(delInode, opTimeMs);
    }
    MasterContext.getMasterSource().incFilesDeleted(delInodes.size());
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(EnclosedExpr
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										(UnaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							LineComment
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(EnclosedExpr
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

