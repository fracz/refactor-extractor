/**
 * Frees a file.
 *
 * @param fileId the file id
 * @param recursive whether free the file recursively (when it is a directory)
 * @return whether operation succeeded or not
 * @throws FileDoesNotExistException if the file does not exist
 * @throws IOException if an I/O error occurs
 */
public synchronized boolean free(long fileId, boolean recursive) throws IOException, FileDoesNotExistException {
    int retry = 0;
    while (!mClosed && (retry++) <= RPC_MAX_NUM_RETRY) {
        connect();
        try {
            return mClient.free(fileId, recursive);
        } catch (FileDoesNotExistException e) {
            throw e;
        } catch (TException e) {
            LOG.error(e.getMessage(), e);
            mConnected = false;
        }
    }
    throw new IOException("Failed after " + retry + " retries.");
}||||||||/**
 * Frees a file.
 *
 * @param fileId the file id
 * @param recursive whether free the file recursively (when it is a directory)
 * @return whether operation succeeded or not
 * @throws IOException if an I/O error occurs
 * @throws TachyonException if a Tachyon error occurs
 */
public synchronized boolean free(long fileId, boolean recursive) throws IOException, TachyonException {
    int retry = 0;
    while (!mClosed && (retry++) <= RPC_MAX_NUM_RETRY) {
        connect();
        try {
            return mClient.free(fileId, recursive);
        } catch (TachyonTException e) {
            throw new TachyonException(e);
        } catch (TException e) {
            LOG.error(e.getMessage(), e);
            mConnected = false;
        }
    }
    throw new IOException("Failed after " + retry + " retries.");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								NameExpr
									SimpleName
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(EnclosedExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(EnclosedExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

