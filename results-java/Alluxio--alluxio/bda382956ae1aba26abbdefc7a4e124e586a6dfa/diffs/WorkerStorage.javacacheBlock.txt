/**
 * Notify the worker the block is cached.
 *
 * This call is called remotely from {@link tachyon.client.TachyonFS#cacheBlock(long)} which is
 * only ever called from {@link tachyon.client.BlockOutStream#close()} (though its a public api so
 * anyone could call it). There are a few interesting preconditions for this to work.
 *
 * 1) Client process writes to files locally under a tachyon defined temp directory. 2) Worker
 * process is on the same node as the client 3) Client is talking to the local worker directly
 *
 * If all conditions are true, then and only then can this method ever be called; all operations
 * work on local files.
 *
 * @param userId The user id of the client who send the notification
 * @param blockId The id of the block
 * @throws FileDoesNotExistException
 * @throws SuspectedFileSizeException
 * @throws BlockInfoException
 * @throws IOException
 */
public void cacheBlock(long userId, long blockId) throws FileDoesNotExistException, SuspectedFileSizeException, BlockInfoException, IOException {
    StorageDir storageDir = mTempBlockLocation.remove(new Pair<Long, Long>(userId, blockId));
    if (storageDir == null) {
        throw new FileDoesNotExistException("Block doesn't exist! blockId:" + blockId);
    }
    mUserIdToTempBlockIds.remove(userId, blockId);
    boolean result = false;
    try {
        result = storageDir.cacheBlock(userId, blockId);
    } catch (IOException e) {
        throw new FileDoesNotExistException("Failed to cache block! blockId:" + blockId);
    }
    if (result) {
        long blockSize = storageDir.getBlockSize(blockId);
        mMasterClient.worker_cacheBlock(mWorkerId, getUsedBytes(), storageDir.getStorageDirId(), blockId, blockSize);
    }
}||||||||/**
 * Notify the worker the block is cached.
 *
 * This call is called remotely from {@link tachyon.client.TachyonFS#cacheBlock(long)} which is
 * only ever called from {@link tachyon.client.BlockOutStream#close()} (though its a public api so
 * anyone could call it). There are a few interesting preconditions for this to work.
 *
 * 1) Client process writes to files locally under a tachyon defined temp directory. 2) Worker
 * process is on the same node as the client 3) Client is talking to the local worker directly
 *
 * If all conditions are true, then and only then can this method ever be called; all operations
 * work on local files.
 *
 * @param userId The user id of the client who send the notification
 * @param blockId The id of the block
 * @throws FileDoesNotExistException
 * @throws SuspectedFileSizeException
 * @throws BlockInfoException
 * @throws IOException
 */
public void cacheBlock(long userId, long blockId) throws FileDoesNotExistException, SuspectedFileSizeException, BlockInfoException, IOException {
    StorageDir storageDir = mTempBlockLocation.remove(new Pair<Long, Long>(userId, blockId));
    if (storageDir == null) {
        throw new FileDoesNotExistException("Block doesn't exist! blockId:" + blockId);
    }
    mUserIdToTempBlockIds.remove(userId, blockId);
    boolean result = false;
    try {
        result = storageDir.cacheBlock(userId, blockId);
    } catch (IOException e) {
        throw new FileDoesNotExistException("Failed to cache block! blockId:" + blockId);
    }
    if (result) {
        long blockSize = storageDir.getBlockSize(blockId);
        mMasterClient.worker_cacheBlock(mWorkerId, getUsedBytesByAlias().get(StorageDirId.getStorageLevelAliasValue(storageDir.getStorageDirId()) - 1), storageDir.getStorageDirId(), blockId, blockSize);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

