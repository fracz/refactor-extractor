/**
 * Binds the given source to a View lifecycle.
 * <p>
 * Specifically, when the View detaches from the window, the sequence will be completed.
 * <p>
 * Use with {@link Observable#compose(Observable.Transformer)}:
 * {@code source.compose(RxLifecycleAndroid.bindView(lifecycle)).subscribe()}
 * <p>
 * Warning: you should make sure to use the returned Transformer on the main thread,
 * since we're binding to a View (which only allows binding on the main thread).
 *
 * @param view the view to bind the source sequence to
 * @return a reusable {@link Observable.Transformer} that unsubscribes the source during the View lifecycle
 */
@NonNull
@CheckResult
public static <T> LifecycleTransformer<T> bindView(@NonNull final View view) {
    checkNotNull(view, "view == null");
    return bind(RxView.detaches(view));
}||||||||/**
 * Binds the given source to a View lifecycle.
 * <p>
 * Specifically, when the View detaches from the window, the sequence will be completed.
 * <p>
 * Use with {@link Observable#compose(ObservableTransformer)}:
 * {@code source.compose(RxLifecycleAndroid.bindView(lifecycle)).subscribe()}
 * <p>
 * Warning: you should make sure to use the returned Transformer on the main thread,
 * since we're binding to a View (which only allows binding on the main thread).
 *
 * @param view the view to bind the source sequence to
 * @return a reusable {@link LifecycleTransformer} that unsubscribes the source during the View lifecycle
 */
@NonNull
@CheckResult
public static <T> LifecycleTransformer<T> bindView(@NonNull final View view) {
    checkNotNull(view, "view == null");
    return bind(Observable.create(new ViewDetachesOnSubscribe(view)));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

