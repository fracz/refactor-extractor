@Override
public void annotate(Annotation annotation) {
    if (VERBOSE) {
        System.err.print("Adding Quote annotation...");
    }
    if (annotation.containsKey(CoreAnnotations.TokensAnnotation.class)) {
        // get text and tokens from the document
        String text = annotation.get(CoreAnnotations.TextAnnotation.class);
        String docID = annotation.get(CoreAnnotations.DocIDAnnotation.class);
        List<CoreLabel> tokens = annotation.get(CoreAnnotations.TokensAnnotation.class);
        // System.err.println("Tokens are: " + tokens);
        boolean inQuote = false;
        boolean newline = false;
        for (CoreLabel token : tokens) {
            // both `` and '' can be the starts or the ends of quotes
            if (isAnyQuote(token)) {
                // If we weren't in a quote before we probably are now
                if (!inQuote) {
                    inQuote = true;
                }
            }
        }
        if (VERBOSE) {
            System.err.println("done. Output: " + tokens);
        }
        // assemble the quote annotations
        int tokenOffset = 0;
        int lineNumber = 0;
        // section annotations to mark sentences with
        CoreMap sectionAnnotations = null;
        List<CoreMap> quotes = new ArrayList<CoreMap>();
        List<List<CoreLabel>> quoteTokensOverall = process(tokens);
        System.out.println(quoteTokensOverall);
        for (List<CoreLabel> quoteTokens : quoteTokensOverall) {
            if (quoteTokens.isEmpty()) {
                continue;
            }
            // get the quote text from the first and last character offsets
            int begin = quoteTokens.get(0).get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
            int last = quoteTokens.size() - 1;
            int end = quoteTokens.get(last).get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
            String quoteText = text.substring(begin, end);
            // create a quote annotation with text and token offsets
            Annotation quote = new Annotation(quoteText);
            quote.set(CoreAnnotations.CharacterOffsetBeginAnnotation.class, begin);
            quote.set(CoreAnnotations.CharacterOffsetEndAnnotation.class, end);
            quote.set(CoreAnnotations.TokensAnnotation.class, quoteTokens);
            quote.set(CoreAnnotations.TokenBeginAnnotation.class, tokenOffset);
            tokenOffset += quoteTokens.size();
            quote.set(CoreAnnotations.TokenEndAnnotation.class, tokenOffset);
            quote.set(CoreAnnotations.SentenceIndexAnnotation.class, quotes.size());
            // Annotate sentence with section information.
            // Assume section start and end appear as first and last tokens of sentence
            CoreLabel quoteStartToken = quoteTokens.get(0);
            CoreLabel quoteEndToken = quoteTokens.get(quoteTokens.size() - 1);
            CoreMap sectionStart = quoteStartToken.get(CoreAnnotations.SectionStartAnnotation.class);
            if (sectionStart != null) {
                // Section is started
                sectionAnnotations = sectionStart;
            }
            if (sectionAnnotations != null) {
                // transfer annotations over to quote
                ChunkAnnotationUtils.copyUnsetAnnotations(sectionAnnotations, quote);
            }
            String sectionEnd = quoteEndToken.get(CoreAnnotations.SectionEndAnnotation.class);
            if (sectionEnd != null) {
                sectionAnnotations = null;
            }
            if (docID != null) {
                quote.set(CoreAnnotations.DocIDAnnotation.class, docID);
            }
            int index = 1;
            for (CoreLabel token : quoteTokens) {
                token.setIndex(index++);
                token.setSentIndex(quotes.size());
                if (docID != null) {
                    token.setDocID(docID);
                }
            }
            // add the sentence to the list
            quotes.add(quote);
        }
        // add the quotations annotations to the document
        annotation.set(CoreAnnotations.QuotationsAnnotation.class, quotes);
    } else {
        throw new RuntimeException("unable to find tokens in: " + annotation);
    }
}||||||||@Override
public void annotate(Annotation annotation) {
    if (VERBOSE) {
        System.err.print("Adding Quote annotation...");
    }
    String text = annotation.get(CoreAnnotations.TextAnnotation.class);
    List<CoreMap> quotes = new ArrayList<CoreMap>();
    // TODO: the following
    // Pre-process to make word terminal apostrophes specially encoded (Jones' dog)
    List<CoreLabel> tokens = annotation.get(CoreAnnotations.TokensAnnotation.class);
    // System.out.println(tokens);
    List<Pair<Integer, Integer>> singleQuotesQuotes = extractDirectSingleQuotes(text);
    List<Pair<Integer, Integer>> doubleQuotesQuotes = extractDirectDoubleQuotes(text);
    String docID = annotation.get(CoreAnnotations.DocIDAnnotation.class);
    addCoreMapQuotes(singleQuotesQuotes, quotes, text, docID);
    addCoreMapQuotes(doubleQuotesQuotes, quotes, text, docID);
    // add quotes to document
    annotation.set(CoreAnnotations.QuotationsAnnotation.class, quotes);
// if (annotation.containsKey(CoreAnnotations.TokensAnnotation.class)) {
// // get text and tokens from the document
// String text = annotation.get(CoreAnnotations.TextAnnotation.class);
// String docID = annotation.get(CoreAnnotations.DocIDAnnotation.class);
// List<CoreLabel> tokens = annotation.get(CoreAnnotations.TokensAnnotation.class);
// // System.err.println("Tokens are: " + tokens);
// 
// 
// boolean inQuote = false;
// boolean newline = false;
// for (CoreLabel token: tokens) {
// // both `` and '' can be the starts or the ends of quotes
// if (isAnyQuote(token)) {
// // If we weren't in a quote before we probably are now
// if (!inQuote) {
// inQuote = true;
// }
// }
// }
// 
// if (VERBOSE) {
// System.err.println("done. Output: " + tokens);
// }
// 
// // assemble the quote annotations
// int tokenOffset = 0;
// int lineNumber = 0;
// // section annotations to mark sentences with
// CoreMap sectionAnnotations = null;
// List<CoreMap> quotes = new ArrayList<CoreMap>();
// List<List<CoreLabel>> quoteTokensOverall = process(tokens);
// for (List<CoreLabel> quoteTokens: quoteTokensOverall) {
// if (quoteTokens.isEmpty()) {
// continue;
// }
// 
// // get the quote text from the first and last character offsets
// int begin = quoteTokens.get(0).get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
// int last = quoteTokens.size() - 1;
// int end = quoteTokens.get(last).get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
// String quoteText = text.substring(begin, end);
// 
// // create a quote annotation with text and token offsets
// Annotation quote = new Annotation(quoteText);
// quote.set(CoreAnnotations.CharacterOffsetBeginAnnotation.class, begin);
// quote.set(CoreAnnotations.CharacterOffsetEndAnnotation.class, end);
// quote.set(CoreAnnotations.TokensAnnotation.class, quoteTokens);
// quote.set(CoreAnnotations.TokenBeginAnnotation.class, tokenOffset);
// tokenOffset += quoteTokens.size();
// quote.set(CoreAnnotations.TokenEndAnnotation.class, tokenOffset);
// quote.set(CoreAnnotations.SentenceIndexAnnotation.class, quotes.size());
// 
// 
// // Annotate sentence with section information.
// // Assume section start and end appear as first and last tokens of sentence
// CoreLabel quoteStartToken = quoteTokens.get(0);
// CoreLabel quoteEndToken = quoteTokens.get(quoteTokens.size() - 1);
// 
// CoreMap sectionStart = quoteStartToken.get(CoreAnnotations.SectionStartAnnotation.class);
// if (sectionStart != null) {
// // Section is started
// sectionAnnotations = sectionStart;
// }
// if (sectionAnnotations != null) {
// // transfer annotations over to quote
// ChunkAnnotationUtils.copyUnsetAnnotations(sectionAnnotations, quote);
// }
// String sectionEnd = quoteEndToken.get(CoreAnnotations.SectionEndAnnotation.class);
// if (sectionEnd != null) {
// sectionAnnotations = null;
// }
// 
// if (docID != null) {
// quote.set(CoreAnnotations.DocIDAnnotation.class, docID);
// }
// 
// int index = 1;
// for (CoreLabel token : quoteTokens) {
// token.setIndex(index++);
// token.setSentIndex(quotes.size());
// if (docID != null) {
// token.setDocID(docID);
// }
// }
// 
// // add the sentence to the list
// quotes.add(quote);
// }
// 
// // add the quotations annotations to the document
// annotation.set(CoreAnnotations.QuotationsAnnotation.class, quotes);
// } else {
// throw new RuntimeException("unable to find tokens in: " + annotation);
// }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							(BlockStmt
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
									LineComment
								)
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ContinueStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							NameExpr
								SimpleName
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

