/**
 * Tests that we can extract the non-collapsed grammatical relations (basic + extra)
 * correctly from some hard-coded trees.
 */
public void testNonCollapsedRelations() {
    // the trees to test
    String[] testTrees = { "(ROOT (S (NP (PRP I)) (VP (VBP like) (S (VP (TO to) (VP (VB swim))))) (. .)))", "(ROOT (S (NP (PRP He)) (VP (VBZ says) (SBAR (IN that) (S (NP (PRP you)) (VP (VBP like) (S (VP (TO to) (VP (VB swim)))))))) (. .)))", "(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN man)) (SBAR (WHNP (WP who)) (S (NP (PRP you)) (VP (VBP love)))))) (. .)))", "(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN man)) (SBAR (WHNP (WP$ whose) (NP (NN wife))) (S (NP (PRP you)) (VP (VBP love)))))) (. .)))", "(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN book)) (SBAR (WHNP (WDT which)) (S (NP (PRP you)) (VP (VBD bought)))))) (. .)))", "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN esophagus)) (VP (VBN used) (PP (IN for)))) (? ?)))" };
    // the expected dependency answers (basic + extra)
    String[] testAnswers = { "nsubj(like-2, I-1)\n" + "xsubj(swim-4, I-1)\n" + "root(ROOT-0, like-2)\n" + "aux(swim-4, to-3)\n" + "xcomp(like-2, swim-4)\n", "nsubj(says-2, He-1)\n" + "root(ROOT-0, says-2)\n" + "mark(like-5, that-3)\n" + "nsubj(like-5, you-4)\n" + "xsubj(swim-7, you-4)\n" + "ccomp(says-2, like-5)\n" + "aux(swim-7, to-6)\n" + "xcomp(like-5, swim-7)\n", "nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(man-4, the-3)\n" + "dobj(saw-2, man-4)\n" + "ref(man-4, who-5)\n" + "dobj(love-7, who-5)\n" + "nsubj(love-7, you-6)\n" + "rcmod(man-4, love-7)\n", "nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(man-4, the-3)\n" + "dobj(saw-2, man-4)\n" + "ref(man-4, whose-5)\n" + "poss(wife-6, whose-5)\n" + "dobj(love-8, wife-6)\n" + "nsubj(love-8, you-7)\n" + "rcmod(man-4, love-8)\n", "nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(book-4, the-3)\n" + "dobj(saw-2, book-4)\n" + "ref(book-4, which-5)\n" + "dobj(bought-7, which-5)\n" + "nsubj(bought-7, you-6)\n" + "rcmod(book-4, bought-7)\n", "dep(used-5, What-1)\n" + "pobj(for-6, What-1)\n" + "auxpass(used-5, is-2)\n" + "det(esophagus-4, the-3)\n" + "nsubjpass(used-5, esophagus-4)\n" + "root(ROOT-0, used-5)\n" + "prep(used-5, for-6)\n" };
    assertEquals("Test array lengths mismatch!", testTrees.length, testAnswers.length);
    TreeReaderFactory trf = new PennTreeReaderFactory();
    for (int i = 0; i < testTrees.length; i++) {
        String testTree = testTrees[i];
        String testAnswer = testAnswers[i];
        // specifying our own TreeReaderFactory is vital so that functional
        // categories - that is -TMP and -ADV in particular - are not stripped off
        Tree tree = Tree.valueOf(testTree, trf);
        GrammaticalStructure gs = new EnglishGrammaticalStructure(tree);
        assertEquals("Unexpected basic dependencies for tree " + testTree, testAnswer, EnglishGrammaticalStructure.dependenciesToString(gs, gs.allTypedDependencies(), tree, false, false));
    }
}||||||||/**
 * Tests that we can extract the non-collapsed grammatical relations (basic + extra)
 * correctly from some hard-coded trees.
 */
public void testNonCollapsedRelations() {
    // the trees to test
    String[] testTrees = { "(ROOT (S (NP (PRP I)) (VP (VBP like) (S (VP (TO to) (VP (VB swim))))) (. .)))", "(ROOT (S (NP (PRP He)) (VP (VBZ says) (SBAR (IN that) (S (NP (PRP you)) (VP (VBP like) (S (VP (TO to) (VP (VB swim)))))))) (. .)))", "(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN man)) (SBAR (WHNP (WP who)) (S (NP (PRP you)) (VP (VBP love)))))) (. .)))", "(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN man)) (SBAR (WHNP (WP$ whose) (NP (NN wife))) (S (NP (PRP you)) (VP (VBP love)))))) (. .)))", "(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN book)) (SBAR (WHNP (WDT which)) (S (NP (PRP you)) (VP (VBD bought)))))) (. .)))", "(ROOT (SBARQ (WHNP (WP What)) (SQ (VBZ is) (NP (DT the) (NN esophagus)) (VP (VBN used) (PP (IN for)))) (? ?)))" };
    // the expected dependency answers (basic + extra)
    String[] testAnswers = { "nsubj(like-2, I-1)\n" + "xsubj(swim-4, I-1)\n" + "root(ROOT-0, like-2)\n" + "aux(swim-4, to-3)\n" + "xcomp(like-2, swim-4)\n", "nsubj(says-2, He-1)\n" + "root(ROOT-0, says-2)\n" + "mark(like-5, that-3)\n" + "nsubj(like-5, you-4)\n" + "xsubj(swim-7, you-4)\n" + "ccomp(says-2, like-5)\n" + "aux(swim-7, to-6)\n" + "xcomp(like-5, swim-7)\n", "nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(man-4, the-3)\n" + "dobj(saw-2, man-4)\n" + "ref(man-4, who-5)\n" + "dobj(love-7, who-5)\n" + "rel(love-7, who-5)\n" + "nsubj(love-7, you-6)\n" + "rcmod(man-4, love-7)\n", "nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(man-4, the-3)\n" + "dobj(saw-2, man-4)\n" + "ref(man-4, whose-5)\n" + "poss(wife-6, whose-5)\n" + "dobj(love-8, wife-6)\n" + "rel(love-8, wife-6)\n" + "nsubj(love-8, you-7)\n" + "rcmod(man-4, love-8)\n", "nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(book-4, the-3)\n" + "dobj(saw-2, book-4)\n" + "ref(book-4, which-5)\n" + "dobj(bought-7, which-5)\n" + "rel(bought-7, which-5)\n" + "nsubj(bought-7, you-6)\n" + "rcmod(book-4, bought-7)\n", "dep(used-5, What-1)\n" + "pobj(for-6, What-1)\n" + "auxpass(used-5, is-2)\n" + "det(esophagus-4, the-3)\n" + "nsubjpass(used-5, esophagus-4)\n" + "root(ROOT-0, used-5)\n" + "prep(used-5, for-6)\n" };
    assertEquals("Test array lengths mismatch!", testTrees.length, testAnswers.length);
    TreeReaderFactory trf = new PennTreeReaderFactory();
    for (int i = 0; i < testTrees.length; i++) {
        String testTree = testTrees[i];
        String testAnswer = testAnswers[i];
        // specifying our own TreeReaderFactory is vital so that functional
        // categories - that is -TMP and -ADV in particular - are not stripped off
        Tree tree = Tree.valueOf(testTree, trf);
        GrammaticalStructure gs = new EnglishGrammaticalStructure(tree);
        assertEquals("Unexpected basic dependencies for tree " + testTree, testAnswer, EnglishGrammaticalStructure.dependenciesToString(gs, gs.allTypedDependencies(), tree, false, false));
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(BooleanLiteralExpr
							)
							(BooleanLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(BooleanLiteralExpr
							)
							(BooleanLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

