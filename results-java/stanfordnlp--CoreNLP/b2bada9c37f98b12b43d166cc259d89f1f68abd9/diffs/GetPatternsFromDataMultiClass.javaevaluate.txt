// public Map<String, List<CoreLabel>> loadJavaNLPAnnotatorLabeledFile(String
// labeledFile, Properties props) throws FileNotFoundException {
// System.out.println("Loading evaluate file " + labeledFile);
// Map<String, List<CoreLabel>> sents = new HashMap<String,
// List<CoreLabel>>();
// JavaNLPAnnotatorReaderAndWriter j = new JavaNLPAnnotatorReaderAndWriter();
// j.init(props);
// Iterator<List<CoreLabel>> iter = j.getIterator(new BufferedReader(new
// FileReader(labeledFile)));
// int i = 0;
// while (iter.hasNext()) {
// i++;
// List<CoreLabel> s = iter.next();
// String id = s.get(0).get(CoreAnnotations.DocIDAnnotation.class);
// if (id == null) {
// id = Integer.toString(i);
// }
// sents.put(id, s);
// }
// System.out.println("Read " + sents.size() + " eval sentences");
// return sents;
// }
// private void evaluate(String label, Map<String, List<CoreLabel>> sents)
// throws IOException, InterruptedException, ExecutionException {
// Redwood.log(Redwood.DBG, "labeling " + learnedWords.get(label));
// CollectionValuedMap<String, Integer> tokensMatchedPatterns = new
// CollectionValuedMap<String, Integer>();
// 
// if (restrictToMatched) {
// if (!alreadySetUp)
// setUp();
// List<String> keyset = new ArrayList<String>(sents.keySet());
// int num = 0;
// if (constVars.numThreads == 1)
// num = keyset.size();
// else
// num = keyset.size() / (constVars.numThreads - 1);
// ExecutorService executor = Executors
// .newFixedThreadPool(constVars.numThreads);
// // Redwood.log(Redwood.FORCE, "keyset size is " +
// // keyset.size());
// List<Future<Pair<TwoDimensionalCounter<Pair<String, String>,
// SurfacePattern>, CollectionValuedMap<String, Integer>>>> list = new
// ArrayList<Future<Pair<TwoDimensionalCounter<Pair<String, String>,
// SurfacePattern>, CollectionValuedMap<String, Integer>>>>();
// for (int i = 0; i < constVars.numThreads; i++) {
// // Redwood.log(Redwood.FORCE, "assigning from " + i *
// // num + " till " + Math.min(keyset.size(), (i + 1) * num));
// 
// Callable<Pair<TwoDimensionalCounter<Pair<String, String>, SurfacePattern>,
// CollectionValuedMap<String, Integer>>> task = null;
// task = new ApplyPatterns(keyset.subList(i * num,
// Math.min(keyset.size(), (i + 1) * num)),
// this.learnedPatterns.get(label), constVars.commonEngWords,
// usePatternResultAsLabel, this.learnedWords.get(label).keySet(),
// restrictToMatched, label,
// constVars.removeStopWordsFromSelectedPhrases,
// constVars.removePhrasesWithStopWords, constVars);
// Future<Pair<TwoDimensionalCounter<Pair<String, String>, SurfacePattern>,
// CollectionValuedMap<String, Integer>>> submit = executor
// .submit(task);
// list.add(submit);
// }
// for (Future<Pair<TwoDimensionalCounter<Pair<String, String>,
// SurfacePattern>, CollectionValuedMap<String, Integer>>> future : list) {
// Pair<TwoDimensionalCounter<Pair<String, String>, SurfacePattern>,
// CollectionValuedMap<String, Integer>> res = future
// .get();
// tokensMatchedPatterns.addAll(res.second());
// }
// executor.shutdown();
// }
// 
// this.labelWords(label, sents, this.learnedWords.get(label).keySet(),
// this.learnedPatterns.get(label).keySet(), null, tokensMatchedPatterns);
// Counter<String> entityTP = new ClassicCounter<String>();
// Counter<String> entityFP = new ClassicCounter<String>();
// Counter<String> entityFN = new ClassicCounter<String>();
// for (Entry<String, List<CoreLabel>> sent : sents.entrySet()) {
// for (CoreLabel l : sent.getValue()) {
// if (l.containsKey(constVars.answerClass.get(label))
// && l.get(constVars.answerClass.get(label)) != null)
// l.set(CoreAnnotations.AnswerAnnotation.class,
// l.get(constVars.answerClass.get(label)).toString());
// if (!l.containsKey(CoreAnnotations.AnswerAnnotation.class)
// || l.get(CoreAnnotations.AnswerAnnotation.class) == null) {
// l.set(CoreAnnotations.AnswerAnnotation.class,
// SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL);
// 
// }
// 
// }
// CRFClassifier.countResults(sent.getValue(), entityTP, entityFP, entityFN,
// SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL);
// }
// 
// Counter<String> precision = Counters.division(entityTP,
// Counters.add(entityTP, entityFP));
// Counter<String> recall = Counters.division(entityTP,
// Counters.add(entityTP, entityFN));
// Counter<String> fscore = Counters.getFCounter(precision, recall, 1.0);
// System.out.println("Precision: " + precision);
// System.out.println("Recall: " + recall);
// System.out.println("FScore: " + fscore);
// }
public void evaluate(Map<String, List<CoreLabel>> testSentences, boolean evalPerEntity) throws IOException {
    Counter<String> entityTP = new ClassicCounter<String>();
    Counter<String> entityFP = new ClassicCounter<String>();
    Counter<String> entityFN = new ClassicCounter<String>();
    Counter<String> wordTP = new ClassicCounter<String>();
    Counter<String> wordTN = new ClassicCounter<String>();
    Counter<String> wordFP = new ClassicCounter<String>();
    Counter<String> wordFN = new ClassicCounter<String>();
    for (Entry<String, List<CoreLabel>> docEn : testSentences.entrySet()) {
        List<CoreLabel> doc = docEn.getValue();
        for (CoreLabel l : doc) {
            for (Entry<String, Class<? extends Key<String>>> anscl : constVars.answerClass.entrySet()) {
                l.set(CoreAnnotations.AnswerAnnotation.class, constVars.backgroundSymbol);
                if (l.get(anscl.getValue()).equals(anscl.getKey())) {
                    l.set(CoreAnnotations.AnswerAnnotation.class, anscl.getKey());
                }
            }
        }
        countResults(doc, entityTP, entityFP, entityFN, constVars.backgroundSymbol, wordTP, wordTN, wordFP, wordFN, CoreAnnotations.AnswerAnnotation.class, // 
        evalPerEntity);
    }
    // System.out.println("False Positives: "
    // + Counters.toSortedString(wordFP, wordFP.size(), "%s:%.2f", ";"));
    // System.out.println("False Negatives: "
    // + Counters.toSortedString(wordFN, wordFN.size(), "%s:%.2f", ";"));
    Redwood.log(Redwood.DBG, "\n\n True Positives: " + entityTP);
    Redwood.log(Redwood.DBG, "\n\n False Positives: " + entityFP);
    Redwood.log(Redwood.DBG, "\n\n False Negatives: " + entityFN);
    Counter<String> precision = Counters.division(entityTP, Counters.add(entityTP, entityFP));
    Counter<String> recall = Counters.division(entityTP, Counters.add(entityTP, entityFN));
    Redwood.log(Redwood.FORCE, "\n Precision: " + precision);
    Redwood.log(Redwood.FORCE, "\n Recall: " + recall);
    Redwood.log(Redwood.FORCE, "\n F1 score:  " + FScore(precision, recall, 1));
    Redwood.log(Redwood.FORCE, "Total: " + Counters.add(entityFP, entityTP));
}||||||||// public Map<String, List<CoreLabel>> loadJavaNLPAnnotatorLabeledFile(String
// labeledFile, Properties props) throws FileNotFoundException {
// System.out.println("Loading evaluate file " + labeledFile);
// Map<String, List<CoreLabel>> sents = new HashMap<String,
// List<CoreLabel>>();
// JavaNLPAnnotatorReaderAndWriter j = new JavaNLPAnnotatorReaderAndWriter();
// j.init(props);
// Iterator<List<CoreLabel>> iter = j.getIterator(new BufferedReader(new
// FileReader(labeledFile)));
// int i = 0;
// while (iter.hasNext()) {
// i++;
// List<CoreLabel> s = iter.next();
// String id = s.get(0).get(CoreAnnotations.DocIDAnnotation.class);
// if (id == null) {
// id = Integer.toString(i);
// }
// sents.put(id, s);
// }
// System.out.println("Read " + sents.size() + " eval sentences");
// return sents;
// }
// private void evaluate(String label, Map<String, List<CoreLabel>> sents)
// throws IOException, InterruptedException, ExecutionException {
// Redwood.log(Redwood.DBG, "labeling " + learnedWords.get(label));
// CollectionValuedMap<String, Integer> tokensMatchedPatterns = new
// CollectionValuedMap<String, Integer>();
// 
// if (restrictToMatched) {
// if (!alreadySetUp)
// setUp();
// List<String> keyset = new ArrayList<String>(sents.keySet());
// int num = 0;
// if (constVars.numThreads == 1)
// num = keyset.size();
// else
// num = keyset.size() / (constVars.numThreads - 1);
// ExecutorService executor = Executors
// .newFixedThreadPool(constVars.numThreads);
// // Redwood.log(Redwood.FORCE, "keyset size is " +
// // keyset.size());
// List<Future<Pair<TwoDimensionalCounter<Pair<String, String>,
// SurfacePattern>, CollectionValuedMap<String, Integer>>>> list = new
// ArrayList<Future<Pair<TwoDimensionalCounter<Pair<String, String>,
// SurfacePattern>, CollectionValuedMap<String, Integer>>>>();
// for (int i = 0; i < constVars.numThreads; i++) {
// // Redwood.log(Redwood.FORCE, "assigning from " + i *
// // num + " till " + Math.min(keyset.size(), (i + 1) * num));
// 
// Callable<Pair<TwoDimensionalCounter<Pair<String, String>, SurfacePattern>,
// CollectionValuedMap<String, Integer>>> task = null;
// task = new ApplyPatterns(keyset.subList(i * num,
// Math.min(keyset.size(), (i + 1) * num)),
// this.learnedPatterns.get(label), constVars.commonEngWords,
// usePatternResultAsLabel, this.learnedWords.get(label).keySet(),
// restrictToMatched, label,
// constVars.removeStopWordsFromSelectedPhrases,
// constVars.removePhrasesWithStopWords, constVars);
// Future<Pair<TwoDimensionalCounter<Pair<String, String>, SurfacePattern>,
// CollectionValuedMap<String, Integer>>> submit = executor
// .submit(task);
// list.add(submit);
// }
// for (Future<Pair<TwoDimensionalCounter<Pair<String, String>,
// SurfacePattern>, CollectionValuedMap<String, Integer>>> future : list) {
// Pair<TwoDimensionalCounter<Pair<String, String>, SurfacePattern>,
// CollectionValuedMap<String, Integer>> res = future
// .get();
// tokensMatchedPatterns.addAll(res.second());
// }
// executor.shutdown();
// }
// 
// this.labelWords(label, sents, this.learnedWords.get(label).keySet(),
// this.learnedPatterns.get(label).keySet(), null, tokensMatchedPatterns);
// Counter<String> entityTP = new ClassicCounter<String>();
// Counter<String> entityFP = new ClassicCounter<String>();
// Counter<String> entityFN = new ClassicCounter<String>();
// for (Entry<String, List<CoreLabel>> sent : sents.entrySet()) {
// for (CoreLabel l : sent.getValue()) {
// if (l.containsKey(constVars.answerClass.get(label))
// && l.get(constVars.answerClass.get(label)) != null)
// l.set(CoreAnnotations.AnswerAnnotation.class,
// l.get(constVars.answerClass.get(label)).toString());
// if (!l.containsKey(CoreAnnotations.AnswerAnnotation.class)
// || l.get(CoreAnnotations.AnswerAnnotation.class) == null) {
// l.set(CoreAnnotations.AnswerAnnotation.class,
// SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL);
// 
// }
// 
// }
// CRFClassifier.countResults(sent.getValue(), entityTP, entityFP, entityFN,
// SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL);
// }
// 
// Counter<String> precision = Counters.division(entityTP,
// Counters.add(entityTP, entityFP));
// Counter<String> recall = Counters.division(entityTP,
// Counters.add(entityTP, entityFN));
// Counter<String> fscore = Counters.getFCounter(precision, recall, 1.0);
// System.out.println("Precision: " + precision);
// System.out.println("Recall: " + recall);
// System.out.println("FScore: " + fscore);
// }
public void evaluate(Map<String, List<CoreLabel>> testSentences, boolean evalPerEntity) throws IOException {
    Counter<String> entityTP = new ClassicCounter<String>();
    Counter<String> entityFP = new ClassicCounter<String>();
    Counter<String> entityFN = new ClassicCounter<String>();
    Counter<String> wordTP = new ClassicCounter<String>();
    Counter<String> wordTN = new ClassicCounter<String>();
    Counter<String> wordFP = new ClassicCounter<String>();
    Counter<String> wordFN = new ClassicCounter<String>();
    for (Entry<String, List<CoreLabel>> docEn : testSentences.entrySet()) {
        List<CoreLabel> doc = docEn.getValue();
        for (CoreLabel l : doc) {
            for (Entry<String, Class<? extends Key<String>>> anscl : constVars.answerClass.entrySet()) {
                l.set(CoreAnnotations.AnswerAnnotation.class, constVars.backgroundSymbol);
                if (l.get(anscl.getValue()).equals(anscl.getKey())) {
                    l.set(CoreAnnotations.AnswerAnnotation.class, anscl.getKey());
                }
            }
        }
        countResults(doc, entityTP, entityFP, entityFN, constVars.backgroundSymbol, wordTP, wordTN, wordFP, wordFN, CoreAnnotations.AnswerAnnotation.class, // 
        evalPerEntity);
    }
    // System.out.println("False Positives: "
    // + Counters.toSortedString(wordFP, wordFP.size(), "%s:%.2f", ";"));
    // System.out.println("False Negatives: "
    // + Counters.toSortedString(wordFN, wordFN.size(), "%s:%.2f", ";"));
    System.out.println("\n\n True Positives: " + entityTP);
    System.out.println("\n\n False Positives: " + entityFP);
    System.out.println("\n\n False Negatives: " + entityFN);
    Counter<String> precision = Counters.division(entityTP, Counters.add(entityTP, entityFP));
    Counter<String> recall = Counters.division(entityTP, Counters.add(entityTP, entityFN));
    System.out.println("\n Precision: " + precision);
    System.out.println("\n Recall: " + recall);
    System.out.println("\n F1 score:  " + FScore(precision, recall, 1));
    System.out.println("Total: " + Counters.add(entityFP, entityTP));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
												(ClassOrInterfaceType
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						NameExpr
							SimpleName
							LineComment
						SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
											(WildcardType
												(ClassOrInterfaceType
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						NameExpr
							SimpleName
							LineComment
						SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

