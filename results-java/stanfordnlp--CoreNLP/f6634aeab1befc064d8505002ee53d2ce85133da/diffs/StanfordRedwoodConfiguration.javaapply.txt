/**
 * Configures the Redwood logger using a reasonable set of defaults,
 * which can be overruled by the supplied Properties file
 * @param props The properties file to overrule or augment the default
 * configuration
 */
public static void apply(Properties props) {
    // (capture system streams)
    if (props.getProperty("log.captureStderr") == null) {
        props.setProperty("log.captureStderr", "true");
    }
    // (log to stderr)
    if (props.getProperty("log.toStderr") == null) {
        props.setProperty("log.toStderr", "true");
    }
    // (apply properties)
    RedwoodConfiguration.apply(props);
    // --Strange Tweaks
    // (adapt legacy logging systems)
    JavaUtilLoggingAdaptor.adapt();
    // (skip stack trace elements from this class)
    Redwood.addLoggingClass("edu.stanford.nlp.kbp.slotfilling.common.Log");
// TODO: Redwood.setIgnorableClassPrefix("edu.stanford.nlp")
}||||||||/**
 * Configures the Redwood logger using a reasonable set of defaults,
 * which can be overruled by the supplied Properties file
 * @param props The properties file to overrule or augment the default
 * configuration
 */
public static void apply(Properties props) {
    // (output to stderr)
    if (props.getProperty("log.output") == null) {
        props.setProperty("log.output", "stderr");
    }
    // (capture system streams)
    if (props.getProperty("log.captureStderr") == null) {
        props.setProperty("log.captureStderr", "true");
    }
    // (apply properties)
    RedwoodConfiguration.apply(props);
    // --Strange Tweaks
    // (adapt legacy logging systems)
    JavaUtilLoggingAdaptor.adapt();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

