/**
 * Tries to return a node representing the <code>SUBJECT</code> (whether
 * nominal or clausal) of the given node <code>t</code>. Probably, node
 * <code>t</code> should represent a clause or verb phrase.
 *
 * @param t A node in this <code>GrammaticalStructure</code>
 * @return A node which is the subject of node <code>t</code>, or else
 * <code>null</code>
 */
public static TreeGraphNode getSubject(TreeGraphNode t) {
    TreeGraphNode subj = t.getNodeInRelation(NOMINAL_SUBJECT);
    if (subj != null) {
        return subj;
    }
    subj = t.getNodeInRelation(CLAUSAL_SUBJECT);
    if (subj != null) {
        return subj;
    } else {
        return t.getNodeInRelation(NOMINAL_PASSIVE_SUBJECT);
    }
}||||||||/**
 * Tries to return a node representing the <code>SUBJECT</code> (whether
 * nominal or clausal) of the given node <code>t</code>. Probably, node
 * <code>t</code> should represent a clause or verb phrase.
 *
 * @param t A node in this <code>GrammaticalStructure</code>
 * @return A node which is the subject of node <code>t</code>, or else
 * <code>null</code>
 */
public static TreeGraphNode getSubject(TreeGraphNode t) {
    TreeGraphNode subj = getNodeInRelation(t, NOMINAL_SUBJECT);
    if (subj != null) {
        return subj;
    }
    subj = getNodeInRelation(t, CLAUSAL_SUBJECT);
    if (subj != null) {
        return subj;
    } else {
        return getNodeInRelation(t, NOMINAL_PASSIVE_SUBJECT);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

