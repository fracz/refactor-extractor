/**
 * Reads the POST contents of the request and parses it into an Annotation object, ready to be annotated.
 * This method can also read a serialized document, if the input format is set to be serialized.
 *
 * @param props The properties we are annotating with. This is where the input format is retrieved from.
 * @param httpExchange The exchange we are reading POST data from.
 *
 * @return An Annotation representing the read document.
 *
 * @throws IOException Thrown if we cannot read the POST data.
 * @throws ClassNotFoundException Thrown if we cannot load the serializer.
 */
private static Annotation getDocument(Properties props, HttpExchange httpExchange) throws IOException, ClassNotFoundException {
    String inputFormat = props.getProperty("inputFormat", "text");
    switch(inputFormat) {
        case "text":
            // Get the encoding
            Headers h = httpExchange.getRequestHeaders();
            String encoding;
            if (h.containsKey("Content-type")) {
                String[] charsetPair = Arrays.asList(h.getFirst("Content-type").split(";")).stream().map(x -> x.split("=")).filter(x -> x.length > 0 && "charset".equals(x[0])).findFirst().orElse(new String[] { "charset", "ISO-8859-1" });
                if (charsetPair.length == 2) {
                    encoding = charsetPair[1];
                } else {
                    // default encoding for a form
                    encoding = "ISO-8859-1";
                }
            } else {
                // default encoding for a form
                encoding = "ISO-8859-1";
            }
            // Read the annotation
            return new Annotation(IOUtils.slurpInputStream(httpExchange.getRequestBody(), encoding));
        case "serialized":
            String inputSerializerName = props.getProperty("inputSerializer", ProtobufAnnotationSerializer.class.getName());
            AnnotationSerializer serializer = MetaClass.create(inputSerializerName).createInstance();
            Pair<Annotation, InputStream> pair = serializer.read(httpExchange.getRequestBody());
            return pair.first;
        default:
            throw new IOException("Could not parse input format: " + inputFormat);
    }
}||||||||/**
 * Reads the POST contents of the request and parses it into an Annotation object, ready to be annotated.
 * This method can also read a serialized document, if the input format is set to be serialized.
 *
 * @param props The properties we are annotating with. This is where the input format is retrieved from.
 * @param httpExchange The exchange we are reading POST data from.
 *
 * @return An Annotation representing the read document.
 *
 * @throws IOException Thrown if we cannot read the POST data.
 * @throws ClassNotFoundException Thrown if we cannot load the serializer.
 */
private Annotation getDocument(Properties props, HttpExchange httpExchange) throws IOException, ClassNotFoundException {
    String inputFormat = props.getProperty("inputFormat", "text");
    switch(inputFormat) {
        case "text":
            // The default encoding by the HTTP standard is ISO-8859-1, but most
            // real users of CoreNLP would likely assume UTF-8 by default.
            String defaultEncoding = this.strict ? "ISO-8859-1" : "UTF-8";
            // Get the encoding
            Headers h = httpExchange.getRequestHeaders();
            String encoding;
            if (h.containsKey("Content-type")) {
                String[] charsetPair = Arrays.asList(h.getFirst("Content-type").split(";")).stream().map(x -> x.split("=")).filter(x -> x.length > 0 && "charset".equals(x[0])).findFirst().orElse(new String[] { "charset", defaultEncoding });
                if (charsetPair.length == 2) {
                    encoding = charsetPair[1];
                } else {
                    encoding = defaultEncoding;
                }
            } else {
                encoding = defaultEncoding;
            }
            // Read the annotation
            return new Annotation(IOUtils.slurpInputStream(httpExchange.getRequestBody(), encoding));
        case "serialized":
            String inputSerializerName = props.getProperty("inputSerializer", ProtobufAnnotationSerializer.class.getName());
            AnnotationSerializer serializer = MetaClass.create(inputSerializerName).createInstance();
            Pair<Annotation, InputStream> pair = serializer.read(httpExchange.getRequestBody());
            return pair.first;
        default:
            throw new IOException("Could not parse input format: " + inputFormat);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				StringLiteralExpr
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												(LambdaExpr
													(ExpressionStmt
														(BinaryExpr
															(BinaryExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(IntegerLiteralExpr
																)
															)
															(MethodCallExpr
																(ArrayAccessExpr
																	(IntegerLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
																StringLiteralExpr
															)
														)
													)
													(Parameter
														SimpleName
														(UnknownType
														)
													)
												)
												SimpleName
												(MethodCallExpr
													(LambdaExpr
														(ExpressionStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(Parameter
															SimpleName
															(UnknownType
															)
														)
													)
													SimpleName
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											(IntegerLiteralExpr
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				StringLiteralExpr
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								StringLiteralExpr
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												(LambdaExpr
													(ExpressionStmt
														(BinaryExpr
															(BinaryExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(IntegerLiteralExpr
																)
															)
															(MethodCallExpr
																(ArrayAccessExpr
																	(IntegerLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
																StringLiteralExpr
															)
														)
													)
													(Parameter
														SimpleName
														(UnknownType
														)
													)
												)
												SimpleName
												(MethodCallExpr
													(LambdaExpr
														(ExpressionStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(Parameter
															SimpleName
															(UnknownType
															)
														)
													)
													SimpleName
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											(IntegerLiteralExpr
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

