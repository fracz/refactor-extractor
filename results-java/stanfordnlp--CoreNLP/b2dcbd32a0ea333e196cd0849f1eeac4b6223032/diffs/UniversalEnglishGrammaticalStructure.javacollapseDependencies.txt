/**
 * Destructively modifies this {@code Collection<TypedDependency>}
 * by collapsing several types of transitive pairs of dependencies.
 * If called with a tree of dependencies and both CCprocess and
 * includeExtras set to false, then the tree structure is preserved.
 * <dl>
 * <dt>prepositional object dependencies: pobj</dt>
 * <dd>
 * <code>prep(cat, in)</code> and <code>pobj(in, hat)</code> are collapsed to
 * <code>prep_in(cat, hat)</code></dd>
 * <dt>prepositional complement dependencies: pcomp</dt>
 * <dd>
 * <code>prep(heard, of)</code> and <code>pcomp(of, attacking)</code> are
 * collapsed to <code>prepc_of(heard, attacking)</code></dd>
 * <dt>conjunct dependencies</dt>
 * <dd>
 * <code>cc(investors, and)</code> and
 * <code>conj(investors, regulators)</code> are collapsed to
 * <code>conj_and(investors,regulators)</code></dd>
 * <dt>possessive dependencies: possessive</dt>
 * <dd>
 * <code>possessive(Montezuma, 's)</code> will be erased. This is like a collapsing, but
 * due to the flatness of NPs, two dependencies are not actually composed.</dd>
 * <dt>For relative clauses, it will collapse referent</dt>
 * <dd>
 * <code>ref(man, that)</code> and <code>dobj(love, that)</code> are collapsed
 * to <code>dobj(love, man)</code></dd>
 * </dl>
 */
@Override
protected void collapseDependencies(List<TypedDependency> list, boolean CCprocess, Extras includeExtras) {
    if (DEBUG) {
        printListSorted("collapseDependencies: CCproc: " + CCprocess + " includeExtras: " + includeExtras, list);
    }
    correctDependencies(list);
    if (DEBUG) {
        printListSorted("After correctDependencies:", list);
    }
    addCaseMarkerInformation(list);
    if (DEBUG) {
        System.err.println(list);
        printListSorted("After addCaseMarkerInformation:", list);
    }
    /*
    collapse2WP(list);
    if (DEBUG) {
      printListSorted("After collapse2WP:", list);
    }

    collapseFlatMWP(list);
    if (DEBUG) {
      printListSorted("After collapseFlatMWP:", list);
    }

    collapse2WPbis(list);
    if (DEBUG) {
      printListSorted("After collapse2WPbis:", list);
    }

    collapse3WP(list);
    if (DEBUG) {
      printListSorted("After collapse3WP:", list);
    }

    collapsePrepAndPoss(list);
    if (DEBUG) {
      printListSorted("After PrepAndPoss:", list);
    }

    */
    // collapseConj(list);
    addConjInformation(list);
    if (DEBUG) {
        printListSorted("After conj:", list);
    }
    if (includeExtras.doRef) {
        addRef(list);
        if (DEBUG) {
            printListSorted("After adding ref:", list);
        }
        if (includeExtras.collapseRef) {
            collapseReferent(list);
            if (DEBUG) {
                printListSorted("After collapse referent:", list);
            }
        }
    }
    if (CCprocess) {
        treatCC(list);
        if (DEBUG) {
            printListSorted("After treatCC:", list);
        }
    }
    if (includeExtras.doSubj) {
        addExtraNSubj(list);
        if (DEBUG) {
            printListSorted("After adding extra nsubj:", list);
        }
        correctSubjPass(list);
        if (DEBUG) {
            printListSorted("After correctSubjPass:", list);
        }
    }
    removeDep(list);
    if (DEBUG) {
        printListSorted("After remove dep:", list);
    }
    Collections.sort(list);
    if (DEBUG) {
        printListSorted("After all collapse:", list);
    }
}||||||||/**
 * Destructively modifies this {@code Collection<TypedDependency>}
 * by collapsing several types of transitive pairs of dependencies.
 * If called with a tree of dependencies and both CCprocess and
 * includeExtras set to false, then the tree structure is preserved.
 * <dl>
 * <dt>prepositional object dependencies: pobj</dt>
 * <dd>
 * <code>prep(cat, in)</code> and <code>pobj(in, hat)</code> are collapsed to
 * <code>prep_in(cat, hat)</code></dd>
 * <dt>prepositional complement dependencies: pcomp</dt>
 * <dd>
 * <code>prep(heard, of)</code> and <code>pcomp(of, attacking)</code> are
 * collapsed to <code>prepc_of(heard, attacking)</code></dd>
 * <dt>conjunct dependencies</dt>
 * <dd>
 * <code>cc(investors, and)</code> and
 * <code>conj(investors, regulators)</code> are collapsed to
 * <code>conj_and(investors,regulators)</code></dd>
 * <dt>possessive dependencies: possessive</dt>
 * <dd>
 * <code>possessive(Montezuma, 's)</code> will be erased. This is like a collapsing, but
 * due to the flatness of NPs, two dependencies are not actually composed.</dd>
 * <dt>For relative clauses, it will collapse referent</dt>
 * <dd>
 * <code>ref(man, that)</code> and <code>dobj(love, that)</code> are collapsed
 * to <code>dobj(love, man)</code></dd>
 * </dl>
 */
@Override
protected void collapseDependencies(List<TypedDependency> list, boolean CCprocess, Extras includeExtras) {
    if (DEBUG) {
        printListSorted("collapseDependencies: CCproc: " + CCprocess + " includeExtras: " + includeExtras, list);
    }
    correctDependencies(list);
    if (true) {
        printListSorted("After correctDependencies:", list);
    }
    expandPrepConjunctions(list);
    if (true) {
        printListSorted("After expandPrepConjunctions:", list);
    }
    expandPPConjunctions(list);
    if (true) {
        printListSorted("After expandPPConjunctions:", list);
    }
    addCaseMarkerInformation(list);
    if (true) {
        printListSorted("After addCaseMarkerInformation:", list);
    }
    addConjInformation(list);
    if (true) {
        printListSorted("After addConjInformation:", list);
    }
    if (includeExtras.doRef) {
        addRef(list);
        if (DEBUG) {
            printListSorted("After adding ref:", list);
        }
        if (includeExtras.collapseRef) {
            collapseReferent(list);
            if (DEBUG) {
                printListSorted("After collapse referent:", list);
            }
        }
    }
    if (CCprocess) {
        treatCC(list);
        if (DEBUG) {
            printListSorted("After treatCC:", list);
        }
    }
    if (includeExtras.doSubj) {
        addExtraNSubj(list);
        if (DEBUG) {
            printListSorted("After adding extra nsubj:", list);
        }
        correctSubjPass(list);
        if (DEBUG) {
            printListSorted("After correctSubjPass:", list);
        }
    }
    Collections.sort(list);
    if (DEBUG) {
        printListSorted("After all collapse:", list);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BooleanLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

