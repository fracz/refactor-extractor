// -- stuff for CG version below -------
/**
 * calculate the log likelihood from scratch, hashing the conditional
 * probabilities in pcond which we will use for the derivative later.
 *
 * @return The log likelihood of the data
 */
public double logLikelihoodScratch() {
    // zero all the variables
    double s = 0;
    for (int i = 0; i < probConds.length; i++) {
        for (int j = 0; j < probConds[i].length; j++) {
            probConds[i][j] = 0;
        }
        zlambda[i] = 0;
    }
    // add up in pcond y|x the unnormalized scores
    Experiments exp = p.data;
    for (int fNo = 0, fSize = p.fSize; fNo < fSize; fNo++) {
        // add for all occurences of the function the values to probConds
        Feature f = p.functions.get(fNo);
        double fLambda = lambda[fNo];
        double sum = ftildeArr[fNo];
        // if(sum==0){continue;}
        sum *= exp.getNumber();
        s -= sum * fLambda;
        if (Math.abs(fLambda) > 200) {
            // was 50
            System.err.println("lambda " + fNo + " too big: " + fLambda);
        }
        for (int i = 0, length = f.len(); i < length; i++) {
            int x = f.getX(i);
            int y = f.getY(i);
            if (ASSUME_BINARY) {
                probConds[x][y] += fLambda;
            } else {
                double val = f.getVal(i);
                probConds[x][y] += (val * fLambda);
            }
        }
    // for
    }
    for (int x = 0; x < probConds.length; x++) {
        // again
        // cpu samples #4,#15: 4.5%
        zlambda[x] = ArrayMath.logSum(probConds[x]);
        // System.err.println("zlambda "+x+" "+zlambda[x]);
        s += zlambda[x] * exp.ptildeX(x) * exp.getNumber();
        for (int y = 0; y < probConds[x].length; y++) {
            // cpu samples #13: 1.6%
            probConds[x][y] = divide(probConds[x][y], zlambda[x]);
        // System.err.println("prob "+x+" "+y+" "+probConds[x][y]);
        }
    // y
    }
    if (s < 0) {
        throw new IllegalStateException("neg log lik smaller than 0: " + s);
    }
    return s;
}||||||||// -- stuff for CG version below -------
/**
 * calculate the log likelihood from scratch, hashing the conditional
 * probabilities in pcond which we will use for the derivative later.
 *
 * @return The log likelihood of the data
 */
public double logLikelihoodScratch() {
    // zero all the variables
    double s = 0;
    for (int i = 0; i < probConds.length; i++) {
        for (int j = 0; j < probConds[i].length; j++) {
            probConds[i][j] = 0;
        }
        zlambda[i] = 0;
    }
    // add up in pcond y|x the unnormalized scores
    Experiments exp = p.data;
    for (int fNo = 0, fSize = p.fSize; fNo < fSize; fNo++) {
        // add for all occurences of the function the values to probConds
        Feature f = p.functions.get(fNo);
        double fLambda = lambda[fNo];
        double sum = ftildeArr[fNo];
        // if(sum==0){continue;}
        sum *= exp.getNumber();
        s -= sum * fLambda;
        if (Math.abs(fLambda) > 200) {
            // was 50
            System.out.println("lambda " + fNo + " too big: " + fLambda);
        }
        for (int i = 0, length = f.len(); i < length; i++) {
            int x = f.getX(i);
            int y = f.getY(i);
            if (ASSUME_BINARY) {
                probConds[x][y] += fLambda;
            } else {
                double val = f.getVal(i);
                probConds[x][y] += (val * fLambda);
            }
        }
    // for
    }
    for (int x = 0; x < probConds.length; x++) {
        // again
        // cpu samples #4,#15: 4.5%
        zlambda[x] = ArrayMath.logSum(probConds[x]);
        // System.out.println("zlambda "+x+" "+zlambda[x]);
        s += zlambda[x] * exp.ptildeX(x) * exp.getNumber();
        for (int y = 0; y < probConds[x].length; y++) {
            // cpu samples #13: 1.6%
            probConds[x][y] = divide(probConds[x][y], zlambda[x]);
        // System.out.println("prob "+x+" "+y+" "+probConds[x][y]);
        }
    // y
    }
    if (s < 0) {
        System.out.println("neg log lik smaller than 0 " + s);
        System.exit(0);
    }
    return s;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							LineComment
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							LineComment
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

