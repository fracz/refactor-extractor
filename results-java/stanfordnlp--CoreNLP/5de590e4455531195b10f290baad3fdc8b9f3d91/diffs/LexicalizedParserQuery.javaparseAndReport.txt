/**
 * Implements the same parsing with fallback that parse() does, but
 * also outputs status messages for failed parses to pwErr.
 */
public boolean parseAndReport(List<? extends HasWord> sentence, PrintWriter pwErr) {
    boolean result = parse(sentence);
    if (result) {
        if (whatFailed != null) {
            // However, we still got a PCFG parse, at least.
            if (!saidMemMessage) {
                ParserUtils.printOutOfMemory(pwErr);
                saidMemMessage = true;
            }
            pwErr.println("Sentence too long for " + whatFailed + " parser.  Falling back to PCFG parse...");
        } else if (parseFallback) {
            // We had to fall back for some other reason.
            pwErr.println("Sentence couldn't be parsed by grammar.... falling back to PCFG parse.");
        }
    } else if (parseUnparsable) {
        // No parse at all, completely failed.
        pwErr.println("Sentence couldn't be parsed by grammar.");
    } else if (parseNoMemory) {
        // Ran out of memory, either with or without a possible PCFG parse.
        if (!saidMemMessage) {
            ParserUtils.printOutOfMemory(pwErr);
            saidMemMessage = true;
        }
        if (pparser.hasParse() && fallbackToPCFG) {
            pwErr.println("No memory to gather PCFG parse. Skipping...");
        } else {
            pwErr.println("Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...");
        }
    } else if (parseSkipped) {
        pwErr.println("Sentence too long (or zero words).");
    }
    return result;
}||||||||/**
 * Implements the same parsing with fallback that parse() does, but
 * also outputs status messages for failed parses to pwErr.
 */
@Override
public boolean parseAndReport(List<? extends HasWord> sentence, PrintWriter pwErr) {
    boolean result = parse(sentence);
    if (result) {
        if (whatFailed != null) {
            // However, we still got a PCFG parse, at least.
            if (!saidMemMessage) {
                ParserUtils.printOutOfMemory(pwErr);
                saidMemMessage = true;
            }
            pwErr.println("Sentence too long for " + whatFailed + " parser.  Falling back to PCFG parse...");
        } else if (parseFallback) {
            // We had to fall back for some other reason.
            pwErr.println("Sentence couldn't be parsed by grammar.... falling back to PCFG parse.");
        }
    } else if (parseUnparsable) {
        // No parse at all, completely failed.
        pwErr.println("Sentence couldn't be parsed by grammar.");
    } else if (parseNoMemory) {
        // Ran out of memory, either with or without a possible PCFG parse.
        if (!saidMemMessage) {
            ParserUtils.printOutOfMemory(pwErr);
            saidMemMessage = true;
        }
        if (pparser.hasParse() && fallbackToPCFG) {
            pwErr.println("No memory to gather PCFG parse. Skipping...");
        } else {
            pwErr.println("Sentence has no parse using PCFG grammar (or no PCFG fallback).  Skipping...");
        }
    } else if (parseSkipped) {
        pwErr.println("Sentence too long (or zero words).");
    }
    return result;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				NameExpr
					SimpleName
				(IfStmt
					NameExpr
						SimpleName
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				NameExpr
					SimpleName
				(IfStmt
					NameExpr
						SimpleName
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

