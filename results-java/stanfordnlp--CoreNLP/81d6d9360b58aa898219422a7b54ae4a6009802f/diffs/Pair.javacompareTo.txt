/**
 * Compares this <code>Pair</code> to another object.
 * If the object is a <code>Pair</code>, this function will work providing
 * the elements of the <code>Pair</code> are themselves comparable.
 * It will then return a value based on the pair of objects, where
 * <code>p &gt; q iff p.first() &gt; q.first() ||
 * (p.first().equals(q.first()) && p.second() &gt; q.second())</code>.
 * If the other object is not a <code>Pair</code>, it throws a
 * <code>ClassCastException</code>.
 *
 * @param another the <code>Object</code> to be compared.
 * @return the value <code>0</code> if the argument is a
 * <code>Pair</code> equal to this <code>Pair</code>; a value less than
 * <code>0</code> if the argument is a <code>Pair</code>
 * greater than this <code>Pair</code>; and a value
 * greater than <code>0</code> if the argument is a
 * <code>Pair</code> less than this <code>Pair</code>.
 * @throws ClassCastException if the argument is not a
 * <code>Pair</code>.
 * @see java.lang.Comparable
 */
@SuppressWarnings("unchecked")
public int compareTo(Pair<T1, T2> another) {
    if (first() instanceof Comparable) {
        int comp = ((Comparable<T1>) first()).compareTo(another.first());
        if (comp != 0) {
            return comp;
        }
    }
    if (second() instanceof Comparable) {
        return ((Comparable<T2>) second()).compareTo(another.second());
    }
    if ((!(first() instanceof Comparable)) && (!(second() instanceof Comparable))) {
        throw new AssertionError("Neither element of pair comparable");
    }
    return 0;
}||||||||/**
 * Compares this <code>Pair</code> to another object.
 * If the object is a <code>Pair</code>, this function will work providing
 * the elements of the <code>Pair</code> are themselves comparable.
 * It will then return a value based on the pair of objects, where
 * <code>p &gt; q iff p.first() &gt; q.first() ||
 * (p.first().equals(q.first()) && p.second() &gt; q.second())</code>.
 * If the other object is not a <code>Pair</code>, it throws a
 * <code>ClassCastException</code>.
 *
 * @param another the <code>Object</code> to be compared.
 * @return the value <code>0</code> if the argument is a
 * <code>Pair</code> equal to this <code>Pair</code>; a value less than
 * <code>0</code> if the argument is a <code>Pair</code>
 * greater than this <code>Pair</code>; and a value
 * greater than <code>0</code> if the argument is a
 * <code>Pair</code> less than this <code>Pair</code>.
 * @throws ClassCastException if the argument is not a
 * <code>Pair</code>.
 * @see java.lang.Comparable
 */
@SuppressWarnings("unchecked")
public int compareTo(Pair<T1, T2> another) {
    int comp = ((Comparable<T1>) first()).compareTo(another.first());
    if (comp != 0) {
        return comp;
    } else {
        return ((Comparable<T2>) second()).compareTo(another.second());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				(MethodCallExpr
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(EnclosedExpr
									(CastExpr
										(MethodCallExpr
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				(MethodCallExpr
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(EnclosedExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								(MethodCallExpr
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(EnclosedExpr
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								(MethodCallExpr
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(IntegerLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(EnclosedExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(EnclosedExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)

