private static boolean isNERClassifierCombinerPresent() {
    try {
        Class clazz = Class.forName(NER_COMBINER_NAME);
    } catch (Exception ex) {
        return false;
    }
    return true;
}||||||||/**
 * check for presence of NERClassifierCombiner *
 */
private static boolean isNERClassifierCombinerPresent() {
    try {
        Class clazz = Class.forName(NER_COMBINER_NAME);
    } catch (Exception ex) {
        System.err.println("Warning: edu.stanford.nlp.ie.NERClassifierCombiner not found - not applying NER tags!");
        return false;
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

