/**
 * Runs the Viterbi algorithm on the sequence model given by the TagScorer
 * in order to find the best sequence.
 * @param ts The SequenceModel to be used for scoring
 * @return An array containing the int tags of the best sequence
 */
public int[] bestSequence(SequenceModel ts) {
    if (useOld) {
        return bestSequenceOld(ts);
    } else {
        return bestSequenceNew(ts);
    }
}||||||||/**
 * Runs the Viterbi algorithm on the sequence model given by the TagScorer
 * in order to find the best sequence.
 *
 * @param ts The SequenceModel to be used for scoring
 * @return An array containing the int tags of the best sequence
 */
@Override
public int[] bestSequence(SequenceModel ts) {
    if (useOld) {
        return bestSequenceOld(ts);
    } else {
        return bestSequenceNew(ts);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(ArrayType
		(PrimitiveType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(ArrayType
		(PrimitiveType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

