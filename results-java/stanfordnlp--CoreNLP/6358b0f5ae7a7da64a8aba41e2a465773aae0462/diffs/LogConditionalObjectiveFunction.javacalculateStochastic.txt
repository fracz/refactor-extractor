/*
   *  This function is used to comme up with an estimate of the value / gradient based on only a small
   * portion of the data (refered to as the batchSize for lack of a better term.  In this case batch does
   * not mean All!!  It should be thought of in the sense of "a small batch of the data".
   */
@Override
public void calculateStochastic(double[] x, double[] v, int[] batch) {
    if (method.calculatesHessianVectorProduct() && v != null) {
        // This is used for Stochastic Methods that involve second order information (SMD for example)
        if (method.equals(StochasticCalculateMethods.AlgorithmicDifferentiation)) {
            calculateStochasticAlgorithmicDifferentiation(x, v, batch);
        } else if (method.equals(StochasticCalculateMethods.IncorporatedFiniteDifference)) {
            calculateStochasticFiniteDifference(x, v, finiteDifferenceStepSize, batch);
        }
    } else {
        // This is used for Stochastic Methods that don't need anything but the gradient (SGD)
        calculateStochasticGradientLocal(x, batch);
    }
}||||||||/**
 * This function is used to come up with an estimate of the value / gradient based on only a small
 * portion of the data (referred to as the batchSize for lack of a better term.  In this case batch does
 * not mean All!!  It should be thought of in the sense of "a small batch of the data".
 */
@Override
public void calculateStochastic(double[] x, double[] v, int[] batch) {
    if (method.calculatesHessianVectorProduct() && v != null) {
        // This is used for Stochastic Methods that involve second order information (SMD for example)
        if (method.equals(StochasticCalculateMethods.AlgorithmicDifferentiation)) {
            calculateStochasticAlgorithmicDifferentiation(x, v, batch);
        } else if (method.equals(StochasticCalculateMethods.IncorporatedFiniteDifference)) {
            calculateStochasticFiniteDifference(x, v, finiteDifferenceStepSize, batch);
        }
    } else {
        // This is used for Stochastic Methods that don't need anything but the gradient (SGD)
        calculateStochasticGradientLocal(x, batch);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

