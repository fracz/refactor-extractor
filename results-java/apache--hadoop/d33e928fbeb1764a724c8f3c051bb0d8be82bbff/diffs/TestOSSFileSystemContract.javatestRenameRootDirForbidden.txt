/**
 * Assert that root directory renames are not allowed.
 *
 * @throws Exception on failures
 */
@Override
public void testRenameRootDirForbidden() throws Exception {
    if (!renameSupported()) {
        return;
    }
    rename(super.path("/"), super.path("/test/newRootDir"), false, true, false);
}||||||||@Override
public void testRenameRootDirForbidden() throws Exception {
    if (!renameSupported()) {
        return;
    }
    rename(super.path("/"), super.path("/test/newRootDir"), false, true, false);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(SuperExpr
					)
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(SuperExpr
					)
				)
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(SuperExpr
					)
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(SuperExpr
					)
				)
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

