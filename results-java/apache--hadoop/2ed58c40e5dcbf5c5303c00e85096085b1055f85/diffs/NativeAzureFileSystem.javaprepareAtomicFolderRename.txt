/**
 * If the source is a page blob folder,
 * prepare to rename this folder atomically. This means to get exclusive
 * access to the source folder, and record the actions to be performed for
 * this rename in a "Rename Pending" file. This code was designed to
 * meet the needs of HBase, which requires atomic rename of write-ahead log
 * (WAL) folders for correctness.
 *
 * Before calling this method, the caller must ensure that the source is a
 * folder.
 *
 * For non-page-blob directories, prepare the in-memory information needed,
 * but don't take the lease or write the redo file. This is done to limit the
 * scope of atomic folder rename to HBase, at least at the time of writing
 * this code.
 *
 * @param srcKey Source folder name.
 * @param dstKey Destination folder name.
 * @throws IOException
 */
private FolderRenamePending prepareAtomicFolderRename(String srcKey, String dstKey) throws IOException {
    if (store.isAtomicRenameKey(srcKey)) {
        // Block unwanted concurrent access to source folder.
        SelfRenewingLease lease = leaseSourceFolder(srcKey);
        // Prepare in-memory information needed to do or redo a folder rename.
        FolderRenamePending renamePending = new FolderRenamePending(srcKey, dstKey, lease, this);
        // Save it to persistent storage to help recover if the operation fails.
        renamePending.writeFile(this);
        return renamePending;
    } else {
        FolderRenamePending renamePending = new FolderRenamePending(srcKey, dstKey, null, this);
        return renamePending;
    }
}||||||||/**
 * If the source is a page blob folder,
 * prepare to rename this folder atomically. This means to get exclusive
 * access to the source folder, and record the actions to be performed for
 * this rename in a "Rename Pending" file. This code was designed to
 * meet the needs of HBase, which requires atomic rename of write-ahead log
 * (WAL) folders for correctness.
 *
 * Before calling this method, the caller must ensure that the source is a
 * folder.
 *
 * For non-page-blob directories, prepare the in-memory information needed,
 * but don't take the lease or write the redo file. This is done to limit the
 * scope of atomic folder rename to HBase, at least at the time of writing
 * this code.
 *
 * @param srcKey Source folder name.
 * @param dstKey Destination folder name.
 * @throws IOException
 */
@VisibleForTesting
FolderRenamePending prepareAtomicFolderRename(String srcKey, String dstKey) throws IOException {
    if (store.isAtomicRenameKey(srcKey)) {
        // Block unwanted concurrent access to source folder.
        SelfRenewingLease lease = leaseSourceFolder(srcKey);
        // Prepare in-memory information needed to do or redo a folder rename.
        FolderRenamePending renamePending = new FolderRenamePending(srcKey, dstKey, lease, this);
        // Save it to persistent storage to help recover if the operation fails.
        renamePending.writeFile(this);
        return renamePending;
    } else {
        FolderRenamePending renamePending = new FolderRenamePending(srcKey, dstKey, null, this);
        return renamePending;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NullLiteralExpr
								(ThisExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ThisExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NullLiteralExpr
								(ThisExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ThisExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

