/**
 * Cast <code>node</code> to an XmlNode, or null if RubyNil, or
 * raise a type error in <code>context</code>.
 */
protected static XmlNode asXmlNodeOrNull(ThreadContext context, IRubyObject node) {
    return _asXmlNode(context, node, true);
}||||||||/**
 * Cast <code>node</code> to an XmlNode, or null if RubyNil, or
 * raise a type error in <code>context</code>.
 */
protected static XmlNode asXmlNodeOrNull(ThreadContext context, IRubyObject node) {
    if (node == null || node.isNil()) {
        return null;
    } else {
        return asXmlNode(context, node);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

