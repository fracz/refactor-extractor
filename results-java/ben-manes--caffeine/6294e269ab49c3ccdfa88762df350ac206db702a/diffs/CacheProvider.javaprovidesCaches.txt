/**
 * The provided test parameters are optional and may be specified in any order. Supports injecting
 * {@link LoadingCache}, {@link Cache}, {@link CacheContext}, the {@link ConcurrentMap}
 * {@link Cache#asMap()} view, {@link Policy.Eviction}, {@link Policy.Expiration},
 * and {@link FakeTicker}.
 */
@DataProvider(name = "caches")
public static Iterator<Object[]> providesCaches(Method testMethod) throws Exception {
    CacheSpec cacheSpec = testMethod.getAnnotation(CacheSpec.class);
    requireNonNull(cacheSpec, "@CacheSpec not found");
    // compute indicates if an async or sync cache variation should be use, or both if unset
    Optional<Compute> compute = Optional.ofNullable(Enums.getIfPresent(Compute.class, System.getProperty("compute", "").toUpperCase()).orNull());
    // implementation variation to use, or all if unset
    Optional<Implementation> implementation = Optional.ofNullable(Enums.getIfPresent(Implementation.class, System.getProperty("implementation", "")).orNull());
    // compute indicates if an async or sync cache variation should be use, or both if unset
    Optional<Stats> stats = Optional.ofNullable(Enums.getIfPresent(Stats.class, System.getProperty("stats", "").toUpperCase()).orNull());
    // key/value reference combination to use, or all if unset
    Optional<ReferenceType> keys = Optional.ofNullable(Enums.getIfPresent(ReferenceType.class, System.getProperty("keys", "").toUpperCase()).orNull());
    Optional<ReferenceType> values = Optional.ofNullable(Enums.getIfPresent(ReferenceType.class, System.getProperty("values", "").toUpperCase()).orNull());
    // Inspect the test parameters for interface contraints (loading, async)
    boolean isAsyncLoadingOnly = hasCacheOfType(testMethod, AsyncLoadingCache.class);
    boolean isLoadingOnly = isAsyncLoadingOnly || hasCacheOfType(testMethod, LoadingCache.class) || compute.filter(Compute.ASYNC::equals).isPresent();
    // Lazily generate the test scenarios
    CacheGenerator generator = new CacheGenerator(cacheSpec, isLoadingOnly, isAsyncLoadingOnly);
    return asTestCases(testMethod, generator.generate(compute, implementation, stats, keys, values));
}||||||||/**
 * Returns the lazily generated test scenarios.
 */
@DataProvider(name = "caches")
public static Iterator<Object[]> providesCaches(Method testMethod) throws Exception {
    CacheGenerator generator = newCacheGenerator(testMethod);
    return asTestCases(testMethod, generator.generate());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(MethodReferenceExpr
									(TypeExpr
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		Name
	)
	(JavadocComment
	)
)

