@Override
public boolean onInterceptTouchEvent(MotionEvent ev) {
    if (!isEnabled() || !isEnabledInAdapterView()) {
        return true;
    }
    if (!isSwipeEnabled()) {
        return false;
    }
    for (SwipeDenier denier : mSwipeDeniers) {
        if (denier != null && denier.shouldDenySwipe(ev)) {
            return false;
        }
    }
    // 
    // if a child wants to handle the touch event,
    // then let it do it.
    // 
    int action = ev.getActionMasked();
    switch(action) {
        case MotionEvent.ACTION_DOWN:
            Status status = getOpenStatus();
            if (status == Status.Close) {
                mTouchConsumedByChild = childNeedHandleTouchEvent(getSurfaceView(), ev) != null;
            } else if (status == Status.Open) {
                mTouchConsumedByChild = childNeedHandleTouchEvent(getBottomViews().get(mCurrentDirectionIndex), ev) != null;
            }
            break;
        case MotionEvent.ACTION_UP:
        case MotionEvent.ACTION_CANCEL:
            mTouchConsumedByChild = false;
    }
    if (mTouchConsumedByChild)
        return false;
    return mDragHelper.shouldInterceptTouchEvent(ev);
}||||||||@Override
public boolean onInterceptTouchEvent(MotionEvent ev) {
    if (!isSwipeEnabled()) {
        return false;
    }
    for (SwipeDenier denier : mSwipeDeniers) {
        if (denier != null && denier.shouldDenySwipe(ev)) {
            return false;
        }
    }
    switch(ev.getAction()) {
        case MotionEvent.ACTION_DOWN:
            mDragHelper.processTouchEvent(ev);
            mIsBeingDragged = false;
            sX = ev.getRawX();
            sY = ev.getRawY();
            // if the swipe is in middle state(scrolling), should intercept the touch
            if (getOpenStatus() == Status.Middle) {
                mIsBeingDragged = true;
            }
            break;
        case MotionEvent.ACTION_MOVE:
            boolean beforeCheck = mIsBeingDragged;
            checkCanDrag(ev);
            if (mIsBeingDragged) {
                ViewParent parent = getParent();
                if (parent != null) {
                    parent.requestDisallowInterceptTouchEvent(true);
                }
            }
            if (!beforeCheck && mIsBeingDragged) {
                // useful when swipeLayout wrap a swipeLayout or other gestural layout
                return false;
            }
            break;
        case MotionEvent.ACTION_CANCEL:
        case MotionEvent.ACTION_UP:
            mIsBeingDragged = false;
            mDragHelper.processTouchEvent(ev);
            break;
        default:
            // handle other action, such as ACTION_POINTER_DOWN/UP
            mDragHelper.processTouchEvent(ev);
    }
    return mIsBeingDragged;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BinaryExpr
										(MethodCallExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
											NameExpr
												SimpleName
											SimpleName
										)
										NullLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
									)
									NullLiteralExpr
								)
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			NameExpr
				SimpleName
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
					LineComment
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
							LineComment
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

