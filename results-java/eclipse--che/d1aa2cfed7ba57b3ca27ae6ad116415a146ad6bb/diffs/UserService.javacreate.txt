/**
 * Creates new user and profile.
 *
 * <p>User will be created from {@code token} parameter or from {@code userDescriptor}
 * when {@code token} is null
 *
 * @param token
 * authentication token
 * @param isTemporary
 * if it is {@code true} creates temporary user
 * @return entity of created user
 * @throws ForbiddenException
 * when the user is not the system admin, or self creation is disabled
 * @throws BadRequestException
 * when {@code userDescriptor} is invalid
 * @throws UnauthorizedException
 * when token is null
 * @throws ConflictException
 * when token is not valid
 * @throws ServerException
 * when some error occurred while persisting user or user profile
 * @see UserDescriptor
 * @see #getCurrent()
 * @see #updatePassword(String)
 * @see #getById(String)
 * @see #getByAlias(String)
 * @see #remove(String)
 */
@POST
@Path("/create")
@Consumes(APPLICATION_JSON)
@Produces(APPLICATION_JSON)
@GenerateLink(rel = LINK_REL_CREATE_USER)
@ApiOperation(value = "Create a new user", notes = "Create a new user in the system. There are two ways to create a user: " + "through a regular registration workflow when auth token is sent to user's mailbox" + "and directly with predefined name and password. ", response = UserDescriptor.class)
@ApiResponses({ @ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"), @ApiResponse(code = 401, message = "Missed token parameter"), @ApiResponse(code = 403, message = "Invalid or missing request parameters"), @ApiResponse(code = 409, message = "Invalid token"), @ApiResponse(code = 500, message = "Internal Server Error") })
public Response create(@ApiParam(value = "New user") UserDescriptor userDescriptor, @ApiParam(value = "Authentication token") @QueryParam("token") String token, @ApiParam(value = "User type") @QueryParam("temporary") @DefaultValue("false") Boolean isTemporary) throws ForbiddenException, BadRequestException, UnauthorizedException, ConflictException, ServerException, NotFoundException {
    final User user = isNullOrEmpty(token) ? fromEntity(userDescriptor) : fromToken(token);
    if (!userNameValidator.isValidUserName(user.getName())) {
        throw new BadRequestException("Username must contain only letters and digits");
    }
    userManager.create(user, isTemporary);
    return status(CREATED).entity(injectLinks(toDescriptor(user), getServiceContext())).build();
}||||||||@POST
@Consumes(APPLICATION_JSON)
@Produces(APPLICATION_JSON)
@GenerateLink(rel = LINK_REL_USER)
@ApiOperation(value = "Create a new user", response = UserDto.class)
@ApiResponses({ @ApiResponse(code = 201, message = "User successfully created, response contains created entity"), @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"), @ApiResponse(code = 401, message = "Missed token parameter"), @ApiResponse(code = 500, message = "Couldn't create user due to internal server error") })
public Response create(@ApiParam("New user") UserDto userDto, @ApiParam("Authentication token") @QueryParam("token") String token, @ApiParam("User type") @QueryParam("temporary") @DefaultValue("false") Boolean isTemporary) throws BadRequestException, UnauthorizedException, ConflictException, ServerException {
    final User newUser = token == null ? userDto : tokenValidator.validateToken(token);
    userValidator.checkUser(newUser);
    return Response.status(CREATED).entity(linksInjector.injectLinks(asDto(userManager.create(newUser, isTemporary)), getServiceContext())).build();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(NormalAnnotationExpr
			(MemberValuePair
				SimpleName
				StringLiteralExpr
			)
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(NormalAnnotationExpr
			(MemberValuePair
				SimpleName
				StringLiteralExpr
			)
			Name
		)
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(NormalAnnotationExpr
			(MemberValuePair
				SimpleName
				StringLiteralExpr
			)
			Name
		)
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(SingleMemberAnnotationExpr
		NameExpr
			SimpleName
		Name
	)
	(SingleMemberAnnotationExpr
		NameExpr
			SimpleName
		Name
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			NameExpr
				SimpleName
		)
		Name
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(BinaryExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(ClassExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
		Name
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
		)
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		(SingleMemberAnnotationExpr
			StringLiteralExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(SingleMemberAnnotationExpr
		NameExpr
			SimpleName
		Name
	)
	(SingleMemberAnnotationExpr
		NameExpr
			SimpleName
		Name
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			NameExpr
				SimpleName
		)
		Name
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(ClassExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
		Name
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
			(NormalAnnotationExpr
				(MemberValuePair
					SimpleName
					(IntegerLiteralExpr
					)
				)
				(MemberValuePair
					SimpleName
					StringLiteralExpr
				)
				Name
			)
		)
		Name
	)
)

