/**
 * Returns the runtime descriptor describing currently starting/running/stopping
 * workspace runtime.
 *
 * <p>Note that the {@link RuntimeDescriptor#getRuntime()} method
 * returns a copy of a real {@code WorkspaceRuntime} object,
 * which means that any runtime copy modifications won't affect the
 * real object and also it means that copy won't be affected with modifications applied
 * to the real runtime workspace object state.
 *
 * @param workspaceId
 * the id of the workspace to get its runtime
 * @return descriptor which describes current state of the workspace runtime
 * @throws NotFoundException
 * when workspace with given {@code workspaceId} is not running
 */
public RuntimeDescriptor get(String workspaceId) throws NotFoundException {
    acquireReadLock(workspaceId);
    try {
        final RuntimeDescriptor descriptor = descriptors.get(workspaceId);
        if (descriptor == null) {
            throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
        }
        return new RuntimeDescriptor(descriptor);
    } finally {
        releaseReadLock(workspaceId);
    }
}||||||||/**
 * Returns the runtime descriptor describing currently starting/running/stopping
 * workspace runtime.
 *
 * <p>Note that the {@link RuntimeDescriptor#getRuntime()} method
 * returns a copy of a real {@code WorkspaceRuntime} object,
 * which means that any runtime copy modifications won't affect the
 * real object and also it means that copy won't be affected with modifications applied
 * to the real runtime workspace object state.
 *
 * @param workspaceId
 * the id of the workspace to get its runtime
 * @return descriptor which describes current state of the workspace runtime
 * @throws NotFoundException
 * when workspace with given {@code workspaceId} is not found
 * @throws ServerException
 * if environment is in illegal state
 */
public RuntimeDescriptor get(String workspaceId) throws NotFoundException, ServerException {
    WorkspaceState workspaceState;
    try (StripedLocks.ReadLock lock = stripedLocks.acquireReadLock(workspaceId)) {
        workspaceState = workspaces.get(workspaceId);
    }
    if (workspaceState == null) {
        throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
    }
    RuntimeDescriptor runtimeDescriptor = new RuntimeDescriptor(workspaceState.status, new WorkspaceRuntimeImpl(workspaceState.activeEnv, null, Collections.emptyList(), null));
    List<Instance> machines = environmentEngine.getMachines(workspaceId);
    Optional<Instance> devMachineOptional = machines.stream().filter(machine -> machine.getConfig().isDev()).findAny();
    if (devMachineOptional.isPresent()) {
        String projectsRoot = devMachineOptional.get().getStatus() == MachineStatus.RUNNING ? devMachineOptional.get().getRuntime().projectsRoot() : null;
        runtimeDescriptor.setRuntime(new WorkspaceRuntimeImpl(workspaceState.activeEnv, projectsRoot, machines, devMachineOptional.get()));
    } else if (workspaceState.status == WorkspaceStatus.RUNNING) {
        // invalid state of environment is detected
        String error = format("Dev machine is not found in active environment of workspace '%s'", workspaceId);
        throw new ServerException(error);
    }
    return runtimeDescriptor;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ObjectCreationExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(LambdaExpr
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(UnknownType
									)
								)
							)
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								NullLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

