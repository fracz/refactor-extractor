/**
 * Starts machine in running workspace
 *
 * @param machineConfig configuration of machine to start
 * @param workspaceId id of workspace in which machine should be started
 * @return starting machine instance
 * @throws NotFoundException
 * if machine type from recipe is unsupported
 * @throws NotFoundException
 * if no instance provider implementation found for provided machine type
 * @throws ConflictException
 * if machine with given name already exists
 * @throws ConflictException
 * if workspace is not in RUNNING state
 * @throws BadRequestException
 * if machine name is invalid
 * @throws ServerException
 * if any other exception occurs during starting
 */
public MachineImpl startMachine(MachineConfig machineConfig, String workspaceId) throws ServerException, ConflictException, BadRequestException, NotFoundException {
    final WorkspaceImpl workspace = getWorkspace(workspaceId);
    if (RUNNING != workspace.getStatus()) {
        throw new ConflictException(format("Workspace '%s' is not running, new machine can't be started", workspaceId));
    }
    return machineManager.createMachineAsync(machineConfig, workspaceId, workspace.getRuntime().getActiveEnv(), runtimes.getMachineLogger(workspaceId, machineConfig.getName()));
}||||||||/**
 * Starts machine in running workspace
 *
 * @param machineConfig configuration of machine to start
 * @param workspaceId id of workspace in which machine should be started
 * @throws NotFoundException
 * if machine type from recipe is unsupported
 * @throws NotFoundException
 * if no instance provider implementation found for provided machine type
 * @throws ConflictException
 * if machine with given name already exists
 * @throws ConflictException
 * if workspace is not in RUNNING state
 * @throws BadRequestException
 * if machine name is invalid
 * @throws ServerException
 * if any other exception occurs during starting
 */
public void startMachine(MachineConfig machineConfig, String workspaceId) throws ServerException, ConflictException, BadRequestException, NotFoundException {
    final WorkspaceImpl workspace = getWorkspace(workspaceId);
    if (RUNNING != workspace.getStatus()) {
        throw new ConflictException(format("Workspace '%s' is not running, new machine can't be started", workspaceId));
    }
    performAsyncStart(machineConfig, workspaceId);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

