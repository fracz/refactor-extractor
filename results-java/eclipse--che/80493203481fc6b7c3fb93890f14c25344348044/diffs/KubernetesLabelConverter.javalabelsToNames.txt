/**
 * Converts a map of labels to match Kubernetes annotation requirements. Annotations are limited
 * to alphanumeric characters, {@code '.'}, {@code '_'} and {@code '-'}, and must start and end
 * with an alphanumeric character, i.e. they must match the regex
 * {@code ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]}
 *
 * <p>Note that entry keys should begin with {@link KubernetesLabelConverter#CHE_SERVER_LABEL_PREFIX} and
 * entries should not contain {@code '.'} or {@code '_'} before conversion;
 * otherwise label will not be converted and included in output.
 *
 * <p>This implementation is relatively fragile -- changes to how Che generates labels may cause
 * this method to stop working. In general, it will only be possible to convert labels that are
 * alphanumeric plus up to 3 special characters (by converting the special characters to {@code '_'},
 * {@code '-'}, and {@code '.'} as necessary).
 *
 * @param labels Map of labels to convert
 * @return Map of labels converted to DNS Names
 */
public static Map<String, String> labelsToNames(Map<String, String> labels) {
    Map<String, String> names = new HashMap<>();
    for (Map.Entry<String, String> label : labels.entrySet()) {
        if (!hasConversionProblems(label)) {
            String key = label.getKey();
            String value = label.getValue();
            // Convert keys: e.g. "che:server:4401/tcp:ref" ->
            // "che.server.4401-tcp.ref"
            key = convertLabelKey(key);
            // Convert values: e.g. "/api" -> ".api" -- note values may
            // include '-' e.g. "tomcat-debug"
            value = convertLabelValue(value);
            // Add padding since DNS names must start and end with
            // alphanumeric characters
            key = addPadding(key);
            value = addPadding(value);
            if (matchesKubernetesLabelRegex(key) && matchesKubernetesLabelRegex(value)) {
                names.put(key, value);
            } else {
                LOG.error("Could not convert label {} into Kubernetes annotation: labels must be alphanumeric with ':' and '/'", label.toString());
            }
        }
    }
    return names;
}||||||||/**
 * Converts a map of labels to match Kubernetes annotation requirements. Annotations are limited
 * to alphanumeric characters, {@code '.'}, {@code '_'} and {@code '-'}, and must start and end
 * with an alphanumeric character, i.e. they must match the regex
 * {@code ([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]}
 *
 * <p>Note that entry keys should begin with {@link KubernetesLabelConverter#CHE_SERVER_LABEL_PREFIX} and
 * entries should not contain {@code '.'} or {@code '_'} before conversion;
 * otherwise label will not be converted and included in output.
 *
 * <p>This implementation is relatively fragile -- changes to how Che generates labels may cause
 * this method to stop working. In general, it will only be possible to convert labels that are
 * alphanumeric plus up to 3 special characters (by converting the special characters to {@code '_'},
 * {@code '-'}, and {@code '.'} as necessary).
 *
 * @param labels Map of labels to convert
 * @return Map of labels converted to DNS Names
 */
public static Map<String, String> labelsToNames(Map<String, String> labels) {
    Map<String, String> names = new HashMap<>();
    if (labels == null) {
        return names;
    }
    for (Map.Entry<String, String> label : labels.entrySet()) {
        if (!hasConversionProblems(label)) {
            String key = label.getKey();
            String value = label.getValue();
            // Convert keys: e.g. "che:server:4401/tcp:ref" ->
            // "che.server.4401-tcp.ref"
            key = convertLabelKey(key);
            // Convert values: e.g. "/api" -> ".api" -- note values may
            // include '-' e.g. "tomcat-debug"
            value = convertLabelValue(value);
            // Add padding since DNS names must start and end with
            // alphanumeric characters
            key = addPadding(key);
            value = addPadding(value);
            if (matchesKubernetesLabelRegex(key) && matchesKubernetesLabelRegex(value)) {
                names.put(key, value);
            } else {
                LOG.error("Could not convert label {} into Kubernetes annotation: labels must be alphanumeric with ':' and '/'", label.toString());
            }
        }
    }
    return names;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

