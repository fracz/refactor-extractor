/**
 * Get docker events.
 * Parameter {@code untilSecond} does nothing if {@code sinceSecond} is 0.<br>
 * If {@code untilSecond} and {@code sinceSecond} are 0 method gets new events only (streaming mode).<br>
 * If {@code untilSecond} and {@code sinceSecond} are not 0 (but less that current date)
 * methods get events that were generated between specified dates.<br>
 * If {@code untilSecond} is 0 but {@code sinceSecond} is not method gets old events and streams new ones.<br>
 * If {@code sinceSecond} is 0 no old events will be got.<br>
 * With some connection implementations method can fail due to connection timeout in streaming mode.
 *
 * @param sinceSecond
 * UNIX date in seconds. allow omit events created before specified date.
 * @param untilSecond
 * UNIX date in seconds. allow omit events created after specified date.
 * @param filters
 * filter of needed events. Available filters: {@code event=<string>}
 * {@code image=<string>} {@code container=<string>}
 * @param messageProcessor
 * processor of all found events that satisfy specified parameters
 * @throws IOException
 */
public void getEvents(long sinceSecond, long untilSecond, Filters filters, MessageProcessor<Event> messageProcessor) throws IOException {
    try (DockerConnection connection = connectionFactory.openConnection(dockerDaemonUri).method("GET").path("/events")) {
        if (sinceSecond != 0) {
            connection.query("since", sinceSecond);
        }
        if (untilSecond != 0) {
            connection.query("until", untilSecond);
        }
        if (filters != null) {
            connection.query("filters", urlPathSegmentEscaper().escape(JsonHelper.toJson(filters.getFilters())));
        }
        final DockerResponse response = connection.request();
        final int status = response.getStatus();
        if (OK.getStatusCode() != status) {
            throw new DockerException(getDockerExceptionMessage(response), status);
        }
        try (InputStream responseStream = response.getInputStream()) {
            new MessagePumper<>(new JsonMessageReader<>(responseStream, Event.class), messageProcessor).start();
        }
    }
}||||||||/**
 * Get docker events.
 * Parameter {@code untilSecond} does nothing if {@code sinceSecond} is 0.<br>
 * If {@code untilSecond} and {@code sinceSecond} are 0 method gets new events only (streaming mode).<br>
 * If {@code untilSecond} and {@code sinceSecond} are not 0 (but less that current date)
 * methods get events that were generated between specified dates.<br>
 * If {@code untilSecond} is 0 but {@code sinceSecond} is not method gets old events and streams new ones.<br>
 * If {@code sinceSecond} is 0 no old events will be got.<br>
 * With some connection implementations method can fail due to connection timeout in streaming mode.
 *
 * @param sinceSecond
 * UNIX date in seconds. allow omit events created before specified date.
 * @param untilSecond
 * UNIX date in seconds. allow omit events created after specified date.
 * @param filters
 * filter of needed events. Available filters: {@code event=<string>}
 * {@code image=<string>} {@code container=<string>}
 * @param messageProcessor
 * processor of all found events that satisfy specified parameters
 * @throws IOException
 */
public void getEvents(long sinceSecond, long untilSecond, Filters filters, MessageProcessor<Event> messageProcessor) throws IOException {
    try (DockerConnection connection = connectionFactory.openConnection(dockerDaemonUri).method("GET").path("/events")) {
        if (sinceSecond != 0) {
            connection.query("since", sinceSecond);
        }
        if (untilSecond != 0) {
            connection.query("until", untilSecond);
        }
        if (filters != null) {
            connection.query("filters", urlPathSegmentEscaper().escape(JsonHelper.toJson(filters.getFilters())));
        }
        final DockerResponse response = connection.request();
        final int status = response.getStatus();
        if (OK.getStatusCode() != status) {
            throw getDockerException(response);
        }
        try (InputStream responseStream = response.getInputStream()) {
            new MessagePumper<>(new JsonMessageReader<>(responseStream, Event.class), messageProcessor).start();
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(TryStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(ObjectCreationExpr
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ThrowStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(ObjectCreationExpr
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

