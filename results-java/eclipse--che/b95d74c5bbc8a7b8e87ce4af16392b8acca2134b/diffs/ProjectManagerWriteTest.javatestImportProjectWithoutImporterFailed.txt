@Test
public void testImportProjectWithoutImporterFailed() throws Exception {
    SourceStorage sourceConfig = DtoFactory.newDto(SourceStorageDto.class).withType("nothing");
    try {
        pm.importProject("/testImportProject", sourceConfig, false, () -> new ProjectImportOutputWSLineConsumer("testImportProject", "ws", 300));
        fail("NotFoundException: Unable import sources project from 'null'. Sources type 'nothing' is not supported.");
    } catch (NotFoundException e) {
    }
}||||||||@Test
public void testImportProjectWithoutImporterFailed() throws Exception {
    SourceStorage sourceConfig = DtoFactory.newDto(SourceStorageDto.class).withType("nothing");
    try {
        pm.importProject("/testImportProject", sourceConfig, false, () -> new ProjectImportOutputWSLineConsumer("testImportProject", 300));
        fail("NotFoundException: Unable import sources project from 'null'. Sources type 'nothing' is not supported.");
    } catch (NotFoundException e) {
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							(ClassExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						(LambdaExpr
							(ExpressionStmt
								(ObjectCreationExpr
									StringLiteralExpr
									StringLiteralExpr
									(IntegerLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							(ClassExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						(LambdaExpr
							(ExpressionStmt
								(ObjectCreationExpr
									StringLiteralExpr
									(IntegerLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

