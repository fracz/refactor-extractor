/**
 * Initialize WEB SOCKET services with properties contained
 * in a map as simple key->value pairs.
 *
 * @param properties properties map
 */
void initialize(Map<String, String> properties);||||||||/**
 * Initializes a web socket connection, set default values, perform
 * mandatory preparation work.
 *
 * @param endpointId
 * high level identifier of a web socket connection, used by
 * high level service (e.g. json rpc infrastructure)
 * @param url
 * url of a web socket endpoint
 */
public void initialize(String endpointId, String url) {
    Log.debug(getClass(), "Initializing with url: " + url);
    urlResolver.setMapping(endpointId, url);
    propertyManager.initializeConnection(url);
    connectionManager.initializeConnection(url);
    connectionManager.establishConnection(url);
}||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

