/**
 * Creates an ImageStreamTag that tracks a given image.
 *
 * <p>
 * The target is usually specified e.g. eclipse-che/workspace<unique string>.
 * ImageStreamTags are labelled as {@code <registry>/<namespace>/<ImageStream>:<tag>}
 * The ImageStream name must be unique to the source image (e.g. eclipse_ubuntu_jdk8)
 * otherwise the sourceImage for this ImageStream will be overwritten when
 * another Stack is used. This leaves only the tag to hold the new image name.
 *
 * @see DockerConnector#tag(TagParams)
 */
@Override
public void tag(final TagParams params) throws ImageNotFoundException, IOException {
    // E.g. `docker tag oldImageRepo newImageRepo`
    // e.g. eclipse/ubuntu_jdk8
    String sourceImage = params.getImage();
    // e.g. eclipse-che/<identifier>
    String targetImage = params.getRepository();
    String tag = params.getTag();
    if (tag == null || tag.isEmpty()) {
        tag = "latest";
    }
    String sourceImageWithTag = String.format("%s:%s", sourceImage, tag);
    String newImageStreamName = KubernetesStringUtils.getImageStreamTagName(sourceImage, targetImage);
    try {
        ImageStreamTag imageStreamTag = openShiftClient.imageStreamTags().inNamespace(openShiftCheProjectName).createOrReplaceWithNew().withNewMetadata().withName(newImageStreamName).endMetadata().withNewTag().withNewFrom().withKind("DockerImage").withName(sourceImageWithTag).endFrom().endTag().done();
        // Wait up to 5 seconds for image metadata to be pulled
        for (int waitCount = 0; waitCount < OPENSHIFT_IMAGESTREAM_MAX_WAIT; waitCount++) {
            Thread.sleep(1000);
            ImageStreamTag createdTag = openShiftClient.imageStreamTags().inNamespace(openShiftCheProjectName).withName(newImageStreamName).get();
            if (createdTag != null) {
                LOG.info(String.format("Created ImageStreamTag %s in namespace %s", imageStreamTag.getMetadata().getName(), openShiftCheProjectName));
                return;
            }
        }
        throw new ImageNotFoundException(String.format("Image %s not found.", sourceImageWithTag));
    } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new IOException(e.getLocalizedMessage(), e);
    }
}||||||||/**
 * Creates an ImageStreamTag that tracks a given image.
 *
 * <p> Docker tags are used extensively in Che: all workspaces run on tagged images
 * tracking built stacks. For new workspaces, or when snapshots are not used, the
 * tracked image is e.g. {@code eclipse/ubuntu_jdk8}, whereas for snapshotted workspaces,
 * the tracked image is the snapshot (e.g. {@code machine_snapshot-<identifier>}.
 *
 * <p> Since OpenShift does not support the same tagging functionality as Docker,
 * tags are implemented as ImageStreamTags, where the {@code From} field is always
 * the original image, and the ImageStreamTag name is derived from both the source
 * image and the target image. This replicates functionality for Che in Docker,
 * while working differently under the hood. The ImageStream name is derived from
 * the image that is being tracked (e.g. {@code eclipse/ubuntu_jdk8}), while the tag
 * name is derived from the target image (e.g. {@code eclipse-che/che_workspace<identifier>}).
 *
 * @see DockerConnector#tag(TagParams)
 */
@Override
public void tag(final TagParams params) throws ImageNotFoundException, IOException {
    // E.g. `docker tag sourceImage targetImage`
    // e.g. eclipse/ubuntu_jdk8
    String paramsSourceImage = params.getImage();
    // e.g. eclipse-che/<identifier>
    String targetImage = params.getRepository();
    String paramsTag = params.getTag();
    String sourceImage = KubernetesStringUtils.stripTagFromPullSpec(paramsSourceImage);
    String tag = KubernetesStringUtils.getTagNameFromPullSpec(paramsSourceImage);
    if (isNullOrEmpty(tag)) {
        tag = !isNullOrEmpty(paramsTag) ? paramsTag : "latest";
    }
    String sourceImageWithTag;
    // Check if sourceImage matches existing imageStreamTag (e.g. when tagging a snapshot)
    try {
        String sourceImageTagName = KubernetesStringUtils.convertPullSpecToTagName(sourceImage);
        ImageStreamTag existingTag = getImageStreamTagFromRepo(sourceImageTagName);
        sourceImageWithTag = existingTag.getTag().getFrom().getName();
    } catch (IOException e) {
        // Image not found.
        sourceImageWithTag = String.format("%s:%s", sourceImage, tag);
    }
    String imageStreamTagName = KubernetesStringUtils.createImageStreamTagName(sourceImageWithTag, targetImage);
    createImageStreamTag(sourceImageWithTag, imageStreamTagName);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																(MethodCallExpr
																	SimpleName
																	(MethodCallExpr
																		SimpleName
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ThrowStmt
					(ObjectCreationExpr
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							StringLiteralExpr
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

