/**
 * Return a string representing the escaped char for code c.  E.g., If c
 * has value 0x100, you will get "\\u0100".  ASCII gets the usual
 * char (non-hex) representation.  Non-ASCII characters are spit out
 * as \\uXXXX or \\u{XXXXXX} escapes.
 */
public static String getANTLRCharLiteralForChar(int c) {
    if (c < Lexer.MIN_CHAR_VALUE) {
        return "'<INVALID>'";
    }
    if (c < ANTLRLiteralCharValueEscape.length && ANTLRLiteralCharValueEscape[c] != null) {
        return '\'' + ANTLRLiteralCharValueEscape[c] + '\'';
    }
    if (Character.UnicodeBlock.of((char) c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char) c)) {
        if (c == '\\') {
            return "'\\\\'";
        }
        if (c == '\'') {
            return "'\\''";
        }
        return '\'' + Character.toString((char) c) + '\'';
    }
    if (c <= 0xFFFF) {
        return String.format("\\u%04X", c);
    } else {
        return String.format("\\u{%06X}", c);
    }
}||||||||/**
 * Return a string representing the escaped char for code c.  E.g., If c
 * has value 0x100, you will get "\\u0100".  ASCII gets the usual
 * char (non-hex) representation.  Non-ASCII characters are spit out
 * as \\uXXXX or \\u{XXXXXX} escapes.
 */
public static String getANTLRCharLiteralForChar(int c) {
    String result;
    if (c < Lexer.MIN_CHAR_VALUE) {
        result = "<INVALID>";
    } else {
        String charValueEscape = c < ANTLRLiteralCharValueEscape.length ? ANTLRLiteralCharValueEscape[c] : null;
        if (charValueEscape != null) {
            result = charValueEscape;
        } else if (Character.UnicodeBlock.of((char) c) == Character.UnicodeBlock.BASIC_LATIN && !Character.isISOControl((char) c)) {
            if (c == '\\') {
                result = "\\\\";
            } else if (c == '\'') {
                result = "\\'";
            } else {
                result = Character.toString((char) c);
            }
        } else if (c <= 0xFFFF) {
            result = String.format("\\u%04X", c);
        } else {
            result = String.format("\\u{%06X}", c);
        }
    }
    return '\'' + result + '\'';
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BinaryExpr
						(BinaryExpr
							(CharLiteralExpr
							)
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(CharLiteralExpr
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						(CastExpr
							NameExpr
								SimpleName
							(PrimitiveType
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(UnaryExpr
					(MethodCallExpr
						(CastExpr
							NameExpr
								SimpleName
							(PrimitiveType
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							StringLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							StringLiteralExpr
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						(BinaryExpr
							(CharLiteralExpr
							)
							(MethodCallExpr
								(CastExpr
									NameExpr
										SimpleName
									(PrimitiveType
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(CharLiteralExpr
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								NullLiteralExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								(MethodCallExpr
									(CastExpr
										NameExpr
											SimpleName
										(PrimitiveType
										)
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(UnaryExpr
								(MethodCallExpr
									(CastExpr
										NameExpr
											SimpleName
										(PrimitiveType
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(CharLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(CastExpr
														NameExpr
															SimpleName
														(PrimitiveType
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(CharLiteralExpr
					)
					NameExpr
						SimpleName
				)
				(CharLiteralExpr
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

