// $ANTLR start "topdown"
// BasicSemanticTriggers.g:117:1: topdown : ( grammarSpec | optionsSpec | rule | ruleref );
public final void topdown() throws RecognitionException {
    try {
        // BasicSemanticTriggers.g:118:2: ( grammarSpec | optionsSpec | rule | ruleref )
        int alt1 = 4;
        switch(input.LA(1)) {
            case LEXER_GRAMMAR:
            case PARSER_GRAMMAR:
            case TREE_GRAMMAR:
            case COMBINED_GRAMMAR:
                {
                    alt1 = 1;
                }
                break;
            case OPTIONS:
                {
                    alt1 = 2;
                }
                break;
            case RULE:
                {
                    alt1 = 3;
                }
                break;
            case BANG:
            case ROOT:
            case RULE_REF:
                {
                    alt1 = 4;
                }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
                throw nvae;
        }
        switch(alt1) {
            case 1:
                // BasicSemanticTriggers.g:118:4: grammarSpec
                {
                    pushFollow(FOLLOW_grammarSpec_in_topdown83);
                    grammarSpec();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 2:
                // BasicSemanticTriggers.g:119:4: optionsSpec
                {
                    pushFollow(FOLLOW_optionsSpec_in_topdown88);
                    optionsSpec();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 3:
                // BasicSemanticTriggers.g:120:4: rule
                {
                    pushFollow(FOLLOW_rule_in_topdown93);
                    rule();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 4:
                // BasicSemanticTriggers.g:121:4: ruleref
                {
                    pushFollow(FOLLOW_ruleref_in_topdown98);
                    ruleref();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
        }
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
    } finally {
    }
    return;
}||||||||// $ANTLR start "topdown"
// BasicSemanticTriggers.g:80:1: topdown : ( grammarSpec | optionsSpec | rule | ruleref | tokenAlias );
public final void topdown() throws RecognitionException {
    try {
        // BasicSemanticTriggers.g:81:2: ( grammarSpec | optionsSpec | rule | ruleref | tokenAlias )
        int alt1 = 5;
        switch(input.LA(1)) {
            case LEXER_GRAMMAR:
            case PARSER_GRAMMAR:
            case TREE_GRAMMAR:
            case COMBINED_GRAMMAR:
                {
                    alt1 = 1;
                }
                break;
            case OPTIONS:
                {
                    alt1 = 2;
                }
                break;
            case RULE:
                {
                    alt1 = 3;
                }
                break;
            case RULE_REF:
                {
                    alt1 = 4;
                }
                break;
            case ASSIGN:
                {
                    alt1 = 5;
                }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
                throw nvae;
        }
        switch(alt1) {
            case 1:
                // BasicSemanticTriggers.g:81:4: grammarSpec
                {
                    pushFollow(FOLLOW_grammarSpec_in_topdown93);
                    grammarSpec();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 2:
                // BasicSemanticTriggers.g:82:4: optionsSpec
                {
                    pushFollow(FOLLOW_optionsSpec_in_topdown98);
                    optionsSpec();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 3:
                // BasicSemanticTriggers.g:83:4: rule
                {
                    pushFollow(FOLLOW_rule_in_topdown103);
                    rule();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 4:
                // BasicSemanticTriggers.g:84:4: ruleref
                {
                    pushFollow(FOLLOW_ruleref_in_topdown108);
                    ruleref();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
            case 5:
                // BasicSemanticTriggers.g:85:4: tokenAlias
                {
                    pushFollow(FOLLOW_tokenAlias_in_topdown113);
                    tokenAlias();
                    state._fsp--;
                    if (state.failed)
                        return;
                }
                break;
        }
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
    } finally {
    }
    return;
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BooleanLiteralExpr
										)
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										StringLiteralExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ThrowStmt
							NameExpr
								SimpleName
						)
					)
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BooleanLiteralExpr
										)
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										StringLiteralExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ThrowStmt
							NameExpr
								SimpleName
						)
					)
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)

