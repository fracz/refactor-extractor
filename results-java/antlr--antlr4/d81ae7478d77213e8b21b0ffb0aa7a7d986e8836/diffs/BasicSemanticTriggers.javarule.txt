// $ANTLR end "optionValue"
// $ANTLR start "rule"
// BasicSemanticTriggers.g:158:1: rule : ^( RULE r= ID ( . )* ) ;
public final void rule() throws RecognitionException {
    GrammarAST r = null;
    try {
        // BasicSemanticTriggers.g:158:5: ( ^( RULE r= ID ( . )* ) )
        // BasicSemanticTriggers.g:158:9: ^( RULE r= ID ( . )* )
        {
            match(input, RULE, FOLLOW_RULE_in_rule297);
            if (state.failed)
                return;
            match(input, Token.DOWN, null);
            if (state.failed)
                return;
            r = (GrammarAST) match(input, ID, FOLLOW_ID_in_rule301);
            if (state.failed)
                return;
            // BasicSemanticTriggers.g:158:22: ( . )*
            loop4: do {
                int alt4 = 2;
                int LA4_0 = input.LA(1);
                if (((LA4_0 >= SEMPRED && LA4_0 <= 105))) {
                    alt4 = 1;
                } else if ((LA4_0 == UP)) {
                    alt4 = 2;
                }
                switch(alt4) {
                    case 1:
                        // BasicSemanticTriggers.g:158:22: .
                        {
                            matchAny(input);
                            if (state.failed)
                                return;
                        }
                        break;
                    default:
                        break loop4;
                }
            } while (true);
            match(input, Token.UP, null);
            if (state.failed)
                return;
            if (state.backtracking == 1) {
                BasicSemanticChecks.checkInvalidRuleDef(gtype, fileName, r.token);
            }
            if (state.backtracking == 1) {
            /*
              	    if ( gtype==LEXER_GRAMMAR && Character.isLowerCase((r!=null?r.getText():null).charAt(0)) ) {
              	    	ErrorManager.grammarError(ErrorType.PARSER_RULES_NOT_ALLOWED,
                  							      fileName, r.token, (r!=null?r.getText():null));
              		}
              	    if ( (gtype==PARSER_GRAMMAR||gtype==TREE_GRAMMAR) &&
              	         Character.isUpperCase((r!=null?r.getText():null).charAt(0)) )
              	    {
              	    	ErrorManager.grammarError(ErrorType.LEXER_RULES_NOT_ALLOWED,
                  							      fileName, r.token, (r!=null?r.getText():null));
              		}
              		*/
            }
        }
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
    } finally {
    }
    return;
}||||||||// $ANTLR end "optionValue"
// $ANTLR start "rule"
// BasicSemanticTriggers.g:117:1: rule : ^( RULE r= ID ( . )* ) ;
public final void rule() throws RecognitionException {
    GrammarAST r = null;
    try {
        // BasicSemanticTriggers.g:117:5: ( ^( RULE r= ID ( . )* ) )
        // BasicSemanticTriggers.g:117:9: ^( RULE r= ID ( . )* )
        {
            match(input, RULE, FOLLOW_RULE_in_rule301);
            if (state.failed)
                return;
            match(input, Token.DOWN, null);
            if (state.failed)
                return;
            r = (GrammarAST) match(input, ID, FOLLOW_ID_in_rule305);
            if (state.failed)
                return;
            // BasicSemanticTriggers.g:117:22: ( . )*
            loop4: do {
                int alt4 = 2;
                int LA4_0 = input.LA(1);
                if (((LA4_0 >= SEMPRED && LA4_0 <= 104))) {
                    alt4 = 1;
                } else if ((LA4_0 == UP)) {
                    alt4 = 2;
                }
                switch(alt4) {
                    case 1:
                        // BasicSemanticTriggers.g:117:22: .
                        {
                            matchAny(input);
                            if (state.failed)
                                return;
                        }
                        break;
                    default:
                        break loop4;
                }
            } while (true);
            match(input, Token.UP, null);
            if (state.failed)
                return;
            if (state.backtracking == 1) {
                BasicSemanticChecks.checkInvalidRuleDef(gtype, r.token);
            }
        }
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
    } finally {
    }
    return;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
			)
			(BlockStmt
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							SimpleName
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(LabeledStmt
						SimpleName
						(DoStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(EnclosedExpr
										(EnclosedExpr
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(IfStmt
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
								(SwitchStmt
									(SwitchEntryStmt
										(IntegerLiteralExpr
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											(IfStmt
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(ReturnStmt
												)
											)
											LineComment
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(BreakStmt
											SimpleName
										)
									)
									NameExpr
										SimpleName
								)
							)
							(BooleanLiteralExpr
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							SimpleName
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
						)
					)
					LineComment
				)
			)
		)
		(ReturnStmt
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
			)
			(BlockStmt
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							SimpleName
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(LabeledStmt
						SimpleName
						(DoStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(EnclosedExpr
										(EnclosedExpr
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(IfStmt
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
								(SwitchStmt
									(SwitchEntryStmt
										(IntegerLiteralExpr
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											(IfStmt
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(ReturnStmt
												)
											)
											LineComment
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(BreakStmt
											SimpleName
										)
									)
									NameExpr
										SimpleName
								)
							)
							(BooleanLiteralExpr
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							SimpleName
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ReturnStmt
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)

