/**
 * Logic is different in OperationState.
 *
 * @return
 */
private String getTransitionStateAfterCode() {
    StringBuilder code = new StringBuilder();
    code.append("{");
    /**
     * If current traceID is not exists, take nextId for current traceID.
     */
    code.append("if (com.profiler.context.Trace.getCurrentTraceId() == null) { com.profiler.context.Trace.setTraceId(__nextTraceId); }");
    // code.append("System.out.println(__traceId);");
    // code.append("System.out.println($1);");
    // code.append("System.out.println(\"Change state \" + state + \" -> \" + newState);");
    // code.append("System.out.println(handlingNode);");
    // code.append("System.out.println(\"cmd=\" + ((cmd == null) ? null : new String(cmd.array())));");
    // code.append("System.out.println(Thread.currentThread().getId());");
    // code.append("System.out.println(Thread.currentThread().getName());");
    // code.append("System.out.println(\"\");");
    // code.append("System.out.println(\"\");");
    // code.append("System.out.println(\"\");");
    code.append("if (newState == net.spy.memcached.ops.OperationState.READING) {");
    code.append("	java.net.SocketAddress socketAddress = handlingNode.getSocketAddress();");
    code.append("	if (socketAddress instanceof java.net.InetSocketAddress) {");
    code.append("		java.net.InetSocketAddress addr = (java.net.InetSocketAddress) handlingNode.getSocketAddress();");
    code.append("		com.profiler.context.Trace.recordEndPoint(addr.getHostName(), addr.getPort());");
    code.append("	}");
    code.append("	com.profiler.context.Trace.recordRpcName(\"arcus\", \"\");");
    code.append("	com.profiler.context.Trace.recordAttribute(\"arcus.command\", ((cmd == null) ? \"UNKNOWN\" : new String(cmd.array())));");
    code.append("	System.out.println(\"CS\");");
    code.append("	com.profiler.context.Trace.record(com.profiler.context.Annotation.ClientSend);");
    code.append("} else if (newState == net.spy.memcached.ops.OperationState.COMPLETE) {");
    code.append("	System.out.println(\"CR\");");
    code.append("	com.profiler.context.Trace.record(com.profiler.context.Annotation.ClientRecv);");
    code.append("}");
    code.append("}");
    return code.toString();
}||||||||/**
 * Logic is different in OperationState.
 *
 * @return
 */
private String getTransitionStateAfterCode() {
    StringBuilder code = new StringBuilder();
    code.append("{");
    /**
     * If current traceID is not exists, take nextId for current traceID.
     */
    code.append("if (com.profiler.context.Trace.getCurrentTraceId() == null) { com.profiler.context.Trace.setTraceId(__nextTraceId); }");
    // code.append("System.out.println(__traceId);");
    // code.append("System.out.println($1);");
    // code.append("System.out.println(\"Change state \" + state + \" -> \" + newState);");
    // code.append("System.out.println(handlingNode);");
    // code.append("System.out.println(\"cmd=\" + ((cmd == null) ? null : new String(cmd.array())));");
    // code.append("System.out.println(Thread.currentThread().getId());");
    // code.append("System.out.println(Thread.currentThread().getName());");
    // code.append("System.out.println(\"\");");
    // code.append("System.out.println(\"\");");
    // code.append("System.out.println(\"\");");
    code.append("if (newState == net.spy.memcached.ops.OperationState.READING) {");
    // TODO: remove, debugging
    code.append("System.out.println(\"\\n\\n\\nINVOKE ARCUS BEFORE  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\");");
    code.append("	java.net.SocketAddress socketAddress = handlingNode.getSocketAddress();");
    code.append("	if (socketAddress instanceof java.net.InetSocketAddress) {");
    code.append("		java.net.InetSocketAddress addr = (java.net.InetSocketAddress) handlingNode.getSocketAddress();");
    code.append("		com.profiler.context.Trace.recordEndPoint(addr.getHostName(), addr.getPort());");
    code.append("	}");
    code.append("	com.profiler.context.Trace.recordRpcName(\"arcus\", \"\");");
    code.append("	com.profiler.context.Trace.recordAttribute(\"arcus.command\", ((cmd == null) ? \"UNKNOWN\" : new String(cmd.array())));");
    code.append("	System.out.println(\"CS\");");
    code.append("	com.profiler.StopWatch.start(this.hashCode());");
    code.append("	com.profiler.context.Trace.record(com.profiler.context.Annotation.ClientSend);");
    code.append("} else if (newState == net.spy.memcached.ops.OperationState.COMPLETE) {");
    code.append("	System.out.println(\"CR\");");
    code.append("	com.profiler.context.Trace.record(com.profiler.context.Annotation.ClientRecv, com.profiler.StopWatch.stopAndGetElapsed(this.hashCode()));");
    // TODO: remove, debugging
    code.append("System.out.println(\"\\n\\n\\nINVOKE ARCUS AFTER  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\");");
    code.append("}");
    code.append("}");
    return code.toString();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)

