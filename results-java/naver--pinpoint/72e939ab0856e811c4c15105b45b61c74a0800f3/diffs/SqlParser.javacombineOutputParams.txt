public String combineOutputParams(String sql, List<String> outputParams) {
    final int length = sql.length();
    final StringBuilder normalized = new StringBuilder(length + 16);
    for (int i = 0; i < length; i++) {
        final char ch = sql.charAt(i);
        switch(ch) {
            // COMMENT start check
            case '/':
                // comment state
                int lookAhead1Char = lookAhead1(sql, i);
                // multi line comment and oracle hint /*+ */
                if (lookAhead1Char == '*') {
                    normalized.append("/*");
                    i += 2;
                    for (; i < length; i++) {
                        char stateCh = sql.charAt(i);
                        if (stateCh == '*') {
                            if (lookAhead1(sql, i) == '/') {
                                normalized.append("*/");
                                i++;
                                break;
                            }
                        }
                        normalized.append(stateCh);
                    }
                    break;
                // single line comment
                } else if (lookAhead1Char == '/') {
                    normalized.append("//");
                    i += 2;
                    i = readLine(sql, normalized, i);
                    break;
                } else {
                    // unary operator
                    // numberTokenStartEnable = true;
                    normalized.append(ch);
                    break;
                }
            // # is a single line comment in mysql
            case '-':
                // single line comment state
                if (lookAhead1(sql, i) == '-') {
                    normalized.append("--");
                    i += 2;
                    i = readLine(sql, normalized, i);
                    break;
                } else {
                    // unary operator
                    // numberTokenStartEnable = true;
                    normalized.append(ch);
                    break;
                }
            // number start check
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                // http://www.h2database.com/html/grammar.html look at the state machine more
                if (lookAhead1(sql, i) == NEXT_TOKEN_NOT_EXIST) {
                    normalized.append(ch);
                    break;
                }
                StringBuilder outputIndex = new StringBuilder();
                outputIndex.append(ch);
                // number token start
                i++;
                tokenEnd: for (; i < length; i++) {
                    char stateCh = sql.charAt(i);
                    switch(stateCh) {
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            if (lookAhead1(sql, i) == NEXT_TOKEN_NOT_EXIST) {
                                outputIndex.append(stateCh);
                                normalized.append(outputIndex.toString());
                                break tokenEnd;
                            }
                            outputIndex.append(stateCh);
                            break;
                        case NUMBER_REPLACE:
                            int numberIndex = 0;
                            try {
                                numberIndex = Integer.parseInt(outputIndex.toString());
                            } catch (NumberFormatException e) {
                                // just append for invalid parameters
                                normalized.append(outputIndex.toString());
                                normalized.append(NUMBER_REPLACE);
                                break tokenEnd;
                            }
                            try {
                                String replaceNumber = outputParams.get(numberIndex);
                                normalized.append(replaceNumber);
                            } catch (IndexOutOfBoundsException e) {
                                // just append for invalid parameters
                                normalized.append(outputIndex.toString());
                                normalized.append(NUMBER_REPLACE);
                                break tokenEnd;
                            }
                            break tokenEnd;
                        case SYMBOL_REPLACE:
                            int symbolIndex = 0;
                            try {
                                symbolIndex = Integer.parseInt(outputIndex.toString());
                            } catch (NumberFormatException e) {
                                // just append for invalid parameters
                                normalized.append(outputIndex.toString());
                                normalized.append(SYMBOL_REPLACE);
                            }
                            try {
                                String replaceSymbol = outputParams.get(symbolIndex);
                                normalized.append(replaceSymbol);
                            } catch (IndexOutOfBoundsException e) {
                                normalized.append(outputIndex.toString());
                                normalized.append(SYMBOL_REPLACE);
                            }
                            break tokenEnd;
                        default:
                            // should look at the token outside the loop - not here
                            // outputParam.append(SEPARATOR);
                            normalized.append(outputIndex.toString());
                            i--;
                            break tokenEnd;
                    }
                }
                break;
            default:
                normalized.append(ch);
                break;
        }
    }
    return normalized.toString();
}||||||||String combineOutputParams(String sql, List<String> outputParams);||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(CharLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(CharLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(BreakStmt
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BreakStmt
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(IfStmt
													(BinaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
														)
														(CharLiteralExpr
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
														)
														(BreakStmt
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							LineComment
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(BreakStmt
								)
							)
							LineComment
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
						(LabeledStmt
							SimpleName
							(ForStmt
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(SwitchStmt
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
										)
										(SwitchEntryStmt
											(CharLiteralExpr
											)
											(IfStmt
												(BinaryExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
													)
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(MethodCallExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BreakStmt
														SimpleName
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BreakStmt
											)
										)
										(SwitchEntryStmt
											NameExpr
												SimpleName
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(IntegerLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(BreakStmt
															SimpleName
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(BreakStmt
															SimpleName
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(VariableDeclarationExpr
															(VariableDeclarator
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BreakStmt
												SimpleName
											)
										)
										(SwitchEntryStmt
											NameExpr
												SimpleName
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(IntegerLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(VariableDeclarationExpr
															(VariableDeclarator
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BreakStmt
												SimpleName
											)
										)
										(SwitchEntryStmt
											(ExpressionStmt
												(MethodCallExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
											(BreakStmt
												SimpleName
											)
										)
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)

