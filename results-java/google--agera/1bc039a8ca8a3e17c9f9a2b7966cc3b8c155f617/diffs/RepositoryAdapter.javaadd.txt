/**
 * Specifies that the {@link RepositoryAdapter} being built should present the given
 * {@code repository} next (after all previously added repositories, items and static layouts),
 * using the given {@code presenter} for any presentation logic.
 *
 * @param repository The repository to be presented. This can be the same as a previously added
 * repository; this makes the resulting {@link RepositoryAdapter} present the same data in
 * different positions and/or different ways.
 * @param presenter The repository presenter associated with the {@code repository} at this
 * position.
 * @return This instance, for chaining.
 */
@NonNull
public <T> Builder add(@NonNull final Repository<T> repository, @NonNull final RepositoryPresenter<T> presenter) {
    @SuppressWarnings("unchecked") final Repository<Object> untypedRepository = (Repository<Object>) checkNotNull(repository);
    suppliers.add(untypedRepository);
    @SuppressWarnings("unchecked") final RepositoryPresenter<Object> untypedPresenter = (RepositoryPresenter<Object>) checkNotNull(presenter);
    presenters.add(untypedPresenter);
    observables.add(untypedRepository);
    return this;
}||||||||/**
 * Specifies that the {@link RepositoryAdapter} being built should present the given
 * {@code repository} next (after all previously added repositories, items and static layouts),
 * using the given {@code presenter} for any presentation logic.
 *
 * @param repository The repository to be presented. This can be the same as a previously added
 * repository; this makes the resulting {@link RepositoryAdapter} present the same data in
 * different positions and/or different ways.
 * @param presenter The repository presenter associated with the {@code repository} at this
 * position of the {@link RepositoryAdapter}.
 * @return This instance, for chaining.
 */
@NonNull
public <T> Builder add(@NonNull final Repository<T> repository, @NonNull final RepositoryPresenter<T> presenter) {
    parts.add(new RepositoryPart(repository, presenter));
    observables.add(repository);
    return this;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(SingleMemberAnnotationExpr
					StringLiteralExpr
					Name
				)
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(SingleMemberAnnotationExpr
					StringLiteralExpr
					Name
				)
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

