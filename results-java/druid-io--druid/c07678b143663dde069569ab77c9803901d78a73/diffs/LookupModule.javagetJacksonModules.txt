@Override
public List<? extends Module> getJacksonModules() {
    return ImmutableList.<Module>of(new SimpleModule("DruidLookupModule").registerSubtypes(MapLookupExtractorFactory.class));
}||||||||@Override
public List<? extends Module> getJacksonModules() {
    return ImmutableList.<Module>of(new SimpleModule("DruidLookupModule").registerSubtypes(MapLookupExtractorFactory.class), new SimpleModule().registerSubtypes(new NamedType(LookupDimensionSpec.class, "lookup"), new NamedType(RegisteredLookupExtractionFn.class, "registeredLookup")));
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodCallExpr
					(ObjectCreationExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ObjectCreationExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

