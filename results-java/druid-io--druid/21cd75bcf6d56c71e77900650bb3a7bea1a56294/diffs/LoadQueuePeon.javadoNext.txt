private void doNext() {
    synchronized (lock) {
        if (currentlyProcessing == null) {
            if (!segmentsToDrop.isEmpty()) {
                currentlyProcessing = segmentsToDrop.firstEntry().getValue();
                log.info("Server[%s] dropping [%s]", basePath, currentlyProcessing.getSegmentIdentifier());
            } else if (!segmentsToLoad.isEmpty()) {
                currentlyProcessing = segmentsToLoad.firstEntry().getValue();
                log.info("Server[%s] loading [%s]", basePath, currentlyProcessing.getSegmentIdentifier());
            } else {
                return;
            }
            zkWritingExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    synchronized (lock) {
                        try {
                            if (currentlyProcessing == null) {
                                log.makeAlert("Crazy race condition! server[%s]", basePath).emit();
                                actionCompleted();
                                doNext();
                                return;
                            }
                            log.info("Server[%s] processing segment[%s]", basePath, currentlyProcessing.getSegmentIdentifier());
                            final String path = ZKPaths.makePath(basePath, currentlyProcessing.getSegmentIdentifier());
                            final byte[] payload = jsonMapper.writeValueAsBytes(currentlyProcessing.getChangeRequest());
                            curator.create().withMode(CreateMode.EPHEMERAL).forPath(path, payload);
                            zkWritingExecutor.schedule(new Runnable() {

                                @Override
                                public void run() {
                                    try {
                                        if (curator.checkExists().forPath(path) != null) {
                                            failAssign(new ISE("%s was never removed! Failing this operation!", path));
                                        }
                                    } catch (Exception e) {
                                        failAssign(e);
                                    }
                                }
                            }, config.getLoadTimeoutDelay().getMillis(), TimeUnit.MILLISECONDS);
                            final Stat stat = curator.checkExists().usingWatcher(new CuratorWatcher() {

                                @Override
                                public void process(WatchedEvent watchedEvent) throws Exception {
                                    switch(watchedEvent.getType()) {
                                        case NodeDeleted:
                                            entryRemoved(watchedEvent.getPath());
                                    }
                                }
                            }).forPath(path);
                            if (stat == null) {
                                final byte[] noopPayload = jsonMapper.writeValueAsBytes(new SegmentChangeRequestNoop());
                                // Create a node and then delete it to remove the registered watcher.  This is a work-around for
                                // a zookeeper race condition.  Specifically, when you set a watcher, it fires on the next event
                                // that happens for that node.  If no events happen, the watcher stays registered foreverz.
                                // Couple that with the fact that you cannot set a watcher when you create a node, but what we
                                // want is to create a node and then watch for it to get deleted.  The solution is that you *can*
                                // set a watcher when you check to see if it exists so, we first create the node and then set a
                                // watcher on its existence.  However, if already does not exist by the time the existence check
                                // returns, then the watcher that was set will never fire (nobody will ever create the node
                                // again) and thus lead to a slow, but real, memory leak.  So, we create another node to cause
                                // that watcher to fire and delete it right away.
                                // 
                                // We do not create the existence watcher first, because then it will fire when we create the
                                // node and we'll have the same race when trying to refresh that watcher.
                                curator.create().withMode(CreateMode.EPHEMERAL).forPath(path, noopPayload);
                                entryRemoved(path);
                            }
                        } catch (Exception e) {
                            failAssign(e);
                        }
                    }
                }
            });
        } else {
            log.info("Server[%s] skipping doNext() because something is currently loading[%s].", basePath, currentlyProcessing.getSegmentIdentifier());
        }
    }
}||||||||private void doNext() {
    synchronized (lock) {
        if (currentlyProcessing == null) {
            if (!segmentsToDrop.isEmpty()) {
                currentlyProcessing = segmentsToDrop.firstEntry().getValue();
                log.info("Server[%s] dropping [%s]", basePath, currentlyProcessing.getSegmentIdentifier());
            } else if (!segmentsToLoad.isEmpty()) {
                currentlyProcessing = segmentsToLoad.firstEntry().getValue();
                log.info("Server[%s] loading [%s]", basePath, currentlyProcessing.getSegmentIdentifier());
            } else {
                return;
            }
            zkWritingExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    synchronized (lock) {
                        try {
                            // expected when the coordinator looses leadership and LoadQueuePeon is stopped.
                            if (currentlyProcessing == null) {
                                if (!stopped) {
                                    log.makeAlert("Crazy race condition! server[%s]", basePath).emit();
                                }
                                actionCompleted();
                                doNext();
                                return;
                            }
                            log.info("Server[%s] processing segment[%s]", basePath, currentlyProcessing.getSegmentIdentifier());
                            final String path = ZKPaths.makePath(basePath, currentlyProcessing.getSegmentIdentifier());
                            final byte[] payload = jsonMapper.writeValueAsBytes(currentlyProcessing.getChangeRequest());
                            curator.create().withMode(CreateMode.EPHEMERAL).forPath(path, payload);
                            zkWritingExecutor.schedule(new Runnable() {

                                @Override
                                public void run() {
                                    try {
                                        if (curator.checkExists().forPath(path) != null) {
                                            failAssign(new ISE("%s was never removed! Failing this operation!", path));
                                        }
                                    } catch (Exception e) {
                                        failAssign(e);
                                    }
                                }
                            }, config.getLoadTimeoutDelay().getMillis(), TimeUnit.MILLISECONDS);
                            final Stat stat = curator.checkExists().usingWatcher(new CuratorWatcher() {

                                @Override
                                public void process(WatchedEvent watchedEvent) throws Exception {
                                    switch(watchedEvent.getType()) {
                                        case NodeDeleted:
                                            entryRemoved(watchedEvent.getPath());
                                    }
                                }
                            }).forPath(path);
                            if (stat == null) {
                                final byte[] noopPayload = jsonMapper.writeValueAsBytes(new SegmentChangeRequestNoop());
                                // Create a node and then delete it to remove the registered watcher.  This is a work-around for
                                // a zookeeper race condition.  Specifically, when you set a watcher, it fires on the next event
                                // that happens for that node.  If no events happen, the watcher stays registered foreverz.
                                // Couple that with the fact that you cannot set a watcher when you create a node, but what we
                                // want is to create a node and then watch for it to get deleted.  The solution is that you *can*
                                // set a watcher when you check to see if it exists so, we first create the node and then set a
                                // watcher on its existence.  However, if already does not exist by the time the existence check
                                // returns, then the watcher that was set will never fire (nobody will ever create the node
                                // again) and thus lead to a slow, but real, memory leak.  So, we create another node to cause
                                // that watcher to fire and delete it right away.
                                // 
                                // We do not create the existence watcher first, because then it will fire when we create the
                                // node and we'll have the same race when trying to refresh that watcher.
                                curator.create().withMode(CreateMode.EPHEMERAL).forPath(path, noopPayload);
                                entryRemoved(path);
                            }
                        } catch (Exception e) {
                            failAssign(e);
                        }
                    }
                }
            });
        } else {
            log.info("Server[%s] skipping doNext() because something is currently loading[%s].", basePath, currentlyProcessing.getSegmentIdentifier());
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ReturnStmt
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(SynchronizedStmt
												(BlockStmt
													(TryStmt
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(BlockStmt
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	NullLiteralExpr
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			(MethodCallExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																		)
																	)
																	(ReturnStmt
																	)
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	StringLiteralExpr
																	NameExpr
																		SimpleName
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(ArrayType
																			(PrimitiveType
																			)
																		)
																	)
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																	(MethodCallExpr
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	(ObjectCreationExpr
																		(MethodDeclaration
																			(BlockStmt
																				(TryStmt
																					(CatchClause
																						(BlockStmt
																							(ExpressionStmt
																								(MethodCallExpr
																									NameExpr
																										SimpleName
																									SimpleName
																								)
																							)
																						)
																						(Parameter
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																					)
																					(BlockStmt
																						(IfStmt
																							(BinaryExpr
																								(MethodCallExpr
																									NameExpr
																										SimpleName
																									SimpleName
																									(MethodCallExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																								NullLiteralExpr
																							)
																							(BlockStmt
																								(ExpressionStmt
																									(MethodCallExpr
																										(ObjectCreationExpr
																											StringLiteralExpr
																											NameExpr
																												SimpleName
																											(ClassOrInterfaceType
																												SimpleName
																											)
																										)
																										SimpleName
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																			(VoidType
																			)
																			SimpleName
																			(MarkerAnnotationExpr
																				Name
																			)
																		)
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																	(MethodCallExpr
																		SimpleName
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			(MethodCallExpr
																				(ObjectCreationExpr
																					(MethodDeclaration
																						(BlockStmt
																							(SwitchStmt
																								(SwitchEntryStmt
																									NameExpr
																										SimpleName
																									(ExpressionStmt
																										(MethodCallExpr
																											(MethodCallExpr
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																											SimpleName
																										)
																									)
																								)
																								(MethodCallExpr
																									SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																						(VoidType
																						)
																						SimpleName
																						(Parameter
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																						(ClassOrInterfaceType
																							SimpleName
																						)
																						(MarkerAnnotationExpr
																							Name
																						)
																					)
																					(ClassOrInterfaceType
																						SimpleName
																					)
																				)
																				SimpleName
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	NullLiteralExpr
																)
																(BlockStmt
																	(ExpressionStmt
																		(VariableDeclarationExpr
																			(VariableDeclarator
																				(MethodCallExpr
																					(ObjectCreationExpr
																						(ClassOrInterfaceType
																							SimpleName
																						)
																					)
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				(ArrayType
																					(PrimitiveType
																					)
																				)
																			)
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			SimpleName
																			(MethodCallExpr
																				(FieldAccessExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		LineComment
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																)
															)
														)
													)
												)
												NameExpr
													SimpleName
											)
										)
										(VoidType
										)
										SimpleName
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ReturnStmt
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(SynchronizedStmt
												(BlockStmt
													(TryStmt
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(BlockStmt
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	NullLiteralExpr
																)
																(BlockStmt
																	(IfStmt
																		(UnaryExpr
																			NameExpr
																				SimpleName
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(MethodCallExpr
																					SimpleName
																					(MethodCallExpr
																						StringLiteralExpr
																						NameExpr
																							SimpleName
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																			)
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																		)
																	)
																	(ReturnStmt
																	)
																)
																LineComment
															)
															(ExpressionStmt
																(MethodCallExpr
																	StringLiteralExpr
																	NameExpr
																		SimpleName
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(ArrayType
																			(PrimitiveType
																			)
																		)
																	)
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																	(MethodCallExpr
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	(ObjectCreationExpr
																		(MethodDeclaration
																			(BlockStmt
																				(TryStmt
																					(CatchClause
																						(BlockStmt
																							(ExpressionStmt
																								(MethodCallExpr
																									NameExpr
																										SimpleName
																									SimpleName
																								)
																							)
																						)
																						(Parameter
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																					)
																					(BlockStmt
																						(IfStmt
																							(BinaryExpr
																								(MethodCallExpr
																									NameExpr
																										SimpleName
																									SimpleName
																									(MethodCallExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																								NullLiteralExpr
																							)
																							(BlockStmt
																								(ExpressionStmt
																									(MethodCallExpr
																										(ObjectCreationExpr
																											StringLiteralExpr
																											NameExpr
																												SimpleName
																											(ClassOrInterfaceType
																												SimpleName
																											)
																										)
																										SimpleName
																									)
																								)
																							)
																						)
																					)
																				)
																			)
																			(VoidType
																			)
																			SimpleName
																			(MarkerAnnotationExpr
																				Name
																			)
																		)
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																	(MethodCallExpr
																		SimpleName
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			(MethodCallExpr
																				(ObjectCreationExpr
																					(MethodDeclaration
																						(BlockStmt
																							(SwitchStmt
																								(SwitchEntryStmt
																									NameExpr
																										SimpleName
																									(ExpressionStmt
																										(MethodCallExpr
																											(MethodCallExpr
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																											SimpleName
																										)
																									)
																								)
																								(MethodCallExpr
																									SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																						(VoidType
																						)
																						SimpleName
																						(Parameter
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																						(ClassOrInterfaceType
																							SimpleName
																						)
																						(MarkerAnnotationExpr
																							Name
																						)
																					)
																					(ClassOrInterfaceType
																						SimpleName
																					)
																				)
																				SimpleName
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	NullLiteralExpr
																)
																(BlockStmt
																	(ExpressionStmt
																		(VariableDeclarationExpr
																			(VariableDeclarator
																				(MethodCallExpr
																					(ObjectCreationExpr
																						(ClassOrInterfaceType
																							SimpleName
																						)
																					)
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				(ArrayType
																					(PrimitiveType
																					)
																				)
																			)
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			SimpleName
																			(MethodCallExpr
																				(FieldAccessExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		LineComment
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																)
															)
														)
													)
												)
												NameExpr
													SimpleName
											)
										)
										(VoidType
										)
										SimpleName
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
)

