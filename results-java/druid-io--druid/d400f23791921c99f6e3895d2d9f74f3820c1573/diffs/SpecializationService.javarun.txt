@Override
public void run() {
    try {
        T specialized;
        if (specializedClassCounter.get() > maxSpecializations) {
            // Don't specialize, just instantiate the prototype class and emit a warning.
            // The "better" approach is probably to implement some kind of cache eviction from
            // PerPrototypeClassState.specializationStates. But it might be that nobody ever hits even the current
            // maxSpecializations limit, so implementing cache eviction is an unnecessary complexity.
            specialized = perPrototypeClassState.prototypeClass.newInstance();
            LOG.warn("SpecializationService couldn't make more than [%d] specializations. " + "Not doing specialization for runtime shape[%s] and class remapping[%s], using the prototype class[%s]", maxSpecializations, specializationId.runtimeShape, specializationId.classRemapping, perPrototypeClassState.prototypeClass);
        } else if (fakeSpecialize) {
            specialized = perPrototypeClassState.prototypeClass.newInstance();
        } else {
            specialized = perPrototypeClassState.specialize(specializationId.classRemapping);
        }
        perPrototypeClassState.specializationStates.put(specializationId, new Specialized<>(specialized));
    } catch (Exception e) {
        LOG.error(e, "Error specializing prototype class[%s] for runtime shape[%s] and class remapping[%s]", perPrototypeClassState.prototypeClass, specializationId.runtimeShape, specializationId.classRemapping);
    }
}||||||||@Override
public void run() {
    try {
        T specialized;
        if (specializedClassCounter.get() > maxSpecializations) {
            // Don't specialize, just instantiate the prototype class and emit a warning.
            // The "better" approach is probably to implement some kind of cache eviction from
            // PerPrototypeClassState.specializationStates. But it might be that nobody ever hits even the current
            // maxSpecializations limit, so implementing cache eviction is an unnecessary complexity.
            specialized = perPrototypeClassState.prototypeClass.newInstance();
            if (!maxSpecializationsWarningEmitted.get() && maxSpecializationsWarningEmitted.compareAndSet(false, true)) {
                LOG.warn("SpecializationService couldn't make more than [%d] specializations. " + "Not doing specialization for runtime shape[%s] and class remapping[%s], using the prototype class[%s]", maxSpecializations, specializationId.runtimeShape, specializationId.classRemapping, perPrototypeClassState.prototypeClass);
            }
        } else if (fakeSpecialize) {
            specialized = perPrototypeClassState.prototypeClass.newInstance();
            LOG.info("Not specializing prototype class[%s] for runtime shape[%s] and class remapping[%s] because " + "fakeSpecialize=true, using the prototype class instead", perPrototypeClassState.prototypeClass, specializationId.runtimeShape, specializationId.classRemapping);
        } else {
            specialized = perPrototypeClassState.specialize(specializationId.classRemapping);
            LOG.info("Specializing prototype class[%s] for runtime shape[%s] and class remapping[%s]", perPrototypeClassState.prototypeClass, specializationId.runtimeShape, specializationId.classRemapping);
        }
        perPrototypeClassState.specializationStates.put(specializationId, new Specialized<>(specialized));
    } catch (Exception e) {
        LOG.error(e, "Error specializing prototype class[%s] for runtime shape[%s] and class remapping[%s]", perPrototypeClassState.prototypeClass, specializationId.runtimeShape, specializationId.classRemapping);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									(BooleanLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

