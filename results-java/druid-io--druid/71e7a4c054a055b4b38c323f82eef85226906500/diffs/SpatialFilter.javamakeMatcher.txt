@Override
public ValueMatcher makeMatcher(ColumnSelectorFactory factory) {
    return Filters.makeValueMatcher(factory, dimension, new DruidPredicateFactory() {

        @Override
        public Predicate<String> makeStringPredicate() {
            return new Predicate<String>() {

                @Override
                public boolean apply(String input) {
                    if (input == null) {
                        return false;
                    }
                    final float[] coordinate = SpatialDimensionRowTransformer.decode(input);
                    return bound.contains(coordinate);
                }
            };
        }

        @Override
        public DruidLongPredicate makeLongPredicate() {
            // SpatialFilter does not currently support longs
            return DruidLongPredicate.ALWAYS_FALSE;
        }

        @Override
        public DruidFloatPredicate makeFloatPredicate() {
            // SpatialFilter does not currently support floats
            return DruidFloatPredicate.ALWAYS_FALSE;
        }
    });
}||||||||@Override
public ValueMatcher makeMatcher(ColumnSelectorFactory factory) {
    return Filters.makeValueMatcher(factory, dimension, new DruidPredicateFactory() {

        @Override
        public Predicate<String> makeStringPredicate() {
            return new Predicate<String>() {

                @Override
                public boolean apply(String input) {
                    if (input == null) {
                        return false;
                    }
                    final float[] coordinate = SpatialDimensionRowTransformer.decode(input);
                    return bound.contains(coordinate);
                }
            };
        }

        @Override
        public DruidLongPredicate makeLongPredicate() {
            // SpatialFilter does not currently support longs
            return DruidLongPredicate.ALWAYS_FALSE;
        }

        @Override
        public DruidFloatPredicate makeFloatPredicate() {
            // SpatialFilter does not currently support floats
            return DruidFloatPredicate.ALWAYS_FALSE;
        }

        @Override
        public DruidDoublePredicate makeDoublePredicate() {
            // SpatialFilter does not currently support doubles
            return DruidDoublePredicate.ALWAYS_FALSE;
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
												(BlockStmt
													(ReturnStmt
														(BooleanLiteralExpr
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(ArrayType
															(PrimitiveType
															)
														)
													)
												)
											)
											(ReturnStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(PrimitiveType
										)
										SimpleName
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
												(BlockStmt
													(ReturnStmt
														(BooleanLiteralExpr
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(ArrayType
															(PrimitiveType
															)
														)
													)
												)
											)
											(ReturnStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(PrimitiveType
										)
										SimpleName
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

