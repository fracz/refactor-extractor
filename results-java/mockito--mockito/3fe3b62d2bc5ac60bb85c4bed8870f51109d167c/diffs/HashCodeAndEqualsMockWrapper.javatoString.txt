@Override
public String toString() {
    MockUtil mockUtil = new MockUtil();
    return "HashCodeAndEqualsMockWrapper{" + "mockInstance=" + (mockUtil.isMock(mockInstance) ? mockUtil.getMockName(mockInstance) : typeInstanceString()) + '}';
}||||||||@Override
public String toString() {
    return "HashCodeAndEqualsMockWrapper{" + "mockInstance=" + (MockUtil.isMock(mockInstance) ? MockUtil.getMockName(mockInstance) : typeInstanceString()) + '}';
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					(EnclosedExpr
						(ConditionalExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(CharLiteralExpr
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					(EnclosedExpr
						(ConditionalExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(CharLiteralExpr
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

