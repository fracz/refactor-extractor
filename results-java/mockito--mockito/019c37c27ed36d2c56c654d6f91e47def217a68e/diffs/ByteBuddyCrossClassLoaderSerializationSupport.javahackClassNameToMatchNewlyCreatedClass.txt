/**
 * Hack the <code>name</code> field of the given <code>ObjectStreamClass</code> with
 * the <code>newProxyClass</code>.
 * <p/>
 * The parent ObjectInputStream will check the name of the class in the stream matches the name of the one
 * that is created in this method.
 * <p/>
 * The CGLIB classes uses a hash of the classloader and/or maybe some other data that allow them to be
 * relatively unique in a JVM.
 * <p/>
 * When names differ, which happens when the mock is deserialized in another ClassLoader, a
 * <code>java.io.InvalidObjectException</code> is thrown, so this part of the code is hacking through
 * the given <code>ObjectStreamClass</code> to change the name with the newly created class.
 *
 * @param descInstance The <code>ObjectStreamClass</code> that will be hacked.
 * @param proxyClass   The proxy class whose name will be applied.
 * @throws java.io.InvalidObjectException
 */
private void hackClassNameToMatchNewlyCreatedClass(ObjectStreamClass descInstance, Class<?> proxyClass) throws ObjectStreamException {
    try {
        Field classNameField = descInstance.getClass().getDeclaredField("name");
        new FieldSetter(descInstance, classNameField).set(proxyClass.getCanonicalName());
    } catch (NoSuchFieldException nsfe) {
        throw new MockitoSerializationIssue(join("Wow, the class 'ObjectStreamClass' in the JDK don't have the field 'name',", "this is definitely a bug in our code as it means the JDK team changed a few internal things.", "", "Please report an issue with the JDK used, a code sample and a link to download the JDK would be welcome."), nsfe);
    }
}||||||||/**
 * Hack the <code>name</code> field of the given <code>ObjectStreamClass</code> with
 * the <code>newProxyClass</code>.
 * <p/>
 * The parent ObjectInputStream will check the name of the class in the stream matches the name of the one
 * that is created in this method.
 * <p/>
 * The CGLIB classes uses a hash of the classloader and/or maybe some other data that allow them to be
 * relatively unique in a JVM.
 * <p/>
 * When names differ, which happens when the mock is deserialized in another ClassLoader, a
 * <code>java.io.InvalidObjectException</code> is thrown, so this part of the code is hacking through
 * the given <code>ObjectStreamClass</code> to change the name with the newly created class.
 *
 * @param descInstance The <code>ObjectStreamClass</code> that will be hacked.
 * @param proxyClass   The proxy class whose name will be applied.
 * @throws java.io.InvalidObjectException
 */
private void hackClassNameToMatchNewlyCreatedClass(ObjectStreamClass descInstance, Class<?> proxyClass) throws ObjectStreamException {
    try {
        Field classNameField = descInstance.getClass().getDeclaredField("name");
        setField(descInstance, classNameField, proxyClass.getCanonicalName());
    } catch (NoSuchFieldException nsfe) {
        throw new MockitoSerializationIssue(join("Wow, the class 'ObjectStreamClass' in the JDK don't have the field 'name',", "this is definitely a bug in our code as it means the JDK team changed a few internal things.", "", "Please report an issue with the JDK used, a code sample and a link to download the JDK would be welcome."), nsfe);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

