@Test
public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {
    runner.run(notifier, new JunitTestBody() {

        public void run(RunNotifier notifier) {
            // this is what happens when the test runs:
            // first, unused stubbing:
            unusedStubbingThatQualifiesForWarning();
            // then, let's make the test fail so that warnings are printed
            notifier.fireTestFailure(null);
            // assert
            String loggedInfo = loggerStub.getLoggedInfo();
            assertContains("[Mockito] Warning - this stub was not used", loggedInfo);
            assertContains("mock.simpleMethod(123);", loggedInfo);
            assertContains(".unusedStubbingThatQualifiesForWarning(", loggedInfo);
        }
    });
}||||||||@Test
public void shouldLogUnusedStubbingWarningWhenTestFails() throws Exception {
    runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub) {

        @Override
        public void runTest(RunNotifier notifier) {
            // this is what happens when the test runs:
            // first, unused stubbing:
            unusedStubbingThatQualifiesForWarning();
            // then, let's make the test fail so that warnings are printed
            notifier.fireTestFailure(null);
            // assert
            String loggedInfo = loggerStub.getLoggedInfo();
            assertContains("[Mockito] Warning - this stub was not used", loggedInfo);
            assertContains("mock.simpleMethod(123);", loggedInfo);
            assertContains(".unusedStubbingThatQualifiesForWarning(", loggedInfo);
        }
    };
    runner.run(notifier);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NullLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NullLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodCallExpr
						SimpleName
						(ThisExpr
						)
					)
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

