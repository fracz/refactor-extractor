package org.mockito.usage;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.hamcrest.CoreMatchers.*;

import java.util.List;

import org.junit.*;
import org.mockito.*;
import org.mockito.exceptions.*;

/**
 * TODO find out what is important to protect ourselves and what's just too defensive
 */
@SuppressWarnings("unchecked")
public class MockitoExploitsTest {

    @Test
    public void rubbishPassedToStubMethod1() {
        MockitoOperations.reportControlForStubbing(null);
        try {
            stub("blah".contains("blah")).andReturn(Boolean.TRUE);
            fail();
        } catch (NotAMockMethodException e) {
            //cool
        }
    }

    @Ignore
    @Test
    public void unfinishedStubbingDetectedOnVerify() {
        List mock = mock(List.class);

        stub(mock.add("test"));

        try {
            verifyZeroInteractions(mock);
            fail();
        } catch (UnfinishedStubbingException e) {
            //cool
        }
    }

    @Ignore
    @Test
    public void unfinishedStubbingDetectedWhenAnotherStubbingIsStarted() {
        List mock = mock(List.class);

        stub(mock.add("test"));

        try {
            stub(mock.add("test")).andThrows(new Exception("ssdf"));
            fail();
        } catch (UnfinishedStubbingException e) {
            //cool
        }
    }

    @Ignore
    @Test
    public void rubbishPassedToStubMethodButThereIsAlreadyMethodCalledOnTheMock() {
        List mock = mock(List.class);

        mock.add("test");

        stub("blah".contains("blah")).andReturn(Boolean.TRUE);

        assertFalse(mock.add("test"));
    }

    @Ignore
    @Test
    public void rubbishPassedToStubMethodAndThrowableSet() {
        List mock = mock(List.class);
        try {
            stub("asdf".charAt(1)).andThrows(new RuntimeException());
            fail();
        } catch (Exception e) {
            //cool
        }
    }

    @Test
    public void shouldLetVerifyOnlyMocks() throws Exception {
        try {
            Mockito.verify("not a mock");
            fail();
        } catch (NotAMockException e) {
            //cool
        }
    }
}