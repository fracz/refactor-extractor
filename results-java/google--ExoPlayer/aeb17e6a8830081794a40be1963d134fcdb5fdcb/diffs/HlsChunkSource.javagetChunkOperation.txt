/**
 * Updates the provided {@link HlsChunkOperationHolder} to contain the next operation that should
 * be performed by the calling {@link HlsSampleSource}.
 * <p>
 * The next operation comprises of a possibly shortened queue length (shortened if the
 * implementation wishes for the caller to discard {@link TsChunk}s from the queue), together
 * with the next {@link HlsChunk} to load. The next chunk may be a {@link TsChunk} to be added to
 * the queue, or another {@link HlsChunk} type (e.g. to load initialization data), or null if the
 * source is not able to provide a chunk in its current state.
 *
 * @param queue A representation of the currently buffered {@link TsChunk}s.
 * @param seekPositionUs If the queue is empty, this parameter must specify the seek position. If
 * the queue is non-empty then this parameter is ignored.
 * @param playbackPositionUs The current playback position.
 * @param out A holder for the next operation, whose {@link HlsChunkOperationHolder#queueSize} is
 * initially equal to the length of the queue, and whose {@linkHls ChunkOperationHolder#chunk}
 * is initially equal to null or a {@link TsChunk} previously supplied by the
 * {@link HlsChunkSource} that the caller has not yet finished loading. In the latter case the
 * chunk can either be replaced or left unchanged. Note that leaving the chunk unchanged is
 * both preferred and more efficient than replacing it with a new but identical chunk.
 */
public void getChunkOperation(List<TsChunk> queue, long seekPositionUs, long playbackPositionUs, HlsChunkOperationHolder out) {
    if (out.chunk != null) {
        // We already have a chunk. Keep it.
        return;
    }
    if (mediaPlaylist == null) {
        out.chunk = newMediaPlaylistChunk();
        return;
    }
    int chunkMediaSequence = 0;
    if (mediaPlaylistWasLive) {
        if (queue.isEmpty()) {
            chunkMediaSequence = getLiveStartChunkMediaSequence();
        } else {
            // For live nextChunkIndex contains chunk media sequence number.
            chunkMediaSequence = queue.get(queue.size() - 1).nextChunkIndex;
            // queue, then try to catch up, skip a few chunks and start as if it was a new playlist.
            if (chunkMediaSequence < mediaPlaylist.mediaSequence) {
                // TODO: Trigger discontinuity in this case.
                chunkMediaSequence = getLiveStartChunkMediaSequence();
            }
        }
    } else {
        // Not live.
        if (queue.isEmpty()) {
            chunkMediaSequence = Util.binarySearchFloor(mediaPlaylist.segments, seekPositionUs, true, true) + mediaPlaylist.mediaSequence;
        } else {
            chunkMediaSequence = queue.get(queue.size() - 1).nextChunkIndex;
        }
    }
    if (chunkMediaSequence == -1) {
        out.chunk = null;
        return;
    }
    int chunkIndex = chunkMediaSequence - mediaPlaylist.mediaSequence;
    // If the end of the playlist is reached.
    if (chunkIndex >= mediaPlaylist.segments.size()) {
        if (mediaPlaylist.live && shouldRerequestMediaPlaylist()) {
            out.chunk = newMediaPlaylistChunk();
        } else {
            out.chunk = null;
        }
        return;
    }
    HlsMediaPlaylist.Segment segment = mediaPlaylist.segments.get(chunkIndex);
    Uri chunkUri = Util.getMergedUri(mediaPlaylist.baseUri, segment.url);
    // Check if encryption is specified.
    if (HlsMediaPlaylist.ENCRYPTION_METHOD_AES_128.equals(segment.encryptionMethod)) {
        if (!segment.encryptionKeyUri.equals(encryptionKeyUri)) {
            // Encryption is specified and the key has changed.
            Uri keyUri = Util.getMergedUri(mediaPlaylist.baseUri, segment.encryptionKeyUri);
            out.chunk = newEncryptionKeyChunk(keyUri, segment.encryptionIV);
            encryptionKeyUri = segment.encryptionKeyUri;
            return;
        }
    } else {
        encryptedDataSource = null;
        encryptionKeyUri = null;
    }
    DataSpec dataSpec = new DataSpec(chunkUri, 0, C.LENGTH_UNBOUNDED, null);
    long startTimeUs = segment.startTimeUs;
    long endTimeUs = startTimeUs + (long) (segment.durationSecs * 1000000);
    int nextChunkMediaSequence = chunkMediaSequence + 1;
    if (mediaPlaylistWasLive) {
        if (queue.isEmpty()) {
            liveStartTimeUs = startTimeUs;
            startTimeUs = 0;
            endTimeUs -= liveStartTimeUs;
        } else {
            startTimeUs -= liveStartTimeUs;
            endTimeUs -= liveStartTimeUs;
        }
    } else {
        // Not live.
        if (chunkIndex == mediaPlaylist.segments.size() - 1) {
            nextChunkMediaSequence = -1;
        }
    }
    DataSource dataSource;
    if (encryptedDataSource != null) {
        dataSource = encryptedDataSource;
    } else {
        dataSource = upstreamDataSource;
    }
    out.chunk = new TsChunk(dataSource, dataSpec, 0, startTimeUs, endTimeUs, nextChunkMediaSequence, segment.discontinuity);
}||||||||/**
 * Updates the provided {@link HlsChunkOperationHolder} to contain the next operation that should
 * be performed by the calling {@link HlsSampleSource}.
 * <p>
 * The next operation comprises of a possibly shortened queue length (shortened if the
 * implementation wishes for the caller to discard {@link TsChunk}s from the queue), together
 * with the next {@link HlsChunk} to load. The next chunk may be a {@link TsChunk} to be added to
 * the queue, or another {@link HlsChunk} type (e.g. to load initialization data), or null if the
 * source is not able to provide a chunk in its current state.
 *
 * @param queue A representation of the currently buffered {@link TsChunk}s.
 * @param seekPositionUs If the queue is empty, this parameter must specify the seek position. If
 * the queue is non-empty then this parameter is ignored.
 * @param playbackPositionUs The current playback position.
 * @param out A holder for the next operation, whose {@link HlsChunkOperationHolder#queueSize} is
 * initially equal to the length of the queue, and whose {@linkHls ChunkOperationHolder#chunk}
 * is initially equal to null or a {@link TsChunk} previously supplied by the
 * {@link HlsChunkSource} that the caller has not yet finished loading. In the latter case the
 * chunk can either be replaced or left unchanged. Note that leaving the chunk unchanged is
 * both preferred and more efficient than replacing it with a new but identical chunk.
 */
public void getChunkOperation(List<TsChunk> queue, long seekPositionUs, long playbackPositionUs, HlsChunkOperationHolder out) {
    if (out.chunk != null) {
        // We already have a chunk. Keep it.
        return;
    }
    if (mediaPlaylist == null) {
        out.chunk = newMediaPlaylistChunk();
        return;
    }
    int chunkMediaSequence = 0;
    if (mediaPlaylistWasLive) {
        if (queue.isEmpty()) {
            chunkMediaSequence = getLiveStartChunkMediaSequence();
        } else {
            // For live nextChunkIndex contains chunk media sequence number.
            chunkMediaSequence = queue.get(queue.size() - 1).nextChunkIndex;
            // queue, then try to catch up, skip a few chunks and start as if it was a new playlist.
            if (chunkMediaSequence < mediaPlaylist.mediaSequence) {
                // TODO: Trigger discontinuity in this case.
                chunkMediaSequence = getLiveStartChunkMediaSequence();
            }
        }
    } else {
        // Not live.
        if (queue.isEmpty()) {
            chunkMediaSequence = Util.binarySearchFloor(mediaPlaylist.segments, seekPositionUs, true, true) + mediaPlaylist.mediaSequence;
        } else {
            chunkMediaSequence = queue.get(queue.size() - 1).nextChunkIndex;
        }
    }
    if (chunkMediaSequence == -1) {
        out.chunk = null;
        return;
    }
    int chunkIndex = chunkMediaSequence - mediaPlaylist.mediaSequence;
    // If the end of the playlist is reached.
    if (chunkIndex >= mediaPlaylist.segments.size()) {
        if (mediaPlaylist.live && shouldRerequestMediaPlaylist()) {
            out.chunk = newMediaPlaylistChunk();
        } else {
            out.chunk = null;
        }
        return;
    }
    HlsMediaPlaylist.Segment segment = mediaPlaylist.segments.get(chunkIndex);
    Uri chunkUri = Util.getMergedUri(mediaPlaylist.baseUri, segment.url);
    // Check if encryption is specified.
    if (HlsMediaPlaylist.ENCRYPTION_METHOD_AES_128.equals(segment.encryptionMethod)) {
        if (!segment.encryptionKeyUri.equals(encryptionKeyUri)) {
            // Encryption is specified and the key has changed.
            Uri keyUri = Util.getMergedUri(mediaPlaylist.baseUri, segment.encryptionKeyUri);
            out.chunk = newEncryptionKeyChunk(keyUri, segment.encryptionIV);
            encryptionKeyUri = segment.encryptionKeyUri;
            return;
        }
    } else {
        encryptedDataSource = null;
        encryptionKeyUri = null;
    }
    DataSpec dataSpec = new DataSpec(chunkUri, 0, C.LENGTH_UNBOUNDED, null);
    long startTimeUs;
    int nextChunkMediaSequence = chunkMediaSequence + 1;
    if (mediaPlaylistWasLive) {
        if (queue.isEmpty()) {
            startTimeUs = 0;
        } else {
            startTimeUs = queue.get(queue.size() - 1).endTimeUs;
        }
    } else {
        // Not live.
        startTimeUs = segment.startTimeUs;
        if (chunkIndex == mediaPlaylist.segments.size() - 1) {
            nextChunkMediaSequence = -1;
        }
    }
    long endTimeUs = startTimeUs + (long) (segment.durationSecs * 1000000);
    DataSource dataSource;
    if (encryptedDataSource != null) {
        dataSource = encryptedDataSource;
    } else {
        dataSource = upstreamDataSource;
    }
    out.chunk = new TsChunk(dataSource, dataSpec, 0, 0, startTimeUs, endTimeUs, nextChunkMediaSequence, segment.discontinuity, false);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
									LineComment
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(CastExpr
							(EnclosedExpr
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
							)
							(PrimitiveType
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
									LineComment
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(CastExpr
							(EnclosedExpr
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
							)
							(PrimitiveType
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BooleanLiteralExpr
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

