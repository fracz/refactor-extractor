/**
 * Export to application.
 * <PRE>
 * +-------------------------------------------------------+
 * +                                                       +
 * + Export to:  [ Application            + ]    [  OK  ]  +
 * +                                                       +
 * + > Advanced                                            +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Version: [ Java 1.1   + ]                           +
 * +                                                       +
 * +   Not much point to using Java 1.1 for applications.  +
 * +   To run applications, all users will have to         +
 * +   install Java, in which case they'll most likely     +
 * +   have version 1.3 or later.                          +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Version: [ Java 1.3   + ]                           +
 * +                                                       +
 * +   Java 1.3 is the recommended setting for exporting   +
 * +   applications. Applications will run on any Windows  +
 * +   or Unix machine with Java installed. Mac OS X has   +
 * +   Java installed with the operation system, so there  +
 * +   is no additional installation will be required.     +
 * +                                                       +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +                                                       +
 * +   Platform: [ Mac OS X   + ]    <-- defaults to current platform
 * +                                                       +
 * +   Exports the application as a double-clickable       +
 * +   .app package, compatible with Mac OS X.             +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Platform: [ Windows    + ]                          +
 * +                                                       +
 * +   Exports the application as a double-clickable       +
 * +   .exe and a handful of supporting files.             +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Platform: [ jar file   + ]                          +
 * +                                                       +
 * +   A jar file can be used on any platform that has     +
 * +   Java installed. Simply doube-click the jar (or type +
 * +   "java -jar sketch.jar" at a command prompt) to run  +
 * +   the application. It is the least fancy method for   +
 * +   exporting.                                          +
 * +                                                       +
 * +-------------------------------------------------------+
 * </PRE>
 */
public boolean exportApplication(int exportPlatform) throws Exception {
    // make sure the user didn't hide the sketch folder
    ensureExistence();
    // is reloaded when exporting and an external editor is being used.
    if (Preferences.getBoolean("editor.external")) {
        // nuke previous files and settings
        load();
    }
    // int exportPlatform = PApplet.platform; //PConstants.MACOSX;
    String exportPlatformStr = null;
    if (exportPlatform == PConstants.WINDOWS) {
        exportPlatformStr = "windows";
    } else if (exportPlatform == PConstants.MACOSX) {
        exportPlatformStr = "macosx";
    } else if (exportPlatform == PConstants.LINUX) {
        exportPlatformStr = "linux";
    } else {
        exportPlatform = -1;
    }
    String folderName = "application";
    if (exportPlatform != -1) {
        folderName += "." + exportPlatformStr;
    }
    // nuke the old folder because it can cause trouble
    File destFolder = new File(folder, folderName);
    Base.removeDir(destFolder);
    destFolder.mkdirs();
    // build the sketch
    String foundName = build(destFolder.getPath(), name);
    // (already reported) error during export, exit this function
    if (foundName == null)
        return false;
    // BUG unfortunately, that can also be a bug in the preproc :(
    if (!name.equals(foundName)) {
        Base.showWarning("Error during export", "Sketch name is " + name + " but the sketch\n" + "name in the code was " + foundName, null);
        return false;
    }
    // / figure out where the jar files will be placed
    File jarFolder = new File(destFolder, "lib");
    // / on macosx, need to copy .app skeleton since that's
    // / also where the jar files will be placed
    File dotAppFolder = null;
    if (exportPlatform == PConstants.MACOSX) {
        dotAppFolder = new File(destFolder, name + ".app");
        String APP_SKELETON = "skeleton.app";
        // File dotAppSkeleton = new File(folder, APP_SKELETON);
        File dotAppSkeleton = new File("lib/export/" + APP_SKELETON);
        Base.copyDir(dotAppSkeleton, dotAppFolder);
        String stubName = "Contents/MacOS/JavaApplicationStub";
        // will work on osx or *nix, but just dies on windows, oh well..
        if (PApplet.platform == PConstants.WINDOWS) {
            File warningFile = new File(destFolder, "readme.txt");
            PrintWriter pw = PApplet.createWriter(warningFile);
            pw.println("This application was created on Windows, which doesn't");
            pw.println("properly support setting files as \"executable\",");
            pw.println("a necessity for applications on Mac OS X.");
            pw.println();
            pw.println("To fix this, use the Terminal on Mac OS X, and from this");
            pw.println("directory, type the following:");
            pw.println();
            pw.println("chmod +x " + dotAppFolder.getName() + "/" + stubName);
            pw.flush();
            pw.close();
        } else {
            File stubFile = new File(dotAppFolder, stubName);
            String stubPath = stubFile.getAbsolutePath();
            Runtime.getRuntime().exec(new String[] { "chmod", "+x", stubPath });
        }
        // set the jar folder to a different location than windows/linux
        jarFolder = new File(dotAppFolder, "Contents/Resources/Java");
    }
    if (!jarFolder.exists())
        jarFolder.mkdirs();
    if (exportPlatform == PConstants.WINDOWS) {
        Base.copyFile(new File("lib/export/application.exe"), new File(destFolder, this.name + ".exe"));
    }
    // / start copying all jar files
    Vector jarListVector = new Vector();
    // / create the main .jar file
    zipFileContents = new Hashtable();
    FileOutputStream zipOutputFile = new FileOutputStream(new File(jarFolder, name + ".jar"));
    ZipOutputStream zos = new ZipOutputStream(zipOutputFile);
    ZipEntry entry;
    // add the manifest file so that the .jar can be double clickable
    addManifest(zos);
    // add the project's .class files to the jar
    // (just grabs everything from the build directory,
    // since there may be some inner classes)
    // TODO this needs to be recursive (for packages)
    String[] classfiles = destFolder.list();
    for (int i = 0; i < classfiles.length; i++) {
        if (classfiles[i].endsWith(".class")) {
            entry = new ZipEntry(classfiles[i]);
            zos.putNextEntry(entry);
            zos.write(Base.loadBytesRaw(new File(destFolder, classfiles[i])));
            zos.closeEntry();
        }
    }
    // add the data folder to the main jar file
    if (dataFolder.exists()) {
        String[] dataFiles = Base.listFiles(dataFolder, false);
        int offset = folder.getAbsolutePath().length() + 1;
        for (int i = 0; i < dataFiles.length; i++) {
            if (PApplet.platform == PApplet.WINDOWS) {
                dataFiles[i] = dataFiles[i].replace('\\', '/');
            }
            File dataFile = new File(dataFiles[i]);
            if (dataFile.isDirectory())
                continue;
            // skipping dot prefix removes all: . .. .DS_Store
            if (dataFile.getName().charAt(0) == '.')
                continue;
            entry = new ZipEntry(dataFiles[i].substring(offset));
            zos.putNextEntry(entry);
            zos.write(Base.loadBytesRaw(dataFile));
            zos.closeEntry();
        }
    }
    // add the contents of the code folder to the jar
    if (codeFolder.exists()) {
        String includes = Compiler.contentsToClassPath(codeFolder);
        String[] codeList = PApplet.split(includes, File.separatorChar);
        String cp = "";
        for (int i = 0; i < codeList.length; i++) {
            if (codeList[i].toLowerCase().endsWith(".jar") || codeList[i].toLowerCase().endsWith(".zip")) {
                File exportFile = new File(codeFolder, codeList[i]);
                String exportFilename = exportFile.getName();
                Base.copyFile(exportFile, new File(jarFolder, exportFilename));
                jarListVector.add(exportFilename);
            } else {
                cp += codeList[i] + File.separatorChar;
            }
        }
        packClassPathIntoZipFile(cp, zos);
    }
    zos.flush();
    zos.close();
    jarListVector.add(name + ".jar");
    // / add core.jar to the jar destination folder
    // System.out.println(jarFolder);
    Base.copyFile(new File("lib/core.jar"), new File(jarFolder, "core.jar"));
    jarListVector.add("core.jar");
    // / add contents of 'library' folders to the export
    // if a file called 'export.txt' is in there, it contains
    // a list of the files that should be exported.
    // otherwise, all files are exported.
    Enumeration en = importedLibraries.elements();
    while (en.hasMoreElements()) {
        File libraryFolder = (File) en.nextElement();
        // in the list is a File object that points the
        // library sketch's "library" folder
        File exportSettings = new File(libraryFolder, "export.txt");
        Hashtable exportTable = readSettings(exportSettings);
        String commaList = null;
        String[] exportList = null;
        if (exportPlatform != -1) {
            // first check to see if there's something like application.macosx
            commaList = (String) exportTable.get("application." + exportPlatformStr);
        }
        if (commaList == null) {
            // next check to see if something for 'application' is specified
            commaList = (String) exportTable.get("application");
        }
        if (commaList == null) {
            // otherwise just dump the whole folder
            exportList = libraryFolder.list();
        } else {
            exportList = PApplet.splitTokens(commaList, ", ");
        }
        // add each item from the library folder / export list to the output
        for (int i = 0; i < exportList.length; i++) {
            if (exportList[i].equals(".") || exportList[i].equals(".."))
                continue;
            exportList[i] = PApplet.trim(exportList[i]);
            if (exportList[i].equals(""))
                continue;
            File exportFile = new File(libraryFolder, exportList[i]);
            if (!exportFile.exists()) {
                System.err.println("File " + exportList[i] + " does not exist");
            } else if (exportFile.isDirectory()) {
                System.err.println("Ignoring sub-folder \"" + exportList[i] + "\"");
            } else if (exportFile.getName().toLowerCase().endsWith(".zip") || exportFile.getName().toLowerCase().endsWith(".jar")) {
                // packClassPathIntoZipFile(exportFile.getAbsolutePath(), zos);
                Base.copyFile(exportFile, new File(jarFolder, exportList[i]));
                jarListVector.add(exportList[i]);
            } else if ((exportPlatform == PConstants.MACOSX) && (exportFile.getName().toLowerCase().endsWith(".jnilib"))) {
                // jnilib files can be placed in Contents/Resources/Java
                Base.copyFile(exportFile, new File(jarFolder, exportList[i]));
            } else {
                // copy the file to the main directory.. prolly a .dll or something
                Base.copyFile(exportFile, new File(destFolder, exportFile.getName()));
            }
        }
    }
    // / create platform-specific CLASSPATH based on included jars
    String[] jarList = new String[jarListVector.size()];
    jarListVector.copyInto(jarList);
    StringBuffer exportClassPath = new StringBuffer();
    if (exportPlatform == PConstants.MACOSX) {
        for (int i = 0; i < jarList.length; i++) {
            if (i != 0)
                exportClassPath.append(":");
            exportClassPath.append("$JAVAROOT/" + jarList[i]);
        }
    } else if (exportPlatform == PConstants.WINDOWS) {
        for (int i = 0; i < jarList.length; i++) {
            if (i != 0)
                exportClassPath.append(",");
            exportClassPath.append(jarList[i]);
        }
    } else {
        for (int i = 0; i < jarList.length; i++) {
            if (i != 0)
                exportClassPath.append(":");
            exportClassPath.append("$APPDIR/lib/" + jarList[i]);
        }
    }
    // / figure out run options for the VM
    String runOptions = Preferences.get("run.options");
    if (Preferences.getBoolean("run.options.memory")) {
        runOptions += " -Xms" + Preferences.get("run.options.memory.initial") + "m";
        runOptions += " -Xmx" + Preferences.get("run.options.memory.maximum") + "m";
    }
    if (exportPlatform == PConstants.MACOSX) {
        String PLIST_TEMPLATE = "template.plist";
        File plistTemplate = new File(folder, PLIST_TEMPLATE);
        if (!plistTemplate.exists()) {
            plistTemplate = new File("lib/export/" + PLIST_TEMPLATE);
        }
        File plistFile = new File(dotAppFolder, "Contents/Info.plist");
        PrintWriter pw = PApplet.createWriter(plistFile);
        String[] lines = PApplet.loadStrings(plistTemplate);
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].indexOf("@@") != -1) {
                StringBuffer sb = new StringBuffer(lines[i]);
                int index = 0;
                while ((index = sb.indexOf("@@vmoptions@@")) != -1) {
                    sb.replace(index, index + "@@vmoptions@@".length(), runOptions);
                }
                while ((index = sb.indexOf("@@sketch@@")) != -1) {
                    sb.replace(index, index + "@@sketch@@".length(), name);
                }
                while ((index = sb.indexOf("@@classpath@@")) != -1) {
                    sb.replace(index, index + "@@classpath@@".length(), exportClassPath.toString());
                }
                lines[i] = sb.toString();
            }
            // explicit newlines to avoid Windows CRLF
            pw.print(lines[i] + "\n");
        }
        pw.flush();
        pw.close();
    } else if (exportPlatform == PConstants.WINDOWS) {
        File argsFile = new File(destFolder + "/lib/args.txt");
        PrintWriter pw = PApplet.createWriter(argsFile);
        pw.println(runOptions);
        pw.println(this.name);
        pw.println(exportClassPath);
        pw.flush();
        pw.close();
    } else {
        File shellScript = new File(destFolder, this.name);
        PrintWriter pw = PApplet.createWriter(shellScript);
        // do the newlines explicitly so that windows CRLF
        // isn't used when exporting for unix
        pw.print("#!/bin/sh\n\n");
        // ps.print("APPDIR=`dirname $0`\n");
        // more posix compliant
        pw.print("APPDIR=$(dirname \"$0\")\n");
        // another fix for bug #234, LD_LIBRARY_PATH ignored on some platforms
        // ps.print("LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APPDIR\n");
        pw.print("java " + Preferences.get("run.options") + " -Djava.library.path=\"$APPDIR\"" + " -cp \"" + exportClassPath + "\"" + " " + this.name + "\n");
        pw.flush();
        pw.close();
        String shellPath = shellScript.getAbsolutePath();
        // will work on osx or *nix, but just dies on windows, oh well..
        if (PApplet.platform != PConstants.WINDOWS) {
            Runtime.getRuntime().exec(new String[] { "chmod", "+x", shellPath });
        }
    }
    // / copy the source files to the target
    // / (we like to encourage people to share their code)
    File sourceFolder = new File(destFolder, "source");
    sourceFolder.mkdirs();
    for (int i = 0; i < codeCount; i++) {
        try {
            Base.copyFile(code[i].file, new File(sourceFolder, code[i].file.getName()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    // move the .java file from the preproc there too
    String preprocFilename = this.name + ".java";
    File preprocFile = new File(destFolder, preprocFilename);
    if (preprocFile.exists()) {
        preprocFile.renameTo(new File(sourceFolder, preprocFilename));
    }
    // / remove the .class files from the export folder.
    for (int i = 0; i < classfiles.length; i++) {
        if (classfiles[i].endsWith(".class")) {
            File deadguy = new File(destFolder, classfiles[i]);
            if (!deadguy.delete()) {
                Base.showWarning("Could not delete", classfiles[i] + " could not \n" + "be deleted from the applet folder.  \n" + "You'll need to remove it by hand.", null);
            }
        }
    }
    // / goodbye
    return true;
}||||||||/**
 * Export to application.
 * <PRE>
 * +-------------------------------------------------------+
 * +                                                       +
 * + Export to:  [ Application            + ]    [  OK  ]  +
 * +                                                       +
 * + > Advanced                                            +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Version: [ Java 1.1   + ]                           +
 * +                                                       +
 * +   Not much point to using Java 1.1 for applications.  +
 * +   To run applications, all users will have to         +
 * +   install Java, in which case they'll most likely     +
 * +   have version 1.3 or later.                          +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Version: [ Java 1.3   + ]                           +
 * +                                                       +
 * +   Java 1.3 is the recommended setting for exporting   +
 * +   applications. Applications will run on any Windows  +
 * +   or Unix machine with Java installed. Mac OS X has   +
 * +   Java installed with the operation system, so there  +
 * +   is no additional installation will be required.     +
 * +                                                       +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +                                                       +
 * +   Platform: [ Mac OS X   + ]    <-- defaults to current platform
 * +                                                       +
 * +   Exports the application as a double-clickable       +
 * +   .app package, compatible with Mac OS X.             +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Platform: [ Windows    + ]                          +
 * +                                                       +
 * +   Exports the application as a double-clickable       +
 * +   .exe and a handful of supporting files.             +
 * + - - - - - - - - - - - - - - - - - - - - - - - - - - - +
 * +   Platform: [ jar file   + ]                          +
 * +                                                       +
 * +   A jar file can be used on any platform that has     +
 * +   Java installed. Simply doube-click the jar (or type +
 * +   "java -jar sketch.jar" at a command prompt) to run  +
 * +   the application. It is the least fancy method for   +
 * +   exporting.                                          +
 * +                                                       +
 * +-------------------------------------------------------+
 * </PRE>
 */
protected boolean exportApplication(int exportPlatform) throws Exception {
    // make sure the user didn't hide the sketch folder
    ensureExistence();
    // is reloaded when exporting and an external editor is being used.
    if (Preferences.getBoolean("editor.external")) {
        // nuke previous files and settings
        load();
    }
    // int exportPlatform = PApplet.platform; //PConstants.MACOSX;
    String exportPlatformStr = null;
    if (exportPlatform == PConstants.WINDOWS) {
        exportPlatformStr = "windows";
    } else if (exportPlatform == PConstants.MACOSX) {
        exportPlatformStr = "macosx";
    } else if (exportPlatform == PConstants.LINUX) {
        exportPlatformStr = "linux";
    } else {
        exportPlatform = -1;
    }
    String folderName = "application";
    if (exportPlatform != -1) {
        folderName += "." + exportPlatformStr;
    }
    // nuke the old folder because it can cause trouble
    File destFolder = new File(folder, folderName);
    Base.removeDir(destFolder);
    destFolder.mkdirs();
    // build the sketch
    String foundName = build(destFolder.getPath(), name);
    // (already reported) error during export, exit this function
    if (foundName == null)
        return false;
    // BUG unfortunately, that can also be a bug in the preproc :(
    if (!name.equals(foundName)) {
        Base.showWarning("Error during export", "Sketch name is " + name + " but the sketch\n" + "name in the code was " + foundName, null);
        return false;
    }
    // / figure out where the jar files will be placed
    File jarFolder = new File(destFolder, "lib");
    // / on macosx, need to copy .app skeleton since that's
    // / also where the jar files will be placed
    File dotAppFolder = null;
    if (exportPlatform == PConstants.MACOSX) {
        dotAppFolder = new File(destFolder, name + ".app");
        String APP_SKELETON = "skeleton.app";
        // File dotAppSkeleton = new File(folder, APP_SKELETON);
        File dotAppSkeleton = new File("lib/export/" + APP_SKELETON);
        Base.copyDir(dotAppSkeleton, dotAppFolder);
        String stubName = "Contents/MacOS/JavaApplicationStub";
        // will work on osx or *nix, but just dies on windows, oh well..
        if (PApplet.platform == PConstants.WINDOWS) {
            File warningFile = new File(destFolder, "readme.txt");
            PrintWriter pw = PApplet.createWriter(warningFile);
            pw.println("This application was created on Windows, which doesn't");
            pw.println("properly support setting files as \"executable\",");
            pw.println("a necessity for applications on Mac OS X.");
            pw.println();
            pw.println("To fix this, use the Terminal on Mac OS X, and from this");
            pw.println("directory, type the following:");
            pw.println();
            pw.println("chmod +x " + dotAppFolder.getName() + "/" + stubName);
            pw.flush();
            pw.close();
        } else {
            File stubFile = new File(dotAppFolder, stubName);
            String stubPath = stubFile.getAbsolutePath();
            Runtime.getRuntime().exec(new String[] { "chmod", "+x", stubPath });
        }
        // set the jar folder to a different location than windows/linux
        jarFolder = new File(dotAppFolder, "Contents/Resources/Java");
    }
    if (!jarFolder.exists())
        jarFolder.mkdirs();
    if (exportPlatform == PConstants.WINDOWS) {
        Base.copyFile(new File("lib/export/application.exe"), new File(destFolder, this.name + ".exe"));
    }
    // / start copying all jar files
    Vector jarListVector = new Vector();
    // / create the main .jar file
    Hashtable zipFileContents = new Hashtable();
    FileOutputStream zipOutputFile = new FileOutputStream(new File(jarFolder, name + ".jar"));
    ZipOutputStream zos = new ZipOutputStream(zipOutputFile);
    ZipEntry entry;
    // add the manifest file so that the .jar can be double clickable
    addManifest(zos);
    // add the project's .class files to the jar
    // (just grabs everything from the build directory,
    // since there may be some inner classes)
    // TODO this needs to be recursive (for packages)
    String[] classfiles = destFolder.list();
    for (int i = 0; i < classfiles.length; i++) {
        if (classfiles[i].endsWith(".class")) {
            entry = new ZipEntry(classfiles[i]);
            zos.putNextEntry(entry);
            zos.write(Base.loadBytesRaw(new File(destFolder, classfiles[i])));
            zos.closeEntry();
        }
    }
    // add the data folder to the main jar file
    if (dataFolder.exists()) {
        String[] dataFiles = Base.listFiles(dataFolder, false);
        int offset = folder.getAbsolutePath().length() + 1;
        for (int i = 0; i < dataFiles.length; i++) {
            if (PApplet.platform == PApplet.WINDOWS) {
                dataFiles[i] = dataFiles[i].replace('\\', '/');
            }
            File dataFile = new File(dataFiles[i]);
            if (dataFile.isDirectory())
                continue;
            // skipping dot prefix removes all: . .. .DS_Store
            if (dataFile.getName().charAt(0) == '.')
                continue;
            entry = new ZipEntry(dataFiles[i].substring(offset));
            zos.putNextEntry(entry);
            zos.write(Base.loadBytesRaw(dataFile));
            zos.closeEntry();
        }
    }
    // add the contents of the code folder to the jar
    if (codeFolder.exists()) {
        String includes = Compiler.contentsToClassPath(codeFolder);
        String[] codeList = PApplet.split(includes, File.separatorChar);
        String cp = "";
        for (int i = 0; i < codeList.length; i++) {
            if (codeList[i].toLowerCase().endsWith(".jar") || codeList[i].toLowerCase().endsWith(".zip")) {
                File exportFile = new File(codeFolder, codeList[i]);
                String exportFilename = exportFile.getName();
                Base.copyFile(exportFile, new File(jarFolder, exportFilename));
                jarListVector.add(exportFilename);
            } else {
                cp += codeList[i] + File.separatorChar;
            }
        }
        packClassPathIntoZipFile(cp, zos, zipFileContents);
    }
    zos.flush();
    zos.close();
    jarListVector.add(name + ".jar");
    // / add core.jar to the jar destination folder
    // System.out.println(jarFolder);
    Base.copyFile(new File("lib/core.jar"), new File(jarFolder, "core.jar"));
    jarListVector.add("core.jar");
    // / add contents of 'library' folders to the export
    // if a file called 'export.txt' is in there, it contains
    // a list of the files that should be exported.
    // otherwise, all files are exported.
    Enumeration en = importedLibraries.elements();
    while (en.hasMoreElements()) {
        File libraryFolder = (File) en.nextElement();
        // in the list is a File object that points the
        // library sketch's "library" folder
        File exportSettings = new File(libraryFolder, "export.txt");
        Hashtable exportTable = readSettings(exportSettings);
        String commaList = null;
        String[] exportList = null;
        if (exportPlatform != -1) {
            // first check to see if there's something like application.macosx
            commaList = (String) exportTable.get("application." + exportPlatformStr);
        }
        if (commaList == null) {
            // next check to see if something for 'application' is specified
            commaList = (String) exportTable.get("application");
        }
        if (commaList == null) {
            // otherwise just dump the whole folder
            exportList = libraryFolder.list();
        } else {
            exportList = PApplet.splitTokens(commaList, ", ");
        }
        // add each item from the library folder / export list to the output
        for (int i = 0; i < exportList.length; i++) {
            if (exportList[i].equals(".") || exportList[i].equals(".."))
                continue;
            exportList[i] = PApplet.trim(exportList[i]);
            if (exportList[i].equals(""))
                continue;
            File exportFile = new File(libraryFolder, exportList[i]);
            if (!exportFile.exists()) {
                System.err.println("File " + exportList[i] + " does not exist");
            } else if (exportFile.isDirectory()) {
                System.err.println("Ignoring sub-folder \"" + exportList[i] + "\"");
            } else if (exportFile.getName().toLowerCase().endsWith(".zip") || exportFile.getName().toLowerCase().endsWith(".jar")) {
                // packClassPathIntoZipFile(exportFile.getAbsolutePath(), zos);
                Base.copyFile(exportFile, new File(jarFolder, exportList[i]));
                jarListVector.add(exportList[i]);
            } else if ((exportPlatform == PConstants.MACOSX) && (exportFile.getName().toLowerCase().endsWith(".jnilib"))) {
                // jnilib files can be placed in Contents/Resources/Java
                Base.copyFile(exportFile, new File(jarFolder, exportList[i]));
            } else {
                // copy the file to the main directory.. prolly a .dll or something
                Base.copyFile(exportFile, new File(destFolder, exportFile.getName()));
            }
        }
    }
    // / create platform-specific CLASSPATH based on included jars
    String[] jarList = new String[jarListVector.size()];
    jarListVector.copyInto(jarList);
    StringBuffer exportClassPath = new StringBuffer();
    if (exportPlatform == PConstants.MACOSX) {
        for (int i = 0; i < jarList.length; i++) {
            if (i != 0)
                exportClassPath.append(":");
            exportClassPath.append("$JAVAROOT/" + jarList[i]);
        }
    } else if (exportPlatform == PConstants.WINDOWS) {
        for (int i = 0; i < jarList.length; i++) {
            if (i != 0)
                exportClassPath.append(",");
            exportClassPath.append(jarList[i]);
        }
    } else {
        for (int i = 0; i < jarList.length; i++) {
            if (i != 0)
                exportClassPath.append(":");
            exportClassPath.append("$APPDIR/lib/" + jarList[i]);
        }
    }
    // / figure out run options for the VM
    String runOptions = Preferences.get("run.options");
    if (Preferences.getBoolean("run.options.memory")) {
        runOptions += " -Xms" + Preferences.get("run.options.memory.initial") + "m";
        runOptions += " -Xmx" + Preferences.get("run.options.memory.maximum") + "m";
    }
    if (exportPlatform == PConstants.MACOSX) {
        String PLIST_TEMPLATE = "template.plist";
        File plistTemplate = new File(folder, PLIST_TEMPLATE);
        if (!plistTemplate.exists()) {
            plistTemplate = new File("lib/export/" + PLIST_TEMPLATE);
        }
        File plistFile = new File(dotAppFolder, "Contents/Info.plist");
        PrintWriter pw = PApplet.createWriter(plistFile);
        String[] lines = PApplet.loadStrings(plistTemplate);
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].indexOf("@@") != -1) {
                StringBuffer sb = new StringBuffer(lines[i]);
                int index = 0;
                while ((index = sb.indexOf("@@vmoptions@@")) != -1) {
                    sb.replace(index, index + "@@vmoptions@@".length(), runOptions);
                }
                while ((index = sb.indexOf("@@sketch@@")) != -1) {
                    sb.replace(index, index + "@@sketch@@".length(), name);
                }
                while ((index = sb.indexOf("@@classpath@@")) != -1) {
                    sb.replace(index, index + "@@classpath@@".length(), exportClassPath.toString());
                }
                lines[i] = sb.toString();
            }
            // explicit newlines to avoid Windows CRLF
            pw.print(lines[i] + "\n");
        }
        pw.flush();
        pw.close();
    } else if (exportPlatform == PConstants.WINDOWS) {
        File argsFile = new File(destFolder + "/lib/args.txt");
        PrintWriter pw = PApplet.createWriter(argsFile);
        pw.println(runOptions);
        pw.println(this.name);
        pw.println(exportClassPath);
        pw.flush();
        pw.close();
    } else {
        File shellScript = new File(destFolder, this.name);
        PrintWriter pw = PApplet.createWriter(shellScript);
        // do the newlines explicitly so that windows CRLF
        // isn't used when exporting for unix
        pw.print("#!/bin/sh\n\n");
        // ps.print("APPDIR=`dirname $0`\n");
        // more posix compliant
        pw.print("APPDIR=$(dirname \"$0\")\n");
        // another fix for bug #234, LD_LIBRARY_PATH ignored on some platforms
        // ps.print("LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APPDIR\n");
        pw.print("java " + Preferences.get("run.options") + " -Djava.library.path=\"$APPDIR\"" + " -cp \"" + exportClassPath + "\"" + " " + this.name + "\n");
        pw.flush();
        pw.close();
        String shellPath = shellScript.getAbsolutePath();
        // will work on osx or *nix, but just dies on windows, oh well..
        if (PApplet.platform != PConstants.WINDOWS) {
            Runtime.getRuntime().exec(new String[] { "chmod", "+x", shellPath });
        }
    }
    // / copy the source files to the target
    // / (we like to encourage people to share their code)
    File sourceFolder = new File(destFolder, "source");
    sourceFolder.mkdirs();
    for (int i = 0; i < codeCount; i++) {
        try {
            // Base.copyFile(code[i].getFile(),
            // new File(sourceFolder, code[i].file.getFileName()));
            code[i].copyTo(new File(sourceFolder, code[i].getFileName()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    // move the .java file from the preproc there too
    String preprocFilename = this.name + ".java";
    File preprocFile = new File(destFolder, preprocFilename);
    if (preprocFile.exists()) {
        preprocFile.renameTo(new File(sourceFolder, preprocFilename));
    }
    // / remove the .class files from the export folder.
    for (int i = 0; i < classfiles.length; i++) {
        if (classfiles[i].endsWith(".class")) {
            File deadguy = new File(destFolder, classfiles[i]);
            if (!deadguy.delete()) {
                Base.showWarning("Could not delete", classfiles[i] + " could not \n" + "be deleted from the applet folder.  \n" + "You'll need to remove it by hand.", null);
            }
        }
    }
    // / goodbye
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayInitializerExpr
										StringLiteralExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									(ArrayCreationLevel
									)
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											(CharLiteralExpr
											)
											(CharLiteralExpr
											)
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ContinueStmt
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(CharLiteralExpr
								)
							)
							(ContinueStmt
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												NameExpr
													SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ObjectCreationExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(CastExpr
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(CastExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ContinueStmt
							)
						)
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ContinueStmt
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(IfStmt
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(EnclosedExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
								)
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											StringLiteralExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ArrayCreationLevel
										)
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									(BinaryExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														StringLiteralExpr
													)
												)
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														StringLiteralExpr
													)
												)
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														StringLiteralExpr
													)
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayInitializerExpr
										StringLiteralExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									(ArrayCreationLevel
									)
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											(CharLiteralExpr
											)
											(CharLiteralExpr
											)
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ContinueStmt
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(CharLiteralExpr
								)
							)
							(ContinueStmt
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												NameExpr
													SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ObjectCreationExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(CastExpr
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(CastExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ContinueStmt
							)
						)
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ContinueStmt
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(IfStmt
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(EnclosedExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
								)
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											StringLiteralExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ArrayCreationLevel
										)
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									(BinaryExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														StringLiteralExpr
													)
												)
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														StringLiteralExpr
													)
												)
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														StringLiteralExpr
													)
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

