// public void setExternalEditor(boolean externalEditor) {
// this.externalEditor = externalEditor;
// }
/**
 * Intercepts key pressed events for JEditTextArea.
 * <p/>
 * Called by JEditTextArea inside processKeyEvent(). Note that this
 * won't intercept actual characters, because those are fired on
 * keyTyped().
 * @return true if the event has been handled (to remove it from the queue)
 */
public boolean keyPressed(KeyEvent event) {
    // don't do things if the textarea isn't editable
    if (externalEditor)
        return false;
    // deselect();  // this is for paren balancing
    char c = event.getKeyChar();
    int code = event.getKeyCode();
    if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {
        if (code == KeyEvent.VK_LEFT) {
            editor.sketch.prevCode();
            return true;
        } else if (code == KeyEvent.VK_RIGHT) {
            editor.sketch.nextCode();
            return true;
        }
    }
    if ((event.getModifiers() & KeyEvent.META_MASK) != 0) {
        // event.consume();  // does nothing
        return false;
    }
    // TODO i don't like these accessors. clean em up later.
    if (!editor.sketch.modified) {
        if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) || (code == KeyEvent.VK_ENTER) || ((c >= 32) && (c < 128))) {
            editor.sketch.setModified(true);
        }
    }
    if ((code == KeyEvent.VK_UP) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
        // back up to the last empty line
        char[] contents = textarea.getText().toCharArray();
        // int origIndex = textarea.getCaretPosition() - 1;
        int caretIndex = textarea.getCaretPosition();
        int index = calcLineStart(caretIndex - 1, contents);
        // System.out.println("line start " + (int) contents[index]);
        // step over the newline
        index -= 2;
        // System.out.println((int) contents[index]);
        boolean onlySpaces = true;
        while (index > 0) {
            if (contents[index] == 10) {
                if (onlySpaces) {
                    index++;
                    break;
                } else {
                    // reset
                    onlySpaces = true;
                }
            } else if (contents[index] != ' ') {
                onlySpaces = false;
            }
            index--;
        }
        // if the first char, index will be -2
        if (index < 0)
            index = 0;
        if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
            textarea.setSelectionStart(caretIndex);
            textarea.setSelectionEnd(index);
        } else {
            textarea.setCaretPosition(index);
        }
        event.consume();
        return true;
    } else if ((code == KeyEvent.VK_DOWN) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
        char[] contents = textarea.getText().toCharArray();
        int caretIndex = textarea.getCaretPosition();
        int index = caretIndex;
        int lineStart = 0;
        // don't count this line
        boolean onlySpaces = false;
        while (index < contents.length) {
            if (contents[index] == 10) {
                if (onlySpaces) {
                    // this is it
                    index = lineStart;
                    break;
                } else {
                    lineStart = index + 1;
                    // reset
                    onlySpaces = true;
                }
            } else if (contents[index] != ' ') {
                onlySpaces = false;
            }
            index++;
        }
        // textarea.setSelectionEnd(index);
        if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
            textarea.setSelectionStart(caretIndex);
            textarea.setSelectionEnd(index);
        } else {
            textarea.setCaretPosition(index);
        }
        event.consume();
        return true;
    }
    switch((int) c) {
        case 9:
            if (tabsExpand) {
                // expand tabs
                textarea.setSelectedText(tabString);
                event.consume();
                return true;
            } else if (tabsIndent) {
                // this code is incomplete
                // if this brace is the only thing on the line, outdent
                // char contents[] = getCleanedContents();
                char[] contents = textarea.getText().toCharArray();
                // index to the character to the left of the caret
                int prevCharIndex = textarea.getCaretPosition() - 1;
                // now find the start of this line
                int lineStart = calcLineStart(prevCharIndex, contents);
                int lineEnd = lineStart;
                while ((lineEnd < contents.length - 1) && (contents[lineEnd] != 10)) {
                    lineEnd++;
                }
                // get the number of braces, to determine whether this is an indent
                int braceBalance = 0;
                int index = lineStart;
                while ((index < contents.length) && (contents[index] != 10)) {
                    if (contents[index] == '{') {
                        braceBalance++;
                    } else if (contents[index] == '}') {
                        braceBalance--;
                    }
                    index++;
                }
                // if it's a starting indent, need to ignore it, so lineStart
                // will be the counting point. but if there's a closing indent,
                // then the lineEnd should be used.
                int where = (braceBalance > 0) ? lineStart : lineEnd;
                int indent = calcBraceIndent(where, contents);
                if (indent == -1) {
                    // no braces to speak of, do nothing
                    indent = 0;
                } else {
                    indent += tabSize;
                }
                // and the number of spaces it has
                int spaceCount = calcSpaceCount(prevCharIndex, contents);
                textarea.setSelectionStart(lineStart);
                textarea.setSelectionEnd(lineStart + spaceCount);
                textarea.setSelectedText(Editor.EMPTY.substring(0, indent));
                event.consume();
                return true;
            }
            break;
        // auto-indent
        case 10:
        case 13:
            if (autoIndent) {
                char[] contents = textarea.getText().toCharArray();
                // this is the previous character
                // (i.e. when you hit return, it'll be the last character
                // just before where the newline will be inserted)
                int origIndex = textarea.getCaretPosition() - 1;
                // NOTE all this cursing about CRLF stuff is probably moot
                // NOTE since the switch to JEditTextArea, which seems to use
                // NOTE only LFs internally (thank god). disabling for 0099.
                // walk through the array to the current caret position,
                // and count how many weirdo windows line endings there are,
                // which would be throwing off the caret position number
                /*
        int offset = 0;
        int realIndex = origIndex;
        for (int i = 0; i < realIndex-1; i++) {
          if ((contents[i] == 13) && (contents[i+1] == 10)) {
            offset++;
            realIndex++;
          }
        }
        // back up until \r \r\n or \n.. @#($* cross platform
        //System.out.println(origIndex + " offset = " + offset);
        origIndex += offset; // ARGH!#(* WINDOWS#@($*
        */
                // if the previous thing is a brace (whether prev line or
                // up farther) then the correct indent is the number of spaces
                // on that line + 'indent'.
                // if the previous line is not a brace, then just use the
                // identical indentation to the previous line
                // calculate the amount of indent on the previous line
                // this will be used *only if the prev line is not an indent*
                int spaceCount = calcSpaceCount(origIndex, contents);
                // If the last character was a left curly brace, then indent.
                // For 0122, walk backwards a bit to make sure that the there
                // isn't a curly brace several spaces (or lines) back. Also
                // moved this before calculating extraCount, since it'll affect
                // that as well.
                int index2 = origIndex;
                while ((index2 >= 0) && Character.isWhitespace(contents[index2])) {
                    index2--;
                }
                if (index2 != -1) {
                    // still won't catch a case where prev stuff is a comment
                    if (contents[index2] == '{') {
                        // intermediate lines be damned,
                        // use the indent for this line instead
                        spaceCount = calcSpaceCount(index2, contents);
                        spaceCount += tabSize;
                    }
                }
                // System.out.println("spaceCount should be " + spaceCount);
                // now before inserting this many spaces, walk forward from
                // the caret position and count the number of spaces,
                // so that the number of spaces aren't duplicated again
                int index = origIndex + 1;
                int extraCount = 0;
                while ((index < contents.length) && (contents[index] == ' ')) {
                    // spaceCount--;
                    extraCount++;
                    index++;
                }
                int braceCount = 0;
                while ((index < contents.length) && (contents[index] != '\n')) {
                    if (contents[index] == '}') {
                        braceCount++;
                    }
                    index++;
                }
                // hitting return on a line with spaces *after* the caret
                // can cause trouble. for 0099, was ignoring the case, but this is
                // annoying, so in 0122 we're trying to fix that.
                /*
        if (spaceCount - extraCount > 0) {
          spaceCount -= extraCount;
        }
        */
                spaceCount -= extraCount;
                if (spaceCount < 0) {
                    // for rev 0122, actually delete extra space
                    // textarea.setSelectionStart(origIndex + 1);
                    textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);
                    textarea.setSelectedText("\n");
                } else {
                    String insertion = "\n" + Editor.EMPTY.substring(0, spaceCount);
                    textarea.setSelectedText(insertion);
                }
                // not gonna bother handling more than one brace
                if (braceCount > 0) {
                    int sel = textarea.getSelectionStart();
                    // http://dev.processing.org/bugs/show_bug.cgi?id=484
                    if (sel - tabSize >= 0) {
                        textarea.select(sel - tabSize, sel);
                        String s = Editor.EMPTY.substring(0, tabSize);
                        // if these are spaces that we can delete
                        if (textarea.getSelectedText().equals(s)) {
                            textarea.setSelectedText("");
                        } else {
                            textarea.select(sel, sel);
                        }
                    }
                }
                // mark this event as already handled
                event.consume();
                return true;
            }
            break;
        case '}':
            if (autoIndent) {
                // spaces for the auto-indent
                if (textarea.getSelectionStart() != textarea.getSelectionStop()) {
                    textarea.setSelectedText("");
                }
                // if this brace is the only thing on the line, outdent
                char[] contents = textarea.getText().toCharArray();
                // index to the character to the left of the caret
                int prevCharIndex = textarea.getCaretPosition() - 1;
                // backup from the current caret position to the last newline,
                // checking for anything besides whitespace along the way.
                // if there's something besides whitespace, exit without
                // messing any sort of indenting.
                int index = prevCharIndex;
                boolean finished = false;
                while ((index != -1) && (!finished)) {
                    if (contents[index] == 10) {
                        finished = true;
                        index++;
                    } else if (contents[index] != ' ') {
                        // don't do anything, this line has other stuff on it
                        return false;
                    } else {
                        index--;
                    }
                }
                // brace with no start
                if (!finished)
                    return false;
                int lineStartIndex = index;
                /*
        // now that we know things are ok to be indented, walk
        // backwards to the last { to see how far its line is indented.
        // this isn't perfect cuz it'll pick up commented areas,
        // but that's not really a big deal and can be fixed when
        // this is all given a more complete (proper) solution.
        index = prevCharIndex;
        int braceDepth = 1;
        finished = false;
        while ((index != -1) && (!finished)) {
          if (contents[index] == '}') {
            // aww crap, this means we're one deeper
            // and will have to find one more extra {
            braceDepth++;
            index--;
          } else if (contents[index] == '{') {
            braceDepth--;
            if (braceDepth == 0) {
              finished = true;
            } // otherwise just teasing, keep going..
          } else {
            index--;
          }
        }
        // never found a proper brace, be safe and don't do anything
        if (!finished) return false;

        // check how many spaces on the line with the matching open brace
        int pairedSpaceCount = calcSpaceCount(index, contents);
        //System.out.println(pairedSpaceCount);
        */
                // , 1);
                int pairedSpaceCount = calcBraceIndent(prevCharIndex, contents);
                if (pairedSpaceCount == -1)
                    return false;
                /*
        // now walk forward and figure out how many spaces there are
        while ((index < contents.length) && (index >= 0) &&
               (contents[index++] == ' ')) {
          spaceCount++;
        }
        */
                // number of spaces found on this line
                // int newSpaceCount = Math.max(0, spaceCount - tabSize);
                // number of spaces on this current line
                // int spaceCount = calcSpaces(caretIndex, contents);
                // System.out.println("spaces is " + spaceCount);
                // String insertion = "\n" + Editor.EMPTY.substring(0, spaceCount);
                // int differential = newSpaceCount - spaceCount;
                // System.out.println("diff is " + differential);
                // int newStart = textarea.getSelectionStart() + differential;
                // textarea.setSelectionStart(newStart);
                // textarea.setSelectedText("}");
                textarea.setSelectionStart(lineStartIndex);
                textarea.setSelectedText(Editor.EMPTY.substring(0, pairedSpaceCount));
                // mark this event as already handled
                event.consume();
                return true;
            }
            break;
    }
    return false;
}||||||||// public void setExternalEditor(boolean externalEditor) {
// this.externalEditor = externalEditor;
// }
/**
 * Intercepts key pressed events for JEditTextArea.
 * <p/>
 * Called by JEditTextArea inside processKeyEvent(). Note that this
 * won't intercept actual characters, because those are fired on
 * keyTyped().
 * @return true if the event has been handled (to remove it from the queue)
 */
public boolean keyPressed(KeyEvent event) {
    // don't do things if the textarea isn't editable
    if (externalEditor)
        return false;
    // deselect();  // this is for paren balancing
    char c = event.getKeyChar();
    int code = event.getKeyCode();
    if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {
        if (code == KeyEvent.VK_LEFT) {
            editor.sketch.handlePrevCode();
            return true;
        } else if (code == KeyEvent.VK_RIGHT) {
            editor.sketch.handleNextCode();
            return true;
        }
    }
    if ((event.getModifiers() & KeyEvent.META_MASK) != 0) {
        // event.consume();  // does nothing
        return false;
    }
    // TODO i don't like these accessors. clean em up later.
    if (!editor.getSketch().isModified()) {
        if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) || (code == KeyEvent.VK_ENTER) || ((c >= 32) && (c < 128))) {
            editor.sketch.setModified(true);
        }
    }
    if ((code == KeyEvent.VK_UP) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
        // back up to the last empty line
        char[] contents = textarea.getText().toCharArray();
        // int origIndex = textarea.getCaretPosition() - 1;
        int caretIndex = textarea.getCaretPosition();
        int index = calcLineStart(caretIndex - 1, contents);
        // System.out.println("line start " + (int) contents[index]);
        // step over the newline
        index -= 2;
        // System.out.println((int) contents[index]);
        boolean onlySpaces = true;
        while (index > 0) {
            if (contents[index] == 10) {
                if (onlySpaces) {
                    index++;
                    break;
                } else {
                    // reset
                    onlySpaces = true;
                }
            } else if (contents[index] != ' ') {
                onlySpaces = false;
            }
            index--;
        }
        // if the first char, index will be -2
        if (index < 0)
            index = 0;
        if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
            textarea.setSelectionStart(caretIndex);
            textarea.setSelectionEnd(index);
        } else {
            textarea.setCaretPosition(index);
        }
        event.consume();
        return true;
    } else if ((code == KeyEvent.VK_DOWN) && ((event.getModifiers() & KeyEvent.CTRL_MASK) != 0)) {
        char[] contents = textarea.getText().toCharArray();
        int caretIndex = textarea.getCaretPosition();
        int index = caretIndex;
        int lineStart = 0;
        // don't count this line
        boolean onlySpaces = false;
        while (index < contents.length) {
            if (contents[index] == 10) {
                if (onlySpaces) {
                    // this is it
                    index = lineStart;
                    break;
                } else {
                    lineStart = index + 1;
                    // reset
                    onlySpaces = true;
                }
            } else if (contents[index] != ' ') {
                onlySpaces = false;
            }
            index++;
        }
        // textarea.setSelectionEnd(index);
        if ((event.getModifiers() & KeyEvent.SHIFT_MASK) != 0) {
            textarea.setSelectionStart(caretIndex);
            textarea.setSelectionEnd(index);
        } else {
            textarea.setCaretPosition(index);
        }
        event.consume();
        return true;
    }
    switch((int) c) {
        case 9:
            if (tabsExpand) {
                // expand tabs
                textarea.setSelectedText(tabString);
                event.consume();
                return true;
            } else if (tabsIndent) {
                // this code is incomplete
                // if this brace is the only thing on the line, outdent
                // char contents[] = getCleanedContents();
                char[] contents = textarea.getText().toCharArray();
                // index to the character to the left of the caret
                int prevCharIndex = textarea.getCaretPosition() - 1;
                // now find the start of this line
                int lineStart = calcLineStart(prevCharIndex, contents);
                int lineEnd = lineStart;
                while ((lineEnd < contents.length - 1) && (contents[lineEnd] != 10)) {
                    lineEnd++;
                }
                // get the number of braces, to determine whether this is an indent
                int braceBalance = 0;
                int index = lineStart;
                while ((index < contents.length) && (contents[index] != 10)) {
                    if (contents[index] == '{') {
                        braceBalance++;
                    } else if (contents[index] == '}') {
                        braceBalance--;
                    }
                    index++;
                }
                // if it's a starting indent, need to ignore it, so lineStart
                // will be the counting point. but if there's a closing indent,
                // then the lineEnd should be used.
                int where = (braceBalance > 0) ? lineStart : lineEnd;
                int indent = calcBraceIndent(where, contents);
                if (indent == -1) {
                    // no braces to speak of, do nothing
                    indent = 0;
                } else {
                    indent += tabSize;
                }
                // and the number of spaces it has
                int spaceCount = calcSpaceCount(prevCharIndex, contents);
                textarea.setSelectionStart(lineStart);
                textarea.setSelectionEnd(lineStart + spaceCount);
                textarea.setSelectedText(Editor.EMPTY.substring(0, indent));
                event.consume();
                return true;
            }
            break;
        // auto-indent
        case 10:
        case 13:
            if (autoIndent) {
                char[] contents = textarea.getText().toCharArray();
                // this is the previous character
                // (i.e. when you hit return, it'll be the last character
                // just before where the newline will be inserted)
                int origIndex = textarea.getCaretPosition() - 1;
                // NOTE all this cursing about CRLF stuff is probably moot
                // NOTE since the switch to JEditTextArea, which seems to use
                // NOTE only LFs internally (thank god). disabling for 0099.
                // walk through the array to the current caret position,
                // and count how many weirdo windows line endings there are,
                // which would be throwing off the caret position number
                /*
        int offset = 0;
        int realIndex = origIndex;
        for (int i = 0; i < realIndex-1; i++) {
          if ((contents[i] == 13) && (contents[i+1] == 10)) {
            offset++;
            realIndex++;
          }
        }
        // back up until \r \r\n or \n.. @#($* cross platform
        //System.out.println(origIndex + " offset = " + offset);
        origIndex += offset; // ARGH!#(* WINDOWS#@($*
        */
                // if the previous thing is a brace (whether prev line or
                // up farther) then the correct indent is the number of spaces
                // on that line + 'indent'.
                // if the previous line is not a brace, then just use the
                // identical indentation to the previous line
                // calculate the amount of indent on the previous line
                // this will be used *only if the prev line is not an indent*
                int spaceCount = calcSpaceCount(origIndex, contents);
                // If the last character was a left curly brace, then indent.
                // For 0122, walk backwards a bit to make sure that the there
                // isn't a curly brace several spaces (or lines) back. Also
                // moved this before calculating extraCount, since it'll affect
                // that as well.
                int index2 = origIndex;
                while ((index2 >= 0) && Character.isWhitespace(contents[index2])) {
                    index2--;
                }
                if (index2 != -1) {
                    // still won't catch a case where prev stuff is a comment
                    if (contents[index2] == '{') {
                        // intermediate lines be damned,
                        // use the indent for this line instead
                        spaceCount = calcSpaceCount(index2, contents);
                        spaceCount += tabSize;
                    }
                }
                // System.out.println("spaceCount should be " + spaceCount);
                // now before inserting this many spaces, walk forward from
                // the caret position and count the number of spaces,
                // so that the number of spaces aren't duplicated again
                int index = origIndex + 1;
                int extraCount = 0;
                while ((index < contents.length) && (contents[index] == ' ')) {
                    // spaceCount--;
                    extraCount++;
                    index++;
                }
                int braceCount = 0;
                while ((index < contents.length) && (contents[index] != '\n')) {
                    if (contents[index] == '}') {
                        braceCount++;
                    }
                    index++;
                }
                // hitting return on a line with spaces *after* the caret
                // can cause trouble. for 0099, was ignoring the case, but this is
                // annoying, so in 0122 we're trying to fix that.
                /*
        if (spaceCount - extraCount > 0) {
          spaceCount -= extraCount;
        }
        */
                spaceCount -= extraCount;
                if (spaceCount < 0) {
                    // for rev 0122, actually delete extra space
                    // textarea.setSelectionStart(origIndex + 1);
                    textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);
                    textarea.setSelectedText("\n");
                } else {
                    String insertion = "\n" + Editor.EMPTY.substring(0, spaceCount);
                    textarea.setSelectedText(insertion);
                }
                // not gonna bother handling more than one brace
                if (braceCount > 0) {
                    int sel = textarea.getSelectionStart();
                    // http://dev.processing.org/bugs/show_bug.cgi?id=484
                    if (sel - tabSize >= 0) {
                        textarea.select(sel - tabSize, sel);
                        String s = Editor.EMPTY.substring(0, tabSize);
                        // if these are spaces that we can delete
                        if (textarea.getSelectedText().equals(s)) {
                            textarea.setSelectedText("");
                        } else {
                            textarea.select(sel, sel);
                        }
                    }
                }
                // mark this event as already handled
                event.consume();
                return true;
            }
            break;
        case '}':
            if (autoIndent) {
                // spaces for the auto-indent
                if (textarea.getSelectionStart() != textarea.getSelectionStop()) {
                    textarea.setSelectedText("");
                }
                // if this brace is the only thing on the line, outdent
                char[] contents = textarea.getText().toCharArray();
                // index to the character to the left of the caret
                int prevCharIndex = textarea.getCaretPosition() - 1;
                // backup from the current caret position to the last newline,
                // checking for anything besides whitespace along the way.
                // if there's something besides whitespace, exit without
                // messing any sort of indenting.
                int index = prevCharIndex;
                boolean finished = false;
                while ((index != -1) && (!finished)) {
                    if (contents[index] == 10) {
                        finished = true;
                        index++;
                    } else if (contents[index] != ' ') {
                        // don't do anything, this line has other stuff on it
                        return false;
                    } else {
                        index--;
                    }
                }
                // brace with no start
                if (!finished)
                    return false;
                int lineStartIndex = index;
                /*
        // now that we know things are ok to be indented, walk
        // backwards to the last { to see how far its line is indented.
        // this isn't perfect cuz it'll pick up commented areas,
        // but that's not really a big deal and can be fixed when
        // this is all given a more complete (proper) solution.
        index = prevCharIndex;
        int braceDepth = 1;
        finished = false;
        while ((index != -1) && (!finished)) {
          if (contents[index] == '}') {
            // aww crap, this means we're one deeper
            // and will have to find one more extra {
            braceDepth++;
            index--;
          } else if (contents[index] == '{') {
            braceDepth--;
            if (braceDepth == 0) {
              finished = true;
            } // otherwise just teasing, keep going..
          } else {
            index--;
          }
        }
        // never found a proper brace, be safe and don't do anything
        if (!finished) return false;

        // check how many spaces on the line with the matching open brace
        int pairedSpaceCount = calcSpaceCount(index, contents);
        //System.out.println(pairedSpaceCount);
        */
                // , 1);
                int pairedSpaceCount = calcBraceIndent(prevCharIndex, contents);
                if (pairedSpaceCount == -1)
                    return false;
                /*
        // now walk forward and figure out how many spaces there are
        while ((index < contents.length) && (index >= 0) &&
               (contents[index++] == ' ')) {
          spaceCount++;
        }
        */
                // number of spaces found on this line
                // int newSpaceCount = Math.max(0, spaceCount - tabSize);
                // number of spaces on this current line
                // int spaceCount = calcSpaces(caretIndex, contents);
                // System.out.println("spaces is " + spaceCount);
                // String insertion = "\n" + Editor.EMPTY.substring(0, spaceCount);
                // int differential = newSpaceCount - spaceCount;
                // System.out.println("diff is " + differential);
                // int newStart = textarea.getSelectionStart() + differential;
                // textarea.setSelectionStart(newStart);
                // textarea.setSelectedText("}");
                textarea.setSelectionStart(lineStartIndex);
                textarea.setSelectedText(Editor.EMPTY.substring(0, pairedSpaceCount));
                // mark this event as already handled
                event.consume();
                return true;
            }
            break;
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
			(IfStmt
				(BinaryExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(EnclosedExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ArrayType
									(PrimitiveType
									)
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								NameExpr
									SimpleName
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BooleanLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(WhileStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
								(BlockStmt
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
											(BreakStmt
											)
										)
									)
								)
							)
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(CharLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
								)
							)
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(IfStmt
					NameExpr
						SimpleName
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(ArrayType
											(PrimitiveType
											)
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NameExpr
											SimpleName
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(WhileStmt
								(BlockStmt
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(IntegerLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NameExpr
											SimpleName
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(WhileStmt
								(BlockStmt
									(IfStmt
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										(IfStmt
											(BinaryExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										LineComment
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
											)
											LineComment
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockComment
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(IntegerLiteralExpr
														)
														NameExpr
															SimpleName
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											LineComment
										)
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									(IfStmt
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ReturnStmt
												(BooleanLiteralExpr
												)
												LineComment
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(EnclosedExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(CastExpr
				NameExpr
					SimpleName
				(PrimitiveType
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
			(IfStmt
				(BinaryExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(EnclosedExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ArrayType
									(PrimitiveType
									)
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								NameExpr
									SimpleName
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BooleanLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(WhileStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
								(BlockStmt
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
											(BreakStmt
											)
										)
									)
								)
							)
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(CharLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
								)
							)
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(IfStmt
					NameExpr
						SimpleName
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(ArrayType
											(PrimitiveType
											)
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NameExpr
											SimpleName
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(WhileStmt
								(BlockStmt
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(IntegerLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NameExpr
											SimpleName
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(WhileStmt
								(BlockStmt
									(IfStmt
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										(IfStmt
											(BinaryExpr
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										LineComment
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
											)
											LineComment
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(CharLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockComment
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(IntegerLiteralExpr
														)
														NameExpr
															SimpleName
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											LineComment
										)
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									(IfStmt
										(BinaryExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ReturnStmt
												(BooleanLiteralExpr
												)
												LineComment
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(EnclosedExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(CastExpr
				NameExpr
					SimpleName
				(PrimitiveType
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

