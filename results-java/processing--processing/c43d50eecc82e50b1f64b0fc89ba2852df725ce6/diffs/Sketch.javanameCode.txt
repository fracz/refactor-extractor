/**
 * This is called upon return from entering a new file name.
 * (that is, from either newCode or renameCode after the prompt)
 * This code is almost identical for both the newCode and renameCode
 * cases, so they're kept merged except for right in the middle
 * where they diverge.
 */
public void nameCode(String newName) {
    // make sure the user didn't hide the sketch folder
    ensureExistence();
    // *nix is sensitive and preserving.. argh)
    if (renamingCode && newName.equalsIgnoreCase(current.name)) {
        // if it's a 'new' then an error will occur down below
        return;
    }
    // don't allow blank names
    if (newName.trim().equals("")) {
        return;
    }
    if (newName.trim().equals(".java") || newName.trim().equals(".pde")) {
        return;
    }
    String newFilename = null;
    int newFlavor = 0;
    // add .pde to file if it has no extension
    if (newName.endsWith(".pde")) {
        newFilename = newName;
        newName = newName.substring(0, newName.length() - 4);
        newFlavor = PDE;
    } else if (newName.endsWith(".java")) {
        // don't show this error if creating a new tab
        if (renamingCode && (code[0] == current)) {
            Base.showWarning("Problem with rename", "The main .pde file cannot be .java file.\n" + "(It may be time for your to graduate to a\n" + "\"real\" programming environment)", null);
            return;
        }
        newFilename = newName;
        newName = newName.substring(0, newName.length() - 5);
        newFlavor = JAVA;
    } else {
        newFilename = newName + ".pde";
        newFlavor = PDE;
    }
    // or something like that (nothing against poo time)
    if (newName.indexOf('.') != -1) {
        newName = Sketch.sanitizedName(newName);
        newFilename = newName + ((newFlavor == PDE) ? ".pde" : ".java");
    }
    // create the new file, new SketchCode object and load it
    File newFile = new File(folder, newFilename);
    if (newFile.exists()) {
        // yay! users will try anything
        Base.showMessage("Nope", "A file named \"" + newFile + "\" already exists\n" + "in \"" + folder.getAbsolutePath() + "\"");
        return;
    }
    File newFileHidden = new File(folder, newFilename + ".x");
    if (newFileHidden.exists()) {
        // don't let them get away with it if they try to create something
        // with the same name as something hidden
        Base.showMessage("No Way", "A hidden tab with the same name already exists.\n" + "Use \"Unhide\" to bring it back.");
        return;
    }
    if (renamingCode) {
        if (currentIndex == 0) {
            // get the new folder name/location
            File newFolder = new File(folder.getParentFile(), newName);
            if (newFolder.exists()) {
                Base.showWarning("Cannot Rename", "Sorry, a sketch (or folder) named " + "\"" + newName + "\" already exists.", null);
                return;
            }
            // first get the contents of the editor text area
            if (current.modified) {
                current.program = editor.getText();
                try {
                    // save this new SketchCode
                    current.save();
                } catch (Exception e) {
                    Base.showWarning("Error", "Could not rename the sketch. (0)", e);
                    return;
                }
            }
            if (!current.file.renameTo(newFile)) {
                Base.showWarning("Error", "Could not rename \"" + current.file.getName() + "\" to \"" + newFile.getName() + "\"", null);
                return;
            }
            // save each of the other tabs because this is gonna be re-opened
            try {
                for (int i = 1; i < codeCount; i++) {
                    // if (code[i].modified) code[i].save();
                    code[i].save();
                }
            } catch (Exception e) {
                Base.showWarning("Error", "Could not rename the sketch. (1)", e);
                return;
            }
            // now rename the sketch folder and re-open
            boolean success = folder.renameTo(newFolder);
            if (!success) {
                Base.showWarning("Error", "Could not rename the sketch. (2)", null);
                return;
            }
            // if successful, set base properties for the sketch
            File mainFile = new File(newFolder, newName + ".pde");
            mainFilename = mainFile.getAbsolutePath();
            // having saved everything and renamed the folder and the main .pde,
            // use the editor to re-open the sketch to re-init state
            // (unfortunately this will kill positions for carets etc)
            editor.handleOpenUnchecked(mainFilename, currentIndex, editor.textarea.getSelectionStart(), editor.textarea.getSelectionStop(), editor.textarea.getScrollPosition());
            // get the changes into the sketchbook menu
            // (re-enabled in 0115 to fix bug #332)
            editor.base.rebuildSketchbookMenu();
        } else {
            // else if something besides code[0]
            if (!current.file.renameTo(newFile)) {
                Base.showWarning("Error", "Could not rename \"" + current.file.getName() + "\" to \"" + newFile.getName() + "\"", null);
                return;
            }
            // just reopen the class itself
            current.name = newName;
            current.file = newFile;
            current.flavor = newFlavor;
        }
    } else {
        // creating a new file
        try {
            // TODO returns a boolean
            newFile.createNewFile();
        } catch (IOException e) {
            Base.showWarning("Error", "Could not create the file \"" + newFile + "\"\n" + "in \"" + folder.getAbsolutePath() + "\"", e);
            return;
        }
        SketchCode newCode = new SketchCode(newName, newFile, newFlavor);
        insertCode(newCode);
    }
    // sort the entries
    sortCode();
    // set the new guy as current
    setCurrent(newName);
    // update the tabs
    // editor.header.repaint();
    editor.header.rebuild();
    // force the update on the mac?
    Toolkit.getDefaultToolkit().sync();
// editor.header.getToolkit().sync();
}||||||||/**
 * This is called upon return from entering a new file name.
 * (that is, from either newCode or renameCode after the prompt)
 * This code is almost identical for both the newCode and renameCode
 * cases, so they're kept merged except for right in the middle
 * where they diverge.
 */
protected void nameCode(String newName) {
    // make sure the user didn't hide the sketch folder
    ensureExistence();
    // Add the extension here, this simplifies some of the logic below.
    if (newName.indexOf('.') == -1) {
        newName += "." + getDefaultExtension();
    }
    // *nix is sensitive and preserving.. argh)
    if (renamingCode) {
        if (newName.equalsIgnoreCase(current.getFileName())) {
            // if it's a 'new' then an error will occur down below
            return;
        }
    }
    newName = newName.trim();
    if (newName.equals(""))
        return;
    int dot = newName.indexOf('.');
    if (dot == 0) {
        Base.showWarning("Problem with rename", "The name cannot start with a period.", null);
        return;
    }
    String newExtension = newName.substring(dot + 1).toLowerCase();
    if (!validExtension(newExtension)) {
        Base.showWarning("Problem with rename", "\"." + newExtension + "\"" + "is not a valid extension.", null);
        return;
    }
    // Don't let the user create the main tab as a .java file instead of .pde
    if (!isDefaultExtension(newExtension)) {
        if (renamingCode) {
            // If creating a new tab, don't show this error
            if (current == code[0]) {
                // If this is the main tab, disallow
                Base.showWarning("Problem with rename", "The main .pde file cannot be .java file.\n" + "(It may be time for your to graduate to a\n" + "\"real\" programming environment)", null);
                return;
            }
        }
    }
    // dots are allowed for the .pde and .java, but not in the name
    // make sure the user didn't name things poo.time.pde
    // or something like that (nothing against poo time)
    String shortName = newName.substring(0, dot);
    String sanitaryName = Sketch.sanitizeName(shortName);
    if (!shortName.equals(sanitaryName)) {
        newName = sanitaryName + "." + newExtension;
    }
    // create the new file, new SketchCode object and load it
    File newFile = new File(folder, newName);
    if (newFile.exists()) {
        // yay! users will try anything
        Base.showMessage("Nope", "A file named \"" + newFile + "\" already exists\n" + "in \"" + folder.getAbsolutePath() + "\"");
        return;
    }
    File newFileHidden = new File(folder, newName + ".x");
    if (newFileHidden.exists()) {
        // don't let them get away with it if they try to create something
        // with the same name as something hidden
        Base.showMessage("No Way", "A hidden tab with the same name already exists.\n" + "Use \"Unhide\" to bring it back.");
        return;
    }
    if (renamingCode) {
        if (currentIndex == 0) {
            // get the new folder name/location
            File newFolder = new File(folder.getParentFile(), newName);
            if (newFolder.exists()) {
                Base.showWarning("Cannot Rename", "Sorry, a sketch (or folder) named " + "\"" + newName + "\" already exists.", null);
                return;
            }
            // first get the contents of the editor text area
            if (current.modified) {
                current.program = editor.getText();
                try {
                    // save this new SketchCode
                    current.save();
                } catch (Exception e) {
                    Base.showWarning("Error", "Could not rename the sketch. (0)", e);
                    return;
                }
            }
            if (!current.renameTo(newFile, newExtension)) {
                Base.showWarning("Error", "Could not rename \"" + current.getFileName() + "\" to \"" + newFile.getName() + "\"", null);
                return;
            }
            // save each of the other tabs because this is gonna be re-opened
            try {
                for (int i = 1; i < codeCount; i++) {
                    // if (code[i].modified) code[i].save();
                    code[i].save();
                }
            } catch (Exception e) {
                Base.showWarning("Error", "Could not rename the sketch. (1)", e);
                return;
            }
            // now rename the sketch folder and re-open
            boolean success = folder.renameTo(newFolder);
            if (!success) {
                Base.showWarning("Error", "Could not rename the sketch. (2)", null);
                return;
            }
            // if successful, set base properties for the sketch
            File newMainFile = new File(newFolder, newName + ".pde");
            String newMainFilePath = newMainFile.getAbsolutePath();
            // having saved everything and renamed the folder and the main .pde,
            // use the editor to re-open the sketch to re-init state
            // (unfortunately this will kill positions for carets etc)
            editor.handleOpenUnchecked(newMainFilePath, currentIndex, editor.textarea.getSelectionStart(), editor.textarea.getSelectionStop(), editor.textarea.getScrollPosition());
            // get the changes into the sketchbook menu
            // (re-enabled in 0115 to fix bug #332)
            editor.base.rebuildSketchbookMenu();
        } else {
            // else if something besides code[0]
            if (!current.renameTo(newFile, newExtension)) {
                Base.showWarning("Error", "Could not rename \"" + current.getFileName() + "\" to \"" + newFile.getName() + "\"", null);
                return;
            }
        }
    } else {
        // creating a new file
        try {
            if (!newFile.createNewFile()) {
                // Already checking for IOException, so make our own.
                throw new IOException("createNewFile() returned false");
            }
        } catch (IOException e) {
            Base.showWarning("Error", "Could not create the file \"" + newFile + "\"\n" + "in \"" + folder.getAbsolutePath() + "\"", e);
            return;
        }
        SketchCode newCode = new SketchCode(newFile, newExtension);
        insertCode(newCode);
    }
    // sort the entries
    sortCode();
    // set the new guy as current
    setCurrent(newName);
    // update the tabs
    // editor.header.repaint();
    editor.header.rebuild();
    // force the update on the mac?
    Toolkit.getDefaultToolkit().sync();
// editor.header.getToolkit().sync();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(EnclosedExpr
								(BinaryExpr
									(ArrayAccessExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									NullLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
							)
						)
						LineComment
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					(CharLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(EnclosedExpr
								(ConditionalExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
									StringLiteralExpr
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(IfStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													StringLiteralExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					(CharLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							LineComment
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(CharLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ReturnStmt
								)
							)
							LineComment
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									LineComment
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(IfStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													StringLiteralExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

