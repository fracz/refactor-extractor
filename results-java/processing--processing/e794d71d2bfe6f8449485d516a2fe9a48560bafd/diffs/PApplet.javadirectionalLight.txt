public void directionalLight(float red, float green, float blue, float nx, float ny, float nz) {
    if (recorder != null)
        recorder.directionalLight(red, green, blue, nx, ny, nz);
    g.directionalLight(red, green, blue, nx, ny, nz);
}||||||||/**
 * ( begin auto-generated from directionalLight.xml )
 *
 * Adds a directional light. Directional light comes from one direction and
 * is stronger when hitting a surface squarely and weaker if it hits at a a
 * gentle angle. After hitting a surface, a directional lights scatters in
 * all directions. Lights need to be included in the <b>draw()</b> to
 * remain persistent in a looping program. Placing them in the
 * <b>setup()</b> of a looping program will cause them to only have an
 * effect the first time through the loop. The affect of the <b>v1</b>,
 * <b>v2</b>, and <b>v3</b> parameters is determined by the current color
 * mode. The <b>nx</b>, <b>ny</b>, and <b>nz</b> parameters specify the
 * direction the light is facing. For example, setting <b>ny</b> to -1 will
 * cause the geometry to be lit from below (the light is facing directly upward).
 * ( end auto-generated )
 * @webref lights_camera:lights
 * @usage web_application
 * @param red red or hue value (depending on current color mode)
 * @param green green or saturation value (depending on current color mode)
 * @param blue blue or brightness value (depending on current color mode)
 * @param nx direction along the x-axis
 * @param ny direction along the y-axis
 * @param nz direction along the z-axis
 * @see PGraphics#lights()
 * @see PGraphics#ambientLight(float, float, float, float, float, float)
 * @see PGraphics#pointLight(float, float, float, float, float, float)
 * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)
 */
public void directionalLight(float red, float green, float blue, float nx, float ny, float nz) {
    if (recorder != null)
        recorder.directionalLight(red, green, blue, nx, ny, nz);
    g.directionalLight(red, green, blue, nx, ny, nz);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

