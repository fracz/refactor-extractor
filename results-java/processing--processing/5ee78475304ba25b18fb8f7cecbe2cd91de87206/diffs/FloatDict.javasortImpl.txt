// // ascending puts the largest value at the end
// // descending puts the largest value at 0
// public void sortValues(final boolean descending, final boolean tiebreaker) {
// Sort s = new Sort() {
// @Override
// public int size() {
// return count;
// }
// 
// @Override
// public float compare(int a, int b) {
// float diff = values[b] - values[a];
// if (tiebreaker) {
// if (diff == 0) {
// diff = keys[a].compareToIgnoreCase(keys[b]);
// }
// }
// return descending ? diff : -diff;
// }
// 
// @Override
// public void swap(int a, int b) {
// FloatHash.this.swap(a, b);
// }
// };
// s.run();
// }
protected void sortImpl(final boolean useKeys, final boolean reverse) {
    Sort s = new Sort() {

        @Override
        public int size() {
            if (useKeys) {
                // don't worry about NaN values
                return count;
            } else if (count == 0) {
                // skip the NaN check, it'll AIOOBE
                return 0;
            } else {
                // first move NaN values to the end of the list
                int right = count - 1;
                while (values[right] != values[right]) {
                    right--;
                    if (right == -1) {
                        // all values are NaN
                        return 0;
                    }
                }
                for (int i = right; i >= 0; --i) {
                    if (Float.isNaN(values[i])) {
                        swap(i, right);
                        --right;
                    }
                }
                return right + 1;
            }
        }

        @Override
        public float compare(int a, int b) {
            float diff = 0;
            if (useKeys) {
                diff = keys[a].compareToIgnoreCase(keys[b]);
                if (diff == 0) {
                    return values[a] - values[b];
                }
            } else {
                // sort values
                diff = values[a] - values[b];
                if (diff == 0) {
                    diff = keys[a].compareToIgnoreCase(keys[b]);
                }
            }
            return reverse ? -diff : diff;
        }

        @Override
        public void swap(int a, int b) {
            FloatDict.this.swap(a, b);
        }
    };
    s.run();
}||||||||protected void sortImpl(final boolean useKeys, final boolean reverse, final boolean stable) {
    Sort s = new Sort() {

        @Override
        public int size() {
            if (useKeys) {
                // don't worry about NaN values
                return count;
            } else if (count == 0) {
                // skip the NaN check, it'll AIOOBE
                return 0;
            } else {
                // first move NaN values to the end of the list
                int right = count - 1;
                while (values[right] != values[right]) {
                    right--;
                    if (right == -1) {
                        // all values are NaN
                        return 0;
                    }
                }
                for (int i = right; i >= 0; --i) {
                    if (Float.isNaN(values[i])) {
                        swap(i, right);
                        --right;
                    }
                }
                return right + 1;
            }
        }

        @Override
        public float compare(int a, int b) {
            float diff = 0;
            if (useKeys) {
                diff = keys[a].compareToIgnoreCase(keys[b]);
                if (diff == 0) {
                    diff = values[a] - values[b];
                }
            } else {
                // sort values
                diff = values[a] - values[b];
                if (diff == 0 && stable) {
                    diff = keys[a].compareToIgnoreCase(keys[b]);
                }
            }
            return reverse ? -diff : diff;
        }

        @Override
        public void swap(int a, int b) {
            FloatDict.this.swap(a, b);
        }
    };
    s.run();
    // Set the indices after sort/swaps (performance fix 160411)
    indices = new HashMap<String, Integer>();
    for (int i = 0; i < count; i++) {
        indices.put(keys[i], i);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
												LineComment
											)
											(WhileStmt
												(BlockStmt
													(ExpressionStmt
														(UnaryExpr
															NameExpr
																SimpleName
														)
													)
													(IfStmt
														(BinaryExpr
															NameExpr
																SimpleName
															(UnaryExpr
																(IntegerLiteralExpr
																)
															)
														)
														(BlockStmt
															(ReturnStmt
																(IntegerLiteralExpr
																)
																LineComment
															)
														)
													)
												)
												(BinaryExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ForStmt
												(BlockStmt
													(IfStmt
														(MethodCallExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																)
															)
															(ExpressionStmt
																(UnaryExpr
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(VariableDeclarationExpr
													(VariableDeclarator
														NameExpr
															SimpleName
														SimpleName
														(PrimitiveType
														)
													)
												)
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
										(BlockStmt
											(ReturnStmt
												(IntegerLiteralExpr
												)
												LineComment
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
											LineComment
										)
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(BlockStmt
												(ReturnStmt
													(BinaryExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
								(ReturnStmt
									(ConditionalExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										(ThisExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
							(VoidType
							)
							SimpleName
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
												LineComment
											)
											(WhileStmt
												(BlockStmt
													(ExpressionStmt
														(UnaryExpr
															NameExpr
																SimpleName
														)
													)
													(IfStmt
														(BinaryExpr
															NameExpr
																SimpleName
															(UnaryExpr
																(IntegerLiteralExpr
																)
															)
														)
														(BlockStmt
															(ReturnStmt
																(IntegerLiteralExpr
																)
																LineComment
															)
														)
													)
												)
												(BinaryExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ForStmt
												(BlockStmt
													(IfStmt
														(MethodCallExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																)
															)
															(ExpressionStmt
																(UnaryExpr
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(VariableDeclarationExpr
													(VariableDeclarator
														NameExpr
															SimpleName
														SimpleName
														(PrimitiveType
														)
													)
												)
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
										(BlockStmt
											(ReturnStmt
												(IntegerLiteralExpr
												)
												LineComment
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
											LineComment
										)
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(IntegerLiteralExpr
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BinaryExpr
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
								)
								(ReturnStmt
									(ConditionalExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										(ThisExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
							(VoidType
							)
							SimpleName
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

