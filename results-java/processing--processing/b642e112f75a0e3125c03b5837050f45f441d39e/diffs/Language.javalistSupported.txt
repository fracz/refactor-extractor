private static String[] listSupported() {
    // List of languages in alphabetical order. (Add yours here.)
    // Also remember to add it to the corresponding build/build.xml rule.
    final String[] SUPPORTED = { // German, Deutsch
    "de", // English
    "en", // Greek
    "el", // Spanish
    "es", // French, Français
    "fr", // Japanese
    "ja", // Korean
    "ko", // Dutch, Nederlands
    "nl", // Portuguese
    "pt", // Turkish
    "tr", // chinese
    "zh" };
    return SUPPORTED;
/*
    // come back to this when bundles are placed outside the JAR
    InputStream input = getClass().getResourceAsStream(LISTING);
    String[] lines = PApplet.loadStrings(input);
    ArrayList<String> list = new ArrayList<String>();
    for (String line : lines) {
      int index = line.indexOf('#');
      if (index != -1) {
        line = line.substring(0, index);
      }
      line = line.trim();
      list.add(line);
    }
    return list.toArray(new String[0]);
    */
}||||||||private static String[] listSupported() {
    // List of languages in alphabetical order. (Add yours here.)
    // Also remember to add it to the corresponding build/build.xml rule.
    final String[] SUPPORTED = { // German, Deutsch
    "de", // English
    "en", // Greek
    "el", // Spanish
    "es", // French, Français
    "fr", // Japanese
    "ja", // Korean
    "ko", // Dutch, Nederlands
    "nl", // Portuguese
    "pt", // Turkish
    "tr", // chinese
    "zh" };
    Arrays.sort(SUPPORTED);
    return SUPPORTED;
/*
    // come back to this when bundles are placed outside the JAR
    InputStream input = getClass().getResourceAsStream(LISTING);
    String[] lines = PApplet.loadStrings(input);
    ArrayList<String> list = new ArrayList<String>();
    for (String line : lines) {
      int index = line.indexOf('#');
      if (index != -1) {
        line = line.substring(0, index);
      }
      line = line.trim();
      list.add(line);
    }
    return list.toArray(new String[0]);
    */
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ArrayType
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
						StringLiteralExpr
							LineComment
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ArrayType
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
)

