/**
 * Part of the MessageConsumer interface, this is called
 * whenever a piece (usually a line) of error message is spewed
 * out from the compiler. The errors are parsed for their contents
 * and line number, which is then reported back to Editor.
 */
public void message(String s) {
    // This receives messages as full lines, so a newline needs
    // to be added as they're printed to the console.
    System.err.println(s);
    // ignore cautions
    if (s.indexOf("Caution") != -1)
        return;
    // jikes always uses a forward slash character as its separator,
    // so replace any platform-specific separator characters before
    // attemping to compare
    // 
    String buildPathSubst = buildPath.replace(File.separatorChar, '/') + "/";
    String partialTempPath = null;
    // s.indexOf(partialTempPath);
    int partialStartIndex = -1;
    // use this to build a better exception
    int fileIndex = -1;
    // iterate through the project files to see who's causing the trouble
    for (int i = 0; i < sketch.codeCount; i++) {
        if (sketch.code[i].preprocName == null)
            continue;
        partialTempPath = buildPathSubst + sketch.code[i].preprocName;
        partialStartIndex = s.indexOf(partialTempPath);
        if (partialStartIndex != -1) {
            fileIndex = i;
            // System.out.println("fileIndex is " + fileIndex);
            break;
        }
    }
    // int partialStartIndex = s.indexOf(partialTempPath);
    if (partialStartIndex != -1) {
        // skip past the path and parse the int after the first colon
        // 
        String s1 = s.substring(partialStartIndex + partialTempPath.length() + 1);
        int colon = s1.indexOf(':');
        int lineNumber = Integer.parseInt(s1.substring(0, colon));
        if (fileIndex == 0) {
            // main class, figure out which tab
            for (int i = 1; i < sketch.codeCount; i++) {
                if (sketch.code[i].flavor == Sketch.PDE) {
                    if (sketch.code[i].preprocOffset < lineNumber) {
                        fileIndex = i;
                    // System.out.println("i'm thinkin file " + i);
                    }
                }
            }
            if (fileIndex != 0) {
                // if found another culprit
                lineNumber -= sketch.code[fileIndex].preprocOffset;
            // System.out.println("i'm sayin line " + lineNumber);
            }
        }
        // String s2 = s1.substring(colon + 2);
        int err = s1.indexOf("Error:");
        if (err != -1) {
            // (at least) the second error found
            if (firstErrorFound) {
                secondErrorFound = true;
                return;
            }
            // if executing at this point, this is *at least* the first error
            firstErrorFound = true;
            // err += "error:".length();
            String description = s1.substring(err + "Error:".length());
            description = description.trim();
            String hasLoop = "The method \"void loop();\" with default access";
            if (description.indexOf(hasLoop) != -1) {
                description = "Rename loop() to draw() in Processing 0070 and higher";
            }
            String constructorProblem = "No applicable overload was found for a constructor of type";
            if (description.indexOf(constructorProblem) != -1) {
                // "simong.particles.ParticleSystem". Perhaps you wanted the overloaded version "ParticleSystem();" instead?
                int nextSentence = description.indexOf("\".") + 3;
                description = description.substring(nextSentence);
            }
            String overloadProblem = "No applicable overload";
            if (description.indexOf(overloadProblem) != -1) {
                int nextSentence = description.indexOf("\".") + 3;
                description = description.substring(nextSentence);
            }
            // c:/fry/processing/build/windows/work/lib/build/Temporary_6858_2476.java:1:34:1:41: Semantic Error: You need to modify your classpath, sourcepath, bootclasspath, and/or extdirs setup. Package "poo/shoe" could not be found in:
            String classpathProblem = "You need to modify your classpath";
            if (description.indexOf(classpathProblem) != -1) {
                if (description.indexOf("quicktime/std") != -1) {
                    // special case for the quicktime libraries
                    description = "To run sketches that use the Processing video library, " + "you must first install QuickTime for Java.";
                } else {
                    int nextSentence = description.indexOf(". Package") + 2;
                    description = description.substring(nextSentence, description.indexOf(':')) + " the code folder or in any libraries.";
                }
            }
            if ((description.indexOf("\";\" inserted " + "to complete BlockStatement") != -1) || (description.indexOf("; expected instead of this token") != -1)) {
                System.err.println(description);
                description = "Compiler error, maybe a missing semicolon?";
            }
            // System.out.println("description = " + description);
            // System.out.println("creating exception " + exception);
            exception = new RunnerException(description, fileIndex, lineNumber - 1, -1);
        // NOTE!! major change here, this exception will be queued
        // here to be thrown by the compile() function
        // editor.error(exception);
        } else {
            System.err.println("i suck: " + s);
        }
    } else {
        // 
        if (!secondErrorFound) {
            System.err.println(s);
        }
    }
}||||||||/**
 * Part of the MessageConsumer interface, this is called
 * whenever a piece (usually a line) of error message is spewed
 * out from the compiler. The errors are parsed for their contents
 * and line number, which is then reported back to Editor.
 */
public void message(String s) {
    // This receives messages as full lines, so a newline needs
    // to be added as they're printed to the console.
    System.err.println(s);
    // ignore cautions
    if (s.indexOf("Caution") != -1)
        return;
    // jikes always uses a forward slash character as its separator,
    // so replace any platform-specific separator characters before
    // attemping to compare
    // 
    String buildPathSubst = buildPath.replace(File.separatorChar, '/') + "/";
    String partialTempPath = null;
    // s.indexOf(partialTempPath);
    int partialStartIndex = -1;
    // use this to build a better exception
    int fileIndex = -1;
    // iterate through the project files to see who's causing the trouble
    for (int i = 0; i < sketch.codeCount; i++) {
        if (sketch.code[i].preprocName == null)
            continue;
        partialTempPath = buildPathSubst + sketch.code[i].preprocName;
        partialStartIndex = s.indexOf(partialTempPath);
        if (partialStartIndex != -1) {
            fileIndex = i;
            // System.out.println("fileIndex is " + fileIndex);
            break;
        }
    }
    // int partialStartIndex = s.indexOf(partialTempPath);
    if (partialStartIndex != -1) {
        // skip past the path and parse the int after the first colon
        // 
        String s1 = s.substring(partialStartIndex + partialTempPath.length() + 1);
        int colon = s1.indexOf(':');
        int lineNumber = Integer.parseInt(s1.substring(0, colon));
        if (fileIndex == 0) {
            // main class, figure out which tab
            for (int i = 1; i < sketch.codeCount; i++) {
                if (sketch.code[i].flavor == Sketch.PDE) {
                    if (sketch.code[i].preprocOffset < lineNumber) {
                        fileIndex = i;
                    // System.out.println("i'm thinkin file " + i);
                    }
                }
            }
            if (fileIndex != 0) {
                // if found another culprit
                lineNumber -= sketch.code[fileIndex].preprocOffset;
            // System.out.println("i'm sayin line " + lineNumber);
            }
        }
        // String s2 = s1.substring(colon + 2);
        int err = s1.indexOf("Error:");
        if (err != -1) {
            // (at least) the second error found
            if (firstErrorFound) {
                secondErrorFound = true;
                return;
            }
            // if executing at this point, this is *at least* the first error
            firstErrorFound = true;
            // err += "error:".length();
            String description = s1.substring(err + "Error:".length());
            description = description.trim();
            /*
        String hasLoop = "The method \"void loop();\" with default access";
        if (description.indexOf(hasLoop) != -1) {
          description =
            "Rename loop() to draw() in Processing 0070 and higher";
        }
        */
            String[] oldCodeMessages = new String[] { "Type \"BFont\" was not found", "Type \"BGraphics\" was not found", "Type \"BImage\" was not found", "No method named \"framerate\"", "No method named \"push\"", "No accessible field named \"LINE_LOOP\"", "No accessible field named \"LINE_STRIP\"" };
            for (int i = 0; i < oldCodeMessages.length; i++) {
                if (description.indexOf(oldCodeMessages[i]) != -1) {
                    description = "This code needs to be updated, " + "please read the changes reference.";
                    Base.showReference("changes.html");
                    // only complain once, and break
                    break;
                }
            }
            String constructorProblem = "No applicable overload was found for a constructor of type";
            if (description.indexOf(constructorProblem) != -1) {
                // "simong.particles.ParticleSystem". Perhaps you wanted the overloaded version "ParticleSystem();" instead?
                int nextSentence = description.indexOf("\".") + 3;
                description = description.substring(nextSentence);
            }
            String overloadProblem = "No applicable overload";
            if (description.indexOf(overloadProblem) != -1) {
                int nextSentence = description.indexOf("\".") + 3;
                description = description.substring(nextSentence);
            }
            // c:/fry/processing/build/windows/work/lib/build/Temporary_6858_2476.java:1:34:1:41: Semantic Error: You need to modify your classpath, sourcepath, bootclasspath, and/or extdirs setup. Package "poo/shoe" could not be found in:
            String classpathProblem = "You need to modify your classpath";
            if (description.indexOf(classpathProblem) != -1) {
                if (description.indexOf("quicktime/std") != -1) {
                    // special case for the quicktime libraries
                    description = "To run sketches that use the Processing video library, " + "you must first install QuickTime for Java.";
                } else {
                    int nextSentence = description.indexOf(". Package") + 2;
                    description = description.substring(nextSentence, description.indexOf(':')) + " the code folder or in any libraries.";
                }
            }
            if ((description.indexOf("\";\" inserted " + "to complete BlockStatement") != -1) || (description.indexOf("; expected instead of this token") != -1)) {
                System.err.println(description);
                description = "Compiler error, maybe a missing semicolon?";
            }
            // System.out.println("description = " + description);
            // System.out.println("creating exception " + exception);
            exception = new RunnerException(description, fileIndex, lineNumber - 1, -1);
        // NOTE!! major change here, this exception will be queued
        // here to be thrown by the compile() function
        // editor.error(exception);
        } else {
            System.err.println("i suck: " + s);
        }
    } else {
        // 
        if (!secondErrorFound) {
            System.err.println(s);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(CharLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						NullLiteralExpr
					)
					(ContinueStmt
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ForStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(IfStmt
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									LineComment
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												StringLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(BinaryExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(BinaryExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(BinaryExpr
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(IntegerLiteralExpr
														)
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(CharLiteralExpr
															)
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
											LineComment
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(CharLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						NullLiteralExpr
					)
					(ContinueStmt
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ForStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(IfStmt
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									LineComment
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												StringLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										(ArrayCreationLevel
										)
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
											LineComment
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(BinaryExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(BinaryExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(BinaryExpr
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(IntegerLiteralExpr
														)
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(CharLiteralExpr
															)
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
											LineComment
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										StringLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

