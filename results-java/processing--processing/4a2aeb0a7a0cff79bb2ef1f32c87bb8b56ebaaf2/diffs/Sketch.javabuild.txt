/**
 * Build all the code for this sketch.
 *
 * In an advanced program, the returned class name could be different,
 * which is why the className is set based on the return value.
 * A compilation error will burp up a RunnerException.
 *
 * @return null if compilation failed, main class name if not
 */
protected String build(String buildPath, String suggestedClassName) throws RunnerException {
    // make sure the user didn't hide the sketch folder
    ensureExistence();
    String[] codeFolderPackages = null;
    // PApplet.println(PApplet.split(Sketchbook.librariesClassPath, ';'));
    // PApplet.println(PApplet.split(buildPath, ';'));
    // PApplet.println(PApplet.split(javaClassPath, ';'));
    classPath = buildPath;
    // File codeFolder = new File(folder, "code");
    if (codeFolder.exists()) {
        externalRuntime = true;
        libraryPath = codeFolder.getAbsolutePath();
        // get a list of .jar files in the "code" folder
        // (class files in subfolders should also be picked up)
        String codeFolderClassPath = Compiler.contentsToClassPath(codeFolder);
        // append the jar files in the code folder to the class path
        classPath += File.pathSeparator + codeFolderClassPath;
        // get list of packages found in those jars
        codeFolderPackages = Compiler.packageListFromClassPath(codeFolderClassPath);
    // PApplet.println(libraryPath);
    // PApplet.println("packages:");
    // PApplet.printarr(codeFolderPackages);
    } else {
        externalRuntime = false;
        libraryPath = "";
        // check to see if multiple files that include a .java file
        for (int i = 0; i < codeCount; i++) {
            if (code[i].flavor == JAVA) {
                externalRuntime = true;
                break;
            }
        }
    }
    // so that the setting can always be honored.
    if (Preferences.getBoolean("run.options.memory")) {
        externalRuntime = true;
    }
    // if 'data' folder is large, set to external runtime
    if (dataFolder.exists() && Base.calcFolderSize(dataFolder) > 768 * 1024) {
        // if > 768k
        externalRuntime = true;
    }
    // 1. concatenate all .pde files to the 'main' pde
    // store line number for starting point of each code bit
    StringBuffer bigCode = new StringBuffer(code[0].program);
    int bigCount = countLines(code[0].program);
    for (int i = 1; i < codeCount; i++) {
        if (code[i].flavor == PDE) {
            code[i].preprocOffset = ++bigCount;
            bigCode.append('\n');
            bigCode.append(code[i].program);
            bigCount += countLines(code[i].program);
            // don't compile me
            code[i].preprocName = null;
        }
    }
    // run externally whenever there are extra classes defined
    if ((bigCode.indexOf(" class ") != -1) || (bigCode.indexOf("\nclass ") != -1)) {
        externalRuntime = true;
    }
    // if running in opengl mode, this is gonna be external
    // if (Preferences.get("renderer").equals("opengl")) {
    // externalRuntime = true;
    // }
    // 2. run preproc on that code using the sugg class name
    // to create a single .java file and write to buildpath
    String primaryClassName = null;
    PdePreprocessor preprocessor = new PdePreprocessor();
    try {
        // if (i != 0) preproc will fail if a pde file is not
        // java mode, since that's required
        String className = preprocessor.write(bigCode.toString(), buildPath, suggestedClassName, codeFolderPackages, false);
        if (className == null) {
            throw new RunnerException("Could not find main class");
        // this situation might be perfectly fine,
        // (i.e. if the file is empty)
        // System.out.println("No class found in " + code[i].name);
        // System.out.println("(any code in that file will be ignored)");
        // System.out.println();
        } else {
            code[0].preprocName = className + ".java";
        }
        // store this for the compiler and the runtime
        primaryClassName = className;
        // check if the 'main' file is in java mode
        if ((PdePreprocessor.programType == PdePreprocessor.JAVA) || (preprocessor.extraImports.length != 0)) {
            // we in advanced mode now, boy
            externalRuntime = true;
        }
    } catch (antlr.RecognitionException re) {
        // this even returns a column
        int errorFile = 0;
        int errorLine = re.getLine() - 1;
        for (int i = 1; i < codeCount; i++) {
            if ((code[i].flavor == PDE) && (code[i].preprocOffset < errorLine)) {
                errorFile = i;
            }
        }
        errorLine -= code[errorFile].preprocOffset;
        // System.out.println("i found this guy snooping around..");
        // System.out.println("whatcha want me to do with 'im boss?");
        // System.out.println(errorLine + " " + errorFile);
        String msg = re.getMessage();
        if (msg.equals("expecting RCURLY, found 'null'")) {
            throw new RunnerException("Found one too many { characters " + "without a } to match it.");
        }
        if (msg.indexOf("expecting RBRACK") != -1) {
            System.err.println(msg);
            throw new RunnerException("Syntax error, " + "maybe a missing ] character?", errorFile, errorLine, re.getColumn());
        }
        if (msg.indexOf("expecting SEMI") != -1) {
            System.err.println(msg);
            throw new RunnerException("Syntax error, " + "maybe a missing semicolon?", errorFile, errorLine, re.getColumn());
        }
        if (msg.indexOf("expecting RPAREN") != -1) {
            System.err.println(msg);
            throw new RunnerException("Syntax error, " + "maybe a missing right parenthesis?", errorFile, errorLine, re.getColumn());
        }
        // System.out.println("msg is " + msg);
        throw new RunnerException(msg, errorFile, errorLine, re.getColumn());
    } catch (antlr.TokenStreamRecognitionException tsre) {
        // while this seems to store line and column internally,
        // there doesn't seem to be a method to grab it..
        // so instead it's done using a regexp
        // System.err.println("and then she tells me " + tsre.toString());
        // TODO not tested since removing ORO matcher.. ^ could be a problem
        String mess = "^line (\\d+):(\\d+):\\s";
        String[] matches = PApplet.match(tsre.toString(), mess);
        if (matches != null) {
            int errorLine = Integer.parseInt(matches[0]) - 1;
            int errorColumn = Integer.parseInt(matches[1]);
            int errorFile = 0;
            for (int i = 1; i < codeCount; i++) {
                if ((code[i].flavor == PDE) && (code[i].preprocOffset < errorLine)) {
                    errorFile = i;
                }
            }
            errorLine -= code[errorFile].preprocOffset;
            throw new RunnerException(tsre.getMessage(), errorFile, errorLine, errorColumn);
        } else {
            // this is bad, defaults to the main class.. hrm.
            throw new RunnerException(tsre.toString(), 0, -1, -1);
        }
    } catch (RunnerException pe) {
        // get lost in the more general "Exception" handler below.
        throw pe;
    } catch (Exception ex) {
        // TODO better method for handling this?
        System.err.println("Uncaught exception type:" + ex.getClass());
        ex.printStackTrace();
        throw new RunnerException(ex.toString());
    }
    // grab the imports from the code just preproc'd
    importedLibraries = new Vector();
    String[] imports = preprocessor.extraImports;
    for (int i = 0; i < imports.length; i++) {
        // remove things up to the last dot
        String entry = imports[i].substring(0, imports[i].lastIndexOf('.'));
        // System.out.println("found package " + entry);
        File libFolder = (File) Base.importToLibraryTable.get(entry);
        if (libFolder == null) {
            // throw new RunnerException("Could not find library for " + entry);
            continue;
        // } else {
        // System.out.println("found library folder " + libFolder.getAbsolutePath());
        }
        importedLibraries.add(libFolder);
        classPath += Compiler.contentsToClassPath(libFolder);
        libraryPath += File.pathSeparator + libFolder.getAbsolutePath();
    /*
      String list[] = libFolder.list();
      if (list != null) {
        for (int j = 0; j < list.length; j++) {
          // this might have a dll/jnilib/so packed,
          // so add it to the library path
          if (list[j].toLowerCase().endsWith(".jar")) {
            libraryPath += File.pathSeparator +
              libFolder.getAbsolutePath() + File.separator + list[j];
          }
        }
      }
      */
    }
    // Finally, add the regular Java CLASSPATH
    String javaClassPath = System.getProperty("java.class.path");
    // Remove quotes if any.. An annoying (and frequent) Windows problem
    if (javaClassPath.startsWith("\"") && javaClassPath.endsWith("\"")) {
        javaClassPath = javaClassPath.substring(1, javaClassPath.length() - 1);
    }
    classPath += File.pathSeparator + javaClassPath;
    for (int i = 0; i < codeCount; i++) {
        if (code[i].flavor == JAVA) {
            // no pre-processing services necessary for java files
            // just write the the contents of 'program' to a .java file
            // into the build directory. uses byte stream and reader/writer
            // shtuff so that unicode bunk is properly handled
            String filename = code[i].name + ".java";
            try {
                Base.saveFile(code[i].program, new File(buildPath, filename));
            } catch (IOException e) {
                e.printStackTrace();
                throw new RunnerException("Problem moving " + filename + " to the build folder");
            }
            code[i].preprocName = filename;
        }
    }
    // compile the program. errors will happen as a RunnerException
    // that will bubble up to whomever called build().
    // 
    Compiler compiler = new Compiler();
    boolean success = compiler.compile(this, buildPath);
    // System.out.println("success = " + success + " ... " + primaryClassName);
    return success ? primaryClassName : null;
}||||||||/**
 * Build all the code for this sketch.
 *
 * In an advanced program, the returned class name could be different,
 * which is why the className is set based on the return value.
 * A compilation error will burp up a RunnerException.
 *
 * @return null if compilation failed, main class name if not
 */
protected String build(String buildPath, String suggestedClassName) throws RunnerException {
    // make sure the user didn't hide the sketch folder
    ensureExistence();
    String[] codeFolderPackages = null;
    // PApplet.println(PApplet.split(Sketchbook.librariesClassPath, ';'));
    // PApplet.println(PApplet.split(buildPath, ';'));
    // PApplet.println(PApplet.split(javaClassPath, ';'));
    classPath = buildPath;
    // File codeFolder = new File(folder, "code");
    if (codeFolder.exists()) {
        externalRuntime = true;
        libraryPath = codeFolder.getAbsolutePath();
        // get a list of .jar files in the "code" folder
        // (class files in subfolders should also be picked up)
        String codeFolderClassPath = Compiler.contentsToClassPath(codeFolder);
        // append the jar files in the code folder to the class path
        classPath += File.pathSeparator + codeFolderClassPath;
        // get list of packages found in those jars
        codeFolderPackages = Compiler.packageListFromClassPath(codeFolderClassPath);
    // PApplet.println(libraryPath);
    // PApplet.println("packages:");
    // PApplet.printarr(codeFolderPackages);
    } else {
        externalRuntime = false;
        libraryPath = "";
        // check to see if multiple files that include a .java file
        for (int i = 0; i < codeCount; i++) {
            if (code[i].flavor == JAVA) {
                externalRuntime = true;
                break;
            }
        }
    }
    // so that the setting can always be honored.
    if (Preferences.getBoolean("run.options.memory")) {
        externalRuntime = true;
    }
    // if 'data' folder is large, set to external runtime
    if (dataFolder.exists() && Base.calcFolderSize(dataFolder) > 768 * 1024) {
        // if > 768k
        externalRuntime = true;
    }
    // 1. concatenate all .pde files to the 'main' pde
    // store line number for starting point of each code bit
    StringBuffer bigCode = new StringBuffer(code[0].program);
    int bigCount = countLines(code[0].program);
    for (int i = 1; i < codeCount; i++) {
        if (code[i].flavor == PDE) {
            code[i].preprocOffset = ++bigCount;
            bigCode.append('\n');
            bigCode.append(code[i].program);
            bigCount += countLines(code[i].program);
            // don't compile me
            code[i].preprocName = null;
        }
    }
    // run externally whenever there are extra classes defined
    if ((bigCode.indexOf(" class ") != -1) || (bigCode.indexOf("\nclass ") != -1)) {
        externalRuntime = true;
    }
    // if running in opengl mode, this is gonna be external
    // if (Preferences.get("renderer").equals("opengl")) {
    // externalRuntime = true;
    // }
    // 2. run preproc on that code using the sugg class name
    // to create a single .java file and write to buildpath
    String primaryClassName = null;
    PdePreprocessor preprocessor = new PdePreprocessor();
    try {
        // if (i != 0) preproc will fail if a pde file is not
        // java mode, since that's required
        String className = preprocessor.write(bigCode.toString(), buildPath, suggestedClassName, codeFolderPackages, false);
        if (className == null) {
            throw new RunnerException("Could not find main class");
        // this situation might be perfectly fine,
        // (i.e. if the file is empty)
        // System.out.println("No class found in " + code[i].name);
        // System.out.println("(any code in that file will be ignored)");
        // System.out.println();
        } else {
            code[0].preprocName = className + ".java";
        }
        // store this for the compiler and the runtime
        primaryClassName = className;
        // check if the 'main' file is in java mode
        if ((PdePreprocessor.programType == PdePreprocessor.JAVA) || (preprocessor.extraImports.length != 0)) {
            // we in advanced mode now, boy
            externalRuntime = true;
        }
    } catch (antlr.RecognitionException re) {
        // this even returns a column
        int errorFile = 0;
        int errorLine = re.getLine() - 1;
        for (int i = 1; i < codeCount; i++) {
            if ((code[i].flavor == PDE) && (code[i].preprocOffset < errorLine)) {
                errorFile = i;
            }
        }
        errorLine -= code[errorFile].preprocOffset;
        // System.out.println("i found this guy snooping around..");
        // System.out.println("whatcha want me to do with 'im boss?");
        // System.out.println(errorLine + " " + errorFile);
        String msg = re.getMessage();
        if (msg.equals("expecting RCURLY, found 'null'")) {
            throw new RunnerException("Found one too many { characters " + "without a } to match it.", errorFile, errorLine, re.getColumn());
        }
        if (msg.indexOf("expecting RBRACK") != -1) {
            System.err.println(msg);
            throw new RunnerException("Syntax error, " + "maybe a missing ] character?", errorFile, errorLine, re.getColumn());
        }
        if (msg.indexOf("expecting SEMI") != -1) {
            System.err.println(msg);
            throw new RunnerException("Syntax error, " + "maybe a missing semicolon?", errorFile, errorLine, re.getColumn());
        }
        if (msg.indexOf("expecting RPAREN") != -1) {
            System.err.println(msg);
            throw new RunnerException("Syntax error, " + "maybe a missing right parenthesis?", errorFile, errorLine, re.getColumn());
        }
        if (msg.indexOf("preproc.web_colors") != -1) {
            throw new RunnerException("A web color (such as #ffcc00) " + "must be six digits.", errorFile, errorLine, re.getColumn(), false);
        }
        // System.out.println("msg is " + msg);
        throw new RunnerException(msg, errorFile, errorLine, re.getColumn());
    } catch (antlr.TokenStreamRecognitionException tsre) {
        // while this seems to store line and column internally,
        // there doesn't seem to be a method to grab it..
        // so instead it's done using a regexp
        // System.err.println("and then she tells me " + tsre.toString());
        // TODO not tested since removing ORO matcher.. ^ could be a problem
        String mess = "^line (\\d+):(\\d+):\\s";
        String[] matches = PApplet.match(tsre.toString(), mess);
        if (matches != null) {
            int errorLine = Integer.parseInt(matches[0]) - 1;
            int errorColumn = Integer.parseInt(matches[1]);
            int errorFile = 0;
            for (int i = 1; i < codeCount; i++) {
                if ((code[i].flavor == PDE) && (code[i].preprocOffset < errorLine)) {
                    errorFile = i;
                }
            }
            errorLine -= code[errorFile].preprocOffset;
            throw new RunnerException(tsre.getMessage(), errorFile, errorLine, errorColumn);
        } else {
            // this is bad, defaults to the main class.. hrm.
            String msg = tsre.toString();
            throw new RunnerException(msg, 0, -1, -1);
        }
    } catch (RunnerException pe) {
        // get lost in the more general "Exception" handler below.
        throw pe;
    } catch (Exception ex) {
        // TODO better method for handling this?
        System.err.println("Uncaught exception type:" + ex.getClass());
        ex.printStackTrace();
        throw new RunnerException(ex.toString());
    }
    // grab the imports from the code just preproc'd
    importedLibraries = new Vector();
    String[] imports = preprocessor.extraImports;
    for (int i = 0; i < imports.length; i++) {
        // remove things up to the last dot
        String entry = imports[i].substring(0, imports[i].lastIndexOf('.'));
        // System.out.println("found package " + entry);
        File libFolder = (File) Base.importToLibraryTable.get(entry);
        if (libFolder == null) {
            // throw new RunnerException("Could not find library for " + entry);
            continue;
        // } else {
        // System.out.println("found library folder " + libFolder.getAbsolutePath());
        }
        importedLibraries.add(libFolder);
        classPath += Compiler.contentsToClassPath(libFolder);
        libraryPath += File.pathSeparator + libFolder.getAbsolutePath();
    /*
      String list[] = libFolder.list();
      if (list != null) {
        for (int j = 0; j < list.length; j++) {
          // this might have a dll/jnilib/so packed,
          // so add it to the library path
          if (list[j].toLowerCase().endsWith(".jar")) {
            libraryPath += File.pathSeparator +
              libFolder.getAbsolutePath() + File.separator + list[j];
          }
        }
      }
      */
    }
    // Finally, add the regular Java CLASSPATH
    String javaClassPath = System.getProperty("java.class.path");
    // Remove quotes if any.. An annoying (and frequent) Windows problem
    if (javaClassPath.startsWith("\"") && javaClassPath.endsWith("\"")) {
        javaClassPath = javaClassPath.substring(1, javaClassPath.length() - 1);
    }
    classPath += File.pathSeparator + javaClassPath;
    for (int i = 0; i < codeCount; i++) {
        if (code[i].flavor == JAVA) {
            // no pre-processing services necessary for java files
            // just write the the contents of 'program' to a .java file
            // into the build directory. uses byte stream and reader/writer
            // shtuff so that unicode bunk is properly handled
            String filename = code[i].name + ".java";
            try {
                Base.saveFile(code[i].program, new File(buildPath, filename));
            } catch (IOException e) {
                e.printStackTrace();
                throw new RunnerException("Problem moving " + filename + " to the build folder");
            }
            code[i].preprocName = filename;
        }
    }
    // compile the program. errors will happen as a RunnerException
    // that will bubble up to whomever called build().
    // 
    Compiler compiler = new Compiler();
    boolean success = compiler.compile(this, buildPath);
    // System.out.println("success = " + success + " ... " + primaryClassName);
    return success ? primaryClassName : null;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								NullLiteralExpr
							)
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								StringLiteralExpr
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ArrayType
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								LineComment
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BinaryExpr
											(MethodCallExpr
												(ArrayAccessExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											(ArrayAccessExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(IntegerLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ForStmt
								(BlockStmt
									(IfStmt
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													(FieldAccessExpr
														SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
													NameExpr
														SimpleName
												)
											)
											(EnclosedExpr
												(BinaryExpr
													(FieldAccessExpr
														SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(VariableDeclarationExpr
									(VariableDeclarator
										(IntegerLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						NameExpr
							SimpleName
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									StringLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(MethodCallExpr
									(CharLiteralExpr
									)
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ContinueStmt
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ThisExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
				(ForStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(BreakStmt
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								NullLiteralExpr
							)
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
						)
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BooleanLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								StringLiteralExpr
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ArrayType
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
									(UnaryExpr
										(IntegerLiteralExpr
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BinaryExpr
											(MethodCallExpr
												(ArrayAccessExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											(IntegerLiteralExpr
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											(ArrayAccessExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(IntegerLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ForStmt
								(BlockStmt
									(IfStmt
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													(FieldAccessExpr
														SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
													NameExpr
														SimpleName
												)
											)
											(EnclosedExpr
												(BinaryExpr
													(FieldAccessExpr
														SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(VariableDeclarationExpr
									(VariableDeclarator
										(IntegerLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						NameExpr
							SimpleName
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									StringLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(MethodCallExpr
									(CharLiteralExpr
									)
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ContinueStmt
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ThisExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

