/**
 * UPC-A bar codes are made up of a left marker, six digits, a middle marker, six more digits,
 * and an end marker, reading from left to right. For more information, see:
 * <a href="http://en.wikipedia.org/wiki/Universal_Product_Code">
 * http://en.wikipedia.org/wiki/Universal_Product_Code</a>
 */
private boolean decodeRow(int row, BitArray rowData) {
    // TODO: Add support for UPC-E Zero Compressed bar codes.
    // FIXME: Don't trust the first result from findPattern() for the start sequence - resume from
    // that spot and try to start again if finding digits fails.
    result = new StringBuffer();
    int rowOffset = findPattern(rowData, 0, START_END_PATTERN, false);
    if (rowOffset < 0) {
        return false;
    }
    int startOffset = rowOffset;
    // Log("Start pattern ends at column " + rowOffset);
    rowOffset = decodeOneSide(rowData, rowOffset, true);
    if (rowOffset < 0) {
        return false;
    }
    rowOffset = findPattern(rowData, rowOffset, MIDDLE_PATTERN, true);
    if (rowOffset < 0) {
        return false;
    }
    // Log("Middle pattern ends at column " + rowOffset);
    // Pass in false for checkBothParities(). For an EAN-13 barcode, only the
    // left had side will use mixed parities.
    rowOffset = decodeOneSide(rowData, rowOffset, false);
    if (rowOffset < 0) {
        return false;
    }
    boolean result = verifyResult();
    if (result) {
        points = new UPCPoint[2];
        points[0] = new UPCPoint(startOffset, row);
        points[1] = new UPCPoint(rowOffset, row);
    }
    return result;
}||||||||/**
 * UPC-A bar codes are made up of a left marker, six digits, a middle marker, six more digits,
 * and an end marker, reading from left to right. For more information, see:
 * <a href="http://en.wikipedia.org/wiki/Universal_Product_Code">
 * http://en.wikipedia.org/wiki/Universal_Product_Code</a>
 */
private boolean decodeRow(int row, BitArray rowData) {
    // TODO: Add support for UPC-E Zero Compressed bar codes.
    // FIXME: Don't trust the first result from findPattern() for the start sequence - resume from
    // that spot and try to start again if finding digits fails.
    result = new StringBuffer();
    int rowOffset = findPattern(rowData, 0, START_END_PATTERN, false);
    if (rowOffset < 0) {
        return false;
    }
    int startOffset = rowOffset;
    // Log("Start pattern ends at column " + rowOffset);
    rowOffset = decodeOneSide(rowData, rowOffset, true);
    if (rowOffset < 0) {
        return false;
    }
    rowOffset = findPattern(rowData, rowOffset, MIDDLE_PATTERN, true);
    if (rowOffset < 0) {
        return false;
    }
    // Log("Middle pattern ends at column " + rowOffset);
    // Pass in false for checkBothParities(). For an EAN-13 barcode, only the
    // left had side will use mixed parities.
    rowOffset = decodeOneSide(rowData, rowOffset, false);
    if (rowOffset < 0) {
        return false;
    }
    boolean verified = verifyResult();
    if (verified) {
        points = new UPCPoint[] { new UPCPoint(startOffset, row), new UPCPoint(rowOffset, row) };
    }
    return verified;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayCreationLevel
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayInitializerExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(ArrayCreationLevel
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

