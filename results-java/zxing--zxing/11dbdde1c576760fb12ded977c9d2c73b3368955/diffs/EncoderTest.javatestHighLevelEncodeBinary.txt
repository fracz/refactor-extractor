@Test
public void testHighLevelEncodeBinary() throws Exception {
    // binary short form single byte
    testHighLevelEncodeString("N\0N", ".XXXX XXXXX ...X. ........ .X..XXX.");
    // binary short form consecutive bytes
    testHighLevelEncodeString("N\0\u0080 A", ".XXXX XXXXX ...X. ........ X....... ....X ...X.");
    // binary skipping over single character
    testHighLevelEncodeString("\0a\u00FF\u0080 A", "XXXXX ..X.. ........ .XX....X XXXXXXXX X....... ....X ...X.");
    // binary long form optimization into 2 short forms (saves 1 bit)
    testHighLevelEncodeString("\0\0\0\0 \0\0\0\0 \0\0\0\0 \0\0\0\0 \0\0\0\0 \0\0\0\0 \u0082\u0084\u
    // binary long form
    testHighLevelEncodeString("\0\0\0\0 \0\0\1\0 \0\0\2\0 \0\0\3\0 \0\0\4\0 \0\0\5\0 \0\0\6\0 \0\0\7\0 \0\0\u0008" + "\0 \0\0\u0009\0 \0\0\u00F0\0 \0\0\u00F1\0 \0\0\u
}||||||||@Test
public void testHighLevelEncodeBinary() throws Exception {
    // binary short form single byte
    testHighLevelEncodeString("N\0N", // 'N'  B/S    =1   '\0'      N
    ".XXXX XXXXX ....X ........ .XXXX");
    // Encode "N" in UPPER
    testHighLevelEncodeString("N\0n", // 'N'  B/S    =2   '\0'       'n'
    ".XXXX XXXXX ...X. ........ .XX.XXX.");
    // Encode "n" in BINARY
    // binary short form consecutive bytes
    testHighLevelEncodeString("N\0\u0080 A", // 'N'  B/S    =2    '\0'    \u0080   ' '  'A'
    ".XXXX XXXXX ...X. ........ X....... ....X ...X.");
    // binary skipping over single character
    testHighLevelEncodeString("\0a\u00FF\u0080 A", // B/S  =4    '\0'      'a'     '\3ff'   '\200'   ' '   'A'
    "XXXXX ..X.. ........ .XX....X XXXXXXXX X....... ....X ...X.");
    // getting into binary mode from digit mode
    testHighLevelEncodeString("1234\0", // D/L   '1'  '2'  '3'  '4'  U/L  B/S    =1    \0
    "XXXX. ..XX .X.. .X.X .XX. XXX. XXXXX ....X ........");
    // Create a string in which every character requires binary
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i <= 3000; i++) {
        sb.append((char) (128 + (i % 30)));
    }
    // places where the encoding changes: 31, 62, and 2047+31=2078
    for (int i : new int[] { 1, 2, 3, 10, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 2076, 2077, 2078, 2079, 2080, 3000 }) {
        // This is the expected length of a binary string of length "i"
        int expectedLength = (8 * i) + ((i <= 31) ? 10 : (i <= 62) ? 20 : (i <= 2078) ? 21 : 31);
        // Verify that we are correct about the length.
        testHighLevelEncodeString(sb.substring(0, i), expectedLength);
        // A lower case letter at the beginning will be merged into binary mode
        testHighLevelEncodeString('a' + sb.substring(0, i - 1), expectedLength);
        // A lower case letter at the end will also be merged into binary mode
        testHighLevelEncodeString(sb.substring(0, i - 1) + 'a', expectedLength);
        // A lower case letter at both ends will enough to latch us into LOWER.
        testHighLevelEncodeString('a' + sb.substring(0, i) + 'b', expectedLength + 15);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(CastExpr
							(EnclosedExpr
								(BinaryExpr
									(IntegerLiteralExpr
									)
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(PrimitiveType
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
									)
								)
								(EnclosedExpr
									(ConditionalExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
											(ConditionalExpr
												(EnclosedExpr
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
											)
											(IntegerLiteralExpr
											)
										)
										(IntegerLiteralExpr
										)
									)
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(CharLiteralExpr
							)
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(CharLiteralExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(CharLiteralExpr
								)
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(CharLiteralExpr
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						SimpleName
					)
					LineComment
				)
			)
			(ArrayCreationExpr
				(PrimitiveType
				)
				(ArrayInitializerExpr
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
				)
				(ArrayCreationLevel
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

