private void pollQueue() {
    int emitted = 0;
    while (true) {
        while (!scheduledUnsubscribe.isUnsubscribed()) {
            if (REQUESTED.getAndDecrement(this) != 0) {
                Object o = queue.poll();
                if (o == null) {
                    // nothing in queue
                    REQUESTED.incrementAndGet(this);
                    break;
                } else {
                    if (failure) {
                        // completed so we will skip onNext if they exist and only emit terminal events
                        if (on.isError(o)) {
                            System.out.println("Error: " + o);
                            // only emit error
                            on.accept(child, o);
                        }
                    } else {
                        if (!on.accept(child, o)) {
                            // non-terminal event so let's increment count
                            emitted++;
                        }
                    }
                }
            } else {
                // we hit the end ... so increment back to 0 again
                REQUESTED.incrementAndGet(this);
                break;
            }
        }
        long c = COUNTER_UPDATER.decrementAndGet(this);
        if (c <= 0) {
            // request the number of items that we emitted in this poll loop
            if (emitted > 0) {
                request(emitted);
            }
            break;
        } else {
            /*
                     * Set down to 1 and then iterate again.
                     * we lower it to 1 otherwise it could have grown very large while in the last poll loop
                     * and then we can end up looping all those times again here before existing even once we've drained
                     */
            COUNTER_UPDATER.set(this, 1);
        // we now loop again, and if anything tries scheduling again after this it will increment and cause us to loop again after
        }
    }
}||||||||// only execute this from schedule()
private void pollQueue() {
    int emitted = 0;
    do {
        /*
                 * Set to 1 otherwise it could have grown very large while in the last poll loop
                 * and then we can end up looping all those times again here before exiting even once we've drained
                 */
        COUNTER_UPDATER.set(this, 1);
        while (!scheduledUnsubscribe.isUnsubscribed()) {
            if (REQUESTED.getAndDecrement(this) != 0) {
                Object o = queue.poll();
                if (o == null) {
                    // nothing in queue
                    REQUESTED.incrementAndGet(this);
                    break;
                } else {
                    if (failure) {
                        // completed so we will skip onNext if they exist and only emit terminal events
                        if (on.isError(o)) {
                            // only emit error
                            on.accept(child, o);
                        // TODO this could hit the requested limit again ... and is skipping values
                        // so the request count is broken ... it needs to purge the queue
                        // or modify the requested amount so it will loop through everything
                        }
                    } else {
                        if (!on.accept(child, o)) {
                            // non-terminal event so let's increment count
                            emitted++;
                        }
                    }
                }
            } else {
                // we hit the end ... so increment back to 0 again
                REQUESTED.incrementAndGet(this);
                break;
            }
        }
    } while (COUNTER_UPDATER.decrementAndGet(this) > 0);
    // request the number of items that we emitted in this poll loop
    if (emitted > 0) {
        request(emitted);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(WhileStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(ThisExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ThisExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(IfStmt
											NameExpr
												SimpleName
											(BlockStmt
												(IfStmt
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockStmt
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
															LineComment
														)
													)
												)
											)
											(BlockStmt
												(IfStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(BinaryExpr
																	StringLiteralExpr
																	NameExpr
																		SimpleName
																)
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
													)
													LineComment
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ThisExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(BreakStmt
										)
									)
								)
							)
						)
					)
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ThisExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockComment
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							LineComment
						)
						(BreakStmt
						)
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(DoStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ThisExpr
						)
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockComment
					)
				)
				(WhileStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(ThisExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ThisExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(IfStmt
											NameExpr
												SimpleName
											(BlockStmt
												(IfStmt
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockStmt
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
															LineComment
														)
													)
												)
											)
											(BlockStmt
												(IfStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
													)
													LineComment
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ThisExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(BreakStmt
										)
									)
								)
							)
						)
					)
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				(MethodCallExpr
					(ThisExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	LineComment
)

