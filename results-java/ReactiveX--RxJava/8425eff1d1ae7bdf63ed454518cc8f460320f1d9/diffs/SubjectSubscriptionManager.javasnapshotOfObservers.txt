/**
 * Current snapshot of 'state.observers.keySet()' so that concurrent modifications aren't included.
 *
 * This makes it behave deterministically in a single-threaded execution when nesting subscribes.
 *
 * In multi-threaded execution it will cause new subscriptions to wait until the following onNext instead
 * of possibly being included in the current onNext iteration.
 *
 * @return List<Observer<T>>
 */
public Collection<SubjectObserver<? super T>> snapshotOfObservers() {
    // we don't need to copy since state is immutable
    return state.get().observers.values();
}||||||||/**
 * Current snapshot of 'state.observers.keySet()' so that concurrent modifications aren't included.
 *
 * This makes it behave deterministically in a single-threaded execution when nesting subscribes.
 *
 * In multi-threaded execution it will cause new subscriptions to wait until the following onNext instead
 * of possibly being included in the current onNext iteration.
 *
 * @return List<Observer<T>>
 */
private Collection<SubjectObserver<? super T>> snapshotOfObservers() {
    // had to circumvent type check, we know what the array contains
    return (Collection) state.get().observersList;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(CastExpr
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	SimpleName
	(JavadocComment
	)
)

