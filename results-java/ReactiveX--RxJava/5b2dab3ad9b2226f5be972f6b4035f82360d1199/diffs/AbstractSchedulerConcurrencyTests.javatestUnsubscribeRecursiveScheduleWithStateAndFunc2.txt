@Test
public void testUnsubscribeRecursiveScheduleWithStateAndFunc2() throws InterruptedException {
    final CountDownLatch latch = new CountDownLatch(1);
    final CountDownLatch unsubscribeLatch = new CountDownLatch(1);
    final AtomicInteger counter = new AtomicInteger();
    Subscription s = getScheduler().schedule(0L, new Func2<Scheduler, Long, Subscription>() {

        @Override
        public Subscription call(Scheduler innerScheduler, Long i) {
            i++;
            // System.out.println("i: " + i);
            if (i == 10) {
                latch.countDown();
                try {
                    // wait for unsubscribe to finish so we are not racing it
                    unsubscribeLatch.await();
                } catch (InterruptedException e) {
                // we expect the countDown if unsubscribe is not working
                // or to be interrupted if unsubscribe is successful since
                // the unsubscribe will interrupt it as it is calling Future.cancel(true)
                // so we will ignore the stacktrace
                }
            }
            counter.incrementAndGet();
            return innerScheduler.schedule(i, this);
        }
    });
    latch.await();
    s.unsubscribe();
    unsubscribeLatch.countDown();
    // let time pass to see if the scheduler is still doing work
    Thread.sleep(200);
    assertEquals(10, counter.get());
}||||||||@Test
public void testUnsubscribeRecursiveScheduleWithStateAndFunc2() throws InterruptedException {
    final CountDownLatch latch = new CountDownLatch(1);
    final CountDownLatch unsubscribeLatch = new CountDownLatch(1);
    final AtomicInteger counter = new AtomicInteger();
    Subscription s = getScheduler().schedule(1L, new Func2<Scheduler, Long, Subscription>() {

        @Override
        public Subscription call(Scheduler innerScheduler, Long i) {
            System.out.println("Run: " + i);
            if (i == 10) {
                latch.countDown();
                try {
                    // wait for unsubscribe to finish so we are not racing it
                    unsubscribeLatch.await();
                } catch (InterruptedException e) {
                // we expect the countDown if unsubscribe is not working
                // or to be interrupted if unsubscribe is successful since
                // the unsubscribe will interrupt it as it is calling Future.cancel(true)
                // so we will ignore the stacktrace
                }
            }
            counter.incrementAndGet();
            return innerScheduler.schedule(i + 1, this);
        }
    });
    latch.await();
    s.unsubscribe();
    unsubscribeLatch.countDown();
    // let time pass to see if the scheduler is still doing work
    Thread.sleep(200);
    assertEquals(10, counter.get());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(LongLiteralExpr
						)
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(TryStmt
												(CatchClause
													(BlockStmt
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														LineComment
													)
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(ThisExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(LongLiteralExpr
						)
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(TryStmt
												(CatchClause
													(BlockStmt
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														LineComment
													)
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										(MethodCallExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(ThisExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

