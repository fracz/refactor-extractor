/**
 * Request a certain maximum number of emitted items from the Observable this Subscriber is subscribed to.
 * This is a way of requesting backpressure. To disable backpressure, pass {@code Long.MAX_VALUE} to this
 * method.
 * <p>
 * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then
 * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at
 * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example,
 * the code below may result in {@code Long.MAX_VALUE} requests being actioned only.
 *
 * <pre>
 * request(100);
 * request(Long.MAX_VALUE-1);
 * </pre>
 *
 * @param n the maximum number of items you want the Observable to emit to the Subscriber at this time, or
 * {@code Long.MAX_VALUE} if you want the Observable to emit items at its own pace
 * @throws IllegalArgumentException
 * if {@code n} is negative
 */
protected final void request(long n) {
    if (n < 0) {
        throw new IllegalArgumentException("number requested cannot be negative: " + n);
    }
    Producer shouldRequest = null;
    synchronized (this) {
        if (p != null) {
            shouldRequest = p;
        } else if (requested == Long.MIN_VALUE) {
            requested = n;
        } else {
            final long total = requested + n;
            // check if overflow occurred
            if (total < 0) {
                requested = Long.MAX_VALUE;
            } else {
                requested = total;
            }
        }
    }
    // after releasing lock
    if (shouldRequest != null) {
        shouldRequest.request(n);
    }
}||||||||/**
 * Request a certain maximum number of emitted items from the Observable this Subscriber is subscribed to.
 * This is a way of requesting backpressure. To disable backpressure, pass {@code Long.MAX_VALUE} to this
 * method.
 * <p>
 * Requests are additive but if a sequence of requests totals more than {@code Long.MAX_VALUE} then
 * {@code Long.MAX_VALUE} requests will be actioned and the extras <i>may</i> be ignored. Arriving at
 * {@code Long.MAX_VALUE} by addition of requests cannot be assumed to disable backpressure. For example,
 * the code below may result in {@code Long.MAX_VALUE} requests being actioned only.
 *
 * <pre>
 * request(100);
 * request(Long.MAX_VALUE-1);
 * </pre>
 *
 * @param n the maximum number of items you want the Observable to emit to the Subscriber at this time, or
 * {@code Long.MAX_VALUE} if you want the Observable to emit items at its own pace
 * @throws IllegalArgumentException
 * if {@code n} is negative
 */
protected final void request(long n) {
    if (n < 0) {
        throw new IllegalArgumentException("number requested cannot be negative: " + n);
    }
    // if producer is set then we will request from it
    // otherwise we increase the requested count by n
    Producer producerToRequestFrom = null;
    synchronized (this) {
        if (producer != null) {
            producerToRequestFrom = producer;
        } else {
            addToRequested(n);
            return;
        }
    }
    // after releasing lock (we should not make requests holding a lock)
    producerToRequestFrom.request(n);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								LineComment
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(ThisExpr
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(ThisExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

