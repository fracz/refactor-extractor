/**
 * {@inheritDoc} <br>
 * <p>
 * IMPLEMENTATION NOTES:<br>
 * Offer is allowed from multiple threads.<br>
 * Offer allocates a new node and:
 * <ol>
 * <li>Swaps it atomically with current producer node (only one producer 'wins')
 * <li>Sets the new node as the node following from the swapped producer node
 * </ol>
 * This works because each producer is guaranteed to 'plant' a new node and link the old node. No 2 producers can
 * get the same producer node as part of XCHG guarantee.
 *
 * @see MessagePassingQueue#offer(Object)
 * @see java.util.Queue#offer(java.lang.Object)
 */
@Override
public final boolean offer(final T nextValue) {
    final LinkedQueueNode<T> nextNode = new LinkedQueueNode<>();
    final LinkedQueueNode<T> prevProducerNode = xchgProducerNode(nextNode);
    // Should a producer thread get interrupted here the chain WILL be broken until that thread is resumed
    // and completes the store in prev.next.
    // StoreStore
    prevProducerNode.soNext(nextNode);
    return true;
}||||||||/**
 * {@inheritDoc} <br>
 * <p>
 * IMPLEMENTATION NOTES:<br>
 * Offer is allowed from multiple threads.<br>
 * Offer allocates a new node and:
 * <ol>
 * <li>Swaps it atomically with current producer node (only one producer 'wins')
 * <li>Sets the new node as the node following from the swapped producer node
 * </ol>
 * This works because each producer is guaranteed to 'plant' a new node and link the old node. No 2 producers can
 * get the same producer node as part of XCHG guarantee.
 *
 * @see MessagePassingQueue#offer(Object)
 * @see java.util.Queue#offer(java.lang.Object)
 */
@Override
public final boolean offer(final T nextValue) {
    final LinkedQueueNode<T> nextNode = new LinkedQueueNode<>(nextValue);
    final LinkedQueueNode<T> prevProducerNode = xchgProducerNode(nextNode);
    // Should a producer thread get interrupted here the chain WILL be broken until that thread is resumed
    // and completes the store in prev.next.
    // StoreStore
    prevProducerNode.soNext(nextNode);
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

