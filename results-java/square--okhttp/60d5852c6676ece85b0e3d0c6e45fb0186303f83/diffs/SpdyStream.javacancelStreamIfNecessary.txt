private void cancelStreamIfNecessary() throws IOException {
    assert (!Thread.holdsLock(SpdyStream.this));
    synchronized (this) {
        if (in.closed && !in.finished && (out.finished || out.closed)) {
            // RST this stream to prevent additional data from being sent. This is safe because
            // the input stream is closed (we won't use any further bytes) and the output stream
            // is either finished or closed (so RSTing both streams won't cause harm).
            in.finished = true;
        } else {
            // We shouldn't cancel this stream.
            return;
        }
    }
    SpdyStream.this.close(RST_CANCEL);
}||||||||private void cancelStreamIfNecessary() throws IOException {
    assert (!Thread.holdsLock(SpdyStream.this));
    synchronized (this) {
        if (!in.closed || in.finished || (!out.finished && !out.closed)) {
            // We shouldn't cancel this stream (or don't need to).
            return;
        }
    }
    // RST this stream to prevent additional data from being sent. This is safe because
    // the input stream is closed (we won't use any further bytes) and the output stream
    // is either finished or closed (so RSTing both streams doesn't cause harm).
    SpdyStream.this.close(RST_CANCEL);
}||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(EnclosedExpr
				(UnaryExpr
					(MethodCallExpr
						(ThisExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(UnaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
					)
				)
			)
			(ThisExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(ThisExpr
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(EnclosedExpr
				(UnaryExpr
					(MethodCallExpr
						(ThisExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(UnaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(UnaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							LineComment
						)
					)
				)
			)
			(ThisExpr
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(ThisExpr
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

