/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StormTopology implements org.apache.thrift7.TBase<StormTopology, StormTopology._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift7.protocol.TStruct STRUCT_DESC = new org.apache.thrift7.protocol.TStruct("StormTopology");

  private static final org.apache.thrift7.protocol.TField SPOUTS_FIELD_DESC = new org.apache.thrift7.protocol.TField("spouts", org.apache.thrift7.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift7.protocol.TField BOLTS_FIELD_DESC = new org.apache.thrift7.protocol.TField("bolts", org.apache.thrift7.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift7.protocol.TField STATE_SPOUTS_FIELD_DESC = new org.apache.thrift7.protocol.TField("state_spouts", org.apache.thrift7.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift7.protocol.TField TRANSACTIONAL_SPOUTS_FIELD_DESC = new org.apache.thrift7.protocol.TField("transactional_spouts", org.apache.thrift7.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift7.protocol.TField TRANSACTIONAL_BOLTS_FIELD_DESC = new org.apache.thrift7.protocol.TField("transactional_bolts", org.apache.thrift7.protocol.TType.MAP, (short)5);

  private Map<String,SpoutSpec> spouts; // required
  private Map<String,Bolt> bolts; // required
  private Map<String,StateSpoutSpec> state_spouts; // required
  private Map<String,TransactionalSpoutSpec> transactional_spouts; // required
  private Map<String,TransactionalBolt> transactional_bolts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift7.TFieldIdEnum {
    SPOUTS((short)1, "spouts"),
    BOLTS((short)2, "bolts"),
    STATE_SPOUTS((short)3, "state_spouts"),
    TRANSACTIONAL_SPOUTS((short)4, "transactional_spouts"),
    TRANSACTIONAL_BOLTS((short)5, "transactional_bolts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPOUTS
          return SPOUTS;
        case 2: // BOLTS
          return BOLTS;
        case 3: // STATE_SPOUTS
          return STATE_SPOUTS;
        case 4: // TRANSACTIONAL_SPOUTS
          return TRANSACTIONAL_SPOUTS;
        case 5: // TRANSACTIONAL_BOLTS
          return TRANSACTIONAL_BOLTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift7.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift7.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPOUTS, new org.apache.thrift7.meta_data.FieldMetaData("spouts", org.apache.thrift7.TFieldRequirementType.REQUIRED,
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP,
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING),
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, SpoutSpec.class))));
    tmpMap.put(_Fields.BOLTS, new org.apache.thrift7.meta_data.FieldMetaData("bolts", org.apache.thrift7.TFieldRequirementType.REQUIRED,
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP,
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING),
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, Bolt.class))));
    tmpMap.put(_Fields.STATE_SPOUTS, new org.apache.thrift7.meta_data.FieldMetaData("state_spouts", org.apache.thrift7.TFieldRequirementType.REQUIRED,
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP,
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING),
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, StateSpoutSpec.class))));
    tmpMap.put(_Fields.TRANSACTIONAL_SPOUTS, new org.apache.thrift7.meta_data.FieldMetaData("transactional_spouts", org.apache.thrift7.TFieldRequirementType.REQUIRED,
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP,
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING),
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, TransactionalSpoutSpec.class))));
    tmpMap.put(_Fields.TRANSACTIONAL_BOLTS, new org.apache.thrift7.meta_data.FieldMetaData("transactional_bolts", org.apache.thrift7.TFieldRequirementType.REQUIRED,
        new org.apache.thrift7.meta_data.MapMetaData(org.apache.thrift7.protocol.TType.MAP,
            new org.apache.thrift7.meta_data.FieldValueMetaData(org.apache.thrift7.protocol.TType.STRING),
            new org.apache.thrift7.meta_data.StructMetaData(org.apache.thrift7.protocol.TType.STRUCT, TransactionalBolt.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift7.meta_data.FieldMetaData.addStructMetaDataMap(StormTopology.class, metaDataMap);
  }

  public StormTopology() {
  }

  public StormTopology(
    Map<String,SpoutSpec> spouts,
    Map<String,Bolt> bolts,
    Map<String,StateSpoutSpec> state_spouts,
    Map<String,TransactionalSpoutSpec> transactional_spouts,
    Map<String,TransactionalBolt> transactional_bolts)
  {
    this();
    this.spouts = spouts;
    this.bolts = bolts;
    this.state_spouts = state_spouts;
    this.transactional_spouts = transactional_spouts;
    this.transactional_bolts = transactional_bolts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StormTopology(StormTopology other) {
    if (other.is_set_spouts()) {
      Map<String,SpoutSpec> __this__spouts = new HashMap<String,SpoutSpec>();
      for (Map.Entry<String, SpoutSpec> other_element : other.spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        SpoutSpec other_element_value = other_element.getValue();

        String __this__spouts_copy_key = other_element_key;

        SpoutSpec __this__spouts_copy_value = new SpoutSpec(other_element_value);

        __this__spouts.put(__this__spouts_copy_key, __this__spouts_copy_value);
      }
      this.spouts = __this__spouts;
    }
    if (other.is_set_bolts()) {
      Map<String,Bolt> __this__bolts = new HashMap<String,Bolt>();
      for (Map.Entry<String, Bolt> other_element : other.bolts.entrySet()) {

        String other_element_key = other_element.getKey();
        Bolt other_element_value = other_element.getValue();

        String __this__bolts_copy_key = other_element_key;

        Bolt __this__bolts_copy_value = new Bolt(other_element_value);

        __this__bolts.put(__this__bolts_copy_key, __this__bolts_copy_value);
      }
      this.bolts = __this__bolts;
    }
    if (other.is_set_state_spouts()) {
      Map<String,StateSpoutSpec> __this__state_spouts = new HashMap<String,StateSpoutSpec>();
      for (Map.Entry<String, StateSpoutSpec> other_element : other.state_spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        StateSpoutSpec other_element_value = other_element.getValue();

        String __this__state_spouts_copy_key = other_element_key;

        StateSpoutSpec __this__state_spouts_copy_value = new StateSpoutSpec(other_element_value);

        __this__state_spouts.put(__this__state_spouts_copy_key, __this__state_spouts_copy_value);
      }
      this.state_spouts = __this__state_spouts;
    }
    if (other.is_set_transactional_spouts()) {
      Map<String,TransactionalSpoutSpec> __this__transactional_spouts = new HashMap<String,TransactionalSpoutSpec>();
      for (Map.Entry<String, TransactionalSpoutSpec> other_element : other.transactional_spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        TransactionalSpoutSpec other_element_value = other_element.getValue();

        String __this__transactional_spouts_copy_key = other_element_key;

        TransactionalSpoutSpec __this__transactional_spouts_copy_value = new TransactionalSpoutSpec(other_element_value);

        __this__transactional_spouts.put(__this__transactional_spouts_copy_key, __this__transactional_spouts_copy_value);
      }
      this.transactional_spouts = __this__transactional_spouts;
    }
    if (other.is_set_transactional_bolts()) {
      Map<String,TransactionalBolt> __this__transactional_bolts = new HashMap<String,TransactionalBolt>();
      for (Map.Entry<String, TransactionalBolt> other_element : other.transactional_bolts.entrySet()) {

        String other_element_key = other_element.getKey();
        TransactionalBolt other_element_value = other_element.getValue();

        String __this__transactional_bolts_copy_key = other_element_key;

        TransactionalBolt __this__transactional_bolts_copy_value = new TransactionalBolt(other_element_value);

        __this__transactional_bolts.put(__this__transactional_bolts_copy_key, __this__transactional_bolts_copy_value);
      }
      this.transactional_bolts = __this__transactional_bolts;
    }
  }

  public StormTopology deepCopy() {
    return new StormTopology(this);
  }

  @Override
  public void clear() {
    this.spouts = null;
    this.bolts = null;
    this.state_spouts = null;
    this.transactional_spouts = null;
    this.transactional_bolts = null;
  }

  public int get_spouts_size() {
    return (this.spouts == null) ? 0 : this.spouts.size();
  }

  public void put_to_spouts(String key, SpoutSpec val) {
    if (this.spouts == null) {
      this.spouts = new HashMap<String,SpoutSpec>();
    }
    this.spouts.put(key, val);
  }

  public Map<String,SpoutSpec> get_spouts() {
    return this.spouts;
  }

  public void set_spouts(Map<String,SpoutSpec> spouts) {
    this.spouts = spouts;
  }

  public void unset_spouts() {
    this.spouts = null;
  }

  /** Returns true if field spouts is set (has been assigned a value) and false otherwise */
  public boolean is_set_spouts() {
    return this.spouts != null;
  }

  public void set_spouts_isSet(boolean value) {
    if (!value) {
      this.spouts = null;
    }
  }

  public int get_bolts_size() {
    return (this.bolts == null) ? 0 : this.bolts.size();
  }

  public void put_to_bolts(String key, Bolt val) {
    if (this.bolts == null) {
      this.bolts = new HashMap<String,Bolt>();
    }
    this.bolts.put(key, val);
  }

  public Map<String,Bolt> get_bolts() {
    return this.bolts;
  }

  public void set_bolts(Map<String,Bolt> bolts) {
    this.bolts = bolts;
  }

  public void unset_bolts() {
    this.bolts = null;
  }

  /** Returns true if field bolts is set (has been assigned a value) and false otherwise */
  public boolean is_set_bolts() {
    return this.bolts != null;
  }

  public void set_bolts_isSet(boolean value) {
    if (!value) {
      this.bolts = null;
    }
  }

  public int get_state_spouts_size() {
    return (this.state_spouts == null) ? 0 : this.state_spouts.size();
  }

  public void put_to_state_spouts(String key, StateSpoutSpec val) {
    if (this.state_spouts == null) {
      this.state_spouts = new HashMap<String,StateSpoutSpec>();
    }
    this.state_spouts.put(key, val);
  }

  public Map<String,StateSpoutSpec> get_state_spouts() {
    return this.state_spouts;
  }

  public void set_state_spouts(Map<String,StateSpoutSpec> state_spouts) {
    this.state_spouts = state_spouts;
  }

  public void unset_state_spouts() {
    this.state_spouts = null;
  }

  /** Returns true if field state_spouts is set (has been assigned a value) and false otherwise */
  public boolean is_set_state_spouts() {
    return this.state_spouts != null;
  }

  public void set_state_spouts_isSet(boolean value) {
    if (!value) {
      this.state_spouts = null;
    }
  }

  public int get_transactional_spouts_size() {
    return (this.transactional_spouts == null) ? 0 : this.transactional_spouts.size();
  }

  public void put_to_transactional_spouts(String key, TransactionalSpoutSpec val) {
    if (this.transactional_spouts == null) {
      this.transactional_spouts = new HashMap<String,TransactionalSpoutSpec>();
    }
    this.transactional_spouts.put(key, val);
  }

  public Map<String,TransactionalSpoutSpec> get_transactional_spouts() {
    return this.transactional_spouts;
  }

  public void set_transactional_spouts(Map<String,TransactionalSpoutSpec> transactional_spouts) {
    this.transactional_spouts = transactional_spouts;
  }

  public void unset_transactional_spouts() {
    this.transactional_spouts = null;
  }

  /** Returns true if field transactional_spouts is set (has been assigned a value) and false otherwise */
  public boolean is_set_transactional_spouts() {
    return this.transactional_spouts != null;
  }

  public void set_transactional_spouts_isSet(boolean value) {
    if (!value) {
      this.transactional_spouts = null;
    }
  }

  public int get_transactional_bolts_size() {
    return (this.transactional_bolts == null) ? 0 : this.transactional_bolts.size();
  }

  public void put_to_transactional_bolts(String key, TransactionalBolt val) {
    if (this.transactional_bolts == null) {
      this.transactional_bolts = new HashMap<String,TransactionalBolt>();
    }
    this.transactional_bolts.put(key, val);
  }

  public Map<String,TransactionalBolt> get_transactional_bolts() {
    return this.transactional_bolts;
  }

  public void set_transactional_bolts(Map<String,TransactionalBolt> transactional_bolts) {
    this.transactional_bolts = transactional_bolts;
  }

  public void unset_transactional_bolts() {
    this.transactional_bolts = null;
  }

  /** Returns true if field transactional_bolts is set (has been assigned a value) and false otherwise */
  public boolean is_set_transactional_bolts() {
    return this.transactional_bolts != null;
  }

  public void set_transactional_bolts_isSet(boolean value) {
    if (!value) {
      this.transactional_bolts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPOUTS:
      if (value == null) {
        unset_spouts();
      } else {
        set_spouts((Map<String,SpoutSpec>)value);
      }
      break;

    case BOLTS:
      if (value == null) {
        unset_bolts();
      } else {
        set_bolts((Map<String,Bolt>)value);
      }
      break;

    case STATE_SPOUTS:
      if (value == null) {
        unset_state_spouts();
      } else {
        set_state_spouts((Map<String,StateSpoutSpec>)value);
      }
      break;

    case TRANSACTIONAL_SPOUTS:
      if (value == null) {
        unset_transactional_spouts();
      } else {
        set_transactional_spouts((Map<String,TransactionalSpoutSpec>)value);
      }
      break;

    case TRANSACTIONAL_BOLTS:
      if (value == null) {
        unset_transactional_bolts();
      } else {
        set_transactional_bolts((Map<String,TransactionalBolt>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPOUTS:
      return get_spouts();

    case BOLTS:
      return get_bolts();

    case STATE_SPOUTS:
      return get_state_spouts();

    case TRANSACTIONAL_SPOUTS:
      return get_transactional_spouts();

    case TRANSACTIONAL_BOLTS:
      return get_transactional_bolts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPOUTS:
      return is_set_spouts();
    case BOLTS:
      return is_set_bolts();
    case STATE_SPOUTS:
      return is_set_state_spouts();
    case TRANSACTIONAL_SPOUTS:
      return is_set_transactional_spouts();
    case TRANSACTIONAL_BOLTS:
      return is_set_transactional_bolts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StormTopology)
      return this.equals((StormTopology)that);
    return false;
  }

  public boolean equals(StormTopology that) {
    if (that == null)
      return false;

    boolean this_present_spouts = true && this.is_set_spouts();
    boolean that_present_spouts = true && that.is_set_spouts();
    if (this_present_spouts || that_present_spouts) {
      if (!(this_present_spouts && that_present_spouts))
        return false;
      if (!this.spouts.equals(that.spouts))
        return false;
    }

    boolean this_present_bolts = true && this.is_set_bolts();
    boolean that_present_bolts = true && that.is_set_bolts();
    if (this_present_bolts || that_present_bolts) {
      if (!(this_present_bolts && that_present_bolts))
        return false;
      if (!this.bolts.equals(that.bolts))
        return false;
    }

    boolean this_present_state_spouts = true && this.is_set_state_spouts();
    boolean that_present_state_spouts = true && that.is_set_state_spouts();
    if (this_present_state_spouts || that_present_state_spouts) {
      if (!(this_present_state_spouts && that_present_state_spouts))
        return false;
      if (!this.state_spouts.equals(that.state_spouts))
        return false;
    }

    boolean this_present_transactional_spouts = true && this.is_set_transactional_spouts();
    boolean that_present_transactional_spouts = true && that.is_set_transactional_spouts();
    if (this_present_transactional_spouts || that_present_transactional_spouts) {
      if (!(this_present_transactional_spouts && that_present_transactional_spouts))
        return false;
      if (!this.transactional_spouts.equals(that.transactional_spouts))
        return false;
    }

    boolean this_present_transactional_bolts = true && this.is_set_transactional_bolts();
    boolean that_present_transactional_bolts = true && that.is_set_transactional_bolts();
    if (this_present_transactional_bolts || that_present_transactional_bolts) {
      if (!(this_present_transactional_bolts && that_present_transactional_bolts))
        return false;
      if (!this.transactional_bolts.equals(that.transactional_bolts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_spouts = true && (is_set_spouts());
    builder.append(present_spouts);
    if (present_spouts)
      builder.append(spouts);

    boolean present_bolts = true && (is_set_bolts());
    builder.append(present_bolts);
    if (present_bolts)
      builder.append(bolts);

    boolean present_state_spouts = true && (is_set_state_spouts());
    builder.append(present_state_spouts);
    if (present_state_spouts)
      builder.append(state_spouts);

    boolean present_transactional_spouts = true && (is_set_transactional_spouts());
    builder.append(present_transactional_spouts);
    if (present_transactional_spouts)
      builder.append(transactional_spouts);

    boolean present_transactional_bolts = true && (is_set_transactional_bolts());
    builder.append(present_transactional_bolts);
    if (present_transactional_bolts)
      builder.append(transactional_bolts);

    return builder.toHashCode();
  }

  public int compareTo(StormTopology other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StormTopology typedOther = (StormTopology)other;

    lastComparison = Boolean.valueOf(is_set_spouts()).compareTo(typedOther.is_set_spouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_spouts()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.spouts, typedOther.spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_bolts()).compareTo(typedOther.is_set_bolts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_bolts()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.bolts, typedOther.bolts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_state_spouts()).compareTo(typedOther.is_set_state_spouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_state_spouts()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.state_spouts, typedOther.state_spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_transactional_spouts()).compareTo(typedOther.is_set_transactional_spouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_transactional_spouts()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.transactional_spouts, typedOther.transactional_spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_transactional_bolts()).compareTo(typedOther.is_set_transactional_bolts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_transactional_bolts()) {
      lastComparison = org.apache.thrift7.TBaseHelper.compareTo(this.transactional_bolts, typedOther.transactional_bolts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {
    org.apache.thrift7.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift7.protocol.TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // SPOUTS
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map26 = iprot.readMapBegin();
              this.spouts = new HashMap<String,SpoutSpec>(2*_map26.size);
              for (int _i27 = 0; _i27 < _map26.size; ++_i27)
              {
                String _key28; // required
                SpoutSpec _val29; // required
                _key28 = iprot.readString();
                _val29 = new SpoutSpec();
                _val29.read(iprot);
                this.spouts.put(_key28, _val29);
              }
              iprot.readMapEnd();
            }
          } else {
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BOLTS
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map30 = iprot.readMapBegin();
              this.bolts = new HashMap<String,Bolt>(2*_map30.size);
              for (int _i31 = 0; _i31 < _map30.size; ++_i31)
              {
                String _key32; // required
                Bolt _val33; // required
                _key32 = iprot.readString();
                _val33 = new Bolt();
                _val33.read(iprot);
                this.bolts.put(_key32, _val33);
              }
              iprot.readMapEnd();
            }
          } else {
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STATE_SPOUTS
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map34 = iprot.readMapBegin();
              this.state_spouts = new HashMap<String,StateSpoutSpec>(2*_map34.size);
              for (int _i35 = 0; _i35 < _map34.size; ++_i35)
              {
                String _key36; // required
                StateSpoutSpec _val37; // required
                _key36 = iprot.readString();
                _val37 = new StateSpoutSpec();
                _val37.read(iprot);
                this.state_spouts.put(_key36, _val37);
              }
              iprot.readMapEnd();
            }
          } else {
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TRANSACTIONAL_SPOUTS
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map38 = iprot.readMapBegin();
              this.transactional_spouts = new HashMap<String,TransactionalSpoutSpec>(2*_map38.size);
              for (int _i39 = 0; _i39 < _map38.size; ++_i39)
              {
                String _key40; // required
                TransactionalSpoutSpec _val41; // required
                _key40 = iprot.readString();
                _val41 = new TransactionalSpoutSpec();
                _val41.read(iprot);
                this.transactional_spouts.put(_key40, _val41);
              }
              iprot.readMapEnd();
            }
          } else {
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TRANSACTIONAL_BOLTS
          if (field.type == org.apache.thrift7.protocol.TType.MAP) {
            {
              org.apache.thrift7.protocol.TMap _map42 = iprot.readMapBegin();
              this.transactional_bolts = new HashMap<String,TransactionalBolt>(2*_map42.size);
              for (int _i43 = 0; _i43 < _map42.size; ++_i43)
              {
                String _key44; // required
                TransactionalBolt _val45; // required
                _key44 = iprot.readString();
                _val45 = new TransactionalBolt();
                _val45.read(iprot);
                this.transactional_bolts.put(_key44, _val45);
              }
              iprot.readMapEnd();
            }
          } else {
            org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift7.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift7.protocol.TProtocol oprot) throws org.apache.thrift7.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.spouts != null) {
      oprot.writeFieldBegin(SPOUTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.STRUCT, this.spouts.size()));
        for (Map.Entry<String, SpoutSpec> _iter46 : this.spouts.entrySet())
        {
          oprot.writeString(_iter46.getKey());
          _iter46.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bolts != null) {
      oprot.writeFieldBegin(BOLTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.STRUCT, this.bolts.size()));
        for (Map.Entry<String, Bolt> _iter47 : this.bolts.entrySet())
        {
          oprot.writeString(_iter47.getKey());
          _iter47.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.state_spouts != null) {
      oprot.writeFieldBegin(STATE_SPOUTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.STRUCT, this.state_spouts.size()));
        for (Map.Entry<String, StateSpoutSpec> _iter48 : this.state_spouts.entrySet())
        {
          oprot.writeString(_iter48.getKey());
          _iter48.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.transactional_spouts != null) {
      oprot.writeFieldBegin(TRANSACTIONAL_SPOUTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.STRUCT, this.transactional_spouts.size()));
        for (Map.Entry<String, TransactionalSpoutSpec> _iter49 : this.transactional_spouts.entrySet())
        {
          oprot.writeString(_iter49.getKey());
          _iter49.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.transactional_bolts != null) {
      oprot.writeFieldBegin(TRANSACTIONAL_BOLTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift7.protocol.TMap(org.apache.thrift7.protocol.TType.STRING, org.apache.thrift7.protocol.TType.STRUCT, this.transactional_bolts.size()));
        for (Map.Entry<String, TransactionalBolt> _iter50 : this.transactional_bolts.entrySet())
        {
          oprot.writeString(_iter50.getKey());
          _iter50.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StormTopology(");
    boolean first = true;

    sb.append("spouts:");
    if (this.spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.spouts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bolts:");
    if (this.bolts == null) {
      sb.append("null");
    } else {
      sb.append(this.bolts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state_spouts:");
    if (this.state_spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.state_spouts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactional_spouts:");
    if (this.transactional_spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.transactional_spouts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactional_bolts:");
    if (this.transactional_bolts == null) {
      sb.append("null");
    } else {
      sb.append(this.transactional_bolts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift7.TException {
    // check for required fields
    if (!is_set_spouts()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'spouts' is unset! Struct:" + toString());
    }

    if (!is_set_bolts()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'bolts' is unset! Struct:" + toString());
    }

    if (!is_set_state_spouts()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'state_spouts' is unset! Struct:" + toString());
    }

    if (!is_set_transactional_spouts()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'transactional_spouts' is unset! Struct:" + toString());
    }

    if (!is_set_transactional_bolts()) {
      throw new org.apache.thrift7.protocol.TProtocolException("Required field 'transactional_bolts' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift7.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift7.protocol.TCompactProtocol(new org.apache.thrift7.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift7.TException te) {
      throw new java.io.IOException(te);
    }
  }

}
