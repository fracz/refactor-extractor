@Override
public boolean isExceptionFatal(SQLException e) {
    if (e instanceof SQLRecoverableException) {
        return true;
    }
    final String sqlState = e.getSQLState();
    final int errorCode = e.getErrorCode();
    if (sqlState != null && sqlState.startsWith("08")) {
        return true;
    }
    switch(errorCode) {
        // ER_CON_COUNT_ERROR
        case 1040:
        // ER_BAD_HOST_ERROR
        case 1042:
        // ER_HANDSHAKE_ERROR
        case 1043:
        // ER_UNKNOWN_COM_ERROR
        case 1047:
        // ER_IPSOCK_ERROR
        case 1081:
        // ER_HOST_IS_BLOCKED
        case 1129:
        // ER_HOST_NOT_PRIVILEGED
        case 1130:
        // ER_ACCESS_DENIED_ERROR
        case 1045:
        // ER_CANT_CREATE_FILE
        case 1004:
        // ER_CANT_CREATE_TABLE
        case 1005:
        // ER_CANT_LOCK
        case 1015:
        // ER_DISK_FULL
        case 1021:
        // ER_OUT_OF_RESOURCES
        case 1041:
        // ER_OUTOFMEMORY
        case 1037:
        // ER_OUT_OF_SORTMEMORY
        case 1038:
        // ER_TABLEACCESS_DENIED_ERROR
        case 1142:
        case // ER_SPECIFIC_ACCESS_DENIED_ERROR
        1227:
            return true;
        default:
            break;
    }
    // for oceanbase
    if (errorCode >= -10000 && errorCode <= -9000) {
        return true;
    }
    String className = e.getClass().getName();
    if (className.endsWith(".CommunicationsException")) {
        return true;
    }
    String message = e.getMessage();
    if (message != null && message.length() > 0) {
        if (message.startsWith("Streaming result set com.mysql.jdbc.RowDataDynamic") && message.endsWith("is still active. No statements may be issued when any streaming result sets are open and in use on a given connection. Ensure that you have called .close() on any active streaming result sets before attempting more queries.")) {
            return true;
        }
        final String errorText = message.toUpperCase();
        if ((// 
        errorCode == 0 && (errorText.contains("COMMUNICATIONS LINK FAILURE")) || // 
        errorText.contains("COULD NOT CREATE CONNECTION")) || // 
        errorText.contains("NO DATASOURCE") || errorText.contains("NO ALIVE DATASOURCE")) {
            return true;
        }
    }
    Throwable cause = e.getCause();
    for (int i = 0; i < 5 && cause != null; ++i) {
        if (cause instanceof SocketTimeoutException || cause instanceof IOException) {
            return true;
        }
        className = cause.getClass().getName();
        if (className.endsWith(".CommunicationsException")) {
            return true;
        }
        cause = cause.getCause();
    }
    return false;
}||||||||@Override
public boolean isExceptionFatal(SQLException e) {
    if (e instanceof SQLRecoverableException) {
        return true;
    }
    final String sqlState = e.getSQLState();
    final int errorCode = e.getErrorCode();
    if (sqlState != null && sqlState.startsWith("08")) {
        return true;
    }
    switch(errorCode) {
        // ER_CON_COUNT_ERROR
        case 1040:
        // ER_BAD_HOST_ERROR
        case 1042:
        // ER_HANDSHAKE_ERROR
        case 1043:
        // ER_UNKNOWN_COM_ERROR
        case 1047:
        // ER_IPSOCK_ERROR
        case 1081:
        // ER_HOST_IS_BLOCKED
        case 1129:
        // ER_HOST_NOT_PRIVILEGED
        case 1130:
        // ER_ACCESS_DENIED_ERROR
        case 1045:
        // ER_CANT_CREATE_FILE
        case 1004:
        // ER_CANT_CREATE_TABLE
        case 1005:
        // ER_CANT_LOCK
        case 1015:
        // ER_DISK_FULL
        case 1021:
        // ER_OUT_OF_RESOURCES
        case 1041:
        // ER_OUTOFMEMORY
        case 1037:
        // ER_OUT_OF_SORTMEMORY
        case 1038:
        // ER_TABLEACCESS_DENIED_ERROR
        case 1142:
        case // ER_SPECIFIC_ACCESS_DENIED_ERROR
        1227:
            return true;
        default:
            break;
    }
    // for oceanbase
    if (errorCode >= -10000 && errorCode <= -9000) {
        return true;
    }
    String className = e.getClass().getName();
    if (className.endsWith(".CommunicationsException")) {
        return true;
    }
    String message = e.getMessage();
    if (message != null && message.length() > 0) {
        if (message.startsWith("Streaming result set com.mysql.jdbc.RowDataDynamic") && message.endsWith("is still active. No statements may be issued when any streaming result sets are open and in use on a given connection. Ensure that you have called .close() on any active streaming result sets before attempting more queries.")) {
            return true;
        }
        final String errorText = message.toUpperCase();
        if ((// 
        errorCode == 0 && (errorText.contains("COMMUNICATIONS LINK FAILURE")) || // 
        errorText.contains("COULD NOT CREATE CONNECTION")) || // 
        errorText.contains("NO DATASOURCE") || errorText.contains("NO ALIVE DATASOURCE")) {
            return true;
        }
    }
    Throwable cause = e.getCause();
    for (int i = 0; i < 5 && cause != null; ++i) {
        if (cause instanceof SocketTimeoutException) {
            return true;
        }
        className = cause.getClass().getName();
        if (className.endsWith(".CommunicationsException")) {
            return true;
        }
        cause = cause.getCause();
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
					LineComment
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(BreakStmt
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(EnclosedExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										LineComment
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
										LineComment
									)
								)
							)
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
								LineComment
							)
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				LineComment
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
					LineComment
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(BreakStmt
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(EnclosedExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										LineComment
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
										LineComment
									)
								)
							)
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
								LineComment
							)
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

