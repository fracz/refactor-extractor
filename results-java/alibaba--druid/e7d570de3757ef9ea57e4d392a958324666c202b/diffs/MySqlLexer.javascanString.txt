protected final void scanString() {
    mark = pos;
    boolean hasSpecial = false;
    for (; ; ) {
        if (isEOF()) {
            lexError("unclosed.str.lit");
            return;
        }
        ch = charAt(++pos);
        if (ch == '\\') {
            scanChar();
            if (!hasSpecial) {
                initBuff(bufPos);
                arraycopy(mark + 1, buf, 0, bufPos);
                hasSpecial = true;
            }
            switch(ch) {
                case '\0':
                    putChar('\0');
                    break;
                case '\'':
                    putChar('\'');
                    break;
                case '"':
                    putChar('"');
                    break;
                case 'b':
                    putChar('\b');
                    break;
                case 'n':
                    putChar('\n');
                    break;
                case 'r':
                    putChar('\r');
                    break;
                case 't':
                    putChar('\t');
                    break;
                case '\\':
                    putChar('\\');
                    break;
                case 'Z':
                    // ctrl + Z
                    putChar((char) 0x1A);
                    break;
                default:
                    putChar(ch);
                    break;
            }
            scanChar();
        }
        if (ch == '\'') {
            scanChar();
            if (ch != '\'') {
                token = LITERAL_CHARS;
                break;
            } else {
                initBuff(bufPos);
                arraycopy(mark + 1, buf, 0, bufPos);
                hasSpecial = true;
                putChar('\'');
                continue;
            }
        }
        if (!hasSpecial) {
            bufPos++;
            continue;
        }
        if (bufPos == buf.length) {
            putChar(ch);
        } else {
            buf[bufPos++] = ch;
        }
    }
    if (!hasSpecial) {
        stringVal = subString(mark + 1, bufPos);
    } else {
        stringVal = new String(buf, 0, bufPos);
    }
}||||||||protected final void scanString() {
    {
        boolean hasSpecial = false;
        int startIndex = pos + 1;
        int endIndex = indexOf('\'', startIndex);
        if (endIndex == -1) {
            throw new ParserException("unclosed str");
        }
        String stringVal = subString(startIndex, endIndex - startIndex);
        for (int i = 0; i < stringVal.length(); ++i) {
            char ch = stringVal.charAt(i);
            if (ch == '\\') {
                hasSpecial = true;
                break;
            }
        }
        if (!hasSpecial) {
            this.stringVal = stringVal;
            int pos = endIndex + 1;
            char ch = charAt(pos);
            if (ch != '\'') {
                this.pos = pos;
                this.ch = ch;
                token = LITERAL_CHARS;
                return;
            }
        }
    }
    mark = pos;
    boolean hasSpecial = false;
    for (; ; ) {
        if (isEOF()) {
            lexError("unclosed.str.lit");
            return;
        }
        ch = charAt(++pos);
        if (ch == '\\') {
            scanChar();
            if (!hasSpecial) {
                initBuff(bufPos);
                arraycopy(mark + 1, buf, 0, bufPos);
                hasSpecial = true;
            }
            switch(ch) {
                case '\0':
                    putChar('\0');
                    break;
                case '\'':
                    putChar('\'');
                    break;
                case '"':
                    putChar('"');
                    break;
                case 'b':
                    putChar('\b');
                    break;
                case 'n':
                    putChar('\n');
                    break;
                case 'r':
                    putChar('\r');
                    break;
                case 't':
                    putChar('\t');
                    break;
                case '\\':
                    putChar('\\');
                    break;
                case 'Z':
                    // ctrl + Z
                    putChar((char) 0x1A);
                    break;
                default:
                    putChar(ch);
                    break;
            }
            scanChar();
        }
        if (ch == '\'') {
            scanChar();
            if (ch != '\'') {
                token = LITERAL_CHARS;
                break;
            } else {
                initBuff(bufPos);
                arraycopy(mark + 1, buf, 0, bufPos);
                hasSpecial = true;
                putChar('\'');
                continue;
            }
        }
        if (!hasSpecial) {
            bufPos++;
            continue;
        }
        if (bufPos == buf.length) {
            putChar(ch);
        } else {
            buf[bufPos++] = ch;
        }
    }
    if (!hasSpecial) {
        stringVal = "";
        stringVal = subString(mark + 1, bufPos);
    } else {
        stringVal = new String(buf, 0, bufPos);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(UnaryExpr
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CastExpr
											(IntegerLiteralExpr
											)
											(PrimitiveType
											)
										)
										SimpleName
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(ContinueStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(BooleanLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
			)
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
			)
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							(CharLiteralExpr
							)
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
				)
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ForStmt
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(CharLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(BreakStmt
							)
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(CharLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(UnaryExpr
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(SwitchStmt
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(CharLiteralExpr
								)
								(ExpressionStmt
									(MethodCallExpr
										(CastExpr
											(IntegerLiteralExpr
											)
											(PrimitiveType
											)
										)
										SimpleName
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							NameExpr
								SimpleName
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
									)
								)
								(ContinueStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)

