public void test_0() throws Exception {
    String sql = // 
    "merge into (select * from T09_RULE_CAL_COUNT where data_dt = '20160328' and rule_type = '2') t " + "using (" + // 
    "     select cust_no,organ_key " + "     from (select t1.cust_no, t1.organ_key from t08_cust_result_c_mid t1 " + "         union " + "         (select t2.cust_no, t2.organ_key from t08_cust_result_i_mid t2)" + "     )" + ") t3 on(t3.cust_no =t.cust_no) when matched then update set t.organ_key=t3.organ_key";
    SQLStatementParser parser = new OracleStatementParser(sql);
    List<SQLStatement> stmtList = parser.parseStatementList();
    SQLMergeStatement mergeStatement = (SQLMergeStatement) stmtList.get(0);
    String result = SQLUtils.toOracleString(mergeStatement);
    Assert.assertEquals("MERGE INTO (SELECT *" + "\n\tFROM T09_RULE_CAL_COUNT" + "\n\tWHERE data_dt = '20160328'" + "\n\t\tAND rule_type = '2'" + "\n\t) t" + "\nUSING (" + "\n\tSELECT cust_no, organ_key" + "\n\tFROM (" + "\n\t\tSELECT t1.cust_no, t1.organ_key" + "\n\t\tFROM t08_cust_result_c_mid t1" + "\n\t\tUNION" + "\n\t\tSELECT t2.cust_no, t2.organ_key" + "\n\t\tFROM t08_cust_result_i_mid t2" + "\n\t)" + "\n) t3 ON (t3.cust_no = t.cust_no) " + "\nWHEN MATCHED THEN UPDATE SET t.organ_key = t3.organ_key", result);
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "salary")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "department_id")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("bonuses", "employee_id")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("bonuses", "bonus")));
}||||||||public void test_0() throws Exception {
    String sql = // 
    "merge into (select * from T09_RULE_CAL_COUNT where data_dt = '20160328' and rule_type = '2') t " + "using (" + // 
    "     select cust_no,organ_key " + "     from (select t1.cust_no, t1.organ_key from t08_cust_result_c_mid t1 " + "         union " + "         (select t2.cust_no, t2.organ_key from t08_cust_result_i_mid t2)" + "     )" + ") t3 on(t3.cust_no =t.cust_no) when matched then update set t.organ_key=t3.organ_key";
    SQLStatementParser parser = new OracleStatementParser(sql);
    List<SQLStatement> stmtList = parser.parseStatementList();
    SQLMergeStatement mergeStatement = (SQLMergeStatement) stmtList.get(0);
    String result = SQLUtils.toOracleString(mergeStatement);
    Assert.assertEquals("MERGE INTO (\n" + "\tSELECT *\n" + "\tFROM T09_RULE_CAL_COUNT\n" + "\tWHERE data_dt = '20160328'\n" + "\t\tAND rule_type = '2'\n" + ") t\n" + "USING (\n" + "\tSELECT cust_no, organ_key\n" + "\tFROM (\n" + "\t\tSELECT t1.cust_no, t1.organ_key\n" + "\t\tFROM t08_cust_result_c_mid t1\n" + "\t\tUNION\n" + "\t\tSELECT t2.cust_no, t2.organ_key\n" + "\t\tFROM t08_cust_result_i_mid t2\n" + "\t)\n" + ") t3 ON (t3.cust_no = t.cust_no) \n" + "WHEN MATCHED THEN UPDATE SET t.organ_key = t3.organ_key", result);
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "salary")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "department_id")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("bonuses", "employee_id")));
// Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("bonuses", "bonus")));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
													LineComment
												StringLiteralExpr
											)
											StringLiteralExpr
												LineComment
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			StringLiteralExpr
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
													LineComment
												StringLiteralExpr
											)
											StringLiteralExpr
												LineComment
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				StringLiteralExpr
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

