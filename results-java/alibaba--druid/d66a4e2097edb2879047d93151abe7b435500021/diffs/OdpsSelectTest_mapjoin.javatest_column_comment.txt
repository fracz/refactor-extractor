public void test_column_comment() throws Exception {
    String sql = " select /* + mapjoin(a) */" + "\na.shop_name," + "\nb.customer_id," + "\nb.total_price" + "\nfrom shop a join sale_detail b" + "\non a.shop_name = b.shop_name and b.ds = '20150101';";
    Assert.assertEquals("SELECT /*+ mapjoin(a) */ a.shop_name" + "\n\t, b.customer_id" + "\n\t, b.total_price" + "\nFROM shop a" + "\nJOIN sale_detail b" + "\nON a.shop_name = b.shop_name" + "\n\tAND b.ds = '20150101';", SQLUtils.formatOdps(sql));
}||||||||public void test_column_comment() throws Exception {
    String sql = " select /* + mapjoin(a) */" + "\na.shop_name," + "\nb.customer_id," + "\nb.total_price" + "\nfrom shop a join sale_detail b" + "\non a.shop_name = b.shop_name and b.ds = '20150101';";
    Assert.assertEquals("SELECT /*+ mapjoin(a) */ a.shop_name, b.customer_id, b.total_price\n" + "FROM shop a\n" + "JOIN sale_detail b\n" + "ON a.shop_name = b.shop_name\n" + "\tAND b.ds = '20150101';", SQLUtils.formatOdps(sql));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

