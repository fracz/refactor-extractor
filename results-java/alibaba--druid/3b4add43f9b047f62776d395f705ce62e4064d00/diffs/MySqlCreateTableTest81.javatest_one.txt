public void test_one() throws Exception {
    String sql = "CREATE TABLE `admin` (\n" + "  `id` char(20) NOT NULL,\n" + "  `username` varchar(16) NOT NULL COMMENT '用户名',\n" + "  `password` varchar(32) NOT NULL COMMENT '密码',\n" + "  `permission` varchar(255) NOT NULL DEFAULT '' COMMENT '权限',\n" + "  PRIMARY KEY (`id`) USING BTREE\n" + ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='管理员';";
    MySqlStatementParser parser = new MySqlStatementParser(sql);
    SQLStatement stmt = parser.parseCreateTable();
    MySqlSchemaStatVisitor visitor = new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    // 
    // Column column = visitor.getColumn("tb_custom_vip_show_message", "custom_vip_show_message_seq");
    // assertNotNull(column);
    // assertEquals("INT", column.getDataType());
    {
        String output = SQLUtils.toMySqlString(stmt);
        assertEquals("CREATE TABLE `admin` (\n" + "\t`id` char(20) NOT NULL,\n" + "\t`username` varchar(16) NOT NULL COMMENT '用户名',\n" + "\t`password` varchar(32) NOT NULL COMMENT '密码',\n" + "\t`permission` varchar(255) NOT NULL DEFAULT '' COMMENT '权限',\n" + "\tPRIMARY KEY USING BTREE (`id`)\n" + ") ENGINE = InnoDB CHARSET = utf8 COMMENT '管理员'", output);
    }
    {
        String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
        assertEquals("create table `admin` (\n" + "\t`id` char(20) not null,\n" + "\t`username` varchar(16) not null comment '用户名',\n" + "\t`password` varchar(32) not null comment '密码',\n" + "\t`permission` varchar(255) not null default '' comment '权限',\n" + "\tprimary key using BTREE (`id`)\n" + ") engine = InnoDB charset = utf8 comment '管理员'", output);
    }
}||||||||public void test_one() throws Exception {
    String sql = "CREATE TABLE `admin` (\n" + "  `id` char(20) NOT NULL,\n" + "  `username` varchar(16) NOT NULL COMMENT '用户名',\n" + "  `password` varchar(32) NOT NULL COMMENT '密码',\n" + "  `permission` varchar(255) NOT NULL DEFAULT '' COMMENT '权限',\n" + "  PRIMARY KEY (`id`) USING BTREE\n" + ") ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='管理员';";
    MySqlStatementParser parser = new MySqlStatementParser(sql);
    SQLStatement stmt = parser.parseCreateTable();
    MySqlSchemaStatVisitor visitor = new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    // 
    // Column column = visitor.getColumn("tb_custom_vip_show_message", "custom_vip_show_message_seq");
    // assertNotNull(column);
    // assertEquals("INT", column.getDataType());
    System.out.println(stmt);
    {
        String output = SQLUtils.toMySqlString(stmt);
        assertEquals("CREATE TABLE `admin` (\n" + "\t`id` char(20) NOT NULL,\n" + "\t`username` varchar(16) NOT NULL COMMENT '用户名',\n" + "\t`password` varchar(32) NOT NULL COMMENT '密码',\n" + "\t`permission` varchar(255) NOT NULL DEFAULT '' COMMENT '权限',\n" + "\tPRIMARY KEY USING BTREE (`id`)\n" + ") ENGINE = InnoDB CHARSET = utf8 COMMENT '管理员'", output);
    }
    {
        String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
        assertEquals("create table `admin` (\n" + "\t`id` char(20) not null,\n" + "\t`username` varchar(16) not null comment '用户名',\n" + "\t`password` varchar(32) not null comment '密码',\n" + "\t`permission` varchar(255) not null default '' comment '权限',\n" + "\tprimary key using BTREE (`id`)\n" + ") engine = InnoDB charset = utf8 comment '管理员'", output);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

