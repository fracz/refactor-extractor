@Override
public void open() {
    InterpreterGroup interpreterGroup = getInterpreterGroup();
    synchronized (interpreterGroup) {
        // initialize all interpreters in this interpreter group
        List<Interpreter> interpreters = interpreterGroup.get(sessionKey);
        // TODO(jl): this open method is called by LazyOpenInterpreter.open(). It, however,
        // initializes all of interpreters with same sessionKey. But LazyOpenInterpreter assumes if it
        // doesn't call open method, it's not open. It causes problem while running intp.close()
        // In case of Spark, this method initializes all of interpreters and init() method increases
        // reference count of RemoteInterpreterProcess. But while closing this interpreter group, all
        // other interpreters doesn't do anything because those LazyInterpreters aren't open.
        // But for now, we have to initialise all of interpreters for some reasons.
        // See Interpreter.getInterpreterInTheSameSessionByClassName(String)
        RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();
        if (!initialized) {
            // reference per session
            interpreterProcess.reference(interpreterGroup, userName, isUserImpersonate);
        }
        for (Interpreter intp : new ArrayList<>(interpreters)) {
            Interpreter p = intp;
            while (p instanceof WrappedInterpreter) {
                p = ((WrappedInterpreter) p).getInnerInterpreter();
            }
            try {
                ((RemoteInterpreter) p).init();
            } catch (InterpreterException e) {
                logger.error("Failed to initialize interpreter: {}. Remove it from interpreterGroup", p.getClassName());
                interpreters.remove(p);
            }
        }
    }
}||||||||@Override
public void open() {
    synchronized (this) {
        if (!isOpened) {
            // also see method Interpreter.getInterpreterInTheSameSessionByClassName
            for (Interpreter interpreter : getInterpreterGroup().getOrCreateSession(userName, sessionId)) {
                ((RemoteInterpreter) interpreter).internal_create();
            }
            interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {

                @Override
                public Void call(Client client) throws Exception {
                    LOGGER.info("Open RemoteInterpreter {}", getClassName());
                    // Push angular object loaded from JSON file to remote interpreter
                    synchronized (getInterpreterGroup()) {
                        if (!getInterpreterGroup().isAngularRegistryPushed()) {
                            pushAngularObjectRegistryToRemote(client);
                            getInterpreterGroup().setAngularRegistryPushed(true);
                        }
                    }
                    return null;
                }
            });
            isOpened = true;
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(EnclosedExpr
												(CastExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
								)
							)
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(EnclosedExpr
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(EnclosedExpr
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(SynchronizedStmt
												(BlockStmt
													(IfStmt
														(UnaryExpr
															(MethodCallExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	(BooleanLiteralExpr
																	)
																	SimpleName
																	(MethodCallExpr
																		SimpleName
																	)
																)
															)
														)
													)
												)
												(MethodCallExpr
													SimpleName
												)
												LineComment
											)
											(ReturnStmt
												NullLiteralExpr
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
										SimpleName
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
			(ThisExpr
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

