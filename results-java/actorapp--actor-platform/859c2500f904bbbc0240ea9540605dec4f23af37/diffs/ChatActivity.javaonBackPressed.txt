// Back button handling
@Override
public void onBackPressed() {
    if (isAutocompleteVisible) {
        hideMentions();
    } else if (isShareVisible) {
        hideShare();
    } else if (emojiKeyboard.isShowing()) {
        emojiKeyboard.dismiss();
    } else {
        super.onBackPressed();
    }
}||||||||// public void insertMention(int uid) {
// UserVM user = users().get(uid);
// String name = user.getName().get();
// String nick = user.getNick().get();
// Editable text = messageEditText.getText();
// if (text.length() > 0 && text.charAt(text.length() - 1) != ' ') text.append(" ");
// 
// String mentionString = ((nick != null && !nick.isEmpty()) ? "@" + nick : name) + (messageEditText.getText().length() > 0 ? " " : ": ");
// 
// text.append(mentionString);
// messageEditText.requestFocus();
// keyboardUtils.setImeVisibility(messageEditText, true);
// }
// Back button handling
// @Override
// public void onBackPressed() {
// if (isAutocompleteVisible) {
// hideMentions();
// //        } else if (isShareVisible) {
// //            hideShare();
// //        } else if (emojiKeyboard.isShowing()) {
// //            emojiKeyboard.dismiss();
// } else {
// super.onBackPressed();
// }
// }
@Override
public void onBackPressed() {
    Fragment fragment = getSupportFragmentManager().findFragmentById(R.id.chatFragment);
    if (fragment instanceof ChatFragment) {
        if (!((ChatFragment) fragment).onBackPressed()) {
            super.onBackPressed();
        }
    } else {
        super.onBackPressed();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				NameExpr
					SimpleName
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(SuperExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(SuperExpr
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(EnclosedExpr
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(SuperExpr
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

