@Override
protected void onDestroy() {
    super.onDestroy();
    if (autocompleteAdapter != null) {
        autocompleteAdapter.dispose();
    }
    if (fastShareAdapter != null) {
        fastShareAdapter.release();
        fastShareAdapter = null;
    }
}||||||||// private class TextWatcherImp implements TextWatcher {
// 
// 
// @Override
// public void onTextChanged(CharSequence s, int start, int before, int count) {
// String str = s.toString();
// String firstPeace = str.substring(0, start + count);
// 
// int startSelection = messageEditText.getSelectionStart();
// 
// String currentWord = "";
// int length = 0;
// 
// for (String word : str.split(" ")) {
// length = length + word.length() + 1;
// if (length > startSelection) {
// currentWord = word;
// break;
// }
// }
// 
// currentWord = currentWord.isEmpty() ? str : currentWord;
// 
// char autocompleteTriggerChar = '@';
// String autocompleteTriggerString = "@";
// 
// 
// if (peer.getPeerType() == PeerType.GROUP || isBot) {
// 
// if (isBot) {
// autocompleteTriggerChar = '/';
// autocompleteTriggerString = "/";
// }
// //Open mentions
// if (count == 1 && s.charAt(start) == autocompleteTriggerChar && !str.endsWith(" ")) {
// showAutoComplete(false, !isBot);
// autocompleteString = "";
// 
// } else if (currentWord.startsWith(autocompleteTriggerString) && !str.endsWith(" ")) {
// showAutoComplete(true, !isBot);
// } else {
// hideMentions();
// }
// 
// //Set mentions query
// autocompleteTriggerStart = firstPeace.lastIndexOf(autocompleteTriggerString);
// if (currentWord.startsWith(autocompleteTriggerString) && currentWord.length() > 1) {
// autocompleteString = currentWord.substring(1, currentWord.length());
// } else {
// autocompleteString = "";
// }
// 
// if (autocompleteString.equals(" ")) {
// hideMentions();
// } else if (autocompleteAdapter != null) {
// //mentionsDisplay.initSearch(autocompleteString, false);
// if (autocompleteAdapter instanceof MentionsAdapter) {
// ((MentionsAdapter) autocompleteAdapter).setQuery(autocompleteString.toLowerCase());
// } else if (autocompleteAdapter instanceof CommandsAdapter) {
// ((CommandsAdapter) autocompleteAdapter).setQuery(autocompleteString.toLowerCase());
// }
// }
// }
// }
// }
@Override
protected void onDestroy() {
    super.onDestroy();
    if (autocompleteAdapter != null) {
        autocompleteAdapter.dispose();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

