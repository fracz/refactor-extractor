public final Observable<Void> tfaChallenge() {
    return loginError.filter(ErrorEnvelope::isTfaRequiredError).map(__ -> null);
}||||||||@Override
public Observable<LoginReason> tfaChallenge() {
    return loginReason.compose(Transformers.takeWhen(loginError.filter(ErrorEnvelope::isTfaRequiredError)));
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(LambdaExpr
					(ExpressionStmt
						NullLiteralExpr
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
				(MethodCallExpr
					(MethodReferenceExpr
						(TypeExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					(MethodCallExpr
						(MethodReferenceExpr
							(TypeExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

