@Test
public void testToString() {
    Assert.assertTrue(invoke("toString") instanceof EvalError);
    Assert.assertTrue(invoke("toString", (Object) null) instanceof EvalError);
    Assert.assertEquals(invoke("toString", Double.valueOf(100.0)), "100.0");
// Calendar
// Date
// Date&Calendar with 2nd parameter with format
}||||||||@Test
public void testToString() throws CalendarParserException {
    Assert.assertTrue(invoke("toString") instanceof EvalError);
    Assert.assertEquals(invoke("toString", (Object) null), "null");
    Assert.assertEquals(invoke("toString", Long.valueOf(100)), "100");
    Assert.assertEquals(invoke("toString", Double.valueOf(100.0)), "100.0");
    Assert.assertEquals(invoke("toString", Double.valueOf(100.0), "%.0f"), "100");
    Assert.assertEquals(invoke("toString", CalendarParser.parse("2013-06-01")), "Jun 1, 2013");
    Assert.assertEquals(invoke("toString", CalendarParser.parse("2013-06-01").getTime()), "Jun 1, 2013");
    Assert.assertEquals(invoke("toString", CalendarParser.parse("2013-06-01"), "Y"), "2013");
    Assert.assertEquals(invoke("toString", CalendarParser.parse("2013-06-01"), "YYYY-MM-dd"), "2013-06-01");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(InstanceOfExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(InstanceOfExpr
					(MethodCallExpr
						StringLiteralExpr
						(CastExpr
							NullLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						(DoubleLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(InstanceOfExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(CastExpr
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						(DoubleLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						(DoubleLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

