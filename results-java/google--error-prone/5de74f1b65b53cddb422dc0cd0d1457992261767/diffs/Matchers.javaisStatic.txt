public static Matcher<Tree> isStatic() {
    return new IsStatic();
}||||||||/**
 * Matches an AST node that is static.
 */
public static <T extends Tree> Matcher<T> isStatic() {
    return new Matcher<T>() {

        @Override
        public boolean matches(Tree tree, VisitorState state) {
            Symbol sym = ASTHelpers.getSymbol(tree);
            return sym != null && sym.isStatic();
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

