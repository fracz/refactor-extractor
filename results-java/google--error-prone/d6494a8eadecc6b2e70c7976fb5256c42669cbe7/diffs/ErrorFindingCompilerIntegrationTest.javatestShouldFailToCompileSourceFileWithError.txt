@Test
public void testShouldFailToCompileSourceFileWithError() throws Exception {
    ErrorFindingCompiler compiler = new ErrorFindingCompiler.Builder().named("test").redirectOutputTo(printWriter).listenToDiagnostics(diagnostics).build();
    String[] sources = sources("com/google/errorprone/checkers/empty_if_statement/PositiveCases.java");
    // TODO(eaftan): Running test with the annotation processor compiler enabled causes
    // the wrong copy of JavaCompiler to be used.  We should probably switch Maven to
    // having an explicit docgen phase that calls the annotation processor with proc:only,
    // then not have the annotation processor on the compile classpath.
    String[] args = new String[sources.length + 1];
    System.arraycopy(sources, 0, args, 0, sources.length);
    args[sources.length] = new String("-proc:none");
    assertThat(compiler.compile(args), is(1));
    Matcher<Iterable<? super Diagnostic<JavaFileObject>>> matcher = hasItem(allOf(diagnosticLineAndColumn(41L, 5L), diagnosticMessage(containsString("empty statement after if"))));
    assertThat("Warning should be found. Diagnostics: " + diagnostics.getDiagnostics(), diagnostics.getDiagnostics(), matcher);
}||||||||@Test
public void testShouldFailToCompileSourceFileWithError() throws Exception {
    ErrorFindingCompiler compiler = new ErrorFindingCompiler.Builder().named("test").redirectOutputTo(printWriter).listenToDiagnostics(diagnostics).build();
    String[] sources = sources("com/google/errorprone/checkers/empty_if_statement/PositiveCases.java");
    // TODO(eaftan): Running test with the annotation processor compiler enabled causes
    // the wrong copy of JavaCompiler to be used.  We should probably switch Maven to
    // having an explicit docgen phase that calls the annotation processor with proc:only,
    // then not have the annotation processor on the compile classpath.
    String[] args = new String[sources.length + 1];
    System.arraycopy(sources, 0, args, 0, sources.length);
    args[sources.length] = new String("-proc:none");
    int exitCode = compiler.compile(args);
    outputStream.flush();
    assertThat(outputStream.toString(), exitCode, is(1));
    Matcher<Iterable<? super Diagnostic<JavaFileObject>>> matcher = hasItem(allOf(diagnosticLineAndColumn(41L, 5L), diagnosticMessage(containsString("empty statement after if"))));
    assertThat("Warning should be found. Diagnostics: " + diagnostics.getDiagnostics(), diagnostics.getDiagnostics(), matcher);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								(LongLiteralExpr
								)
								(LongLiteralExpr
								)
								SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
								)
								SimpleName
							)
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								(LongLiteralExpr
								)
								(LongLiteralExpr
								)
								SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
								)
								SimpleName
							)
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

