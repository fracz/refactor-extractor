@Test
public void inLoopShouldNotMatchInAnonymousInnerClassDefinedInLoop() {
    CompilationTestHelper compilationHelper = CompilationTestHelper.newInstance(inLoopChecker(), getClass());
    compilationHelper.addSourceLines("Test.java", "import java.util.*;", "public class Test {", "  public void sort(List<List<String>> stringLists) {", "    for (List<String> stringList : stringLists) {", "      Collections.sort(stringList, new Comparator<String>() {", "          {", "            System.out.println();", "          }", "          public int compare(String s1, String s2) {", "            return 0;", "          }", "          public boolean equals(Object obj) {", "            return false;", "          }", "      });", "    }", "  }", "}").doTest();
}||||||||@Test
public void inLoopShouldNotMatchInAnonymousInnerClassDefinedInLoop() {
    CompilationTestHelper compilationHelper = CompilationTestHelper.newInstance(new InLoopChecker(), getClass());
    compilationHelper.addSourceLines("Test.java", "import java.util.*;", "public class Test {", "  public void sort(List<List<String>> stringLists) {", "    for (List<String> stringList : stringLists) {", "      Collections.sort(stringList, new Comparator<String>() {", "          {", "            System.out.println();", "          }", "          public int compare(String s1, String s2) {", "            return 0;", "          }", "          public boolean equals(Object obj) {", "            return false;", "          }", "      });", "    }", "  }", "}").doTest();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

