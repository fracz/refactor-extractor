/**
 * We suggest different fixes depending on what follows the if statement.
 * If there is no statement following the if, then suggest deleting the
 * whole if statement. If the next statement is a block, then suggest
 * deleting the empty then part of the if.  If the next statement is not a
 * block, then also suggest deleting the empty then part of the if.
 *
 * TODO(eaftan): In the case where there is a non-block statement following
 * the if, it's actually unclear what the right fix is. Typically the
 * correct fix is going to be to create a block containing 1 or more of the
 * following statements, but it requires inspection of the code to determine
 * how many statements should be in that block (i.e, should be executed
 * conditionally).  On the other hand, the semantics-preserving fix would
 * be to just delete the whole if statement.
 */
@Override
public com.google.errorprone.checkers.ErrorChecker.AstError produceError(IfTree tree, VisitorState state) {
    boolean nextStmtIsNull = nextStatement(isNull(StatementTree.class)).matches(tree, state);
    boolean nextStmtIsBlock = false;
    if (!nextStmtIsNull) {
        nextStmtIsBlock = nextStatement(kindIs(BLOCK, StatementTree.class)).matches(tree, state);
    }
    if (nextStmtIsNull) {
        // No following statements. Delete whole if.
        return new AstError(tree, "empty statement after if", SuggestedFix.delete(getPosition(tree)));
    } else if (nextStmtIsBlock) {
        // Following statement is a block. Delete the empty then part of the if.
        return new AstError(tree, "empty statement after if", SuggestedFix.delete(getPosition(tree.getThenStatement())));
    } else {
        // Following statement is not a block. Delete the empty then part of the if.
        return new AstError(tree, "empty statement after if", SuggestedFix.delete(getPosition(tree.getThenStatement())));
    }
}||||||||/**
 * We suggest different fixes depending on what follows the parent if statement.
 * If there is no statement following the if, then suggest deleting the whole
 * if statement. If the next statement is a block, then suggest deleting the
 * empty then part of the if.  If the next statement is not a block, then also
 * suggest deleting the empty then part of the if.
 */
@Override
public com.google.errorprone.checkers.ErrorChecker.AstError produceError(EmptyStatementTree tree, VisitorState state) {
    boolean nextStmtIsNull = parentNode(nextStatement(isNull(StatementTree.class))).matches(tree, state);
    boolean nextStmtIsBlock = false;
    if (!nextStmtIsNull) {
        nextStmtIsBlock = parentNode(nextStatement(kindIs(BLOCK, StatementTree.class))).matches(tree, state);
    }
    assert (state.getPath().getParentPath().getLeaf().getKind() == IF);
    IfTree parent = (IfTree) state.getPath().getParentPath().getLeaf();
    if (nextStmtIsNull) {
        // No following statements. Delete whole if.
        return new AstError(parent, "empty statement after if", SuggestedFix.delete(getPosition(parent)));
    } else if (nextStmtIsBlock) {
        // Following statement is a block. Delete the empty then part of the if.
        return new AstError(parent, "empty statement after if", SuggestedFix.delete(getPosition(parent.getThenStatement())));
    } else {
        // Following statement is not a block. Delete the empty then part of the if.
        return new AstError(parent, "empty statement after if", SuggestedFix.delete(getPosition(parent.getThenStatement())));
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
								)
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				NameExpr
					SimpleName
				(BlockStmt
					(ReturnStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(ReturnStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
								)
								SimpleName
							)
							SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
									)
									SimpleName
								)
								SimpleName
							)
						)
					)
				)
			)
		)
		(AssertStmt
			(EnclosedExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				NameExpr
					SimpleName
				(BlockStmt
					(ReturnStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(ReturnStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

