@Test
public void testOtherClass_bad_staticLock() throws Exception {
    compilationHelper.assertCompileFailsWithMessages(compilationHelper.fileManager().forSourceLines("threadsafety/Test.java", "package threadsafety;", "import javax.annotation.concurrent.GuardedBy;", "class A {", "  static final Object lock = new Object();", "  @GuardedBy(\"lock\") static boolean flag = false;", "}", "class B {", "  static final Object lock = new Object();", "  @GuardedBy(\"lock\") static boolean flag = false;", "  void m() {", "    synchronized (B.lock) {", "      // BUG: Diagnostic contains: Expected A.lock", "      A.flag = true;", "    }", "    synchronized (A.lock) {", "      // BUG: Diagnostic contains: Expected B.lock", "      B.flag = true;", "    }", "  }", "}"));
}||||||||@Test
public void testOtherClass_bad_staticLock() throws Exception {
    compilationHelper.assertCompileFailsWithMessages(compilationHelper.fileManager().forSourceLines("threadsafety/Test.java", "package threadsafety;", "import javax.annotation.concurrent.GuardedBy;", "class A {", "  static final Object lock = new Object();", "  @GuardedBy(\"lock\") static boolean flag = false;", "}", "class B {", "  static final Object lock = new Object();", "  @GuardedBy(\"lock\") static boolean flag = false;", "  void m() {", "    synchronized (B.lock) {", "      // BUG: Diagnostic contains:", "      // should be guarded by 'A.lock'", "      A.flag = true;", "    }", "    synchronized (A.lock) {", "      // BUG: Diagnostic contains:", "      // should be guarded by 'B.lock'", "      B.flag = true;", "    }", "  }", "}"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

