@Test
public void testHashCode() {
    compilationHelper.addSourceLines("Test.java", "public abstract class Test {", "  abstract int g(Integer x);", "  void f(int x, Integer y) {", "    // BUG: Diagnostic contains: int h = Integer.hashCode(x);", "    int h = new Integer(x).hashCode();", "  }", "}").doTest();
}||||||||@Test
public void testHashCode() {
    compilationHelper.addSourceLines("Test.java", "public abstract class Test {", "  abstract int g(Integer x);", "  int f(int x, Integer y, long z, double d, Double dd) {", "    // BUG: Diagnostic contains: int h = Integer.hashCode(x);", "    int h = new Integer(x).hashCode();", "    // BUG: Diagnostic contains: h = Float.hashCode((float) d);", "    h = new Float(d).hashCode();", "    // BUG: Diagnostic contains: h = Float.hashCode(dd.floatValue());", "    h = new Float(dd).hashCode();", "    // BUG: Diagnostic contains: return Long.hashCode(z);", "    return new Long(z).hashCode();", "  }", "}").doTest();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

