/**
 * obtain an iterator of columns in this memtable in the specified order starting from a given column.
 */
public ColumnIterator getSliceIterator(ColumnFamily cf, SliceQueryFilter filter, AbstractType typeComparator) {
    final ColumnFamily columnFamily = cf == null ? ColumnFamily.create(table, filter.getColumnFamilyName()) : cf.cloneMeShallow();
    final IColumn[] columns = (cf == null ? columnFamily : cf).getSortedColumns().toArray(new IColumn[columnFamily.getSortedColumns().size()]);
    // TODO if we are dealing with supercolumns, we need to clone them while we have the read lock since they can be modified later
    if (filter.reversed)
        ArrayUtils.reverse(columns);
    IColumn startIColumn;
    final boolean isStandard = DatabaseDescriptor.getColumnFamilyType(table, filter.getColumnFamilyName()).equals("Standard");
    if (isStandard)
        startIColumn = new Column(filter.start);
    else
        // ok to not have subcolumnComparator since we won't be adding columns to this object
        startIColumn = new SuperColumn(filter.start, null);
    // can't use a ColumnComparatorFactory comparator since those compare on both name and time (and thus will fail to match
    // our dummy column, since the time there is arbitrary).
    Comparator<IColumn> comparator = filter.getColumnComparator(typeComparator);
    int index;
    if (filter.start.length == 0 && filter.reversed) {
        /* scan from the largest column in descending order */
        index = 0;
    } else {
        index = Arrays.binarySearch(columns, startIColumn, comparator);
    }
    final int startIndex = index < 0 ? -(index + 1) : index;
    return new AbstractColumnIterator() {

        private int curIndex_ = startIndex;

        public ColumnFamily getColumnFamily() {
            return columnFamily;
        }

        public boolean hasNext() {
            return curIndex_ < columns.length;
        }

        public IColumn next() {
            // clone supercolumns so caller can freely removeDeleted or otherwise mutate it
            return isStandard ? columns[curIndex_++] : ((SuperColumn) columns[curIndex_++]).cloneMe();
        }
    };
}||||||||/**
 * obtain an iterator of columns in this memtable in the specified order starting from a given column.
 */
public ColumnIterator getSliceIterator(ColumnFamily cf, SliceQueryFilter filter, AbstractType typeComparator) {
    final ColumnFamily columnFamily = cf == null ? ColumnFamily.create(getTableName(), filter.getColumnFamilyName()) : cf.cloneMeShallow();
    final IColumn[] columns = (cf == null ? columnFamily : cf).getSortedColumns().toArray(new IColumn[columnFamily.getSortedColumns().size()]);
    // TODO if we are dealing with supercolumns, we need to clone them while we have the read lock since they can be modified later
    if (filter.reversed)
        ArrayUtils.reverse(columns);
    IColumn startIColumn;
    final boolean isStandard = DatabaseDescriptor.getColumnFamilyType(getTableName(), filter.getColumnFamilyName()).equals("Standard");
    if (isStandard)
        startIColumn = new Column(filter.start);
    else
        // ok to not have subcolumnComparator since we won't be adding columns to this object
        startIColumn = new SuperColumn(filter.start, null);
    // can't use a ColumnComparatorFactory comparator since those compare on both name and time (and thus will fail to match
    // our dummy column, since the time there is arbitrary).
    Comparator<IColumn> comparator = filter.getColumnComparator(typeComparator);
    int index;
    if (filter.start.length == 0 && filter.reversed) {
        /* scan from the largest column in descending order */
        index = 0;
    } else {
        index = Arrays.binarySearch(columns, startIColumn, comparator);
    }
    final int startIndex = index < 0 ? -(index + 1) : index;
    return new AbstractColumnIterator() {

        private int curIndex_ = startIndex;

        public ColumnFamily getColumnFamily() {
            return columnFamily;
        }

        public boolean hasNext() {
            return curIndex_ < columns.length;
        }

        public IColumn next() {
            // clone supercolumns so caller can freely removeDeleted or otherwise mutate it
            return isStandard ? columns[curIndex_++] : ((SuperColumn) columns[curIndex_++]).cloneMe();
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayCreationLevel
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							(EnclosedExpr
								(ConditionalExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockComment
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						NameExpr
							SimpleName
						(UnaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						NameExpr
							SimpleName
						SimpleName
						(PrimitiveType
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(EnclosedExpr
										(CastExpr
											(ArrayAccessExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ArrayAccessExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ArrayCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
							(ArrayCreationLevel
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							(EnclosedExpr
								(ConditionalExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockComment
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						NameExpr
							SimpleName
						(UnaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						NameExpr
							SimpleName
						SimpleName
						(PrimitiveType
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(EnclosedExpr
										(CastExpr
											(ArrayAccessExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ArrayAccessExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

