public static void main(String[] args) throws Throwable {
    /*
        SSTable ssTable = new SSTable("C:\\Engagements\\", "Sample-Bf");
        BloomFilter bf = new BloomFilter(512*1024, 15);
        for ( int i = 0; i < 512*1024; ++i )
        {
            bf.fill( Integer.toString(i) );
        }
        ssTable.close(bf);
        */
    /*
        IFileWriter writer = SequenceFile.bufferedWriter("C:\\Engagements\\Sample-Bf-Data.db", 4*1024*1024);
        BloomFilter bf = new BloomFilter(512*1024, 15);
        for ( int i = 0; i < 512*1024; ++i )
        {
            bf.fill( Integer.toString(i) );
        }
        DataOutputBuffer bufOut = new DataOutputBuffer();
        BloomFilter.serializer().serialize(bf, bufOut);
        bufOut.close();
        writer.close(bufOut.getData(), bufOut.getLength());
        writer.close();

        IFileReader reader = SequenceFile.bufferedReader("C:\\Engagements\\Sample-Bf-Data.db", 4*1024*1024);
        //DataOutputBuffer bufOut = new DataOutputBuffer();
        bufOut.reset();
        reader.next(bufOut);
        DataInputBuffer bufIn = new DataInputBuffer();
        bufIn.reset(bufOut.getData(), bufOut.getLength());
        bufIn.readUTF();
        bufIn.readInt();
        BloomFilter bf2 = BloomFilter.serializer().deserialize(bufIn);
        int count = 0;
        for ( int i = 0; i < 512*1024; ++i )
        {
            if ( !bf2.isPresent(Integer.toString(i)) )
                ++count;
        }
        System.out.println(count);
        reader.close();
        */
    // LogUtil.init();
    // StorageService.instance().start();
    // doWrites();
    // doRead("543");
    DatabaseDescriptor.init();
    DBTest.doTest();
}||||||||public static void main(String[] args) throws Throwable {
    /*
        SSTable ssTable = new SSTable("C:\\Engagements\\", "Sample-Bf");
        BloomFilter bf = new BloomFilter(512*1024, 15);
        for ( int i = 0; i < 512*1024; ++i )
        {
            bf.fill( Integer.toString(i) );
        }
        ssTable.close(bf);
        */
    /*
        IFileWriter writer = SequenceFile.bufferedWriter("C:\\Engagements\\Sample-Bf-Data.db", 4*1024*1024);
        BloomFilter bf = new BloomFilter(512*1024, 15);
        for ( int i = 0; i < 512*1024; ++i )
        {
            bf.fill( Integer.toString(i) );
        }
        DataOutputBuffer bufOut = new DataOutputBuffer();
        BloomFilter.serializer().serialize(bf, bufOut);
        bufOut.close();
        writer.close(bufOut.getData(), bufOut.getLength());
        writer.close();

        IFileReader reader = SequenceFile.bufferedReader("C:\\Engagements\\Sample-Bf-Data.db", 4*1024*1024);
        //DataOutputBuffer bufOut = new DataOutputBuffer();
        bufOut.reset();
        reader.next(bufOut);
        DataInputBuffer bufIn = new DataInputBuffer();
        bufIn.reset(bufOut.getData(), bufOut.getLength());
        bufIn.readUTF();
        bufIn.readInt();
        BloomFilter bf2 = BloomFilter.serializer().deserialize(bufIn);
        int count = 0;
        for ( int i = 0; i < 512*1024; ++i )
        {
            if ( !bf2.isPresent(Integer.toString(i)) )
                ++count;
        }
        System.out.println(count);
        reader.close();
        */
    // LogUtil.init();
    // StorageService.instance().start();
    // doWrites();
    // doRead("543");
    DBTest.doTest();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

