public void setBound(ColumnIdentifier name, Relation.Type type, Term t) throws InvalidRequestException {
    Bound b;
    boolean inclusive;
    switch(type) {
        case GT:
            b = Bound.START;
            inclusive = false;
            break;
        case GTE:
            b = Bound.START;
            inclusive = true;
            break;
        case LT:
            b = Bound.END;
            inclusive = false;
            break;
        case LTE:
            b = Bound.END;
            inclusive = true;
            break;
        default:
            throw new AssertionError();
    }
    if (bounds[b.idx] != null)
        throw new InvalidRequestException(String.format("Invalid restrictions found on %s", name));
    bounds[b.idx] = t;
    boundInclusive[b.idx] = inclusive;
}||||||||public void setBound(ColumnIdentifier name, Relation.Type type, Term t, ColumnIdentifier previousName) throws InvalidRequestException {
    Bound b;
    boolean inclusive;
    switch(type) {
        case GT:
            b = Bound.START;
            inclusive = false;
            break;
        case GTE:
            b = Bound.START;
            inclusive = true;
            break;
        case LT:
            b = Bound.END;
            inclusive = false;
            break;
        case LTE:
            b = Bound.END;
            inclusive = true;
            break;
        default:
            throw new AssertionError();
    }
    if (bounds[b.idx] != null)
        throw new InvalidRequestException(String.format("Invalid restrictions found on %s", name));
    bounds[b.idx] = t;
    boundInclusive[b.idx] = inclusive;
    // If a bound is part of a tuple notation (#4851), the other bound must either also be or must not be set at all,
    // and this even if there is a 2ndary index (it's not supported by the 2ndary code). And it's easier to validate
    // this here so we do.
    Bound reverse = Bound.reverse(b);
    if (hasBound(reverse) && !(Objects.equal(previousName, previous[reverse.idx])))
        throw new InvalidRequestException(String.format("Clustering column %s cannot be restricted both inside a tuple notation and outside it", name));
    previous[b.idx] = previousName;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(BinaryExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ThrowStmt
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(BinaryExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ThrowStmt
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(UnaryExpr
					(EnclosedExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							(ArrayAccessExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(ThrowStmt
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

