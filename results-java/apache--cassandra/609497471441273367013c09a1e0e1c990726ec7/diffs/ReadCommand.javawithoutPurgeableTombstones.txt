// Skip purgeable tombstones. We do this because it's safe to do (post-merge of the memtable and sstable at least), it
// can save us some bandwith, and avoid making us throw a TombstoneOverwhelmingException for purgeable tombstones (which
// are to some extend an artefact of compaction lagging behind and hence counting them is somewhat unintuitive).
protected UnfilteredPartitionIterator withoutPurgeableTombstones(UnfilteredPartitionIterator iterator, ColumnFamilyStore cfs) {
    return new PurgingPartitionIterator(iterator, cfs.gcBefore(nowInSec()), oldestUnrepairedTombstone(), cfs.getCompactionStrategyManager().onlyPurgeRepairedTombstones()) {

        protected long getMaxPurgeableTimestamp() {
            return Long.MAX_VALUE;
        }
    };
}||||||||// Skip purgeable tombstones. We do this because it's safe to do (post-merge of the memtable and sstable at least), it
// can save us some bandwith, and avoid making us throw a TombstoneOverwhelmingException for purgeable tombstones (which
// are to some extend an artefact of compaction lagging behind and hence counting them is somewhat unintuitive).
protected UnfilteredPartitionIterator withoutPurgeableTombstones(UnfilteredPartitionIterator iterator, ColumnFamilyStore cfs) {
    final boolean isForThrift = iterator.isForThrift();
    class WithoutPurgeableTombstones extends PurgeFunction {

        public WithoutPurgeableTombstones() {
            super(isForThrift, cfs.gcBefore(nowInSec()), oldestUnrepairedTombstone(), cfs.getCompactionStrategyManager().onlyPurgeRepairedTombstones());
        }

        protected long getMaxPurgeableTimestamp() {
            return Long.MAX_VALUE;
        }
    }
    return Transformation.apply(iterator, new WithoutPurgeableTombstones());
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(LocalClassDeclarationStmt
			(ClassOrInterfaceDeclaration
				(ClassOrInterfaceType
					SimpleName
				)
				(ConstructorDeclaration
					(BlockStmt
						(ExplicitConstructorInvocationStmt
							NameExpr
								SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
				)
				SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

