/**
 * @param that
 * @return the intersection of the two Ranges.  this can be two disjoint Ranges if one is wrapping and one is not.
 * say you have nodes G and M, with query range (D,T]; the intersection is (M-T] and (D-G].
 * If there is no intersection, an empty list is returned.
 */
public Set<Range<T>> intersectionWith(Range<T> that) {
    if (that.contains(this))
        return rangeSet(this);
    if (this.contains(that))
        return rangeSet(that);
    boolean thiswraps = isWrapAround(left, right);
    boolean thatwraps = isWrapAround(that.left, that.right);
    if (!thiswraps && !thatwraps) {
        // neither wraps.  the straightforward case.
        if (!(left.compareTo(that.right) < 0 && that.left.compareTo(right) < 0))
            return Collections.emptySet();
        return rangeSet(new Range<T>(ObjectUtils.max(this.left, that.left), ObjectUtils.min(this.right, that.right)));
    }
    if (thiswraps && thatwraps) {
        // if the starts are the same, one contains the other, which we have already ruled out.
        assert !this.left.equals(that.left);
        // or, we have the same cases on the left segement, which we can handle by swapping this and that.
        return this.left.compareTo(that.left) < 0 ? intersectionBothWrapping(this, that) : intersectionBothWrapping(that, this);
    }
    if (thiswraps && !thatwraps)
        return intersectionOneWrapping(this, that);
    assert (!thiswraps && thatwraps);
    return intersectionOneWrapping(that, this);
}||||||||/**
 * @param that
 * @return the intersection of the two Ranges.  this can be two disjoint Ranges if one is wrapping and one is not.
 * say you have nodes G and M, with query range (D,T]; the intersection is (M-T] and (D-G].
 * If there is no intersection, an empty list is returned.
 */
public Set<Range<T>> intersectionWith(Range<T> that) {
    if (that.contains(this))
        return rangeSet(this);
    if (this.contains(that))
        return rangeSet(that);
    boolean thiswraps = isWrapAround(left, right);
    boolean thatwraps = isWrapAround(that.left, that.right);
    if (!thiswraps && !thatwraps) {
        // neither wraps:  the straightforward case.
        if (!(left.compareTo(that.right) < 0 && that.left.compareTo(right) < 0))
            return Collections.emptySet();
        return rangeSet(new Range<T>(ObjectUtils.max(this.left, that.left), ObjectUtils.min(this.right, that.right)));
    }
    if (thiswraps && thatwraps) {
        // both wrap: if the starts are the same, one contains the other, which we have already ruled out.
        assert !this.left.equals(that.left);
        // or, we have the same cases on the left segement, which we can handle by swapping this and that.
        return this.left.compareTo(that.left) < 0 ? intersectionBothWrapping(this, that) : intersectionBothWrapping(that, this);
    }
    if (// this wraps, that does not wrap
    thiswraps)
        return intersectionOneWrapping(this, that);
    // the last case: this does not wrap, that wraps
    return intersectionOneWrapping(that, this);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				(ThisExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				(MethodCallExpr
					(ThisExpr
					)
					SimpleName
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(ThisExpr
				)
			)
			(ReturnStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(AssertStmt
					(UnaryExpr
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
					)
					LineComment
				)
				(ReturnStmt
					(ConditionalExpr
						(BinaryExpr
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							(ThisExpr
							)
							SimpleName
						)
						(MethodCallExpr
							(ThisExpr
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				(MethodCallExpr
					(ThisExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(AssertStmt
			(EnclosedExpr
				(BinaryExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ThisExpr
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				(ThisExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				(MethodCallExpr
					(ThisExpr
					)
					SimpleName
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(ThisExpr
				)
			)
			(ReturnStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
					)
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(AssertStmt
					(UnaryExpr
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
					)
					LineComment
				)
				(ReturnStmt
					(ConditionalExpr
						(BinaryExpr
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							(ThisExpr
							)
							SimpleName
						)
						(MethodCallExpr
							(ThisExpr
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
				LineComment
			(ReturnStmt
				(MethodCallExpr
					(ThisExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ThisExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

