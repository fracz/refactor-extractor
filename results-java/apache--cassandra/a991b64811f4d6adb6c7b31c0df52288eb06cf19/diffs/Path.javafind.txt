/**
 * Find the provided key in the tree rooted at node, and store the root to it in the path
 *
 * @param comparator the comparator defining the order on the tree
 * @param target     the key to search for
 * @param mode       the type of search to perform
 * @param forwards   if the path should be setup for forward or backward iteration
 * @param <K>
 */
<K> boolean find(Comparator<K> comparator, Object target, Op mode, boolean forwards) {
    // TODO : should not require parameter 'forwards' - consider modifying index to represent both
    // child and key position, as opposed to just key position (which necessitates a different value depending
    // on which direction you're moving in. Prerequisite for making Path public and using to implement general
    // search
    Object[] node = path[depth];
    int lb = indexes[depth];
    assert lb == 0 || forwards;
    pop();
    if (target instanceof BTree.Special) {
        if (target == POSITIVE_INFINITY)
            moveEnd(node, forwards);
        else if (target == NEGATIVE_INFINITY)
            moveStart(node, forwards);
        else
            throw new AssertionError();
        return false;
    }
    while (true) {
        int keyEnd = getKeyEnd(node);
        // search for the target in the current node
        int i = BTree.find(comparator, target, node, lb, keyEnd);
        lb = 0;
        if (i >= 0) {
            // exact match. transform exclusive bounds into the correct index by moving back or forwards one
            push(node, i);
            switch(mode) {
                case HIGHER:
                    successor();
                    break;
                case LOWER:
                    predecessor();
            }
            return true;
        }
        i = -i - 1;
        // traverse into the appropriate child
        if (!isLeaf(node)) {
            push(node, forwards ? i - 1 : i);
            node = (Object[]) node[keyEnd + i];
            continue;
        }
        // bottom of the tree and still not found.  pick the right index to satisfy Op
        switch(mode) {
            case FLOOR:
            case LOWER:
                i--;
        }
        if (i < 0) {
            push(node, 0);
            predecessor();
        } else if (i >= keyEnd) {
            push(node, keyEnd - 1);
            successor();
        } else {
            push(node, i);
        }
        return false;
    }
}||||||||/**
 * Find the provided key in the tree rooted at node, and store the root to it in the path
 *
 * @param comparator the comparator defining the order on the tree
 * @param target     the key to search for
 * @param mode       the type of search to perform
 * @param forwards   if the path should be setup for forward or backward iteration
 * @param <K>
 */
<K> boolean find(Comparator<K> comparator, Object target, Op mode, boolean forwards) {
    // TODO : should not require parameter 'forwards' - consider modifying index to represent both
    // child and key position, as opposed to just key position (which necessitates a different value depending
    // on which direction you're moving in. Prerequisite for making Path public and using to implement general
    // search
    Object[] node = path[depth];
    int lb = forwards ? indexes[depth] : 0;
    pop();
    if (target instanceof BTree.Special) {
        if (target == POSITIVE_INFINITY)
            moveEnd(node, forwards);
        else if (target == NEGATIVE_INFINITY)
            moveStart(node, forwards);
        else
            throw new AssertionError();
        return false;
    }
    while (true) {
        int keyEnd = getKeyEnd(node);
        // search for the target in the current node
        int i = BTree.find(comparator, target, node, lb, keyEnd);
        lb = 0;
        if (i >= 0) {
            // exact match. transform exclusive bounds into the correct index by moving back or forwards one
            push(node, i);
            switch(mode) {
                case HIGHER:
                    successor();
                    break;
                case LOWER:
                    predecessor();
            }
            return true;
        }
        i = -i - 1;
        // traverse into the appropriate child
        if (!isLeaf(node)) {
            push(node, forwards ? i - 1 : i);
            node = (Object[]) node[keyEnd + i];
            continue;
        }
        // bottom of the tree and still not found.  pick the right index to satisfy Op
        switch(mode) {
            case FLOOR:
            case LOWER:
                i--;
        }
        if (i < 0) {
            push(node, 0);
            predecessor();
        } else if (i >= keyEnd) {
            push(node, keyEnd - 1);
            successor();
        } else {
            push(node, i);
        }
        return false;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(AssertStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(ThrowStmt
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
						(SwitchStmt
							(SwitchEntryStmt
								NameExpr
									SimpleName
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								NameExpr
									SimpleName
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							NameExpr
								SimpleName
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ConditionalExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(CastExpr
									(ArrayAccessExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(ThrowStmt
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
						(SwitchStmt
							(SwitchEntryStmt
								NameExpr
									SimpleName
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
								(BreakStmt
								)
							)
							(SwitchEntryStmt
								NameExpr
									SimpleName
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							NameExpr
								SimpleName
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ConditionalExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(CastExpr
									(ArrayAccessExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

