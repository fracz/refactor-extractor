@Override
public void actionPerformed(ActionEvent e) {
    try {
        if (GithubUtil.checkAuthData(getAuthData())) {
            Messages.showInfoMessage(myPane, "Connection successful", "Success");
        } else {
            Messages.showErrorDialog(myPane, "Can't login to " + getHost() + " using given credentials", "Login Failure");
        }
    } catch (IOException ex) {
        LOG.info(ex);
        Messages.showErrorDialog(myPane, String.format("Can't login to %s: %s", getHost(), GithubUtil.getErrorTextFromException(ex)), "Login Failure");
    }
}||||||||@Override
public void actionPerformed(ActionEvent e) {
    try {
        if (GithubUtil.checkAuthData(getAuthData(), getLogin())) {
            Messages.showInfoMessage(myPane, "Connection successful", "Success");
        } else {
            Messages.showErrorDialog(myPane, "Can't login to " + getHost() + " using given credentials", "Login Failure");
        }
    } catch (IOException ex) {
        LOG.info(ex);
        Messages.showErrorDialog(myPane, String.format("Can't login to %s: %s", getHost(), GithubUtil.getErrorTextFromException(ex)), "Login Failure");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

