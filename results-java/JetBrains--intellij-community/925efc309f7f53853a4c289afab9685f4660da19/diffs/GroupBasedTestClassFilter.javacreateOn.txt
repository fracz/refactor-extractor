/**
 * Creates <code>TestClassesFilter</code> object assuming that the given stream contains grouped test class filters
 * at the following format:
 * <p/>
 * <ul>
 * <li>
 * every line that starts with <code>'['</code> symbol and ends with <code>']'</code> symbol defines start
 * of the new test group. That means that all test class filters that follows this line belongs to the same
 * test group which name is defined by the text contained between <code>'['</code> and <code>']'</code>
 * </li>
 * <li>every line that is not a test-group definition is considered to be a test class filter at regexp format;</li>
 * </ul>
 * <p/>
 * <b>Example</b>
 * Consider that given stream points to the following data:
 * <pre>
 * [CVS]
 * com.intellij.cvsSupport2.*
 * [STRESS_TESTS]
 * com.intellij.application.InspectionPerformanceTest
 * com.intellij.application.TraverseUITest
 * </pre>
 * <p/>
 * It defines two test groups:
 * <ul>
 * <li><b>CVS</b> group with the single test class name pattern <code>'com.intellij.cvsSupport2.*'</code>;</li>
 * <li>
 * <b>STRESS_TESTS</b> group with the following test class name patterns:
 * <ul>
 * <li>com.intellij.application.InspectionPerformanceTest</li>
 * <li>com.intellij.application.TraverseUITest</li>
 * </ul>
 * </li>
 * </ul>
 * <p/>
 * This method doesn't suppose itself to be owner of the given stream reader, i.e. it assumes that the stream should be
 * closed on caller side.
 *
 * @param inputStreamReader   reader that points to the target test groups config
 * @param testGroupName
 * @return                    newly created {@link GroupBasedTestClassFilter} object with the data contained at the given reader
 * @see #matches(String)
 */
@SuppressWarnings({ "IOResourceOpenedButNotSafelyClosed" })
public static TestClassesFilter createOn(InputStreamReader inputStreamReader, String testGroupName) {
    try {
        Map<String, List<String>> groupNameToPatternsMap = new HashMap<String, List<String>>();
        String currentGroupName = "";
        LineNumberReader lineNumberReader = new LineNumberReader(inputStreamReader);
        String line;
        while ((line = lineNumberReader.readLine()) != null) {
            if (line.startsWith("#"))
                continue;
            if (line.startsWith("[") && line.endsWith("]")) {
                currentGroupName = line.substring(1, line.length() - 1);
            } else {
                if (!groupNameToPatternsMap.containsKey(currentGroupName)) {
                    groupNameToPatternsMap.put(currentGroupName, new ArrayList<String>());
                }
                groupNameToPatternsMap.get(currentGroupName).add(line);
            }
        }
        return new GroupBasedTestClassFilter(groupNameToPatternsMap, testGroupName);
    } catch (IOException e) {
        return ALL_CLASSES;
    }
}||||||||/**
 * Creates <code>TestClassesFilter</code> object assuming that the given stream contains grouped test class filters
 * at the following format:
 * <p/>
 * <ul>
 * <li>
 * every line that starts with <code>'['</code> symbol and ends with <code>']'</code> symbol defines start
 * of the new test group. That means that all test class filters that follows this line belongs to the same
 * test group which name is defined by the text contained between <code>'['</code> and <code>']'</code>
 * </li>
 * <li>every line that is not a test-group definition is considered to be a test class filter at regexp format;</li>
 * </ul>
 * <p/>
 * <b>Example</b>
 * Consider that given stream points to the following data:
 * <pre>
 * [CVS]
 * com.intellij.cvsSupport2.*
 * [STRESS_TESTS]
 * com.intellij.application.InspectionPerformanceTest
 * com.intellij.application.TraverseUITest
 * </pre>
 * <p/>
 * It defines two test groups:
 * <ul>
 * <li><b>CVS</b> group with the single test class name pattern <code>'com.intellij.cvsSupport2.*'</code>;</li>
 * <li>
 * <b>STRESS_TESTS</b> group with the following test class name patterns:
 * <ul>
 * <li>com.intellij.application.InspectionPerformanceTest</li>
 * <li>com.intellij.application.TraverseUITest</li>
 * </ul>
 * </li>
 * </ul>
 * <p/>
 * This method doesn't suppose itself to be owner of the given stream reader, i.e. it assumes that the stream should be
 * closed on caller side.
 *
 * @param reader   reader that points to the target test groups config
 * @param testGroupName
 * @return newly created {@link GroupBasedTestClassFilter} object with the data contained at the given reader
 * @see #matches(String)
 */
public static TestClassesFilter createOn(Reader reader, String testGroupName) throws IOException {
    Map<String, List<String>> groupNameToPatternsMap = new HashMap<String, List<String>>();
    String currentGroupName = "";
    @SuppressWarnings({ "IOResourceOpenedButNotSafelyClosed" }) BufferedReader bufferedReader = new BufferedReader(reader);
    String line;
    while ((line = bufferedReader.readLine()) != null) {
        if (line.startsWith("#"))
            continue;
        if (line.startsWith("[") && line.endsWith("]")) {
            currentGroupName = line.substring(1, line.length() - 1);
        } else {
            if (!groupNameToPatternsMap.containsKey(currentGroupName)) {
                groupNameToPatternsMap.put(currentGroupName, new ArrayList<String>());
            }
            groupNameToPatternsMap.get(currentGroupName).add(line);
        }
    }
    return new GroupBasedTestClassFilter(groupNameToPatternsMap, testGroupName);
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ReturnStmt
						NameExpr
							SimpleName
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							StringLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ContinueStmt
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						(EnclosedExpr
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						NullLiteralExpr
					)
				)
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			StringLiteralExpr
		)
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(SingleMemberAnnotationExpr
					(ArrayInitializerExpr
						StringLiteralExpr
					)
					Name
				)
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ContinueStmt
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				(EnclosedExpr
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				NullLiteralExpr
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

