// if all repos succeeded, show notification.
// if all repos failed, show notification.
// if some repos failed, show notification with both results.
// if in failed repos, some branches were rejected, it is a warning-type, but not an error.
// if in a failed repo, current branch was rejected, propose to update the branch. Don't do it if not current branch was rejected,
// since it is difficult to update such a branch.
// if in a failed repo, a branch was rejected that had nothing to push, don't notify about the rejection.
// Besides all of the above, don't confuse users with 1 repository with all this "repository/root" stuff;
// don't confuse users which push only a single branch with all this "branch" stuff.
private void handleResult(@NotNull GitPushInfo pushInfo, @NotNull GitPushResult result, @Nullable GitPushResult previousResult, @Nullable UpdateSettings updateSettings) {
    result.mergeFrom(previousResult);
    if (result.isEmpty()) {
        return;
    }
    if (result.totalSuccess()) {
        int commitsPushed = pushInfo.getCommits().commitsNumber();
        String message = "Pushed " + commits(commitsPushed);
        GitVcs.NOTIFICATION_GROUP_ID.createNotification(message, NotificationType.INFORMATION).notify(myProject);
    } else if (result.wasError()) {
        // if there was an error on any repo, we won't propose to update even if current branch of a repo was rejected
        GitVcs.IMPORTANT_ERROR_NOTIFICATION.createNotification("Push failed", getResultDescriptionWithOptionalReposIndication(pushInfo, result), NotificationType.ERROR, null).notify(myProject);
    } else {
        // there were no errors, but some rejected branches on some of the repositories
        // => for current branch propose to update and re-push it. For others just warn
        Map<GitRepository, GitBranch> rejectedPushesForCurrentBranch = getRejectedPushesForCurrentBranch(result);
        if (!rejectedPushesForCurrentBranch.isEmpty()) {
            if (updateSettings == null) {
                // show dialog only when push is rejected for the first time in a row
                final GitRejectedPushUpdateDialog dialog = new GitRejectedPushUpdateDialog(myProject, rejectedPushesForCurrentBranch.keySet());
                final AtomicInteger exitCode = new AtomicInteger();
                UIUtil.invokeAndWaitIfNeeded(new Runnable() {

                    @Override
                    public void run() {
                        dialog.show();
                        exitCode.set(dialog.getExitCode());
                    }
                });
                updateSettings = new UpdateSettings(dialog.shouldUpdateAll(), getUpdateMethodFromDialogExitCode(exitCode.get()));
            }
            Set<VirtualFile> roots = getRootsToUpdate(rejectedPushesForCurrentBranch, updateSettings.shouldUpdateAllRoots());
            boolean pushAgain = false;
            if (updateSettings.getUpdateMethod() != null) {
                pushAgain = update(roots, updateSettings.getUpdateMethod());
            }
            if (pushAgain) {
                myProgressIndicator.setText(INDICATOR_TEXT);
                GitPushInfo newPushInfo = new GitPushInfo(pushInfo.getCommits().retainAll(rejectedPushesForCurrentBranch), pushInfo.getPushSpec());
                GitPushResult adjustedPushResult = result.remove(rejectedPushesForCurrentBranch);
                push(newPushInfo, adjustedPushResult, updateSettings);
                // don't notify - next push will notify all results in compound
                return;
            }
        }
        GitVcs.IMPORTANT_ERROR_NOTIFICATION.createNotification("Push rejected", getResultDescriptionWithOptionalReposIndication(pushInfo, result), NotificationType.WARNING, null).notify(myProject);
    }
}||||||||// if all repos succeeded, show notification.
// if all repos failed, show notification.
// if some repos failed, show notification with both results.
// if in failed repos, some branches were rejected, it is a warning-type, but not an error.
// if in a failed repo, current branch was rejected, propose to update the branch. Don't do it if not current branch was rejected,
// since it is difficult to update such a branch.
// if in a failed repo, a branch was rejected that had nothing to push, don't notify about the rejection.
// Besides all of the above, don't confuse users with 1 repository with all this "repository/root" stuff;
// don't confuse users which push only a single branch with all this "branch" stuff.
private void handleResult(@NotNull GitPushInfo pushInfo, @NotNull GitPushResult result, @Nullable GitPushResult previousResult, @Nullable UpdateSettings updateSettings) {
    result.mergeFrom(previousResult);
    if (result.isEmpty()) {
        GitVcs.NOTIFICATION_GROUP_ID.createNotification("Everything up-to-date", NotificationType.INFORMATION);
    } else if (result.wasError()) {
        // if there was an error on any repo, we won't propose to update even if current branch of a repo was rejected
        result.createNotification(pushInfo).notify(myProject);
    } else {
        // there were no errors, but there might be some rejected branches on some of the repositories
        // => for current branch propose to update and re-push it. For others just warn
        Map<GitRepository, GitBranch> rejectedPushesForCurrentBranch = result.getRejectedPushesForCurrentBranch();
        if (!rejectedPushesForCurrentBranch.isEmpty()) {
            if (updateSettings == null) {
                // show dialog only when push is rejected for the first time in a row, otherwise reuse previously chosen update method
                final GitRejectedPushUpdateDialog dialog = new GitRejectedPushUpdateDialog(myProject, rejectedPushesForCurrentBranch.keySet());
                final int exitCode = showDialogAndGetExitCode(dialog);
                updateSettings = new UpdateSettings(dialog.shouldUpdateAll(), getUpdateMethodFromDialogExitCode(exitCode));
            }
            Set<VirtualFile> roots = getRootsToUpdate(rejectedPushesForCurrentBranch, updateSettings.shouldUpdateAllRoots());
            boolean pushAgain = false;
            if (updateSettings.shouldUpdate()) {
                pushAgain = update(roots, updateSettings.getUpdateMethod());
            }
            if (pushAgain) {
                myProgressIndicator.setText(INDICATOR_TEXT);
                GitPushInfo newPushInfo = new GitPushInfo(pushInfo.getCommits().retainAll(rejectedPushesForCurrentBranch), pushInfo.getPushSpec());
                GitPushResult adjustedPushResult = result.remove(rejectedPushesForCurrentBranch);
                push(newPushInfo, adjustedPushResult, updateSettings);
                // don't notify - next push will notify all results in compound
                return;
            }
        }
        result.createNotification(pushInfo).notify(myProject);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						LineComment
					)
					(IfStmt
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											(ObjectCreationExpr
												(MethodDeclaration
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(VoidType
													)
													SimpleName
													(MarkerAnnotationExpr
														Name
													)
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(ObjectCreationExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BooleanLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ReturnStmt
										LineComment
									)
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						LineComment
					)
					(IfStmt
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(ObjectCreationExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(BooleanLiteralExpr
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ReturnStmt
										LineComment
									)
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

