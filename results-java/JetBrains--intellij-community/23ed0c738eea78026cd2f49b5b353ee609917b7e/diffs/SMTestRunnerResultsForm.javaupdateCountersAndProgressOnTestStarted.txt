private void updateCountersAndProgressOnTestStarted(final boolean isCustomMessage) {
    if (!isModeConsistent(isCustomMessage))
        return;
    // for mixed tests results : mention category only if it contained tests
    myMentionedCategories.add(myCurrentCustomProgressCategory != null ? myCurrentCustomProgressCategory : TestsPresentationUtil.DEFAULT_TESTS_CATEGORY);
    // Counters
    myTestsCurrentCount++;
    // but if test count wasn't set at all let's process such case separately
    if (myTestsCurrentCount > myTestsTotal && myTestsTotal != 0) {
        myTestsTotal = myTestsCurrentCount;
    }
    // update progress
    if (myTestsTotal != 0) {
        // if total is set
        myStatusLine.setFraction((double) myTestsCurrentCount / myTestsTotal);
    } else {
        // if at least one test was launcher than just set progress in the middle to show user that tests are running
        // > 1 because count already ++
        myStatusLine.setFraction(myTestsCurrentCount > 1 ? 0.5 : 0);
    }
    updateStatusLabel();
}||||||||private void updateCountersAndProgressOnTestStarted(final boolean isCustomMessage) {
    if (!isModeConsistent(isCustomMessage))
        return;
    // for mixed tests results : mention category only if it contained tests
    myMentionedCategories.add(myCurrentCustomProgressCategory != null ? myCurrentCustomProgressCategory : TestsPresentationUtil.DEFAULT_TESTS_CATEGORY);
    // Counters
    myTestsCurrentCount++;
    // but if test count wasn't set at all let's process such case separately
    if (myTestsCurrentCount > myTestsTotal && myTestsTotal != 0) {
        myTestsTotal = myTestsCurrentCount;
    }
    // update progress
    if (myTestsTotal != 0) {
        // if total is set
        myStatusLine.setFraction((double) myTestsCurrentCount / myTestsTotal);
    } else {
        // if at least one test was launcher than just set progress in the middle to show user that tests are running
        // > 1 because count already ++
        myStatusLine.setFraction(myTestsCurrentCount > 1 ? 0.5 : 0);
    }
    updateStatusLabel(false);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ConditionalExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(IntegerLiteralExpr
							)
							(DoubleLiteralExpr
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(CastExpr
								NameExpr
									SimpleName
								(PrimitiveType
								)
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ConditionalExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(IntegerLiteralExpr
							)
							(DoubleLiteralExpr
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(CastExpr
								NameExpr
									SimpleName
								(PrimitiveType
								)
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

