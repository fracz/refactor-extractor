private void updateStatusLabel() {
    if (myTestsFailuresCount > 0) {
        myStatusLine.setStatusColor(ColorProgressBar.RED);
    }
    final boolean finished = myTestsRootNode.wasLaunched() && !myTestsRootNode.isInProgress();
    if (finished && myTestsTotal == 0) {
        // => empty suite
        myStatusLine.setStatusColor(Color.LIGHT_GRAY);
    }
    myStatusLine.setText(TestsPresentationUtil.getProgressStatus_Text(myStartTime, myEndTime, myTestsTotal, myTestsCurrentCount, myTestsFailuresCount, myMentionedCategories, finished));
}||||||||private void updateStatusLabel(final boolean testingFinished) {
    if (myTestsFailuresCount > 0) {
        myStatusLine.setStatusColor(ColorProgressBar.RED);
    }
    if (testingFinished) {
        if (myTestsTotal == 0) {
            myStatusLine.setStatusColor(myTestsRootNode.wasLaunched() || !myTestsRootNode.isTestsReporterAttached() ? Color.LIGHT_GRAY : ColorProgressBar.RED);
        }
    // else color will be according failed/passed tests
    }
    // launchedAndFinished - is launched and not in progress. If we remove "launched' that onTestingStarted() before
    // initializing will be "launchedAndFinished"
    final boolean launchedAndFinished = myTestsRootNode.wasLaunched() && !myTestsRootNode.isInProgress();
    myStatusLine.setText(TestsPresentationUtil.getProgressStatus_Text(myStartTime, myEndTime, myTestsTotal, myTestsCurrentCount, myTestsFailuresCount, myMentionedCategories, launchedAndFinished));
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ConditionalExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

