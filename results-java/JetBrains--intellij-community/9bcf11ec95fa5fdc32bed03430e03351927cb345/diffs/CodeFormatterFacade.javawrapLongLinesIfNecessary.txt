/**
 * Inspects all lines of the given document and wraps all of them that exceed {@link CodeStyleSettings#getRightMargin(com.intellij.lang.Language)}
 * right margin}.
 * <p/>
 * I.e. the algorithm is to do the following for every line:
 * <p/>
 * <pre>
 * <ol>
 * <li>
 * Check if the line exceeds {@link CodeStyleSettings#getRightMargin(com.intellij.lang.Language)}  right margin}. Go to the next line in the case of
 * negative answer;
 * </li>
 * <li>Determine line wrap position; </li>
 * <li>
 * Perform 'smart wrap', i.e. not only wrap the line but insert additional characters over than line feed if necessary.
 * For example consider that we wrap a single-line comment - we need to insert comment symbols on a start of the wrapped
 * part as well. Generally, we get the same behavior as during pressing 'Enter' at wrap position during editing document;
 * </li>
 * </ol>
 * </pre>
 *
 * @param file        file that holds parsed document tree
 * @param document    target document
 * @param startOffset start offset of the first line to check for wrapping (inclusive)
 * @param endOffset   end offset of the first line to check for wrapping (exclusive)
 */
private void wrapLongLinesIfNecessary(@NotNull final PsiFile file, @Nullable final Document document, final int startOffset, final int endOffset) {
    if (!mySettings.getCommonSettings(file.getLanguage()).WRAP_LONG_LINES || PostprocessReformattingAspect.getInstance(file.getProject()).isViewProviderLocked(file.getViewProvider()) || document == null) {
        return;
    }
    final VirtualFile vFile = FileDocumentManager.getInstance().getFile(document);
    if ((vFile == null || vFile instanceof LightVirtualFile) && !ApplicationManager.getApplication().isUnitTestMode()) {
        // a formatter affect only PSI and it is out of sync with a document text
        return;
    }
    Editor editor = PsiUtilBase.findEditor(file);
    EditorFactory editorFactory = null;
    if (editor == null) {
        if (!ApplicationManager.getApplication().isDispatchThread()) {
            return;
        }
        editorFactory = EditorFactory.getInstance();
        editor = editorFactory.createEditor(document, file.getProject());
    }
    try {
        final Editor editorToUse = editor;
        ApplicationManager.getApplication().runWriteAction(new Runnable() {

            @Override
            public void run() {
                final CaretModel caretModel = editorToUse.getCaretModel();
                final int caretOffset = caretModel.getOffset();
                final RangeMarker caretMarker = editorToUse.getDocument().createRangeMarker(caretOffset, caretOffset);
                doWrapLongLinesIfNecessary(editorToUse, file.getProject(), editorToUse.getDocument(), startOffset, endOffset);
                if (caretMarker.isValid() && caretModel.getOffset() != caretMarker.getStartOffset()) {
                    caretModel.moveToOffset(caretMarker.getStartOffset());
                }
            }
        });
    } finally {
        PsiDocumentManager documentManager = PsiDocumentManager.getInstance(file.getProject());
        if (documentManager.isUncommited(document))
            documentManager.commitDocument(document);
        if (editorFactory != null) {
            editorFactory.releaseEditor(editor);
        }
    }
}||||||||/**
 * Inspects all lines of the given document and wraps all of them that exceed {@link CodeStyleSettings#getRightMargin(com.intellij.lang.Language)}
 * right margin}.
 * <p/>
 * I.e. the algorithm is to do the following for every line:
 * <p/>
 * <pre>
 * <ol>
 * <li>
 * Check if the line exceeds {@link CodeStyleSettings#getRightMargin(com.intellij.lang.Language)}  right margin}. Go to the next line in the case of
 * negative answer;
 * </li>
 * <li>Determine line wrap position; </li>
 * <li>
 * Perform 'smart wrap', i.e. not only wrap the line but insert additional characters over than line feed if necessary.
 * For example consider that we wrap a single-line comment - we need to insert comment symbols on a start of the wrapped
 * part as well. Generally, we get the same behavior as during pressing 'Enter' at wrap position during editing document;
 * </li>
 * </ol>
 * </pre>
 *
 * @param file        file that holds parsed document tree
 * @param document    target document
 * @param startOffset start offset of the first line to check for wrapping (inclusive)
 * @param endOffset   end offset of the first line to check for wrapping (exclusive)
 */
private void wrapLongLinesIfNecessary(@NotNull final PsiFile file, @Nullable final Document document, final int startOffset, final int endOffset) {
    if (!mySettings.getCommonSettings(file.getLanguage()).WRAP_LONG_LINES || PostprocessReformattingAspect.getInstance(file.getProject()).isViewProviderLocked(file.getViewProvider()) || document == null) {
        return;
    }
    final VirtualFile vFile = FileDocumentManager.getInstance().getFile(document);
    if ((vFile == null || vFile instanceof LightVirtualFile) && !ApplicationManager.getApplication().isUnitTestMode()) {
        // a formatter affect only PSI and it is out of sync with a document text
        return;
    }
    Editor editor = PsiUtilBase.findEditor(file);
    EditorFactory editorFactory = null;
    if (editor == null) {
        if (!ApplicationManager.getApplication().isDispatchThread()) {
            return;
        }
        editorFactory = EditorFactory.getInstance();
        editor = editorFactory.createEditor(document, file.getProject(), file.getVirtualFile(), false);
    }
    try {
        final Editor editorToUse = editor;
        ApplicationManager.getApplication().runWriteAction(new Runnable() {

            @Override
            public void run() {
                final CaretModel caretModel = editorToUse.getCaretModel();
                final int caretOffset = caretModel.getOffset();
                final RangeMarker caretMarker = editorToUse.getDocument().createRangeMarker(caretOffset, caretOffset);
                doWrapLongLinesIfNecessary(editorToUse, file.getProject(), editorToUse.getDocument(), startOffset, endOffset);
                if (caretMarker.isValid() && caretModel.getOffset() != caretMarker.getStartOffset()) {
                    caretModel.moveToOffset(caretMarker.getStartOffset());
                }
            }
        });
    } finally {
        PsiDocumentManager documentManager = PsiDocumentManager.getInstance(file.getProject());
        if (documentManager.isUncommited(document))
            documentManager.commitDocument(document);
        if (editorFactory != null) {
            editorFactory.releaseEditor(editor);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(UnaryExpr
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(IfStmt
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(UnaryExpr
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BooleanLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(IfStmt
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

