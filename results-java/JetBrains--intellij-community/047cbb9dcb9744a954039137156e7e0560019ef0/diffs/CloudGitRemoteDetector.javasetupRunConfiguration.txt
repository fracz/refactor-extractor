public void setupRunConfiguration() {
    Module targetModule = null;
    for (Module module : ModuleManager.getInstance(myProject).getModules()) {
        if (myRepositoryRoot.equals(ModuleDeploymentSourceImpl.getContentRoot(module))) {
            targetModule = module;
            break;
        }
    }
    if (targetModule == null) {
        AddModuleWizard wizard = new AddModuleWizard(myProject, myRepositoryRoot.getPath(), new ImportFromSourcesProvider());
        wizard.navigateToStep(new Function<Step, Boolean>() {

            @Override
            public Boolean fun(Step step) {
                return step instanceof RootsDetectionStep;
            }
        });
        if (wizard.getStepCount() > 0 && !wizard.showAndGet()) {
            return;
        }
        ImportModuleAction.createFromWizard(myProject, wizard);
    } else {
        final CloudGitChooseAccountStepBase chooseAccountStep = new CloudGitChooseAccountStepBase(myDeploymentDetector) {

            @Override
            public void updateDataModel() {
            }
        };
        if (!new AbstractProjectWizard(CloudBundle.getText("choose.account.wizzard.title", myCloudName), myProject, (String) null) {

            final StepSequence myStepSequence;

            {
                myStepSequence = new StepSequence(chooseAccountStep);
                addStep(chooseAccountStep);
                init();
            }

            @Override
            public StepSequence getSequence() {
                return myStepSequence;
            }
        }.showAndGet()) {
            return;
        }
        chooseAccountStep.createRunConfiguration(targetModule, myApplicationName);
    }
}||||||||public void setupRunConfiguration() {
    Module targetModule = null;
    for (Module module : ModuleManager.getInstance(myProject).getModules()) {
        if (myRepositoryRoot.equals(ModuleDeploymentSourceImpl.getContentRoot(module))) {
            targetModule = module;
            break;
        }
    }
    if (targetModule == null) {
        AddModuleWizard wizard = new AddModuleWizard(myProject, myRepositoryRoot.getPath(), new ImportFromSourcesProvider());
        wizard.navigateToStep(new Function<Step, Boolean>() {

            @Override
            public Boolean fun(Step step) {
                return step instanceof RootsDetectionStep;
            }
        });
        if (wizard.getStepCount() > 0 && !wizard.showAndGet()) {
            return;
        }
        ImportModuleAction.createFromWizard(myProject, wizard);
    } else {
        final Ref<CloudGitChooseAccountStepBase> chooseAccountStepRef = new Ref<CloudGitChooseAccountStepBase>();
        if (!new AbstractProjectWizard(CloudBundle.getText("choose.account.wizzard.title", myCloudName), myProject, (String) null) {

            final StepSequence myStepSequence;

            {
                CloudGitChooseAccountStepBase chooseAccountStep = new CloudGitChooseAccountStepBase(myDeploymentDetector, myWizardContext);
                chooseAccountStepRef.set(chooseAccountStep);
                myStepSequence = new StepSequence(chooseAccountStep);
                addStep(chooseAccountStep);
                init();
            }

            @Override
            public StepSequence getSequence() {
                return myStepSequence;
            }
        }.showAndGet()) {
            return;
        }
        chooseAccountStepRef.get().createRunConfiguration(targetModule, myApplicationName);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
									)
									(VoidType
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(ObjectCreationExpr
								(FieldDeclaration
									(VariableDeclarator
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(InitializerDeclaration
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
											)
										)
									)
								)
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ReturnStmt
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(ObjectCreationExpr
								(FieldDeclaration
									(VariableDeclarator
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(InitializerDeclaration
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ObjectCreationExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
											)
										)
									)
								)
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ReturnStmt
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)

