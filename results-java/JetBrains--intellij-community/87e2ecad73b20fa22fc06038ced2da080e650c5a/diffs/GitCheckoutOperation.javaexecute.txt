@NotNull
@Override
public GitBranchOperationResult execute(@NotNull final GitRepository repository) {
    final GitMessageWithFilesDetector localChangesOverwrittenByCheckoutDetector = new GitMessageWithFilesDetector(GitMessageWithFilesDetector.Event.LOCAL_CHANGES_OVERWRITTEN_BY_CHECKOUT, repository.getRoot());
    GitSimpleEventDetector unmergedDetector = new GitSimpleEventDetector(GitSimpleEventDetector.Event.UNMERGED);
    GitMessageWithFilesDetector untrackedOverwrittenByCheckout = new GitMessageWithFilesDetector(GitMessageWithFilesDetector.Event.UNTRACKED_FILES_OVERWRITTEN_BY, repository.getRoot());
    GitCommandResult result = Git.checkout(repository, myStartPointReference, myNewBranch, localChangesOverwrittenByCheckoutDetector, unmergedDetector, untrackedOverwrittenByCheckout);
    if (result.success()) {
        refreshRoot(repository);
        return GitBranchOperationResult.success();
    } else if (unmergedDetector.hasHappened()) {
        myDetectedProblem = Problem.UNMERGED_FILES;
        return GitBranchOperationResult.resolvable();
    } else if (localChangesOverwrittenByCheckoutDetector.wasMessageDetected()) {
        myDetectedProblem = Problem.LOCAL_CHANGES_OVERWRITTEN_BY_CHECKOUT;
        // get changes overwritten by checkout from the error message captured from Git
        List<Change> affectedChanges = getChangesAffectedByCheckout(repository, localChangesOverwrittenByCheckoutDetector.getRelativeFilePaths(), true);
        // get changes in all other repositories (except those which already have succeeded) to avoid multiple dialogs proposing smart checkout
        List<GitRepository> remainingRepositories = ContainerUtil.filter(myRepositories, new Condition<GitRepository>() {

            @Override
            public boolean value(GitRepository repo) {
                return !repo.equals(repository) && !myExecutor.getSuccessfulRepositories().contains(repo);
            }
        });
        Map<GitRepository, List<Change>> changesByRepository = collectChangesConflictingWithCheckout(remainingRepositories);
        myProblematicRepositories = new ArrayList<GitRepository>(changesByRepository.keySet());
        myProblematicRepositories.add(repository);
        for (List<Change> changes : changesByRepository.values()) {
            affectedChanges.addAll(changes);
        }
        myLocalChangesOverwrittenByCheckout = affectedChanges;
        return GitBranchOperationResult.resolvable();
    } else if (untrackedOverwrittenByCheckout.wasMessageDetected()) {
        LOG.info("doCheckout: untracked files would be overwritten by checkout");
        myUntrackedFilesWouldBeOverwrittenByCheckout = untrackedOverwrittenByCheckout.getFiles();
        myDetectedProblem = Problem.UNTRACKED_FILES_OVERWRITTEN_BY_CHECKOUT;
        return GitBranchOperationResult.error(getCommonErrorTitle(), result.getErrorOutputAsJoinedString());
    } else {
        return GitBranchOperationResult.error(getCommonErrorTitle(), result.getErrorOutputAsJoinedString());
    }
}||||||||@Override
protected void execute() {
    boolean fatalErrorHappened = false;
    while (hasMoreRepositories() && !fatalErrorHappened) {
        final GitRepository repository = next();
        VirtualFile root = repository.getRoot();
        GitMessageWithFilesDetector localChangesOverwrittenByCheckout = new GitMessageWithFilesDetector(LOCAL_CHANGES_OVERWRITTEN_BY_CHECKOUT, root);
        GitSimpleEventDetector unmergedFiles = new GitSimpleEventDetector(GitSimpleEventDetector.Event.UNMERGED);
        GitMessageWithFilesDetector untrackedOverwrittenByCheckout = new GitMessageWithFilesDetector(UNTRACKED_FILES_OVERWRITTEN_BY, root);
        GitCommandResult result = Git.checkout(repository, myStartPointReference, myNewBranch, localChangesOverwrittenByCheckout, unmergedFiles, untrackedOverwrittenByCheckout);
        if (result.success()) {
            refresh(repository);
            markSuccessful(repository);
        } else if (unmergedFiles.hasHappened()) {
            fatalUnmergedFilesError();
            fatalErrorHappened = true;
        } else if (localChangesOverwrittenByCheckout.wasMessageDetected()) {
            boolean smartCheckoutSucceeded = smartCheckoutOrNotify(repository, localChangesOverwrittenByCheckout);
            if (!smartCheckoutSucceeded) {
                fatalErrorHappened = true;
            }
        } else if (untrackedOverwrittenByCheckout.wasMessageDetected()) {
            fatalUntrackedFilesError(untrackedOverwrittenByCheckout.getFiles());
            fatalErrorHappened = true;
        } else {
            fatalError(getCommonErrorTitle(), result.getErrorOutputAsJoinedString());
            fatalErrorHappened = true;
        }
    }
    if (!fatalErrorHappened) {
        notifySuccess();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BooleanLiteralExpr
										)
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(ObjectCreationExpr
											(MethodDeclaration
												(BlockStmt
													(ReturnStmt
														(BinaryExpr
															(UnaryExpr
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(UnaryExpr
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
													)
												)
												(PrimitiveType
												)
												SimpleName
												(Parameter
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
												(MarkerAnnotationExpr
													Name
												)
											)
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

