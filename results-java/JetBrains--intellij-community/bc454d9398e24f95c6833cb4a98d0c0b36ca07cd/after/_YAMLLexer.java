/* The following code was generated by JFlex 1.4.3 on 7/3/12 12:37 PM */

package org.jetbrains.yaml.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.yaml.YAMLTokenTypes;

/* Auto generated File */

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/3/12 12:37 PM from the specification file
 * <tt>/Users/denofevil/Code/IDEA/tools/lexer/../../plugins/yaml/src/org/jetbrains/yaml/lexer/yaml.flex</tt>
 */
public class _YAMLLexer implements FlexLexer, YAMLTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VALUE_OR_KEY = 6;
  public static final int YYINITIAL = 0;
  public static final int BRACES = 2;
  public static final int VALUE = 4;
  public static final int INDENT_VALUE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\2\1\1\25\0\1\5\1\0\1\15\1\3\1\0\1\13"+
    "\1\0\1\16\3\0\1\23\1\20\1\4\14\0\1\11\3\0\1\6"+
    "\1\21\33\0\1\17\1\14\1\7\35\0\1\12\1\22\1\10\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\1\1\3\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\1\1\13"+
    "\1\1\1\5\1\6\1\1\1\7\1\1\1\14\1\15"+
    "\1\11\1\12\2\1\1\13\2\1\1\14\1\15\1\12"+
    "\1\1\1\16\1\17\1\20\6\0\1\21\1\3\2\22"+
    "\1\0\3\23\1\24\1\0\2\24\2\25\1\23\1\0"+
    "\1\24\3\14\1\24\1\14\3\15\1\24\1\15\2\26"+
    "\1\0\1\24\2\0\1\24\1\13\2\25\2\14\1\21"+
    "\1\14\1\24\1\14\2\15\1\21\1\15\1\24\1\15"+
    "\1\26\1\0\1\26\2\0\2\27\1\30\2\24\1\0"+
    "\1\24\1\0\2\24\1\0\3\14\1\0\3\15\1\14"+
    "\1\0\1\14\2\27\1\15\1\0\1\15\2\27\5\24"+
    "\1\0\3\24\2\14\1\24\3\14\1\24\1\14\2\15"+
    "\1\24\3\15\1\24\1\15\2\24\2\14\1\24\1\14"+
    "\2\15\1\24\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\24\0\50\0\74\0\120\0\144\0\170\0\214"+
    "\0\240\0\264\0\310\0\334\0\360\0\240\0\240\0\u0104"+
    "\0\240\0\240\0\214\0\214\0\u0118\0\u012c\0\u0140\0\u0118"+
    "\0\u0118\0\u0154\0\u0168\0\u017c\0\u0190\0\u01a4\0\240\0\u0118"+
    "\0\u01b8\0\u01cc\0\u01e0\0\u01f4\0\u0208\0\u021c\0\u0230\0\u01cc"+
    "\0\u0244\0\u0258\0\240\0\u026c\0\u0280\0\240\0\u0294\0\u02a8"+
    "\0\214\0\u02bc\0\u02d0\0\u02e4\0\240\0\u02f8\0\u030c\0\240"+
    "\0\u0320\0\u0334\0\u0118\0\u0118\0\u0348\0\u035c\0\240\0\u0370"+
    "\0\u0384\0\u0398\0\u03ac\0\u03c0\0\u03d4\0\u03e8\0\u03fc\0\u0118"+
    "\0\u0410\0\u0424\0\u0438\0\u044c\0\u0460\0\240\0\u0474\0\u0488"+
    "\0\u01cc\0\u01cc\0\u049c\0\u04b0\0\u04c4\0\u04d8\0\u04ec\0\u0500"+
    "\0\u0514\0\u0528\0\u053c\0\u0550\0\u01cc\0\u0564\0\u0578\0\u058c"+
    "\0\u05a0\0\u05b4\0\u05c8\0\u05dc\0\u05f0\0\u0604\0\u0618\0\240"+
    "\0\240\0\u062c\0\240\0\u0640\0\u0654\0\u0668\0\u067c\0\u067c"+
    "\0\u0690\0\u06a4\0\u06b8\0\240\0\u06cc\0\u06e0\0\u06f4\0\u0708"+
    "\0\u071c\0\u0730\0\u0744\0\u0758\0\214\0\u03c0\0\u076c\0\u0780"+
    "\0\u0794\0\u07a8\0\u0410\0\u07bc\0\u07d0\0\u07e4\0\u07f8\0\u080c"+
    "\0\u0668\0\u0820\0\u0834\0\u0848\0\u085c\0\u0870\0\u0884\0\u0898"+
    "\0\u07d0\0\u08ac\0\u08c0\0\u08d4\0\u07f8\0\u08e8\0\u08fc\0\u0910"+
    "\0\u0924\0\u0938\0\u094c\0\u0960\0\u0974\0\u0988\0\u099c\0\u09b0"+
    "\0\u09c4\0\u09d8\0\u099c\0\u09ec\0\u0a00\0\u0a14\0\u0a28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\4\10\1\22\1\23\1\24\2\10"+
    "\1\25\1\11\1\26\1\13\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\25\1\35\1\36\1\22"+
    "\1\37\1\40\1\41\1\25\1\42\1\11\1\43\1\13"+
    "\1\25\1\26\1\44\1\30\1\31\1\20\1\33\1\45"+
    "\1\42\1\46\1\47\1\22\1\23\1\50\1\51\1\42"+
    "\1\52\1\53\1\54\2\52\1\54\16\52\1\55\1\0"+
    "\1\55\3\0\1\55\2\0\1\55\1\0\4\55\1\0"+
    "\4\55\1\0\1\56\1\57\2\0\1\57\40\0\1\60"+
    "\1\0\1\61\1\0\3\61\1\62\1\0\1\61\1\0"+
    "\1\63\1\0\11\61\24\0\1\61\1\0\1\12\2\61"+
    "\1\64\1\0\1\61\1\0\1\63\1\0\11\61\1\13"+
    "\1\0\22\13\1\0\1\65\1\66\1\0\1\67\1\66"+
    "\20\0\1\15\2\0\1\15\16\0\1\61\1\70\1\71"+
    "\2\61\1\72\1\0\1\61\1\0\1\63\1\0\11\61"+
    "\1\73\1\0\1\74\1\0\1\73\1\74\1\73\3\0"+
    "\1\75\1\76\4\73\1\0\3\73\2\0\1\26\2\0"+
    "\1\26\17\0\1\77\1\100\2\0\1\100\17\0\1\70"+
    "\1\101\2\0\1\101\30\0\1\102\11\0\1\73\1\0"+
    "\1\74\1\0\1\73\1\74\1\73\3\0\1\103\1\76"+
    "\4\73\1\0\3\73\1\35\1\104\1\35\1\104\3\35"+
    "\3\104\1\105\1\106\1\107\1\110\2\35\1\104\3\35"+
    "\1\36\1\111\1\36\1\111\3\36\3\111\1\112\1\113"+
    "\1\114\1\36\1\115\1\36\1\111\3\36\1\0\1\116"+
    "\1\117\1\0\1\120\1\117\15\0\1\120\1\121\1\0"+
    "\1\122\1\61\1\121\1\123\1\73\1\61\1\0\1\63"+
    "\1\75\1\124\4\121\1\61\3\121\1\61\1\0\1\43"+
    "\2\61\1\125\1\0\1\61\1\0\1\63\1\0\12\61"+
    "\1\77\1\126\2\61\1\127\1\0\1\61\1\0\1\63"+
    "\1\0\11\61\1\121\1\0\1\122\1\61\1\121\1\123"+
    "\1\73\1\61\1\0\1\63\1\103\1\124\4\121\1\61"+
    "\3\121\1\46\1\104\1\46\1\130\1\46\1\131\1\35"+
    "\1\130\1\104\1\132\1\105\1\133\1\134\1\135\2\46"+
    "\1\130\3\46\1\47\1\111\1\47\1\136\1\47\1\137"+
    "\1\36\1\136\1\111\1\140\1\112\1\141\1\142\1\47"+
    "\1\143\1\47\1\136\3\47\1\61\1\116\1\144\1\61"+
    "\1\145\1\146\1\0\1\61\1\0\1\63\1\0\10\61"+
    "\1\145\1\52\1\0\22\52\2\0\1\54\2\0\1\54"+
    "\16\0\1\55\1\0\3\55\1\147\1\0\1\55\1\0"+
    "\1\150\1\0\11\55\2\0\1\57\2\0\1\57\22\0"+
    "\1\150\16\0\1\150\1\61\1\0\1\61\1\0\1\61"+
    "\1\62\1\0\1\61\1\0\1\63\1\0\11\61\1\0"+
    "\1\151\1\152\2\0\1\152\16\0\1\61\1\0\1\12"+
    "\1\0\1\61\1\64\1\0\1\61\1\0\1\63\1\0"+
    "\11\61\2\0\1\66\2\0\1\66\22\0\1\153\17\0"+
    "\1\61\1\0\1\71\2\61\1\72\1\0\1\61\1\0"+
    "\1\63\1\0\12\61\1\0\1\71\1\0\1\61\1\72"+
    "\1\0\1\61\1\0\1\63\1\0\11\61\1\73\1\0"+
    "\1\74\1\0\1\73\1\74\1\73\3\0\1\154\1\76"+
    "\4\73\1\0\4\73\1\0\1\74\1\0\1\73\1\74"+
    "\1\73\3\0\1\155\1\76\4\73\1\0\3\73\2\0"+
    "\1\100\2\0\1\100\20\0\1\101\2\0\1\101\16\0"+
    "\1\156\1\0\1\156\3\0\1\156\2\0\1\156\1\0"+
    "\4\156\1\0\4\156\1\157\1\0\2\160\1\157\1\160"+
    "\1\157\1\160\1\74\1\160\1\161\1\162\4\157\1\160"+
    "\3\157\14\104\1\163\1\164\6\104\1\35\1\104\1\35"+
    "\1\104\3\35\3\104\1\165\1\106\1\107\1\110\2\35"+
    "\1\104\4\35\1\104\1\35\1\104\3\35\3\104\1\166"+
    "\1\106\1\107\1\110\2\35\1\104\4\35\1\0\1\35"+
    "\1\104\3\35\3\104\1\105\1\106\4\35\1\104\3\35"+
    "\14\111\1\167\1\111\1\170\5\111\1\36\1\111\1\36"+
    "\1\111\3\36\3\111\1\171\1\113\1\114\1\36\1\115"+
    "\1\36\1\111\4\36\1\111\1\36\1\111\3\36\3\111"+
    "\1\172\1\113\1\114\1\36\1\115\1\36\1\111\4\36"+
    "\1\0\1\36\1\111\3\36\3\111\1\112\1\113\4\36"+
    "\1\111\3\36\1\73\1\0\1\74\1\0\1\73\1\74"+
    "\1\73\3\0\1\75\1\76\2\73\1\36\1\73\1\0"+
    "\3\73\2\0\1\117\2\0\1\117\17\0\1\116\1\117"+
    "\2\0\1\117\16\0\1\121\1\0\1\122\1\0\1\121"+
    "\1\123\1\73\1\61\1\0\1\63\1\75\1\124\4\121"+
    "\1\61\4\121\1\0\1\122\1\61\1\121\1\123\1\73"+
    "\1\61\1\0\1\63\1\155\1\124\4\121\1\61\3\121"+
    "\1\61\1\0\1\43\1\0\1\61\1\125\1\0\1\61"+
    "\1\0\1\63\1\0\12\61\1\0\1\126\2\61\1\127"+
    "\1\0\1\61\1\0\1\63\1\0\12\61\1\0\1\126"+
    "\1\0\1\61\1\127\1\0\1\61\1\0\1\63\1\0"+
    "\11\61\1\130\1\104\3\130\1\173\1\104\1\130\1\104"+
    "\1\132\1\104\1\130\1\174\1\175\6\130\1\46\1\104"+
    "\1\46\1\104\1\46\1\131\1\35\1\130\1\104\1\132"+
    "\1\105\1\133\1\134\1\135\2\46\1\130\3\46\1\104"+
    "\1\176\1\177\2\104\1\177\6\104\1\163\1\164\6\104"+
    "\1\46\1\104\1\46\1\130\1\46\1\131\1\35\1\130"+
    "\1\104\1\132\1\166\1\133\1\134\1\135\2\46\1\130"+
    "\4\46\1\0\1\46\1\130\1\46\1\131\1\35\1\130"+
    "\1\104\1\132\1\105\1\133\4\46\1\130\3\46\1\136"+
    "\1\111\3\136\1\200\1\111\1\136\1\111\1\140\1\111"+
    "\1\136\1\201\1\136\1\202\5\136\1\47\1\111\1\47"+
    "\1\111\1\47\1\137\1\36\1\136\1\111\1\140\1\112"+
    "\1\141\1\142\1\47\1\143\1\47\1\136\3\47\1\111"+
    "\1\203\1\204\2\111\1\204\6\111\1\167\1\111\1\170"+
    "\5\111\1\47\1\111\1\47\1\136\1\47\1\137\1\36"+
    "\1\136\1\111\1\140\1\172\1\141\1\142\1\47\1\143"+
    "\1\47\1\136\4\47\1\0\1\47\1\136\1\47\1\137"+
    "\1\36\1\136\1\111\1\140\1\112\1\141\4\47\1\136"+
    "\3\47\1\121\1\0\1\122\1\61\1\121\1\123\1\73"+
    "\1\61\1\0\1\63\1\75\1\124\2\121\1\47\1\121"+
    "\1\61\3\121\1\61\1\0\1\144\2\61\1\146\1\0"+
    "\1\61\1\0\1\63\1\0\12\61\1\116\1\144\2\61"+
    "\1\146\1\0\1\61\1\0\1\63\1\0\12\61\1\0"+
    "\1\144\1\0\1\61\1\146\1\0\1\61\1\0\1\63"+
    "\1\0\11\61\1\55\1\0\1\55\1\0\1\55\1\147"+
    "\1\0\1\55\1\0\1\150\1\0\11\55\2\0\1\152"+
    "\2\0\1\152\16\0\1\205\1\0\1\205\1\0\1\73"+
    "\1\74\1\205\2\0\1\205\1\154\1\206\3\205\1\73"+
    "\4\205\1\207\1\0\6\207\1\73\1\207\1\210\11\207"+
    "\1\211\1\0\1\156\1\0\1\211\1\156\1\73\1\0"+
    "\1\212\1\0\1\75\1\213\3\211\1\73\1\156\3\211"+
    "\1\157\1\0\2\160\1\157\1\160\1\157\1\160\1\74"+
    "\1\160\1\103\1\162\4\157\1\160\3\157\1\214\1\0"+
    "\1\214\1\160\1\157\1\160\1\214\1\160\1\74\1\214"+
    "\1\161\1\215\3\214\1\157\4\214\1\157\1\0\2\160"+
    "\1\157\1\160\1\157\1\160\1\74\1\160\1\155\1\162"+
    "\4\157\1\160\3\157\1\104\1\0\22\104\1\216\1\104"+
    "\1\216\1\104\2\35\1\216\2\104\1\216\1\165\1\217"+
    "\1\220\1\221\1\216\1\35\4\216\1\222\1\104\6\222"+
    "\1\35\1\222\1\223\1\222\1\224\1\225\6\222\1\111"+
    "\1\0\22\111\16\0\1\111\5\0\1\226\1\111\1\226"+
    "\1\111\2\36\1\226\2\111\1\226\1\171\1\227\1\230"+
    "\1\226\1\231\1\36\4\226\1\232\1\111\6\232\1\36"+
    "\1\232\1\233\1\232\1\234\1\232\1\235\5\232\1\130"+
    "\1\104\1\130\1\104\1\130\1\173\1\104\1\130\1\104"+
    "\1\132\1\104\1\130\1\174\1\175\7\130\1\0\3\130"+
    "\1\173\1\104\1\130\1\104\1\132\1\104\11\130\2\104"+
    "\1\177\2\104\1\177\6\104\1\163\1\164\6\104\1\136"+
    "\1\111\1\136\1\111\1\136\1\200\1\111\1\136\1\111"+
    "\1\140\1\111\1\136\1\201\1\136\1\202\6\136\1\0"+
    "\3\136\1\200\1\111\1\136\1\111\1\140\1\111\11\136"+
    "\1\61\1\0\3\61\1\62\1\0\1\61\1\0\1\63"+
    "\1\0\3\61\1\136\5\61\2\111\1\204\2\111\1\204"+
    "\6\111\1\167\1\111\1\170\5\111\1\205\1\0\1\205"+
    "\1\0\2\205\1\73\1\0\1\236\1\0\1\75\1\206"+
    "\3\205\1\73\5\205\1\0\1\205\1\0\2\205\1\73"+
    "\1\0\1\236\1\0\1\155\1\206\3\205\1\73\4\205"+
    "\1\207\1\0\6\207\1\73\1\207\1\155\11\207\1\237"+
    "\1\0\1\237\3\207\1\237\1\207\1\73\1\237\1\210"+
    "\4\237\1\207\4\237\1\73\1\0\1\74\1\0\1\73"+
    "\1\74\1\73\1\0\1\74\1\0\1\75\1\76\4\73"+
    "\1\0\3\73\1\211\1\0\1\156\1\0\1\211\1\156"+
    "\1\73\1\0\1\212\1\0\1\155\1\213\3\211\1\73"+
    "\1\156\3\211\1\214\1\0\1\214\1\160\2\214\1\157"+
    "\1\160\1\236\1\160\1\103\1\215\3\214\1\157\5\214"+
    "\1\0\1\214\1\160\2\214\1\157\1\160\1\236\1\160"+
    "\1\155\1\215\3\214\1\157\4\214\1\216\1\104\1\216"+
    "\1\104\2\216\1\35\1\104\1\240\1\104\1\105\1\217"+
    "\1\220\1\221\1\216\1\35\5\216\1\104\1\216\1\104"+
    "\2\216\1\35\1\104\1\240\1\104\1\166\1\217\1\220"+
    "\1\221\1\216\1\35\5\216\1\0\1\216\1\104\2\216"+
    "\1\35\1\104\1\240\1\104\1\105\1\217\3\216\1\35"+
    "\4\216\1\222\1\104\6\222\1\35\1\222\1\166\1\222"+
    "\1\224\1\225\6\222\1\241\1\104\1\241\3\222\1\241"+
    "\1\222\1\35\1\241\1\223\1\241\1\242\1\243\1\241"+
    "\1\222\4\241\1\222\1\0\6\222\1\35\1\222\1\166"+
    "\11\222\1\226\1\111\1\226\1\111\2\226\1\36\1\111"+
    "\1\244\1\111\1\112\1\227\1\230\1\226\1\231\1\36"+
    "\5\226\1\111\1\226\1\111\2\226\1\36\1\111\1\244"+
    "\1\111\1\172\1\227\1\230\1\226\1\231\1\36\5\226"+
    "\1\0\1\226\1\111\2\226\1\36\1\111\1\244\1\111"+
    "\1\112\1\227\3\226\1\36\4\226\1\205\1\0\1\205"+
    "\1\0\2\205\1\73\1\0\1\236\1\0\1\75\1\206"+
    "\2\205\1\226\1\73\4\205\1\232\1\111\6\232\1\36"+
    "\1\232\1\172\1\232\1\234\1\232\1\235\5\232\1\245"+
    "\1\111\1\245\3\232\1\245\1\232\1\36\1\245\1\233"+
    "\1\245\1\246\1\245\1\247\1\232\4\245\1\232\1\0"+
    "\6\232\1\36\1\232\1\172\11\232\1\207\1\0\6\207"+
    "\1\73\1\207\1\155\3\207\1\232\5\207\1\73\1\0"+
    "\1\74\1\0\1\73\1\74\1\73\1\0\1\73\1\0"+
    "\1\75\1\76\4\73\1\0\3\73\1\237\1\0\1\237"+
    "\1\207\2\237\2\207\1\236\1\207\1\155\4\237\1\207"+
    "\4\237\1\35\1\104\1\35\1\104\3\35\1\104\1\35"+
    "\1\104\1\105\1\106\1\107\1\110\2\35\1\104\3\35"+
    "\1\241\1\104\1\241\1\222\2\241\2\222\1\240\1\222"+
    "\1\166\1\241\1\242\1\243\1\241\1\222\5\241\1\0"+
    "\1\241\1\222\2\241\2\222\1\240\1\222\1\166\4\241"+
    "\1\222\4\241\1\36\1\111\1\36\1\111\3\36\1\111"+
    "\1\36\1\111\1\112\1\113\1\114\1\36\1\115\1\36"+
    "\1\111\3\36\1\245\1\111\1\245\1\232\2\245\2\232"+
    "\1\244\1\232\1\172\1\245\1\246\1\245\1\247\1\232"+
    "\5\245\1\0\1\245\1\232\2\245\2\232\1\244\1\232"+
    "\1\172\4\245\1\232\4\245\1\237\1\0\1\237\1\207"+
    "\2\237\2\207\1\236\1\207\1\155\3\237\1\245\1\207"+
    "\4\237";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\11\4\1\2\11\1\1\2\11\14\1"+
    "\1\11\13\1\1\11\1\1\1\0\1\11\2\1\2\0"+
    "\2\1\1\11\1\1\1\0\1\11\3\1\1\0\2\1"+
    "\1\11\2\1\1\0\13\1\1\11\1\1\1\0\1\1"+
    "\2\0\21\1\1\0\1\1\1\0\2\11\1\1\1\11"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\1\11\2\1"+
    "\1\0\4\1\1\0\4\1\1\0\10\1\1\0\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int valueIndent = 0;
  private boolean afterEOL = false;
  private int braceCount = 0;
  private IElementType valueTokenType = null;
  private int previousState = YYINITIAL;

  private char previousChar() {
    return getChar(-1);
  }

  private char getChar(final int offset) {
    final int loc = getTokenStart()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }

  private char getCharAfter(final int offset) {
    final int loc = getTokenEnd()  + offset;
    return 0 <= loc && loc < zzBuffer.length() ? zzBuffer.charAt(loc) : (char) -1;
  }



  public _YAMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _YAMLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 60) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24:
          { braceCount = 0;
                                    yybegin(YYINITIAL);
                                    return DOCUMENT_MARKER;
          }
        case 25: break;
        case 17:
          { if (zzMarkedPos == zzEndRead){
                                      return SCALAR_KEY;
                                    }
                                    return TEXT;
          }
        case 26: break;
        case 7:
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yybegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACE;
          }
        case 27: break;
        case 21:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(INDENT_VALUE);
                                    //System.out.println("Started SCALAR_TEXT state");
                                    valueIndent = 0; // initialization
                                    afterEOL = false;
                                    valueTokenType = SCALAR_TEXT;
                                    yypushback(1);
          }
        case 28: break;
        case 8:
          { braceCount++;
                                    if (braceCount != 0 && yystate() != BRACES) {
                                      previousState = yystate();
                                    }
                                    yybegin(braceCount == 0 ? previousState: BRACES);
                                    return LBRACKET;
          }
        case 29: break;
        case 4:
          { char prev = previousChar();
                                  // YAML spec: when a comment follows another syntax element,
                                  //  it must be separated from it by space characters.
                                  return (prev == '\n' || prev == '\t' || prev == ' ' || prev == Character.MAX_VALUE) ?
                                         COMMENT : TEXT;
          }
        case 30: break;
        case 15:
          { afterEOL = true;
                                            //System.out.println("Matched EOL:");
                                            if (valueIndent < 0) {
                                                yybegin(YYINITIAL);
                                                //System.out.println("return to initial state");
                                            }
                                            else if (valueIndent == 0) {
                                                valueIndent --;
                                            }
                                            return EOL;
          }
        case 31: break;
        case 20:
          { if (braceCount <= 0) {
                                      char c;
                                      while ((c = getCharAfter(0)) == ' ' || c == ','){
                                        zzMarkedPos++;
                                      }
                                    }
                                    return TEXT;
          }
        case 32: break;
        case 22:
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; }
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; }

            zzFState = 5;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(INDENT_VALUE);
                                    //System.out.println("Started SCALAR_LIST state");
                                    valueIndent = 0; // initialization
                                    afterEOL = false;
                                    valueTokenType = SCALAR_LIST;
                                    yypushback(yylength());
          }
        case 33: break;
        case 10:
          { return QUESTION;
          }
        case 34: break;
        case 9:
          { if (braceCount > 0) {
                                      yybegin(BRACES);
                                      return COMMA;
                                    }
                                    return TEXT;
          }
        case 35: break;
        case 14:
          { if (afterEOL){
                                                yypushback(yylength());
                                                yybegin(YYINITIAL);
                                                //System.out.println("return to initial state");

                                            } else {
                                                afterEOL = false;
                                                if (valueIndent < 0) {
                                                    //System.out.println("Matched TEXT:" + yytext());
                                                    return TEXT;
                                                }
                                                //System.out.println("Matched ValueContext:" + yytext());
                                                return valueTokenType;
                                            }
          }
        case 36: break;
        case 19:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return COLON;
          }
        case 37: break;
        case 2:
          { yybegin(YYINITIAL);
                                    return EOL;
          }
        case 38: break;
        case 12:
          { return SCALAR_DSTRING;
          }
        case 39: break;
        case 6:
          { braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yybegin(previousState);
                                    }
                                    return RBRACE;
          }
        case 40: break;
        case 16:
          { afterEOL = false;
                                            //System.out.println("Matched WHITESPACE:" + yytext());
                                            final int matched = yylength();
                                            if (valueIndent < 0){
                                                valueIndent = matched;
                                                //System.out.println("Indent selected:" + valueIndent);
                                            }
                                            else if (valueIndent > matched) {
                                                yybegin(YYINITIAL);
                                                //System.out.println("return to initial state");
                                            }
                                            return previousChar() == '\n' ? INDENT : WHITESPACE;
          }
        case 41: break;
        case 1:
          { return TEXT;
          }
        case 42: break;
        case 13:
          { return SCALAR_STRING;
          }
        case 43: break;
        case 5:
          { braceCount--;
                                    if (yystate() == BRACES && braceCount == 0){
                                      yybegin(previousState);
                                    }
                                    return RBRACKET;
          }
        case 44: break;
        case 3:
          { final char prev = previousChar();
                                    return prev == (char)-1 || prev == '\n' ? INDENT : WHITESPACE;
          }
        case 45: break;
        case 18:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(VALUE_OR_KEY);
                                    return SEQUENCE_MARKER;
          }
        case 46: break;
        case 23:
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 4;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; }
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; }

            zzFState = 5;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(VALUE);
                                    return SCALAR_KEY;
          }
        case 47: break;
        case 11:
          { return WHITESPACE;
          }
        case 48: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}