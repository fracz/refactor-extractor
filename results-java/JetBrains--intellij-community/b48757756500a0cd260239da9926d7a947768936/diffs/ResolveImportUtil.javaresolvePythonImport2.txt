/**
 * Resolves either <tt>import foo</tt> or <tt>from foo import bar</tt>.
 * @param importRef refers to the name of the module being imported (the <tt>foo</tt>).
 * @param referencedName the name imported from the module (the <tt>bar</tt> in <tt>import from</tt>), or null (for just <tt>import foo</tt>).
 * @return element the name resolves to, or null.
 */
@Nullable
public static PsiElement resolvePythonImport2(final PyReferenceExpression importRef, final String referencedName) {
    // we often catch a reparse while in a process of resolution
    if (!importRef.isValid())
        return null;
    final String the_name = referencedName != null ? referencedName : importRef.getName();
    Set being_imported = myBeingImported.get();
    PsiFile containing_file = importRef.getContainingFile();
    PsiElement last_resolved = null;
    List<PyReferenceExpression> ref_path = PyResolveUtil.unwindQualifiers(importRef);
    // join path to form the FQN: (a, b, c) -> a.b.c.
    StringBuffer pathbuf = new StringBuffer();
    for (PyQualifiedExpression pathelt : ref_path) pathbuf.append(pathelt.getName()).append(".");
    if (referencedName != null)
        pathbuf.append(referencedName);
    final String import_fqname = pathbuf.toString();
    // already trying this path, unable to recurse
    if (being_imported.contains(import_fqname))
        return null;
    try {
        // mark
        being_imported.add(import_fqname);
        // resolve qualifiers
        Iterator<PyReferenceExpression> it = ref_path.iterator();
        if (ref_path.size() > 1) {
            // it was a qualified name
            if (it.hasNext()) {
                // our topmost qualifier, not ourselves for certain
                last_resolved = it.next().resolve();
            } else
                // topmost qualifier not found
                return null;
            while (it.hasNext()) {
                last_resolved = resolveChild(last_resolved, it.next().getName(), containing_file);
                // anything in the chain unresolved means that the whole chain fails
                if (last_resolved == null)
                    return null;
            }
            if (referencedName != null) {
                return resolveChild(last_resolved, referencedName, containing_file);
            } else
                return last_resolved;
        }
        // non-qualified name
        if (referencedName != null) {
            return resolveChild(importRef.resolve(), referencedName, containing_file);
        // the importRef.resolve() does not recurse infinitely because we're asked to resolve referencedName, not importRef itself
        }
        // unqualified import can be found:
        // in the same dir
        PsiFile pfile = importRef.getContainingFile().getOriginalFile();
        if (pfile != null) {
            PsiDirectory pdir = pfile.getContainingDirectory();
            if (pdir != null) {
                PsiElement elt = resolveChild(pdir, the_name, containing_file);
                if (elt != null)
                    return elt;
            }
        }
        final Module module = ModuleUtil.findModuleForPsiElement(importRef);
        if (module != null) {
            // TODO: implement a proper module-like approach in PyCharm for "project's dirs on pythonpath", minding proper search order
            // Current approach works only for IDEA plugin.
            ModuleRootManager rootManager = ModuleRootManager.getInstance(module);
            // look in module sources
            boolean source_entries_missing = true;
            for (ContentEntry entry : rootManager.getContentEntries()) {
                VirtualFile root_file = entry.getFile();
                PsiElement ret = matchToFile(the_name, importRef, root_file);
                if (ret != null)
                    return ret;
                for (VirtualFile folder : entry.getSourceFolderFiles()) {
                    source_entries_missing = false;
                    ret = matchToFile(the_name, importRef, folder);
                    if (ret != null)
                        return ret;
                }
            }
            if (source_entries_missing) {
                // fallback for a case without any source entries: use project root
                VirtualFile project_root = module.getProject().getBaseDir();
                PsiElement ret = matchToFile(the_name, importRef, project_root);
                if (ret != null)
                    return ret;
            }
            // else look in SDK roots
            RootPolicy<PsiElement> resolvePolicy = new RootPolicy<PsiElement>() {

                @Nullable
                public PsiElement visitJdkOrderEntry(final JdkOrderEntry jdkOrderEntry, final PsiElement value) {
                    if (value != null)
                        return value;
                    LookupRootVisitor visitor = new LookupRootVisitor(the_name, importRef.getManager());
                    visitRoots(jdkOrderEntry.getRootFiles(OrderRootType.SOURCES), visitor);
                    return visitor.getResult();
                }
            };
            PsiElement ret = rootManager.processOrder(resolvePolicy, null);
            if (ret != null)
                return ret;
        } else {
            // no module, another way to look in SDK roots
            try {
                for (OrderEntry entry : ProjectRootManager.getInstance(importRef.getProject()).getFileIndex().getOrderEntriesForFile(importRef.getContainingFile().getVirtualFile())) {
                    PsiElement elt = resolveInRoots(entry.getFiles(OrderRootType.SOURCES), the_name, importRef);
                    if (elt != null)
                        return elt;
                }
            } catch (NullPointerException ex) {
                // any cut corners might result in an NPE; resolution fails, but not the IDE.
                return null;
            }
        }
    } finally {
        // unmark
        being_imported.remove(import_fqname);
    }
    // not resolved by any means
    return null;
}||||||||/**
 * Resolves either <tt>import foo</tt> or <tt>from foo import bar</tt>.
 * @param importRef refers to the name of the module being imported (the <tt>foo</tt>).
 * @param referencedName the name imported from the module (the <tt>bar</tt> in <tt>import from</tt>), or null (for just <tt>import foo</tt>).
 * @return element the name resolves to, or null.
 */
@Nullable
public static PsiElement resolvePythonImport2(final PyReferenceExpression importRef, final String referencedName) {
    // we often catch a reparse while in a process of resolution
    if (!importRef.isValid())
        return null;
    final String the_name = referencedName != null ? referencedName : importRef.getName();
    Set being_imported = myBeingImported.get();
    PsiFile containing_file = importRef.getContainingFile();
    PsiElement last_resolved = null;
    List<PyReferenceExpression> ref_path = PyResolveUtil.unwindQualifiers(importRef);
    // join path to form the FQN: (a, b, c) -> a.b.c.
    StringBuffer pathbuf = new StringBuffer();
    for (PyQualifiedExpression pathelt : ref_path) pathbuf.append(pathelt.getName()).append(".");
    if (referencedName != null)
        pathbuf.append(referencedName);
    final String import_fqname = pathbuf.toString();
    // already trying this path, unable to recurse
    if (being_imported.contains(import_fqname))
        return null;
    try {
        // mark
        being_imported.add(import_fqname);
        // resolve qualifiers
        Iterator<PyReferenceExpression> it = ref_path.iterator();
        if (ref_path.size() > 1) {
            // it was a qualified name
            if (it.hasNext()) {
                // our topmost qualifier, not ourselves for certain
                last_resolved = it.next().resolve();
            } else
                // topmost qualifier not found
                return null;
            while (it.hasNext()) {
                last_resolved = resolveChild(last_resolved, it.next().getName(), containing_file, true);
                // anything in the chain unresolved means that the whole chain fails
                if (last_resolved == null)
                    return null;
            }
            if (referencedName != null) {
                return resolveChild(last_resolved, referencedName, containing_file, false);
            } else
                return last_resolved;
        }
        // non-qualified name
        if (referencedName != null) {
            return resolveChild(importRef.resolve(), referencedName, containing_file, false);
        // the importRef.resolve() does not recurse infinitely because we're asked to resolve referencedName, not importRef itself
        }
        // unqualified import can be found:
        // in the same dir
        /*

      final Module module = ModuleUtil.findModuleForPsiElement(importRef);
      if (module != null) {
        // TODO: implement a proper module-like approach in PyCharm for "project's dirs on pythonpath", minding proper search order
        // Current approach works only for IDEA plugin.
        ModuleRootManager rootManager = ModuleRootManager.getInstance(module);
        // look in module sources
        boolean source_entries_missing = true;
        for (ContentEntry entry: rootManager.getContentEntries()) {
          VirtualFile root_file = entry.getFile();

          PsiElement ret = matchToFile(the_name, importRef, root_file);
          if (ret != null) return ret;
          for (VirtualFile folder : entry.getSourceFolderFiles()) {
            source_entries_missing = false;
            ret = matchToFile(the_name, importRef, folder);
            if (ret != null) return ret;
          }
        }
        if (source_entries_missing) {
          // fallback for a case without any source entries: use project root
          VirtualFile project_root = module.getProject().getBaseDir();
          PsiElement ret = matchToFile(the_name, importRef, project_root);
          if (ret != null) return ret;
        }
        // else look in SDK roots
        RootPolicy<PsiElement> resolvePolicy = new RootPolicy<PsiElement>() {
          @Nullable
          public PsiElement visitJdkOrderEntry(final JdkOrderEntry jdkOrderEntry, final PsiElement value) {
            if (value != null) return value;
            LookupRootVisitor visitor = new LookupRootVisitor(the_name, importRef.getManager());
            visitRoots(jdkOrderEntry.getRootFiles(OrderRootType.SOURCES), visitor);
            return visitor.getResult();
          }
        };
        PsiElement ret = rootManager.processOrder(resolvePolicy, null);
        if (ret != null) return ret;
      }
      else {
        // no module, another way to look in SDK roots
        try {
          for (OrderEntry entry: ProjectRootManager.getInstance(importRef.getProject()).getFileIndex().getOrderEntriesForFile(
                importRef.getContainingFile().getVirtualFile()
            )
          ) {
            PsiElement elt = resolveWithinRoots(entry.getFiles(OrderRootType.SOURCES), the_name, importRef);
            if (elt != null) return elt;
          }
        }
        catch (NullPointerException ex) {
          return null; // any cut corners might result in an NPE; resolution fails, but not the IDE.
        }
      }
      */
        PsiElement root_elt = resolveInRoots(importRef, the_name);
        if (root_elt != null)
            return root_elt;
    } finally {
        // unmark
        being_imported.remove(import_fqname);
    }
    // not resolved by any means
    return null;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(ExpressionStmt
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ReturnStmt
								NullLiteralExpr
								LineComment
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
							LineComment
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ReturnStmt
										NullLiteralExpr
									)
									LineComment
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ReturnStmt
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ReturnStmt
										NullLiteralExpr
										LineComment
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ForeachStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(MethodCallExpr
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(ReturnStmt
												NameExpr
													SimpleName
											)
										)
									)
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ReturnStmt
										NameExpr
											SimpleName
									)
								)
								(ForeachStmt
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(ReturnStmt
												NameExpr
													SimpleName
											)
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ReturnStmt
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(MethodDeclaration
											(BlockStmt
												(IfStmt
													(BinaryExpr
														NameExpr
															SimpleName
														NullLiteralExpr
													)
													(ReturnStmt
														NameExpr
															SimpleName
													)
												)
												(ExpressionStmt
													(VariableDeclarationExpr
														(VariableDeclarator
															(ObjectCreationExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(ClassOrInterfaceType
																	SimpleName
																)
															)
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
														SimpleName
													)
												)
												(ReturnStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
											SimpleName
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											(MarkerAnnotationExpr
												Name
											)
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(ExpressionStmt
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ReturnStmt
								NullLiteralExpr
								LineComment
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
							LineComment
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
											SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ReturnStmt
										NullLiteralExpr
									)
									LineComment
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockComment
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(ReturnStmt
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

