public boolean isAvailable(@NotNull final Project project, final Editor editor, final PsiFile file) {
    final PsiElement element = myReference.getElement();
    // not within import
    if (PsiTreeUtil.getParentOfType(element, PyImportStatement.class) != null)
        return false;
    if (PsiTreeUtil.getParentOfType(element, PyFromImportStatement.class) != null)
        return false;
    // don't propose to import unknown fields, etc qualified things
    if (myReference instanceof PyReferenceExpression) {
        final PyExpression qual = ((PyReferenceExpression) myReference).getQualifier();
        if (qual != null)
            return false;
    }
    // don't propose to import unimportable
    if (!(myReference instanceof PyReferenceExpression) || (ResolveImportUtil.resolvePythonImport2((PyReferenceExpression) myReference, null) == null))
        return false;
    // 
    final String referenceName = getRefName();
    final PsiFile[] files = getRefFiles(referenceName);
    return files != null && files.length > 0;
}||||||||public boolean isAvailable(@NotNull final Project project, final Editor editor, final PsiFile file) {
    final PsiElement element = myReference.getElement();
    // not within import
    if (PsiTreeUtil.getParentOfType(element, PyImportStatement.class) != null)
        return false;
    if (PsiTreeUtil.getParentOfType(element, PyFromImportStatement.class) != null)
        return false;
    // don't propose to import unknown fields, etc qualified things
    if (myReference instanceof PyReferenceExpression) {
        final PyExpression qual = ((PyReferenceExpression) myReference).getQualifier();
        if (qual != null)
            return false;
    }
    // don't propose to import unimportable
    if (!(myReference instanceof PyReferenceExpression) || (ResolveImportUtil.resolvePythonImport2((PyReferenceExpression) myReference, null) == null))
        return false;
    // don't propose to import what's already imported, under different name or unsuccessfully for any reason
    final String referenceName = getRefName();
    ImportLookupProcessor ilp = new ImportLookupProcessor(referenceName);
    PyResolveUtil.treeCrawlUp(ilp, element);
    // we found such an import already
    if (ilp.getFound() != null)
        return false;
    /*
    final PsiFile[] files = getRefFiles(referenceName);
    return files != null && files.length > 0;
    */
    return (ResolveImportUtil.resolveInRoots(file, referenceName) != null);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(EnclosedExpr
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							NullLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
				)
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(EnclosedExpr
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(MethodCallExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							NullLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
				)
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ReturnStmt
			(EnclosedExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockComment
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

