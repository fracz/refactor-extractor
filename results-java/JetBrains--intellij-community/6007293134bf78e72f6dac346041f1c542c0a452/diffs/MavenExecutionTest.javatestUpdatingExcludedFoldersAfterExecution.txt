public void testUpdatingExcludedFoldersAfterExecution() throws Exception {
    if (!hasMavenInstallation())
        return;
    new WriteAction<Object>() {

        @Override
        protected void run(Result<Object> objectResult) throws Throwable {
            createStdProjectFolders();
            importProject("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>");
            createProjectSubDirs("target/generated-sources/foo", "target/bar");
        }
    }.execute();
    assertModules("project");
    assertExcludes("project", "target");
    MavenRunnerParameters params = new MavenRunnerParameters(true, getProjectPath(), Arrays.asList("compile"), null);
    execute(params);
    assertSources("project", "src/main/java", "src/main/resources", "target/generated-sources/foo");
    assertExcludes("project", "target/bar", "target/classes", // output dirs are collected twice for exclusion and for compiler output
    "target/classes");
}||||||||public void testUpdatingExcludedFoldersAfterExecution() throws Exception {
    if (!hasMavenInstallation())
        return;
    new WriteAction<Object>() {

        @Override
        protected void run(Result<Object> objectResult) throws Throwable {
            createStdProjectFolders();
            importProject("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>");
            createProjectSubDirs("target/generated-sources/foo", "target/bar");
        }
    }.execute();
    assertModules("project");
    assertExcludes("project", "target");
    MavenRunnerParameters params = new MavenRunnerParameters(true, getProjectPath(), Arrays.asList("compile"), null);
    execute(params);
    SwingUtilities.invokeAndWait(new Runnable() {

        @Override
        public void run() {
        }
    });
    assertSources("project", "src/main/java", "src/main/resources", "target/generated-sources/foo");
    assertExcludes("project", "target/bar", "target/classes", // output dirs are collected twice for exclusion and for compiler output
    "target/classes");
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(BooleanLiteralExpr
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(BooleanLiteralExpr
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

