@Bombed(day = 12, month = Calendar.JULY)
@Test
public void multipleSoftWrappedLogicalLines() {
    String document = "public class Test {\n" + "  public void foo(int[] data) {\n" + "    bar(data[0], data[1], <WRAP>\n" + "       </WRAP>data[2], data[3], <WRAP> \n" + "       </WRAP>data[4], data[5],     \n" + "       data[6], data[7], \n" + "       data[8], data[9], <WRAP>\n" + "       </WRAP>data[10], data[11], <WRAP> \n" + "       </WRAP>data[12], data[13]);     \n" + "  }\n" + "  public void bar(int ... i) {\n" + "  }\n" + "}";
    test(document);
}||||||||@Test
public void multipleSoftWrappedLogicalLines() {
    String document = "public class Test {\n" + "  public void foo(int[] data) {\n" + "    bar(data[0], data[1], <WRAP>\n" + "       </WRAP>data[2], data[3], <WRAP> \n" + "       </WRAP>data[4], data[5],     \n" + "       data[6], data[7], \n" + "       data[8], data[9], <WRAP>\n" + "       </WRAP>data[10], data[11], <WRAP> \n" + "       </WRAP>data[12], data[13]);     \n" + "  }\n" + "  public void bar(int ... i) {\n" + "  }\n" + "}";
    test(document);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	StringLiteralExpr
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			(IntegerLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	StringLiteralExpr
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

