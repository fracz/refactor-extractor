/**
 * Updates current context within the non-soft wrap symbol.
 *
 * @param c   soft wrap symbol to process
 * @return    logical position that matches target visual position if given symbol processing makes it possible to calculate it;
 * <code>null</code> otherwise
 */
@Nullable
public LogicalPosition onNonSoftWrapSymbol(char c) {
    // Don't expect line feed symbol to be delivered to this method in assumption that we process only one logical line here.
    if (c == '\n') {
        assert false;
        return null;
    }
    // Just update information about tracked symbols number if current visual line is too low.
    if (targetVisualPosition.line > visualLineBeforeSoftWrapAppliance + targetSoftWrapLines) {
        symbolsOnCurrentVisualLine += toVisualColumnSymbolsNumber(c);
        symbolsOnCurrentLogicalLine++;
        return null;
    }
    // Hence, we perform this preliminary examination with eager return if necessary.
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    }
    symbolsOnCurrentVisualLine += toVisualColumnSymbolsNumber(c);
    symbolsOnCurrentLogicalLine++;
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    } else {
        return null;
    }
}||||||||/**
 * Updates current context within the non-soft wrap symbol.
 *
 * @param c   soft wrap symbol to process
 * @return    logical position that matches target visual position if given symbol processing makes it possible to calculate it;
 * <code>null</code> otherwise
 */
@Nullable
public LogicalPosition onNonSoftWrapSymbol(char c) {
    // Don't expect line feed symbol to be delivered to this method in assumption that we process only one logical line here.
    if (c == '\n') {
        assert false;
        return null;
    }
    // Just update information about tracked symbols number if current visual line is too low.
    if (targetVisualPosition.line > visualLineBeforeSoftWrapAppliance + targetSoftWrapLines) {
        int columnsForSymbol = toVisualColumnSymbolsNumber(c, symbolsOnCurrentVisualLine);
        symbolsOnCurrentVisualLine += columnsForSymbol;
        symbolsOnCurrentLogicalLine += columnsForSymbol;
        return null;
    }
    // Hence, we perform this preliminary examination with eager return if necessary.
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    }
    int columnsForSymbol = toVisualColumnSymbolsNumber(c, symbolsOnCurrentVisualLine);
    int diffInColumns = targetVisualPosition.column - symbolsOnCurrentVisualLine;
    int incrementToUse = columnsForSymbol;
    if (columnsForSymbol >= diffInColumns) {
        incrementToUse = Math.min(columnsForSymbol, diffInColumns);
    }
    symbolsOnCurrentVisualLine += incrementToUse;
    symbolsOnCurrentLogicalLine += incrementToUse;
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    } else {
        return null;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(AssertStmt
					(BooleanLiteralExpr
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(AssertStmt
					(BooleanLiteralExpr
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

