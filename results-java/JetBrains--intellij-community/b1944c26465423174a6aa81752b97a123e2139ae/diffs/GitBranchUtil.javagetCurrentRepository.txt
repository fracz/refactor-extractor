/**
 * Guesses the Git root on which a Git action is to be invoked.
 * <ol>
 * <li>
 * Returns the root for the selected file. Selected file is determined by {@link #getSelectedFile(com.intellij.openapi.project.Project)}.
 * If selected file is unknown (for example, no file is selected in the Project View or Changes View and no file is open in the editor),
 * continues guessing. Otherwise returns the Git root for the selected file. If the file is not under a known Git root,
 * <code>null</code> will be returned - the file is definitely determined, but it is not under Git.
 * </li>
 * <li>
 * Takes all Git roots registered in the Project. If there is only one, it is returned.
 * </li>
 * <li>
 * If there are several Git roots,
 * </li>
 * </ol>
 *
 * <p>
 * NB: This method has to be accessed from the <b>read action</b>, because it may query
 * {@link com.intellij.openapi.fileEditor.FileEditorManager#getSelectedTextEditor()}.
 * </p>
 * @param project current project
 * @return Git root that may be considered as "current".
 * <code>null</code> is returned if a file not under Git was explicitly selected, if there are no Git roots in the project,
 * or if the current Git root couldn't be determined.
 */
@Nullable
public static GitRepository getCurrentRepository(@NotNull Project project) {
    GitRepositoryManager manager = GitUtil.getRepositoryManager(project);
    VirtualFile file = getSelectedFile(project);
    VirtualFile root = getVcsRootOrGuess(project, file);
    return manager.getRepositoryForRoot(root);
}||||||||/**
 * Guesses the Git root on which a Git action is to be invoked.
 * <ol>
 * <li>
 * Returns the root for the selected file. Selected file is determined by {@link DvcsUtil#getSelectedFile(com.intellij.openapi.project.Project)}.
 * If selected file is unknown (for example, no file is selected in the Project View or Changes View and no file is open in the editor),
 * continues guessing. Otherwise returns the Git root for the selected file. If the file is not under a known Git root,
 * <code>null</code> will be returned - the file is definitely determined, but it is not under Git.
 * </li>
 * <li>
 * Takes all Git roots registered in the Project. If there is only one, it is returned.
 * </li>
 * <li>
 * If there are several Git roots,
 * </li>
 * </ol>
 *
 * <p>
 * NB: This method has to be accessed from the <b>read action</b>, because it may query
 * {@link com.intellij.openapi.fileEditor.FileEditorManager#getSelectedTextEditor()}.
 * </p>
 * @param project current project
 * @return Git root that may be considered as "current".
 * <code>null</code> is returned if a file not under Git was explicitly selected, if there are no Git roots in the project,
 * or if the current Git root couldn't be determined.
 */
@Nullable
public static GitRepository getCurrentRepository(@NotNull Project project) {
    GitRepositoryManager manager = GitUtil.getRepositoryManager(project);
    VirtualFile file = DvcsUtil.getSelectedFile(project);
    VirtualFile root = getVcsRootOrGuess(project, file);
    return manager.getRepositoryForRoot(root);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

