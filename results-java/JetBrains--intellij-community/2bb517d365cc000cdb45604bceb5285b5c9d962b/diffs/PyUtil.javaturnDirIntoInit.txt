/**
 * If argument is a PsiDirectory, turn it into a PsiFile that points to __init__.py in that directory.
 * If there's no __init__.py there, null is returned, there's no point to resolve to a dir which is not a package.
 * Alas, resolve() and multiResolve() can't return anything but a PyFile or PsiFileImpl.isPsiUpToDate() would fail.
 * This is because isPsiUpToDate() relies on identity of objects returned by FileViewProvider.getPsi().
 * If we ever need to exactly tell a dir from __init__.py, that logic has to change.
 *
 * @param target a resolve candidate.
 * @return a PsiFile if target was a PsiDirectory, or null, or target unchanged.
 */
@Nullable
public static PsiElement turnDirIntoInit(PsiElement target) {
    if (target instanceof PsiDirectory) {
        final PsiDirectory dir = (PsiDirectory) target;
        final PsiFile file = dir.findFile(PyNames.INIT_DOT_PY);
        if (file != null) {
            // ResolveImportUtil will extract directory part as needed, everyone else are better off with a file.
            return file;
        } else {
            return null;
        }
    // dir without __init__.py does not resolve
    } else {
        return target;
    }
// don't touch non-dirs
}||||||||/**
 * If argument is a PsiDirectory, turn it into a PsiFile that points to __init__.py in that directory.
 * If there's no __init__.py there, null is returned, there's no point to resolve to a dir which is not a package.
 * Alas, resolve() and multiResolve() can't return anything but a PyFile or PsiFileImpl.isPsiUpToDate() would fail.
 * This is because isPsiUpToDate() relies on identity of objects returned by FileViewProvider.getPsi().
 * If we ever need to exactly tell a dir from __init__.py, that logic has to change.
 *
 * @param target a resolve candidate.
 * @return a PsiFile if target was a PsiDirectory, or null, or target unchanged.
 */
@Nullable
public static PsiElement turnDirIntoInit(@Nullable PsiElement target) {
    if (target instanceof PsiDirectory) {
        final PsiDirectory dir = (PsiDirectory) target;
        final PsiFile file = dir.findFile(PyNames.INIT_DOT_PY);
        if (file != null) {
            // ResolveImportUtil will extract directory part as needed, everyone else are better off with a file.
            return file;
        } else {
            return null;
        }
    // dir without __init__.py does not resolve
    } else {
        return target;
    }
// don't touch non-dirs
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
							LineComment
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
							LineComment
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

