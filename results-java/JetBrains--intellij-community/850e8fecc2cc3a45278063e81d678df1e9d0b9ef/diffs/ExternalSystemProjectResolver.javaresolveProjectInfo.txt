/**
 * Builds object-level representation of the external system config file contained at the given path.
 *
 * @param id                id of the current 'resolve project info' task
 * @param projectPath       absolute path to the target external system config file
 * @param downloadLibraries a hint that specifies if third-party libraries that are not available locally should be resolved (downloaded)
 * @param settings          settings to use for the project resolving;
 * <code>null</code> as indication that no specific settings are required
 * @return object-level representation of the target external system project;
 * <code>null</code> if it's not possible to resolve the project due to the objective reasons
 * @throws ExternalSystemException   in case when unexpected exception occurs during project info construction
 * @throws IllegalArgumentException  if given path is invalid
 * @throws IllegalStateException     if it's not possible to resolve target project info
 */
@Nullable
ExternalProject resolveProjectInfo(@NotNull ExternalSystemTaskId id, @NotNull String projectPath, boolean downloadLibraries, @Nullable S settings) throws ExternalSystemException, IllegalArgumentException, IllegalStateException;||||||||/**
 * Builds object-level representation of the external system config file contained at the given path.
 *
 * @param id                id of the current 'resolve project info' task
 * @param projectPath       absolute path to the target external system config file
 * @param downloadLibraries a hint that specifies if third-party libraries that are not available locally should be resolved (downloaded)
 * @param settings          settings to use for the project resolving;
 * <code>null</code> as indication that no specific settings are required
 * @return object-level representation of the target external system project;
 * <code>null</code> if it's not possible to resolve the project due to the objective reasons
 * @throws ExternalSystemException  in case when unexpected exception occurs during project info construction
 * @throws IllegalArgumentException if given path is invalid
 * @throws IllegalStateException    if it's not possible to resolve target project info
 */
@Nullable
DataHolder<ProjectData> resolveProjectInfo(@NotNull ExternalSystemTaskId id, @NotNull String projectPath, boolean downloadLibraries, @Nullable S settings) throws ExternalSystemException, IllegalArgumentException, IllegalStateException;||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

