private boolean installApp(IDevice device, String remotePath, @NotNull String packageName) throws IOException {
    getProcessHandler().notifyTextAvailable("Installing " + packageName + ".\n", STDOUT);
    MyReceiver receiver = new MyReceiver();
    while (true) {
        if (myStopped)
            return false;
        boolean deviceNotResponding = false;
        try {
            executeDeviceCommandAndWriteToConsole(device, "pm install -r \"" + remotePath + "\"", receiver);
        } catch (ShellCommandUnresponsiveException e) {
            LOG.info(e);
            deviceNotResponding = true;
        }
        if (!deviceNotResponding && receiver.errorType != 1 && receiver.errorType != UNTYPED_ERROR) {
            break;
        }
        getProcessHandler().notifyTextAvailable("Device is not ready. Waiting for " + WAITING_TIME + " sec.\n", STDOUT);
        synchronized (myLock) {
            try {
                myLock.wait(WAITING_TIME * 1000);
            } catch (InterruptedException e) {
                LOG.info(e);
            }
        }
        receiver = new MyReceiver();
    }
    /*if (receiver.failureMessage != null && receiver.failureMessage.equals("INSTALL_FAILED_ALREADY_EXISTS")) {
      if (myStopped) return false;
      receiver = new MyReceiver();
      getProcessHandler().notifyTextAvailable("Application is already installed. Reinstalling.\n", STDOUT);
      executeDeviceCommandAndWriteToConsole(device, "pm install -r \"" + remotePath + '\"', receiver);
      if (myStopped) return false;
    }*/
    /*if (!isSuccess(receiver)) {
      getProcessHandler().notifyTextAvailable("Can't reinstall application. Installing from scratch.\n", STDOUT);
      executeDeviceCommandAndWriteToConsole(device, "pm uninstall \"" + remotePath + '\"', receiver);
      if (myStopped) return false;
      executeDeviceCommandAndWriteToConsole(device, "pm install \"" + remotePath + '\"', receiver);
      if (myStopped) return false;
    }*/
    boolean success = isSuccess(receiver);
    getProcessHandler().notifyTextAvailable(receiver.output.toString(), success ? STDOUT : STDERR);
    return success;
}||||||||private boolean installApp(IDevice device, String remotePath, @NotNull String packageName) throws IOException {
    message("Installing " + packageName, STDOUT);
    MyReceiver receiver = new MyReceiver();
    while (true) {
        if (myStopped)
            return false;
        boolean deviceNotResponding = false;
        try {
            executeDeviceCommandAndWriteToConsole(device, "pm install -r \"" + remotePath + "\"", receiver);
        } catch (ShellCommandUnresponsiveException e) {
            LOG.info(e);
            deviceNotResponding = true;
        }
        if (!deviceNotResponding && receiver.errorType != 1 && receiver.errorType != UNTYPED_ERROR) {
            break;
        }
        message("Device is not ready. Waiting for " + WAITING_TIME + " sec.", STDOUT);
        synchronized (myLock) {
            try {
                myLock.wait(WAITING_TIME * 1000);
            } catch (InterruptedException e) {
                LOG.info(e);
            }
        }
        receiver = new MyReceiver();
    }
    /*if (receiver.failureMessage != null && receiver.failureMessage.equals("INSTALL_FAILED_ALREADY_EXISTS")) {
      if (myStopped) return false;
      receiver = new MyReceiver();
      getProcessHandler().notifyTextAvailable("Application is already installed. Reinstalling.\n", STDOUT);
      executeDeviceCommandAndWriteToConsole(device, "pm install -r \"" + remotePath + '\"', receiver);
      if (myStopped) return false;
    }*/
    /*if (!isSuccess(receiver)) {
      getProcessHandler().notifyTextAvailable("Can't reinstall application. Installing from scratch.\n", STDOUT);
      executeDeviceCommandAndWriteToConsole(device, "pm uninstall \"" + remotePath + '\"', receiver);
      if (myStopped) return false;
      executeDeviceCommandAndWriteToConsole(device, "pm install \"" + remotePath + '\"', receiver);
      if (myStopped) return false;
    }*/
    boolean success = isSuccess(receiver);
    message(receiver.output.toString(), success ? STDOUT : STDERR);
    return success;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(SynchronizedStmt
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ConditionalExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(SynchronizedStmt
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(BooleanLiteralExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ConditionalExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

