@Override
public void visitPyParameterList(final PyParameterList paramlist) {
    final LanguageLevel languageLevel = ((PyFile) paramlist.getContainingFile()).getLanguageLevel();
    ParamHelper.walkDownParamArray(paramlist.getParameters(), new ParamHelper.ParamVisitor() {

        Set<String> parameterNames = new HashSet<String>();

        boolean hadPositionalContainer = false;

        boolean hadKeywordContainer = false;

        boolean hadDefaultValue = false;

        boolean hadSingleStar = false;

        boolean hadParamsAfterSingleStar = false;

        int inTuple = 0;

        @Override
        public void visitNamedParameter(PyNamedParameter parameter, boolean first, boolean last) {
            if (CythonLanguageDialect._isDisabledFor(parameter)) {
                return;
            }
            if (parameterNames.contains(parameter.getName())) {
                markError(parameter, PyBundle.message("ANN.duplicate.param.name"));
            }
            parameterNames.add(parameter.getName());
            if (parameter.isPositionalContainer()) {
                if (hadKeywordContainer) {
                    markError(parameter, PyBundle.message("ANN.starred.param.after.kwparam"));
                }
                hadPositionalContainer = true;
            } else if (parameter.isKeywordContainer()) {
                hadKeywordContainer = true;
                if (hadSingleStar && !hadParamsAfterSingleStar) {
                    markError(parameter, PyBundle.message("ANN.named.arguments.after.star"));
                }
            } else {
                if (hadSingleStar) {
                    hadParamsAfterSingleStar = true;
                }
                if (hadPositionalContainer && !languageLevel.isPy3K()) {
                    markError(parameter, PyBundle.message("ANN.regular.param.after.vararg"));
                } else if (hadKeywordContainer) {
                    markError(parameter, PyBundle.message("ANN.regular.param.after.keyword"));
                }
                if (parameter.hasDefaultValue()) {
                    hadDefaultValue = true;
                } else {
                    if (hadDefaultValue && !hadSingleStar && (!languageLevel.isPy3K() || !hadPositionalContainer) && inTuple == 0) {
                        markError(parameter, PyBundle.message("ANN.non.default.param.after.default"));
                    }
                }
            }
        }

        @Override
        public void enterTupleParameter(PyTupleParameter param, boolean first, boolean last) {
            inTuple++;
            if (languageLevel.isPy3K()) {
                markError(param, PyBundle.message("ANN.tuple.py3"));
            } else if (!param.hasDefaultValue() && hadDefaultValue) {
                markError(param, PyBundle.message("ANN.non.default.param.after.default"));
            }
        }

        @Override
        public void leaveTupleParameter(PyTupleParameter param, boolean first, boolean last) {
            inTuple--;
        }

        @Override
        public void visitSingleStarParameter(PySingleStarParameter param, boolean first, boolean last) {
            hadSingleStar = true;
            if (last) {
                markError(param, PyBundle.message("ANN.named.arguments.after.star"));
            }
        }
    });
}||||||||@Override
public void visitPyParameterList(final PyParameterList paramlist) {
    if (MakoLanguage._isDisabledFor(paramlist))
        return;
    final LanguageLevel languageLevel = ((PyFile) paramlist.getContainingFile()).getLanguageLevel();
    ParamHelper.walkDownParamArray(paramlist.getParameters(), new ParamHelper.ParamVisitor() {

        Set<String> parameterNames = new HashSet<String>();

        boolean hadPositionalContainer = false;

        boolean hadKeywordContainer = false;

        boolean hadDefaultValue = false;

        boolean hadSingleStar = false;

        boolean hadParamsAfterSingleStar = false;

        int inTuple = 0;

        @Override
        public void visitNamedParameter(PyNamedParameter parameter, boolean first, boolean last) {
            if (CythonLanguageDialect._isDisabledFor(parameter)) {
                return;
            }
            if (parameterNames.contains(parameter.getName())) {
                markError(parameter, PyBundle.message("ANN.duplicate.param.name"));
            }
            parameterNames.add(parameter.getName());
            if (parameter.isPositionalContainer()) {
                if (hadKeywordContainer) {
                    markError(parameter, PyBundle.message("ANN.starred.param.after.kwparam"));
                }
                hadPositionalContainer = true;
            } else if (parameter.isKeywordContainer()) {
                hadKeywordContainer = true;
                if (hadSingleStar && !hadParamsAfterSingleStar) {
                    markError(parameter, PyBundle.message("ANN.named.arguments.after.star"));
                }
            } else {
                if (hadSingleStar) {
                    hadParamsAfterSingleStar = true;
                }
                if (hadPositionalContainer && !languageLevel.isPy3K()) {
                    markError(parameter, PyBundle.message("ANN.regular.param.after.vararg"));
                } else if (hadKeywordContainer) {
                    markError(parameter, PyBundle.message("ANN.regular.param.after.keyword"));
                }
                if (parameter.hasDefaultValue()) {
                    hadDefaultValue = true;
                } else {
                    if (hadDefaultValue && !hadSingleStar && (!languageLevel.isPy3K() || !hadPositionalContainer) && inTuple == 0) {
                        markError(parameter, PyBundle.message("ANN.non.default.param.after.default"));
                    }
                }
            }
        }

        @Override
        public void enterTupleParameter(PyTupleParameter param, boolean first, boolean last) {
            inTuple++;
            if (languageLevel.isPy3K()) {
                markError(param, PyBundle.message("ANN.tuple.py3"));
            } else if (!param.hasDefaultValue() && hadDefaultValue) {
                markError(param, PyBundle.message("ANN.non.default.param.after.default"));
            }
        }

        @Override
        public void leaveTupleParameter(PyTupleParameter param, boolean first, boolean last) {
            inTuple--;
        }

        @Override
        public void visitSingleStarParameter(PySingleStarParameter param, boolean first, boolean last) {
            hadSingleStar = true;
            if (last) {
                markError(param, PyBundle.message("ANN.named.arguments.after.star"));
            }
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					(FieldDeclaration
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(MethodDeclaration
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ReturnStmt
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(IfStmt
											NameExpr
												SimpleName
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(UnaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(IfStmt
												NameExpr
													SimpleName
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(IfStmt
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(UnaryExpr
																	NameExpr
																		SimpleName
																)
															)
															(EnclosedExpr
																(BinaryExpr
																	(UnaryExpr
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(UnaryExpr
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
															)
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
									)
								)
								(BlockStmt
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					(FieldDeclaration
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(FieldDeclaration
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(MethodDeclaration
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ReturnStmt
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(IfStmt
											NameExpr
												SimpleName
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(UnaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(IfStmt
												NameExpr
													SimpleName
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(IfStmt
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(UnaryExpr
																	NameExpr
																		SimpleName
																)
															)
															(EnclosedExpr
																(BinaryExpr
																	(UnaryExpr
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(UnaryExpr
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
															)
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
									)
								)
								(BlockStmt
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(Parameter
							SimpleName
							(PrimitiveType
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

