private static IntentionAction createUnusedImportIntention() {
    return new IntentionAction() {

        @NotNull
        public String getText() {
            return GroovyInspectionBundle.message("optimize.all.imports");
        }

        @NotNull
        public String getFamilyName() {
            return GroovyInspectionBundle.message("optimize.imports");
        }

        public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {
            return true;
        }

        public void invoke(@NotNull final Project project, Editor editor, PsiFile file) {
            if (!FileModificationService.getInstance().prepareFileForWrite(file))
                return;
            final Runnable runnable = new GroovyImportOptimizer().processFile(file);
            CommandProcessor.getInstance().executeCommand(project, runnable, "optimize imports", this);
        }

        public boolean startInWriteAction() {
            return true;
        }
    };
}||||||||private static IntentionAction createUnusedImportIntention() {
    return new IntentionAction() {

        @Override
        @NotNull
        public String getText() {
            return GroovyInspectionBundle.message("optimize.all.imports");
        }

        @Override
        @NotNull
        public String getFamilyName() {
            return GroovyInspectionBundle.message("optimize.imports");
        }

        @Override
        public boolean isAvailable(@NotNull Project project, Editor editor, PsiFile file) {
            return true;
        }

        @Override
        public void invoke(@NotNull final Project project, Editor editor, PsiFile file) {
            if (!FileModificationService.getInstance().prepareFileForWrite(file))
                return;
            final Runnable runnable = new GroovyImportOptimizer().processFile(file);
            CommandProcessor.getInstance().executeCommand(project, runnable, "optimize imports", this);
        }

        @Override
        public boolean startInWriteAction() {
            return true;
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(Parameter
						(MarkerAnnotationExpr
							Name
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								StringLiteralExpr
								(ThisExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						(MarkerAnnotationExpr
							Name
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(Parameter
						(MarkerAnnotationExpr
							Name
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								StringLiteralExpr
								(ThisExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						(MarkerAnnotationExpr
							Name
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)

