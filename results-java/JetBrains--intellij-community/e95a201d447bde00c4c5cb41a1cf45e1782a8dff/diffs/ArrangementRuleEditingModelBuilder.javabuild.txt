/**
 * Does the following:
 * <pre>
 * <ol>
 * <li>
 * {@link HierarchicalArrangementSettingsNode Groups} given {@link ArrangementSettingsNode settings} using
 * the given {@link ArrangementStandardSettingsRepresentationAware#group(ArrangementSettingsNode) strategy};
 * </li>
 * <li>
 * Build {@link DefaultMutableTreeNode tree nodes} for the {@link HierarchicalArrangementSettingsNode groiping-aware nodes}
 * and register them within the target tree structure (denoted by the given settings root element);
 * </li>
 * <li>
 * Build necessary {@link ArrangementRuleEditingModel editing models} and store them at the given container (a key is a node row);
 * </li>
 * </ol>
 * </pre>
 *
 * @param setting      target settings to process
 * @param root         UI tree settings root to use
 * @param grouper      strategy that knows how to
 * {@link ArrangementStandardSettingsRepresentationAware#getDisplayValue(ArrangementModifier) group} setting
 * nodes for UI representation
 * @param rowMappings  container to hold built {@link ArrangementRuleEditingModel editing models} (UI tree row numbers are used as keys)
 */
public void build(@NotNull ArrangementSettingsNode setting, @NotNull DefaultMutableTreeNode root, @NotNull ArrangementSettingsGrouper grouper, @NotNull TIntObjectHashMap<ArrangementRuleEditingModel> rowMappings) {
    HierarchicalArrangementSettingsNode grouped = grouper.group(setting);
}||||||||/**
 * Does the following:
 * <pre>
 * <ol>
 * <li>
 * {@link HierarchicalArrangementSettingsNode Groups} given {@link ArrangementSettingsNode settings} using
 * the given {@link ArrangementSettingsGrouper#group(ArrangementSettingsNode) strategy};
 * </li>
 * <li>
 * Build {@link DefaultMutableTreeNode tree nodes} for the {@link HierarchicalArrangementSettingsNode groiping-aware nodes}
 * and register them within the target tree structure (denoted by the given settings root element);
 * </li>
 * <li>
 * Build necessary {@link ArrangementRuleEditingModel editing models} and store them at the given container (a key is a node row);
 * </li>
 * </ol>
 * </pre>
 *
 * @param setting     target settings to process
 * @param tree        UI tree which shows arrangement matcher rules
 * @param root        UI tree settings root to use (may be not the same as the tree root)
 * @param grouper     strategy that knows how to
 * {@link ArrangementStandardSettingsRepresentationAware#getDisplayValue(ArrangementModifier) group} setting
 * nodes for UI representation
 * @param rowMappings container to hold built {@link ArrangementRuleEditingModel editing models} (UI tree row numbers are used as keys)
 */
@SuppressWarnings("MethodMayBeStatic")
public void build(@NotNull ArrangementSettingsNode setting, @NotNull JTree tree, @NotNull DefaultMutableTreeNode root, @NotNull ArrangementSettingsGrouper grouper, @NotNull TIntObjectHashMap<ArrangementRuleEditingModel> rowMappings) {
    int initialInsertRow = 0;
    // Count rows before the settings root.
    for (TreeNode n = root.getParent(); n != null; n = n.getParent()) {
        for (int i = n.getChildCount() - 1; i >= 0; i--) {
            TreeNode child = n.getChildAt(i);
            if (child != root) {
                initialInsertRow += calculateRowsCount(child);
            }
        }
        initialInsertRow++;
    }
    // Count root width.
    initialInsertRow += calculateRowsCount(root);
    if (!tree.isRootVisible()) {
        initialInsertRow--;
    }
    HierarchicalArrangementSettingsNode grouped = grouper.group(setting);
    int rowsCreated = map(root, grouped);
    ArrangementRuleEditingModelImpl model = new ArrangementRuleEditingModelImpl(setting);
    rowMappings.put(initialInsertRow + rowsCreated - 1, model);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)

