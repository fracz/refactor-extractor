/* The following code was generated by JFlex 1.4.3 on 3/28/13 3:36 PM */

/* It's an automatically generated code. Do not modify it. */
package com.jetbrains.python.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/28/13 3:36 PM from the specification file
 * <tt>./Python.flex</tt>
 */
class _PythonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int PENDING_DOCSTRING = 2;
  public static final int USUAL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\41\1\37\1\0\1\42\1\13\22\0\1\40\1\73\1\36"+
    "\1\12\1\0\1\65\1\66\1\34\1\75\1\76\1\63\1\61\1\104"+
    "\1\26\1\23\1\64\1\1\1\5\6\3\2\2\1\105\1\107\1\72"+
    "\1\62\1\71\1\0\1\103\1\15\1\20\1\31\1\15\1\25\1\15"+
    "\3\14\1\27\1\14\1\21\2\14\1\17\2\14\1\32\2\14\1\32"+
    "\2\14\1\16\2\14\1\77\1\35\1\100\1\70\1\14\1\106\1\43"+
    "\1\10\1\30\1\45\1\24\1\4\1\56\1\60\1\52\1\27\1\51"+
    "\1\11\1\55\1\44\1\7\1\53\1\14\1\47\1\46\1\50\1\33"+
    "\1\14\1\57\1\6\1\54\1\14\1\101\1\67\1\102\1\74\53\0"+
    "\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\0\7\14\30\14"+
    "\1\0\10\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\2\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\2\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\2\14\1\14\1\14\1\14\1\14\3\14\2\14\1\14\1\14\1\14"+
    "\2\14\1\14\3\14\2\14\4\14\1\14\2\14\1\14\3\14\3\14"+
    "\2\14\1\14\2\14\1\14\1\14\1\14\1\14\1\14\2\14\1\14"+
    "\1\14\2\14\1\14\1\14\2\14\1\14\3\14\1\14\1\14\1\14"+
    "\2\14\2\14\1\14\1\14\3\14\4\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\2\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\2\14\1\14"+
    "\1\14\1\14\1\14\1\14\3\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\4\14\31\0\140\14\22\14\4\0\14\14\16\0"+
    "\5\14\11\0\1\14\21\0\130\22\5\0\23\22\12\0\1\14\13\0"+
    "\1\14\1\0\3\14\1\0\1\14\1\0\2\14\1\14\21\14\1\0"+
    "\11\14\43\14\1\0\2\14\3\14\3\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\5\14"+
    "\1\14\1\14\1\0\1\14\1\14\2\14\1\14\4\0\60\14\60\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\0\4\22\3\0\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\2\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\0\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\2\0\1\14\1\14\6\0\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\41\0\46\14\2\0\1\14\7\0\47\14"+
    "\11\0\21\22\1\0\27\22\1\0\3\22\1\0\1\22\1\0\2\22"+
    "\1\0\1\22\13\0\33\14\5\0\3\14\35\0\6\22\13\0\32\14"+
    "\5\0\1\14\12\14\16\22\7\0\12\22\4\0\2\14\1\22\143\14"+
    "\1\0\1\14\7\22\2\0\6\22\2\14\2\22\1\0\4\22\2\14"+
    "\12\22\3\14\2\0\1\14\20\0\1\14\1\22\36\14\33\22\2\0"+
    "\3\14\60\0\46\14\13\22\1\14\u014f\0\2\22\1\22\66\14\2\0"+
    "\1\22\1\14\3\22\10\22\4\22\1\22\2\0\1\14\4\22\3\0"+
    "\12\14\2\22\2\0\12\22\21\0\1\22\2\22\1\0\10\14\2\0"+
    "\2\14\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\2\0"+
    "\1\22\1\14\3\22\4\22\2\0\2\22\2\0\2\22\1\22\11\0"+
    "\1\22\4\0\2\14\1\0\3\14\2\22\2\0\12\22\2\14\17\0"+
    "\2\22\1\22\1\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\22\1\0\3\22"+
    "\2\22\4\0\2\22\2\0\3\22\13\0\4\14\1\0\1\14\7\0"+
    "\12\22\2\22\3\14\14\0\2\22\1\22\1\0\11\14\1\0\3\14"+
    "\1\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\22"+
    "\1\14\3\22\5\22\1\0\2\22\1\22\1\0\2\22\1\22\2\0"+
    "\1\14\17\0\2\14\2\22\2\0\12\22\21\0\1\22\2\22\1\0"+
    "\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\22\1\14\1\22\1\22\1\22\3\22\3\0\2\22"+
    "\2\0\2\22\1\22\10\0\1\22\1\22\4\0\2\14\1\0\3\14"+
    "\4\0\12\22\1\0\1\14\20\0\1\22\1\14\1\0\6\14\3\0"+
    "\3\14\1\0\4\14\3\0\2\14\1\0\1\14\1\0\2\14\3\0"+
    "\2\14\3\0\3\14\3\0\10\14\1\0\3\14\4\0\2\22\1\22"+
    "\2\22\3\0\3\22\1\0\3\22\1\22\11\0\1\22\17\0\11\22"+
    "\21\0\3\22\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14"+
    "\1\0\5\14\4\0\3\22\4\22\1\0\3\22\1\0\4\22\7\0"+
    "\2\22\11\0\2\14\4\0\12\22\22\0\2\22\1\0\10\14\1\0"+
    "\3\14\1\0\27\14\1\0\12\14\1\0\5\14\2\0\1\22\1\14"+
    "\1\22\1\22\5\22\1\0\1\22\2\22\1\0\2\22\2\22\7\0"+
    "\2\22\7\0\1\14\1\0\2\14\4\0\12\22\22\0\2\22\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\20\14\4\0\3\22\3\22"+
    "\2\0\3\22\1\0\3\22\1\22\11\0\1\22\10\0\2\14\4\0"+
    "\12\22\22\0\2\22\1\0\22\14\3\0\30\14\1\0\11\14\1\0"+
    "\1\14\2\0\7\14\3\0\1\22\4\0\3\22\3\22\1\0\1\22"+
    "\1\0\10\22\22\0\2\22\15\0\60\14\1\22\2\14\7\22\5\0"+
    "\6\14\1\14\10\22\1\0\12\22\47\0\2\14\1\0\1\14\2\0"+
    "\2\14\1\0\1\14\2\0\1\14\6\0\4\14\1\0\7\14\1\0"+
    "\3\14\1\0\1\14\1\0\1\14\2\0\2\14\1\0\4\14\1\22"+
    "\2\14\6\22\1\0\2\22\1\14\2\0\5\14\1\0\1\14\1\0"+
    "\6\22\2\0\12\22\2\0\2\14\42\0\1\14\27\0\2\22\6\0"+
    "\12\22\13\0\1\22\1\0\1\22\1\0\1\22\4\0\2\22\10\14"+
    "\1\0\42\14\6\0\16\22\1\22\5\22\1\0\2\22\4\14\4\0"+
    "\10\22\1\0\44\22\11\0\1\22\71\0\42\14\1\0\5\14\1\0"+
    "\2\14\1\0\1\22\4\22\1\22\1\22\3\0\2\22\1\22\1\22"+
    "\6\0\12\22\6\0\6\14\2\22\2\22\106\0\46\14\12\0\51\14"+
    "\7\0\132\14\5\0\104\14\5\0\122\14\6\0\7\14\1\0\77\14"+
    "\1\0\1\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\47\14\1\0\1\14\1\0\4\14\2\0\37\14\1\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\0\7\14\1\0\27\14\1\0\37\14\1\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\0\47\14\1\0\23\14\16\0\11\22\56\0\125\14"+
    "\14\0\u026c\14\2\0\10\14\12\0\32\14\5\0\113\14\3\0\3\14"+
    "\17\0\15\14\1\0\4\14\3\22\13\0\22\14\3\22\13\0\22\14"+
    "\2\22\14\0\15\14\1\0\3\14\1\0\2\22\14\0\64\14\2\0"+
    "\1\22\7\22\10\22\1\22\2\22\13\22\3\0\1\14\4\0\1\14"+
    "\1\22\2\0\12\22\41\0\3\22\2\0\12\22\6\0\43\14\1\14"+
    "\64\14\10\0\51\14\1\22\126\0\35\14\3\0\3\22\4\22\2\22"+
    "\3\22\4\0\2\22\1\22\6\22\3\22\12\0\12\22\36\14\2\0"+
    "\5\14\u038b\0\54\14\66\14\12\14\224\0\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\7\14\4\0\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14\1\14"+
    "\1\14\1\14\1\14\1\14\1\14\1\14\1\14\6\0\10\14\10\14"+
    "\6\14\2\0\6\14\2\0\10\14\10\14\10\14\10\14\6\14\2\0"+
    "\6\14\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\10\14\10\14\16\14\2\0\10\14\10\14\10\14\10\14\10\14"+
    "\10\14\5\14\1\0\2\14\4\14\1\14\1\0\1\14\3\0\3\14"+
    "\1\0\2\14\4\14\1\14\3\0\4\14\2\0\2\14\4\14\4\0"+
    "\10\14\5\14\5\0\3\14\1\0\2\14\4\14\1\14\102\0\2\22"+
    "\23\0\1\22\34\0\1\14\15\0\1\14\120\0\15\22\4\0\1\22"+
    "\3\0\6\22\27\0\1\14\4\0\1\14\2\0\1\14\3\14\2\14"+
    "\3\14\1\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\0\1\14\2\14\1\0\1\14\1\14"+
    "\4\14\1\14\3\0\1\14\2\14\5\0\1\14\4\14\26\0\44\14"+
    "\u0e81\0\1\14\1\14\1\14\31\0\11\14\6\22\1\0\5\14\2\0"+
    "\3\14\1\14\1\14\4\0\126\14\2\0\2\22\2\0\2\14\1\14"+
    "\1\0\132\14\1\22\3\14\1\14\5\0\50\14\4\0\136\14\21\0"+
    "\30\14\70\0\20\14\u0200\0\u19b6\14\112\0\u51a6\14\132\0\u048d\14\u0773\0"+
    "\u2ba4\14\u215c\0\u012e\14\2\0\73\14\225\0\7\14\14\0\5\14\5\0"+
    "\1\14\1\22\12\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0"+
    "\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14\2\0"+
    "\66\14\50\0\14\14\4\0\20\22\20\0\4\22\17\0\2\22\30\0"+
    "\3\22\40\0\5\14\1\0\207\14\23\0\12\22\7\0\32\14\4\0"+
    "\1\22\1\0\32\14\12\0\1\22\12\14\1\14\55\14\2\14\37\14"+
    "\3\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\2\11\1\12\2\13\6\14\1\15\1\14\1\16"+
    "\1\14\2\17\12\14\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\12\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\43\1\0\3\11\1\46\3\11\1\13"+
    "\4\0\1\13\1\47\1\0\1\50\3\14\1\51\5\14"+
    "\1\52\2\14\6\17\7\14\1\53\1\54\1\55\5\14"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\2\0\1\11\1\77\1\100\1\0\1\77\3\13"+
    "\1\47\1\0\1\101\12\14\1\17\2\102\1\103\1\14"+
    "\1\104\1\105\1\106\2\14\1\107\5\14\1\110\1\111"+
    "\1\112\1\113\3\0\2\100\1\0\1\114\1\14\2\0"+
    "\3\14\1\115\1\116\2\14\4\0\4\14\1\117\3\14"+
    "\3\0\2\77\1\0\1\14\2\0\1\120\3\14\1\121"+
    "\1\0\2\102\1\0\2\14\1\122\1\14\1\123\1\14"+
    "\1\124\3\77\1\14\1\125\1\126\1\14\3\102\1\127"+
    "\1\130\1\131\1\132\2\0\1\133\1\14\2\0\2\77"+
    "\1\134\2\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u01b0\0\u01f8\0\u0240\0\u0120"+
    "\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480"+
    "\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0"+
    "\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900"+
    "\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40"+
    "\0\u0b88\0\u0bd0\0\u0c18\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0c60\0\u0120\0\u0120\0\u0120"+
    "\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0120\0\u0dc8\0\u0e10\0\u0e58"+
    "\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u0120\0\u1008\0\u1050"+
    "\0\u0120\0\u1098\0\u10e0\0\u1128\0\u0360\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u0120\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638"+
    "\0\u1680\0\u16c8\0\u0360\0\u0360\0\u0360\0\u1710\0\u1758\0\u17a0"+
    "\0\u17e8\0\u1830\0\u0120\0\u0120\0\u0120\0\u1878\0\u0120\0\u18c0"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u1908\0\u0120\0\u0120"+
    "\0\u1950\0\u0120\0\u0120\0\u0c60\0\u1998\0\u19e0\0\u1a28\0\u0120"+
    "\0\u19e0\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u0360"+
    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u0120\0\u1ef0\0\u1f38\0\u0360\0\u1f80\0\u0360"+
    "\0\u0360\0\u0360\0\u1fc8\0\u2010\0\u0360\0\u2058\0\u20a0\0\u20e8"+
    "\0\u2130\0\u2178\0\u0120\0\u0120\0\u0120\0\u0120\0\u21c0\0\u2208"+
    "\0\u2250\0\u2298\0\u22e0\0\u2328\0\u0360\0\u2370\0\u23b8\0\u2400"+
    "\0\u2448\0\u2490\0\u24d8\0\u0360\0\u0360\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u0360"+
    "\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0\0\u29e8"+
    "\0\u2a30\0\u2a78\0\u13b0\0\u14d0\0\u0360\0\u2ac0\0\u2b08\0\u2b50"+
    "\0\u0360\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u0360"+
    "\0\u2d48\0\u0360\0\u2d90\0\u0360\0\u19e0\0\u2dd8\0\u2e20\0\u2e68"+
    "\0\u0360\0\u0360\0\u2eb0\0\u0120\0\u2ef8\0\u2f40\0\u0360\0\u0360"+
    "\0\u0360\0\u0360\0\u2f88\0\u2fd0\0\u0360\0\u3018\0\u3060\0\u30a8"+
    "\0\u2958\0\u2a30\0\u0360\0\u2b98\0\u2c70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\5\1\6\22\5\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\45\5\10\14\1\15\1\14\1\6\5\14\1\15"+
    "\7\14\4\15\1\16\1\7\1\17\1\10\1\11\1\12"+
    "\1\13\4\14\1\15\40\14\1\20\1\21\2\22\1\23"+
    "\1\22\1\24\1\25\1\26\1\27\1\6\1\20\4\24"+
    "\1\30\1\24\1\20\1\31\1\32\1\24\1\33\1\24"+
    "\1\34\3\30\1\35\1\7\1\36\1\10\1\11\1\12"+
    "\1\13\1\37\1\40\1\41\1\24\1\42\1\43\1\24"+
    "\1\44\1\45\1\46\1\24\1\47\1\50\1\24\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\20\1\21"+
    "\2\22\1\23\1\22\1\24\1\25\1\26\1\27\1\6"+
    "\1\20\4\24\1\30\1\24\1\20\1\31\1\32\1\24"+
    "\1\33\1\24\1\34\3\30\1\35\1\7\1\36\1\10"+
    "\1\11\1\12\1\13\1\37\1\40\1\41\1\24\1\42"+
    "\1\43\1\24\1\44\1\45\1\46\1\24\1\47\1\50"+
    "\1\24\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\100\1\76\1\77"+
    "\110\0\13\6\1\0\23\6\1\0\50\6\10\0\1\101"+
    "\7\0\1\101\7\0\4\101\1\16\1\0\1\17\10\0"+
    "\1\101\40\0\13\102\1\0\20\102\1\103\1\104\1\102"+
    "\1\105\50\102\13\106\1\0\21\106\1\107\1\110\1\105"+
    "\50\106\1\0\1\111\1\112\1\111\1\0\1\111\1\113"+
    "\1\114\1\115\1\116\4\0\1\113\1\114\1\115\1\116"+
    "\1\0\1\117\2\120\1\0\1\121\61\0\3\22\1\0"+
    "\1\22\3\0\1\116\7\0\1\116\1\0\1\117\2\120"+
    "\1\0\1\121\61\0\6\24\1\122\2\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\4\24\1\123\2\24"+
    "\1\124\6\24\30\0\11\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\16\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\4\24\1\125\11\24"+
    "\30\0\7\24\1\126\1\24\2\0\4\24\1\126\2\24"+
    "\1\0\2\24\1\0\1\24\4\126\1\35\1\0\1\36"+
    "\4\0\4\24\1\127\11\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\1\130\15\24\30\0"+
    "\7\24\1\126\1\24\2\0\4\24\1\126\2\24\1\0"+
    "\2\24\1\0\1\24\4\126\1\35\1\0\1\36\4\0"+
    "\4\24\1\126\11\24\30\0\3\117\1\0\1\117\103\0"+
    "\5\24\1\131\2\24\1\132\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\16\24\111\0\1\133\26\0\6\24"+
    "\1\134\1\126\1\135\2\0\4\24\1\126\2\24\1\0"+
    "\2\24\1\0\1\24\4\126\1\35\1\0\1\36\4\0"+
    "\4\24\1\126\11\24\27\0\13\136\1\0\20\136\1\137"+
    "\1\140\1\136\1\0\50\136\13\141\1\0\21\141\1\142"+
    "\1\143\1\0\50\141\1\0\11\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\7\0\1\24\1\144\1\24\1\145"+
    "\12\24\30\0\6\24\1\146\2\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\7\0\16\24\30\0\11\24\2\0"+
    "\7\24\1\0\1\147\1\24\1\0\5\24\7\0\16\24"+
    "\30\0\7\24\1\126\1\24\2\0\4\24\1\126\2\24"+
    "\1\0\1\150\1\24\1\0\1\24\4\126\1\35\1\0"+
    "\1\36\4\0\1\151\3\24\1\126\11\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\4\24"+
    "\1\152\11\24\30\0\3\24\1\153\5\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\1\24\1\154\1\24"+
    "\1\155\6\24\1\156\3\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\1\157\15\24\30\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\7\0"+
    "\7\24\1\160\6\24\30\0\10\24\1\161\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\16\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\15\24"+
    "\1\162\111\0\1\163\107\0\1\164\107\0\1\165\1\166"+
    "\106\0\1\167\1\0\1\170\105\0\1\171\107\0\1\172"+
    "\107\0\1\173\107\0\1\174\107\0\1\175\6\0\1\176"+
    "\100\0\1\177\6\0\1\200\1\201\77\0\1\202\64\0"+
    "\1\203\1\204\57\0\1\205\7\0\1\205\7\0\4\205"+
    "\1\16\1\0\1\17\10\0\1\205\40\0\13\102\1\0"+
    "\20\102\1\206\1\104\1\102\1\105\50\102\34\0\1\207"+
    "\1\210\1\0\1\105\2\211\45\0\1\105\110\102\13\106"+
    "\1\0\21\106\1\107\1\206\1\105\160\106\35\0\1\210"+
    "\1\212\1\105\2\211\45\0\1\105\1\0\1\111\1\112"+
    "\1\111\1\0\1\111\3\0\1\116\7\0\1\116\1\0"+
    "\1\117\2\120\1\0\1\121\61\0\3\112\1\0\1\112"+
    "\15\0\1\117\2\120\1\0\1\121\61\0\5\213\2\0"+
    "\1\213\4\0\1\213\2\0\1\213\3\0\2\213\2\0"+
    "\2\213\11\0\1\213\1\0\1\213\43\0\1\214\1\0"+
    "\1\214\1\0\1\214\103\0\1\215\3\0\1\215\103\0"+
    "\3\117\1\0\1\117\16\0\2\120\1\0\1\121\61\0"+
    "\3\216\1\0\1\216\20\0\1\217\32\0\1\217\27\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\7\0"+
    "\4\24\1\220\11\24\30\0\6\24\1\221\2\24\2\0"+
    "\7\24\1\0\2\24\1\0\5\24\7\0\16\24\30\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\7\0"+
    "\1\24\1\222\14\24\30\0\7\24\1\223\1\24\2\0"+
    "\4\24\1\223\2\24\1\0\2\24\1\0\1\24\4\223"+
    "\1\35\1\0\1\36\4\0\4\24\1\223\11\24\30\0"+
    "\7\24\1\223\1\24\2\0\4\24\1\223\2\24\1\0"+
    "\1\224\1\24\1\0\1\24\4\223\1\35\1\0\1\36"+
    "\4\0\4\24\1\223\11\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\12\24\1\225\3\24"+
    "\30\0\11\24\2\0\7\24\1\0\2\24\1\0\1\24"+
    "\1\226\3\24\7\0\16\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\3\24\1\227\3\24"+
    "\1\230\6\24\30\0\11\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\1\24\1\231\14\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\1\232"+
    "\15\24\27\0\13\136\1\0\20\136\1\233\1\140\1\136"+
    "\1\0\50\136\34\0\1\234\53\0\110\136\13\141\1\0"+
    "\21\141\1\142\1\233\1\0\160\141\36\0\1\235\52\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\7\0"+
    "\2\24\1\236\13\24\30\0\11\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\7\0\3\24\1\237\12\24\30\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\7\0"+
    "\5\24\1\240\10\24\30\0\3\24\1\241\4\24\1\242"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\16\24"+
    "\30\0\11\24\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\5\24\1\243\10\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\7\24\1\244\6\24"+
    "\30\0\11\24\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\11\24\1\245\4\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\10\24\1\246\5\24"+
    "\30\0\11\24\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\3\24\1\247\12\24\30\0\11\24\2\0\7\24"+
    "\1\0\1\250\1\24\1\0\5\24\7\0\16\24\30\0"+
    "\6\24\1\251\2\24\2\0\7\24\1\0\2\24\1\0"+
    "\5\24\7\0\16\24\30\0\11\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\7\0\7\24\1\252\6\24\111\0"+
    "\1\253\107\0\1\254\107\0\1\255\107\0\1\256\61\0"+
    "\1\257\1\0\1\260\106\0\1\210\1\0\1\105\2\211"+
    "\45\0\1\105\34\207\1\261\1\262\52\207\35\212\1\263"+
    "\1\264\51\212\1\0\5\213\2\0\1\213\1\116\3\0"+
    "\1\213\2\0\1\213\1\116\2\0\2\213\2\0\2\213"+
    "\11\0\1\213\1\0\1\213\43\0\1\214\1\0\1\214"+
    "\1\0\1\214\3\0\1\116\7\0\1\116\67\0\1\215"+
    "\3\0\1\215\3\0\1\116\7\0\1\116\67\0\3\216"+
    "\1\0\1\216\21\0\1\121\61\0\3\216\1\0\1\216"+
    "\103\0\11\24\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\12\24\1\265\3\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\1\266\15\24\30\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\1\267"+
    "\1\0\1\270\4\0\16\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\1\271\15\24\30\0"+
    "\7\24\1\272\1\24\2\0\7\24\1\0\2\24\1\0"+
    "\5\24\7\0\16\24\30\0\11\24\2\0\7\24\1\0"+
    "\1\273\1\24\1\0\5\24\7\0\16\24\30\0\11\24"+
    "\2\0\7\24\1\0\1\274\1\24\1\0\5\24\7\0"+
    "\16\24\30\0\3\24\1\275\5\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\7\0\16\24\30\0\11\24\2\0"+
    "\7\24\1\0\2\24\1\0\5\24\7\0\5\24\1\276"+
    "\10\24\30\0\11\24\2\0\7\24\1\0\2\24\1\0"+
    "\5\24\7\0\3\24\1\277\12\24\27\0\34\234\1\300"+
    "\1\301\52\234\35\235\1\302\1\303\51\235\1\0\11\24"+
    "\2\0\7\24\1\0\1\304\1\24\1\0\5\24\7\0"+
    "\16\24\30\0\11\24\2\0\7\24\1\0\2\24\1\0"+
    "\4\24\1\305\7\0\16\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\3\24\1\306\12\24"+
    "\30\0\6\24\1\307\2\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\16\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\3\24\1\310\12\24"+
    "\30\0\10\24\1\311\2\0\7\24\1\0\2\24\1\0"+
    "\5\24\7\0\16\24\30\0\7\24\1\312\1\24\2\0"+
    "\7\24\1\0\2\24\1\0\5\24\7\0\16\24\30\0"+
    "\10\24\1\313\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\16\24\63\0\1\314\111\0\1\315\51\0\34\207"+
    "\1\316\1\317\162\207\145\212\1\320\1\321\51\212\1\0"+
    "\10\24\1\322\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\16\24\63\0\1\323\111\0\1\324\52\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\6\24"+
    "\1\325\7\24\30\0\11\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\2\24\1\326\13\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\10\24"+
    "\1\327\5\24\30\0\11\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\7\24\1\330\6\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\3\24"+
    "\1\331\12\24\27\0\34\234\1\332\1\333\162\234\145\235"+
    "\1\334\1\335\51\235\1\0\11\24\2\0\7\24\1\0"+
    "\2\24\1\0\5\24\7\0\4\24\1\336\11\24\30\0"+
    "\11\24\2\0\7\24\1\0\2\24\1\0\5\24\7\0"+
    "\4\24\1\337\11\24\30\0\11\24\2\0\7\24\1\0"+
    "\1\340\1\24\1\0\5\24\7\0\16\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\4\24"+
    "\1\341\11\24\30\0\11\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\2\24\1\342\13\24\30\0\11\24"+
    "\2\0\7\24\1\0\2\24\1\0\5\24\7\0\1\343"+
    "\15\24\30\0\11\24\2\0\7\24\1\0\1\344\1\24"+
    "\1\0\5\24\7\0\16\24\63\0\1\207\111\0\1\212"+
    "\51\0\34\207\1\345\1\317\106\207\1\346\1\317\52\207"+
    "\35\212\1\320\1\347\106\212\1\320\1\345\51\212\1\0"+
    "\10\24\1\350\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\16\24\30\0\11\24\2\0\7\24\1\0\2\24"+
    "\1\0\5\24\7\0\1\351\15\24\30\0\11\24\2\0"+
    "\7\24\1\0\2\24\1\0\5\24\7\0\5\24\1\352"+
    "\10\24\30\0\11\24\2\0\7\24\1\0\2\24\1\0"+
    "\5\24\7\0\1\24\1\353\14\24\27\0\34\234\1\354"+
    "\1\333\106\234\1\355\1\333\52\234\35\235\1\334\1\356"+
    "\106\235\1\334\1\354\51\235\1\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\5\24\1\357\10\24"+
    "\30\0\11\24\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\7\0\1\24\1\360\14\24\30\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\5\24\1\361\10\24"+
    "\30\0\10\24\1\362\2\0\7\24\1\0\2\24\1\0"+
    "\5\24\7\0\16\24\27\0\34\207\1\363\1\317\52\207"+
    "\35\212\1\320\1\364\51\212\1\0\11\24\2\0\7\24"+
    "\1\0\2\24\1\0\5\24\7\0\11\24\1\365\4\24"+
    "\30\0\11\24\2\0\7\24\1\0\2\24\1\0\4\24"+
    "\1\366\7\0\16\24\27\0\34\234\1\367\1\333\52\234"+
    "\35\235\1\334\1\370\51\235\34\207\1\371\1\317\52\207"+
    "\35\212\1\320\1\372\51\212\1\0\11\24\2\0\7\24"+
    "\1\0\1\373\1\24\1\0\5\24\7\0\16\24\27\0"+
    "\34\234\1\374\1\333\52\234\35\235\1\334\1\375\51\235";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12528];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\6\11\3\1\1\11\43\1\11\11"+
    "\1\1\3\11\1\0\3\1\1\11\4\1\4\0\1\11"+
    "\1\1\1\0\1\11\11\1\1\11\27\1\3\11\1\1"+
    "\1\11\1\1\5\11\1\1\2\11\1\1\2\11\2\0"+
    "\2\1\1\11\1\0\5\1\1\0\13\1\1\11\17\1"+
    "\4\11\3\0\2\1\1\0\2\1\2\0\7\1\4\0"+
    "\10\1\3\0\2\1\1\0\1\1\2\0\5\1\1\0"+
    "\2\1\1\0\16\1\1\11\6\1\2\0\2\1\2\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private int getSpaceLength(CharSequence string) {
int i = Math.max(StringUtil.lastIndexOf(string, '"', 0, string.length()), StringUtil.lastIndexOf(string, '\'', 0, string.length()));
return yylength()-i-1;

}


  _PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PythonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3338) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 83:
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 93: break;
        case 11:
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 94: break;
        case 19:
          { return PyTokenTypes.DIV;
          }
        case 95: break;
        case 20:
          { return PyTokenTypes.PERC;
          }
        case 96: break;
        case 3:
          { return PyTokenTypes.BACKSLASH;
          }
        case 97: break;
        case 28:
          { return PyTokenTypes.RPAR;
          }
        case 98: break;
        case 10:
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 99: break;
        case 31:
          { return PyTokenTypes.LBRACE;
          }
        case 100: break;
        case 69:
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 101: break;
        case 81:
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 102: break;
        case 64:
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 103: break;
        case 14:
          { return PyTokenTypes.MINUS;
          }
        case 104: break;
        case 80:
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 105: break;
        case 30:
          { return PyTokenTypes.RBRACKET;
          }
        case 106: break;
        case 1:
          { yypushback(1); yybegin(PENDING_DOCSTRING);
          }
        case 107: break;
        case 8:
          { yypushback(1); yybegin(USUAL);
          }
        case 108: break;
        case 13:
          { return PyTokenTypes.DOT;
          }
        case 109: break;
        case 12:
          { return PyTokenTypes.IDENTIFIER;
          }
        case 110: break;
        case 27:
          { return PyTokenTypes.LPAR;
          }
        case 111: break;
        case 25:
          { return PyTokenTypes.LT;
          }
        case 112: break;
        case 44:
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 113: break;
        case 82:
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 114: break;
        case 74:
          { return PyTokenTypes.GTGTEQ;
          }
        case 115: break;
        case 5:
          { return PyTokenTypes.SPACE;
          }
        case 116: break;
        case 86:
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 117: break;
        case 40:
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 118: break;
        case 15:
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 119: break;
        case 7:
          { return PyTokenTypes.FORMFEED;
          }
        case 120: break;
        case 37:
          { return PyTokenTypes.SEMICOLON;
          }
        case 121: break;
        case 24:
          { return PyTokenTypes.GT;
          }
        case 122: break;
        case 29:
          { return PyTokenTypes.LBRACKET;
          }
        case 123: break;
        case 35:
          { return PyTokenTypes.COLON;
          }
        case 124: break;
        case 75:
          { return PyTokenTypes.LTLTEQ;
          }
        case 125: break;
        case 9:
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(USUAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 126: break;
        case 77:
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 127: break;
        case 22:
          { return PyTokenTypes.OR;
          }
        case 128: break;
        case 48:
          { return PyTokenTypes.MULTEQ;
          }
        case 129: break;
        case 91:
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 130: break;
        case 84:
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 131: break;
        case 18:
          { return PyTokenTypes.MULT;
          }
        case 132: break;
        case 87:
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 133: break;
        case 51:
          { return PyTokenTypes.FLOORDIV;
          }
        case 134: break;
        case 90:
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 135: break;
        case 85:
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 136: break;
        case 55:
          { return PyTokenTypes.XOREQ;
          }
        case 137: break;
        case 65:
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 138: break;
        case 33:
          { return PyTokenTypes.AT;
          }
        case 139: break;
        case 68:
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 140: break;
        case 16:
          { return PyTokenTypes.PLUS;
          }
        case 141: break;
        case 42:
          { return PyTokenTypes.MINUSEQ;
          }
        case 142: break;
        case 38:
          { yypushback(getSpaceLength(yytext())); yybegin(USUAL); return PyTokenTypes.DOCSTRING;
          }
        case 143: break;
        case 61:
          { return PyTokenTypes.NE;
          }
        case 144: break;
        case 34:
          { return PyTokenTypes.COMMA;
          }
        case 145: break;
        case 47:
          { return PyTokenTypes.EQEQ;
          }
        case 146: break;
        case 36:
          { return PyTokenTypes.TICK;
          }
        case 147: break;
        case 49:
          { return PyTokenTypes.EXP;
          }
        case 148: break;
        case 66:
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 149: break;
        case 92:
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 150: break;
        case 60:
          { return PyTokenTypes.LTLT;
          }
        case 151: break;
        case 58:
          { return PyTokenTypes.LE;
          }
        case 152: break;
        case 67:
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 153: break;
        case 41:
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 154: break;
        case 79:
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 155: break;
        case 62:
          { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 156: break;
        case 2:
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 157: break;
        case 63:
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(USUAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 158: break;
        case 54:
          { return PyTokenTypes.OREQ;
          }
        case 159: break;
        case 57:
          { return PyTokenTypes.GTGT;
          }
        case 160: break;
        case 21:
          { return PyTokenTypes.AND;
          }
        case 161: break;
        case 50:
          { return PyTokenTypes.DIVEQ;
          }
        case 162: break;
        case 88:
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 163: break;
        case 89:
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 164: break;
        case 56:
          { return PyTokenTypes.GE;
          }
        case 165: break;
        case 46:
          { return PyTokenTypes.PLUSEQ;
          }
        case 166: break;
        case 45:
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 167: break;
        case 73:
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 168: break;
        case 39:
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 169: break;
        case 4:
          { return PyTokenTypes.LINE_BREAK;
          }
        case 170: break;
        case 52:
          { return PyTokenTypes.PERCEQ;
          }
        case 171: break;
        case 71:
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 172: break;
        case 53:
          { return PyTokenTypes.ANDEQ;
          }
        case 173: break;
        case 17:
          { return PyTokenTypes.EQ;
          }
        case 174: break;
        case 76:
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 175: break;
        case 72:
          { return PyTokenTypes.EXPEQ;
          }
        case 176: break;
        case 78:
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 177: break;
        case 32:
          { return PyTokenTypes.RBRACE;
          }
        case 178: break;
        case 43:
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 179: break;
        case 6:
          { return PyTokenTypes.TAB;
          }
        case 180: break;
        case 59:
          { return PyTokenTypes.NE_OLD;
          }
        case 181: break;
        case 26:
          { return PyTokenTypes.TILDE;
          }
        case 182: break;
        case 23:
          { return PyTokenTypes.XOR;
          }
        case 183: break;
        case 70:
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 184: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}