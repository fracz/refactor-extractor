// private static ElementPattern<PsiElement> createPatternFor(final MethodParameterInjection injection) {
// final ArrayList<ElementPattern<? extends PsiElement>> list = new ArrayList<ElementPattern<? extends PsiElement>>();
// final String className = injection.getClassName();
// for (MethodParameterInjection.MethodInfo info : injection.getMethodInfos()) {
// final String methodName = info.getMethodName();
// if (info.isReturnFlag()) {
// // place
// list.add(psiElement().inside(psiElement(JavaElementType.RETURN_STATEMENT).inside(psiMethod().withName(methodName).definedInClass(className))));
// // and owner:
// list.add(psiMethod().withName(methodName).definedInClass(className));
// }
// final boolean[] paramFlags = info.getParamFlags();
// for (int i = 0, paramFlagsLength = paramFlags.length; i < paramFlagsLength; i++) {
// if (paramFlags[i]) {
// // place
// list.add(psiElement().methodCallParameter(i, psiMethod().withName(methodName).withParameterCount(paramFlagsLength).definedInClass(className)));
// // and owner:
// list.add(psiParameter().ofMethod(i, psiMethod().withName(methodName).withParameterCount(paramFlagsLength).definedInClass(className)));
// }
// }
// }
// return StandardPatterns.or(list.toArray(new ElementPattern[list.size()]));
// }
@Nullable
public static ElementPattern<PsiElement> createElementPattern(final String text, final String displayName, final String supportId) {
    return createElementPatternNoException(text, displayName, supportId);
}||||||||@Nullable
public ElementPattern<PsiElement> createElementPattern(final String text, final String displayName) {
    try {
        return compileElementPattern(text);
    } catch (Exception ex) {
        final Throwable cause = ex.getCause() != null ? ex.getCause() : ex;
        Configuration.LOG.warn("error processing place: " + displayName + " [" + text + "]", cause);
        return null;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ConditionalExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
									)
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

