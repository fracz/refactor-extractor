/**
 * Collect commits (if not yet collected) in background and invoke the given runnable after completion.
 * @param onComplete Executed after completed (successful or failed) execution of the task.
 * It is executed in the current thread, so if you need it on AWT, include "invokeLater" to the handler.
 */
void collect(@Nullable ResultHandler onComplete) {
    synchronized (STATE_LOCK) {
        if (myState == State.READY || myState == State.EMPTY) {
            // start initial collecting or refresh already collected info
            myState = State.BUSY;
            ApplicationManager.getApplication().executeOnPooledThread(new Updater());
        } else if (myState == State.BUSY) {
            // somebody already started collection => we request more up-to-date info afterwards.
            refreshWaiters++;
        }
        // register the action that will be run after collection completes.
        // important to add at least fake action not to break the order of [collection requested-execute post-action].
        completionHandlers.offer(onComplete != null ? onComplete : EMPTY_RESULT_HANDLER);
    }
}||||||||/**
 * Collect commits (if not yet collected) in background and invoke the given runnable after completion.
 * @param onComplete Executed after completed (successful or failed) execution of the task.
 * It is executed in the current thread, so if you need it on AWT, include "invokeLater" to the handler.
 */
void collect(@NotNull GitPushSpecs pushSpecs, @Nullable ResultHandler onComplete) {
    synchronized (STATE_LOCK) {
        // if several collect requests go one by one, it is enough to have only one update: it will receive the up-to-date information.
        // so we are removing any other pending requests.
        myProcessor.clear();
        myProcessor.add(pushSpecs);
        // register the action that will be run after collection completes.
        // important to add at least a fake action not to break the order of [collection requested-execute post-action].
        myResultHandlers.offer(onComplete != null ? onComplete : EMPTY_RESULT_HANDLER);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ConditionalExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ConditionalExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

