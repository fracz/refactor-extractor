/**
 * <ul>
 * <li>If collection has completed, and no need to {@code refresh}, immediately returns.</li>
 * <li>If collection is in progress, waits for the completion.
 * But if {@code refresh} is needed, starts new completion to get up-to-date results.</li>
 * <li>If collection hasn't been started yet, starts it and waits for the completion.</li>
 * </ul>
 * @param refresh If the list of commits need to be re-queries even if we already have a version of it.
 */
GitCommitsByRepoAndBranch waitForCompletionAndGetCommits(boolean refresh) {
    // then initialize collection.
    synchronized (STATE_LOCK) {
        if (myState == State.EMPTY || refresh) {
            // makes State BUSY and starts collection
            collect(null);
        }
    }
    while (!isReady()) {
        try {
            synchronized (WAITER_LOCK) {
                TimeUnit.MILLISECONDS.timedWait(WAITER_LOCK, 100);
            }
        } catch (InterruptedException e) {
            LOG.error(e);
        }
    }
    return getCommits();
}||||||||/**
 * <ul>
 * <li>If collection has completed immediately returns.</li>
 * <li>If collection is in progress, waits for the completion.</li>
 * </ul>
 */
@NotNull
GitCommitsByRepoAndBranch waitForCompletionAndGetCommits() {
    while (!isReady()) {
        try {
            synchronized (WAITER_LOCK) {
                TimeUnit.MILLISECONDS.timedWait(WAITER_LOCK, 100);
            }
        } catch (InterruptedException e) {
            LOG.error(e);
        }
    }
    return getCommits();
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NullLiteralExpr
								SimpleName
							)
							LineComment
						)
					)
				)
			)
			NameExpr
				SimpleName
			LineComment
		)
		(WhileStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(SynchronizedStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(SynchronizedStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

