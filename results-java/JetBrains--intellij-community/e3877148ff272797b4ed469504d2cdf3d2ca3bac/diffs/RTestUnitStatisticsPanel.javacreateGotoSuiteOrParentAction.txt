protected Runnable createGotoSuiteOrParentAction() {
    final RTestUnitResultsForm.FormSelectionListener selectionListener = createSelectionListener();
    // Expand selected or go to parent
    return new Runnable() {

        public void run() {
            final RTestUnitTestProxy selectedProxy = getSelectedItem();
            if (selectedProxy == null) {
                return;
            }
            final int i = myStatisticsTableView.getSelectedRow();
            // because something is selected
            assert i >= 0;
            // If first line is selected we should go to parent suite
            if (ColumnTest.TestsCellRenderer.isFirstLine(i)) {
                final RTestUnitTestProxy parentSuite = selectedProxy.getParent();
                if (parentSuite != null) {
                    showInTableAndSelectFirstRow(parentSuite, selectionListener);
                }
            } else {
                // if selected element is suite - we should expand it
                if (selectedProxy.isSuite()) {
                    showInTableAndSelectFirstRow(selectedProxy, selectionListener);
                }
            }
        }
    };
}||||||||protected Runnable createGotoSuiteOrParentAction() {
    final RTestUnitResultsForm.FormSelectionListener selectionListener = createSelectionListener();
    // Expand selected or go to parent
    return new Runnable() {

        public void run() {
            final RTestUnitTestProxy selectedProxy = getSelectedItem();
            if (selectedProxy == null) {
                return;
            }
            final int i = myStatisticsTableView.getSelectedRow();
            // because something is selected
            assert i >= 0;
            // If first line is selected we should go to parent suite
            if (ColumnTest.TestsCellRenderer.isFirstLine(i)) {
                final RTestUnitTestProxy parentSuite = selectedProxy.getParent();
                if (parentSuite != null) {
                    // go to parent and current suit in it
                    showInTableAndSelectRow(parentSuite, selectionListener, selectedProxy);
                }
            } else {
                // if selected element is suite - we should expand it
                if (selectedProxy.isSuite()) {
                    // expand and select first (Total) row
                    showInTableAndSelectRow(selectedProxy, selectionListener, selectedProxy);
                }
            }
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(AssertStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
								)
							)
							LineComment
						)
					)
					(VoidType
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(AssertStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											LineComment
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											LineComment
										)
									)
								)
							)
							LineComment
						)
					)
					(VoidType
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)

