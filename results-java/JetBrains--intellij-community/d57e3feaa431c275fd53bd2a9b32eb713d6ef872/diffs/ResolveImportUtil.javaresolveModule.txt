/**
 * Resolves a module reference in a general case.
 * @param module_reference possibly qualified module reference.
 * @param source_file where that reference resides; serves as PSI foothold to determine module, project, etc.
 * @param import_is_absolute if false, try old python 2.x's "relative first, absolute next" approach.
 * @param relative_level if > 0, step back from source_file and resolve from there (even if import_is_absolute is false!).
 * @return
 */
@Nullable
private static PsiElement resolveModule(@Nullable List<String> qualifiedName, PsiFile source_file, boolean import_is_absolute, int relative_level) {
    PsiElement imported_from_module;
    if (qualifiedName == null)
        return null;
    String marker = StringUtil.join(qualifiedName, ".") + "#" + Integer.toString(relative_level);
    Set<String> being_imported = ourBeingImported.get();
    // break endless loop in import
    if (being_imported.contains(marker))
        return null;
    try {
        being_imported.add(marker);
        if (relative_level > 0) {
            // "from ...module import"
            imported_from_module = resolveModuleAt(stepBackFrom(source_file, relative_level), source_file, qualifiedName);
        } else {
            // "from module import"
            if (import_is_absolute)
                imported_from_module = resolveModuleInRoots(qualifiedName, source_file);
            else {
                imported_from_module = resolveModuleAt(source_file.getContainingDirectory(), source_file, qualifiedName);
                if (imported_from_module == null)
                    imported_from_module = resolveModuleInRoots(qualifiedName, source_file);
            }
        }
        return imported_from_module;
    } finally {
        being_imported.remove(marker);
    }
}||||||||/**
 * Resolves a module reference in a general case.
 * @param module_reference possibly qualified module reference.
 * @param source_file where that reference resides; serves as PSI foothold to determine module, project, etc.
 * @param import_is_absolute if false, try old python 2.x's "relative first, absolute next" approach.
 * @param relative_level if > 0, step back from source_file and resolve from there (even if import_is_absolute is false!).
 * @return
 */
@Nullable
private static PsiElement resolveModule(@Nullable PyQualifiedName qualifiedName, PsiFile source_file, boolean import_is_absolute, int relative_level) {
    PsiElement imported_from_module;
    if (qualifiedName == null)
        return null;
    String marker = StringUtil.join(qualifiedName.getComponents(), ".") + "#" + Integer.toString(relative_level);
    Set<String> being_imported = ourBeingImported.get();
    // break endless loop in import
    if (being_imported.contains(marker))
        return null;
    try {
        being_imported.add(marker);
        if (relative_level > 0) {
            // "from ...module import"
            imported_from_module = resolveModuleAt(stepBackFrom(source_file, relative_level), source_file, qualifiedName);
        } else {
            // "from module import"
            if (import_is_absolute)
                imported_from_module = resolveModuleInRoots(qualifiedName, source_file);
            else {
                imported_from_module = resolveModuleAt(source_file.getContainingDirectory(), source_file, qualifiedName);
                if (imported_from_module == null)
                    imported_from_module = resolveModuleInRoots(qualifiedName, source_file);
            }
        }
        return imported_from_module;
    } finally {
        being_imported.remove(marker);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				NullLiteralExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				NullLiteralExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				NullLiteralExpr
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

