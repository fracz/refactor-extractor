/**
 * Updates current context within the soft wrap symbol.
 *
 * @param c   soft wrap symbol to process
 * @return    logical position that matches target visual position if given symbol processing makes it possible to calculate it;
 * <code>null</code> otherwise
 */
@Nullable
public LogicalPosition onSoftWrapSymbol(char c) {
    // Process line feed inside soft wrap.
    if (c == '\n') {
        if (targetVisualPosition.line == visualLineBeforeSoftWrapAppliance + lineFeedsFromCurrentSoftWrap) {
            return build(targetVisualPosition.column - symbolsOnCurrentLogicalLine);
        } else {
            lineFeedsFromCurrentSoftWrap++;
            symbolsOnCurrentVisualLine = 0;
            return null;
        }
    }
    // Just update information about tracked symbols number if current visual line is too low.
    if (targetVisualPosition.line > visualLineBeforeSoftWrapAppliance + lineFeedsFromCurrentSoftWrap) {
        symbolsOnCurrentVisualLine += toVisualColumnSymbolsNumber(c);
    }
    // return if necessary.
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    }
    // Process non-line feed inside soft wrap.
    symbolsOnCurrentVisualLine += toVisualColumnSymbolsNumber(c);
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    } else {
        return null;
    }
}||||||||/**
 * Updates current context within the soft wrap symbol.
 *
 * @param c   soft wrap symbol to process
 * @return    logical position that matches target visual position if given symbol processing makes it possible to calculate it;
 * <code>null</code> otherwise
 */
@Nullable
public LogicalPosition onSoftWrapSymbol(char c) {
    // Process line feed inside soft wrap.
    if (c == '\n') {
        if (targetVisualPosition.line == visualLineBeforeSoftWrapAppliance + targetSoftWrapLines) {
            return build(targetVisualPosition.column - symbolsOnCurrentLogicalLine);
        } else {
            targetSoftWrapLines++;
            symbolsOnCurrentVisualLine = 0;
            return null;
        }
    }
    // Just update information about tracked symbols number if current visual line is too low.
    if (targetVisualPosition.line > visualLineBeforeSoftWrapAppliance + targetSoftWrapLines) {
        symbolsOnCurrentVisualLine += toVisualColumnSymbolsNumber(c);
        return null;
    }
    // return if necessary.
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    }
    // Process non-line feed inside soft wrap.
    symbolsOnCurrentVisualLine += toVisualColumnSymbolsNumber(c);
    if (targetVisualPosition.column <= symbolsOnCurrentVisualLine) {
        return build();
    } else {
        return null;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(ReturnStmt
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(ReturnStmt
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(ReturnStmt
					NullLiteralExpr
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

