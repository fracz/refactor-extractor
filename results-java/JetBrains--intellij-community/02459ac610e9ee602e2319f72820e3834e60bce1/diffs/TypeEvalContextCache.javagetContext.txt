/**
 * Returns context from cache (if exist) or returns the one you provided (and puts it into cache).
 * To use this method, do the following:
 * <ol>
 * <li>Instantiate {@link TypeEvalContext} you want to use</li>
 * <li>Pass its instance here as argument</li>
 * <li>Use result</li>
 * </ol>
 *
 * @param project  project is required for caching engine
 * @param standard context you want to use. Just instantiate it and pass here.
 * @return context from cache (the one equals by constraints to yours or the one you provided)
 */
@NotNull
TypeEvalContext getContext(@NotNull final Project project, @NotNull final TypeEvalContext standard) {
    // Double check here to prevent useless sync
    if (myCachedMapStorage == null) {
        final CachedValuesManager manager = CachedValuesManager.getManager(project);
        synchronized (myLock) {
            // Create storage if not exists. Should be created at first launch only
            if (myCachedMapStorage == null) {
                myCachedMapStorage = manager.createCachedValue(this, false);
                // To nullify property on project close
                Disposer.register(project, this);
            }
        }
    }
    // Map is not thread safe nor "getValue" is.
    synchronized (myLock) {
        final Map<TypeEvalConstraints, TypeEvalContext> map = myCachedMapStorage.getValue();
        final TypeEvalContext context = map.get(standard.getConstraints());
        if (context != null) {
            // Context already in cache, return it
            return context;
        }
        // Put this context to cache
        map.put(standard.getConstraints(), standard);
        return standard;
    }
}||||||||/**
 * Returns context from cache (if exist) or returns the one you provided (and puts it into cache).
 * To use this method, do the following:
 * <ol>
 * <li>Instantiate {@link TypeEvalContext} you want to use</li>
 * <li>Pass its instance here as argument</li>
 * <li>Use result</li>
 * </ol>
 *
 * @param standard context you want to use. Just instantiate it and pass here.
 * @return context from cache (the one equals by constraints to yours or the one you provided)
 */
@NotNull
TypeEvalContext getContext(@NotNull TypeEvalContext standard);||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(SynchronizedStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(ThisExpr
											)
											(BooleanLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(ThisExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

