private static void dumpBody(@NonNls StringBuilder switchStatementText, PsiStatement bodyStatement, boolean wrap, boolean renameBreaks, String breakLabelName) {
    if (bodyStatement instanceof PsiBlockStatement) {
        if (wrap) {
            appendElement(switchStatementText, bodyStatement, renameBreaks, breakLabelName);
        } else {
            final PsiCodeBlock codeBlock = ((PsiBlockStatement) bodyStatement).getCodeBlock();
            final PsiElement[] children = codeBlock.getChildren();
            // skip the first and last members, to unwrap the block
            for (int i = 1; i < children.length - 1; i++) {
                final PsiElement child = children[i];
                appendElement(switchStatementText, child, renameBreaks, breakLabelName);
            }
        }
    } else {
        if (wrap) {
            switchStatementText.append('{');
            appendElement(switchStatementText, bodyStatement, renameBreaks, breakLabelName);
            switchStatementText.append('}');
        } else {
            appendElement(switchStatementText, bodyStatement, renameBreaks, breakLabelName);
        }
    }
    if (ControlFlowUtils.statementMayCompleteNormally(bodyStatement)) {
        switchStatementText.append("break; ");
    }
}||||||||private static void dumpBody(@NonNls StringBuilder switchStatementText, PsiStatement bodyStatement, boolean wrap, boolean renameBreaks, String breakLabelName) {
    if (wrap) {
        switchStatementText.append('{');
    }
    if (bodyStatement instanceof PsiBlockStatement) {
        final PsiCodeBlock codeBlock = ((PsiBlockStatement) bodyStatement).getCodeBlock();
        final PsiElement[] children = codeBlock.getChildren();
        // skip the first and last members, to unwrap the block
        for (int i = 1; i < children.length - 1; i++) {
            final PsiElement child = children[i];
            appendElement(switchStatementText, child, renameBreaks, breakLabelName);
        }
    } else {
        appendElement(switchStatementText, bodyStatement, renameBreaks, breakLabelName);
    }
    if (ControlFlowUtils.statementMayCompleteNormally(bodyStatement)) {
        switchStatementText.append("break;");
    }
    if (wrap) {
        switchStatementText.append('}');
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(CharLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(EnclosedExpr
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(CharLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(CharLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

