@NotNull
@Override
public HighlighterIterator createIterator(final int startOffset) {
    final int startIndex = ConsoleUtil.findTokenInfoIndexByOffset(myTokens, startOffset);
    return new HighlighterIterator() {

        private int myIndex = startIndex;

        @Override
        public TextAttributes getTextAttributes() {
            return getTokenInfo() == null ? null : getTokenInfo().attributes;
        }

        @Override
        public int getStart() {
            return getTokenInfo() == null ? 0 : getTokenInfo().startOffset;
        }

        @Override
        public int getEnd() {
            return getTokenInfo() == null ? 0 : getTokenInfo().endOffset;
        }

        @Override
        public IElementType getTokenType() {
            return null;
        }

        @Override
        public void advance() {
            myIndex++;
        }

        @Override
        public void retreat() {
            myIndex--;
        }

        @Override
        public boolean atEnd() {
            return myIndex < 0 || myIndex >= myTokens.size();
        }

        @Override
        public Document getDocument() {
            return myEditor.getDocument();
        }

        private TokenInfo getTokenInfo() {
            return myTokens.get(myIndex);
        }
    };
}||||||||@NotNull
@Override
public HighlighterIterator createIterator(final int startOffset) {
    final int startIndex = ConsoleUtil.findTokenInfoIndexByOffset(myTokens, startOffset);
    return new HighlighterIterator() {

        private int myIndex = startIndex;

        @Override
        public TextAttributes getTextAttributes() {
            return atEnd() ? null : getTokenInfo().contentType.getAttributes();
        }

        @Override
        public int getStart() {
            return atEnd() ? 0 : getTokenInfo().startOffset;
        }

        @Override
        public int getEnd() {
            return atEnd() ? 0 : getTokenInfo().endOffset;
        }

        @Override
        public IElementType getTokenType() {
            return null;
        }

        @Override
        public void advance() {
            myIndex++;
        }

        @Override
        public void retreat() {
            myIndex--;
        }

        @Override
        public boolean atEnd() {
            return myIndex < 0 || myIndex >= myTokens.size();
        }

        @Override
        public Document getDocument() {
            return myEditor.getDocument();
        }

        private TokenInfo getTokenInfo() {
            return myTokens.get(myIndex);
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						NameExpr
							SimpleName
						SimpleName
						(PrimitiveType
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
									)
									NullLiteralExpr
								)
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								NullLiteralExpr
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
									)
									NullLiteralExpr
								)
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
									)
									NullLiteralExpr
								)
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							NullLiteralExpr
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						NameExpr
							SimpleName
						SimpleName
						(PrimitiveType
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								NullLiteralExpr
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								(MethodCallExpr
									SimpleName
								)
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(ConditionalExpr
								(MethodCallExpr
									SimpleName
								)
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							NullLiteralExpr
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)

