private void LoadPluginsFromHostInBackground() {
    SetDownloadStatus(true);
    final SwingWorker worker = new SwingWorker() {

        CategoryNode root;

        public Object construct() {
            root = StatusProcess.Process(mySynchStatus);
            return root;
        }

        public void finished() {
            StopLoadingPlugins(root);
        }
    };
    worker.start();
}||||||||/*
    private static CategoryNode LoadPluginsFromHostFore()
    {
      final StatusProcess statusProcess = new StatusProcess();
        do {
            boolean canceled = ProgressManager.getInstance()
              .runProcessWithProgressSynchronously(statusProcess, IdeBundle.message("progress.downloading.list.of.plugins"), true, null);
            if (canceled && statusProcess.getException() != null)
            {
              if (statusProcess.getException() instanceof IOException) {
                if (! IOExceptionDialog.showErrorDialog((IOException)statusProcess.getException(),
                                                        IdeBundle.message("title.plugin.manager"),
                                                        IdeBundle.message("error.could.not.download.list.of.plugins"))) {
                  break;
                }
              }
              else {
                throw new RuntimeException(statusProcess.getException());
              }
            }
            else{
              break;
            }
            statusProcess.removeOldException();
        }
        while (true);
        return statusProcess.getRoot();
    }
    */
private void LoadPluginsFromHostInBackground() {
    SetDownloadStatus(true);
    final SwingWorker worker = new SwingWorker() {

        CategoryNode root;

        public Object construct() {
            root = StatusProcess.Process(mySynchStatus);
            return root;
        }

        public void finished() {
            StopLoadingPlugins(root);
        }
    };
    worker.start();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldDeclaration
							(VariableDeclarator
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(VoidType
							)
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(FieldDeclaration
							(VariableDeclarator
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
						)
						(MethodDeclaration
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(VoidType
							)
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(BlockComment
	)
)

