@Override
public void onChangeEnd(@NotNull Object entity, @NotNull ProjectSystemId externalSystemId) {
    if (myImportCounter.decrementAndGet() <= 0) {
        myUserProjectChangesCalculator.updateCurrentProjectState(project);
        ProjectData externalProject = myChangesModel.getExternalProject(externalSystemId, project);
        if (externalProject != null) {
            myChangesModel.update(externalProject, project, true);
        }
        // There is a possible case that we need to add/remove IJ-specific new nodes because of the IJ project structure changes
        // triggered by gradle.
        rebuildTreeModel(externalSystemId);
    }
}||||||||@Override
public void onChangeEnd(@NotNull Object entity, @NotNull ProjectSystemId externalSystemId) {
    if (myImportCounter.decrementAndGet() <= 0) {
        myUserProjectChangesCalculator.updateCurrentProjectState(project);
        // TODO den implement
        // ProjectData externalProject = myChangesModel.getExternalProject(externalSystemId, project);
        // if (externalProject != null) {
        // myChangesModel.update(externalProject, project, true);
        // }
        // There is a possible case that we need to add/remove IJ-specific new nodes because of the IJ project structure changes
        // triggered by gradle.
        rebuildTreeModel(externalSystemId);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

