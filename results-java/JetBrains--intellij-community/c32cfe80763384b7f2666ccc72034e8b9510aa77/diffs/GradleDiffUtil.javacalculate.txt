/**
 * Utility method for comparing entity collections. For example, it may be provided with the collection of gradle modules and
 * collection of ide modules. Matched entities are found and the comparison is delegated to the given <code>'calculator'</code>.
 * Corresponding changes are generated for the non-matched (local) changes (e.g. particular library dependency presents
 * at the ide side but not at the gradle).
 *
 * @param calculator        comparison strategy that works with the single entities (not collection of entities)
 * @param gradleEntities    entities available at the gradle side
 * @param ideEntities       entities available at the ide side
 * @param context           changes calculation context
 * @param <I>               target ide entity type
 * @param <G>               target gradle entity type
 */
public static <I, G extends ProjectEntityData> void calculate(@NotNull ExternalProjectStructureChangesCalculator<G, I> calculator, @NotNull Iterable<? extends G> gradleEntities, @NotNull Iterable<? extends I> ideEntities, @NotNull ExternalProjectChangesCalculationContext context) {
    Map<Object, I> ideEntitiesByKeys = new HashMap<Object, I>();
    for (I entity : ideEntities) {
        Object key = calculator.getIdeKey(entity);
        final I previous = ideEntitiesByKeys.put(key, entity);
        if (previous != null) {
            LOG.warn("Duplicate setup for library " + key);
        }
    }
    for (G gradleEntity : gradleEntities) {
        I ideEntity = ideEntitiesByKeys.remove(calculator.getGradleKey(gradleEntity, context));
        if (ideEntity == null) {
            buildLocalChanges(gradleEntity, context);
        } else {
            calculator.calculate(gradleEntity, ideEntity, context);
        }
    }
    for (I entity : ideEntitiesByKeys.values()) {
        buildLocalChanges(entity, context);
    }
}||||||||/**
 * Utility method for comparing entity collections. For example, it may be provided with the collection of gradle modules and
 * collection of ide modules. Matched entities are found and the comparison is delegated to the given <code>'calculator'</code>.
 * Corresponding changes are generated for the non-matched (local) changes (e.g. particular library dependency presents
 * at the ide side but not at the gradle).
 *
 * @param calculator        comparison strategy that works with the single entities (not collection of entities)
 * @param gradleEntities    entities available at the gradle side
 * @param ideEntities       entities available at the ide side
 * @param context           changes calculation context
 * @param <I>               target ide entity type
 * @param <G>               target gradle entity type
 */
public static <I, G extends ProjectEntityData> void calculate(@NotNull ExternalProjectStructureChangesCalculator<G, I> calculator, @NotNull Iterable<? extends G> gradleEntities, @NotNull Iterable<? extends I> ideEntities, @NotNull ExternalProjectChangesCalculationContext context) {
// TODO den implement
// Map<Object, I> ideEntitiesByKeys = new HashMap<Object, I>();
// for (I entity : ideEntities) {
// Object key = calculator.getIdeKey(entity);
// final I previous = ideEntitiesByKeys.put(key, entity);
// assert previous == null : key;
// }
// for (G gradleEntity: gradleEntities) {
// I ideEntity = ideEntitiesByKeys.remove(calculator.getGradleKey(gradleEntity, context));
// if (ideEntity == null) {
// buildLocalChanges(gradleEntity, context);
// }
// else {
// calculator.calculate(gradleEntity, ideEntity, context);
// }
// }
// 
// for (I entity : ideEntitiesByKeys.values()) {
// buildLocalChanges(entity, context);
// }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

