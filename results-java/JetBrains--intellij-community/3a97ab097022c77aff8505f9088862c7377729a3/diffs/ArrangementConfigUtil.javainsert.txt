/**
 * Inserts given child to the given parent re-using existing nodes under the parent sub-hierarchy if possible (two nodes are
 * considered equals if their {@link DefaultMutableTreeNode#getUserObject() user objects} are equal.
 * <p/>
 * Example:
 * <pre>
 * parent:  0         to-insert: 2
 * |_1                  |_3
 * |_2                    |_6
 * | |_3
 * |   |_4
 * |_5
 * -------------------------------------------------------------------------------------------------
 * | index:  |       0             |       1             |       2             |       3             |
 * |-------------------------------------------------------------------------------------------------
 * | result: |       0             |       0             |       0             |       0             |
 * |         |       |_2           |       |_1           |       |_1           |       |_1           |
 * |         |       | |_3         |       |_2           |       |_2           |       |_2           |
 * |         |       |   |_6       |       | |_3         |       | |_3         |       | |_3         |
 * |         |       |_1           |       |   |_6       |       |   |_4       |       |   |_4       |
 * |         |       |_2           |       |   |_4       |       |   |_6       |       |_5           |
 * |         |       | |_3         |       |_5           |       |_5           |       |_2           |
 * |         |       |   |_4       |                     |                     |         |_3         |
 * |         |       |_5           |                     |                     |           |_6       |
 * </pre>
 * <p/>
 *
 * @param parent     parent node to insert into
 * @param index      insertion index to use for the given parent node
 * @param child      node to insert to the given parent node at the given insertion index
 * @param treeModel  model which should hold UI nodes
 * @return           <code>true</code> if given child node has been merged to the existing node; <code>false</code> otherwise
 */
public static boolean insert(@NotNull final DefaultMutableTreeNode parent, final int index, @NotNull final DefaultMutableTreeNode child, @NotNull DefaultTreeModel treeModel) {
    if (parent.getChildCount() < index) {
        treeModel.insertNodeInto(child, parent, parent.getChildCount());
        return false;
    }
    if (child.getChildCount() <= 0) {
        // Don't merge the last child.
        treeModel.insertNodeInto(child, parent, index);
    }
    boolean anchorAbove = false;
    DefaultMutableTreeNode mergeCandidate = null;
    if (index > 0) {
        mergeCandidate = (DefaultMutableTreeNode) parent.getChildAt(index - 1);
        if (!userDataEqual(mergeCandidate.getUserObject(), child.getUserObject())) {
            mergeCandidate = null;
        }
    }
    if (index < parent.getChildCount()) {
        DefaultMutableTreeNode n = (DefaultMutableTreeNode) parent.getChildAt(index);
        if (userDataEqual(n.getUserObject(), child.getUserObject())) {
            mergeCandidate = n;
            anchorAbove = true;
        }
    }
    if (mergeCandidate == null) {
        treeModel.insertNodeInto(child, parent, index);
        return false;
    }
    for (int i = 0, limit = child.getChildCount(); i < limit; i++) {
        insert(mergeCandidate, anchorAbove ? 0 : mergeCandidate.getChildCount(), (DefaultMutableTreeNode) child.getChildAt(0), treeModel);
    }
    return true;
}||||||||/**
 * Inserts given child to the given parent re-using existing nodes under the parent sub-hierarchy if possible.
 * <p/>
 * Example:
 * <pre>
 * parent:  0         to-insert: 2
 * |_1                  |_3
 * |_2                    |_6
 * | |_3
 * |   |_4
 * |_5
 * -------------------------------------------------------------------------------------------------
 * | index:  |       0             |       1             |       2             |       3             |
 * |-------------------------------------------------------------------------------------------------
 * | result: |       0             |       0             |       0             |       0             |
 * |         |       |_2           |       |_1           |       |_1           |       |_1           |
 * |         |       | |_3         |       |_2           |       |_2           |       |_2           |
 * |         |       |   |_6       |       | |_3         |       | |_3         |       | |_3         |
 * |         |       |_1           |       |   |_6       |       |   |_4       |       |   |_4       |
 * |         |       |_2           |       |   |_4       |       |   |_6       |       |_5           |
 * |         |       | |_3         |       |_5           |       |_5           |       |_2           |
 * |         |       |   |_4       |                     |                     |         |_3         |
 * |         |       |_5           |                     |                     |           |_6       |
 * </pre>
 * <p/>
 *
 * @param parent     parent node to insert into
 * @param index      insertion index to use for the given parent node
 * @param child      node to insert to the given parent node at the given insertion index
 * @param treeModel  model which should hold UI nodes
 * @return           <code>true</code> if given child node has been merged to the existing node; <code>false</code> otherwise
 */
public static boolean insert(@NotNull final ArrangementTreeNode parent, final int index, @NotNull final ArrangementTreeNode child, @NotNull DefaultTreeModel treeModel) {
    if (parent.getChildCount() < index) {
        treeModel.insertNodeInto(child, parent, parent.getChildCount());
        return false;
    }
    if (child.getChildCount() <= 0) {
        // Don't merge the last child.
        treeModel.insertNodeInto(child, parent, index);
    }
    boolean anchorAbove = false;
    ArrangementTreeNode mergeCandidate = null;
    if (index > 0) {
        mergeCandidate = parent.getChildAt(index - 1);
        if (!mergeCandidate.equals(child)) {
            mergeCandidate = null;
        }
    }
    if (index < parent.getChildCount()) {
        ArrangementTreeNode n = parent.getChildAt(index);
        if (n.equals(child)) {
            mergeCandidate = n;
            anchorAbove = true;
        }
    }
    if (mergeCandidate == null) {
        treeModel.insertNodeInto(child, parent, index);
        return false;
    }
    for (int i = 0, limit = child.getChildCount(); i < limit; i++) {
        insert(mergeCandidate, anchorAbove ? 0 : mergeCandidate.getChildCount(), child.getChildAt(0), treeModel);
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(CastExpr
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(CastExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

