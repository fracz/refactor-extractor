/**
 * Utility method which helps to replace node sub-hierarchy identified by the given start and end nodes (inclusive) by
 * a sub-hierarchy which is denoted by the given root.
 *
 * @param from         indicates start of the node sub-hierarchy to be replaced (inclusive)
 * @param to           indicates end of the node sub-hierarchy to be replaced (inclusive)
 * @param replacement  root of the node sub-hierarchy which should replace the one identified by the given 'start' and 'end' nodes
 * @param treeModel    model which should hold ui nodes
 * @return             collection of row changes at the form {@code 'old row -> new row'}
 */
@SuppressWarnings("AssignmentToForLoopParameter")
@NotNull
public static TIntIntHashMap replace(@NotNull DefaultMutableTreeNode from, @NotNull DefaultMutableTreeNode to, @NotNull DefaultMutableTreeNode replacement, @NotNull DefaultTreeModel treeModel) {
    markRows(from);
    if (from == to) {
        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) from.getParent();
        int index = parent.getIndex(from);
        treeModel.removeNodeFromParent(from);
        treeModel.insertNodeInto(replacement, parent, index);
        return collectRowChangesAndUnmark(parent);
    }
    // The algorithm looks as follows:
    // 1. Cut sub-hierarchy which belongs to the given 'from' root and is located below the 'to -> from' path;
    // 2. Remove 'to -> from' sub-hierarchy' by going bottom-up and stopping as soon as a current node has a child over than one
    // from the sub-hierarchy to remove;
    // 3. Add 'replacement' sub-hierarchy starting after the 'from' index at its parent;
    // 4. Add sub-hierarchy cut at the 1) starting after the 'replacement' sub-hierarchy index;
    // Example:
    // Initial:
    // 0
    // |_1
    // |_2
    // | |_3
    // | |_4
    // | |_5
    // |
    // |_6
    // Let's say we want to replace the sub-hierarchy '1 -> 2 -> 4' by the sub-hierarchy '1 -> 4'. The algorithm in action:
    // 1. Cut bottom sub-hierarchy:
    // Current:      Cut:
    // 0            1
    // |_1          |_2
    // |_2        | |_5
    // |_3      |
    // |_4      |_6
    // 
    // 2. Remove target sub-hierarchy:
    // Current:
    // 0
    // |_1
    // |_2    <-- stop at this node because it has a child node '3' which doesn't belong to the '1 -> 2 -> 4'
    // |_3
    // 3. Add 'replacement' sub-hierarchy:
    // Current:
    // 0
    // |_1    <-- re-use this node for '1 -> 4' addition
    // |_2
    // | |_3
    // |
    // |_4
    // 4. Add 'bottom' sub-hierarchy:
    // Current:
    // 0
    // |_1    <-- re-use this node either for '1 -> 2 -> 5' or '1 -> 6' addition
    // |_2
    // | |_3
    // |
    // |_4
    // |
    // |_2
    // | |_5
    // |
    // |_6
    // 
    // Note: we need to have a notion of 'equal nodes' for node re-usage. It's provided by comparing node user objects.
    final DefaultMutableTreeNode root = (DefaultMutableTreeNode) from.getParent();
    // region Cut bottom sub-hierarchy
    DefaultMutableTreeNode cutHierarchy = null;
    for (DefaultMutableTreeNode current = to; current != root; current = (DefaultMutableTreeNode) current.getParent()) {
        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) current.getParent();
        int i = parent.getIndex(current);
        int childCount = parent.getChildCount();
        if (i >= childCount - 1) {
            continue;
        }
        DefaultMutableTreeNode parentCopy = new DefaultMutableTreeNode(childCount > 0 ? extractUserObject(parent.getUserObject()) : parent.getUserObject());
        if (cutHierarchy != null) {
            parentCopy.add(cutHierarchy);
        }
        for (int j = i + 1; j < childCount; j++) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) parent.getChildAt(j);
            treeModel.removeNodeFromParent(child);
            // Unwrap node's data.
            child.setUserObject(child.getChildCount() > 0 ? extractUserObject(child.getUserObject()) : child.getUserObject());
            parentCopy.add(child);
        }
        cutHierarchy = parentCopy;
    }
    // endregion
    int insertionIndex = root.getIndex(from) + 1;
    // region Remove target sub-hierarchy
    for (DefaultMutableTreeNode current = to; current != root; ) {
        DefaultMutableTreeNode parent = (DefaultMutableTreeNode) current.getParent();
        treeModel.removeNodeFromParent(current);
        current = parent;
        if (current != to) {
            current.setUserObject(extractUserObject(current.getUserObject()));
        }
        if (parent.getChildCount() > 0) {
            break;
        }
    }
    // endregion
    // region Insert nodes.
    boolean merged = insert(root, insertionIndex, replacement, treeModel);
    if (cutHierarchy != null) {
        insert(root, insertionIndex + (merged ? 0 : 1), cutHierarchy, treeModel);
    }
    return collectRowChangesAndUnmark(root);
}||||||||/**
 * Utility method which helps to replace node sub-hierarchy identified by the given start and end nodes (inclusive) by
 * a sub-hierarchy which is denoted by the given root.
 *
 * @param from         indicates start of the node sub-hierarchy to be replaced (inclusive)
 * @param to           indicates end of the node sub-hierarchy to be replaced (inclusive)
 * @param replacement  root of the node sub-hierarchy which should replace the one identified by the given 'start' and 'end' nodes
 * @param treeModel    model which should hold ui nodes
 * @return             collection of row changes at the form {@code 'old row -> new row'}
 */
@SuppressWarnings("AssignmentToForLoopParameter")
@NotNull
public static TIntIntHashMap replace(@NotNull ArrangementTreeNode from, @NotNull ArrangementTreeNode to, @NotNull ArrangementTreeNode replacement, @NotNull DefaultTreeModel treeModel) {
    markRows(from);
    if (from == to) {
        ArrangementTreeNode parent = from.getParent();
        int index = parent.getIndex(from);
        treeModel.removeNodeFromParent(from);
        treeModel.insertNodeInto(replacement, parent, index);
        return collectRowChangesAndUnmark(parent);
    }
    // The algorithm looks as follows:
    // 1. Cut sub-hierarchy which belongs to the given 'from' root and is located below the 'to -> from' path;
    // 2. Remove 'to -> from' sub-hierarchy' by going bottom-up and stopping as soon as a current node has a child over than one
    // from the sub-hierarchy to remove;
    // 3. Add 'replacement' sub-hierarchy starting after the 'from' index at its parent;
    // 4. Add sub-hierarchy cut at the 1) starting after the 'replacement' sub-hierarchy index;
    // Example:
    // Initial:
    // 0
    // |_1
    // |_2
    // | |_3
    // | |_4
    // | |_5
    // |
    // |_6
    // Let's say we want to replace the sub-hierarchy '1 -> 2 -> 4' by the sub-hierarchy '1 -> 4'. The algorithm in action:
    // 1. Cut bottom sub-hierarchy:
    // Current:      Cut:
    // 0            1
    // |_1          |_2
    // |_2        | |_5
    // |_3      |
    // |_4      |_6
    // 
    // 2. Remove target sub-hierarchy:
    // Current:
    // 0
    // |_1
    // |_2    <-- stop at this node because it has a child node '3' which doesn't belong to the '1 -> 2 -> 4'
    // |_3
    // 3. Add 'replacement' sub-hierarchy:
    // Current:
    // 0
    // |_1    <-- re-use this node for '1 -> 4' addition
    // |_2
    // | |_3
    // |
    // |_4
    // 4. Add 'bottom' sub-hierarchy:
    // Current:
    // 0
    // |_1    <-- re-use this node either for '1 -> 2 -> 5' or '1 -> 6' addition
    // |_2
    // | |_3
    // |
    // |_4
    // |
    // |_2
    // | |_5
    // |
    // |_6
    // 
    // Note: we need to have a notion of 'equal nodes' for node re-usage. It's provided by comparing node user objects.
    final ArrangementTreeNode root = from.getParent();
    // region Cut bottom sub-hierarchy
    ArrangementTreeNode cutHierarchy = null;
    for (ArrangementTreeNode current = to; current != root; current = current.getParent()) {
        ArrangementTreeNode parent = current.getParent();
        int i = parent.getIndex(current);
        int childCount = parent.getChildCount();
        if (i >= childCount - 1) {
            continue;
        }
        ArrangementTreeNode parentCopy = parent.copy();
        if (parent.getChildCount() > 0) {
            parentCopy.resetRow();
        }
        if (cutHierarchy != null) {
            parentCopy.add(cutHierarchy);
        }
        for (int j = i + 1; j < childCount; j++) {
            ArrangementTreeNode child = parent.getChildAt(j);
            treeModel.removeNodeFromParent(child);
            parentCopy.add(child);
        }
        cutHierarchy = parentCopy;
    }
    // endregion
    int insertionIndex = root.getIndex(from) + 1;
    // region Remove target sub-hierarchy
    for (ArrangementTreeNode current = to; current != root; ) {
        ArrangementTreeNode parent = current.getParent();
        treeModel.removeNodeFromParent(current);
        current = parent;
        if (parent.getChildCount() > 0) {
            break;
        }
    }
    // endregion
    // region Insert nodes.
    boolean merged = insert(root, insertionIndex, replacement, treeModel);
    if (cutHierarchy != null) {
        insert(root, insertionIndex + (merged ? 0 : 1), cutHierarchy, treeModel);
    }
    return collectRowChangesAndUnmark(root);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ConditionalExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ConditionalExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(AssignExpr
				NameExpr
					SimpleName
				(CastExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(EnclosedExpr
								(ConditionalExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(EnclosedExpr
								(ConditionalExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

