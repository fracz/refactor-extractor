/**
 * Updates the model container if it exists. If the model does not exist and no rows are changed, we will attempt an insert into the DB.
 *
 * @param async                      Where it goes on the {@link com.raizlabs.android.dbflow.runtime.DBTransactionQueue} or done immediately.
 * @param modelContainer             The model container to update
 * @param modelClassContainerAdapter The adapter to use
 * @param <ModelClass>               The class that implements {@link com.raizlabs.android.dbflow.structure.Model}
 * @return true if model was inserted, false if not. Also false could mean that it is placed on the
 * {@link com.raizlabs.android.dbflow.runtime.DBTransactionQueue} using async to true.
 */
public static <ModelClass extends Model> boolean update(boolean async, ModelContainer<ModelClass, ?> modelContainer, ContainerAdapter<ModelClass> modelClassContainerAdapter) {
    boolean exists = false;
    if (!async) {
        ModelAdapter<ModelClass> modelClassModelAdapter = FlowManager.getModelAdapter(modelContainer.getTable());
        SQLiteDatabase db = FlowManager.getDatabaseForTable(modelClassModelAdapter.getModelClass()).getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        modelClassContainerAdapter.bindToContentValues(contentValues, modelContainer);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
            exists = (db.updateWithOnConflict(modelClassModelAdapter.getTableName(), contentValues, modelClassContainerAdapter.getPrimaryModelWhere(modelContainer).getQuery(), null, ConflictAction.getSQLiteDatabaseAlgorithmInt(modelClassModelAdapter.getUpdateOnConflictAction())) != 0);
        } else {
            exists = (db.update(modelClassModelAdapter.getTableName(), contentValues, modelClassContainerAdapter.getPrimaryModelWhere(modelContainer).getQuery(), null) != 0);
        }
        if (!exists) {
            // insert
            insert(false, modelContainer, modelClassContainerAdapter);
        } else {
            SqlUtils.notifyModelChanged(modelClassModelAdapter.getModelClass(), BaseModel.Action.UPDATE);
        }
    } else {
        TransactionManager.getInstance().update(ProcessModelInfo.withModels(modelContainer).info(DBTransactionInfo.createSave()));
    }
    return exists;
}||||||||/**
 * Updates the model container if it exists. If the model does not exist and no rows are changed, we will attempt an insert into the DB.
 *
 * @param async                      Where it goes on the {@link com.raizlabs.android.dbflow.runtime.DBTransactionQueue} or done immediately.
 * @param modelContainer             The model container to update
 * @param modelClassContainerAdapter The adapter to use
 * @param <ModelClass>               The class that implements {@link com.raizlabs.android.dbflow.structure.Model}
 * @return true if model was inserted, false if not. Also false could mean that it is placed on the
 * {@link com.raizlabs.android.dbflow.runtime.DBTransactionQueue} using async to true.
 */
public static <ModelClass extends Model> boolean update(boolean async, ModelContainer<ModelClass, ?> modelContainer, ContainerAdapter<ModelClass> modelClassContainerAdapter) {
    boolean exists = false;
    if (!async) {
        ModelAdapter<ModelClass> modelClassModelAdapter = FlowManager.getModelAdapter(modelContainer.getTable());
        SQLiteDatabase db = FlowManager.getDatabaseForTable(modelClassModelAdapter.getModelClass()).getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        modelClassContainerAdapter.bindToContentValues(contentValues, modelContainer);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
            exists = (db.updateWithOnConflict(modelClassModelAdapter.getTableName(), contentValues, modelClassContainerAdapter.getPrimaryModelWhere(modelContainer).getQuery(), null, ConflictAction.getSQLiteDatabaseAlgorithmInt(modelClassModelAdapter.getUpdateOnConflictAction())) != 0);
        } else {
            exists = (db.update(modelClassModelAdapter.getTableName(), contentValues, modelClassContainerAdapter.getPrimaryModelWhere(modelContainer).getQuery(), null) != 0);
        }
        if (!exists) {
            // insert
            insert(false, modelContainer, modelClassContainerAdapter);
        } else {
        // SqlUtils.notifyModelChanged(modelClassModelAdapter.getModelClass(), BaseModel.Action.UPDATE);
        }
    } else {
        TransactionManager.getInstance().update(ProcessModelInfo.withModels(modelContainer).info(DBTransactionInfo.createSave()));
    }
    return exists;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

