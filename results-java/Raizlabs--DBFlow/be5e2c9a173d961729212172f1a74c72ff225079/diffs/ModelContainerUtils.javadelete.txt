/**
 * Deletes {@link com.raizlabs.android.dbflow.structure.Model} from the database using the specfied {@link com.raizlabs.android.dbflow.config.FlowManager}
 *
 * @param modelContainer The jsonModel that corresponds to an item in the DB we want to delete
 * @param async          Whether it goes on the {@link com.raizlabs.android.dbflow.runtime.DBTransactionQueue} or done immediately.
 * @param <ModelClass>   The class that implements {@link com.raizlabs.android.dbflow.structure.Model}
 */
@SuppressWarnings("unchecked")
public static <ModelClass extends Model> void delete(final ModelContainer<ModelClass, ?> modelContainer, ContainerAdapter<ModelClass> containerAdapter, boolean async) {
    if (!async) {
        new Delete().from(modelContainer.getTable()).where(containerAdapter.getPrimaryModelWhere(modelContainer)).query();
        containerAdapter.updateAutoIncrement(modelContainer, 0);
        SqlUtils.notifyModelChanged(modelContainer.getTable(), BaseModel.Action.DELETE);
    } else {
        TransactionManager.getInstance().delete(ProcessModelInfo.withModels(modelContainer));
    }
}||||||||/**
 * Deletes {@link com.raizlabs.android.dbflow.structure.Model} from the database using the specfied {@link com.raizlabs.android.dbflow.config.FlowManager}
 *
 * @param modelContainer The jsonModel that corresponds to an item in the DB we want to delete
 * @param async          Whether it goes on the {@link com.raizlabs.android.dbflow.runtime.DBTransactionQueue} or done immediately.
 * @param <ModelClass>   The class that implements {@link com.raizlabs.android.dbflow.structure.Model}
 */
@SuppressWarnings("unchecked")
public static <ModelClass extends Model> void delete(final ModelContainer<ModelClass, ?> modelContainer, ContainerAdapter<ModelClass> containerAdapter, boolean async) {
    if (!async) {
        new Delete().from(modelContainer.getTable()).where(containerAdapter.getPrimaryModelWhere(modelContainer)).query();
        containerAdapter.updateAutoIncrement(modelContainer, 0);
    // SqlUtils.notifyModelChanged(modelContainer.getTable(), BaseModel.Action.DELETE);
    } else {
        TransactionManager.getInstance().delete(ProcessModelInfo.withModels(modelContainer));
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(TypeParameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)

