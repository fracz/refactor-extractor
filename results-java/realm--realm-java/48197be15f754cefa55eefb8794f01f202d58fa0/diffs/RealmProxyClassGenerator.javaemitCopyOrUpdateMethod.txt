private void emitCopyOrUpdateMethod(JavaWriter writer) throws IOException {
    writer.beginMethod(// Return type
    qualifiedClassName, // Method name
    "copyOrUpdate", // Modifiers
    EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Argument type & argument name
    "Realm", // Argument type & argument name
    "realm", // Argument type & argument name
    qualifiedClassName, // Argument type & argument name
    "object", // Argument type & argument name
    "boolean", // Argument type & argument name
    "update", // Argument type & argument name
    "Map<RealmModel,RealmObjectProxy>", // Argument type & argument name
    "cache");
    writer.beginControlFlow("if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().threadId != realm.threadId)").emitStatement("throw new IllegalArgumentException(\"Objects which belong to Realm instances in other" + " threads cannot be copied into this Realm instance.\")").endControlFlow();
    // If object is already in the Realm there is nothing to update
    writer.beginControlFlow("if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath()))").emitStatement("return object").endControlFlow();
    writer.emitStatement("RealmObjectProxy cachedRealmObject = cache.get(object)");
    writer.beginControlFlow("if (cachedRealmObject != null)").emitStatement("return (%s) cachedRealmObject", qualifiedClassName).nextControlFlow("else");
    if (!metadata.hasPrimaryKey()) {
        writer.emitStatement("return copy(realm, object, update, cache)");
    } else {
        writer.emitStatement("%s realmObject = null", qualifiedClassName).emitStatement("boolean canUpdate = update").beginControlFlow("if (canUpdate)").emitStatement("Table table = realm.getTable(%s.class)", qualifiedClassName).emitStatement("long pkColumnIndex = table.getPrimaryKey()");
        String primaryKeyGetter = metadata.getPrimaryKeyGetter();
        VariableElement primaryKeyElement = metadata.getPrimaryKey();
        if (metadata.isNullable(primaryKeyElement)) {
            if (Utils.isString(primaryKeyElement)) {
                writer.emitStatement("String value = ((%s) object).%s()", interfaceName, primaryKeyGetter).emitStatement("long rowIndex = TableOrView.NO_MATCH").beginControlFlow("if (value == null)").emitStatement("rowIndex = table.findFirstNull(pkColumnIndex)").nextControlFlow("else").emitStatement("rowIndex = table.findFirstString(pkColumnIndex, value)").endControlFlow();
            } else {
                writer.emitStatement("Number value = ((%s) object).%s()", interfaceName, primaryKeyGetter).emitStatement("long rowIndex = TableOrView.NO_MATCH").beginControlFlow("if (value == null)").emitStatement("rowIndex = table.findFirstNull(pkColumnIndex)").nextControlFlow("else").emitStatement("rowIndex = table.findFirstLong(pkColumnIndex, value.longValue())").endControlFlow();
            }
        } else {
            String pkType = Utils.isString(metadata.getPrimaryKey()) ? "String" : "Long";
            writer.emitStatement("long rowIndex = table.findFirst%s(pkColumnIndex, ((%s) object).%s())", pkType, interfaceName, primaryKeyGetter);
        }
        writer.beginControlFlow("if (rowIndex != TableOrView.NO_MATCH)").emitStatement("realmObject = new %s(realm.schema.getColumnInfo(%s.class))", qualifiedGeneratedClassName, qualifiedClassName).emitStatement("((RealmObjectProxy)realmObject).realmGet$proxyState().setRealm$realm(realm)").emitStatement("((RealmObjectProxy)realmObject).realmGet$proxyState().setRow$realm(table.getUncheckedRow(rowIndex))").emitStatement("cache.put(object, (RealmObjectProxy) realmObject)").nextControlFlow("else").emitStatement("canUpdate = false").endControlFlow();
        writer.endControlFlow();
        writer.emitEmptyLine().beginControlFlow("if (canUpdate)").emitStatement("return update(realm, realmObject, object, cache)").nextControlFlow("else").emitStatement("return copy(realm, object, update, cache)").endControlFlow();
    }
    writer.endControlFlow();
    writer.endMethod();
    writer.emitEmptyLine();
}||||||||private void emitCopyOrUpdateMethod(JavaWriter writer) throws IOException {
    writer.beginMethod(// Return type
    qualifiedClassName, // Method name
    "copyOrUpdate", // Modifiers
    EnumSet.of(Modifier.PUBLIC, Modifier.STATIC), // Argument type & argument name
    "Realm", // Argument type & argument name
    "realm", // Argument type & argument name
    qualifiedClassName, // Argument type & argument name
    "object", // Argument type & argument name
    "boolean", // Argument type & argument name
    "update", // Argument type & argument name
    "Map<RealmModel,RealmObjectProxy>", // Argument type & argument name
    "cache");
    writer.beginControlFlow("if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().threadId != realm.threadId)").emitStatement("throw new IllegalArgumentException(\"Objects which belong to Realm instances in other" + " threads cannot be copied into this Realm instance.\")").endControlFlow();
    // If object is already in the Realm there is nothing to update
    writer.beginControlFlow("if (object instanceof RealmObjectProxy && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy)object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath()))").emitStatement("return object").endControlFlow();
    writer.emitStatement("final BaseRealm.RealmObjectContext objectContext = BaseRealm.objectContext.get()");
    writer.emitStatement("RealmObjectProxy cachedRealmObject = cache.get(object)");
    writer.beginControlFlow("if (cachedRealmObject != null)").emitStatement("return (%s) cachedRealmObject", qualifiedClassName).nextControlFlow("else");
    if (!metadata.hasPrimaryKey()) {
        writer.emitStatement("return copy(realm, object, update, cache)");
    } else {
        writer.emitStatement("%s realmObject = null", qualifiedClassName).emitStatement("boolean canUpdate = update").beginControlFlow("if (canUpdate)").emitStatement("Table table = realm.getTable(%s.class)", qualifiedClassName).emitStatement("long pkColumnIndex = table.getPrimaryKey()");
        String primaryKeyGetter = metadata.getPrimaryKeyGetter();
        VariableElement primaryKeyElement = metadata.getPrimaryKey();
        if (metadata.isNullable(primaryKeyElement)) {
            if (Utils.isString(primaryKeyElement)) {
                writer.emitStatement("String value = ((%s) object).%s()", interfaceName, primaryKeyGetter).emitStatement("long rowIndex = TableOrView.NO_MATCH").beginControlFlow("if (value == null)").emitStatement("rowIndex = table.findFirstNull(pkColumnIndex)").nextControlFlow("else").emitStatement("rowIndex = table.findFirstString(pkColumnIndex, value)").endControlFlow();
            } else {
                writer.emitStatement("Number value = ((%s) object).%s()", interfaceName, primaryKeyGetter).emitStatement("long rowIndex = TableOrView.NO_MATCH").beginControlFlow("if (value == null)").emitStatement("rowIndex = table.findFirstNull(pkColumnIndex)").nextControlFlow("else").emitStatement("rowIndex = table.findFirstLong(pkColumnIndex, value.longValue())").endControlFlow();
            }
        } else {
            String pkType = Utils.isString(metadata.getPrimaryKey()) ? "String" : "Long";
            writer.emitStatement("long rowIndex = table.findFirst%s(pkColumnIndex, ((%s) object).%s())", pkType, interfaceName, primaryKeyGetter);
        }
        writer.beginControlFlow("if (rowIndex != TableOrView.NO_MATCH)").beginControlFlow("try").emitStatement("objectContext.set(realm, table.getUncheckedRow(rowIndex)," + " realm.schema.getColumnInfo(%s.class)," + " false, Collections.<String> emptyList())", qualifiedClassName).emitStatement("realmObject = new %s()", qualifiedGeneratedClassName).emitStatement("cache.put(object, (RealmObjectProxy) realmObject)").nextControlFlow("finally").emitStatement("objectContext.clear()").endControlFlow().nextControlFlow("else").emitStatement("canUpdate = false").endControlFlow();
        writer.endControlFlow();
        writer.emitEmptyLine().beginControlFlow("if (canUpdate)").emitStatement("return update(realm, realmObject, object, cache)").nextControlFlow("else").emitStatement("return copy(realm, object, update, cache)").endControlFlow();
    }
    writer.endControlFlow();
    writer.endMethod();
    writer.emitEmptyLine();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
					LineComment
				StringLiteralExpr
					LineComment
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				NameExpr
					SimpleName
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ConditionalExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										StringLiteralExpr
										StringLiteralExpr
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
					LineComment
				StringLiteralExpr
					LineComment
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				NameExpr
					SimpleName
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				StringLiteralExpr
					LineComment
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ConditionalExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										StringLiteralExpr
										StringLiteralExpr
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														NameExpr
															SimpleName
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

