/**
 * Transforms a source observable to be attached to the given fragment, in such a way that notifications will always
 * arrive on the main UI thread. Moreover, it will be guaranteed that no notifications will be delivered to the
 * fragment while it's in detached state (i.e. its host Activity was destroyed.) In other words, during calls
 * to onNext, you may assume that fragment.getActivity() will never return null.
 * <p/>
 * This method accepts both native fragments and support library fragments in its first parameter. It will throw
 * for unsupported types.
 * <p/>
 * You must unsubscribe from the returned observable in <code>onDestroy</code> to not leak the given fragment.
 * <p/>
 * Ex.:
 * <pre>
 * // in any Fragment
 * mSubscription = fromFragment(this, Observable.just("value")).subscribe(...);
 * // in onDestroy
 * mSubscription.unsubscribe();
 * </pre>
 *
 * @param fragment         the fragment in which the source observable will be observed
 * @param sourceObservable the observable sequence to observe from the given fragment
 * @param <T>
 * @return a new observable sequence that will emit notifications on the main UI thread
 */
public static <T> Observable<T> fromFragment(Object fragment, Observable<T> sourceObservable) {
    if (USES_SUPPORT_FRAGMENTS && fragment instanceof android.support.v4.app.Fragment) {
        return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);
    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && fragment instanceof Fragment) {
        return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);
    } else {
        throw new IllegalArgumentException("Target fragment is neither a native nor support library Fragment");
    }
}||||||||/**
 * Transforms a source observable to be attached to the given fragment, in such a way that notifications will always
 * arrive on the main UI thread. Moreover, it will be guaranteed that no notifications will be delivered to the
 * fragment while it's in detached state (i.e. its host Activity was destroyed.) In other words, during calls
 * to onNext, you may assume that fragment.getActivity() will never return null.
 * <p/>
 * This method accepts both native fragments and support library fragments in its first parameter. It will throw
 * for unsupported types.
 * <p/>
 * You must unsubscribe from the returned observable in <code>onDestroy</code> to not leak the given fragment.
 * <p/>
 * Ex.:
 * <pre>
 * // in any Fragment
 * mSubscription = fromFragment(this, Observable.just("value")).subscribe(...);
 * // in onDestroy
 * mSubscription.unsubscribe();
 * </pre>
 *
 * @param fragment         the fragment in which the source observable will be observed
 * @param sourceObservable the observable sequence to observe from the given fragment
 * @param <T>
 * @return a new observable sequence that will emit notifications on the main UI thread
 */
public static <T> Observable<T> fromFragment(Object fragment, Observable<T> sourceObservable) {
    Assertions.assertUiThread();
    if (USES_SUPPORT_FRAGMENTS && fragment instanceof android.support.v4.app.Fragment) {
        return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (android.support.v4.app.Fragment) fragment);
    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB && fragment instanceof Fragment) {
        return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, (Fragment) fragment);
    } else {
        throw new IllegalArgumentException("Target fragment is neither a native nor support library Fragment");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			(IfStmt
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			(IfStmt
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

