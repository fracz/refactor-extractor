/**
 * Transforms a source observable to be attached to the given Activity, in such a way that notifications will always
 * arrive on the main UI thread. Currently, this is equivalent to calling <code>observeOn(AndroidSchedulers.mainThread())</code>,
 * but this behavior may change in the future, so it is encouraged to use this wrapper instead.
 * <p/>
 * You must unsubscribe from the returned observable in <code>onDestroy</code> to not leak the given Activity.
 * <p/>
 * Ex.:
 * <pre>
 * // in any Activity
 * mSubscription = fromActivity(this, Observable.just("value")).subscribe(...);
 * // in onDestroy
 * mSubscription.unsubscribe();
 * </pre>
 *
 * @param activity         the activity in which the source observable will be observed
 * @param sourceObservable the observable sequence to observe from the given Activity
 * @param <T>
 * @return a new observable sequence that will emit notifications on the main UI thread
 */
public static <T> Observable<T> fromActivity(Activity activity, Observable<T> sourceObservable) {
    return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);
}||||||||/**
 * Transforms a source observable to be attached to the given Activity, in such a way that notifications will always
 * arrive on the main UI thread. Currently, this is equivalent to calling <code>observeOn(AndroidSchedulers.mainThread())</code>,
 * but this behavior may change in the future, so it is encouraged to use this wrapper instead.
 * <p/>
 * You must unsubscribe from the returned observable in <code>onDestroy</code> to not leak the given Activity.
 * <p/>
 * Ex.:
 * <pre>
 * // in any Activity
 * mSubscription = fromActivity(this, Observable.just("value")).subscribe(...);
 * // in onDestroy
 * mSubscription.unsubscribe();
 * </pre>
 *
 * @param activity         the activity in which the source observable will be observed
 * @param sourceObservable the observable sequence to observe from the given Activity
 * @param <T>
 * @return a new observable sequence that will emit notifications on the main UI thread
 */
public static <T> Observable<T> fromActivity(Activity activity, Observable<T> sourceObservable) {
    Assertions.assertUiThread();
    return OperatorObserveFromAndroidComponent.observeFromAndroidComponent(sourceObservable, activity);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

