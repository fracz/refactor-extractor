public void testMakeLocalNamesUniqueWithoutContext() {
    // Set the test type
    this.useDefaultRenamer = false;
    test("var a;", "var a$jscomp$unique_0");
    testEs6("let a;", "let a$jscomp$unique_0");
    // Verify undeclared names are untouched.
    testSame("a;");
    // Local names are made unique.
    test("var a;" + "function foo(a){var b;a}", "var a$jscomp$unique_0;" + "function foo$jscomp$unique_1(a$jscomp$unique_2){" + "  var b$jscomp$unique_3;a$jscomp$unique_2}");
    test("var a;" + "function foo(){var b;a}" + "function boo(){var b;a}", "var a$jscomp$unique_0;" + "function foo$jscomp$unique_1(){var b$jscomp$unique_3;a$jscomp$unique_0}" + "function boo$jscomp$unique_2(){var b$jscomp$unique_4;a$jscomp$unique_0}");
    testEs6("let a;" + "function foo(a){let b;a}", "let a$jscomp$unique_0;" + "function foo$jscomp$unique_1(a$jscomp$unique_2){" + "  let b$jscomp$unique_3;a$jscomp$unique_2}");
    testEs6("let a;" + "function foo(){let b;a}" + "function boo(){let b;a}", "let a$jscomp$unique_0;" + "function foo$jscomp$unique_1(){let b$jscomp$unique_3;a$jscomp$unique_0}" + "function boo$jscomp$unique_2(){let b$jscomp$unique_4;a$jscomp$unique_0}");
    // Verify function expressions are renamed.
    test("var a = function foo(){foo()};", "var a$jscomp$unique_0 = function foo$jscomp$unique_1(){foo$jscomp$unique_1()};");
    testEs6("const a = function foo(){foo()};", "const a$jscomp$unique_0 = function foo$jscomp$unique_1(){foo$jscomp$unique_1()};");
    // Verify catch exceptions names are made unique
    test("try { } catch(e) {e;}", "try { } catch(e$jscomp$unique_0) {e$jscomp$unique_0;}");
    test("try { } catch(e) {e;};" + "try { } catch(e) {e;}", "try { } catch(e$jscomp$unique_0) {e$jscomp$unique_0;};" + "try { } catch(e$jscomp$unique_1) {e$jscomp$unique_1;}");
    test("try { } catch(e) {e; " + "try { } catch(e) {e;}};", "try { } catch(e$jscomp$unique_0) {e$jscomp$unique_0; " + "try { } catch(e$jscomp$unique_1) {e$jscomp$unique_1;} }; ");
}||||||||public void testMakeLocalNamesUniqueWithoutContext() {
    // Set the test type
    this.useDefaultRenamer = false;
    test("var a;", "var a$jscomp$unique_0");
    testEs6("let a;", "let a$jscomp$unique_0");
    // Verify undeclared names are untouched.
    testSame("a;");
    // Local names are made unique.
    test("var a;" + "function foo(a){var b;a}", "var a$jscomp$unique_0;" + "function foo$jscomp$unique_1(a$jscomp$unique_2){" + "  var b$jscomp$unique_3;a$jscomp$unique_2}");
    test("var a;" + "function foo(){var b;a}" + "function boo(){var b;a}", "var a$jscomp$unique_0;" + "function foo$jscomp$unique_1(){var b$jscomp$unique_3;a$jscomp$unique_0}" + "function boo$jscomp$unique_2(){var b$jscomp$unique_4;a$jscomp$unique_0}");
    testEs6("let a; function foo(a) {let b; a; }", LINE_JOINER.join("let a$jscomp$unique_0;", "function foo$jscomp$unique_1(a$jscomp$unique_2) {", "  let b$jscomp$unique_3;", "  a$jscomp$unique_2;", "}"));
    testEs6(LINE_JOINER.join("let a;", "function foo() { let b; a; }", "function boo() { let b; a; }"), LINE_JOINER.join("let a$jscomp$unique_0;", "function foo$jscomp$unique_1() {", "  let b$jscomp$unique_3;", "  a$jscomp$unique_0;", "}", "function boo$jscomp$unique_2() {", "  let b$jscomp$unique_4;", "  a$jscomp$unique_0;", "}"));
    // Verify function expressions are renamed.
    test("var a = function foo(){foo()};", "var a$jscomp$unique_0 = function foo$jscomp$unique_1(){foo$jscomp$unique_1()};");
    testEs6("const a = function foo(){foo()};", "const a$jscomp$unique_0 = function foo$jscomp$unique_1(){foo$jscomp$unique_1()};");
    // Verify catch exceptions names are made unique
    test("try { } catch(e) {e;}", "try { } catch(e$jscomp$unique_0) {e$jscomp$unique_0;}");
    test("try { } catch(e) {e;};" + "try { } catch(e) {e;}", "try { } catch(e$jscomp$unique_0) {e$jscomp$unique_0;};" + "try { } catch(e$jscomp$unique_1) {e$jscomp$unique_1;}");
    test("try { } catch(e) {e; " + "try { } catch(e) {e;}};", "try { } catch(e$jscomp$unique_0) {e$jscomp$unique_0; " + "try { } catch(e$jscomp$unique_1) {e$jscomp$unique_1;} }; ");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

