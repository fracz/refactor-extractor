/**
 * Returns true if some node in n's subtree changes application state.
 * If {@code checkForNewObjects} is true, we assume that newly created
 * mutable objects (like object literals) change state. Otherwise, we assume
 * that they have no side effects.
 */
private static boolean checkForStateChangeHelper(Node n, boolean checkForNewObjects) {
    // that we know to be safe
    switch(n.getType()) {
        // other side-effect free statements and expressions
        case Token.AND:
        case Token.BLOCK:
        case Token.EXPR_RESULT:
        case Token.HOOK:
        case Token.IF:
        case Token.IN:
        case Token.LP:
        case Token.NUMBER:
        case Token.OR:
        case Token.THIS:
        case Token.TRUE:
        case Token.FALSE:
        case Token.NULL:
        case Token.STRING:
        case Token.SWITCH:
        case Token.TRY:
        case Token.EMPTY:
            break;
        // Throws are by definition side effects
        case Token.THROW:
            return true;
        case Token.OBJECTLIT:
        case Token.ARRAYLIT:
        case Token.REGEXP:
            if (checkForNewObjects) {
                return true;
            }
            break;
        // empty var statement (no declaration)
        case Token.VAR:
        case // variable by itself
        Token.NAME:
            if (n.getFirstChild() != null)
                return true;
            break;
        case Token.FUNCTION:
            // 
            return !isFunctionAnonymous(n);
        case Token.NEW:
            {
                if (checkForNewObjects) {
                    return true;
                }
                // no side effect property set.
                if (n.isNoSideEffectsCall()) {
                    break;
                }
                // certain constructors are certified side effect free
                Node constructor = n.getFirstChild();
                if (Token.NAME == constructor.getType()) {
                    String className = constructor.getString();
                    if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {
                        // side-effects
                        break;
                    }
                } else {
                // the constructor could also be an expression like
                // new (useArray ? Object : Array)();
                }
            }
            return true;
        case Token.CALL:
            // side effect property set.
            if (n.isNoSideEffectsCall()) {
                // side-effects
                break;
            }
            return true;
        default:
            if (isSimpleOperatorType(n.getType()))
                break;
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (checkForStateChangeHelper(c, checkForNewObjects)) {
            return true;
        }
    }
    return false;
}||||||||/**
 * Returns true if some node in n's subtree changes application state.
 * If {@code checkForNewObjects} is true, we assume that newly created
 * mutable objects (like object literals) change state. Otherwise, we assume
 * that they have no side effects.
 */
private static boolean checkForStateChangeHelper(Node n, boolean checkForNewObjects) {
    // that we know to be safe
    switch(n.getType()) {
        // other side-effect free statements and expressions
        case Token.AND:
        case Token.BLOCK:
        case Token.EXPR_RESULT:
        case Token.HOOK:
        case Token.IF:
        case Token.IN:
        case Token.LP:
        case Token.NUMBER:
        case Token.OR:
        case Token.THIS:
        case Token.TRUE:
        case Token.FALSE:
        case Token.NULL:
        case Token.STRING:
        case Token.SWITCH:
        case Token.TRY:
        case Token.EMPTY:
            break;
        // Throws are by definition side effects
        case Token.THROW:
            return true;
        case Token.OBJECTLIT:
        case Token.ARRAYLIT:
        case Token.REGEXP:
            if (checkForNewObjects) {
                return true;
            }
            break;
        // empty var statement (no declaration)
        case Token.VAR:
        case // variable by itself
        Token.NAME:
            if (n.getFirstChild() != null)
                return true;
            break;
        case Token.FUNCTION:
            // 
            return !isFunctionAnonymous(n);
        case Token.NEW:
            {
                if (checkForNewObjects) {
                    return true;
                }
                // no side effect property set.
                if (n.isNoSideEffectsCall()) {
                    break;
                }
                // certain constructors are certified side effect free
                Node constructor = n.getFirstChild();
                if (Token.NAME == constructor.getType()) {
                    String className = constructor.getString();
                    if (CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(className)) {
                        // side-effects
                        break;
                    }
                } else {
                // the constructor could also be an expression like
                // new (useArray ? Object : Array)();
                }
            }
            return true;
        case Token.CALL:
            // side effect property set.
            if (n.isNoSideEffectsCall()) {
                // side-effects
                break;
            }
            return true;
        default:
            if (isSimpleOperatorType(n.getType()))
                break;
            if (isAssignmentOp(n)) {
                // c) A name on the LHS will exist beyond the life of this statement.
                if (checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects) || checkForStateChangeHelper(n.getLastChild(), checkForNewObjects)) {
                    return true;
                }
                Node current = n.getFirstChild();
                for (; current.getType() == Token.GETPROP || current.getType() == Token.GETELEM; current = current.getFirstChild()) {
                }
                return !(isLiteralValue(current) || current.getType() == Token.FUNCTION);
            }
            return true;
    }
    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
        if (checkForStateChangeHelper(c, checkForNewObjects)) {
            return true;
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
				LineComment
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ReturnStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(BreakStmt
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(BreakStmt
										LineComment
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(BreakStmt
							LineComment
						)
					)
					LineComment
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					(BreakStmt
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
				LineComment
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ReturnStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(BreakStmt
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(BreakStmt
										LineComment
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(BreakStmt
							LineComment
						)
					)
					LineComment
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					(BreakStmt
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
							)
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							(UnaryExpr
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

