public void testStaticWithFunctions() {
    String js = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.x = 0;", "/** @param {!Function} x */ function f(x) { x.y = 1 }", "f(Foo)");
    String output = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.a = 0;", "/** @param {!Function} x */ function f(x) { x.y = 1 }", "f(Foo)");
    test(js, output);
    js = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.x = 0;", "/** @param {!Function} x */ function f(x) { x.y = 1; x.x = 2;}", "f(Foo)");
    test(js, js);
    js = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.x = 0;", "/** @constructor */ var Bar = function() {};", "Bar.y = 0;");
    output = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.a = 0;", "/** @constructor */ var Bar = function() {};", "Bar.a = 0;");
    test(js, output);
}||||||||public void testStaticWithFunctions() {
    String js = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.x = 0;", "/** @param {!Function} x */ function f(x) { x.y = 1 }", "f(Foo)");
    String output = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.a = 0;", "/** @param {!Function} x */ function f(x) { x.y = 1 }", "f(Foo)");
    test(js, output);
    js = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.x = 0;", "/** @param {!Function} x */ function f(x) { x.y = 1; x.x = 2;}", "f(Foo)");
    testSame(js);
    js = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.x = 0;", "/** @constructor */ var Bar = function() {};", "Bar.y = 0;");
    output = LINE_JOINER.join("/** @constructor */ var Foo = function() {};", "Foo.a = 0;", "/** @constructor */ var Bar = function() {};", "Bar.a = 0;");
    test(js, output);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

