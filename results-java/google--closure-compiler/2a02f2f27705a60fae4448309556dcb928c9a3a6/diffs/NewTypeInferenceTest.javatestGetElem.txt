public void testGetElem() {
    typeCheck("/** @constructor */\n" + "function C(){ /** @type {number} */ this.prop = 1; }\n" + "(new C)['prop'] < 'asdf';", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("function f(x, y) {\n" + "  x < y;\n" + "  ({})[y - 5];\n" + "  x = 'asdf';\n" + "}\n" + "f('asdf', 123);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function f(x, y) {\n" + "  ({})[y - 5];\n" + "  x < y;\n" + "}\n" + "f('asdf', 123);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function f(x) {\n" + "  x['prop'] = 'str';\n" + "  return x['prop'] - 5;\n" + "}\n" + "f({});", NewTypeInference.INVALID_OPERAND_TYPE);
    // TODO(blickly): The fact that this has no warnings is somewhat unpleasant.
    checkNoWarnings("function f(x) {\n" + "  x['prop'] = 7;\n" + "  var p = 'prop';\n" + "  x[p] = 'str';\n" + "  return x['prop'] - 5;\n" + "}\n" + "f({});");
}||||||||public void testGetElem() {
    typeCheck("/** @constructor */\n" + "function C(){ /** @type {number} */ this.prop = 1; }\n" + "(new C)['prop'] < 'asdf';", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("function f(x, y) {\n" + "  x < y;\n" + "  ({})[y - 5];\n" + "}\n" + "f('asdf', 123);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    // We don't see the warning here b/c the formal param x is assigned to a
    // string, and we use x's type at the end of the function to create the
    // summary.
    checkNoWarnings("function f(x, y) {\n" + "  x < y;\n" + "  ({})[y - 5];\n" + "  x = 'asdf';\n" + "}\n" + "f('asdf', 123);");
    typeCheck("function f(x, y) {\n" + "  ({})[y - 5];\n" + "  x < y;\n" + "}\n" + "f('asdf', 123);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function f(x) {\n" + "  x['prop'] = 'str';\n" + "  return x['prop'] - 5;\n" + "}\n" + "f({});", NewTypeInference.INVALID_OPERAND_TYPE);
    // TODO(blickly): The fact that this has no warnings is somewhat unpleasant.
    checkNoWarnings("function f(x) {\n" + "  x['prop'] = 7;\n" + "  var p = 'prop';\n" + "  x[p] = 'str';\n" + "  return x['prop'] - 5;\n" + "}\n" + "f({});");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)

