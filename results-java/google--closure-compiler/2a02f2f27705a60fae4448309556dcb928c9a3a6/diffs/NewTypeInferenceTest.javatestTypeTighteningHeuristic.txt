public void testTypeTighteningHeuristic() {
    typeCheck("/** @param {*} x */ function f(x) { var /** ? */ y = x; x - 5; }", NewTypeInference.INVALID_OPERAND_TYPE);
    checkNoWarnings("function f(/** ? */ x) {\n" + "  if (!(typeof x == 'number')) {\n" + "    x < 'asdf';\n" + "  }\n" + "}");
    // We may prefer to not warn here.
    // This would probably require a separate type for undeclared.
    typeCheck("function f(/** { prop: ? } */ x) {\n" + "  var /** (number|string) */ y = x.prop;\n" + "  x.prop < 5;\n" + "}", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("function f(/** (number|string) */ x, /** (number|string) */ y) {\n" + "  var z;\n" + "  if (1 < 2) {\n" + "    z = x;\n" + "  } else {\n" + "    z = y;\n" + "  }\n" + "  z - 5;\n" + "}", NewTypeInference.INVALID_OPERAND_TYPE);
}||||||||public void testTypeTighteningHeuristic() {
    typeCheck("/** @param {*} x */ function f(x) { var /** ? */ y = x; x - 5; }", NewTypeInference.INVALID_OPERAND_TYPE);
    checkNoWarnings("function f(/** ? */ x) {\n" + "  if (!(typeof x == 'number')) {\n" + "    x < 'asdf';\n" + "  }\n" + "}");
    checkNoWarnings("function f(/** { prop: ? } */ x) {\n" + "  var /** (number|string) */ y = x.prop;\n" + "  x.prop < 5;\n" + "}");
    typeCheck("function f(/** (number|string) */ x, /** (number|string) */ y) {\n" + "  var z;\n" + "  if (1 < 2) {\n" + "    z = x;\n" + "  } else {\n" + "    z = y;\n" + "  }\n" + "  z - 5;\n" + "}", NewTypeInference.INVALID_OPERAND_TYPE);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

