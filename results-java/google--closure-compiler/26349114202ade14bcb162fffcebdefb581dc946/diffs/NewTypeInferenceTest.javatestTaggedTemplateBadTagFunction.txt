public void testTaggedTemplateBadTagFunction() {
    // Invalid first parameter type for specific object
    typeCheck(LINE_JOINER.join("function tag(/** {a:number} */ strings){}", "tag `template string`;"), NewTypeInference.TEMPLATE_ARGUMENT_MISMATCH);
    // !Array<number> does not work as first argument.
    typeCheck(LINE_JOINER.join("function tag(/** !Array<number> */ strings){}", "tag`template string`;"), NewTypeInference.TEMPLATE_ARGUMENT_MISMATCH);
    // Check argument count with tag function that has no parameters
    typeCheck(LINE_JOINER.join("function tag(){}", "tag``;"), NewTypeInference.TEMPLATE_ARGUMENT_MISMATCH, NewTypeInference.WRONG_ARGUMENT_COUNT);
    // Tag function not a function
    typeCheck(LINE_JOINER.join("var tag = 42;", "tag `template string`;"), NewTypeInference.NOT_CALLABLE);
    // Check backwards-infer type of template sub from type of tag function.
    typeCheck(LINE_JOINER.join("function tag(/** !Array<string> */ strs, /** string */ x){}", "function h(x) {", "  tag `asdf ${x} asdf`;", "  return x - 2;", "}"), NewTypeInference.INVALID_OPERAND_TYPE);
}||||||||public void testTaggedTemplateBadTagFunction() {
    // Invalid first parameter type for specific object
    typeCheck(LINE_JOINER.join("function tag(/** {a:number} */ strings){}", "tag `template string`;"), NewTypeInference.TEMPLATE_ARGUMENT_MISMATCH);
    // !Array<number> does not work as first argument.
    typeCheck(LINE_JOINER.join("function tag(/** !Array<number> */ strings){}", "tag`template string`;"), NewTypeInference.TEMPLATE_ARGUMENT_MISMATCH);
    // Check argument count with tag function that has no parameters
    typeCheck(LINE_JOINER.join("function tag(){}", "tag``;"), NewTypeInference.TEMPLATE_ARGUMENT_MISSING);
    // Tag function not a function
    typeCheck(LINE_JOINER.join("var tag = 42;", "tag `template string`;"), NewTypeInference.NOT_CALLABLE);
    // Check backwards-infer type of template sub from type of tag function.
    typeCheck(LINE_JOINER.join("function tag(/** !Array<string> */ strs, /** string */ x){}", "function h(x) {", "  tag `asdf ${x} asdf`;", "  return x - 2;", "}"), NewTypeInference.INVALID_OPERAND_TYPE);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)

