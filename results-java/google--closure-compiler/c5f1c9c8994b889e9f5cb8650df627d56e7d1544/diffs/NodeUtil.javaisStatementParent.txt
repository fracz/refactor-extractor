static boolean isStatementParent(Node parent) {
    // It is not possible to determine definitely if a node is a statement
    // or not if it is not part of the AST.  A FUNCTION node can be
    // either part of an expression or a statement.
    Preconditions.checkState(parent != null);
    switch(parent.getToken()) {
        case SCRIPT:
        case MODULE_BODY:
        case BLOCK:
        case LABEL:
        case // The body of TypeScript namespace is also a statement parent
        NAMESPACE_ELEMENTS:
            return true;
        default:
            return false;
    }
}||||||||static boolean isStatementParent(Node parent) {
    // either part of an expression or a statement.
    return IS_STATEMENT_PARENT.contains(parent.getToken());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
					LineComment
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

