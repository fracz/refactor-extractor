/**
 * Given a node, get a human-readable name for the type of that node so
 * that will be easy for the programmer to find the original declaration.
 *
 * For example, if SubFoo's property "bar" might have the human-readable
 * name "Foo.prototype.bar".
 *
 * @param n The node.
 * @param dereference If true, the type of the node will be dereferenced
 * to an Object type, if possible.
 */
private String getReadableJSTypeName(Node n, boolean dereference) {
    JSType type = getJSTypeOrUnknown(n);
    if (dereference) {
        ObjectType dereferenced = type.dereference();
        if (dereferenced != null) {
            type = dereferenced;
        }
    }
    // The best type name is the actual type name.
    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {
        return type.toString();
    }
    // the property was originally defined.
    if (n.isGetProp()) {
        ObjectType objectType = getJSTypeOrUnknown(n.getFirstChild()).dereference();
        if (objectType != null) {
            String propName = n.getLastChild().getString();
            if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {
                objectType = FunctionType.getTopDefiningInterface(objectType, propName);
            } else {
                // classes
                while (objectType != null && !objectType.hasOwnProperty(propName)) {
                    objectType = objectType.getImplicitPrototype();
                }
            }
            // Instead, try to get a human-readable type name.
            if (objectType != null && (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {
                return objectType + "." + propName;
            }
        }
    }
    if (n.isQualifiedName()) {
        return n.getQualifiedName();
    } else if (type.isFunctionType()) {
        // Don't show complex function names.
        return "function";
    } else {
        return type.toString();
    }
}||||||||/**
 * Given a node, get a human-readable name for the type of that node so
 * that will be easy for the programmer to find the original declaration.
 *
 * For example, if SubFoo's property "bar" might have the human-readable
 * name "Foo.prototype.bar".
 *
 * @param n The node.
 * @param dereference If true, the type of the node will be dereferenced
 * to an Object type, if possible.
 */
private String getReadableJSTypeName(Node n, boolean dereference) {
    JSType type = getJSTypeOrUnknown(n);
    if (dereference) {
        ObjectType dereferenced = type.dereference();
        if (dereferenced != null) {
            type = dereferenced;
        }
    }
    // The best type name is the actual type name.
    if (type.isFunctionPrototypeType()) {
        return type.toString();
    }
    if (type.toObjectType() != null && type.toObjectType().getConstructor() != null) {
        Node source = type.toObjectType().getConstructor().getSource();
        if (source == null) {
            return type.toString();
        }
        Preconditions.checkState(source.isFunction(), source);
        String readable = source.getFirstChild().getOriginalName();
        if (readable == null) {
            return type.toString();
        }
        return readable;
    }
    // the property was originally defined.
    if (n.isGetProp()) {
        ObjectType objectType = getJSTypeOrUnknown(n.getFirstChild()).dereference();
        if (objectType != null) {
            String propName = n.getLastChild().getString();
            if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {
                objectType = FunctionType.getTopDefiningInterface(objectType, propName);
            } else {
                // classes
                while (objectType != null && !objectType.hasOwnProperty(propName)) {
                    objectType = objectType.getImplicitPrototype();
                }
            }
            // Instead, try to get a human-readable type name.
            if (objectType != null && (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {
                return objectType + "." + propName;
            }
        }
    }
    if (n.isQualifiedName()) {
        return n.getQualifiedName();
    } else if (type.isFunctionType()) {
        // Don't show complex function names.
        return "function";
    } else {
        return type.toString();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							NullLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(UnaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NullLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						StringLiteralExpr
						LineComment
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(UnaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NullLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						StringLiteralExpr
						LineComment
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

