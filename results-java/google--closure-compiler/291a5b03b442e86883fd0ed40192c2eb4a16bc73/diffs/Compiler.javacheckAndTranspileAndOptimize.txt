/**
 * Perform checks transpilation and optimization.
 *
 * <p>Either {@code init()} or {@code initModules()} must be called before this method is called.
 * <p>The caller is responsible for also calling {@code generateReport()} to generate a
 * report of warnings and errors to stderr.  See the invocation in
 * {@link #initAndCheckAndTranspileAndOptimize} for a good example.
 * <p> TODO(bradfordcsmith): Break this up into checkAndTranspile() and optimize().
 * @return compilation results.
 */
public Result checkAndTranspileAndOptimize() {
    checkState(inputs != null && !inputs.isEmpty(), "No inputs. Did you call init() or initModules()?");
    return runInCompilerThread(new Callable<Result>() {

        @Override
        public Result call() throws Exception {
            parseForCompilation();
            if (!hasErrors()) {
                if (options.getInstrumentForCoverageOnly()) {
                    instrumentForCoverage(options.instrumentBranchCoverage);
                } else {
                    compileInternal();
                }
            }
            return getResult();
        }
    });
}||||||||/**
 * Perform checks transpilation and optimization.
 *
 * <p>Either {@code init()} or {@code initModules()} must be called before this method is called.
 * <p>The caller is responsible for also calling {@code generateReport()} to generate a
 * report of warnings and errors to stderr.  See the invocation in
 * {@link #initAndCheckAndTranspileAndOptimize} for a good example.
 * <p> TODO(bradfordcsmith): Break this up into checkAndTranspile() and optimize().
 * @return compilation results.
 */
public Result checkAndTranspileAndOptimize() {
    checkState(inputs != null && !inputs.isEmpty(), "No inputs. Did you call init() or initModules()?");
    return runInCompilerThread(new Callable<Result>() {

        @Override
        public Result call() throws Exception {
            parseForCompilation();
            if (!hasErrors()) {
                if (options.getInstrumentForCoverageOnly()) {
                    instrumentForCoverage(options.instrumentBranchCoverage);
                } else {
                    performChecksAndTranspilation();
                    if (!hasErrors() && options.shouldOptimize()) {
                        performOptimizations();
                    }
                }
            }
            completeCompilation();
            return getResult();
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										SimpleName
									)
								)
								(BlockStmt
									(IfStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
											)
										)
									)
								)
							)
							(ReturnStmt
								(MethodCallExpr
									SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										SimpleName
									)
								)
								(BlockStmt
									(IfStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
												)
											)
											(IfStmt
												(BinaryExpr
													(UnaryExpr
														(MethodCallExpr
															SimpleName
														)
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
														)
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
											)
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ReturnStmt
								(MethodCallExpr
									SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)

