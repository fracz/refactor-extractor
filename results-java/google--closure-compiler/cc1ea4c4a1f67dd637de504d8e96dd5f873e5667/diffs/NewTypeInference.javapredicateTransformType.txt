// typeHint can come from goog.typeOf or from any function
// in CodingConvention's isPropertyTestFunction.
private JSType predicateTransformType(String typeHint, JSType booleanContext, JSType beforeType) {
    switch(typeHint) {
        case "array":
        case "isArray":
            {
                JSType arrayType = commonTypes.getArrayInstance();
                if (arrayType.isUnknown()) {
                    return JSType.UNKNOWN;
                }
                return booleanContext.isTrueOrTruthy() ? arrayType : beforeType.removeType(arrayType);
            }
        case "isArrayLike":
            return JSType.TOP_OBJECT.withProperty(new QualifiedName("length"), JSType.NUMBER);
        case "boolean":
        case "isBoolean":
            return booleanContext.isTrueOrTruthy() ? JSType.BOOLEAN : beforeType.removeType(JSType.BOOLEAN);
        case "function":
        case "isFunction":
            return booleanContext.isTrueOrTruthy() ? commonTypes.looseTopFunction() : beforeType.removeType(commonTypes.topFunction());
        case "null":
        case "isNull":
            return booleanContext.isTrueOrTruthy() ? JSType.NULL : beforeType.removeType(JSType.NULL);
        case "number":
        case "isNumber":
            return booleanContext.isTrueOrTruthy() ? JSType.NUMBER : beforeType.removeType(JSType.NUMBER);
        case "string":
        case "isString":
            return booleanContext.isTrueOrTruthy() ? JSType.STRING : beforeType.removeType(JSType.STRING);
        case "isDef":
            return booleanContext.isTrueOrTruthy() ? beforeType.removeType(JSType.UNDEFINED) : JSType.UNDEFINED;
        case "isDefAndNotNull":
            return booleanContext.isTrueOrTruthy() ? beforeType.removeType(JSType.NULL_OR_UNDEF) : JSType.NULL_OR_UNDEF;
        case "isObject":
            // typeof(null) === 'object', but goog.isObject(null) is false
            return booleanContext.isTrueOrTruthy() ? JSType.TOP_OBJECT : beforeType.removeType(JSType.TOP_OBJECT);
        case "object":
            // Just do sth simple here.
            return JSType.UNKNOWN;
        case "undefined":
            return booleanContext.isTrueOrTruthy() ? JSType.UNDEFINED : beforeType.removeType(JSType.UNDEFINED);
        default:
            // For when we can't figure out the type name used with goog.typeOf.
            return JSType.UNKNOWN;
    }
}||||||||// typeHint can come from goog.typeOf or from any function
// in CodingConvention's isPropertyTestFunction.
private JSType predicateTransformType(String typeHint, JSType booleanContext, JSType beforeType) {
    switch(typeHint) {
        case "array":
        case "isArray":
            {
                JSType arrayType = commonTypes.getArrayInstance();
                if (arrayType.isUnknown()) {
                    return UNKNOWN;
                }
                return booleanContext.isTrueOrTruthy() ? arrayType : beforeType.removeType(arrayType);
            }
        case "isArrayLike":
            return TOP_OBJECT.withProperty(new QualifiedName("length"), NUMBER);
        case "boolean":
        case "isBoolean":
            return booleanContext.isTrueOrTruthy() ? BOOLEAN : beforeType.removeType(BOOLEAN);
        case "function":
        case "isFunction":
            return booleanContext.isTrueOrTruthy() ? commonTypes.looseTopFunction() : beforeType.removeType(commonTypes.topFunction());
        case "null":
        case "isNull":
            return booleanContext.isTrueOrTruthy() ? NULL : beforeType.removeType(NULL);
        case "number":
        case "isNumber":
            return booleanContext.isTrueOrTruthy() ? NUMBER : beforeType.removeType(NUMBER);
        case "string":
        case "isString":
            return booleanContext.isTrueOrTruthy() ? STRING : beforeType.removeType(STRING);
        case "isDef":
            return booleanContext.isTrueOrTruthy() ? beforeType.removeType(UNDEFINED) : UNDEFINED;
        case "isDefAndNotNull":
            return booleanContext.isTrueOrTruthy() ? beforeType.removeType(NULL_OR_UNDEFINED) : NULL_OR_UNDEFINED;
        case "isObject":
            // typeof(null) === 'object', but goog.isObject(null) is false
            return booleanContext.isTrueOrTruthy() ? TOP_OBJECT : beforeType.removeType(TOP_OBJECT);
        case "object":
            // Just do sth simple here.
            return UNKNOWN;
        case "undefined":
            return booleanContext.isTrueOrTruthy() ? UNDEFINED : beforeType.removeType(UNDEFINED);
        default:
            // For when we can't figure out the type name used with goog.typeOf.
            return UNKNOWN;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(ReturnStmt
						(ConditionalExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
					)
					(ReturnStmt
						(ConditionalExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					NameExpr
						SimpleName
					LineComment
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					NameExpr
						SimpleName
					LineComment
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

