private JSType getTypeFromString(Node typeString) {
    if (!typeString.isString()) {
        return JSType.UNKNOWN;
    }
    switch(typeString.getString()) {
        case "number":
            return JSType.NUMBER;
        case "string":
            return JSType.STRING;
        case "boolean":
            return JSType.BOOLEAN;
        case "undefined":
            return JSType.UNDEFINED;
        case "function":
            return commonTypes.looseTopFunction();
        case "object":
            return JSType.join(JSType.NULL, JSType.TOP_OBJECT);
        default:
            return JSType.UNKNOWN;
    }
}||||||||private JSType getTypeFromString(Node typeString) {
    if (!typeString.isString()) {
        return UNKNOWN;
    }
    switch(typeString.getString()) {
        case "number":
            return NUMBER;
        case "string":
            return STRING;
        case "boolean":
            return BOOLEAN;
        case "undefined":
            return UNDEFINED;
        case "function":
            return commonTypes.looseTopFunction();
        case "object":
            return JSType.join(NULL, TOP_OBJECT);
        default:
            return UNKNOWN;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				StringLiteralExpr
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

