/**
 * Checks the structure of the AST of a type transformation expression
 * in @template T := expression =:
 */
private boolean validTypeTransformationExpression(Node expr) {
    if (!isValidExpression(expr)) {
        warnInvalidExpression("type transformation", expr);
        return false;
    }
    // If the expression is a type variable or a type name then return
    if (isTypeVar(expr) || isTypeName(expr)) {
        return true;
    }
    // If it is a CALL we can safely move one level down
    String name = expr.getFirstChild().getString();
    // Check for valid operations
    if (!isValidKeyword(name)) {
        warnInvalidExpression("type transformation", expr);
        return false;
    }
    Keywords keyword = nameToKeyword(name);
    // Check the rest of the expression depending on the operation
    if (keyword.kind == OperationKind.TYPE_CONSTRUCTOR) {
        return validTypeExpression(expr);
    }
    if (keyword == Keywords.COND) {
        return validConditionalExpression(expr);
    }
    if (keyword == Keywords.MAPUNION) {
        return validMapunionExpression(expr);
    }
    throw new IllegalStateException("Invalid type transformation expression");
}||||||||/**
 * Checks the structure of the AST of a type transformation expression
 * in @template T := TTLExp =:
 */
private boolean validTypeTransformationExpression(Node expr) {
    if (!isValidExpression(expr)) {
        warnInvalidExpression("type transformation", expr);
        return false;
    }
    if (isTypeVar(expr) || isTypeName(expr)) {
        return true;
    }
    // Check for valid keyword
    String name = expr.getFirstChild().getString();
    if (!isValidKeyword(name)) {
        warnInvalidExpression("type transformation", expr);
        return false;
    }
    Keywords keyword = nameToKeyword(name);
    // Check the rest of the expression depending on the kind
    switch(keyword.kind) {
        case TYPE_CONSTRUCTOR:
            return validTypeExpression(expr);
        case OPERATION:
            return validOperationExpression(expr);
        default:
            throw new IllegalStateException("Invalid type transformation expression");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				StringLiteralExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

