public void testDifficultClassGenericsInstantiation() {
    typeCheck(LINE_JOINER.join("/**", " * @template T", " * @constructor", " * @param {T} x", " */", "function Foo(x) {}", "/** @param {Bar<T>} x */", "Foo.prototype.method = function(x) {};", "/**", " * @template T", " * @constructor", " * @param {T} x", " */", "function Bar(x) {}", "/** @param {Foo<T>} x */", "Bar.prototype.method = function(x) {};", "(new Foo(123)).method(new Bar('asdf'));"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/**", " * @template T", " * @constructor", " * @param {T} x", " */", "function Foo(x) {}", "/** @param {Foo<Foo<T>>} x */", "Foo.prototype.method = function(x) {};", "(new Foo(123)).method(new Foo(new Foo('asdf')));"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/** @interface\n @template T */function A() {};", "/** @return {T} */A.prototype.foo = function() {};", "/** @interface\n @template U\n @extends {A<U>} */function B() {};", "/** @constructor\n @implements {B<string>} */function C() {};", "/** @return {string}\n @override */", "C.prototype.foo = function() { return 123; };"), NewTypeInference.RETURN_NONDECLARED_TYPE);
    // Polymorphic method on a generic class.
    typeCheck(LINE_JOINER.join("/**", " * @constructor", " * @template T", " * @param {T} x", " */", "function Foo(x) {}", "/**", " * @template U", " * @param {U} x", " * @return {U}", " */", "Foo.prototype.method = function(x) { return x; };", "(new Foo(123)).method('asdf') - 5;"), NewTypeInference.INVALID_OPERAND_TYPE);
    // typeCheck(LINE_JOINER.join(
    // "/**",
    // " * @template T",
    // " * @constructor",
    // " */",
    // "function Foo() {}",
    // "/** @param {T} x */",
    // "Foo.prototype.method = function(x) {};",
    // "",
    // "/**",
    // " * @template T",
    // " * @constructor",
    // " * @extends {Foo<T>}",
    // " * @param {T} x",
    // " */",
    // "function Bar(x) {}",
    // // Invalid instantiation here, must be T, o/w bugs like the call to f
    // "/** @param {number} x */",
    // "Bar.prototype.method = function(x) {};",
    // "",
    // "/** @param {!Foo<string>} x */",
    // "function f(x) { x.method('sadf'); };",
    // "f(new Bar('asdf'));"),
    // NewTypeInference.FAILED_TO_UNIFY);
    typeCheck(LINE_JOINER.join("/**", " * @constructor", " * @template T,U", " */", "function Foo() {}", "Foo.prototype.m1 = function() {", "  this.m2(123);", "};", "/**", " * @template U", " * @param {U} x", " */", "Foo.prototype.m2 = function(x) {};"));
    typeCheck(LINE_JOINER.join("/**", " * @constructor", " * @template T, U", " */", "function Foo() {}", "/**", // shadows Foo#T, U still visible
    " * @template T", " * @param {T} x", " * @param {U} y", " */", "Foo.prototype.method = function(x, y) {};", "var obj = /** @type {!Foo<number, number>} */ (new Foo);", // OK
    "obj.method('asdf', 123);", // warning
    "obj.method('asdf', 'asdf');"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/**", " * @interface", " * @template T", " */", "function High() {}", "/** @param {T} x */", "High.prototype.method = function(x) {};", "/**", " * @constructor", " * @implements {High<number>}", " */", "function Low() {}", "/**", " * @template T", " * @param {T} x", " */", "Low.prototype.method = function(x) {};"));
    typeCheck(LINE_JOINER.join("/**", " * @template T, U", " * @constructor", " */", "function Foo() {}", "/**", " * @template T", " * @param {!Foo<T,T>} x", " */", "function f(x) {}", "/**", " * @param {!Foo<?,number>} x", " */", "function g(x) {", "  f(x);", "}"));
    typeCheck(LINE_JOINER.join("/**", " * @template T, U", " * @constructor", " */", "function Foo() {}", "/**", " * @template T", " * @param {!Foo<T,T>} x", " */", "function f(x) {}", "/**", " * @param {!Foo<Foo<?,?>,Foo<number,number>>} x", " */", "function g(x) {", "  f(x);", "}"));
}||||||||public void testDifficultClassGenericsInstantiation() {
    typeCheck(LINE_JOINER.join("/**", " * @template T", " * @constructor", " * @param {T} x", " */", "function Foo(x) {}", "/** @param {Bar<T>} x */", "Foo.prototype.method = function(x) {};", "/**", " * @template T", " * @constructor", " * @param {T} x", " */", "function Bar(x) {}", "/** @param {Foo<T>} x */", "Bar.prototype.method = function(x) {};", "(new Foo(123)).method(new Bar('asdf'));"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/**", " * @template T", " * @constructor", " * @param {T} x", " */", "function Foo(x) {}", "/** @param {Foo<Foo<T>>} x */", "Foo.prototype.method = function(x) {};", "(new Foo(123)).method(new Foo(new Foo('asdf')));"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/** @interface\n @template T */function A() {};", "/** @return {T} */A.prototype.foo = function() {};", "/** @interface\n @template U\n @extends {A<U>} */function B() {};", "/** @constructor\n @implements {B<string>} */function C() {};", "/** @return {string}\n @override */", "C.prototype.foo = function() { return 123; };"), NewTypeInference.RETURN_NONDECLARED_TYPE);
    // Polymorphic method on a generic class.
    typeCheck(LINE_JOINER.join("/**", " * @constructor", " * @template T", " * @param {T} x", " */", "function Foo(x) {}", "/**", " * @template U", " * @param {U} x", " * @return {U}", " */", "Foo.prototype.method = function(x) { return x; };", "(new Foo(123)).method('asdf') - 5;"), NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck(LINE_JOINER.join("/**", " * @template T", " * @constructor", " */", "function Foo() {}", "/** @param {T} x */", "Foo.prototype.method = function(x) {};", "", "/**", " * @template T", " * @constructor", " * @extends {Foo<T>}", " * @param {T} x", " */", "function Bar(x) {}", // Invalid instantiation here, must be T, o/w bugs like the call to f
    "/** @param {number} x */", "Bar.prototype.method = function(x) {};", "", "/** @param {!Foo<string>} x */", "function f(x) { x.method('sadf'); };", "f(new Bar('asdf'));"), GlobalTypeInfo.INVALID_PROP_OVERRIDE);
    typeCheck(LINE_JOINER.join("/**", " * @constructor", " * @template T,U", " */", "function Foo() {}", "Foo.prototype.m1 = function() {", "  this.m2(123);", "};", "/**", " * @template U", " * @param {U} x", " */", "Foo.prototype.m2 = function(x) {};"));
    typeCheck(LINE_JOINER.join("/**", " * @constructor", " * @template T, U", " */", "function Foo() {}", "/**", // shadows Foo#T, U still visible
    " * @template T", " * @param {T} x", " * @param {U} y", " */", "Foo.prototype.method = function(x, y) {};", "var obj = /** @type {!Foo<number, number>} */ (new Foo);", // OK
    "obj.method('asdf', 123);", // warning
    "obj.method('asdf', 'asdf');"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/**", " * @interface", " * @template T", " */", "function High() {}", "/** @param {T} x */", "High.prototype.method = function(x) {};", "/**", " * @constructor", " * @implements {High<number>}", " */", "function Low() {}", "/**", " * @template T", " * @param {T} x", " */", "Low.prototype.method = function(x) {};"));
    typeCheck(LINE_JOINER.join("/**", " * @template T, U", " * @constructor", " */", "function Foo() {}", "/**", " * @template T", " * @param {!Foo<T,T>} x", " */", "function f(x) {}", "/**", " * @param {!Foo<?,number>} x", " */", "function g(x) {", "  f(x);", "}"));
    typeCheck(LINE_JOINER.join("/**", " * @template T, U", " * @constructor", " */", "function Foo() {}", "/**", " * @template T", " * @param {!Foo<T,T>} x", " */", "function f(x) {}", "/**", " * @param {!Foo<Foo<?,?>,Foo<number,number>>} x", " */", "function g(x) {", "  f(x);", "}"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
						LineComment
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
						LineComment
					StringLiteralExpr
						LineComment
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
						LineComment
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
						LineComment
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
						LineComment
					StringLiteralExpr
						LineComment
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

