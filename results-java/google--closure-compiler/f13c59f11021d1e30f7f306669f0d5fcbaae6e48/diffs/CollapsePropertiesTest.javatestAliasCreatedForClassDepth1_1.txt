public void testAliasCreatedForClassDepth1_1() {
    // A class's name is always collapsed, even if one of its prefixes is
    // referenced in such a way that an alias is created for it.
    test("var a = {}; /** @constructor */ a.b = function(){};" + "var c = a; c.b = 0; a.b != c.b;", "var a$b = function(){}; var c = null; a$b = 0; a$b != a$b;");
    test("var a = {}; /** @constructor @nocollapse */ a.b = function(){};" + "var c = 1; c = a; c.b = 0; a.b == c.b;", "var a = {}; a.b = function(){}; var c = 1; c = a; c.b = 0; a.b == c.b;", null, UNSAFE_NAMESPACE_WARNING);
    test("var a = {}; /** @constructor @nocollapse */ a.b = function(){};" + "var c = a; c.b = 0; a.b == c.b;", "var a = {}; a.b = function(){}; var c = null; a.b = 0; a.b == a.b;");
    test("var a = {}; /** @constructor @nocollapse */ a.b = function(){};" + "var c = a; c.b = 0; a.b == c.b; use(c);", "var a = {}; a.b = function(){}; var c = null; a.b = 0; a.b == a.b; use(a);", null, UNSAFE_NAMESPACE_WARNING);
}||||||||public void testAliasCreatedForClassDepth1_1() {
    // A class's name is always collapsed, even if one of its prefixes is
    // referenced in a such a way that an alias is created for it.
    test("var a = {}; /** @constructor */ a.b = function(){};" + "var c = a; c.b = 0; a.b != c.b;", "var a = {}; var a$b = function(){};" + "var c = a; c.b = 0; a$b != c.b;", null, CollapseProperties.UNSAFE_NAMESPACE_WARNING);
    test("var a = {}; /** @constructor @nocollapse */ a.b = function(){};" + "var c = a; c.b = 0; a.b == c.b;", "var a = {}; a.b = function(){};" + "var c = a; c.b = 0; a.b == c.b;", null, CollapseProperties.UNSAFE_NAMESPACE_WARNING);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				NullLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				NullLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				NullLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				NullLiteralExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

