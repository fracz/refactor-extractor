/**
 * A boolean expression (Bool-Exp) must follow the syntax:
 * Bool-Exp := eq(Type-Exp, Type-Exp) | sub(Type-Exp, Type-Exp)
 */
private boolean validTTLBooleanTypeExpression(Node expression) {
    // it must be a CALL for eq and sub predicates
    if (expression.getType() != Token.CALL) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.bool", expression);
        return false;
    }
    // Check for valid predicates
    if (!BOOLEAN_PREDICATES.contains(expression.getFirstChild().getString())) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.predicate", expression);
        return false;
    }
    // - Two type expressions as parameters
    if (expression.getChildCount() < 3) {
        addNewWarning("msg.jsdoc.typetransformation.missing.param.bool", expression);
        return false;
    }
    if (expression.getChildCount() > 3) {
        addNewWarning("msg.jsdoc.typetransformation.extra.param.bool", expression);
        return false;
    }
    // Both input types must be valid type expressions
    if (!validTTLTypeExpression(expression.getChildAtIndex(1)) || !validTTLTypeExpression(expression.getChildAtIndex(2))) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.param.bool", expression);
        return false;
    }
    return true;
}||||||||/**
 * A boolean expression (Bool-Exp) must follow the syntax:
 * Bool-Exp := eq(Type-Exp, Type-Exp) | sub(Type-Exp, Type-Exp)
 */
private boolean validTTLBooleanTypeExpression(Node expression) {
    // it must be a CALL for eq and sub predicates
    if (!expression.isCall()) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.expression", "boolean", expression);
        return false;
    }
    // Check for valid predicates
    if (!BOOLEAN_PREDICATES.contains(expression.getFirstChild().getString())) {
        addNewWarning("msg.jsdoc.typetransformation.invalid", "boolean predicate", expression);
        return false;
    }
    // - Two type expressions as parameters
    if (expression.getChildCount() < 1 + BOOLPRED_PARAM_COUNT) {
        addNewWarning("msg.jsdoc.typetransformation.missing.param", "boolean predicate", expression);
        return false;
    }
    if (expression.getChildCount() > 1 + BOOLPRED_PARAM_COUNT) {
        addNewWarning("msg.jsdoc.typetransformation.extra.param", "boolean predicate", expression);
        return false;
    }
    // Both input types must be valid type expressions
    if (!validTTLTypeExpression(expression.getChildAtIndex(1)) || !validTTLTypeExpression(expression.getChildAtIndex(2))) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.inside", "boolean", expression);
        return false;
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

