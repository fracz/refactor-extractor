/**
 * A Union type expression must be a valid type variable or
 * a union(Basictype-Exp, Basictype-Exp, ...)
 */
private boolean validTTLUnionTypeExpression(Node expression) {
    // a CALL for union(BasicType-Exp, BasicType-Exp,...)
    if (expression.getType() != Token.NAME && expression.getType() != Token.CALL) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.uniontype", expression);
        return false;
    }
    // If the expression is a type variable it must be valid
    if (expression.getType() == Token.NAME) {
        return validTTLTypeVar(expression);
    }
    // Otherwise it must start with union keyword
    if (!expression.getFirstChild().getString().equals(UNION_KEYWORD)) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.uniontype", expression);
        return false;
    }
    // - At least two basic types as parameters
    if (expression.getChildCount() < 3) {
        addNewWarning("msg.jsdoc.typetransformation.missing.param.uniontype", expression);
        return false;
    }
    // Check if each of the members of the union is a valid BasicType-Exp
    for (Node basicExp : expression.children()) {
        // Omit the first child since it is the union keyword
        if (basicExp.equals(expression.getFirstChild())) {
            continue;
        }
        if (!validTTLBasicTypeExpression(basicExp)) {
            return false;
        }
    }
    return true;
}||||||||/**
 * A Union type expression must be a valid type variable or
 * a union(Basictype-Exp, Basictype-Exp, ...)
 */
private boolean validTTLUnionTypeExpression(Node expression) {
    // a CALL for union(BasicType-Exp, BasicType-Exp,...)
    if (!expression.isName() && !expression.isCall()) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.expression", "union type", expression);
        return false;
    }
    // If the expression is a type variable it must be valid
    if (expression.isName()) {
        return validTTLTypeVar(expression);
    }
    // Otherwise it must start with union keyword
    if (!expression.getFirstChild().getString().equals(UNION_KEYWORD)) {
        addNewWarning("msg.jsdoc.typetransformation.invalid.uniontype", "union type", expression);
        return false;
    }
    // - At least two basic types as parameters
    if (expression.getChildCount() < 1 + UNION_MIN_PARAM_COUNT) {
        addNewWarning("msg.jsdoc.typetransformation.missing.param", "union type", expression);
        return false;
    }
    // Check if each of the members of the union is a valid BasicType-Exp
    for (Node basicExp : expression.children()) {
        // Omit the first child since it is the union keyword
        if (basicExp.equals(expression.getFirstChild())) {
            continue;
        }
        if (!validTTLBasicTypeExpression(basicExp)) {
            addNewWarning("msg.jsdoc.typetransformation.invalid.inside", "union type", expression);
            return false;
        }
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

