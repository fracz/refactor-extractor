public void testAmbiguousDefinitionsCall() throws Exception {
    String s = "var globalVar = 1;" + "A.f = function() {globalVar = 2;};" + "A.f = function() {};" + "function sideEffectCaller() { A.f.call(null); };" + "sideEffectCaller();";
    // Can't tell which f is being called so it assumes both.
    checkMarkedCalls(s, ImmutableList.<String>of());
}||||||||public void testAmbiguousDefinitionsCall() throws Exception {
    String source = CompilerTypeTestCase.CLOSURE_DEFS + LINE_JOINER.join("var globalVar = 1;", "A.f = function() {globalVar = 2;};", "A.f = function() {};", "function sideEffectCaller() { A.f.call(null); };", "sideEffectCaller();");
    // Can't tell which f is being called so it assumes both.
    assertPureCallsMarked(source, NO_PURE_CALLS);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

