/**
 * Returns whether two nodes are equivalent, taking into account the template parameters that were
 * provided to this matcher. If the template comparison node is a parameter node, then only the
 * types of the node must match. If the template node is a string literal, only match string
 * literals. Otherwise, the node must be equal and the child nodes must be equivalent according to
 * the same function. This differs from the built in Node equivalence function with the special
 * comparison.
 */
private boolean matchesNode(Node template, Node ast) {
    if (isTemplateParameterNode(template)) {
        int paramIndex = (int) (template.getDouble());
        Node previousMatch = paramNodeMatches.get(paramIndex);
        if (previousMatch != null) {
            // subsequent usages of the same named node are equivalent.
            return ast.isEquivalentTo(previousMatch);
        }
        // Only the types need to match for the template parameters, which allows
        // the template function to express arbitrary expressions.
        TypeI templateType = template.getTypeI();
        checkNotNull(templateType, "null template parameter type.");
        // we should treat them as "unknown" and perform loose matches.
        if (isUnresolvedType(templateType)) {
            return false;
        }
        MatchResult matchResult = typeMatchingStrategy.match(templateType, ast.getTypeI());
        isLooseMatch = matchResult.isLooseMatch();
        boolean isMatch = matchResult.isMatch();
        if (isMatch && previousMatch == null) {
            paramNodeMatches.set(paramIndex, ast);
        }
        return isMatch;
    } else if (isTemplateLocalNameNode(template)) {
        // If this template name node was already matched against, then make sure
        // all subsequent usages of the same template name node are equivalent in
        // the matched code.
        // For example, this code will handle the case:
        // function template() {
        // var a = 'str';
        // fn(a);
        // }
        // 
        // will only match test code:
        // var b = 'str';
        // fn(b);
        // 
        // but it will not match:
        // var b = 'str';
        // fn('str');
        int paramIndex = (int) (template.getDouble());
        boolean previouslyMatched = this.localVarMatches.get(paramIndex) != null;
        if (previouslyMatched) {
            // subsequent usages of the same named node are equivalent.
            return ast.getString().equals(this.localVarMatches.get(paramIndex));
        } else {
            this.localVarMatches.set(paramIndex, ast.getString());
        }
    } else if (isTemplateParameterStringLiteralNode(template)) {
        int paramIndex = (int) (template.getDouble());
        Node previousMatch = paramNodeMatches.get(paramIndex);
        if (previousMatch != null) {
            return ast.isEquivalentTo(previousMatch);
        }
        if (NodeUtil.isStringLiteralValue(ast)) {
            paramNodeMatches.set(paramIndex, ast);
            return true;
        }
        return false;
    }
    // Template and AST shape has already been checked, but continue look for
    // other template variables (parameters and locals) that must be checked.
    Node templateChild = template.getFirstChild();
    Node astChild = ast.getFirstChild();
    while (templateChild != null) {
        if (!matchesNode(templateChild, astChild)) {
            return false;
        }
        templateChild = templateChild.getNext();
        astChild = astChild.getNext();
    }
    return true;
}||||||||/**
 * Returns whether two nodes are equivalent, taking into account the template parameters that were
 * provided to this matcher. If the template comparison node is a parameter node, then only the
 * types of the node must match. If the template node is a string literal, only match string
 * literals. Otherwise, the node must be equal and the child nodes must be equivalent according to
 * the same function. This differs from the built in Node equivalence function with the special
 * comparison.
 */
private boolean matchesNode(Node template, Node ast) {
    if (isTemplateParameterNode(template)) {
        int paramIndex = (int) (template.getDouble());
        Node previousMatch = paramNodeMatches.get(paramIndex);
        if (previousMatch != null) {
            // subsequent usages of the same named node are equivalent.
            return ast.isEquivalentTo(previousMatch);
        }
        // Only the types need to match for the template parameters, which allows
        // the template function to express arbitrary expressions.
        TypeI templateType = template.getTypeI();
        checkNotNull(templateType, "null template parameter type.");
        // we should treat them as "unknown" and perform loose matches.
        if (isUnresolvedType(templateType)) {
            return false;
        }
        MatchResult matchResult = typeMatchingStrategy.match(templateType, ast.getTypeI());
        isLooseMatch = matchResult.isLooseMatch();
        boolean isMatch = matchResult.isMatch();
        if (isMatch && previousMatch == null) {
            paramNodeMatches.set(paramIndex, ast);
        }
        return isMatch;
    } else if (isTemplateLocalNameNode(template)) {
        // If this template name node was already matched against, then make sure
        // all subsequent usages of the same template name node are equivalent in
        // the matched code.
        // For example, this code will handle the case:
        // function template() {
        // var a = 'str';
        // fn(a);
        // }
        // 
        // will only match test code:
        // var b = 'str';
        // fn(b);
        // 
        // but it will not match:
        // var b = 'str';
        // fn('str');
        int paramIndex = (int) (template.getDouble());
        boolean previouslyMatched = this.localVarMatches.get(paramIndex) != null;
        if (previouslyMatched) {
            // subsequent usages of the same named node are equivalent.
            return ast.getString().equals(this.localVarMatches.get(paramIndex));
        } else {
            String originalName = ast.getOriginalName();
            String name = (originalName != null) ? originalName : ast.getString();
            this.localVarMatches.set(paramIndex, name);
        }
    } else if (isTemplateParameterStringLiteralNode(template)) {
        int paramIndex = (int) (template.getDouble());
        Node previousMatch = paramNodeMatches.get(paramIndex);
        if (previousMatch != null) {
            return ast.isEquivalentTo(previousMatch);
        }
        if (NodeUtil.isStringLiteralValue(ast)) {
            paramNodeMatches.set(paramIndex, ast);
            return true;
        }
        return false;
    }
    // Template and AST shape has already been checked, but continue look for
    // other template variables (parameters and locals) that must be checked.
    Node templateChild = template.getFirstChild();
    Node astChild = ast.getFirstChild();
    while (templateChild != null) {
        if (!matchesNode(templateChild, astChild)) {
            return false;
        }
        templateChild = templateChild.getNext();
        astChild = astChild.getNext();
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(IfStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(EnclosedExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(PrimitiveType
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									(EnclosedExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(PrimitiveType
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									NullLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								LineComment
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(EnclosedExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(PrimitiveType
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(IfStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(CastExpr
										(EnclosedExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(PrimitiveType
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									(EnclosedExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(PrimitiveType
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									NullLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								LineComment
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(EnclosedExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(PrimitiveType
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

