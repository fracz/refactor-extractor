public void testCrossScopeWarnings() {
    typeCheck(LINE_JOINER.join("function f() {", "  x < 'str';", "}", "var x = 5;", "f()"), NewTypeInference.CROSS_SCOPE_GOTCHA);
    typeCheck(LINE_JOINER.join("var x;", "function f() {", "  return x - 1;", "}", "f()"), NewTypeInference.CROSS_SCOPE_GOTCHA);
    typeCheck(LINE_JOINER.join("function f(y) {", "  var x;", "  y(function() { return x - 1; });", "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  x = 'str';", "}", "var x = 5;", "f()"));
    typeCheck(LINE_JOINER.join("function f() {", "  var x;", "  function g() { x = 123; }", "  g();", "  return x - 1;", "}"));
    // Missing the warning because x is used in g, even though g doesn't change
    // its type.
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g() { return x; }", "  var /** number */ n = x;", "  g();", "  var /** string */ s = x;", "}"));
    // CROSS_SCOPE_GOTCHA is only for undeclared variables
    typeCheck(LINE_JOINER.join("/** @type {string} */ var s;", "function f() {", "  s = 123;", "}", "f();"), NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck(LINE_JOINER.join("function f(g) {", "  var x;", "  g(function() { return x - 123; });", "  return /** @type {number} */ (x) - 1;", "}"));
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g(y) {", "    y(function() { return x - 1; });", "  }", "}"));
    // Spurious warning because we only know the type of x at the beginning of
    // f, which is string. This is a contrived example though; not sure how
    // important it is in practice to record postconditions in FunctionType.
    typeCheck(LINE_JOINER.join("function g(x) {", "  function f() {", "    var /** string */ s = x;", "    x = 5;", "  }", "  f();", "  x - 5;", "}"), NewTypeInference.CROSS_SCOPE_GOTCHA, NewTypeInference.INVALID_OPERAND_TYPE);
    // Spurious warning, for the same reason as the previous test.
    // This test is trickier, so it avoids the CROSS_SCOPE_GOTCHA warning.
    typeCheck(LINE_JOINER.join("function g(x) {", "  function f() {", "    var /** string */ s = x;", "    x = 5;", "  }", "  var z = x;", "  f();", "  x - 5;", "  var /** string */ y = z;", "}"), NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck(LINE_JOINER.join("/** @constructor */", "function Foo() {}", "/** @type {string} */", "Foo.prototype.prefix;", "Foo.prototype.method = function() {", "  var x = this;", "  return function() {", "    if (x.prefix.length) {", "      return 123;", "    }", "  };", "};"));
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g(condition) {", "    if (condition) {", "      return 'early';", "    }", "    return function() { return x.toString; };", "  }", "}"));
    // TODO(dimvar): it'd be nice to catch this warning
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g(condition) {", "    if (condition) {", "      return 'early';", "    }", "    (function() { return x - 1; })();", "  }", "  g(false);", "  var /** string */ s = x;", "}"));
    typeCheck(LINE_JOINER.join("var x;", "function f(cond) {", "  if (cond) {", "    return;", "  }", "  return function g() {", "    return function w() { x };", "  };", "}"));
    // TODO(dimvar): we can't do this yet; requires more info in the summary
    // typeCheck(LINE_JOINER.join(
    // "/** @constructor */",
    // "function Foo() {",
    // "  /** @type{?Object} */ this.prop = null;",
    // "}",
    // "Foo.prototype.initProp = function() { this.prop = {}; };",
    // "var obj = new Foo();",
    // "if (obj.prop == null) {",
    // "  obj.initProp();",
    // "  obj.prop.a = 123;",
    // "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  var x = 1;", "  (function g() {", "     var /** number|string */ y = x;", "  })();", "  return x - 5;", "}"));
    // Trade-off: missed warning to avoid spurious warning in the previous test
    typeCheck(LINE_JOINER.join("function f() {", "  var x = 1;", "  (function g(/** number|string */ y) {", "     x = y;", "  })('asdf');", "  return x - 5;", "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  var x;", "  (function g(/** ? */ y) {", "     x = y;", "  })(1);", "  return x - 5;", "}"));
}||||||||public void testCrossScopeWarnings() {
    typeCheck(LINE_JOINER.join("function f() {", "  x < 'str';", "}", "var x = 5;", "f()"), NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck(LINE_JOINER.join("var x;", "function f() {", "  return x - 1;", "}", "f()"), NewTypeInference.CROSS_SCOPE_GOTCHA);
    typeCheck(LINE_JOINER.join("function f(y) {", "  var x;", "  y(function() { return x - 1; });", "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  x = 'str';", "}", "var x = 5;", "f()"));
    typeCheck(LINE_JOINER.join("function f() {", "  var x;", "  function g() { x = 123; }", "  g();", "  return x - 1;", "}"));
    // Missing the warning because x is used in g, even though g doesn't change
    // its type.
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g() { return x; }", "  var /** number */ n = x;", "  g();", "  var /** string */ s = x;", "}"));
    // CROSS_SCOPE_GOTCHA is only for undeclared variables
    typeCheck(LINE_JOINER.join("/** @type {string} */ var s;", "function f() {", "  s = 123;", "}", "f();"), NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck(LINE_JOINER.join("function f(g) {", "  var x;", "  g(function() { return x - 123; });", "  return /** @type {number} */ (x) - 1;", "}"));
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g(y) {", "    y(function() { return x - 1; });", "  }", "}"));
    // Spurious warning because we only know the type of x at the beginning of
    // f, which is string. This is a contrived example though; not sure how
    // important it is in practice to record postconditions in FunctionType.
    typeCheck(LINE_JOINER.join("function g(x) {", "  function f() {", "    var /** string */ s = x;", "    x = 5;", "  }", "  f();", "  x - 5;", "}"), NewTypeInference.CROSS_SCOPE_GOTCHA, NewTypeInference.INVALID_OPERAND_TYPE);
    // Spurious warning, for the same reason as the previous test.
    // This test is trickier, so it avoids the CROSS_SCOPE_GOTCHA warning.
    typeCheck(LINE_JOINER.join("function g(x) {", "  function f() {", "    var /** string */ s = x;", "    x = 5;", "  }", "  var z = x;", "  f();", "  x - 5;", "  var /** string */ y = z;", "}"), NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck(LINE_JOINER.join("/** @constructor */", "function Foo() {}", "/** @type {string} */", "Foo.prototype.prefix;", "Foo.prototype.method = function() {", "  var x = this;", "  return function() {", "    if (x.prefix.length) {", "      return 123;", "    }", "  };", "};"));
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g(condition) {", "    if (condition) {", "      return 'early';", "    }", "    return function() { return x.toString; };", "  }", "}"));
    // TODO(dimvar): it'd be nice to catch this warning
    typeCheck(LINE_JOINER.join("function f(x) {", "  function g(condition) {", "    if (condition) {", "      return 'early';", "    }", "    (function() { return x - 1; })();", "  }", "  g(false);", "  var /** string */ s = x;", "}"));
    typeCheck(LINE_JOINER.join("var x;", "function f(cond) {", "  if (cond) {", "    return;", "  }", "  return function g() {", "    return function w() { x };", "  };", "}"));
    // TODO(dimvar): we can't do this yet; requires more info in the summary
    // typeCheck(LINE_JOINER.join(
    // "/** @constructor */",
    // "function Foo() {",
    // "  /** @type{?Object} */ this.prop = null;",
    // "}",
    // "Foo.prototype.initProp = function() { this.prop = {}; };",
    // "var obj = new Foo();",
    // "if (obj.prop == null) {",
    // "  obj.initProp();",
    // "  obj.prop.a = 123;",
    // "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  var x = 1;", "  (function g() {", "     var /** number|string */ y = x;", "  })();", "  return x - 5;", "}"));
    // Trade-off: missed warning to avoid spurious warning in the previous test
    typeCheck(LINE_JOINER.join("function f() {", "  var x = 1;", "  (function g(/** number|string */ y) {", "     x = y;", "  })('asdf');", "  return x - 5;", "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  var x;", "  (function g(/** ? */ y) {", "     x = y;", "  })(1);", "  return x - 5;", "}"));
    typeCheck(LINE_JOINER.join("function f() {", "  var a = [1,2,3];", "  function g() {", "    var /** string */ s = a[0];", "  }", "}"), NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck(LINE_JOINER.join("var x = {};", "function f() { x.foo(); }"), NewTypeInference.INEXISTENT_PROPERTY);
    typeCheck(LINE_JOINER.join("function f() {", "  var x = {};", "  x.prop = 123;", "  function g() {", "    return x.prop;", "  }", "}"));
    // Checks that we don't type x as null in the innermost scope
    typeCheck(LINE_JOINER.join("var x = null;", "function f() {", "  x = [1,2,3];", "  (function() { var /** !Array<number> */ y = x; })();", "}"));
    typeCheck(LINE_JOINER.join("/** @enum {number} */", "var Foo = { A: 1, B: 2 };", "var x = Foo.A;", "function g(/** !Foo */ x) {}", "function f() {", "  var y = x;", "  g(y);", "}"));
    typeCheck(LINE_JOINER.join("f();", "var x = 0;", "function f() {", "  return x - 1;", "}"), NewTypeInference.CROSS_SCOPE_GOTCHA);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

