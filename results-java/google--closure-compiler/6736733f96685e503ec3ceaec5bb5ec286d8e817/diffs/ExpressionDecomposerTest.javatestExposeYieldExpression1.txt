public void testExposeYieldExpression1() {
    helperMoveExpression("function *f() { return { a: yield 1, c: foo(yield 2, yield 3) }; }", "yield", "function *f() {" + "  var result$jscomp$0 = yield 1;" + "  return { a: result$jscomp$0, c: foo(yield 2, yield 3) };" + "}");
    helperMoveExpression("function *f() {" + "  return { a: 0, c: foo(yield 2, yield 3) };" + "}", "yield", "function *f() {" + "  var result$jscomp$0 = yield 2;" + "  return { a: 0, c: foo(result$jscomp$0, yield 3) };" + "}");
    helperMoveExpression("function *f() {" + "  return { a: 0, c: foo(1, yield 3) };" + "}", "yield", "function *f() {" + "  var result$jscomp$0 = yield 3;" + "  return { a: 0, c: foo(1, result$jscomp$0) };" + "}");
}||||||||public void testExposeYieldExpression1() {
    helperMoveExpression("function *f() { return { a: yield 1, c: foo(yield 2, yield 3) }; }", "yield", LINE_JOINER.join("function *f() {", "  var result$jscomp$0 = yield 1;", "  return { a: result$jscomp$0, c: foo(yield 2, yield 3) };", "}"));
    helperMoveExpression("function *f() { return { a: 0, c: foo(yield 2, yield 3) }; }", "yield", LINE_JOINER.join("function *f() {", "  var result$jscomp$0 = yield 2;", "  return { a: 0, c: foo(result$jscomp$0, yield 3) };", "}"));
    helperMoveExpression("function *f() { return { a: 0, c: foo(1, yield 3) }; }", "yield", LINE_JOINER.join("function *f() {", "  var result$jscomp$0 = yield 3;", "  return { a: 0, c: foo(1, result$jscomp$0) };", "}"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

