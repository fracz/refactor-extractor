@Test
public void testCorrelatedScalarSubqueriesWithScalarAggregation() {
    // projection
    assertQuery("SELECT (SELECT round(3 * avg(i.a)) FROM (VALUES 1, 1, 1, 2, 2, 3, 4) i(a) WHERE i.a < o.a AND i.a < 4) " + "FROM (VALUES 0, 3, 3, 5) o(a)", "VALUES null, 4, 4, 5");
    assertQuery("SELECT count(*) FROM orders o " + "WHERE (SELECT avg(i.orderkey) FROM orders i " + "WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0) > 100", // h2 is slow
    "VALUES 14999");
    // order by
    assertQuery("SELECT orderkey FROM orders o " + "ORDER BY " + "   (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0), " + "   orderkey " + "LIMIT 1", // h2 is slow
    "VALUES 1");
    // group by
    assertQuery("SELECT max(o.orderdate), o.orderkey, " + "(SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0) " + "FROM orders o GROUP BY o.orderkey ORDER BY o.orderkey LIMIT 1", // h2 is slow
    "VALUES ('1996-01-02', 1, 40000.0)");
    assertQuery("SELECT max(o.orderdate), o.orderkey " + "FROM orders o " + "GROUP BY o.orderkey " + "HAVING 40000 < (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0)" + "ORDER BY o.orderkey LIMIT 1", // h2 is slow
    "VALUES ('1996-07-24', 20000)");
    assertQuery("SELECT max(o.orderdate), o.orderkey FROM orders o " + "GROUP BY o.orderkey, (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0)" + "ORDER BY o.orderkey LIMIT 1", // h2 is slow
    "VALUES ('1996-01-02', 1)");
    // join
    assertQuery("SELECT count(*) " + "FROM (SELECT * FROM orders ORDER BY orderkey LIMIT 10) o1 " + "JOIN (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o2 " + "ON NOT 1 = (SELECT avg(i.orderkey) FROM orders i WHERE o1.orderkey < o2.orderkey AND i.orderkey % 10000 = 0)");
    assertQueryFails("SELECT count(*) FROM orders o1 LEFT JOIN orders o2 " + "ON NOT 1 = (SELECT avg(i.orderkey) FROM orders i WHERE o1.orderkey < o2.orderkey)", "line .*: Correlated subquery in given context is not supported");
    // subrelation
    assertQuery("SELECT count(*) FROM orders o " + "WHERE 100 < (SELECT * " + "FROM (SELECT (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0)))", // h2 is slow
    "VALUES 14999");
    // consecutive correlated subqueries with scalar aggregation
    assertQuery("SELECT " + "(SELECT avg(regionkey) " + " FROM nation n2" + " WHERE n2.nationkey = n1.nationkey)," + "(SELECT avg(regionkey)" + " FROM nation n3" + " WHERE n3.nationkey = n1.nationkey)" + "FROM nation n1");
    assertQuery("SELECT" + "(SELECT avg(regionkey)" + " FROM nation n2 " + " WHERE n2.nationkey = n1.nationkey)," + "(SELECT avg(regionkey)+1 " + " FROM nation n3 " + " WHERE n3.nationkey = n1.nationkey)" + "FROM nation n1");
}||||||||@Test
public void testCorrelatedScalarSubqueriesWithScalarAggregation() {
    // projection
    assertQuery("SELECT (SELECT round(3 * avg(i.a)) FROM (VALUES 1, 1, 1, 2, 2, 3, 4) i(a) WHERE i.a < o.a AND i.a < 4) " + "FROM (VALUES 0, 3, 3, 5) o(a)", "VALUES null, 4, 4, 5");
    assertQuery("SELECT count(*) FROM orders o " + "WHERE (SELECT avg(i.orderkey) FROM orders i " + "WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0) > 100", // h2 is slow
    "VALUES 14999");
    // order by
    assertQuery("SELECT orderkey FROM orders o " + "ORDER BY " + "   (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0), " + "   orderkey " + "LIMIT 1", // h2 is slow
    "VALUES 1");
    // group by
    assertQuery("SELECT max(o.orderdate), o.orderkey, " + "(SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0) " + "FROM orders o GROUP BY o.orderkey ORDER BY o.orderkey LIMIT 1", // h2 is slow
    "VALUES ('1996-01-02', 1, 40000.0)");
    assertQuery("SELECT max(o.orderdate), o.orderkey " + "FROM orders o " + "GROUP BY o.orderkey " + "HAVING 40000 < (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0)" + "ORDER BY o.orderkey LIMIT 1", // h2 is slow
    "VALUES ('1996-07-24', 20000)");
    assertQuery("SELECT max(o.orderdate), o.orderkey FROM orders o " + "GROUP BY o.orderkey, (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0)" + "ORDER BY o.orderkey LIMIT 1", // h2 is slow
    "VALUES ('1996-01-02', 1)");
    // join
    assertQuery("SELECT count(*) " + "FROM (SELECT * FROM orders ORDER BY orderkey LIMIT 10) o1 " + "JOIN (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o2 " + "ON NOT 1 = (SELECT avg(i.orderkey) FROM orders i WHERE o1.orderkey < o2.orderkey AND i.orderkey % 10000 = 0)");
    assertQueryFails("SELECT count(*) FROM orders o1 LEFT JOIN orders o2 " + "ON NOT 1 = (SELECT avg(i.orderkey) FROM orders i WHERE o1.orderkey < o2.orderkey)", "line .*: Correlated subquery in given context is not supported");
    // subrelation
    assertQuery("SELECT count(*) FROM orders o " + "WHERE 100 < (SELECT * " + "FROM (SELECT (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey < i.orderkey AND i.orderkey % 10000 = 0)))", // h2 is slow
    "VALUES 14999");
    // consecutive correlated subqueries with scalar aggregation
    assertQuery("SELECT " + "(SELECT avg(regionkey) " + " FROM nation n2" + " WHERE n2.nationkey = n1.nationkey)," + "(SELECT avg(regionkey)" + " FROM nation n3" + " WHERE n3.nationkey = n1.nationkey)" + "FROM nation n1");
    assertQuery("SELECT" + "(SELECT avg(regionkey)" + " FROM nation n2 " + " WHERE n2.nationkey = n1.nationkey)," + "(SELECT avg(regionkey)+1 " + " FROM nation n3 " + " WHERE n3.nationkey = n1.nationkey)" + "FROM nation n1");
    // count in subquery
    assertQuery("SELECT * " + "FROM (VALUES (0),( 1), (2), (7)) as v1(c1) " + "WHERE v1.c1 > (SELECT count(c1) from (VALUES (0),( 1), (2)) as v2(c1) WHERE v1.c1 = v2.c1)", "VALUES (2), (7)");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
					LineComment
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

