private static SqlScalarFunction decimalDivideOperator() {
    // we extend target precision by b_scale. This is upper bound on how much division result will grow.
    // pessimistic case is a / 0.0000001
    // if scale of divisor is greater than scale of dividend we extend scale further as we
    // want result scale to be maximum of scales of divisor and dividend.
    Signature signature = Signature.builder().kind(SCALAR).operatorType(DIVIDE).literalParameters("a_precision", "a_scale", "b_precision", "b_scale", "r_precision", "r_scale").longVariableConstraints(longVariableExpression("r_precision", "min(38, a_precision + b_scale + max(b_scale - a_scale, 0))"), longVariableExpression("r_scale", "max(a_scale, b_scale)")).argumentTypes("decimal(a_precision, a_scale)", "decimal(b_precision, b_scale)").returnType("decimal(r_precision, r_scale)").build();
    return SqlScalarFunction.builder(DecimalOperators.class).signature(signature).implementation(b -> b.methods("divideShortShortShort").withExtraParameters(DecimalOperators::shortDivideRescaleExtraParameter)).implementation(b -> b.methods("divideShortShortLong", "divideLongLongLong", "divideShortLongLong", "divideLongShortLong").withExtraParameters(DecimalOperators::longDivideRescaleExtraParameter)).build();
}||||||||private static SqlScalarFunction decimalDivideOperator() {
    // we extend target precision by b_scale. This is upper bound on how much division result will grow.
    // pessimistic case is a / 0.0000001
    // if scale of divisor is greater than scale of dividend we extend scale further as we
    // want result scale to be maximum of scales of divisor and dividend.
    Signature signature = Signature.builder().kind(SCALAR).operatorType(DIVIDE).literalParameters("a_precision", "a_scale", "b_precision", "b_scale", "r_precision", "r_scale").longVariableConstraints(longVariableExpression("r_precision", "min(38, a_precision + b_scale + max(b_scale - a_scale, 0))"), longVariableExpression("r_scale", "max(a_scale, b_scale)")).argumentTypes("decimal(a_precision, a_scale)", "decimal(b_precision, b_scale)").returnType("decimal(r_precision, r_scale)").build();
    return SqlScalarFunction.builder(DecimalOperators.class).signature(signature).implementation(b -> b.methods("divideShortShortShort").withExtraParameters(DecimalOperators::shortDivideRescaleExtraParameter)).implementation(b -> b.methods("divideShortLongShort", "divideLongShortShort", "divideShortShortLong", "divideLongLongLong", "divideShortLongLong", "divideLongShortLong").withExtraParameters(DecimalOperators::longDivideRescaleExtraParameter)).build();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
									)
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(LambdaExpr
						(ExpressionStmt
							(MethodCallExpr
								(MethodReferenceExpr
									(TypeExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(UnknownType
							)
						)
					)
					SimpleName
					(MethodCallExpr
						(LambdaExpr
							(ExpressionStmt
								(MethodCallExpr
									(MethodReferenceExpr
										(TypeExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
									)
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(LambdaExpr
						(ExpressionStmt
							(MethodCallExpr
								(MethodReferenceExpr
									(TypeExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(UnknownType
							)
						)
					)
					SimpleName
					(MethodCallExpr
						(LambdaExpr
							(ExpressionStmt
								(MethodCallExpr
									(MethodReferenceExpr
										(TypeExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)

