@PostConstruct
public void initialize() {
    javaSearchScope = new DelegatingGlobalSearchScope(GlobalSearchScope.allScope(project)) {

        @Override
        public boolean contains(VirtualFile file) {
            return myBaseScope.contains(file) && file.getFileType() != JetFileType.INSTANCE;
        }

        @Override
        public int compare(VirtualFile file1, VirtualFile file2) {
            // TODO: this is a hackish workaround for the following problem:
            // since we are working with the allScope(), if the same class FqName
            // to be on the class path twice, because it is included into different libraries
            // (e.g. junit-4.0.jar is used as a separate library and as a part of idea_full)
            // the two libraries are attached to different modules, the parent compare()
            // can't tell which one comes first, so they can come in random order
            // To fix this, we sort additionally by the full path, to make the ordering deterministic
            // TODO: Delete this hack when proper scopes are used
            int compare = super.compare(file1, file2);
            if (compare == 0) {
                return Comparing.compare(file1.getPath(), file2.getPath());
            }
            return compare;
        }

        // NOTE: expected by class finder to be not null
        @NotNull
        @Override
        public Project getProject() {
            return project;
        }
    };
    javaFacade = new JavaPsiFacadeKotlinHacks(project);
}||||||||@PostConstruct
public void initialize() {
    javaSearchScope = new DelegatingGlobalSearchScope(baseScope) {

        @Override
        public boolean contains(VirtualFile file) {
            return myBaseScope.contains(file) && file.getFileType() != JetFileType.INSTANCE;
        }

        @Override
        public int compare(VirtualFile file1, VirtualFile file2) {
            // TODO_r: delete this code?
            // TODO: this is a hackish workaround for the following problem:
            // since we are working with the allScope(), if the same class FqName
            // to be on the class path twice, because it is included into different libraries
            // (e.g. junit-4.0.jar is used as a separate library and as a part of idea_full)
            // the two libraries are attached to different modules, the parent compare()
            // can't tell which one comes first, so they can come in random order
            // To fix this, we sort additionally by the full path, to make the ordering deterministic
            // TODO: Delete this hack when proper scopes are used
            int compare = super.compare(file1, file2);
            if (compare == 0) {
                return Comparing.compare(file1.getPath(), file2.getPath());
            }
            return compare;
        }

        // NOTE: expected by class finder to be not null
        @NotNull
        @Override
        public Project getProject() {
            return project;
        }
    };
    javaFacade = new JavaPsiFacadeKotlinHacks(project);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(PrimitiveType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											(SuperExpr
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ReturnStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(PrimitiveType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
						(MarkerAnnotationExpr
							Name
						)
						LineComment
					)
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(PrimitiveType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											(SuperExpr
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ReturnStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(PrimitiveType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
						(MarkerAnnotationExpr
							Name
						)
						LineComment
					)
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

