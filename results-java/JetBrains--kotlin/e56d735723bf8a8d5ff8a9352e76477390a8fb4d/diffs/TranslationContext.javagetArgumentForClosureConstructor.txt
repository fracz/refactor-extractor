/**
 * Gets an expression to pass to a constructor of a closure function. I.e. consider the case:
 *
 * ```
 * fun a(x) {
 * fun b(y) = x + y
 * return b
 * }
 * ```
 *
 * Here, `x` is a free variable of `b`. Transform `a` into the following form:
 *
 * ```
 * fun a(x) {
 * fun b0(x0) = { y -> x0 * y }
 * return b0(x)
 * }
 * ```
 *
 * This function generates arguments passed to newly generated `b0` closure, as well as for the similar case of local class and
 * object expression.
 *
 * @param descriptor represents a free variable or, more generally, free declaration.
 * @return expression to pass to a closure constructor.
 */
@NotNull
public JsExpression getArgumentForClosureConstructor(@NotNull DeclarationDescriptor descriptor) {
    JsExpression alias = getAliasForDescriptor(descriptor);
    if (alias != null)
        return alias;
    if (descriptor instanceof ReceiverParameterDescriptor) {
        return getDispatchReceiver((ReceiverParameterDescriptor) descriptor);
    }
    return getNameForDescriptor(descriptor).makeRef();
}||||||||/**
 * Gets an expression to pass to a constructor of a closure function. I.e. consider the case:
 *
 * ```
 * fun a(x) {
 * fun b(y) = x + y
 * return b
 * }
 * ```
 *
 * Here, `x` is a free variable of `b`. Transform `a` into the following form:
 *
 * ```
 * fun a(x) {
 * fun b0(x0) = { y -> x0 * y }
 * return b0(x)
 * }
 * ```
 *
 * This function generates arguments passed to newly generated `b0` closure, as well as for the similar case of local class and
 * object expression.
 *
 * @param descriptor represents a free variable or, more generally, free declaration.
 * @return expression to pass to a closure constructor.
 */
@NotNull
public JsExpression getArgumentForClosureConstructor(@NotNull DeclarationDescriptor descriptor) {
    JsExpression alias = getAliasForDescriptor(descriptor);
    if (alias != null)
        return alias;
    if (descriptor instanceof ReceiverParameterDescriptor) {
        return getDispatchReceiver((ReceiverParameterDescriptor) descriptor);
    }
    if (isCoroutineLambda(descriptor)) {
        return JsLiteral.THIS;
    }
    return getNameForDescriptor(descriptor).makeRef();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

