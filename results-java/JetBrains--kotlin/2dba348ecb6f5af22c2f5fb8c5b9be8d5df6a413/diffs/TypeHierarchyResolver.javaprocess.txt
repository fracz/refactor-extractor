public void process(@NotNull JetScope outerScope, @NotNull NamespaceLikeBuilder owner, @NotNull Collection<? extends PsiElement> declarations) {
    context.setRootScope(outerScope);
    // namespaceScopes, classes
    collectNamespacesAndClassifiers(outerScope, outerScope, owner, declarations);
    importsResolver.processTypeImports();
    // create type constructors for classes and generic parameters, supertypes are not filled in
    createTypeConstructors();
    // Generic bounds and types in supertype lists (no expressions or constructor resolution)
    resolveTypesInClassHeaders();
    topologicalOrder = topologicallySortClassesAndObjects();
    // Detect and disconnect all loops in the hierarchy
    detectAndDisconnectLoops();
    // At this point, there are no loops in the type hierarchy
    checkSupertypesForConsistency();
    // computeSuperclasses();
    // Check bounds in the types used in generic bounds and supertype lists
    checkTypesInClassHeaders();
}||||||||public void process(@NotNull JetScope outerScope, @NotNull NamespaceLikeBuilder owner, @NotNull Collection<? extends PsiElement> declarations) {
    context.setRootScope(outerScope);
    {
        // TODO: Very temp code - main goal is to remove recursion from collectNamespacesAndClassifiers
        Queue<JetDeclarationContainer> forDeferredResolve = new LinkedList<JetDeclarationContainer>();
        forDeferredResolve.addAll(collectNamespacesAndClassifiers(outerScope, owner, declarations));
        while (!forDeferredResolve.isEmpty()) {
            JetDeclarationContainer declarationContainer = forDeferredResolve.poll();
            assert declarationContainer != null;
            WithDeferredResolve descriptorForDeferredResolve = context.forDeferredResolver.get(declarationContainer);
            JetScope scope = context.normalScope.get(declarationContainer);
            // Even more temp code
            if (descriptorForDeferredResolve instanceof MutableClassDescriptorLite) {
                forDeferredResolve.addAll(collectNamespacesAndClassifiers(scope, ((MutableClassDescriptorLite) descriptorForDeferredResolve).getBuilder(), declarationContainer.getDeclarations()));
            } else if (descriptorForDeferredResolve instanceof NamespaceDescriptorImpl) {
                forDeferredResolve.addAll(collectNamespacesAndClassifiers(scope, ((NamespaceDescriptorImpl) descriptorForDeferredResolve).getBuilder(), declarationContainer.getDeclarations()));
            } else {
                assert false;
            }
        }
    }
    importsResolver.processTypeImports();
    // create type constructors for classes and generic parameters, supertypes are not filled in
    createTypeConstructors();
    // Generic bounds and types in supertype lists (no expressions or constructor resolution)
    resolveTypesInClassHeaders();
    topologicalOrder = topologicallySortClassesAndObjects();
    // Detect and disconnect all loops in the hierarchy
    detectAndDisconnectLoops();
    // At this point, there are no loops in the type hierarchy
    checkSupertypesForConsistency();
    // computeSuperclasses();
    // Check bounds in the types used in generic bounds and supertype lists
    checkTypesInClassHeaders();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(WhileStmt
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(AssertStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(IfStmt
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(BlockStmt
								(AssertStmt
									(BooleanLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(EnclosedExpr
													(CastExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(EnclosedExpr
												(CastExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
)

