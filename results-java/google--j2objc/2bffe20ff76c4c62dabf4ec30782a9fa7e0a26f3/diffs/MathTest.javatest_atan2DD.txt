/**
 * java.lang.Math#atan2(double, double)
 */
public void test_atan2DD() {
    // Test for method double java.lang.Math.atan2(double, double)
    double answer = Math.atan(Math.tan(1.0));
    assertTrue("Returned incorrect arc tangent: " + answer, answer <= 1.0 && answer >= 9.9999999999999983E-1);
}||||||||/**
 * java.lang.Math#atan2(double, double)
 */
public void test_atan2DD() {
    // Test for method double java.lang.Math.atan2(double, double)
    double correct = Math.atan(0.5);
    double answer = Math.atan2(1, 2);
    assertEquals("Should equal atan(0.5)", correct, answer, 1.0E-16);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(DoubleLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						(DoubleLiteralExpr
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(DoubleLiteralExpr
						)
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(DoubleLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

