public void testEnumWithParameters() throws IOException {
    String sourceContent = "public enum Color { RED(0xff0000), WHITE(0xffffff), BLUE(0x0000ff); " + "private int rgb; private int newValue;" + "private Color(int rgb) { this.rgb = rgb; } " + "public int getRgb() { return rgb; }}";
    String translation = translateSourceFile(sourceContent, "Color", "Color.m");
    assertTranslation(translation, "ColorEnum *ColorEnum_RED;");
    assertTranslation(translation, "@implementation ColorEnum");
    assertTranslation(translation, "ColorEnum_RED = [[ColorEnum alloc] " + "initWithInt:(int) 0xff0000 withNSString:@\"RED\" withInt:0];");
    assertTranslation(translation, "ColorEnum_WHITE = [[ColorEnum alloc] " + "initWithInt:(int) 0xffffff withNSString:@\"WHITE\" withInt:1];");
    assertTranslation(translation, "ColorEnum_BLUE = [[ColorEnum alloc] " + "initWithInt:(int) 0x0000ff withNSString:@\"BLUE\" withInt:2];");
    assertTranslation(translation, "- (int)getRgb {");
    assertTranslation(translation, "return rgb_;");
    translation = getTranslatedFile("Color.h");
    assertTranslation(translation, "int newValue_;");
}||||||||public void testEnumWithParameters() throws IOException {
    String sourceContent = "public enum Color { RED(0xff0000), WHITE(0xffffff), BLUE(0x0000ff); " + "private int rgb; private int newValue;" + "private Color(int rgb) { this.rgb = rgb; } " + "public int getRgb() { return rgb; }}";
    String translation = translateSourceFile(sourceContent, "Color", "Color.m");
    assertTranslation(translation, "@implementation ColorEnum");
    assertTranslation(translation, "ColorEnum_RED = [[ColorEnum alloc] " + "initWithInt:(int) 0xff0000 withNSString:@\"RED\" withInt:0];");
    assertTranslation(translation, "ColorEnum_WHITE = [[ColorEnum alloc] " + "initWithInt:(int) 0xffffff withNSString:@\"WHITE\" withInt:1];");
    assertTranslation(translation, "ColorEnum_BLUE = [[ColorEnum alloc] " + "initWithInt:(int) 0x0000ff withNSString:@\"BLUE\" withInt:2];");
    assertTranslation(translation, "- (int)getRgb {");
    assertTranslation(translation, "return rgb_;");
    translation = getTranslatedFile("Color.h");
    assertTranslation(translation, "int newValue_;");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

