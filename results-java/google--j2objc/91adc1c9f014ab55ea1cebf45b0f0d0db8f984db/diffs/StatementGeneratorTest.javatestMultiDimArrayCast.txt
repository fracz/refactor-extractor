// b/5872757: verify multi-dimensional array has cast before each
// secondary reference.
public void testMultiDimArrayCast() throws IOException {
    String translation = translateSourceFile("public class Test {" + "  static String[][] a = new String[1][1];" + "  public static void main(String[] args) { " + "    a[0][0] = \"42\"; System.out.println(a[0].length); }}", "Test", "Test.m");
    assertTranslation(translation, "[((IOSObjectArray *) [((IOSObjectArray *) nil_chk(Test_a_)) objectAtIndex:0]) " + "replaceObjectAtIndex:0 withObject:@\"42\"];");
    assertTranslation(translation, "[((IOSObjectArray *) [((IOSObjectArray *) nil_chk(Test_a_)) objectAtIndex:0]) count]");
}||||||||// b/5872757: verify multi-dimensional array has cast before each
// secondary reference.
public void testMultiDimArrayCast() throws IOException {
    String translation = translateSourceFile("public class Test {" + "  static String[][] a = new String[1][1];" + "  public static void main(String[] args) { " + "    a[0][0] = \"42\"; System.out.println(a[0].length); }}", "Test", "Test.m");
    assertTranslation(translation, "[((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(Test_a_)) objectAtIndex:0])) " + "replaceObjectAtIndex:0 withObject:@\"42\"];");
    assertTranslation(translation, "[((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(Test_a_)) objectAtIndex:0])) " + "count]");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)

