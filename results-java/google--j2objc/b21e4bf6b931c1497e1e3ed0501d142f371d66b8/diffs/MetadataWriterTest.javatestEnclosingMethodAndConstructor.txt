public void testEnclosingMethodAndConstructor() throws IOException {
    String translation = translateSourceFile("class A { A(String s) { class B {}} void test(int i, long l) { class C { class D {}}}}", "A", "A.m");
    assertTranslatedLines(translation, "static const J2ObjCEnclosingMethodInfo " + "enclosing_method = { \"A\", \"initWithNSString:\" };", "static const J2ObjcClassInfo _A_1B = { 5, \"B\", NULL, \"A\", 0x0, 1, methods, " + "0, NULL, -1, &enclosing_method, NULL, -1, NULL };");
    assertTranslatedSegments(translation, "static const J2ObjCEnclosingMethodInfo " + "enclosing_method = { \"A\", \"testWithInt:withLong:\" };", "static const J2ObjcClassInfo _A_1C = { 5, \"C\", NULL, \"A\", 0x0, 1, methods, " + "0, NULL, 0, &enclosing_method, NULL, -1, ptrTable };");
    // Verify D is not enclosed by test(), as it's enclosed by C.
    assertTranslation(translation, "J2ObjcClassInfo _A_1C_D = { 5, \"D\", NULL, \"A$C\", 0x0, 1, methods, " + "0, NULL, -1, NULL, NULL, -1, NULL }");
}||||||||public void testEnclosingMethodAndConstructor() throws IOException {
    String translation = translateSourceFile("class A { A(String s) { class B {}} void test(int i, long l) { class C { class D {}}}}", "A", "A.m");
    assertTranslatedLines(translation, "static const J2ObjCEnclosingMethodInfo " + "enclosing_method = { \"A\", \"initWithNSString:\" };", "static const void *ptrTable[] = { \"LA\" };", "static const J2ObjcClassInfo _A_1B = { 5, \"B\", NULL, 0, 0x0, 1, methods, " + "0, NULL, -1, &enclosing_method, NULL, -1, ptrTable };");
    assertTranslatedLines(translation, "static const J2ObjCEnclosingMethodInfo " + "enclosing_method = { \"A\", \"testWithInt:withLong:\" };", "static const void *ptrTable[] = { \"LA\", \"LA_1C_D;\" };", "static const J2ObjcClassInfo _A_1C = { 5, \"C\", NULL, 0, 0x0, 1, methods, " + "0, NULL, 1, &enclosing_method, NULL, -1, ptrTable };");
    // Verify D is not enclosed by test(), as it's enclosed by C.
    assertTranslation(translation, "J2ObjcClassInfo _A_1C_D = { 5, \"D\", NULL, 0, 0x0, 1, methods, " + "0, NULL, -1, NULL, NULL, -1, ptrTable }");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

