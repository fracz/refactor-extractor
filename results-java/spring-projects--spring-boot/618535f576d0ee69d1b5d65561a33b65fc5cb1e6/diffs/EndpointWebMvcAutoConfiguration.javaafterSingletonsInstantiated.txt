@Override
public void afterSingletonsInstantiated() {
    ManagementServerPort managementPort = ManagementServerPort.DIFFERENT;
    if (this.applicationContext instanceof WebApplicationContext) {
        managementPort = ManagementServerPort.get(this.applicationContext.getEnvironment(), this.beanFactory);
    }
    if (managementPort == ManagementServerPort.DIFFERENT) {
        if (this.applicationContext instanceof EmbeddedWebApplicationContext && ((EmbeddedWebApplicationContext) this.applicationContext).getEmbeddedServletContainer() != null) {
            createChildManagementContext();
        } else {
            logger.warn("Could not start embedded management container on " + "different port (management endpoints are still available " + "through JMX)");
        }
    }
    if (managementPort == ManagementServerPort.SAME && this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {
        addLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.applicationContext.getEnvironment());
    }
}||||||||@Override
public void afterSingletonsInstantiated() {
    ManagementServerPort managementPort = ManagementServerPort.DIFFERENT;
    if (this.applicationContext instanceof WebApplicationContext) {
        managementPort = ManagementServerPort.get(this.applicationContext.getEnvironment(), this.beanFactory);
    }
    if (managementPort == ManagementServerPort.DIFFERENT) {
        if (this.applicationContext instanceof EmbeddedWebApplicationContext && ((EmbeddedWebApplicationContext) this.applicationContext).getEmbeddedServletContainer() != null) {
            createChildManagementContext();
        } else {
            logger.warn("Could not start embedded management container on " + "different port (management endpoints are still available " + "through JMX)");
        }
    }
    if (managementPort == ManagementServerPort.SAME) {
        if (new RelaxedPropertyResolver(this.applicationContext.getEnvironment(), "management.ssl.").getProperty("enabled") != null) {
            throw new IllegalStateException("Management-specific SSL cannot be configured as the management " + "server is not listening on a separate port");
        }
        if (this.applicationContext.getEnvironment() instanceof ConfigurableEnvironment) {
            addLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.applicationContext.getEnvironment());
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(InstanceOfExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(InstanceOfExpr
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(CastExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(InstanceOfExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ObjectCreationExpr
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
								)
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(InstanceOfExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(CastExpr
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

