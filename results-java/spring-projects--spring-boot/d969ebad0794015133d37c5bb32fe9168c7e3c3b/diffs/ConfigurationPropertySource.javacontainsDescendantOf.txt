/**
 * Optionally returns if the source contains any descendants of the specified name.
 * <ul>
 * <li>A result of {@code true} means that there is at least on property in the source
 * with a name that's an
 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}
 * of {@code name}.</li>
 * <li>A result of {@code false} means that that there are no properties in the source
 * with a name that's an
 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}
 * of {@code name}.</li>
 * <li>A result of {@code empty} means it is not possible to determine up determine if
 * there's a property in the source with a name that's an
 * {@link ConfigurationPropertyName#isAncestorOf(ConfigurationPropertyName) ancestor}
 * of {@code name}.
 * </ul>
 * @param name the name to check
 * @return an optional boolean determining if a descendant is contained in the source
 */
Optional<Boolean> containsDescendantOf(ConfigurationPropertyName name);||||||||/**
 * Returns if the source contains any descendants of the specified name. May return
 * {@link ConfigurationPropertyState#PRESENT} or
 * {@link ConfigurationPropertyState#ABSENT} if an answer can be determined or
 * {@link ConfigurationPropertyState#UNKNOWN} if it's not possible to determine a
 * definitive answer.
 * @param name the name to check
 * @return if the source contains any descendants
 */
ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name);||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

