/**
 * Return a factory for the provided parameter. We only expect objects of type {@link T} being annotated with
 * {@link Auth} annotation
 *
 * @param parameter
 * Parameter that was annotated for being injected
 * @return {@link AuthValueFactory} if parameter matched type
 */
@Override
public AbstractContainerRequestValueFactory<?> createValueFactory(Parameter parameter) {
    Class<?> classType = parameter.getRawType();
    if (classType == null || (!classType.equals(clazz))) {
        return null;
    }
    return new AuthValueFactory<T>();
}||||||||/**
 * Return a factory for the provided parameter. We only expect objects of
 * the type {@link T} being annotated with {@link Auth} annotation.
 *
 * @param parameter parameter that was annotated for being injected
 * @return the factory if parameter matched type
 */
@Override
public AbstractContainerRequestValueFactory<?> createValueFactory(Parameter parameter) {
    if (!principalClass.equals(parameter.getRawType())) {
        return null;
    }
    return new AbstractContainerRequestValueFactory<Principal>() {

        /**
         * @return {@link Principal} stored on the request, or {@code null} if no object was found.
         */
        public Principal provide() {
            final Principal principal = getContainerRequest().getSecurityContext().getUserPrincipal();
            if (principal == null) {
                throw new IllegalStateException("Cannot inject a custom principal into unauthenticated request");
            }
            return principal;
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(EnclosedExpr
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(JavadocComment
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

