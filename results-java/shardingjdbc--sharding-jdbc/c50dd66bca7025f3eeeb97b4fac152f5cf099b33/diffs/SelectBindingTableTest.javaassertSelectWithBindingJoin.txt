@Test
public void assertSelectWithBindingJoin() throws SQLParserException {
    assertSingleTarget("select * from order o inner join order_item i on o.order_id = i.order_id where o.order_id = 1", "ds_1", "select * from order_1 o inner join order_item_1 i on o.order_id = i.order_id where o.order_id = 1");
    assertSingleTarget("select * from order o join order_item i on o.order_id = i.order_id where o.order_id = 1", "ds_1", "select * from order_1 o join order_item_1 i on o.order_id = i.order_id where o.order_id = 1");
    assertSingleTarget("select * from order o join order_item i using (order_id) where o.order_id = 1", "ds_1", "select * from order_1 o join order_item_1 i using (order_id) where o.order_id = 1");
    assertSingleTarget("select * from order o, order_item i where o.order_id = i.order_id and o.order_id = 1", "ds_1", "select * from order_1 o, order_item_1 i where o.order_id = i.order_id and o.order_id = 1");
    assertSingleTarget("select * from order o, order_item i where o.order_id = i.order_id and o.order_id = ?", Collections.<Object>singletonList(1), "ds_1", "select * from order_1 o, order_item_1 i where o.order_id = i.order_id and o.order_id = ?");
}||||||||@Test
public void assertSelectWithBindingJoin() {
    assertSingleTarget("select * from order o inner join order_item i on o.order_id = i.order_id where o.order_id = 1", "ds_1", "select * from order_1 o inner join order_item_1 i on o.order_id = i.order_id where o.order_id = 1");
    assertSingleTarget("select * from order o join order_item i on o.order_id = i.order_id where o.order_id = 1", "ds_1", "select * from order_1 o join order_item_1 i on o.order_id = i.order_id where o.order_id = 1");
    assertSingleTarget("select * from order o join order_item i using (order_id) where o.order_id = 1", "ds_1", "select * from order_1 o join order_item_1 i using (order_id) where o.order_id = 1");
    assertSingleTarget("select * from order o, order_item i where o.order_id = i.order_id and o.order_id = 1", "ds_1", "select * from order_1 o, order_item_1 i where o.order_id = i.order_id and o.order_id = 1");
    assertSingleTarget("select * from order o, order_item i where o.order_id = i.order_id and o.order_id = ?", Collections.<Object>singletonList(1), "ds_1", "select * from order_1 o, order_item_1 i where o.order_id = i.order_id and o.order_id = ?");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

