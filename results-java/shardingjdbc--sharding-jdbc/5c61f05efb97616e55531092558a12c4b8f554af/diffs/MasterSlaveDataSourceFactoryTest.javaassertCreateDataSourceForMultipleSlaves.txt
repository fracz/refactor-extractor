@Test
public void assertCreateDataSourceForMultipleSlaves() {
    assertThat(MasterSlaveDataSourceFactory.createDataSource("logic_ds", new TestDataSource("master_ds"), new TestDataSource("slave_ds_0"), new TestDataSource("slave_ds_1")), instanceOf(MasterSlaveDataSource.class));
}||||||||@Test
public void assertCreateDataSourceForMultipleSlaves() throws SQLException {
    assertThat(MasterSlaveDataSourceFactory.createDataSource("logic_ds", new TestDataSource("master_ds"), new TestDataSource("slave_ds_0"), new TestDataSource("slave_ds_1")), instanceOf(MasterSlaveDataSource.class));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

