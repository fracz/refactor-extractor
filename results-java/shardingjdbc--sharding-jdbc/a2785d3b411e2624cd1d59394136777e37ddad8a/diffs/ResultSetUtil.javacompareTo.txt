/**
 * 比较大小.
 *
 * @param thisValue 当前值
 * @param otherValue 待比较的值
 * @param type 排序类型
 * @return 比较结果
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
public static int compareTo(final Comparable thisValue, final Comparable otherValue, final OrderType type) {
    if (null == thisValue && null == otherValue) {
        return 0;
    }
    if (null == thisValue) {
        return OrderType.ASC == type ? -1 : 1;
    }
    if (null == otherValue) {
        return OrderType.ASC == type ? 1 : -1;
    }
    return OrderType.ASC == type ? thisValue.compareTo(otherValue) : -thisValue.compareTo(otherValue);
}||||||||/**
 * 比较大小.
 *
 * @param thisValue 当前值
 * @param otherValue 待比较的值
 * @param type 排序类型
 * @return 比较结果
 */
// TODO mysql和oracle, null作为最小是正确的, pg和sqlserver, null作为最大,因此此处是错误的.需要配置数据库的排序方式并分别实现
@SuppressWarnings({ "rawtypes", "unchecked" })
public static int compareTo(final Comparable thisValue, final Comparable otherValue, final OrderType type) {
    if (null == thisValue && null == otherValue) {
        return 0;
    }
    if (null == thisValue) {
        return OrderType.ASC == type ? -1 : 1;
    }
    if (null == otherValue) {
        return OrderType.ASC == type ? 1 : -1;
    }
    return OrderType.ASC == type ? thisValue.compareTo(otherValue) : -thisValue.compareTo(otherValue);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NullLiteralExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NullLiteralExpr
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(IntegerLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(ConditionalExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(ConditionalExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			StringLiteralExpr
			StringLiteralExpr
		)
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NullLiteralExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NullLiteralExpr
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(IntegerLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(ConditionalExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(ConditionalExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
		(ReturnStmt
			(ConditionalExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			StringLiteralExpr
			StringLiteralExpr
		)
		Name
	)
	LineComment
)

