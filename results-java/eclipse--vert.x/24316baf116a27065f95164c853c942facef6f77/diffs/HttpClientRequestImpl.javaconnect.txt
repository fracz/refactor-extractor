private void connect() {
    if (!connecting) {
        // We defer actual connection until the first part of body is written or end is called
        // This gives the user an opportunity to set an exception handler before connecting so
        // they can capture any exceptions on connection
        client.getConnection(options.getPort(), options.getHost(), conn -> {
            if (exceptionOccurred) {
                // The request already timed out before it has left the pool waiter queue
                // So return it
                conn.close();
            } else if (!conn.isClosed()) {
                connected(conn);
            } else {
                // The connection has been closed - closed connections can be in the pool
                // Get another connection - Note that we DO NOT call connectionClosed() on the pool at this point
                // that is done asynchronously in the connection closeHandler()
                connect();
            }
        }, exceptionHandler, vertx.getOrCreateContext());
        connecting = true;
    }
}||||||||private void connect() {
    if (!connecting) {
        // We defer actual connection until the first part of body is written or end is called
        // This gives the user an opportunity to set an exception handler before connecting so
        // they can capture any exceptions on connection
        client.getConnection(port, host, conn -> {
            if (exceptionOccurred) {
                // The request already timed out before it has left the pool waiter queue
                // So return it
                conn.close();
            } else if (!conn.isClosed()) {
                connected(conn);
            } else {
                // The connection has been closed - closed connections can be in the pool
                // Get another connection - Note that we DO NOT call connectionClosed() on the pool at this point
                // that is done asynchronously in the connection closeHandler()
                connect();
            }
        }, exceptionHandler, vertx.getOrCreateContext());
        connecting = true;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(LambdaExpr
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(IfStmt
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(LambdaExpr
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(IfStmt
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
												)
												LineComment
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)

