/**
 * Needs to be called before any other methods when the transactional.id is set in the configuration.
 *
 * This method does the following:
 * 1. Ensures any transactions initiated by previous instances of the producer
 * are completed. If the previous instance had failed with a transaction in
 * progress, it will be aborted. If the last transaction had begun completion,
 * but not yet finished, this method awaits its completion.
 * 2. Gets the internal producer id and epoch, used in all future transactional
 * messages issued by the producer.
 *
 * @throws IllegalStateException if the TransactionalId for the producer is not set
 * in the configuration.
 */
public void initTransactions() {
    if (transactionManager == null)
        throw new IllegalStateException("Cannot call initTransactions without setting a transactional id.");
    TransactionalRequestResult result = transactionManager.initializeTransactions();
    sender.wakeup();
    result.await();
}||||||||/**
 * Needs to be called before any other methods when the transactional.id is set in the configuration.
 *
 * This method does the following:
 * 1. Ensures any transactions initiated by previous instances of the producer with the same
 * transactional.id are completed. If the previous instance had failed with a transaction in
 * progress, it will be aborted. If the last transaction had begun completion,
 * but not yet finished, this method awaits its completion.
 * 2. Gets the internal producer id and epoch, used in all future transactional
 * messages issued by the producer.
 *
 * @throws IllegalStateException if no transactional.id has been configured
 * @throws org.apache.kafka.common.errors.UnsupportedVersionException fatal error indicating the broker
 * does not support transactions (i.e. if its version is lower than 0.11.0.0)
 * @throws org.apache.kafka.common.errors.AuthorizationException fatal error indicating that the configured
 * transactional.id is not authorized
 * @throws KafkaException if the producer has encountered a previous fatal error or for any other unexpected error
 */
public void initTransactions() {
    throwIfNoTransactionManager();
    TransactionalRequestResult result = transactionManager.initializeTransactions();
    sender.wakeup();
    result.await();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ThrowStmt
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

