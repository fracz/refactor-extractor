/**
 * Fetches data for the topics or partitions specified using one of the subscribe APIs. It is an error to not have
 * subscribed to any topics or partitions before polling for data.
 * <p>
 * The offset used for fetching the data is governed by whether or not {@link #seek(TopicPartition, long)} is used.
 * If {@link #seek(TopicPartition, long)} is used, it will use the specified offsets on startup and on every
 * rebalance, to consume data from that offset sequentially on every poll. If not, it will use the last checkpointed
 * offset using {@link #commit(Map, CommitType) commit(offsets, sync)} for the subscribed list of partitions.
 *
 * @param timeout The time, in milliseconds, spent waiting in poll if data is not available. If 0, returns
 * immediately with any records available now. Must not be negative.
 * @return map of topic to records since the last fetch for the subscribed list of topics and partitions
 *
 * @throws NoOffsetForPartitionException If there is no stored offset for a subscribed partition and no automatic
 * offset reset policy has been configured.
 */
@Override
public ConsumerRecords<K, V> poll(long timeout) {
    acquire();
    try {
        if (timeout < 0)
            throw new IllegalArgumentException("Timeout must not be negative");
        // poll for new data until the timeout expires
        long remaining = timeout;
        while (remaining >= 0) {
            long start = time.milliseconds();
            Map<TopicPartition, List<ConsumerRecord<K, V>>> records = pollOnce(remaining);
            long end = time.milliseconds();
            if (!records.isEmpty()) {
                // if data is available, then return it, but first send off the
                // next round of fetches to enable pipelining while the user is
                // handling the fetched records.
                fetcher.initFetches(metadata.fetch());
                client.poll(0);
                return new ConsumerRecords<K, V>(records);
            }
            remaining -= end - start;
            // nothing was available, so we should backoff before retrying
            if (remaining > 0) {
                Utils.sleep(min(remaining, retryBackoffMs));
                remaining -= time.milliseconds() - end;
            }
        }
        return ConsumerRecords.empty();
    } finally {
        release();
    }
}||||||||/**
 * Fetches data for the topics or partitions specified using one of the subscribe/assign APIs. It is an error to not have
 * subscribed to any topics or partitions before polling for data.
 * <p>
 * The offset used for fetching the data is governed by whether or not {@link #seek(TopicPartition, long)} is used.
 * If {@link #seek(TopicPartition, long)} is used, it will use the specified offsets on startup and on every
 * rebalance, to consume data from that offset sequentially on every poll. If not, it will use the last checkpointed
 * offset using {@link #commit(Map, CommitType) commit(offsets, sync)} for the subscribed list of partitions.
 *
 * @param timeout The time, in milliseconds, spent waiting in poll if data is not available. If 0, returns
 * immediately with any records available now. Must not be negative.
 * @return map of topic to records since the last fetch for the subscribed list of topics and partitions
 *
 * @throws NoOffsetForPartitionException If there is no stored offset for a subscribed partition and no automatic
 * offset reset policy has been configured.
 */
@Override
public ConsumerRecords<K, V> poll(long timeout) {
    acquire();
    try {
        if (timeout < 0)
            throw new IllegalArgumentException("Timeout must not be negative");
        // poll for new data until the timeout expires
        long remaining = timeout;
        while (remaining >= 0) {
            long start = time.milliseconds();
            Map<TopicPartition, List<ConsumerRecord<K, V>>> records = pollOnce(remaining);
            long end = time.milliseconds();
            if (!records.isEmpty()) {
                // if data is available, then return it, but first send off the
                // next round of fetches to enable pipelining while the user is
                // handling the fetched records.
                fetcher.initFetches(metadata.fetch());
                client.poll(0);
                return new ConsumerRecords<>(records);
            }
            remaining -= end - start;
            // nothing was available, so we should backoff before retrying
            if (remaining > 0) {
                Utils.sleep(min(remaining, retryBackoffMs));
                remaining -= time.milliseconds() - end;
            }
        }
        return ConsumerRecords.empty();
    } finally {
        release();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

