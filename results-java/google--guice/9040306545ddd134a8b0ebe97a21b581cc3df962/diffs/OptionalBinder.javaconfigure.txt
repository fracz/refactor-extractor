public void configure(Binder binder) {
    checkConfiguration(!isInitialized(), "OptionalBinder was already initialized");
    final Provider<Map<Source, Provider<T>>> mapProvider = binder.getProvider(mapKey);
    binder.bind(optionalProviderKey).toProvider(new RealOptionalBinderProviderWithDependencies<Optional<Provider<T>>>(typeKey) {

        private Optional<Provider<T>> optional;

        @Toolable
        @Inject
        void initialize(Injector injector) {
            RealOptionalBinder.this.binder = null;
            Map<Source, Provider<T>> map = mapProvider.get();
            // Map might be null if duplicates prevented MapBinder from initializing
            if (map != null) {
                if (map.containsKey(Source.ACTUAL)) {
                    // TODO(sameb): Consider exposing an option that will allow
                    // ACTUAL to fallback to DEFAULT if ACTUAL's provider returns null.
                    // Right now, an ACTUAL binding can convert from present -> absent
                    // if it's bound to a provider that returns null.
                    optional = Optional.fromNullable(map.get(Source.ACTUAL));
                } else if (map.containsKey(Source.DEFAULT)) {
                    optional = Optional.fromNullable(map.get(Source.DEFAULT));
                } else {
                    optional = Optional.absent();
                }
                // Also set up the bindings for the SPI.
                if (map.containsKey(Source.ACTUAL)) {
                    actualBinding = getBindingFromMapProvider(injector, map.get(Source.ACTUAL));
                }
                if (map.containsKey(Source.DEFAULT)) {
                    defaultBinding = getBindingFromMapProvider(injector, map.get(Source.DEFAULT));
                }
            }
        }

        public Optional<Provider<T>> get() {
            return optional;
        }

        public Set<Dependency<?>> getDependencies() {
            return dependencies;
        }
    });
    // Optional is immutable, so it's safe to expose Optional<Provider<T>> as
    // Optional<javax.inject.Provider<T>> (since Guice provider implements javax Provider).
    @SuppressWarnings({ "unchecked", "cast" }) Key massagedOptionalProviderKey = (Key) optionalProviderKey;
    binder.bind(optionalJavaxProviderKey).to(massagedOptionalProviderKey);
    binder.bind(optionalKey).toProvider(new RealOptionalKeyProvider());
}||||||||public void configure(Binder binder) {
    checkConfiguration(!isInitialized(), "OptionalBinder was already initialized");
    binder.bind(optionalProviderKey).toProvider(new RealOptionalBinderProviderWithDependencies<Optional<Provider<T>>>(typeKey) {

        private Optional<Provider<T>> optional;

        @Toolable
        @Inject
        void initialize(Injector injector) {
            RealOptionalBinder.this.binder = null;
            actualBinding = injector.getExistingBinding(actualKey);
            defaultBinding = injector.getExistingBinding(defaultKey);
            Binding<T> binding = null;
            if (actualBinding != null) {
                // TODO(sameb): Consider exposing an option that will allow
                // ACTUAL to fallback to DEFAULT if ACTUAL's provider returns null.
                // Right now, an ACTUAL binding can convert from present -> absent
                // if it's bound to a provider that returns null.
                binding = actualBinding;
            } else if (defaultBinding != null) {
                binding = defaultBinding;
            }
            if (binding != null) {
                optional = Optional.of(binding.getProvider());
                RealOptionalBinder.this.dependencies = ImmutableSet.<Dependency<?>>of(Dependency.get(binding.getKey()));
                RealOptionalBinder.this.providerDependencies = ImmutableSet.<Dependency<?>>of(Dependency.get(providerOf(binding.getKey())));
            } else {
                optional = Optional.absent();
                RealOptionalBinder.this.dependencies = ImmutableSet.of();
                RealOptionalBinder.this.providerDependencies = ImmutableSet.of();
            }
        }

        public Optional<Provider<T>> get() {
            return optional;
        }

        public Set<Dependency<?>> getDependencies() {
            return providerDependencies;
        }
    });
    // Optional is immutable, so it's safe to expose Optional<Provider<T>> as
    // Optional<javax.inject.Provider<T>> (since Guice provider implements javax Provider).
    @SuppressWarnings({ "unchecked", "cast" }) Key massagedOptionalProviderKey = (Key) optionalProviderKey;
    binder.bind(optionalJavaxProviderKey).to(massagedOptionalProviderKey);
    binder.bind(optionalKey).toProvider(new RealOptionalKeyProvider());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(FieldDeclaration
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									(FieldAccessExpr
										SimpleName
										(ThisExpr
											NameExpr
												SimpleName
										)
									)
									NullLiteralExpr
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(IfStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(IfStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														(MethodCallExpr
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												LineComment
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
										LineComment
									)
									(IfStmt
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(FieldAccessExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
									)
								)
								LineComment
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
						SimpleName
					)
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(SingleMemberAnnotationExpr
					(ArrayInitializerExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					Name
				)
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(FieldDeclaration
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									(FieldAccessExpr
										SimpleName
										(ThisExpr
											NameExpr
												SimpleName
										)
									)
									NullLiteralExpr
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NullLiteralExpr
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											(FieldAccessExpr
												SimpleName
												(ThisExpr
													NameExpr
														SimpleName
												)
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											(FieldAccessExpr
												SimpleName
												(ThisExpr
													NameExpr
														SimpleName
												)
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											(FieldAccessExpr
												SimpleName
												(ThisExpr
													NameExpr
														SimpleName
												)
											)
											(MethodCallExpr
												(MethodCallExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
													(WildcardType
													)
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											(FieldAccessExpr
												SimpleName
												(ThisExpr
													NameExpr
														SimpleName
												)
											)
											(MethodCallExpr
												(MethodCallExpr
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
													(WildcardType
													)
												)
											)
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
					)
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
						SimpleName
					)
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(SingleMemberAnnotationExpr
					(ArrayInitializerExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					Name
				)
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

