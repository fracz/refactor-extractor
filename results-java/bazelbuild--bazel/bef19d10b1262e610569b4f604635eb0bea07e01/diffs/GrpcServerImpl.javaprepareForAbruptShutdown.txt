/**
 * This is called when the server is shut down as a result of a "clean --expunge".
 *
 * <p>In this case, no files should be deleted on shutdown hooks, since clean also deletes the
 * lock file, and there is a small possibility of the following sequence of events:
 *
 * <ol>
 * <li> Client 1 runs "blaze clean --expunge"
 * <li> Client 2 runs a command and waits for client 1 to finish
 * <li> The clean command deletes everything including the lock file
 * <li> Client 2 starts running and since the output base is empty, starts up a new server,
 * which creates its own socket and PID files
 * <li> The server used by client runs its shutdown hooks, deleting the PID files created by
 * the new server
 * </ol>
 *
 * It also disables the "die when the PID file changes" handler so that it doesn't kill the server
 * while the "clean --expunge" commmand is running.
 */
@Override
public void prepareForAbruptShutdown() {
    disableShutdownHooks();
    signalShutdown();
}||||||||/**
 * This is called when the server is shut down as a result of a "clean --expunge".
 *
 * <p>In this case, no files should be deleted on shutdown hooks, since clean also deletes the
 * lock file, and there is a small possibility of the following sequence of events:
 *
 * <ol>
 * <li> Client 1 runs "blaze clean --expunge"
 * <li> Client 2 runs a command and waits for client 1 to finish
 * <li> The clean command deletes everything including the lock file
 * <li> Client 2 starts running and since the output base is empty, starts up a new server,
 * which creates its own socket and PID files
 * <li> The server used by client runs its shutdown hooks, deleting the PID files created by
 * the new server
 * </ol>
 *
 * It also disables the "die when the PID file changes" handler so that it doesn't kill the server
 * while the "clean --expunge" commmand is running.
 */
@Override
public void prepareForAbruptShutdown() {
    disableShutdownHooks();
    pidFileWatcherThread.signalShutdown();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

