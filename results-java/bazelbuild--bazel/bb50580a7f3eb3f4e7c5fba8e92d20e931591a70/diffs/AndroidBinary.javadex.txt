/**
 * Creates one or more classes.dex files that correspond to {@code proguardedJar}.
 */
private static DexingOutput dex(RuleContext ruleContext, AndroidSemantics androidSemantics, Artifact binaryJar, Artifact proguardedJar, boolean isBinaryJarFiltered, AndroidCommon common, @Nullable Artifact mainDexProguardSpec, JavaTargetAttributes attributes, Function<Artifact, Artifact> derivedJarFunction, @Nullable Artifact proguardOutputMap) throws InterruptedException, RuleErrorException {
    List<String> dexopts = ruleContext.getTokenizedStringListAttr("dexopts");
    MultidexMode multidexMode = getMultidexMode(ruleContext);
    if (!supportsMultidexMode(ruleContext, multidexMode)) {
        ruleContext.throwWithRuleError("Multidex mode \"" + multidexMode.getAttributeValue() + "\" not supported by this version of the Android SDK");
    }
    int dexShards = ruleContext.attributes().get("dex_shards", Type.INTEGER);
    if (dexShards > 1) {
        if (multidexMode == MultidexMode.OFF) {
            ruleContext.throwWithRuleError(".dex sharding is only available in multidex mode");
        }
        if (multidexMode == MultidexMode.MANUAL_MAIN_DEX) {
            ruleContext.throwWithRuleError(".dex sharding is not available in manual multidex mode");
        }
    }
    Artifact mainDexList = ruleContext.getPrerequisiteArtifact("main_dex_list", Mode.TARGET);
    if ((mainDexList != null && multidexMode != MultidexMode.MANUAL_MAIN_DEX) || (mainDexList == null && multidexMode == MultidexMode.MANUAL_MAIN_DEX)) {
        ruleContext.throwWithRuleError("Both \"main_dex_list\" and \"multidex='manual_main_dex'\" must be specified.");
    }
    // Always OFF if finalJarIsDerived
    ImmutableSet<AndroidBinaryType> incrementalDexing = getEffectiveIncrementalDexing(ruleContext, dexopts, !Objects.equals(binaryJar, proguardedJar));
    Artifact inclusionFilterJar = isBinaryJarFiltered && Objects.equals(binaryJar, proguardedJar) ? binaryJar : null;
    if (multidexMode == MultidexMode.OFF) {
        // Single dex mode: generate classes.dex directly from the input jar.
        if (incrementalDexing.contains(AndroidBinaryType.MONODEX)) {
            Artifact classesDex = getDxArtifact(ruleContext, "classes.dex.zip");
            Artifact jarToDex = getDxArtifact(ruleContext, "classes.jar");
            createShuffleJarAction(ruleContext, true, (Artifact) null, ImmutableList.of(jarToDex), common, inclusionFilterJar, dexopts, androidSemantics, attributes, derivedJarFunction, (Artifact) null);
            createDexMergerAction(ruleContext, "off", jarToDex, classesDex, (Artifact) null, dexopts);
            return new DexingOutput(classesDex, binaryJar, ImmutableList.of(classesDex));
        } else {
            // By *not* writing a zip we get dx to drop resources on the floor.
            Artifact classesDex = getDxArtifact(ruleContext, "classes.dex");
            AndroidCommon.createDexAction(ruleContext, proguardedJar, classesDex, dexopts, /* multidex */
            false, (Artifact) null);
            return new DexingOutput(classesDex, binaryJar, ImmutableList.of(classesDex));
        }
    } else {
        if (multidexMode == MultidexMode.LEGACY) {
            // For legacy multidex, we need to generate a list for the dexer's --main-dex-list flag.
            mainDexList = createMainDexListAction(ruleContext, androidSemantics, proguardedJar, mainDexProguardSpec, proguardOutputMap);
        }
        Artifact classesDex = getDxArtifact(ruleContext, "classes.dex.zip");
        if (dexShards > 1) {
            ImmutableList.Builder<Artifact> shardsBuilder = ImmutableList.builder();
            for (int i = 1; i <= dexShards; i++) {
                shardsBuilder.add(getDxArtifact(ruleContext, "shard" + i + ".jar"));
            }
            ImmutableList<Artifact> shards = shardsBuilder.build();
            Artifact javaResourceJar = createShuffleJarAction(ruleContext, incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED), /*proguardedJar*/
            !Objects.equals(binaryJar, proguardedJar) ? proguardedJar : null, shards, common, inclusionFilterJar, dexopts, androidSemantics, attributes, derivedJarFunction, mainDexList);
            ImmutableList.Builder<Artifact> shardDexesBuilder = ImmutableList.builder();
            for (int i = 1; i <= dexShards; i++) {
                Artifact shard = shards.get(i - 1);
                Artifact shardDex = getDxArtifact(ruleContext, "shard" + i + ".dex.zip");
                shardDexesBuilder.add(shardDex);
                if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED)) {
                    // If there's a main dex list then the first shard contains exactly those files.
                    // To work with devices that lack native multi-dex support we need to make sure that
                    // the main dex list becomes one dex file if at all possible.
                    // Note shard here (mostly) contains of .class.dex files from shuffled dex archives,
                    // instead of being a conventional Jar file with .class files.
                    String multidexStrategy = mainDexList != null && i == 1 ? "minimal" : "best_effort";
                    createDexMergerAction(ruleContext, multidexStrategy, shard, shardDex, (Artifact) null, dexopts);
                } else {
                    AndroidCommon.createDexAction(ruleContext, shard, shardDex, dexopts, /* multidex */
                    true, (Artifact) null);
                }
            }
            ImmutableList<Artifact> shardDexes = shardDexesBuilder.build();
            CommandLine mergeCommandLine = CustomCommandLine.builder().addBeforeEachExecPath("--input_zip", shardDexes).addExecPath("--output_zip", classesDex).build();
            ruleContext.registerAction(new SpawnAction.Builder().useDefaultShellEnvironment().setMnemonic("MergeDexZips").setProgressMessage("Merging dex shards for %s", ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite("$merge_dexzips", Mode.HOST)).addInputs(shardDexes).addOutput(classesDex).setCommandLine(mergeCommandLine).build(ruleContext));
            if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED)) {
                // Using the deploy jar for java resources gives better "bazel mobile-install" performance
                // with incremental dexing b/c bazel can create the "incremental" and "split resource"
                // APKs earlier (b/c these APKs don't depend on code being dexed here).  This is also done
                // for other multidex modes.
                javaResourceJar = binaryJar;
            }
            return new DexingOutput(classesDex, javaResourceJar, shardDexes);
        } else {
            if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_UNSHARDED)) {
                Artifact jarToDex = AndroidBinary.getDxArtifact(ruleContext, "classes.jar");
                createShuffleJarAction(ruleContext, true, (Artifact) null, ImmutableList.of(jarToDex), common, inclusionFilterJar, dexopts, androidSemantics, attributes, derivedJarFunction, (Artifact) null);
                createDexMergerAction(ruleContext, "minimal", jarToDex, classesDex, mainDexList, dexopts);
            } else {
                // Because the dexer also places resources into this zip, we also need to create a cleanup
                // action that removes all non-.dex files before staging for apk building.
                // Create an artifact for the intermediate zip output that includes non-.dex files.
                Artifact classesDexIntermediate = AndroidBinary.getDxArtifact(ruleContext, "intermediate_classes.dex.zip");
                // Have the dexer generate the intermediate file and the "cleaner" action consume this to
                // generate the final archive with only .dex files.
                AndroidCommon.createDexAction(ruleContext, proguardedJar, classesDexIntermediate, dexopts, /* multidex */
                true, mainDexList);
                createCleanDexZipAction(ruleContext, classesDexIntermediate, classesDex);
            }
            return new DexingOutput(classesDex, binaryJar, ImmutableList.of(classesDex));
        }
    }
}||||||||/**
 * Creates one or more classes.dex files that correspond to {@code proguardedJar}.
 */
private static DexingOutput dex(RuleContext ruleContext, AndroidSemantics androidSemantics, Artifact binaryJar, Artifact proguardedJar, boolean isBinaryJarFiltered, AndroidCommon common, @Nullable Artifact mainDexProguardSpec, JavaTargetAttributes attributes, Function<Artifact, Artifact> derivedJarFunction, @Nullable Artifact proguardOutputMap) throws InterruptedException, RuleErrorException {
    List<String> dexopts = ruleContext.getTokenizedStringListAttr("dexopts");
    MultidexMode multidexMode = getMultidexMode(ruleContext);
    if (!supportsMultidexMode(ruleContext, multidexMode)) {
        ruleContext.throwWithRuleError("Multidex mode \"" + multidexMode.getAttributeValue() + "\" not supported by this version of the Android SDK");
    }
    int dexShards = ruleContext.attributes().get("dex_shards", Type.INTEGER);
    if (dexShards > 1) {
        if (multidexMode == MultidexMode.OFF) {
            ruleContext.throwWithRuleError(".dex sharding is only available in multidex mode");
        }
        if (multidexMode == MultidexMode.MANUAL_MAIN_DEX) {
            ruleContext.throwWithRuleError(".dex sharding is not available in manual multidex mode");
        }
    }
    Artifact mainDexList = ruleContext.getPrerequisiteArtifact("main_dex_list", Mode.TARGET);
    if ((mainDexList != null && multidexMode != MultidexMode.MANUAL_MAIN_DEX) || (mainDexList == null && multidexMode == MultidexMode.MANUAL_MAIN_DEX)) {
        ruleContext.throwWithRuleError("Both \"main_dex_list\" and \"multidex='manual_main_dex'\" must be specified.");
    }
    // Always OFF if finalJarIsDerived
    ImmutableSet<AndroidBinaryType> incrementalDexing = getEffectiveIncrementalDexing(ruleContext, dexopts, !Objects.equals(binaryJar, proguardedJar));
    Artifact inclusionFilterJar = isBinaryJarFiltered && Objects.equals(binaryJar, proguardedJar) ? binaryJar : null;
    if (multidexMode == MultidexMode.OFF) {
        // Single dex mode: generate classes.dex directly from the input jar.
        if (incrementalDexing.contains(AndroidBinaryType.MONODEX)) {
            Artifact classesDex = getDxArtifact(ruleContext, "classes.dex.zip");
            Artifact jarToDex = getDxArtifact(ruleContext, "classes.jar");
            createShuffleJarAction(ruleContext, true, (Artifact) null, ImmutableList.of(jarToDex), common, inclusionFilterJar, dexopts, androidSemantics, attributes, derivedJarFunction, (Artifact) null);
            createDexMergerAction(ruleContext, "off", jarToDex, classesDex, (Artifact) null, dexopts);
            return new DexingOutput(classesDex, binaryJar, ImmutableList.of(classesDex));
        } else {
            // By *not* writing a zip we get dx to drop resources on the floor.
            Artifact classesDex = getDxArtifact(ruleContext, "classes.dex");
            AndroidCommon.createDexAction(ruleContext, proguardedJar, classesDex, dexopts, /* multidex */
            false, (Artifact) null);
            return new DexingOutput(classesDex, binaryJar, ImmutableList.of(classesDex));
        }
    } else {
        if (multidexMode == MultidexMode.LEGACY) {
            // For legacy multidex, we need to generate a list for the dexer's --main-dex-list flag.
            mainDexList = createMainDexListAction(ruleContext, androidSemantics, proguardedJar, mainDexProguardSpec, proguardOutputMap);
        }
        Artifact classesDex = getDxArtifact(ruleContext, "classes.dex.zip");
        if (dexShards > 1) {
            ImmutableList.Builder<Artifact> shardsBuilder = ImmutableList.builder();
            for (int i = 1; i <= dexShards; i++) {
                shardsBuilder.add(getDxArtifact(ruleContext, "shard" + i + ".jar"));
            }
            ImmutableList<Artifact> shards = shardsBuilder.build();
            Artifact javaResourceJar = createShuffleJarAction(ruleContext, incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED), /*proguardedJar*/
            !Objects.equals(binaryJar, proguardedJar) ? proguardedJar : null, shards, common, inclusionFilterJar, dexopts, androidSemantics, attributes, derivedJarFunction, mainDexList);
            ImmutableList.Builder<Artifact> shardDexesBuilder = ImmutableList.builder();
            for (int i = 1; i <= dexShards; i++) {
                Artifact shard = shards.get(i - 1);
                Artifact shardDex = getDxArtifact(ruleContext, "shard" + i + ".dex.zip");
                shardDexesBuilder.add(shardDex);
                if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED)) {
                    // If there's a main dex list then the first shard contains exactly those files.
                    // To work with devices that lack native multi-dex support we need to make sure that
                    // the main dex list becomes one dex file if at all possible.
                    // Note shard here (mostly) contains of .class.dex files from shuffled dex archives,
                    // instead of being a conventional Jar file with .class files.
                    String multidexStrategy = mainDexList != null && i == 1 ? "minimal" : "best_effort";
                    createDexMergerAction(ruleContext, multidexStrategy, shard, shardDex, (Artifact) null, dexopts);
                } else {
                    AndroidCommon.createDexAction(ruleContext, shard, shardDex, dexopts, /* multidex */
                    true, (Artifact) null);
                }
            }
            ImmutableList<Artifact> shardDexes = shardDexesBuilder.build();
            CommandLine mergeCommandLine = CustomCommandLine.builder().addExecPaths(VectorArg.addBefore("--input_zip").each(shardDexes)).addExecPath("--output_zip", classesDex).build();
            ruleContext.registerAction(new SpawnAction.Builder().useDefaultShellEnvironment().setMnemonic("MergeDexZips").setProgressMessage("Merging dex shards for %s", ruleContext.getLabel()).setExecutable(ruleContext.getExecutablePrerequisite("$merge_dexzips", Mode.HOST)).addInputs(shardDexes).addOutput(classesDex).setCommandLine(mergeCommandLine).build(ruleContext));
            if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_SHARDED)) {
                // Using the deploy jar for java resources gives better "bazel mobile-install" performance
                // with incremental dexing b/c bazel can create the "incremental" and "split resource"
                // APKs earlier (b/c these APKs don't depend on code being dexed here).  This is also done
                // for other multidex modes.
                javaResourceJar = binaryJar;
            }
            return new DexingOutput(classesDex, javaResourceJar, shardDexes);
        } else {
            if (incrementalDexing.contains(AndroidBinaryType.MULTIDEX_UNSHARDED)) {
                Artifact jarToDex = AndroidBinary.getDxArtifact(ruleContext, "classes.jar");
                createShuffleJarAction(ruleContext, true, (Artifact) null, ImmutableList.of(jarToDex), common, inclusionFilterJar, dexopts, androidSemantics, attributes, derivedJarFunction, (Artifact) null);
                createDexMergerAction(ruleContext, "minimal", jarToDex, classesDex, mainDexList, dexopts);
            } else {
                // Because the dexer also places resources into this zip, we also need to create a cleanup
                // action that removes all non-.dex files before staging for apk building.
                // Create an artifact for the intermediate zip output that includes non-.dex files.
                Artifact classesDexIntermediate = AndroidBinary.getDxArtifact(ruleContext, "intermediate_classes.dex.zip");
                // Have the dexer generate the intermediate file and the "cleaner" action consume this to
                // generate the final archive with only .dex files.
                AndroidCommon.createDexAction(ruleContext, proguardedJar, classesDexIntermediate, dexopts, /* multidex */
                true, mainDexList);
                createCleanDexZipAction(ruleContext, classesDexIntermediate, classesDex);
            }
            return new DexingOutput(classesDex, binaryJar, ImmutableList.of(classesDex));
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NullLiteralExpr
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BooleanLiteralExpr
											(BlockComment
											)
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										(CastExpr
											NullLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(CastExpr
											NullLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(ConditionalExpr
											(UnaryExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
											NameExpr
												SimpleName
											(BlockComment
											)
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(BooleanLiteralExpr
													(BlockComment
													)
												)
												(CastExpr
													NullLiteralExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ConditionalExpr
														(BinaryExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																NullLiteralExpr
															)
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
														)
														StringLiteralExpr
														StringLiteralExpr
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(CastExpr
													NullLiteralExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(MethodCallExpr
														StringLiteralExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																SimpleName
																(ObjectCreationExpr
																	(ClassOrInterfaceType
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
									(BlockComment
									)
								)
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NullLiteralExpr
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BooleanLiteralExpr
											(BlockComment
											)
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										(CastExpr
											NullLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(CastExpr
											NullLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(ConditionalExpr
											(UnaryExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
											NameExpr
												SimpleName
											(BlockComment
											)
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(BooleanLiteralExpr
													(BlockComment
													)
												)
												(CastExpr
													NullLiteralExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ConditionalExpr
														(BinaryExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																NullLiteralExpr
															)
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
														)
														StringLiteralExpr
														StringLiteralExpr
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(CastExpr
													NullLiteralExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(MethodCallExpr
														StringLiteralExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																SimpleName
																(ObjectCreationExpr
																	(ClassOrInterfaceType
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
									(BlockComment
									)
								)
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(CastExpr
									NullLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

