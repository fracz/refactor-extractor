public void addTransitiveInfoProviders(RuleConfiguredTargetBuilder builder, Artifact classJar, Artifact manifestProtoOutput) {
    if (!idls.isEmpty()) {
        generateAndroidIdlCompilationActions(ruleContext, idls, androidIdlProvider, translatedIdlSources);
        createIdlClassJarAction(ruleContext, classJar, translatedIdlSources.values(), manifestProtoOutput, idlClassJar, idlSourceJar);
    }
    builder.add(AndroidIdlProvider.class, androidIdlProvider).addOutputGroup(AndroidSemantics.IDL_JARS_OUTPUT_GROUP, androidIdlProvider.getTransitiveIdlJars());
}||||||||/**
 * Adds the necessary providers to the {@code builder}.
 *
 * Adds an {@link AndroidIdlProvider} to the target, and adds the transitive generated IDL jars to
 * the IDL_JARS_OUTPUT_GROUP. This also generates the actions to compile the .aidl files to .java,
 * as well as the .jar and .srcjar files consisting of only the IDL-generated source and class
 * files.
 *
 * @param builder The target builder to add the providers to.
 * @param classJar The class jar to be separated into the IDL class jar.
 * @param manifestProtoOutput The manifest generated by JavaBuilder, for identifying IDL-generated
 * class files in the class jar.
 */
public void addTransitiveInfoProviders(RuleConfiguredTargetBuilder builder, Artifact classJar, Artifact manifestProtoOutput) {
    if (!translatedIdlSources.isEmpty()) {
        generateAndroidIdlCompilationActions(ruleContext, androidIdlProvider, translatedIdlSources);
        createIdlClassJarAction(ruleContext, classJar, translatedIdlSources.values(), manifestProtoOutput, idlClassJar, idlSourceJar);
    }
    builder.add(AndroidIdlProvider.class, androidIdlProvider).addOutputGroup(AndroidSemantics.IDL_JARS_OUTPUT_GROUP, androidIdlProvider.getTransitiveIdlJars());
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

