/**
 * Gets the single "effective" architecture for the given {@link PlatformType}. Prefer this over
 * {@link #getArchitectures(PlatformType)} only in cases if in the context of a rule which
 * is only concerned with a single architecture (such as {@code objc_library}, which registers
 * single-architecture compile actions.
 *
 * <p>Single effective architecture is determined using the following rules:
 * <ol>
 * <li>If {@code --apple_split_cpu} is set (done via prior configuration transition), then
 * that is the effective architecture.</li>
 * <li>In the case of iOS, use {@code --ios_cpu}.</li>
 * <li>Use the default.</li></ol>
 *
 * @throws IllegalArgumentException if {@code --apple_platform_type} is set (via prior
 * configuration transition) yet does not match {@code platformType}
 */
// TODO(cparsons): Support platform types other than iOS.
// TODO(b/28958783): Consider changing this behavior to be more consistent between single and
// multi-arch cases.
public String getSingleArchitecture(PlatformType platformType) {
    if (!Strings.isNullOrEmpty(appleSplitCpu)) {
        if (applePlatformType != platformType) {
            throw new IllegalArgumentException(String.format("Expected post-split-transition platform type %s to match input %s ", applePlatformType, platformType));
        }
        return appleSplitCpu;
    }
    switch(platformType) {
        case IOS:
            return getIosCpu();
        // TODO(cparsons): Support other platform types.
        default:
            throw new IllegalArgumentException("Unhandled platform type " + platformType);
    }
}||||||||/**
 * Gets the single "effective" architecture for this configuration's {@link PlatformType} (for
 * example, "i386" or "arm64"). Prefer this over {@link #getMultiArchitectures(PlatformType)}
 * only if in the context of rule logic which is only concerned with a single architecture (such
 * as in {@code objc_library}, which registers single-architecture compile actions).
 *
 * <p>Single effective architecture is determined using the following rules:
 * <ol>
 * <li>If {@code --apple_split_cpu} is set (done via prior configuration transition), then
 * that is the effective architecture.</li>
 * <li>If the multi cpus flag (e.g. {@code --ios_multi_cpus}) is set and non-empty, then the first
 * such architecture is returned.</li>
 * <li>In the case of iOS, use {@code --ios_cpu} for backwards compatibility.</li>
 * <li>Use the default.</li></ol>
 */
public String getSingleArchitecture() {
    if (!Strings.isNullOrEmpty(appleSplitCpu)) {
        return appleSplitCpu;
    }
    switch(applePlatformType) {
        case IOS:
            if (!getIosMultiCpus().isEmpty()) {
                return getIosMultiCpus().get(0);
            } else {
                return getIosCpu();
            }
        // TODO(cparsons): Support platform types other than iOS.
        default:
            throw new IllegalArgumentException("Unhandled platform type " + applePlatformType);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				LineComment
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				LineComment
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)

