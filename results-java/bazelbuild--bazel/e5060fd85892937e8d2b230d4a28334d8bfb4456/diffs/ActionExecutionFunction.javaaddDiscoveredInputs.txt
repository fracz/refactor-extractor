private static void addDiscoveredInputs(Map<Artifact, FileArtifactValue> inputData, Iterable<Artifact> discoveredInputs, Environment env) throws InterruptedException {
    Set<SkyKey> keys = new HashSet<>();
    for (Artifact artifact : discoveredInputs) {
        if (!inputData.containsKey(artifact)) {
            // Note that if the artifact is derived, the mandatory flag is ignored.
            keys.add(ArtifactSkyKey.key(artifact, /*mandatory=*/
            false));
        }
    }
    // We do not do a getValuesOrThrow() call for the following reasons:
    // 1. No exceptions can be thrown for non-mandatory inputs;
    // 2. Any derived inputs must be in the transitive closure of this action's inputs. Therefore,
    // if there was an error building one of them, then that exception would have percolated up to
    // this action already, through one of its declared inputs, and we would not have reached input
    // discovery.
    // Therefore there is no need to catch and rethrow exceptions as there is with #checkInputs.
    Map<SkyKey, SkyValue> data = env.getValues(keys);
    if (!env.valuesMissing()) {
        for (Entry<SkyKey, SkyValue> entry : data.entrySet()) {
            inputData.put(ArtifactSkyKey.artifact(entry.getKey()), (FileArtifactValue) entry.getValue());
        }
    }
}||||||||private static void addDiscoveredInputs(Map<Artifact, FileArtifactValue> inputData, Iterable<Artifact> discoveredInputs, Environment env) throws InterruptedException {
    // We do not do a getValuesOrThrow() call for the following reasons:
    // 1. No exceptions can be thrown for non-mandatory inputs;
    // 2. Any derived inputs must be in the transitive closure of this action's inputs. Therefore,
    // if there was an error building one of them, then that exception would have percolated up to
    // this action already, through one of its declared inputs, and we would not have reached input
    // discovery.
    // Therefore there is no need to catch and rethrow exceptions as there is with #checkInputs.
    Map<SkyKey, SkyValue> nonMandatoryDiscovered = env.getValues(newlyDiscoveredInputsToSkyKeys(discoveredInputs, inputData.keySet()));
    if (!env.valuesMissing()) {
        for (Entry<SkyKey, SkyValue> entry : nonMandatoryDiscovered.entrySet()) {
            inputData.put(ArtifactSkyKey.artifact(entry.getKey()), (FileArtifactValue) entry.getValue());
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
										(BlockComment
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(CastExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(CastExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

