/**
 * Performs validity checking of the specified package name. Returns null on success or an error
 * message otherwise.
 *
 * @param packageName the name of the package
 * @return null if {@code name} is valid or an error string if any part
 * of the package name is invalid
 */
@Nullable
public static String validatePackageName(String packageName) {
    int len = packageName.length();
    if (len == 0) {
        // Empty package name (//:foo).
        return null;
    }
    if (packageName.charAt(0) == '/') {
        return "package names may not start with '/'";
    }
    // Check for any character outside of [/0-9.A-Za-z_-]. Try to evaluate the
    // conditional quickly (by looking in decreasing order of character class
    // likelihood). To deal with . and .. pretend that the name is surrounded by '/'
    // on both sides.
    boolean nonDot = false;
    int lastSlash = len;
    for (int i = len - 1; i >= -1; --i) {
        char c = (i >= 0) ? packageName.charAt(i) : '/';
        if ((c < 'a' || c > 'z') && c != '/' && c != '_' && c != '-' && c != '.' && (c < '0' || c > '9') && (c < 'A' || c > 'Z')) {
            return PACKAGE_NAME_ERROR;
        }
        if (c == '/') {
            if (lastSlash == i + 1) {
                return lastSlash == len ? "package names may not end with '/'" : "package names may not contain '//' path separators";
            }
            if (!nonDot) {
                return PACKAGE_NAME_DOT_ERROR;
            }
            nonDot = false;
            lastSlash = i;
        } else {
            if (c != '.') {
                nonDot = true;
            }
        }
    }
    // ok
    return null;
}||||||||/**
 * Performs validity checking of the specified package name. Returns null on success or an error
 * message otherwise.
 *
 * @param packageName the name of the package
 * @return null if {@code name} is valid or an error string if any part
 * of the package name is invalid
 */
@Nullable
public static String validatePackageName(String packageName) {
    int len = packageName.length();
    if (len == 0) {
        // Empty package name (//:foo).
        return null;
    }
    if (packageName.charAt(0) == '/') {
        return "package names may not start with '/'";
    }
    if (!ALLOWED_CHARACTERS_IN_PACKAGE_NAME.matchesAllOf(packageName)) {
        return PACKAGE_NAME_ERROR;
    }
    if (packageName.charAt(packageName.length() - 1) == '/') {
        return "package names may not end with '/'";
    }
    // Check for empty or dot-only package segment
    boolean nonDot = false;
    boolean lastSlash = true;
    // '.' only package segment.
    for (int i = len - 1; i >= -1; --i) {
        char c = (i >= 0) ? packageName.charAt(i) : '/';
        if (c == '/') {
            if (lastSlash) {
                return "package names may not contain '//' path separators";
            }
            if (!nonDot) {
                return PACKAGE_NAME_DOT_ERROR;
            }
            nonDot = false;
            lastSlash = true;
        } else {
            if (c != '.') {
                nonDot = true;
            }
            lastSlash = false;
        }
    }
    // ok
    return null;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(CharLiteralExpr
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													(BinaryExpr
														NameExpr
															SimpleName
														(CharLiteralExpr
														)
													)
													(BinaryExpr
														NameExpr
															SimpleName
														(CharLiteralExpr
														)
													)
												)
											)
											(BinaryExpr
												NameExpr
													SimpleName
												(CharLiteralExpr
												)
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(CharLiteralExpr
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(CharLiteralExpr
									)
								)
							)
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(CharLiteralExpr
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(CharLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(ConditionalExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										StringLiteralExpr
										StringLiteralExpr
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NullLiteralExpr
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(CharLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(CharLiteralExpr
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ReturnStmt
									StringLiteralExpr
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			NullLiteralExpr
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

