@Test
public void testJackDexingOnNonProguardTargetHasNoProguardSpecsFromLibraries() throws Exception {
    useConfiguration("--experimental_android_use_jack_for_dexing");
    scratch.file("java/com/google/android/BUILD", "android_library(", "  name = 'dep',", "  srcs = ['dep.java'],", "  proguard_specs = ['transitive.pro'],", ")", "android_binary(", "  name = 'top',", "  srcs = ['foo.java', 'bar.srcjar'],", "  manifest = 'AndroidManifest.xml',", "  deps = [':dep'],", ")");
    ConfiguredTarget topTarget = getConfiguredTarget("//java/com/google/android:top");
    Action jackDexAction = getGeneratingAction(artifactByPath(getFilesToBuild(topTarget), "top.apk", ".apk", ".apk", "classes.dex.zip"));
    Iterable<String> jackDexInputs = ActionsTestUtil.baseArtifactNames(jackDexAction.getInputs());
    assertThat(jackDexInputs).doesNotContain("transitive.pro_valid");
}||||||||@Test
public void testJackDexingOnNonProguardTargetHasNoProguardSpecsFromLibraries() throws Exception {
    useConfiguration("--experimental_android_use_jack_for_dexing");
    scratch.file("java/com/google/android/BUILD", "android_library(", "  name = 'dep',", "  srcs = ['dep.java'],", "  proguard_specs = ['transitive.pro'],", ")", "android_binary(", "  name = 'top',", "  srcs = ['foo.java', 'bar.srcjar'],", "  manifest = 'AndroidManifest.xml',", "  deps = [':dep'],", ")");
    ConfiguredTarget topTarget = getConfiguredTarget("//java/com/google/android:top");
    Action jackDexAction = getGeneratingAction(artifactByPath(ImmutableList.of(getCompressedUnsignedApk(topTarget)), ".apk", "classes.dex.zip"));
    Iterable<String> jackDexInputs = ActionsTestUtil.baseArtifactNames(jackDexAction.getInputs());
    assertThat(jackDexInputs).doesNotContain("transitive.pro_valid");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

