@Test
public void configFeatureFlagProvider_skylarkConstructor() throws Exception {
    scratch.file("test/wrapper.bzl", "def _flag_reading_wrapper_impl(ctx):", "  pass", "flag_reading_wrapper = rule(", "  implementation = _flag_reading_wrapper_impl,", "  attrs = {'flag': attr.label()},", ")", "def _flag_propagating_wrapper_impl(ctx):", "  return struct(providers = [config_common.FeatureFlagInfo(value='hello')])", "flag_propagating_wrapper = rule(", "  implementation = _flag_propagating_wrapper_impl,", ")");
    scratch.file("test/BUILD", "load(':wrapper.bzl', 'flag_propagating_wrapper')", "flag_propagating_wrapper(", "    name = 'propagator',", ")", "config_setting(name = 'hello_setting',", "    flag_values = {':propagator': 'hello'})", "genrule(", "    name = 'gen',", "    srcs = [],", "    outs = ['out'],", "    cmd = select({", "       ':hello_setting': 'hello',", "       '//conditions:default': 'error'", "    }))");
    ConfiguredAttributeMapper attributeMapper = ConfiguredAttributeMapper.of((RuleConfiguredTarget) getConfiguredTarget("//test:gen"));
    assertThat(attributeMapper.get("cmd", Type.STRING)).isEqualTo("hello");
}||||||||@Test
public void configFeatureFlagProvider_skylarkConstructor() throws Exception {
    scratch.file("test/wrapper.bzl", "def _flag_reading_wrapper_impl(ctx):", "  pass", "flag_reading_wrapper = rule(", "  implementation = _flag_reading_wrapper_impl,", "  attrs = {'flag': attr.label()},", ")", "def _flag_propagating_wrapper_impl(ctx):", "  return struct(providers = [config_common.FeatureFlagInfo(value='hello')])", "flag_propagating_wrapper = rule(", "  implementation = _flag_propagating_wrapper_impl,", ")");
    scratch.file("test/BUILD", "load(':wrapper.bzl', 'flag_propagating_wrapper')", "flag_propagating_wrapper(", "    name = 'propagator',", ")", "config_setting(name = 'hello_setting',", "    flag_values = {':propagator': 'hello'})", "genrule(", "    name = 'gen',", "    srcs = [],", "    outs = ['out'],", "    cmd = select({", "       ':hello_setting': 'hello',", "       '//conditions:default': 'error'", "    }))");
    ConfiguredAttributeMapper attributeMapper = ((RuleConfiguredTarget) getConfiguredTarget("//test:gen")).getAttributeMapper();
    assertThat(attributeMapper.get("cmd", Type.STRING)).isEqualTo("hello");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(CastExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

