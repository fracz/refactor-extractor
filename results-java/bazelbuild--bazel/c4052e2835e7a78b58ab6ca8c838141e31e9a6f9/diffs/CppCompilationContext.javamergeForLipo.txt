/**
 * Returns the context for a LIPO compile action. This uses the include dirs
 * and defines of the library, but the declared inclusion dirs/srcs from both
 * the library and the owner binary.
 *
 * <p>TODO(bazel-team): this might make every LIPO target have an unnecessary large set of
 * inclusion dirs/srcs. The correct behavior would be to merge only the contexts
 * of actual referred targets (as listed in .imports file).
 *
 * <p>Undeclared inclusion checking ({@link #getDeclaredIncludeDirs()},
 * {@link #getDeclaredIncludeWarnDirs()}, and
 * {@link #getDeclaredIncludeSrcs()}) needs to use the union of the contexts
 * of the involved source files.
 *
 * <p>For include and define command line flags ({@link #getIncludeDirs()}
 * {@link #getQuoteIncludeDirs()}, {@link #getSystemIncludeDirs()}, and
 * {@link #getDefines()}) LIPO compilations use the same values as non-LIPO
 * compilation.
 *
 * <p>Include scanning is not handled by this method. See
 * {@code IncludeScannable#getAuxiliaryScannables()} instead.
 *
 * @param ownerContext the compilation context of the owner binary
 * @param libContext the compilation context of the library
 */
public static CppCompilationContext mergeForLipo(CppCompilationContext ownerContext, CppCompilationContext libContext) {
    return new CppCompilationContext(libContext.commandLineContext, ImmutableList.copyOf(Iterables.concat(ownerContext.depsContexts, libContext.depsContexts)), libContext.cppModuleMap, libContext.headerModule, libContext.picHeaderModule, libContext.provideTransitiveModuleMaps, libContext.useHeaderModules);
}||||||||/**
 * Returns the context for a LIPO compile action. This uses the include dirs
 * and defines of the library, but the declared inclusion dirs/srcs from both
 * the library and the owner binary.
 *
 * <p>TODO(bazel-team): this might make every LIPO target have an unnecessary large set of
 * inclusion dirs/srcs. The correct behavior would be to merge only the contexts
 * of actual referred targets (as listed in .imports file).
 *
 * <p>Undeclared inclusion checking ({@link #getDeclaredIncludeDirs()},
 * {@link #getDeclaredIncludeWarnDirs()}, and
 * {@link #getDeclaredIncludeSrcs()}) needs to use the union of the contexts
 * of the involved source files.
 *
 * <p>For include and define command line flags ({@link #getIncludeDirs()}
 * {@link #getQuoteIncludeDirs()}, {@link #getSystemIncludeDirs()}, and
 * {@link #getDefines()}) LIPO compilations use the same values as non-LIPO
 * compilation.
 *
 * <p>Include scanning is not handled by this method. See
 * {@code IncludeScannable#getAuxiliaryScannables()} instead.
 *
 * @param ownerContext the compilation context of the owner binary
 * @param libContext the compilation context of the library
 */
public static CppCompilationContext mergeForLipo(CppCompilationContext ownerContext, CppCompilationContext libContext) {
    ImmutableSet.Builder<Artifact> prerequisites = ImmutableSet.builder();
    prerequisites.addAll(ownerContext.compilationPrerequisites);
    prerequisites.addAll(libContext.compilationPrerequisites);
    return new CppCompilationContext(libContext.commandLineContext, prerequisites.build(), mergeSets(ownerContext.declaredIncludeDirs, libContext.declaredIncludeDirs), mergeSets(ownerContext.declaredIncludeWarnDirs, libContext.declaredIncludeWarnDirs), mergeSets(ownerContext.declaredIncludeSrcs, libContext.declaredIncludeSrcs), mergeSets(ownerContext.pregreppedHdrs, libContext.pregreppedHdrs), mergeSets(ownerContext.headerModuleSrcs, libContext.headerModuleSrcs), mergeSets(ownerContext.topLevelHeaderModules, libContext.topLevelHeaderModules), mergeSets(ownerContext.picTopLevelHeaderModules, libContext.picTopLevelHeaderModules), mergeSets(ownerContext.impliedHeaderModules, libContext.impliedHeaderModules), mergeSets(ownerContext.picImpliedHeaderModules, libContext.picImpliedHeaderModules), mergeSets(ownerContext.transitiveModuleMaps, libContext.transitiveModuleMaps), mergeSets(ownerContext.directModuleMaps, libContext.directModuleMaps), libContext.cppModuleMap, libContext.headerModule, libContext.picHeaderModule, libContext.provideTransitiveModuleMaps, libContext.useHeaderModules);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

