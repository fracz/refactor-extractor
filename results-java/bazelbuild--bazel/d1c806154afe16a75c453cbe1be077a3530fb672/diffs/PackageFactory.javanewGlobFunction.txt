/**
 * *************************************************************************
 * Environment function factories.
 */
/**
 * Returns a function-value implementing "glob" in the specified package
 * context.
 *
 * @param async if true, start globs in the background but don't block on their completion.
 * Only use this for heuristic preloading.
 */
private static Function newGlobFunction(final PackageContext originalContext, final boolean async) {
    List<String> params = ImmutableList.of("include", "exclude", "exclude_directories");
    return new MixedModeFunction("glob", params, 1, false) {

        @Override
        public Object call(Object[] namedArguments, FuncallExpression ast, Environment env) throws EvalException, ConversionException, InterruptedException {
            // Skylark build extensions need to get the PackageContext from the Environment;
            // async glob functions cannot do the same because the Environment is not thread safe.
            PackageContext context;
            if (originalContext == null) {
                Preconditions.checkArgument(!async);
                context = getContext(env, ast);
            } else {
                context = originalContext;
            }
            List<String> includes = Type.STRING_LIST.convert(namedArguments[0], "'glob' argument");
            List<String> excludes = namedArguments[1] == null ? Collections.<String>emptyList() : Type.STRING_LIST.convert(namedArguments[1], "'glob' argument");
            int excludeDirs = namedArguments[2] == null ? EXCLUDE_DIR_DEFAULT : Type.INTEGER.convert(namedArguments[2], "'glob' argument");
            if (async) {
                try {
                    context.globber.runAsync(includes, excludes, excludeDirs != 0);
                } catch (GlobCache.BadGlobException e) {
                // Ignore: errors will appear during the actual evaluation of the package.
                }
                return GlobList.captureResults(includes, excludes, ImmutableList.<String>of());
            } else {
                return handleGlob(includes, excludes, excludeDirs != 0, context, ast);
            }
        }
    };
}||||||||/**
 * *************************************************************************
 * Environment function factories.
 */
/**
 * Returns a function-value implementing "glob" in the specified package
 * context.
 *
 * @param async if true, start globs in the background but don't block on their completion.
 * Only use this for heuristic preloading.
 */
private static Function newGlobFunction(final PackageContext originalContext, final boolean async) {
    List<String> params = ImmutableList.of("include", "exclude", "exclude_directories");
    return new MixedModeFunction("glob", params, 1, false) {

        @Override
        public Object call(Object[] namedArguments, FuncallExpression ast, Environment env) throws EvalException, ConversionException, InterruptedException {
            return globCall(originalContext, async, ast, env, namedArguments);
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ArrayAccessExpr
											(IntegerLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ConditionalExpr
										(BinaryExpr
											(ArrayAccessExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											NullLiteralExpr
										)
										(MethodCallExpr
											(ArrayAccessExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ConditionalExpr
										(BinaryExpr
											(ArrayAccessExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											NullLiteralExpr
										)
										(MethodCallExpr
											(ArrayAccessExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(Parameter
						SimpleName
						(ArrayType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(Parameter
						SimpleName
						(ArrayType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

