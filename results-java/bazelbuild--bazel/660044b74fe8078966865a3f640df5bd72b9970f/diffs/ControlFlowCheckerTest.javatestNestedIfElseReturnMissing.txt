@Test
public void testNestedIfElseReturnMissing() throws Exception {
    Truth.assertThat(findIssues("def f(x, y):", "  if x:", "    if y:", "      return y", "    else:", "      print('foo')", "  else:", "    return x").toString()).contains("1:1-8:12: some but not all execution paths of 'f' return a value" + " [missing-return-value]");
}||||||||@Test
public void testNestedIfElseReturnMissing() throws Exception {
    Truth.assertThat(findIssues("def f(x, y):", "  if x:", "    if y:", "      return y", "    else:", "      print('foo')", "  else:", "    return x").toString()).contains("1:1-8:12: some but not all execution paths of 'f' return a value." + " If you know these cannot happen," + " add the statement `fail('unreachable')` to them." + " For more details, have a look at the documentation. [missing-return-value]");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

