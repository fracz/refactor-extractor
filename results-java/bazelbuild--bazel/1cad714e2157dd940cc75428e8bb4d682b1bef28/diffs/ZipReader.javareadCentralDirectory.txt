/**
 * Finds, reads and parses ZIP file entries from the central directory.
 *
 * @param strictEntries force parsing to use the number of entries recorded in the end of
 * central directory as the correct value, not as an estimate
 * @throws ZipException if a ZIP format error has occurred
 * @throws IOException if an I/O error has occurred
 */
private void readCentralDirectory(boolean strictEntries) throws IOException {
    long eocdLocation = findEndOfCentralDirectoryRecord();
    InputStream stream = new BufferedInputStream(Channels.newInputStream(in.getChannel().position(eocdLocation)));
    EndOfCentralDirectoryRecord.read(stream, zipData);
    if (zipData.isMaybeZip64()) {
        try {
            stream = new BufferedInputStream(Channels.newInputStream(in.getChannel().position(eocdLocation - Zip64EndOfCentralDirectoryLocator.FIXED_DATA_SIZE)));
            Zip64EndOfCentralDirectoryLocator.read(stream, zipData);
            stream = new BufferedInputStream(Channels.newInputStream(in.getChannel().position(zipData.getZip64EndOfCentralDirectoryOffset())));
            Zip64EndOfCentralDirectory.read(stream, zipData);
        } catch (ZipException e) {
        // expected if not in Zip64 format
        }
    }
    if (zipData.isZip64() || strictEntries) {
        // If in Zip64 format or using strict entry numbers, use the parsed information as is to read
        // the central directory file headers.
        readCentralDirectoryFileHeaders(zipData.getExpectedEntries(), zipData.getCentralDirectoryOffset());
    } else {
        // If not in Zip64 format, compute central directory offset by end of central directory record
        // offset and central directory size to allow reading large non-compliant Zip32 directories.
        long centralDirectoryOffset = eocdLocation - zipData.getCentralDirectorySize();
        // reported offset.
        if ((int) centralDirectoryOffset == (int) zipData.getCentralDirectoryOffset()) {
            readCentralDirectoryFileHeaders(centralDirectoryOffset);
        } else {
            readCentralDirectoryFileHeaders(zipData.getExpectedEntries(), zipData.getCentralDirectoryOffset());
        }
    }
}||||||||/**
 * Finds, reads and parses ZIP file entries from the central directory.
 *
 * @param strictEntries force parsing to use the number of entries recorded in the end of
 * central directory as the correct value, not as an estimate
 * @throws ZipException if a ZIP format error has occurred
 * @throws IOException if an I/O error has occurred
 */
private void readCentralDirectory(boolean strictEntries) throws IOException {
    long eocdLocation = findEndOfCentralDirectoryRecord();
    InputStream stream = getStreamAt(eocdLocation);
    EndOfCentralDirectoryRecord.read(stream, zipData);
    if (zipData.isMaybeZip64()) {
        try {
            stream = getStreamAt(eocdLocation - Zip64EndOfCentralDirectoryLocator.FIXED_DATA_SIZE);
            Zip64EndOfCentralDirectoryLocator.read(stream, zipData);
            stream = getStreamAt(zipData.getZip64EndOfCentralDirectoryOffset());
            Zip64EndOfCentralDirectory.read(stream, zipData);
        } catch (ZipException e) {
        // expected if not in Zip64 format
        }
    }
    if (zipData.isZip64() || strictEntries) {
        // If in Zip64 format or using strict entry numbers, use the parsed information as is to read
        // the central directory file headers.
        readCentralDirectoryFileHeaders(zipData.getExpectedEntries(), zipData.getCentralDirectoryOffset());
    } else {
        // If not in Zip64 format, compute central directory offset by end of central directory record
        // offset and central directory size to allow reading large non-compliant Zip32 directories.
        long centralDirectoryOffset = eocdLocation - zipData.getCentralDirectorySize();
        // reported offset.
        if ((int) centralDirectoryOffset == (int) zipData.getCentralDirectoryOffset()) {
            readCentralDirectoryFileHeaders(centralDirectoryOffset);
        } else {
            readCentralDirectoryFileHeaders(zipData.getExpectedEntries(), zipData.getCentralDirectoryOffset());
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodCallExpr
										(MethodCallExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodCallExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(CastExpr
							NameExpr
								SimpleName
							(PrimitiveType
							)
						)
						(CastExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(PrimitiveType
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(CastExpr
							NameExpr
								SimpleName
							(PrimitiveType
							)
						)
						(CastExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(PrimitiveType
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

