/**
 * Returns ids for dependent nodes of a given node, sorted by attribute. Note that some
 * dependencies do not have a corresponding attribute here, and we use the null attribute to
 * represent those edges. Visibility attributes are only visited if {@code visitVisibility} is
 * {@code true}.
 *
 * <p>If {@code aspect} is null, returns the dependent nodes of the configured
 * target node representing the given target and configuration, otherwise that of the aspect
 * node accompanying the aforementioned configured target node for the specified aspect.
 *
 * <p>The values are not simply labels because this also implements the first step of applying
 * configuration transitions, namely, split transitions. This needs to be done before the labels
 * are resolved because late bound attributes depend on the configuration. A good example for this
 * is @{code :cc_toolchain}.
 *
 * <p>The long-term goal is that most configuration transitions be applied here. However, in order
 * to do that, we first have to eliminate transitions that depend on the rule class of the
 * dependency.
 */
public final ListMultimap<Attribute, Dependency> dependentNodeMap(TargetAndConfiguration node, BuildConfiguration hostConfig, Aspect aspect, Set<ConfigMatchingProvider> configConditions) throws EvalException, InterruptedException {
    Target target = node.getTarget();
    BuildConfiguration config = node.getConfiguration();
    ListMultimap<Attribute, Dependency> outgoingEdges = ArrayListMultimap.create();
    if (target instanceof OutputFile) {
        Preconditions.checkNotNull(config);
        visitTargetVisibility(node, outgoingEdges.get(null));
        Rule rule = ((OutputFile) target).getGeneratingRule();
        outgoingEdges.put(null, new Dependency(rule.getLabel(), config));
    } else if (target instanceof InputFile) {
        visitTargetVisibility(node, outgoingEdges.get(null));
    } else if (target instanceof EnvironmentGroup) {
        visitTargetVisibility(node, outgoingEdges.get(null));
    } else if (target instanceof Rule) {
        Preconditions.checkNotNull(config);
        visitTargetVisibility(node, outgoingEdges.get(null));
        Rule rule = (Rule) target;
        ListMultimap<Attribute, LabelAndConfiguration> labelMap = resolveAttributes(rule, aspect != null ? aspect.getDefinition() : null, config, hostConfig, configConditions);
        visitRule(rule, aspect, labelMap, outgoingEdges);
    } else if (target instanceof PackageGroup) {
        visitPackageGroup(node, (PackageGroup) target, outgoingEdges.get(null));
    } else {
        throw new IllegalStateException(target.getLabel().toString());
    }
    return outgoingEdges;
}||||||||/**
 * Returns ids for dependent nodes of a given node, sorted by attribute. Note that some
 * dependencies do not have a corresponding attribute here, and we use the null attribute to
 * represent those edges. Visibility attributes are only visited if {@code visitVisibility} is
 * {@code true}.
 *
 * <p>If {@code aspect} is null, returns the dependent nodes of the configured
 * target node representing the given target and configuration, otherwise that of the aspect
 * node accompanying the aforementioned configured target node for the specified aspect.
 *
 * <p>The values are not simply labels because this also implements the first step of applying
 * configuration transitions, namely, split transitions. This needs to be done before the labels
 * are resolved because late bound attributes depend on the configuration. A good example for this
 * is @{code :cc_toolchain}.
 *
 * <p>The long-term goal is that most configuration transitions be applied here. However, in order
 * to do that, we first have to eliminate transitions that depend on the rule class of the
 * dependency.
 */
public final ListMultimap<Attribute, Dependency> dependentNodeMap(TargetAndConfiguration node, BuildConfiguration hostConfig, Aspect aspect, Set<ConfigMatchingProvider> configConditions) throws EvalException, InterruptedException {
    Target target = node.getTarget();
    BuildConfiguration config = node.getConfiguration();
    ListMultimap<Attribute, Dependency> outgoingEdges = ArrayListMultimap.create();
    if (target instanceof OutputFile) {
        Preconditions.checkNotNull(config);
        visitTargetVisibility(node, outgoingEdges.get(null));
        Rule rule = ((OutputFile) target).getGeneratingRule();
        outgoingEdges.put(null, Dependency.withConfiguration(rule.getLabel(), config));
    } else if (target instanceof InputFile) {
        visitTargetVisibility(node, outgoingEdges.get(null));
    } else if (target instanceof EnvironmentGroup) {
        visitTargetVisibility(node, outgoingEdges.get(null));
    } else if (target instanceof Rule) {
        Preconditions.checkNotNull(config);
        visitTargetVisibility(node, outgoingEdges.get(null));
        Rule rule = (Rule) target;
        ListMultimap<Attribute, LabelAndConfiguration> labelMap = resolveAttributes(rule, aspect != null ? aspect.getDefinition() : null, config, hostConfig, configConditions);
        visitRule(rule, aspect, labelMap, outgoingEdges);
    } else if (target instanceof PackageGroup) {
        visitPackageGroup(node, (PackageGroup) target, outgoingEdges.get(null));
    } else {
        throw new IllegalStateException(target.getLabel().toString());
    }
    return outgoingEdges;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(IfStmt
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											NullLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											(ConditionalExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
												NullLiteralExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NullLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NullLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NullLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NullLiteralExpr
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(IfStmt
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											NullLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NullLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											(ConditionalExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
												NullLiteralExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NullLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NullLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NullLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NullLiteralExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

