@Test
public void testDeclaredProvidersInOperatorInvalidKey() throws Exception {
    scratch.file("test/foo.bzl", "foo_provider = provider()", "bar_provider = provider()", "", "def _inner_impl(ctx):", "    foo = foo_provider()", "    return [foo]", "inner_rule = rule(", "    implementation = _inner_impl,", ")", "", "def _outer_impl(ctx):", "    dep = ctx.attr.deps[0]", // Should throw an error here
    "    'foo_provider' in dep", "outer_rule = rule(", "    implementation = _outer_impl,", "    attrs = {", "       'deps': attr.label_list(),", "    }", ")");
    scratch.file("test/BUILD", "load(':foo.bzl', 'inner_rule', 'outer_rule')", "inner_rule(name = 'dep_rule')", "outer_rule(name = 'my_rule', deps = [':dep_rule'])");
    try {
        getConfiguredTarget("//test:my_rule");
        fail();
    } catch (AssertionError expected) {
        assertThat(expected).hasMessageThat().contains("Type Target only supports querying by object " + "constructors, got string instead");
    }
}||||||||@Test
public void testDeclaredProvidersInOperatorInvalidKey() throws Exception {
    scratch.file("test/foo.bzl", "foo_provider = provider()", "bar_provider = provider()", "", "def _inner_impl(ctx):", "    foo = foo_provider()", "    return [foo]", "inner_rule = rule(", "    implementation = _inner_impl,", ")", "", "def _outer_impl(ctx):", "    dep = ctx.attr.deps[0]", // Should throw an error here
    "    'foo_provider' in dep", "outer_rule = rule(", "    implementation = _outer_impl,", "    attrs = {", "       'deps': attr.label_list(),", "    }", ")");
    scratch.file("test/BUILD", "load(':foo.bzl', 'inner_rule', 'outer_rule')", "inner_rule(name = 'dep_rule')", "outer_rule(name = 'my_rule', deps = [':dep_rule'])");
    try {
        getConfiguredTarget("//test:my_rule");
        fail();
    } catch (AssertionError expected) {
        assertThat(expected).hasMessageThat().contains("Type Target only supports querying by object constructors, got string instead");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
					LineComment
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

