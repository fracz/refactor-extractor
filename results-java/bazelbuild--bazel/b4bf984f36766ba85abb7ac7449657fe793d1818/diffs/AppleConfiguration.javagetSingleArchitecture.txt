/**
 * Gets the single "effective" architecture for this configuration's {@link PlatformType} (for
 * example, "i386" or "arm64"). Prefer this over {@link #getMultiArchitectures(PlatformType)} only
 * if in the context of rule logic which is only concerned with a single architecture (such as in
 * {@code objc_library}, which registers single-architecture compile actions).
 *
 * <p>Single effective architecture is determined using the following rules:
 *
 * <ol>
 * <li>If {@code --apple_split_cpu} is set (done via prior configuration transition), then that is
 * the effective architecture.
 * <li>If the multi cpus flag (e.g. {@code --ios_multi_cpus}) is set and non-empty, then the first
 * such architecture is returned.
 * <li>In the case of iOS, use {@code --ios_cpu} for backwards compatibility.
 * <li>Use the default.
 * </ol>
 */
@SkylarkCallable(name = "single_arch_cpu", structField = true, doc = "The single \"effective\" architecture for this configuration (e.g. i386 or arm64) " + "in the context of rule logic which is only concerned with a single architecture " + "(such as in objc_library, which registers single-architecture compile actions). ")
public String getSingleArchitecture() {
    if (!Strings.isNullOrEmpty(appleSplitCpu)) {
        return appleSplitCpu;
    }
    switch(applePlatformType) {
        case IOS:
            if (!getIosMultiCpus().isEmpty()) {
                return getIosMultiCpus().get(0);
            } else {
                return getIosCpu();
            }
        case WATCHOS:
            return watchosCpus.get(0);
        case TVOS:
            return tvosCpus.get(0);
        case MACOS:
            return macosCpus.get(0);
        default:
            throw new IllegalArgumentException("Unhandled platform type " + applePlatformType);
    }
}||||||||/**
 * Gets the single "effective" architecture for this configuration's {@link PlatformType} (for
 * example, "i386" or "arm64"). Prefer this over {@link #getMultiArchitectures(PlatformType)} only
 * if in the context of rule logic which is only concerned with a single architecture (such as in
 * {@code objc_library}, which registers single-architecture compile actions).
 *
 * <p>Single effective architecture is determined using the following rules:
 *
 * <ol>
 * <li>If {@code --apple_split_cpu} is set (done via prior configuration transition), then that is
 * the effective architecture.
 * <li>If the multi cpus flag (e.g. {@code --ios_multi_cpus}) is set and non-empty, then the first
 * such architecture is returned.
 * <li>In the case of iOS, use {@code --ios_cpu} for backwards compatibility.
 * <li>Use the default.
 * </ol>
 */
@SkylarkCallable(name = "single_arch_cpu", structField = true, doc = "The single \"effective\" architecture for this configuration (e.g., <code>i386</code> or " + "<code>arm64</code>) in the context of rule logic that is only concerned with a " + "single architecture (such as <code>objc_library</code>, which registers " + "single-architecture compile actions).")
public String getSingleArchitecture() {
    if (!Strings.isNullOrEmpty(appleSplitCpu)) {
        return appleSplitCpu;
    }
    switch(applePlatformType) {
        case IOS:
            if (!getIosMultiCpus().isEmpty()) {
                return getIosMultiCpus().get(0);
            } else {
                return getIosCpu();
            }
        case WATCHOS:
            return watchosCpus.get(0);
        case TVOS:
            return tvosCpus.get(0);
        case MACOS:
            return macosCpus.get(0);
        default:
            throw new IllegalArgumentException("Unhandled platform type " + applePlatformType);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(BooleanLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(BinaryExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				StringLiteralExpr
			)
		)
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(BooleanLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
			)
		)
		Name
	)
	(JavadocComment
	)
)

