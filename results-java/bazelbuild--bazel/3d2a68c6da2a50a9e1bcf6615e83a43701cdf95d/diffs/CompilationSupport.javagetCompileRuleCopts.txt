/**
 * Returns the copts for the compile action in the current rule context (using a combination of
 * the rule's "copts" attribute as well as the current configuration copts).
 */
protected Iterable<String> getCompileRuleCopts() {
    List<String> copts = Lists.newArrayList(Iterables.concat(objcConfiguration.getCopts(), attributes.copts()));
    for (String copt : copts) {
        if (copt.contains("-fmodules-cache-path")) {
            // Bazel decides on the cache path location.
            ruleContext.ruleWarning(MODULES_CACHE_PATH_WARNING);
        }
    }
    if (attributes.enableModules()) {
        copts.add("-fmodules");
    }
    if (copts.contains("-fmodules")) {
        // If modules are enabled, clang caches module information. If unspecified, this is a
        // system-wide cache directory, which is a problem for remote executors which may run
        // multiple actions with different source trees that can't share this cache.
        // We thus set its path to the root of the genfiles directory.
        // Unfortunately, this cache contains non-hermetic information, thus we avoid declaring it as
        // an implicit output (as outputs must be hermetic).
        String cachePath = buildConfiguration.getGenfilesFragment() + "/" + OBJC_MODULE_CACHE_DIR_NAME;
        copts.add("-fmodules-cache-path=" + cachePath);
    }
    return copts;
}||||||||/**
 * Returns the copts for the compile action in the current rule context (using a combination of
 * the rule's "copts" attribute as well as the current configuration copts).
 */
protected Iterable<String> getCompileRuleCopts() {
    List<String> copts = Stream.concat(objcConfiguration.getCopts().stream(), attributes.copts().stream()).collect(toCollection(ArrayList::new));
    for (String copt : copts) {
        if (copt.contains("-fmodules-cache-path")) {
            // Bazel decides on the cache path location.
            ruleContext.ruleWarning(MODULES_CACHE_PATH_WARNING);
        }
    }
    if (attributes.enableModules()) {
        copts.add("-fmodules");
    }
    if (copts.contains("-fmodules")) {
        // If modules are enabled, clang caches module information. If unspecified, this is a
        // system-wide cache directory, which is a problem for remote executors which may run
        // multiple actions with different source trees that can't share this cache.
        // We thus set its path to the root of the genfiles directory.
        // Unfortunately, this cache contains non-hermetic information, thus we avoid declaring it as
        // an implicit output (as outputs must be hermetic).
        String cachePath = buildConfiguration.getGenfilesFragment() + "/" + OBJC_MODULE_CACHE_DIR_NAME;
        copts.add("-fmodules-cache-path=" + cachePath);
    }
    return copts;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodReferenceExpr
								(TypeExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
						)
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

