/**
 * Performs an update of Makefile variable 'var' to value 'value' for all
 * platforms belonging to the specified 'platformSetRegexp'. Corresponds to
 * vardef. We explicitly do not support the various complex nuances of
 * Make's assignment operator.
 *
 * <p>The most recent binding for a particular variable takes precedence, even if
 * a more specific binding came earlier.
 *
 * @param varname the name of the Makefile variable;
 * @param value the string value to assign;
 * @param platformSetRegexp a set of platforms for which this variable definition
 * should take effect.  This is expressed as a regexp over gplatform
 * strings.
 */
public void update(String varname, String value, String platformSetRegexp) {
    if (varname == null || value == null || platformSetRegexp == null) {
        throw new NullPointerException();
    }
    LinkedList<Binding> bindings = env.get(varname);
    if (bindings == null) {
        bindings = new LinkedList<>();
        env.put(varname, bindings);
    }
    // push new bindings onto head of list (=> most recent binding is
    // definitive):
    bindings.addFirst(new Binding(value, platformSetRegexp));
}||||||||/**
 * Performs an update of Makefile variable 'var' to value 'value' for all
 * platforms belonging to the specified 'platformSetRegexp'. Corresponds to
 * vardef. We explicitly do not support the various complex nuances of
 * Make's assignment operator.
 *
 * <p>The most recent binding for a particular variable takes precedence, even if
 * a more specific binding came earlier.
 *
 * @param varname the name of the Makefile variable;
 * @param value the string value to assign;
 * @param platformSetRegexp a set of platforms for which this variable definition
 * should take effect.  This is expressed as a regexp over gplatform
 * strings.
 */
public void update(String varname, String value, String platformSetRegexp) {
    if (varname == null || value == null || platformSetRegexp == null) {
        throw new NullPointerException();
    }
    LinkedList<Binding> bindings = env.computeIfAbsent(varname, k -> new LinkedList<>());
    // push new bindings onto head of list (=> most recent binding is
    // definitive):
    bindings.addFirst(new Binding(value, platformSetRegexp));
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(LambdaExpr
							(ExpressionStmt
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

