    private static function installGitattributes($directory) {

        $gitattributesPath = VP_PROJECT_ROOT . '/.gitattributes';
        $gitattributes = file_get_contents($directory . '/.gitattributes.tpl');

        $gitattributesVariables = array(
            'vp-mirroring-dir' => rtrim(ltrim(PathUtils::getRelativePath(VP_PROJECT_ROOT, VERSIONPRESS_MIRRORING_DIR), '.'), '/\\')
        );
        $gitattributes = "\n" . StringUtils::fillTemplateString($gitattributesVariables, $gitattributes);

        $flag = null;
        if (is_file($gitattributesPath)) {
            $flag = FILE_APPEND;
            if (strpos(file_get_contents($gitattributesPath), 'merge=vp-ini') !== false) {
                return;
            }
        }

        file_put_contents($gitattributesPath, $gitattributes, $flag);
    }

||||||||    private static function installGitattributes($rootDir, $pluginDir, $vpdbDir) {

        $gitattributesPath = $rootDir . '/.gitattributes';
        $gitattributesContents = file_get_contents($pluginDir . '/src/Initialization/.gitattributes.tpl');

        $gitattributesVariables = array(
            'vp-mirroring-dir' => rtrim(ltrim(PathUtils::getRelativePath($rootDir, $vpdbDir), '.'), '/\\')
        );
        $gitattributesContents = "\n" . StringUtils::fillTemplateString($gitattributesVariables, $gitattributesContents);

        $appendFlag = null;
        if (is_file($gitattributesPath)) {
            $appendFlag = FILE_APPEND;
            if (strpos(file_get_contents($gitattributesPath), 'merge=vp-ini') !== false) {
                return;
            }
        }

        file_put_contents($gitattributesPath, $gitattributesContents, $appendFlag);
    }


    /**
     * Installs 'vp-ini' merge driver section into .git/config
     *
     * @param string $rootDir
     * @param string $pluginDir
     * @param string $driver
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_CONST)
                                        (AST_CONST)))
                                (SCALAR)))
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (NULL))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (SCALAR)))
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_RETURN
                                (NULL))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR))))