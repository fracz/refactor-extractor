	protected function templateFactory()
	{
		$template = new /*Nette::Application::*/Template;

		$template->component = $this;
		$template->presenter = $this;
		$template->root = Environment::getVariable('templatesDir');
		$template->baseUri = /*Nette::*/Environment::getVariable('basePath');

		$files = $this->formatTemplateLayoutFiles($this->request->getPresenterName());
		foreach ($files as $file) {
			if (is_file($template->root . '/' . $file)) {
				$template->setFile($file);
				break;
			}
		}

		return $template;
	}



	/**
	 * Formats layout template file names.
	 * @param  string
	 * @return array
	 */
||||||||	protected function templateFactory()
	{
		$template = new /*Nette::Application::*/Template;

		$template->component = $this;
		$template->presenter = $this;
		$template->baseUri = /*Nette::*/Environment::getVariable('basePath');

		$files = $this->formatTemplateLayoutFiles($this->request->getPresenterName());
		foreach ($files as $file) {
			if (is_file($file)) {
				$template->setFile($file);
				break;
			}
		}

		return $template;
	}



	/**
	 * Formats layout template file names.
	 * @param  string
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_VAR))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_BREAK
                            (NULL)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_BREAK
                            (NULL)))))))
    (AST_RETURN
        (AST_VAR)))