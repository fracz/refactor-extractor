	function test_php_compat_inet_ntop()
	{
		$adds = array(
			'127.0.0.1'                => '7f000001',
			'192.232.131.222'          => 'c0e883de',
			'255.0.0.0'                => 'ff000000',
			'255.255.255.255'          => 'ffffffff',
			'::1'                      => '00000000000000000000000000000001',
			'::101'                    => '00000000000000000000000000000101',
			'::0.1.1.1'                => '00000000000000000000000000010101',
			'2001:260:0:10::1'         => '20010260000000100000000000000001',
			'2001:0:0:260::1'          => '20010000000002600000000000000001',
			'2001::260:0:0:10:1'       => '20010000000002600000000000100001',
			'2001:5c0:1000:b::90f8'    => '200105c01000000b00000000000090f8',
			'fe80::200:4cff:fe43:172f' => 'fe8000000000000002004cfffe43172f',
			'::ffff:127.0.0.1'         => '00000000000000000000ffff7f000001',
			'::127.0.0.1'              => '0000000000000000000000007f000001',
			'::fff0:7f00:1'            => '00000000000000000000fff07f000001',
		);

		foreach ($adds as $k => $v) {
			$this->assertEqual( php_compat_inet_ntop(pack('H*', $v)), $k, $k );
			if(!Piwik_Common::isWindows())
				$this->assertEqual( @inet_ntop(pack('H*', $v)), $k, $k );
		}
	}

||||||||	function test_php_compat_inet_ntop()
	{
		$adds = array(
			'127.0.0.1'                => '7f000001',
			'192.232.131.222'          => 'c0e883de',
			'255.0.0.0'                => 'ff000000',
			'255.255.255.255'          => 'ffffffff',
			'::1'                      => '00000000000000000000000000000001',
			'::101'                    => '00000000000000000000000000000101',
			'::0.1.1.1'                => '00000000000000000000000000010101',
			'2001:260:0:10::1'         => '20010260000000100000000000000001',
			'2001:0:0:260::1'          => '20010000000002600000000000000001',
			'2001::260:0:0:10:1'       => '20010000000002600000000000100001',
			'2001:5c0:1000:b::90f8'    => '200105c01000000b00000000000090f8',
			'fe80::200:4cff:fe43:172f' => 'fe8000000000000002004cfffe43172f',
			'::ffff:127.0.0.1'         => '00000000000000000000ffff7f000001',
			'::127.0.0.1'              => '0000000000000000000000007f000001',
			'::fff0:7f00:1'            => '00000000000000000000fff07f000001',
		);

		foreach ($adds as $k => $v) {
			$this->assertEqual( php_compat_inet_ntop(pack('H*', $v)), $k, $k );
			if(!Piwik_Common::isWindows() && !Piwik_Common::isMacOS())
			{
				$this->assertEqual( @inet_ntop(pack('H*', $v)), $k, $k );
			}
		}
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))
                    (AST_VAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_STATIC_CALL))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_VAR))))))
                                (AST_VAR)
                                (AST_VAR)))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))
                    (AST_VAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_STATIC_CALL))
                        (AST_UNARY_OP
                            (AST_STATIC_CALL)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_VAR))))))
                                (AST_VAR)
                                (AST_VAR)))))))))