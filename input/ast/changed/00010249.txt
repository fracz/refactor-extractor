	public function runTestCase($testCaseFile, PHPUnit_Framework_TestListener $reporter) {
		$testCaseFileWithPath = $this->_getTestsPath() . DS . $testCaseFile;

		if (!file_exists($testCaseFileWithPath)) {
			throw new InvalidArgumentException(sprintf(__('Unable to load test file %s'), $testCaseFile));
		}

		$testSuite = $this->getTestSuite(sprintf(__('Individual test case: %s', true), $testCaseFile));
		$testSuite->addTestFile($testCaseFileWithPath);
		return $this->run($reporter);
	}

/**
 * Runs a specific group test file
 *
 * @param string $groupTestName GroupTest that you want to run.
 * @param PHPUnit_Framework_TestListener $reporter Reporter instance to use with the group test being run.
 * @throws InvalidArgumentException if it was not possible to locate the filename for $groupTestName
 * @return mixed Results of group test being run.
 */
||||||||	public function runTestCase($testCaseFile, PHPUnit_Framework_TestListener $reporter, $codeCoverage = false) {
		$testCaseFileWithPath = $this->_getTestsPath() . DS . $testCaseFile;

		if (!file_exists($testCaseFileWithPath)) {
			throw new InvalidArgumentException(sprintf(__('Unable to load test file %s'), $testCaseFile));
		}

		$testSuite = $this->getTestSuite(sprintf(__('Individual test case: %s', true), $testCaseFile));
		$testSuite->addTestFile($testCaseFileWithPath);
		return $this->run($reporter, $codeCoverage);
	}

/**
 * Runs a specific group test file
 *
 * @param string $groupTestName GroupTest that you want to run.
 * @param PHPUnit_Framework_TestListener $reporter Reporter instance to use with the group test being run.
 * @throws InvalidArgumentException if it was not possible to locate the filename for $groupTestName
 * @return mixed Results of group test being run.
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CONST)))
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CONST))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CONST)))
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)))))