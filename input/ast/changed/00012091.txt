    public static function fromInternalTypeName(
        string $type_name,
        bool $is_nullable,
        int $source
    ) : Type {

        // If this is a generic type (like int[]), return
        // a generic of internal types.
        //
        // When there's a nullability operator such as in
        // `?int[]`, it applies to the array rather than
        // the int
        if (false !== ($pos = \strrpos($type_name, '[]'))) {
            return GenericArrayType::fromElementType(
                self::fromInternalTypeName(
                    \substr($type_name, 0, $pos),
                    false,
                    $source
                ),
                $is_nullable
            );
        }

        $type_name =
            self::canonicalNameFromName($type_name);

        // TODO: Is this worth optimizing into a lookup table?
        switch (\strtolower($type_name)) {
            case 'array':
                return ArrayType::instance($is_nullable);
            case 'bool':
                return BoolType::instance($is_nullable);
            case 'callable':
                return CallableType::instance($is_nullable);
            case 'closure':
                return ClosureType::instance($is_nullable);
            case 'false':
                return FalseType::instance($is_nullable);
            case 'float':
                return FloatType::instance($is_nullable);
            case 'int':
                return IntType::instance($is_nullable);
            case 'mixed':
                return MixedType::instance($is_nullable);
            case 'null':
                return NullType::instance($is_nullable);
            case 'object':
                return ObjectType::instance($is_nullable);
            case 'resource':
                return ResourceType::instance($is_nullable);
            case 'string':
                return StringType::instance($is_nullable);
            case 'true':
                return TrueType::instance($is_nullable);
            case 'void':
                // TODO: This can't be nullable, right?
                return VoidType::instance($is_nullable);
            case 'iterable':
                return IterableType::instance($is_nullable);
            case 'static':
                return StaticType::instance($is_nullable);
        }

        \assert(
            false,
            "No internal type with name $type_name"
        );
    }

    /**
     * @param string $namespace
     * A fully qualified namespace
     *
     * @param string $type_name
     * The name of the type
     *
     * @return Type
     * A type representing the given namespace and type
     * name.
     *
     * @param bool $is_nullable
     * True if this type can be null, false if it cannot
     * be null.
     */
||||||||    public static function fromInternalTypeName(
        string $type_name,
        bool $is_nullable,
        int $source
    ) : Type {

        // If this is a generic type (like int[]), return
        // a generic of internal types.
        //
        // When there's a nullability operator such as in
        // `?int[]`, it applies to the array rather than
        // the int
        if (false !== ($pos = \strrpos($type_name, '[]'))) {
            return GenericArrayType::fromElementType(
                self::fromInternalTypeName(
                    \substr($type_name, 0, $pos),
                    false,
                    $source
                ),
                $is_nullable
            );
        }

        $type_name =
            self::canonicalNameFromName($type_name);

        // TODO: Is this worth optimizing into a lookup table?
        switch (\strtolower($type_name)) {
            case 'array':
                return ArrayType::instance($is_nullable);
            case 'bool':
                return BoolType::instance($is_nullable);
            case 'callable':
                return CallableType::instance($is_nullable);
            case 'closure':
                return ClosureType::instance($is_nullable);
            case 'false':
                return FalseType::instance($is_nullable);
            case 'float':
                return FloatType::instance($is_nullable);
            case 'int':
                return IntType::instance($is_nullable);
            case 'mixed':
                return MixedType::instance($is_nullable);
            case 'null':
                return NullType::instance($is_nullable);
            case 'object':
                return ObjectType::instance($is_nullable);
            case 'resource':
                return ResourceType::instance($is_nullable);
            case 'string':
                return StringType::instance($is_nullable);
            case 'true':
                return TrueType::instance($is_nullable);
            case 'void':
                // TODO: This can't be nullable, right?
                return VoidType::instance($is_nullable);
            case 'iterable':
                return IterableType::instance($is_nullable);
            case 'static':
                return StaticType::instance($is_nullable);
        }

        throw new \AssertionError("No internal type with name $type_name");
    }

    /**
     * @param string $namespace
     * A fully qualified namespace
     *
     * @param string $type_name
     * The name of the type
     *
     * @return Type
     * A type representing the given namespace and type
     * name.
     *
     * @param bool $is_nullable
     * True if this type can be null, false if it cannot
     * be null.
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR)))
                                    (AST_CONST)
                                    (AST_VAR)))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_SWITCH
        (AST_CALL
            (
                (AST_VAR)))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_CALL
        (
            (AST_CONST)
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR)))
                                    (AST_CONST)
                                    (AST_VAR)))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_SWITCH
        (AST_CALL
            (
                (AST_VAR)))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR))))))