    public function transform(\DOMDocument $structure, \phpDocumentor\Transformer\Transformation $transformation)
    {
        if (!class_exists('XSLTProcessor')) {
            throw new \phpDocumentor\Plugin\Core\Exception(
                'The XSL writer was unable to find your XSLTProcessor; '
                . 'please check if you have installed the PHP XSL extension'
            );
        }

        $artifact = $transformation->getTransformer()->getTarget()
        . DIRECTORY_SEPARATOR . $transformation->getArtifact();

        $xsl = new \DOMDocument();
        $xsl->load($transformation->getSourceAsPath());

        $proc = new \XSLTProcessor();
        $proc->importStyleSheet($xsl);
        if (empty($structure->documentElement)) {
            throw new \phpDocumentor\Plugin\Core\Exception(
                'Specified DOMDocument lacks documentElement, cannot transform'
            );
        }

        $proc->setParameter('', 'title', $structure->documentElement->getAttribute('title'));
        $proc->setParameter('', 'root', str_repeat('../', substr_count($transformation->getArtifact(), '/')));
        $proc->setParameter('', 'search_template', $transformation->getParameter('search', 'none'));
        $proc->setParameter('', 'version', \phpDocumentor\Application::VERSION);
        $proc->setParameter('', 'generated_datetime', date('r'));

        // check parameters for variables and add them when found
        $this->setProcessorParameters($transformation, $proc);

        // if a query is given, then apply a transformation to the artifact
        // location by replacing ($<var>} with the sluggified node-value of the
        // search result
        if ($transformation->getQuery() !== '') {
            $xpath = new \DOMXPath($transformation->getTransformer()->getSource());

            /** @var \DOMNodeList $qry */
            $qry = $xpath->query($transformation->getQuery());
            $count = $qry->length;
            foreach ($qry as $key => $element) {
                \phpDocumentor\Event\Dispatcher::getInstance()->dispatch(
                    'transformer.writer.xsl.pre',
                    \phpDocumentor\Transformer\Event\PreXslWriterEvent
                    ::createInstance($this)->setElement($element)
                    ->setProgress(array($key+1, $count))
                );

                $proc->setParameter('', $element->nodeName, $element->nodeValue);
                $file_name = $transformation->getTransformer()->generateFilename(
                    $element->nodeValue
                );

                $filename = str_replace('{$' . $element->nodeName . '}', $file_name, $artifact);
                $this->log('Processing the file: ' . $element->nodeValue . ' as ' . $filename);

                if (!file_exists(dirname($filename))) {
                    mkdir(dirname($filename), 0755, true);
                }
                $proc->transformToURI($structure, $this->getXsltUriFromFilename($filename));
            }
        } else {
            if (substr($transformation->getArtifact(), 0, 1) == '$') {
                // not a file, it must become a variable!
                $variable_name = substr($transformation->getArtifact(), 1);
                $this->xsl_variables[$variable_name]
                    = $proc->transformToXml($structure);
            } else {
                if (!file_exists(dirname($artifact))) {
                    mkdir(dirname($artifact), 0755, true);
                }
                $proc->transformToURI($structure, $this->getXsltUriFromFilename($artifact));
            }
        }
    }

    /**
     * Takes the filename and converts it into a correct URI for XSLTProcessor.
     *
     * @param string $filename
     *
     * @return string
     */
||||||||    public function transform(ProjectDescriptor $project, Transformation $transformation)
    {
        // FIXME
        return;
        if (!class_exists('XSLTProcessor')) {
            throw new \phpDocumentor\Plugin\Core\Exception(
                'The XSL writer was unable to find your XSLTProcessor; '
                . 'please check if you have installed the PHP XSL extension'
            );
        }

        $artifact = $transformation->getTransformer()->getTarget()
        . DIRECTORY_SEPARATOR . $transformation->getArtifact();

        $xsl = new \DOMDocument();
        $xsl->load($transformation->getSourceAsPath());

        $proc = new \XSLTProcessor();
        $proc->importStyleSheet($xsl);
        if (empty($structure->documentElement)) {
            throw new \phpDocumentor\Plugin\Core\Exception(
                'Specified DOMDocument lacks documentElement, cannot transform'
            );
        }

        $proc->setParameter('', 'title', $structure->documentElement->getAttribute('title'));
        $proc->setParameter('', 'root', str_repeat('../', substr_count($transformation->getArtifact(), '/')));
        $proc->setParameter('', 'search_template', $transformation->getParameter('search', 'none'));
        $proc->setParameter('', 'version', \phpDocumentor\Application::VERSION);
        $proc->setParameter('', 'generated_datetime', date('r'));

        // check parameters for variables and add them when found
        $this->setProcessorParameters($transformation, $proc);

        // if a query is given, then apply a transformation to the artifact
        // location by replacing ($<var>} with the sluggified node-value of the
        // search result
        if ($transformation->getQuery() !== '') {
            $xpath = new \DOMXPath($transformation->getTransformer()->getSource());

            /** @var \DOMNodeList $qry */
            $qry = $xpath->query($transformation->getQuery());
            $count = $qry->length;
            foreach ($qry as $key => $element) {
                \phpDocumentor\Event\Dispatcher::getInstance()->dispatch(
                    'transformer.writer.xsl.pre',
                    \phpDocumentor\Transformer\Event\PreXslWriterEvent
                    ::createInstance($this)->setElement($element)
                    ->setProgress(array($key+1, $count))
                );

                $proc->setParameter('', $element->nodeName, $element->nodeValue);
                $file_name = $transformation->getTransformer()->generateFilename(
                    $element->nodeValue
                );

                $filename = str_replace('{$' . $element->nodeName . '}', $file_name, $artifact);
                $this->log('Processing the file: ' . $element->nodeValue . ' as ' . $filename);

                if (!file_exists(dirname($filename))) {
                    mkdir(dirname($filename), 0755, true);
                }
                $proc->transformToURI($structure, $this->getXsltUriFromFilename($filename));
            }
        } else {
            if (substr($transformation->getArtifact(), 0, 1) == '$') {
                // not a file, it must become a variable!
                $variable_name = substr($transformation->getArtifact(), 1);
                $this->xsl_variables[$variable_name]
                    = $proc->transformToXml($structure);
            } else {
                if (!file_exists(dirname($artifact))) {
                    mkdir(dirname($artifact), 0755, true);
                }
                $proc->transformToURI($structure, $this->getXsltUriFromFilename($artifact));
            }
        }
    }

    /**
     * Takes the filename and converts it into a correct URI for XSLTProcessor.
     *
     * @param string $filename
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_VAR)))
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL)))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))))
                                (
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (SCALAR)
                                            (AST_CONST))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR))))))
                                    (
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (SCALAR)
                                                (AST_CONST))))))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (NULL))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL)
                            (
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_VAR)))
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL)))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))))
                                (
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (SCALAR)
                                            (AST_CONST))))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR))))))
                                    (
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (SCALAR)
                                                (AST_CONST))))))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))))))