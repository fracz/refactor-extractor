	public function removeDeny($roles = self::ALL, $resources = self::ALL, $privileges = self::ALL)
	{
		return $this->setRule(self::REMOVE, self::DENY, $roles, $resources, $privileges);
	}



	/**
	 * Performs operations on Access Control List rules.
	 *
	 * The $operation parameter may be either Permission::ADD or Permission::REMOVE, depending on whether the
	 * user wants to add or remove a rule, respectively:
	 *
	 * ADD specifics:
	 *
	 *      A rule is added that would allow one or more Roles access to [certain $privileges
	 *      upon] the specified Resource(s).
	 *
	 * REMOVE specifics:
	 *
	 *      The rule is removed only in the context of the given Roles, Resources, and privileges.
	 *      Existing rules to which the remove operation does not apply would remain in the
	 *      Access Control List.
	 *
	 * The $type parameter may be either Permission::ALLOW or Permission::DENY, depending on whether the
	 * rule is intended to allow or deny permission, respectively.
	 *
	 * If either $roles or $resources is self::ALL, then the rule applies to all Roles or all Resources,
	 * respectively. Both may be self::ALL in order to work with the default rule of the ACL.
	 *
	 * The $privileges parameter may be used to further specify that the rule applies only
	 * to certain privileges upon the Resource(s) in question. This may be specified to be a single
	 * privilege with a string, and multiple privileges may be specified as an array of strings.
	 *
	 * If $assert is provided, then its assert() method must return TRUE in order for
	 * the rule to apply. If $assert is provided with $roles, $resources, and $privileges all
	 * equal to NULL, then a rule having a type of:
	 *
	 *      ALLOW will imply a type of DENY, and
	 *
	 *      DENY will imply a type of ALLOW
	 *
	 * when the rule's assertion fails. This is because the ACL needs to provide expected
	 * behavior when an assertion upon the default ACL rule fails.
	 *
	 * @param  bool  operation
	 * @param  bool  type
	 * @param  string|array|self::ALL  roles
	 * @param  string|array|self::ALL  resources
	 * @param  string|array|self::ALL  privileges
	 * @param  IPermissionAssertion assert
	 * @throws \Exception
	 * @return Permission  provides a fluent interface
	 */
||||||||	public function removeDeny($roles = self::ALL, $resources = self::ALL, $privileges = self::ALL)
	{
		$this->setRule(FALSE, self::DENY, $roles, $resources, $privileges);
		return $this;
	}



	/**
	 * Performs operations on Access Control List rules.
	 *
	 * @param  bool  operation add?
	 * @param  bool  type
	 * @param  string|array|Permission::ALL  roles
	 * @param  string|array|Permission::ALL  resources
	 * @param  string|array|Permission::ALL  privileges
	 * @param  IPermissionAssertion assertion
	 * @throws \InvalidStateException
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))