  public function getTranslation($langcode, $strict = TRUE) {
    // If the default language is LANGUAGE_NOT_SPECIFIED, the entity is not
    // translatable, so we use LANGUAGE_DEFAULT.
    if ($langcode == LANGUAGE_DEFAULT || in_array($this->language()->langcode, array(LANGUAGE_NOT_SPECIFIED, $langcode))) {
      // No translation needed, return the entity.
      return $this;
    }
    // Check whether the language code is valid, thus is of an available
    // language.
    $languages = language_list(LANGUAGE_ALL);
    if (!isset($languages[$langcode])) {
      throw new InvalidArgumentException("Unable to get translation for the invalid language '$langcode'.");
    }
    $fields = array();
    foreach ($this->getPropertyDefinitions() as $name => $definition) {
      // Load only translatable properties in strict mode.
      if (!empty($definition['translatable']) || !$strict) {
        $fields[$name] = $this->getTranslatedField($name, $langcode);
      }
    }
    $translation_definition = array(
      'type' => 'entity_translation',
      'constraints' => array(
        'entity type' => $this->entityType(),
        'bundle' => $this->bundle(),
      ),
    );
    $translation = typed_data()->create($translation_definition, $fields, array(
      'parent' => $this,
      'name' => $langcode,
    ));
    $translation->setStrictMode($strict);
    return $translation;
  }

  /**
   * Implements TranslatableInterface::getTranslationLanguages().
   */
||||||||  public function getTranslation($langcode, $strict = TRUE) {
    // If the default language is LANGUAGE_NOT_SPECIFIED, the entity is not
    // translatable, so we use LANGUAGE_DEFAULT.
    if ($langcode == LANGUAGE_DEFAULT || in_array($this->language()->langcode, array(LANGUAGE_NOT_SPECIFIED, $langcode))) {
      // No translation needed, return the entity.
      return $this;
    }
    // Check whether the language code is valid, thus is of an available
    // language.
    $languages = language_list(LANGUAGE_ALL);
    if (!isset($languages[$langcode])) {
      throw new InvalidArgumentException("Unable to get translation for the invalid language '$langcode'.");
    }
    $fields = array();
    foreach ($this->getPropertyDefinitions() as $name => $definition) {
      // Load only translatable properties in strict mode.
      if (!empty($definition['translatable']) || !$strict) {
        $fields[$name] = $this->getTranslatedField($name, $langcode);
      }
    }
    // @todo: Add a way to get the definition of a translation to the
    // TranslatableInterface and leverage TypeDataManager::getPropertyInstance
    // also.
    $translation_definition = array(
      'type' => 'entity_translation',
      'constraints' => array(
        'entity type' => $this->entityType(),
        'bundle' => $this->bundle(),
      ),
    );
    $translation = typed_data()->create($translation_definition, $fields);
    $translation->setStrictMode($strict);
    if ($translation instanceof ContextAwareInterface) {
      $translation->setContext('@' . $langcode, $this);
    }
    return $translation;
  }

  /**
   * Implements TranslatableInterface::getTranslationLanguages().
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_UNARY_OP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_UNARY_OP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))