  protected function convertToUtf8($filename, $contents)
  {
    $encoding   = null;

    // empty files need not be converted (even worse: finfo detects them as binary!)
    if (trim($contents) === '')
    {
      return '';
    }

    // detect encoding and transform to UTF-8
    if (class_exists('finfo'))
    {
      // PHP 5.3 or PECL extension
      $flag      = defined('FILEINFO_MIME_ENCODING') ? FILEINFO_MIME_ENCODING : FILEINFO_MIME;
      $info      = new finfo();
      $encoding  = $info->file($filename, $flag);

      // Versions prior to PHP 5.3 do not support the FILEINFO_MIME_ENCODING constant; extract the encoding from the
      // FILEINFO_MIME result; wo do nto do this by default for performance reasons
      if ($flag != FILEINFO_MIME_ENCODING)
      {
        $encoding = explode('=', $encoding);
        if (count($encoding) != 2)
        {
          throw new InvalidArgumentException(
            'Mime type returned by finfo contains multiple parts separated by an equals sign, only one is expected'
          );
        }
        $encoding = $encoding[1];
      }
    } elseif(function_exists('mb_detect_encoding'))
    {
      // OR with mbstring
      $encoding = mb_detect_encoding($contents);
    } elseif(function_exists('iconv'))
    {
      // OR using iconv (performance hit)
      $this->log(
        'Neither the finfo nor the mbstring extensions are active; special character handling may '
        . 'not give the best results',
        Zend_Log::WARN
      );
      $encoding = $this->detectEncodingFallback($contents);
    } else
    {
      // or not..
      $this->log(
        'Unable to handle character encoding; finfo, mbstring and iconv extensions are not enabled',
        Zend_Log::CRIT
      );
    }

    // convert if a source encoding is found; otherwise we throw an error and have to continue using the given data
    if (($encoding !== null) && (strtolower($encoding) != 'utf-8'))
    {
      $contents = iconv($encoding, 'UTF-8', $contents);
      if ($contents === false)
      {
        $this->log(
          'Encoding of file ' . $filename . ' from ' . $encoding . ' to UTF-8 failed, please check the notice for a '
            . 'detailed error message',
          Zend_Log::EMERG
        );
      }
    }

    return $contents;
  }

  /**
   * This is a fallback mechanism; if no finfo or mbstring extension are activated this is used.
   *
   * WARNING: try to prevent this; it is assumed that this method is not fool-proof nor performing as well as the other
   * options.
   *
   * @param string $string String to detect the encoding of.
   *
   * @return string Name of the encoding to return.
   */
||||||||  protected function convertToUtf8($filename, $contents)
  {
    $encoding   = null;

    // empty files need not be converted (even worse: finfo detects them as binary!)
    if (trim($contents) === '')
    {
      return '';
    }

    // detect encoding and transform to UTF-8
    if (class_exists('finfo'))
    {
      // PHP 5.3 or PECL extension
      $flag      = defined('FILEINFO_MIME_ENCODING') ? FILEINFO_MIME_ENCODING : FILEINFO_MIME;
      $info      = new finfo();
      $encoding  = $info->file($filename, $flag);

      // Versions prior to PHP 5.3 do not support the FILEINFO_MIME_ENCODING constant; extract the encoding from the
      // FILEINFO_MIME result; wo do nto do this by default for performance reasons
      if ($flag != FILEINFO_MIME_ENCODING)
      {
        $encoding = explode('=', $encoding);
        if (count($encoding) != 2)
        {
          throw new InvalidArgumentException(
            'Mime type returned by finfo contains multiple parts separated by an equals sign, only one is expected'
          );
        }
        $encoding = $encoding[1];
      }
    } elseif(function_exists('mb_detect_encoding'))
    {
      // OR with mbstring
      $encoding = mb_detect_encoding($contents);
    } elseif(function_exists('iconv'))
    {
      // OR using iconv (performance hit)
      $this->log(
        'Neither the finfo nor the mbstring extensions are active; special character handling may '
        . 'not give the best results',
        Zend_Log::WARN
      );
      $encoding = $this->detectEncodingFallback($contents);
    } else
    {
      // or not..
      $this->log(
        'Unable to handle character encoding; finfo, mbstring and iconv extensions are not enabled',
        Zend_Log::CRIT
      );
    }

    // convert if a source encoding is found; otherwise we throw an error and have to continue using the given data
    if (($encoding !== null) && (strtolower($encoding) != 'utf-8'))
    {
      $tmp_contents = iconv($encoding, 'UTF-8', $contents);
      if ($tmp_contents === false)
      {
        $this->log(
          'Encoding of file ' . $filename . ' from ' . $encoding . ' to UTF-8 failed, please check the notice for a '
            . 'detailed error message',
          Zend_Log::EMERG
        );
      }
      else
      {
        $contents = $tmp_contents;
      }
    }

    return $contents;
  }

  /**
   * This is a fallback mechanism to detect the encoding of  a string; if no finfo or mbstring extension
   * is present then this is used.
   *
   * WARNING: try to prevent this; it is assumed that this method is not fool-proof nor performing as well as the other
   * options.
   *
   * @param string $string String to detect the encoding of.
   *
   * @return string Name of the encoding to return.
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONST)
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (SCALAR)))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONST)
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_THROW
                                            (AST_NEW
                                                (
                                                    (SCALAR)))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))