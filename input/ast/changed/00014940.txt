	function parseMedia($element, $cid=0)
	{
		// Initialize variables
		$copyfiles = array ();

		// Get the client info
		jimport('joomla.application.helper');
		$client = JApplicationHelper::getClientInfo($cid);

		if (!is_a($element, 'JSimpleXMLElement') || !count($element->children())) {
			// Either the tag does not exist or has no children therefore we return zero files processed.
			return 0;
		}

		// Get the array of file nodes to process
		$files = $element->children();
		if (count($files) == 0) {
			// No files to process
			return 0;
		}

		/*
		 * Here we set the folder we are going to copy the files to.
		 * 	Default 'media' Files are copied to the JPATH_BASE/images folder
		 */
		$folder = ($element->attributes('destination')) ? DS.$element->attributes('destination') : null;
		$destination = JPath::clean(JPATH_ROOT.DS.'media'.$folder);

		/*
		 * Here we set the folder we are going to copy the files from.
		 *
		 * Does the element have a folder attribute?
		 *
		 * If so this indicates that the files are in a subdirectory of the source
		 * folder and we should append the folder attribute to the source path when
		 * copying files.
		 */
		if ($folder = $element->attributes('folder')) {
			$source = $this->getPath('source').DS.$folder;
		} else {
			$source = $this->getPath('source');
		}

		// Process each file in the $files array (children of $tagName).
		foreach ($files as $file)
		{
			$path['src']	= $source.DS.$file->data();
			$path['dest']	= $destination.DS.$file->data();

			/*
			 * Before we can add a file to the copyfiles array we need to ensure
			 * that the folder we are copying our file to exits and if it doesn't,
			 * we need to create it.
			 */
			if (basename($path['dest']) != $path['dest']) {
				$newdir = dirname($path['dest']);

				if (!JFolder::create($newdir)) {
					JError::raiseWarning(1, 'JInstaller::install: '.JText::_('Failed to create directory').' "'.$newdir.'"');
					return false;
				}
			}

			// Add the file to the copyfiles array
			$copyfiles[] = $path;
		}

		return $this->copyFiles($copyfiles);
	}

	/**
	 * Method to parse the parameters of an extension, build the INI
	 * string for it's default parameters, and return the INI string.
	 *
	 * @access	public
	 * @return	string	INI string of parameter values
	 * @since	1.5
	 */
||||||||	function parseMedia($element, $cid=0)
	{
		// Initialize variables
		$copyfiles = array ();

		// Get the client info
		jimport('joomla.application.helper');
		$client =& JApplicationHelper::getClientInfo($cid);

		if (!is_a($element, 'JSimpleXMLElement') || !count($element->children())) {
			// Either the tag does not exist or has no children therefore we return zero files processed.
			return 0;
		}

		// Get the array of file nodes to process
		$files = $element->children();
		if (count($files) == 0) {
			// No files to process
			return 0;
		}

		/*
		 * Here we set the folder we are going to copy the files to.
		 * 	Default 'media' Files are copied to the JPATH_BASE/images folder
		 */
		$folder = ($element->attributes('destination')) ? DS.$element->attributes('destination') : null;
		$destination = JPath::clean(JPATH_ROOT.DS.'media'.$folder);

		/*
		 * Here we set the folder we are going to copy the files from.
		 *
		 * Does the element have a folder attribute?
		 *
		 * If so this indicates that the files are in a subdirectory of the source
		 * folder and we should append the folder attribute to the source path when
		 * copying files.
		 */
		if ($folder = $element->attributes('folder')) {
			$source = $this->getPath('source').DS.$folder;
		} else {
			$source = $this->getPath('source');
		}

		// Process each file in the $files array (children of $tagName).
		foreach ($files as $file)
		{
			$path['src']	= $source.DS.$file->data();
			$path['dest']	= $destination.DS.$file->data();

			/*
			 * Before we can add a file to the copyfiles array we need to ensure
			 * that the folder we are copying our file to exits and if it doesn't,
			 * we need to create it.
			 */
			if (basename($path['dest']) != $path['dest']) {
				$newdir = dirname($path['dest']);

				if (!JFolder::create($newdir)) {
					JError::raiseWarning(1, 'JInstaller::install: '.JText::_('Failed to create directory').' "'.$newdir.'"');
					return false;
				}
			}

			// Add the file to the copyfiles array
			$copyfiles[] = $path;
		}

		return $this->copyFiles($copyfiles);
	}

	/**
	 * Method to parse the parameters of an extension, build the INI
	 * string for it's default parameters, and return the INI string.
	 *
	 * @access	public
	 * @return	string	INI string of parameter values
	 * @since	1.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_BINARY_OP
                (AST_CONST)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_CONST))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_STATIC_CALL
                                                                (
                                                                    (SCALAR))))
                                                        (SCALAR))
                                                    (AST_VAR))
                                                (SCALAR))))
                                    (AST_RETURN
                                        (AST_CONST))))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_BINARY_OP
                (AST_CONST)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (AST_CONST))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (SCALAR)
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_BINARY_OP
                                                            (SCALAR)
                                                            (AST_STATIC_CALL
                                                                (
                                                                    (SCALAR))))
                                                        (SCALAR))
                                                    (AST_VAR))
                                                (SCALAR))))
                                    (AST_RETURN
                                        (AST_CONST))))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))