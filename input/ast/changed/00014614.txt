	function emailContentSend($uid)
	{
		global $mainframe;

		$db			= & $mainframe->getDBO();
		$SiteName 	= $mainframe->getCfg('sitename');
		$MailFrom 	= $mainframe->getCfg('mailfrom');
		$FromName 	= $mainframe->getCfg('fromname');
		$validate 	= JRequest::getVar( mosHash('validate'), 0, 'post' );

		if (!$validate)
		{
			header("HTTP/1.0 403 Forbidden");
			die(_NOT_AUTH);
			exit;
		}

		/*
		 * This obviously won't catch all attempts, but it does not hurt to make
		 * sure the request came from a client with a user agent string.
		 */
		if (!isset ($_SERVER['HTTP_USER_AGENT']))
		{
			header("HTTP/1.0 403 Forbidden");
			die(_NOT_AUTH);
			exit;
		}

		/*
		 * This obviously won't catch all attempts either, but we ought to check
		 * to make sure that the request was posted as well.
		 */
		if (!$_SERVER['REQUEST_METHOD'] == 'POST')
		{
			header("HTTP/1.0 403 Forbidden");
			die(_NOT_AUTH);
			exit;
		}

		// An array of e-mail headers we do not want to allow as input
		$headers = array ('Content-Type:',
						  'MIME-Version:',
						  'Content-Transfer-Encoding:',
						  'bcc:',
						  'cc:');

		// An array of the input fields to scan for injected headers
		$fields = array ('email',
						 'yourname',
						 'youremail',
						 'subject',
						 'email_copy');

		/*
		 * Here is the meat and potatoes of the header injection test.  We
		 * iterate over the array of form input and check for header strings.
		 * If we fine one, send an unauthorized header and die.
		 */
		foreach ($fields as $field)
		{
			foreach ($headers as $header)
			{
				if (strpos($_POST[$field], $header) !== false)
				{
					header("HTTP/1.0 403 Forbidden");
					die(_NOT_AUTH);
					exit;
				}
			}
		}

		/*
		 * Free up memory
		 */
		unset ($headers, $fields);

		$_Itemid 			= JApplicationHelper :: getItemid($uid, 0, 0);
		$email 				= JRequest::getVar( 'email', '', 'post' );
		$yourname 			= JRequest::getVar( 'yourname', '', 'post' );
		$youremail 			= JRequest::getVar( 'youremail', '', 'post' );
		$subject_default 	= sprintf(JText :: _('Item sent by'), $yourname);
		$subject 			= JRequest::getVar( 'subject', $subject_default, 'post' );

		if ($uid < 1 || !$email || !$youremail || (is_email($email) == false) || (is_email($youremail) == false))
		{
			JContentView :: userInputError(JText :: _('EMAIL_ERR_NOINFO'));
		}

		$query = "SELECT template" .
				"\n FROM #__templates_menu" .
				"\n WHERE client_id = 0" .
				"\n AND menuid = 0";
		$db->setQuery($query);
		$template = $db->loadResult();

		/*
		 * Build the link to send in the email
		 */
		$link = sefRelToAbs(JURL_SITE.'/index.php?option=com_content&task=view&id='.$uid.'&Itemid='.$_Itemid);

		/*
		 * Build the message to send
		 */
		$msg = sprintf(JText :: _('EMAIL_MSG'), $SiteName, $yourname, $youremail, $link);

		/*
		 * Send the email
		 */
		josMail($youremail, $yourname, $email, $subject, $msg);

		JContentView :: emailSent($email, $template);
	}

||||||||	function emailContentSend()
	{
		global $mainframe;

		$db			= & $mainframe->getDBO();
		$SiteName 	= $mainframe->getCfg('sitename');
		$MailFrom 	= $mainframe->getCfg('mailfrom');
		$FromName 	= $mainframe->getCfg('fromname');
		$uid 		= JRequest :: getVar('id', 0, '', 'int');
		$validate 	= JRequest::getVar( mosHash('validate'), 0, 'post' );

		if (!$validate)
		{
			header("HTTP/1.0 403 Forbidden");
			die(_NOT_AUTH);
			exit;
		}

		/*
		 * This obviously won't catch all attempts, but it does not hurt to make
		 * sure the request came from a client with a user agent string.
		 */
		if (!isset ($_SERVER['HTTP_USER_AGENT']))
		{
			header("HTTP/1.0 403 Forbidden");
			die(_NOT_AUTH);
			exit;
		}

		/*
		 * This obviously won't catch all attempts either, but we ought to check
		 * to make sure that the request was posted as well.
		 */
		if (!$_SERVER['REQUEST_METHOD'] == 'POST')
		{
			header("HTTP/1.0 403 Forbidden");
			die(_NOT_AUTH);
			exit;
		}

		// An array of e-mail headers we do not want to allow as input
		$headers = array ('Content-Type:',
						  'MIME-Version:',
						  'Content-Transfer-Encoding:',
						  'bcc:',
						  'cc:');

		// An array of the input fields to scan for injected headers
		$fields = array ('email',
						 'yourname',
						 'youremail',
						 'subject',
						 'email_copy');

		/*
		 * Here is the meat and potatoes of the header injection test.  We
		 * iterate over the array of form input and check for header strings.
		 * If we fine one, send an unauthorized header and die.
		 */
		foreach ($fields as $field)
		{
			foreach ($headers as $header)
			{
				if (strpos($_POST[$field], $header) !== false)
				{
					header("HTTP/1.0 403 Forbidden");
					die(_NOT_AUTH);
					exit;
				}
			}
		}

		/*
		 * Free up memory
		 */
		unset ($headers, $fields);

		$_Itemid 			= JApplicationHelper :: getItemid($uid, 0, 0);
		$email 				= JRequest::getVar( 'email', '', 'post' );
		$yourname 			= JRequest::getVar( 'yourname', '', 'post' );
		$youremail 			= JRequest::getVar( 'youremail', '', 'post' );
		$subject_default 	= sprintf(JText :: _('Item sent by'), $yourname);
		$subject 			= JRequest::getVar( 'subject', $subject_default, 'post' );

		if ($uid < 1 || !$email || !$youremail || (is_email($email) == false) || (is_email($youremail) == false))
		{
			JContentView :: userInputError(JText :: _('EMAIL_ERR_NOINFO'));
		}

		$query = "SELECT template" .
				"\n FROM #__templates_menu" .
				"\n WHERE client_id = 0" .
				"\n AND menuid = 0";
		$db->setQuery($query);
		$template = $db->loadResult();

		/*
		 * Build the link to send in the email
		 */
		$link = sefRelToAbs(JURL_SITE.'/index.php?option=com_content&task=view&id='.$uid.'&Itemid='.$_Itemid);

		/*
		 * Build the message to send
		 */
		$msg = sprintf(JText :: _('EMAIL_MSG'), $SiteName, $yourname, $youremail, $link);

		/*
		 * Send the email
		 */
		josMail($youremail, $yourname, $email, $subject, $msg);

		JContentView :: emailSent($email, $template);
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (AST_CONST))
                (AST_EXIT
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (AST_CONST))
                (AST_EXIT
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (AST_CONST))
                (AST_EXIT
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_VAR)))
                                (AST_CONST))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_EXIT
                                    (AST_CONST))
                                (AST_EXIT
                                    (NULL)))))))))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_UNARY_OP
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_CONST)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CONST)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (AST_CONST))
                (AST_EXIT
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (AST_CONST))
                (AST_EXIT
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (AST_CONST))
                (AST_EXIT
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))
                                        (AST_VAR)))
                                (AST_CONST))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_EXIT
                                    (AST_CONST))
                                (AST_EXIT
                                    (NULL)))))))))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_UNARY_OP
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_CONST)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CONST)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (SCALAR))
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))