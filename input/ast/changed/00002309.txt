	function loadAll() {


		$this->CONFIG->system_cache_loaded = false;

		$this->CONFIG->views = new \stdClass();
		$data = elgg_load_system_cache('view_locations');
		if (!is_string($data)) {
			return;
		}
		$this->CONFIG->views->locations = unserialize($data);

		$data = elgg_load_system_cache('view_types');
		if (!is_string($data)) {
			return;
		}
		$this->CONFIG->view_types = unserialize($data);

		$this->CONFIG->system_cache_loaded = true;
	}

	/**
	 * Initializes the simplecache lastcache variable and creates system cache files
	 * when appropriate.
	 *
	 * @access private
	 */
||||||||	function loadAll() {


		$this->CONFIG->system_cache_loaded = false;

		$this->CONFIG->views = new \stdClass();
		$data = $this->load('view_locations');
		if (!is_string($data)) {
			return;
		}
		$this->CONFIG->views->locations = unserialize($data);

		$data = $this->load('view_types');
		if (!is_string($data)) {
			return;
		}
		$this->CONFIG->view_types = unserialize($data);

		// don't need these for operation. Inspector can pull from cache
//		$data = $this->load('view_overrides');
//		if ($data) {
//			$data = unserialize($data);
//			_elgg_services()->views->setOverriddenLocations($data);
//		}

		$this->CONFIG->system_cache_loaded = true;
	}

	/**
	 * Initializes the simplecache lastcache variable and creates system cache files
	 * when appropriate.
	 *
	 * @access private
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST)))