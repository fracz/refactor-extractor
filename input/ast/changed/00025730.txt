  public function execute(
    HarbormasterBuild $build,
    HarbormasterBuildStep $build_step) {

    $settings = $this->getSettings();

    $parameters = array();
    $matches = array();
    $variables = $this->retrieveVariablesFromBuild($build);
    $command = $settings['command'];
    preg_match_all(
      "/\\\$\\{(?P<name>[a-z]+)\\}/",
      $command,
      $matches);
    foreach ($matches["name"] as $match) {
      $parameters[] = idx($variables, $match, "");
    }
    $command = str_replace("%", "%%", $command);
    $command = preg_replace("/\\\$\\{(?P<name>[a-z]+)\\}/", "%s", $command);

    $command = vcsprintf(
      $command,
      $parameters);

    $future = null;
    if (empty($settings['sshkey'])) {
      $future = new ExecFuture(
        'ssh -o "StrictHostKeyChecking no" -p %s %s %s',
        $settings['sshport'],
        $settings['sshuser'].'@'.$settings['sshhost'],
        $command);
    } else {
      $future = new ExecFuture(
        'ssh -o "StrictHostKeyChecking no" -p %s -i %s %s %s',
        $settings['sshport'],
        $settings['sshkey'],
        $settings['sshuser'].'@'.$settings['sshhost'],
        $command);
    }

    $log_stdout = $build->createLog($build_step, "remote", "stdout");
    $log_stderr = $build->createLog($build_step, "remote", "stderr");

    $start_stdout = $log_stdout->start();
    $start_stderr = $log_stderr->start();

    // Read the next amount of available output every second.
    while (!$future->isReady()) {
      list($stdout, $stderr) = $future->read();
      $log_stdout->append($stdout);
      $log_stderr->append($stderr);
      $future->discardBuffers();

      // Check to see if we have moved from a "Building" status.  This
      // can occur if the user cancels the build, in which case we want
      // to terminate whatever we're doing and return as quickly as possible.
      if ($build->checkForCancellation()) {
        $log_stdout->finalize($start_stdout);
        $log_stderr->finalize($start_stderr);
        $future->resolveKill();
        return;
      }

      // Wait one second before querying for more data.
      sleep(1);
    }

    // Get the return value so we can log that as well.
    list($err) = $future->resolve();

    $log_stdout->finalize($start_stdout);
    $log_stderr->finalize($start_stderr);

    if ($err) {
      $build->setBuildStatus(HarbormasterBuild::STATUS_FAILED);
    }
  }

||||||||  public function execute(
    HarbormasterBuild $build,
    HarbormasterBuildStep $build_step) {

    $settings = $this->getSettings();

    $parameters = array();
    $matches = array();
    $variables = $this->retrieveVariablesFromBuild($build);
    $command = $settings['command'];
    preg_match_all(
      "/\\\$\\{(?P<name>[a-z\.]+)\\}/",
      $command,
      $matches);
    foreach ($matches["name"] as $match) {
      $parameters[] = idx($variables, $match, "");
    }
    $command = str_replace("%", "%%", $command);
    $command = preg_replace("/\\\$\\{(?P<name>[a-z\.]+)\\}/", "%s", $command);

    $command = vcsprintf(
      $command,
      $parameters);

    $future = null;
    if (empty($settings['sshkey'])) {
      $future = new ExecFuture(
        'ssh -o "StrictHostKeyChecking no" -p %s %s %s',
        $settings['sshport'],
        $settings['sshuser'].'@'.$settings['sshhost'],
        $command);
    } else {
      $future = new ExecFuture(
        'ssh -o "StrictHostKeyChecking no" -p %s -i %s %s %s',
        $settings['sshport'],
        $settings['sshkey'],
        $settings['sshuser'].'@'.$settings['sshhost'],
        $command);
    }

    $log_stdout = $build->createLog($build_step, "remote", "stdout");
    $log_stderr = $build->createLog($build_step, "remote", "stderr");

    $start_stdout = $log_stdout->start();
    $start_stderr = $log_stderr->start();

    // Read the next amount of available output every second.
    while (!$future->isReady()) {
      list($stdout, $stderr) = $future->read();
      $log_stdout->append($stdout);
      $log_stderr->append($stderr);
      $future->discardBuffers();

      // Check to see if we have moved from a "Building" status.  This
      // can occur if the user cancels the build, in which case we want
      // to terminate whatever we're doing and return as quickly as possible.
      if ($build->checkForCancellation()) {
        $log_stdout->finalize($start_stdout);
        $log_stderr->finalize($start_stderr);
        $future->resolveKill();
        return;
      }

      // Wait one second before querying for more data.
      sleep(1);
    }

    // Get the return value so we can log that as well.
    list($err) = $future->resolve();

    // Retrieve the last few bits of information.
    list($stdout, $stderr) = $future->read();
    $log_stdout->append($stdout);
    $log_stderr->append($stderr);
    $future->discardBuffers();

    $log_stdout->finalize($start_stdout);
    $log_stderr->finalize($start_stderr);

    if ($err) {
      $build->setBuildStatus(HarbormasterBuild::STATUS_FAILED);
    }
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_RETURN
                            (NULL)))))
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_RETURN
                            (NULL)))))
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))))))