	public function shouldProcessReportsForPlugin($pluginName)
	{
		if($this->shouldProcessReportsAllPlugins($this->getSegment(), $this->period))
		{
			return true;
		}

		// Goal_* metrics are processed by the Goals plugin. (HACK)
		if(strpos($this->getRequestedReport(), 'Goal_') === 0)
		{
			return $pluginName == 'Goal';
		}

		// Returning visitors metrics are nb_visits_returning rather than VisitorInterest_nb_visits_returning (HACK)
		if(strpos($this->getRequestedReport(), '_returning') > 0)
		{
			return $pluginName == 'VisitFrequency';
		}

		// If segment, only process if the requested report belong to this plugin
		// or process all plugins if the requested report plugin couldn't be guessed
		$pluginBeingProcessed = self::getPluginBeingProcessed($this->getRequestedReport());
		return $pluginBeingProcessed == $pluginName
				|| !Piwik_PluginsManager::getInstance()->isPluginLoaded($pluginBeingProcessed)
				;
	}

	/**
	 * Init the object before launching the real archive processing
	 */
||||||||	public function shouldProcessReportsForPlugin($pluginName)
	{
		if($this->shouldProcessReportsAllPlugins($this->getSegment(), $this->period))
		{
			return true;
		}


		// If segment, only process if the requested report belong to this plugin
		// or process all plugins if the requested report plugin couldn't be guessed
		$pluginBeingProcessed = self::getPluginBeingProcessed($this->getRequestedReport());
		return $pluginBeingProcessed == $pluginName
				|| !Piwik_PluginsManager::getInstance()->isPluginLoaded($pluginBeingProcessed)
				;
	}

	/**
	 * Init the object before launching the real archive processing
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_VAR)))))))