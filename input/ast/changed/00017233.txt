    public function duplicate($project_from, $project_to)
    {
        $actionTemplate = $this->action->getAllByProject($project_from);

        foreach ($actionTemplate as $action) {

            unset($action['id']);
            $action['project_id'] = $project_to;
            $actionParams = $action['params'];
            unset($action['params']);

            if (! $this->db->table(self::TABLE)->save($action)) {
                return false;
            }

            $action_clone_id = $this->db->getConnection()->getLastId();

            foreach ($actionParams as $param) {
                unset($param['id']);
                $param['value'] = $this->resolveDuplicatedParameters($param, $project_to);
                $param['action_id'] = $action_clone_id;

                if (! $this->db->table(self::TABLE_PARAMS)->save($param)) {
                    return false;
                }
            }
        }

        // $this->container['fileCache']->remove('proxy_action_getAll');

        return true;
    }

    /**
     * Resolve type of action value from a project to the respective value in another project
     *
     * @author Antonio Rabelo
     * @param  integer    $param             An action parameter
     * @return integer    $project_to        Project to find the corresponding values
     * @return mixed                         The corresponding values from $project_to
     */
||||||||    public function duplicate($src_project_id, $dst_project_id)
    {
        $actions = $this->action->getAllByProject($src_project_id);

        foreach ($actions as $action) {

            $this->db->startTransaction();

            $values = array(
                'project_id' => $dst_project_id,
                'event_name' => $action['event_name'],
                'action_name' => $action['action_name'],
            );

            if (! $this->db->table(self::TABLE)->insert($values)) {
                $this->container['logger']->debug('Action::duplicate => unable to create '.$action['action_name']);
                $this->db->cancelTransaction();
                continue;
            }

            $action_id = $this->db->getConnection()->getLastId();

            if (! $this->duplicateParameters($dst_project_id, $action_id, $action['params'])) {
                $this->container['logger']->debug('Action::duplicate => unable to copy parameters for '.$action['action_name']);
                $this->db->cancelTransaction();
                continue;
            }

            $this->db->closeTransaction();
        }

        return true;
    }

    /**
     * Duplicate action parameters
     *
     * @access public
     * @param  integer  $project_id
     * @param  integer  $action_id
     * @param  array    $params
     * @return boolean
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (
                                (AST_VAR))))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_UNSET
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_CLASS_CONST
                                                (SCALAR))))
                                    (
                                        (AST_VAR))))
                            (
                                (AST_RETURN
                                    (AST_CONST)))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (
                                (AST_VAR))))
                    (
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CONST)))