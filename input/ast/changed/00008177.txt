	function start_el(&$output, $comment, $depth, $args) {
		$depth++;

		if ( !empty($args['callback']) ) {
			call_user_func($args['callback'], $comment, $args, $depth);
			return;
		}

		$GLOBALS['comment'] = $comment;
		extract($args, EXTR_SKIP);

		if ( 'div' == $args['style'] )
			$tag = 'div';
		else
			$tag = 'li';
?>
		<<?php echo $tag ?> "<?php comment_class() ?>" id="comment-<?php comment_ID() ?>">
		<?php if ( 'list' == $args['style'] ) : ?>
		<div id="div-comment-<?php comment_ID() ?>">
		<?php endif; ?>
		<div class="comment-author vcard">
		<?php echo get_avatar( $comment, 32 ) ?>
		<?php printf(__('<cite>%s</cite> Says:'), get_comment_author_link()) ?>
		</div>
<?php if ($comment->comment_approved == '0') : ?>
		<em><?php _e('Your comment is awaiting moderation.') ?></em>
		<br />
<?php endif; ?>

		<div class="comment-meta commentmetadata"><a href="#comment-<?php comment_ID() ?>" title=""><?php printf(__('%1$s at %2$s'), get_comment_date('F jS, Y'),  get_comment_time()) ?></a><?php edit_comment_link('edit','&nbsp;&nbsp;','') ?></div>

		<?php echo apply_filters('comment_text', get_comment_text()) ?>

		<div class='reply'>
		<?php if ( $depth < $args['depth'] ) echo comment_reply_link(array('add_below' => 'div-comment')) ?>
		<?php if ( 'list' == $args['style'] ) : ?>
		</div>
		<?php endif; ?>
		</div>
<?php
	}

||||||||	function start_el(&$output, $comment, $depth, $args) {
		$depth++;

		if ( !empty($args['callback']) ) {
			call_user_func($args['callback'], $comment, $args, $depth);
			return;
		}

		$GLOBALS['comment'] = $comment;
		extract($args, EXTR_SKIP);

		if ( 'div' == $args['style'] )
			$tag = 'div';
		else
			$tag = 'li';
?>
		<<?php echo $tag ?> <?php comment_class() ?> id="comment-<?php comment_ID() ?>">
		<?php if ( 'list' == $args['style'] ) : ?>
		<div id="div-comment-<?php comment_ID() ?>">
		<?php endif; ?>
		<div class="comment-author vcard">
		<?php echo get_avatar( $comment, 32 ) ?>
		<?php printf(__('<cite>%s</cite> Says:'), get_comment_author_link()) ?>
		</div>
<?php if ($comment->comment_approved == '0') : ?>
		<em><?php _e('Your comment is awaiting moderation.') ?></em>
		<br />
<?php endif; ?>

		<div class="comment-meta commentmetadata"><a href="#comment-<?php comment_ID() ?>" title=""><?php printf(__('%1$s at %2$s'), get_comment_date('F jS, Y'),  get_comment_time()) ?></a><?php edit_comment_link('edit','&nbsp;&nbsp;','') ?></div>

		<?php echo apply_filters('comment_text', get_comment_text()) ?>

		<div class='reply'>
		<?php if ( 0 == $args['depth'] || $depth < $args['depth'] ) echo comment_reply_link(array('add_below' => 'div-comment')) ?>
		<?php if ( 'list' == $args['style'] ) : ?>
		</div>
		<?php endif; ?>
		</div>
<?php
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_POST_INC
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL)
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_POST_INC
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL)
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL
                (
                    (SCALAR)))
            (AST_CALL)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ECHO
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR)))