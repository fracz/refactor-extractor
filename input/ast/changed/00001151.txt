	public function field_data()
	{
		$retval = $tablePrimaryKeys = array();

		while ($field = cubrid_fetch_field($this->result_id))
		{
			$F		= new stdClass();
			$F->name	= $field->name;
			$F->type	= $field->type;
			$F->default	= $field->def;
			$F->max_length	= $field->max_length;

			// At this moment primary_key property is not returned when
			// cubrid_fetch_field is called. The following code will
			// provide a patch for it. primary_key property will be added
			// in the next release.

			// TODO: later version of CUBRID will provide primary_key
			// property.
			// When PK is defined in CUBRID, an index is automatically
			// created in the db_index system table in the form of
			// pk_tblname_fieldname. So the following will count how many
			// columns are there which satisfy this format.
			// The query will search for exact single columns, thus
			// compound PK is not supported.
			$res = cubrid_query($this->conn_id,
						"SELECT COUNT(*) FROM db_index WHERE class_name = '".$field->table
						."' AND is_primary_key = 'YES' AND index_name = 'pk_".$field->table.'_'.$field->name."'"
						);

			if ($res)
			{
				$row = cubrid_fetch_array($res, CUBRID_NUM);
				$F->primary_key = ($row[0] > 0 ? 1 : NULL);
			}
			else
			{
				$F->primary_key = NULL;
			}

			if (is_resource($res))
			{
				cubrid_close_request($res);
				$this->result_id = FALSE;
			}

			$retval[] = $F;
		}

		return $retval;
	}

	// --------------------------------------------------------------------

	/**
	 * Free the result
	 *
	 * @return	void
	 */
||||||||	public function field_data()
	{
		$retval = array();
		$i = 0;

		while ($field = cubrid_fetch_field($this->result_id))
		{
			$retval[$i]			= new stdClass();
			$retval[$i]->name		= $field->name;
			// CUBRID returns type as e.g. varchar(100),
			// so we need to remove all digits and brackets.
			$retval[$i]->type		= preg_replace('/[\d()]/', '', $field->type);
			$retval[$i]->default		= $field->def;
			// Use CUBRID's native API to obtain column's max_length,
			// otherwise $field->max_length has incorrect info
			$retval[$i]->max_length		= cubrid_field_len($this->result_id, $i);
			$retval[$i++]->primary_key	= $field->primary_key;
		}

		return $retval;
	}

	// --------------------------------------------------------------------

	/**
	 * Free the result
	 *
	 * @return	void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ARRAY)))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR)))
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR))
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_CONST))))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONDITIONAL
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR)
                                (AST_CONST)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_NEW))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_DIM
                        (AST_VAR)
                        (AST_POST_INC
                            (AST_VAR))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))