	function is_vcs_checkout( $context ) {
		$context_dirs = array( untrailingslashit( $context ) );
		if ( $context !== ABSPATH )
			$context_dirs[] = untrailingslashit( ABSPATH );

		$vcs_dirs = array( '.svn', '.git', '.hg', '.bzr' );
		$check_dirs = array();

		foreach ( $context_dirs as $context_dir ) {
			// Walk up from $context_dir to the root.
			do {
				$check_dirs[] = $context_dir;
			} while ( $context_dir != dirname( $context_dir ) && $context_dir = dirname( $context_dir ) );
		}

		$check_dirs = array_unique( $check_dirs );

		// Search all directories we've found for evidence of version control.
		foreach ( $vcs_dirs as $vcs_dir ) {
			foreach ( $check_dirs as $check_dir ) {
				if ( $checkout = @is_dir( rtrim( $check_dir, '\\/' ) . "/$vcs_dir" ) )
					break 2;
			}
		}
		return apply_filters( 'automatic_updates_is_vcs_checkout', $checkout, $context );
	}

	/**
	 * Tests to see if we can and should update a specific item.
	 */
||||||||	public function is_vcs_checkout( $context ) {
		$context_dirs = array( untrailingslashit( $context ) );
		if ( $context !== ABSPATH )
			$context_dirs[] = untrailingslashit( ABSPATH );

		$vcs_dirs = array( '.svn', '.git', '.hg', '.bzr' );
		$check_dirs = array();

		foreach ( $context_dirs as $context_dir ) {
			// Walk up from $context_dir to the root.
			do {
				$check_dirs[] = $context_dir;

				// Once we've hit '/' or 'C:\', we need to stop. dirname will keep returning the input here.
				if ( $context_dir == dirname( $context_dir ) )
					break;

			// Continue one level at a time.
			} while ( $context_dir = dirname( $context_dir ) );
		}

		$check_dirs = array_unique( $check_dirs );

		// Search all directories we've found for evidence of version control.
		foreach ( $vcs_dirs as $vcs_dir ) {
			foreach ( $check_dirs as $check_dir ) {
				if ( $checkout = @is_dir( rtrim( $check_dir, '\\/' ) . "/$vcs_dir" ) )
					break 2;
			}
		}

		/**
		 * Filter whether the automatic updater should consider a filesystem location to be potentially
		 * managed by a version control system.
		 *
		 * @since 3.7.0
		 *
		 * @param bool $checkout  Whether a VCS checkout was discovered at $context or ABSPATH, or anywhere higher.
		 * @param string $context The filesystem context (a path) against which filesystem status should be checked.
		 */
		return apply_filters( 'automatic_updates_is_vcs_checkout', $checkout, $context );
	}

	/**
	 * Tests to see if we can and should update a specific item.
	 *
	 * @since 3.7.0
	 *
	 * @param string $type    The type of update being checked: 'core', 'theme', 'plugin', 'translation'.
	 * @param object $item    The update offer.
	 * @param string $context The filesystem context (a path) against which filesystem access and status
	 *                        should be checked.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (AST_VAR)))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_CALL
                        (
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_DO_WHILE
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR)))
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)))))))
                            (
                                (AST_BREAK
                                    (SCALAR)))))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CALL
                    (
                        (AST_VAR)))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_CALL
                        (
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_DO_WHILE
                (
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_VAR)
                            (NULL))
                        (AST_VAR))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR))))
                            (
                                (AST_BREAK
                                    (NULL))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (SCALAR)))
                                                (AST_ENCAPS_LIST
                                                    (SCALAR)
                                                    (AST_VAR)))))))
                            (
                                (AST_BREAK
                                    (SCALAR)))))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_VAR)))))