    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->getApplication()->setAutoExit(false);
        $this->detectMagento($output);
        if ($this->initMagento()) {
            try {
                /**
                 * Get events before cache flush command is called.
                 */
                $reflectionApp = new \ReflectionObject(\Mage::app());
                $appEventReflectionProperty = $reflectionApp->getProperty('_events');
                $appEventReflectionProperty->setAccessible(true);
                $eventsBeforeCacheFlush = $appEventReflectionProperty->getValue(\Mage::app());

                $this->getApplication()->run(new StringInput('cache:flush'), new NullOutput());

                /**
                 * Restore initially loaded events which was reset during setup script run
                 */
                $appEventReflectionProperty->setValue(\Mage::app(), $eventsBeforeCacheFlush);

                /**
                 * Put output in buffer. \Mage_Core_Model_Resource_Setup::_modifyResourceDb should print any error
                 * directly to stdout. Use execption which will be thrown to show error
                 */
                \ob_start();
                \Mage_Core_Model_Resource_Setup::applyAllUpdates();
                if (is_callable(array('\Mage_Core_Model_Resource_Setup', 'applyAllDataUpdates'))) {
                    \Mage_Core_Model_Resource_Setup::applyAllDataUpdates();
                }
                \ob_end_clean();
                $output->writeln('<info>done</info>');
            } catch (Exception $e) {
                \ob_end_clean();
                $this->printException($output, $e);
                $this->printStackTrace($output, $e->getTrace());
                $this->printFile($output, $e);

                return 1; // exit with error status
            }
        }

        return 0;
    }

    /**
     * @param OutputInterface $output
     * @param array           $trace
     *
     * @return void
     */
||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->getApplication()->setAutoExit(false);
        $this->detectMagento($output);
        if (!$this->initMagento()) {
            return;
        }

        try {
            /**
             * Get events before cache flush command is called.
             */
            $reflectionApp = new \ReflectionObject(\Mage::app());
            $appEventReflectionProperty = $reflectionApp->getProperty('_events');
            $appEventReflectionProperty->setAccessible(true);
            $eventsBeforeCacheFlush = $appEventReflectionProperty->getValue(\Mage::app());

            $this->getApplication()->run(new StringInput('cache:flush'), new NullOutput());

            /**
             * Restore initially loaded events which was reset during setup script run
             */
            $appEventReflectionProperty->setValue(\Mage::app(), $eventsBeforeCacheFlush);

            /**
             * Put output in buffer. \Mage_Core_Model_Resource_Setup::_modifyResourceDb should print any error
             * directly to stdout. Use execption which will be thrown to show error
             */
            \ob_start();
            \Mage_Core_Model_Resource_Setup::applyAllUpdates();
            if (is_callable(array('\Mage_Core_Model_Resource_Setup', 'applyAllDataUpdates'))) {
                \Mage_Core_Model_Resource_Setup::applyAllDataUpdates();
            }
            \ob_end_clean();
            $output->writeln('<info>done</info>');
        } catch (Exception $e) {
            \ob_end_clean();
            $this->printException($output, $e);
            $this->printStackTrace($output, $e->getTrace());
            $this->printFile($output, $e);

            return 1; // exit with error status
        }
    }

    /**
     * @param OutputInterface $output
     * @param array           $trace
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_STATIC_CALL))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CONST)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_STATIC_CALL))))
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_NEW
                                    (
                                        (SCALAR)))
                                (AST_NEW)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_STATIC_CALL)
                                (AST_VAR)))
                        (AST_CALL)
                        (AST_STATIC_CALL)
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (NULL)))))
                                (
                                    (AST_STATIC_CALL))))
                        (AST_CALL)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_CALL)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_RETURN
                                    (SCALAR)))))
                    (NULL)))))
    (AST_RETURN
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_STATIC_CALL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_NEW
                        (
                            (SCALAR)))
                    (AST_NEW)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_STATIC_CALL)
                    (AST_VAR)))
            (AST_CALL)
            (AST_STATIC_CALL)
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (NULL)))))
                    (
                        (AST_STATIC_CALL))))
            (AST_CALL)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_RETURN
                        (SCALAR)))))
        (NULL)))