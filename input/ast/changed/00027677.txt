    public function resolve($string)
    {
        $string = $cased = trim($string, ";\t\n\r\0\x0B");
        $string = strtolower($string);

        if(strlen($string) == 0) {
            return self::TYPE_VOID;
        }

        if(preg_match('!^\d+$!', $string)) {
            return self::TYPE_INTEGER;
        }

        if(preg_match('!^\d+\.\d+$!', $string)) {
            return self::TYPE_FLOAT;
        }

        if('null' == $string) {
            return self::TYPE_NULL;
        }

        if(preg_match('!(^\[|^array\()!', $string)) {
            return self::TYPE_ARRAY;
        }

        if(preg_match('!(^\[|^array\()!', $string)) {
            return self::TYPE_ARRAY;
        }

        if(preg_match('!^new\s*(.*)!', $string, $matches)) {
            return trim(preg_replace('!^(new\s+)!', '', $cased));
        }

        if(preg_match('!^\$this$!', $string, $matches)) {
            return self::TYPE_FLUENT_INTERFACE;
        }

        if(preg_match('!^["\']!', $string, $matches)) {
            return self::TYPE_STRING;
        }

        return self::TYPE_UNKNWON;
    }

    /**
     * Check if type is native (not for PHP, but for this resolver)
     *
     * @param $type
     * @return bool
     */
||||||||    public function resolve($string)
    {
        $string = $cased = trim($string, ";\t\n\r\0\x0B");
        $string = strtolower($string);

        if(strlen($string) == 0) {
            return self::TYPE_VOID;
        }

        if(preg_match('!^\d+$!', $string)) {
            return self::TYPE_INTEGER;
        }

        if(preg_match('!^\d+\.\d+$!', $string)) {
            return self::TYPE_FLOAT;
        }

        if('null' == $string) {
            return self::TYPE_NULL;
        }

        if(preg_match('!(^\[|^array\()!', $string)) {
            return self::TYPE_ARRAY;
        }

        if(preg_match('!^new\s+class\s+!', $string, $matches)) {
            return self::TYPE_ANONYMOUS_CLASS;
        }

        if(preg_match('!^(new\s+)(.*?)([\(;].*|$)!', $cased, $matches)) {
            return $matches[2];
        }

        if(preg_match('!^\$this$!', $string, $matches)) {
            return self::TYPE_FLUENT_INTERFACE;
        }

        if(preg_match('!^["\']!', $string, $matches)) {
            return self::TYPE_STRING;
        }

        return self::TYPE_UNKNWON;
    }

    /**
     * Check if type is native (not for PHP, but for this resolver)
     *
     * @param $type
     * @return bool
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_RETURN
        (AST_CLASS_CONST
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_RETURN
        (AST_CLASS_CONST
            (SCALAR))))