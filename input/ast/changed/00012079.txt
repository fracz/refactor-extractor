    private static function isTruthyLiteral($cond) : bool
    {
        if ($cond instanceof Node) {
            // TODO: Could look up constants and inline expressions, but doing that has low value.
            return false;
        }
        // Cast string, int, etc. literal to a bool
        return (bool)$cond;
    }

    // A break statement unconditionally breaks out of a loop/switch
||||||||    private static function isTruthyLiteral($cond) : bool
    {
        if ($cond instanceof Node) {
            // TODO: Could look up values for remaining constants and inline expressions, but doing that has low value.
            if ($cond->kind === \ast\AST_CONST) {
                $condName = $cond->children['name'];
                if ($condName->kind === \ast\AST_NAME) {
                    return \strtolower($condName->children['name']) === 'true';
                }
            }
            return false;
        }
        // Cast string, int, etc. literal to a bool
        return (bool)$cond;
    }

    // A break statement unconditionally breaks out of a loop/switch
||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CAST
            (AST_VAR))))||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (
                                        (AST_RETURN
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_DIM
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (SCALAR))))
                                                (SCALAR)))))))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CAST
            (AST_VAR))))