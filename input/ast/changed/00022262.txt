    public function get_peer_authors($musthavesubmission=true) {
        global $DB;
        static $users               = null;
        static $userswithsubmission = null;

        if (is_null($users)) {
            $context = get_context_instance(CONTEXT_MODULE, $this->cm->id);
            $users = get_users_by_capability($context, 'mod/workshop:submit',
                        'u.id, u.lastname, u.firstname', 'u.lastname,u.firstname', '', '', '', '', false, false, true);
        }

        if ($musthavesubmission && is_null($userswithsubmission)) {
            $userswithsubmission = $DB->get_records_list('workshop_submissions', 'userid', array_keys($users),'', 'userid');
            $userswithsubmission = array_intersect_key($users, $userswithsubmission);
        }

        if ($musthavesubmission) {
            return $userswithsubmission;
        } else {
            return $users;
        }
    }

    /**
     * Returns all users with the capability mod/workshop:submit sorted by groups
     *
     * This takes the module grouping settings into account. If "Available for group members only"
     * is set, returns only groups withing the course module grouping.
     *
     * @param bool $musthavesubmission If true, return only users who have already submitted. All possible authors otherwise.
     * @return array array[groupid][userid] => stdClass{->id ->lastname ->firstname}
     */
||||||||    public function get_peer_authors($musthavesubmission=true) {
        global $DB;
        static $users               = null;
        static $userswithsubmission = null;

        if (is_null($users)) {
            $context = get_context_instance(CONTEXT_MODULE, $this->cm->id);
            $users = get_users_by_capability($context, 'mod/workshop:submit',
                        'u.id, u.lastname, u.firstname', 'u.lastname,u.firstname', '', '', '', '', false, false, true);
        }

        if ($musthavesubmission && is_null($userswithsubmission)) {
            $submissions = $DB->get_records_list('workshop_submissions', 'userid', array_keys($users),'', 'id,userid');
            foreach ($submissions as $submission) {
                $userswithsubmission[$submission->userid] = null;
            }
            $userswithsubmission = array_intersect_key($users, $userswithsubmission);
        }

        if ($musthavesubmission) {
            return $userswithsubmission;
        } else {
            return $users;
        }
    }

    /**
     * Fetches all users with the capability mod/workshop:peerassess in the current context
     *
     * Static variable used to cache the results. The returned objects contain id, lastname
     * and firstname properties and are ordered by lastname,firstname
     *
     * @param bool $musthavesubmission If true, return only users who have already submitted. All possible users otherwise.
     * @see get_super_reviewers()
     * @return array array[userid] => stdClass{->id ->lastname ->firstname}
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR)
                            (SCALAR))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_CONST))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_VAR))))))