	protected function addCommandsToHistory($commands)
	{
		$this->command->line(implode(PHP_EOL, $commands));
		$commands        = (sizeof($commands) == 1) ? $commands[0] : $commands;
		$this->history[] = $commands;

		return $commands;
	}

	////////////////////////////////////////////////////////////////////
	///////////////////////////// PROCESSORS ///////////////////////////
	////////////////////////////////////////////////////////////////////

	/**
	 * Process an array of commands
	 *
	 * @param  string|array $commands
	 *
	 * @return array
	 */
||||||||	protected function addCommandsToHistory($commands)
	{
		$this->command->line(implode(PHP_EOL, $commands));
		$commands = (sizeof($commands) == 1) ? $commands[0] : $commands;
		$this->toHistory($commands);

		return $commands;
	}

	////////////////////////////////////////////////////////////////////
	///////////////////////////// PROCESSORS ///////////////////////////
	////////////////////////////////////////////////////////////////////

	/**
	 * Process an array of commands
	 *
	 * @param  string|array $commands
	 *
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CALL
                (
                    (AST_CONST)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (NULL))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CALL
                (
                    (AST_CONST)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))