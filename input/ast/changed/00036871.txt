    protected function refreshUser(TokenInterface $token)
    {
        $user = $token->getUser();
        if (!$user instanceof UserInterface) {
            return $token;
        }

        if (null !== $this->logger) {
            $this->logger->debug(sprintf('Reloading user from user provider.'));
        }

        foreach ($this->userProviders as $provider) {
            try {
                $refreshedUser = $provider->refreshUser($user);
                $token->setUser($refreshedUser);

                if (null !== $this->logger) {
                    $this->logger->debug(sprintf('Username "%s" was reloaded from user provider.', $refreshedUser->getUsername()));
                }

                return $token;
            } catch (UnsupportedUserException $unsupported) {
                // let's try the next user provider
            } catch (UsernameNotFoundException $notFound) {
                if (null !== $this->logger) {
                    $this->logger->warning(sprintf('Username "%s" could not be found.', $notFound->getUsername()));
                }

                return;
            }
        }

        throw new \RuntimeException(sprintf('There is no user provider for user "%s".', get_class($user)));
    }
}||||||||    protected function refreshUser(TokenInterface $token)
    {
        $user = $token->getUser();
        if (!$user instanceof UserInterface) {
            return $token;
        }

        foreach ($this->userProviders as $provider) {
            try {
                $refreshedUser = $provider->refreshUser($user);
                $token->setUser($refreshedUser);

                if (null !== $this->logger) {
                    $this->logger->debug('User was reloaded from a user provider.', array('username' => $refreshedUser->getUsername(), 'provider' => get_class($provider)));
                }

                return $token;
            } catch (UnsupportedUserException $unsupported) {
                // let's try the next user provider
            } catch (UsernameNotFoundException $notFound) {
                if (null !== $this->logger) {
                    $this->logger->warning('Username could not be found in the selected user provider.', array('username' => $notFound->getUsername(), 'provider' => get_class($provider)));
                }

                return;
            }
        }

        throw new \RuntimeException(sprintf('There is no user provider for user "%s".', get_class($user)));
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR))))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))))
                    (AST_RETURN
                        (AST_VAR)))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR))
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)))))))))
                            (AST_RETURN
                                (NULL)))))
                (NULL))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_TRY
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (SCALAR))))))))
                    (AST_RETURN
                        (AST_VAR)))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR))
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (SCALAR)
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (SCALAR))
                                                    (AST_ARRAY_ELEM
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)))
                                                        (SCALAR))))))))
                            (AST_RETURN
                                (NULL)))))
                (NULL))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))))))