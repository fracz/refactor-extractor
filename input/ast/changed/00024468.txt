	public function clean(array $conds = NULL)
	{
		if ($conds === NULL) $conds = array();
		$this->storage->clean($conds);
	}



	/********************* interface ::ArrayAccess ****************d*g**/



	/**
	 * Inserts (replaces) item into the cache (::ArrayAccess implementation).
	 * @param  string key
	 * @param  mixed
	 * @return void
	 * @throws ::InvalidArgumentException
	 */
||||||||	public function clean(array $conds = NULL)
	{
		$this->adjust($conds);
		$this->storage->clean($conds);
	}



	/**
	 * Update dependencies array.
	 * @param  array
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))