	private static function find_file($view=NULL, $data=NULL)
	{
		if (empty($view))
		{
			return FALSE;
		}

		$output = '';		// Stores the final output
		$view_path = '';	// Used to store the location of the file.

		if (!empty($data))
		{
			$data = (array)$data;
		}

		// If there are multiple theme locations, we need to search through all of them.
		foreach (self::$theme_paths as $path)
		{
			/*
				First, check the active theme
			*/
			if (self::$debug) { echo "[Find File] Looking for view in active theme: <b>". self::$site_path . $path .'/'. self::$active_theme . $view .'.php</b><br/>'; }

			if (!empty(self::$active_theme) && is_file(self::$site_path . $path .'/'. self::$active_theme . $view .'.php'))
			{
				if (self::$debug) { echo 'Found <b>'. $view .'</b> in Active Theme.<br/>'; }
				$view_path = self::$site_path . $path .'/'. self::$active_theme;
			}

			/*
				If not in the active theme, then try the default theme
			*/
			if (self::$debug) { echo "[Find File] Looking for view in default theme: <b>". self::$site_path . $path .'/'. self::$default_theme . $view .'.php</b><br/>'; }
			if (empty($view_path) && is_file(self::$site_path . $path .'/'. self::$default_theme . $view .'.php'))
			{
				if (self::$debug) { echo 'Found <b>'. $view .'</b> in Default Theme.<br/>'; }

				$view_path = self::$site_path . $path .'/'. self::$default_theme;
			}
		}

		// If the view was found, it's path is stored in the $view_path var. So parse or render it
		// based on user settings.
		if (!empty($view_path))
		{
			$view_path = str_replace('//', '/', $view_path);

			// Set CI's view path to point to the right location.
			//self::$ci->load->_ci_view_path = $view_path;

			if (self::$debug) { echo '[Find File] Rendering file at: '. $view_path . $view .'.php<br/><br/>'; }

			// Grab the output of the view.
			if (self::$parse_views === TRUE)
			{

				$data = array_merge((array)$data,self::$ci->load->_ci_cached_vars);
				$output = self::$ci->load->_ci_load(array('_ci_path' => $view_path . $view .'.php', '_ci_vars' => $data, '_ci_return' => TRUE));

				//Parser dies on looping, better then before but not fixed.
				//$output = self::$ci->parser->parse($view_path.$view, $data, TRUE, TRUE);
			} else
			{
				$output = self::$ci->load->_ci_load(array('_ci_path' => $view_path . $view .'.php', '_ci_vars' => $data, '_ci_return' => TRUE));
			}

			// Put CI's view path back to the original
			//self::$ci->load->_ci_view_path = self::$orig_view_path;
		}//end if

		return $output;

	}//end find_file()

	//--------------------------------------------------------------------

}//end class


//--------------------------------------------------------------------

/**
 * A shorthand method that allows views (from the current/default themes)
 * to be included in any other view.
 *
 * This function also allows for a very simple form of mobile templates. If being
 * viewed from a mobile site, it will attempt to load a file whose name is prefixed
 * with 'mobile_'. If that file is not found it will load the regular view.
 *
 * @access  public
 * @example Rendering a view named 'index', the mobile version would be 'mobile_index'.
 *
 * @param string $view          The name of the view to render.
 * @param array  $data          An array of data to pass to the view.
 * @param bool   $ignore_mobile If TRUE, will not change the view name based on mobile viewing. If FALSE, will attempt to load a file prefixed with 'mobile_'
 *
 * @return string
 */
function theme_view($view=NULL, $data=NULL, $ignore_mobile=FALSE)
{
	if (empty($view)) return '';

	$ci =& get_instance();

	$output ='';

	// If we're allowed, try to load the mobile version
	// of the file.
	if (!$ignore_mobile)
	{
		$ci->load->library('user_agent');

		if ($ci->agent->is_mobile())
		{
			Template::load_view('mobile_'. $view, $data, NULL, TRUE, $output);
		}
	}

	// If output is empty, then either no mobile file was found
	// or we weren't looking for one to begin with.
	if (empty($output))
	{
		Template::load_view($view, $data, NULL, TRUE, $output);
	}

	return $output;

}//end theme_view()

//--------------------------------------------------------------------

/**
 * A simple helper method for checking menu items against the current
 * class that is running.
 *
 * <code>
 *   <a href="<?php echo site_url(SITE_AREA . '/content'); ?>" <?php echo check_class(SITE_AREA . '/content'); ?> >
 *    Admin Home
 *  </a>
 *
 * </code>
 * @access public
 *
 * @param string $item       The name of the class to check against.
 * @param bool   $class_only If TRUE, will only return 'active'. If FALSE, will return 'class="active"'.
 *
 * @return string Either <b>class="active"</b> or an empty string.
 */
function check_class($item='', $class_only=FALSE)
{
	$ci =& get_instance();

	if (strtolower($ci->router->fetch_class()) == strtolower($item))
	{
		return $class_only ? 'active' : 'class="active"';
	}

	return '';

}//end check_class()

//--------------------------------------------------------------------

/**
 * A simple helper method for checking menu items against the current
 * class' method that is being executed (as far as the Router knows.)
 *
 * @access public
 *
 * @param string	$item		The name of the method to check against. Can be an array of names.
 * @param bool		$class_only	If TRUE, will only return 'active'. If FALSE, will return 'class="active"'.
 *
 * @return string Either <b>class="active"</b> or an empty string.
 */
function check_method($item, $class_only=FALSE)
{
	$ci =& get_instance();

	$items = array();

	if (!is_array($item))
	{
		$items[] = $item;
	}
	else
	{
		$items = $item;
	}

	if (in_array($ci->router->fetch_method(), $items))
	{
		return $class_only ? 'active' : 'class="active"';
	}

	return '';

}//end check_method()

//--------------------------------------------------------------------

/**
 * Will create a breadcrumb from either the uri->segments or
 * from a key/value paired array passed into it.
 *
 * @access public
 *
 * @param array $my_segments (optional) Array of Key/Value to make Breadcrumbs from
 * @param bool  $wrap        (boolean)  Set to TRUE to wrap in un-ordered list
 * @param bool  $echo        (boolean)  Set to TRUE to echo the output, set to FALSE to return it.
 *
 * @return string A Breadcrumb of your page structure.
 */
function breadcrumb($my_segments=NULL, $wrap=FALSE, $echo=TRUE)
{
	$ci =& get_instance();

	$output = '';

	if (!class_exists('CI_URI'))
	{
		$ci->load->library('uri');
	}


	if ( $ci->config->item('template.breadcrumb_symbol') == '' )
	{
		$seperator = '/';
	}
	else
	{
		$seperator = $ci->config->item('template.breadcrumb_symbol');
	}

	if ($wrap === TRUE)
	{
		$seperator = '<span class="divider">' . $seperator . '</span>' . PHP_EOL;
	}


	if (empty($my_segments) || !is_array($my_segments))
	{
		$segments = $ci->uri->segment_array();
		$total    = $ci->uri->total_segments();
	}
	else
	{
		$segments = $my_segments;
		$total    = count($my_segments);
	}

	$in_admin = (bool) (is_array($segments) && in_array(SITE_AREA, $segments));

	if ( $in_admin == TRUE )
	{
		$home_link = site_url(SITE_AREA);
	}
	else
	{
		$home_link = site_url();
	}

	if ($wrap === TRUE)
	{
		$output  = '<ul class="breadcrumb">' . PHP_EOL;
		$output .= '<li><a href="'.$home_link.'"><i class="icon-home">&nbsp;</i></a> '.$seperator.'</li>' . PHP_EOL;
	}
	else
	{
		$output  = '<a href="'.$home_link.'">home</a> '.$seperator;
	}

	$url = '';
	$count = 0;

	// URI BASED BREADCRUMB
	if (empty($my_segments) || !is_array($my_segments))
	{
		foreach ($segments as $segment)
		{
			$url .= '/'. $segment;
			$count += 1;

			if ($count == $total)
			{
				if ($wrap === TRUE)
				{
					$output .= '<li class="active">' . ucfirst(str_replace('_', ' ', $segment)) . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= ucfirst(str_replace('_', ' ', $segment)) . PHP_EOL;
				}
			}
			else
			{
				if ($wrap === TRUE)
				{
					$output .= '<li><a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($segment))) .'</a>' . $seperator . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= '<a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($segment))) .'</a>' . $seperator . PHP_EOL;
				}
			}
		}
	}
	else
	{
		// USER-SUPPLIED BREADCRUMB
		foreach ($my_segments as $title => $uri)
		{
			$url .= '/'. $uri;
			$count += 1;

			if ($count == $total)
			{
				if ($wrap === TRUE)
				{
					$output .= '<li class="active">' . str_replace('_', ' ', $title) . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= str_replace('_', ' ', $title);
				}

			}
			else
			{

				if ($wrap === TRUE)
				{
					$output .= '<li><a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($title))) .'</a>' . $seperator . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= '<a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($title))) .'</a>' . $seperator . PHP_EOL;
				}

			}
		}
	}

	if ($wrap === TRUE)
	{
		$output .= PHP_EOL . '</ul>' . PHP_EOL;
	}

	unset($in_admin, $seperator, $url, $wrap);

	if ($echo === TRUE)
	{
		echo $output;
		unset ($output);
	}
	else
	{
		return $output;
	}

}//end breadcrumb()

//---------------------------------------------------------------

/* End of file template.php */
/* Location: ./application/libraries/template.php */||||||||	private static function find_file($view=NULL, $data=NULL)
	{
		if (empty($view))
		{
			return FALSE;
		}

		if ( ! empty($data))
		{
			$data = (array)$data;
		}

		$output = '';		// Stores the final output
		$view_path = '';	// Used to store the location of the file.
		$active_theme_set = ! empty(self::$active_theme);	// Is the active theme set?
		$view_file = $view . '.php';	// filename for the view

		/*
		 * In most cases, self::$theme_paths will only include one location, but when it
		 * does not, the last will take precedence for the search. Previously the loop
		 * just replaced the $view_path with any files found in later paths. Instead,
		 * we will just reverse the $theme_paths array and break the loop when we find
		 * the file.
		 */
		$theme_locations = array_reverse(self::$theme_paths);

		// If there are multiple theme locations, we need to search through all of them.
		foreach ($theme_locations as $path)
		{
			$site_theme_path = self::$site_path . $path . '/';

			/*
				First, check the active theme
			*/
			$active_theme_path = $site_theme_path . self::$active_theme;
			if (self::$debug) { echo '[Find File] Looking for view in active theme: <b>' . $active_theme_path . $view_file . '</b><br/>'; }

			if ($active_theme_set && is_file($active_theme_path . $view_file))
			{
				if (self::$debug) { echo 'Found <b>' . $view . '</b> in Active Theme.<br/>'; }
				$view_path = $active_theme_path;

				// If we found the view, we should exit the loop
				break;
			}

			/*
				If not in the active theme, try the default theme.
				As long as we break the loop whenever the $view_path is set,
				we should not need to check empty($view_path) here
			*/
			$default_theme_path = $site_theme_path . self::$default_theme;
			if (self::$debug) { echo '[Find File] Looking for view in default theme: <b>' . $default_theme_path . $view_file . '</b><br/>'; }

			if (is_file($default_theme_path . $view_file))
			{
				if (self::$debug) { echo 'Found <b>' . $view . '</b> in Default Theme.<br/>'; }

				$view_path = $default_theme_path;

				// If we found the view, we should exit the loop
				break;
			}
		}

		// If the view was found, its path is stored in the $view_path var. So parse or render it
		// based on user settings.
		if ( ! empty($view_path))
		{
			$view_path = str_replace('//', '/', $view_path);

			// Set CI's view path to point to the right location.
			//self::$ci->load->_ci_view_path = $view_path;

			if (self::$debug) { echo '[Find File] Rendering file at: '. $view_path . $view_file .'<br/><br/>'; }

			// Grab the output of the view.
			if (self::$parse_views === TRUE)
			{
				$data = array_merge((array)$data, self::$ci->load->_ci_cached_vars);
				$output = self::$ci->load->_ci_load(array(
					'_ci_path' => $view_path . $view_file,
					'_ci_vars' => $data,
					'_ci_return' => TRUE,
				));

				//Parser dies on looping, better then before but not fixed.
				//$output = self::$ci->parser->parse($view_path.$view, $data, TRUE, TRUE);
			}
			else
			{
				$output = self::$ci->load->_ci_load(array(
					'_ci_path' => $view_path . $view_file,
					'_ci_vars' => $data,
					'_ci_return' => TRUE,
				));
			}

			// Put CI's view path back to the original
			//self::$ci->load->_ci_view_path = self::$orig_view_path;
		}//end if

		return $output;

	}//end find_file()

	//--------------------------------------------------------------------

}//end class


//--------------------------------------------------------------------

/**
 * A shorthand method that allows views (from the current/default themes)
 * to be included in any other view.
 *
 * This function also allows for a very simple form of mobile templates. If being
 * viewed from a mobile site, it will attempt to load a file whose name is prefixed
 * with 'mobile_'. If that file is not found it will load the regular view.
 *
 * @access  public
 * @example Rendering a view named 'index', the mobile version would be 'mobile_index'.
 *
 * @param string $view          The name of the view to render.
 * @param array  $data          An array of data to pass to the view.
 * @param bool   $ignore_mobile If TRUE, will not change the view name based on mobile viewing. If FALSE, will attempt to load a file prefixed with 'mobile_'
 *
 * @return string
 */
function theme_view($view=NULL, $data=NULL, $ignore_mobile=FALSE)
{
	if (empty($view)) return '';

	$ci =& get_instance();

	$output ='';

	// If we're allowed, try to load the mobile version of the file.
	if ( ! $ignore_mobile)
	{
		$ci->load->library('user_agent');

		if ($ci->agent->is_mobile())
		{
			Template::load_view('mobile_' . $view, $data, NULL, TRUE, $output);
		}
	}

	// If output is empty, then either no mobile file was found
	// or we weren't looking for one to begin with.
	if (empty($output))
	{
		Template::load_view($view, $data, NULL, TRUE, $output);
	}

	return $output;

}//end theme_view()

//--------------------------------------------------------------------

/**
 * A simple helper method for checking menu items against the current
 * class that is running.
 *
 * <code>
 *   <a href="<?php echo site_url(SITE_AREA . '/content'); ?>" <?php echo check_class(SITE_AREA . '/content'); ?> >
 *    Admin Home
 *  </a>
 *
 * </code>
 * @access public
 *
 * @param string $item       The name of the class to check against.
 * @param bool   $class_only If TRUE, will only return 'active'. If FALSE, will return 'class="active"'.
 *
 * @return string Either <b>class="active"</b> or an empty string.
 */
function check_class($item='', $class_only=FALSE)
{
	$ci =& get_instance();

	if (strtolower($ci->router->fetch_class()) == strtolower($item))
	{
		return $class_only ? 'active' : 'class="active"';
	}

	return '';

}//end check_class()

//--------------------------------------------------------------------

/**
 * A simple helper method for checking menu items against the current
 * class' method that is being executed (as far as the Router knows.)
 *
 * @access public
 *
 * @param string	$item		The name of the method to check against. Can be an array of names.
 * @param bool		$class_only	If TRUE, will only return 'active'. If FALSE, will return 'class="active"'.
 *
 * @return string Either <b>class="active"</b> or an empty string.
 */
function check_method($item, $class_only=FALSE)
{
	$ci =& get_instance();

	$items = array();

	if ( ! is_array($item))
	{
		$items[] = $item;
	}
	else
	{
		$items = $item;
	}

	if (in_array($ci->router->fetch_method(), $items))
	{
		return $class_only ? 'active' : 'class="active"';
	}

	return '';

}//end check_method()

//--------------------------------------------------------------------

/**
 * Will create a breadcrumb from either the uri->segments or
 * from a key/value paired array passed into it.
 *
 * @access public
 *
 * @param array $my_segments (optional) Array of Key/Value to make Breadcrumbs from
 * @param bool  $wrap        (boolean)  Set to TRUE to wrap in un-ordered list
 * @param bool  $echo        (boolean)  Set to TRUE to echo the output, set to FALSE to return it.
 *
 * @return string A Breadcrumb of your page structure.
 */
function breadcrumb($my_segments=NULL, $wrap=FALSE, $echo=TRUE)
{
	$ci =& get_instance();

	$output = '';

	if ( ! class_exists('CI_URI'))
	{
		$ci->load->library('uri');
	}


	if ( $ci->config->item('template.breadcrumb_symbol') == '' )
	{
		$separator = '/';
	}
	else
	{
		$separator = $ci->config->item('template.breadcrumb_symbol');
	}

	if ($wrap === TRUE)
	{
		$separator = '<span class="divider">' . $separator . '</span>' . PHP_EOL;
	}


	if (empty($my_segments) || ! is_array($my_segments))
	{
		$segments = $ci->uri->segment_array();
		$total    = $ci->uri->total_segments();
	}
	else
	{
		$segments = $my_segments;
		$total    = count($my_segments);
	}

	// Are we in the admin section of the site?
	if (is_array($segments) && in_array(SITE_AREA, $segments))
	{
		$home_link = site_url(SITE_AREA);
	}
	else
	{
		$home_link = site_url();
	}

	if ($wrap === TRUE)
	{
		$output  = '<ul class="breadcrumb">' . PHP_EOL;
		$output .= '<li><a href="'.$home_link.'"><i class="icon-home">&nbsp;</i></a> '.$separator.'</li>' . PHP_EOL;
	}
	else
	{
		$output  = '<a href="'.$home_link.'">home</a> '.$separator;
	}

	$url = '';
	$count = 0;

	// URI BASED BREADCRUMB
	if (empty($my_segments) || ! is_array($my_segments))
	{
		foreach ($segments as $segment)
		{
			$url .= '/' . $segment;
			$count += 1;

			if ($count == $total)
			{
				if ($wrap === TRUE)
				{
					$output .= '<li class="active">' . ucfirst(str_replace('_', ' ', $segment)) . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= ucfirst(str_replace('_', ' ', $segment)) . PHP_EOL;
				}
			}
			else
			{
				if ($wrap === TRUE)
				{
					$output .= '<li><a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($segment))) .'</a>' . $separator . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= '<a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($segment))) .'</a>' . $separator . PHP_EOL;
				}
			}
		}
	}
	else
	{
		// USER-SUPPLIED BREADCRUMB
		foreach ($my_segments as $title => $uri)
		{
			$url .= '/'. $uri;
			$count += 1;

			if ($count == $total)
			{
				if ($wrap === TRUE)
				{
					$output .= '<li class="active">' . str_replace('_', ' ', $title) . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= str_replace('_', ' ', $title);
				}

			}
			else
			{

				if ($wrap === TRUE)
				{
					$output .= '<li><a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($title))) .'</a>' . $separator . '</li>' . PHP_EOL;
				}
				else
				{
					$output .= '<a href="'. $url .'">'. str_replace('_', ' ', ucfirst(mb_strtolower($title))) .'</a>' . $separator . PHP_EOL;
				}

			}
		}
	}

	if ($wrap === TRUE)
	{
		$output .= PHP_EOL . '</ul>' . PHP_EOL;
	}

	unset($separator, $url, $wrap);

	if ($echo === TRUE)
	{
		echo $output;
		unset ($output);
	}
	else
	{
		return $output;
	}

}//end breadcrumb()

//---------------------------------------------------------------

/* End of file template.php */
/* Location: ./application/libraries/template.php */||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_PROP)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_STATIC_PROP))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_STATIC_PROP))
                                    (AST_VAR))
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_STATIC_PROP)))
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_STATIC_PROP)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_STATIC_PROP))
                                        (AST_VAR))
                                    (SCALAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_STATIC_PROP)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_STATIC_PROP))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_PROP)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_STATIC_PROP))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_STATIC_PROP))
                                    (AST_VAR))
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_STATIC_PROP)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_STATIC_PROP))
                                        (AST_VAR))
                                    (SCALAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_STATIC_PROP)
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_STATIC_PROP))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ECHO
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_PROP)
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CAST
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_STATIC_PROP))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_STATIC_PROP))
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CONST)
                                                (SCALAR))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_STATIC_PROP))
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CONST)
                                                (SCALAR))))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_EMPTY
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_PROP))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_PROP)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (AST_VAR))
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_STATIC_PROP)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_PROP)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (AST_VAR))
                                (SCALAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_STATIC_PROP)
                                (
                                    (AST_ECHO
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ECHO
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_PROP)
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CAST
                                            (AST_VAR))
                                        (AST_PROP
                                            (AST_PROP
                                                (AST_STATIC_PROP))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_STATIC_PROP))
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CONST)
                                                (SCALAR))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_STATIC_PROP))
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_CONST)
                                                (SCALAR))))))))))))
    (AST_RETURN
        (AST_VAR)))