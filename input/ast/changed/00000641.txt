    private function captureHookStat(CallResult $hookCallResult)
    {
        if (!$hookCallResult->hasException()) {
            return;
        }

        $callee = $hookCallResult->getCall()->getCallee();
        $hook = (string) $callee;
        $path = $callee->getPath();
        $exception = $hookCallResult->getException();
        $stdOut = $hookCallResult->getStdOut();

        $stat = new FailedHookStat($hook, $path, $exception, $stdOut);
        $this->statistics->registerFailedHookStat($stat);
    }

    /**
     * Prints statistics on after exercise event.
     *
     * @param Formatter $formatter
     * @param string    $eventName
     */
||||||||    private function captureHookStat(CallResult $hookCallResult)
    {
        if (!$hookCallResult->hasException()) {
            return;
        }

        $callee = $hookCallResult->getCall()->getCallee();
        $hook = (string)$callee;
        $path = $callee->getPath();
        $stdOut = $hookCallResult->getStdOut();
        $error = null;
        if ($hookCallResult->getException()) {
            $error = $this->exceptionPresenter->presentException($hookCallResult->getException());
        }

        $stat = new FailedHookStat($hook, $path, $error, $stdOut);
        $this->statistics->registerFailedHookStat($stat);
    }

    /**
     * Prints statistics on after exercise event.
     *
     * @param Formatter $formatter
     * @param string    $eventName
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))