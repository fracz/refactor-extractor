    private function __construct($filePrefix, MetadataLoaderInterface $metadataLoader, $countryCallingCodeToRegionCodeMap)
    {
        $this->metadataLoader = $metadataLoader;
        $this->countryCallingCodeToRegionCodeMap = $countryCallingCodeToRegionCodeMap;
        $this->init($filePrefix);
        self::initCapturingExtnDigits();
        self::initExtnPatterns();
        self::initAsciiDigitMappings();
        self::initExtnPattern();
        self::$PLUS_CHARS_PATTERN = "[" . self::PLUS_CHARS . "]+";
        self::$SEPARATOR_PATTERN = "[" . self::VALID_PUNCTUATION . "]+";
        self::$CAPTURING_DIGIT_PATTERN = "(" . self::DIGITS . ")";
        self::$VALID_START_CHAR_PATTERN = "[" . self::PLUS_CHARS . self::DIGITS . "]";

        self::$ALPHA_PHONE_MAPPINGS = self::$ALPHA_MAPPINGS + self::$asciiDigitMappings;

        self::$DIALLABLE_CHAR_MAPPINGS = self::$asciiDigitMappings;
        self::$DIALLABLE_CHAR_MAPPINGS[self::PLUS_SIGN] = self::PLUS_SIGN;
        self::$DIALLABLE_CHAR_MAPPINGS['*'] = '*';

        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS = array();
        // Put (lower letter -> upper letter) and (upper letter -> upper letter) mappings.
        foreach (self::$ALPHA_MAPPINGS as $c => $value) {
            self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS[strtolower($c)] = $c;
            self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS[$c] = $c;
        }
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS += self::$asciiDigitMappings;
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["-"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xEF\xBC\x8D"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x90"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x91"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x92"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x93"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x94"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x95"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x88\x92"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["/"] = "/";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xEF\xBC\x8F"] = "/";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS[" "] = " ";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE3\x80\x80"] = " ";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x81\xA0"] = " ";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["."] = ".";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xEF\xBC\x8E"] = ".";


        self::$MIN_LENGTH_PHONE_NUMBER_PATTERN = "[" . self::DIGITS . "]{" . self::MIN_LENGTH_FOR_NSN . "}";
        self::$VALID_PHONE_NUMBER = "[" . self::PLUS_CHARS . "]*(?:[" . self::VALID_PUNCTUATION . self::STAR_SIGN . "]*[" . self::DIGITS . "]){3,}[" . self::VALID_PUNCTUATION . self::STAR_SIGN . self::VALID_ALPHA . self::DIGITS . "]*";
        self::$VALID_PHONE_NUMBER_PATTERN = "%^" . self::$MIN_LENGTH_PHONE_NUMBER_PATTERN . "$|^" . self::$VALID_PHONE_NUMBER . "(?:" . self::$EXTN_PATTERNS_FOR_PARSING . ")?%" . self::REGEX_FLAGS;

        self::$UNWANTED_END_CHAR_PATTERN = "[^" . self::DIGITS . self::VALID_ALPHA . "#]+$";

        self::$MOBILE_TOKEN_MAPPINGS = array();
        self::$MOBILE_TOKEN_MAPPINGS['52'] = "1";
        self::$MOBILE_TOKEN_MAPPINGS['54'] = "9";
    }

    /**
     * Gets a {@link PhoneNumberUtil} instance to carry out international phone number formatting,
     * parsing, or validation. The instance is loaded with phone number metadata for a number of most
     * commonly used regions.
     *
     * <p>The {@link PhoneNumberUtil} is implemented as a singleton. Therefore, calling getInstance
     * multiple times will only result in one instance being created.
     *
     * @param string $baseFileLocation
     * @param array|null $countryCallingCodeToRegionCodeMap
     * @param MetadataLoaderInterface $metadataLoader
     * @return PhoneNumberUtil instance
     */
||||||||    private function __construct($filePrefix, MetadataLoaderInterface $metadataLoader, $countryCallingCodeToRegionCodeMap)
    {
        $this->metadataLoader = $metadataLoader;
        $this->countryCallingCodeToRegionCodeMap = $countryCallingCodeToRegionCodeMap;
        $this->init($filePrefix);
        self::initCapturingExtnDigits();
        self::initExtnPatterns();
        self::initExtnPattern();
        self::$PLUS_CHARS_PATTERN = "[" . self::PLUS_CHARS . "]+";
        self::$SEPARATOR_PATTERN = "[" . self::VALID_PUNCTUATION . "]+";
        self::$CAPTURING_DIGIT_PATTERN = "(" . self::DIGITS . ")";
        self::$VALID_START_CHAR_PATTERN = "[" . self::PLUS_CHARS . self::DIGITS . "]";

        self::$ALPHA_PHONE_MAPPINGS = self::$ALPHA_MAPPINGS + self::$asciiDigitMappings;

        self::$DIALLABLE_CHAR_MAPPINGS = self::$asciiDigitMappings;
        self::$DIALLABLE_CHAR_MAPPINGS[self::PLUS_SIGN] = self::PLUS_SIGN;
        self::$DIALLABLE_CHAR_MAPPINGS['*'] = '*';

        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS = array();
        // Put (lower letter -> upper letter) and (upper letter -> upper letter) mappings.
        foreach (self::$ALPHA_MAPPINGS as $c => $value) {
            self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS[strtolower($c)] = $c;
            self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS[$c] = $c;
        }
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS += self::$asciiDigitMappings;
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["-"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xEF\xBC\x8D"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x90"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x91"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x92"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x93"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x94"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x80\x95"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x88\x92"] = '-';
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["/"] = "/";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xEF\xBC\x8F"] = "/";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS[" "] = " ";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE3\x80\x80"] = " ";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xE2\x81\xA0"] = " ";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["."] = ".";
        self::$ALL_PLUS_NUMBER_GROUPING_SYMBOLS["\xEF\xBC\x8E"] = ".";


        self::$MIN_LENGTH_PHONE_NUMBER_PATTERN = "[" . self::DIGITS . "]{" . self::MIN_LENGTH_FOR_NSN . "}";
        self::$VALID_PHONE_NUMBER = "[" . self::PLUS_CHARS . "]*(?:[" . self::VALID_PUNCTUATION . self::STAR_SIGN . "]*[" . self::DIGITS . "]){3,}[" . self::VALID_PUNCTUATION . self::STAR_SIGN . self::VALID_ALPHA . self::DIGITS . "]*";
        self::$VALID_PHONE_NUMBER_PATTERN = "%^" . self::$MIN_LENGTH_PHONE_NUMBER_PATTERN . "$|^" . self::$VALID_PHONE_NUMBER . "(?:" . self::$EXTN_PATTERNS_FOR_PARSING . ")?%" . self::REGEX_FLAGS;

        self::$UNWANTED_END_CHAR_PATTERN = "[^" . self::DIGITS . self::VALID_ALPHA . "#]+$";

        self::$MOBILE_TOKEN_MAPPINGS = array();
        self::$MOBILE_TOKEN_MAPPINGS['52'] = "1";
        self::$MOBILE_TOKEN_MAPPINGS['54'] = "9";
    }

    /**
     * Gets a {@link PhoneNumberUtil} instance to carry out international phone number formatting,
     * parsing, or validation. The instance is loaded with phone number metadata for a number of most
     * commonly used regions.
     *
     * <p>The {@link PhoneNumberUtil} is implemented as a singleton. Therefore, calling getInstance
     * multiple times will only result in one instance being created.
     *
     * @param string $baseFileLocation
     * @param array|null $countryCallingCodeToRegionCodeMap
     * @param MetadataLoaderInterface $metadataLoader
     * @return PhoneNumberUtil instance
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_STATIC_PROP)
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_CLASS_CONST
                (SCALAR)))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_VAR))
            (AST_ASSIGN
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN_OP
        (AST_STATIC_PROP)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_CLASS_CONST
                                                            (SCALAR)))
                                                    (SCALAR))
                                                (AST_CLASS_CONST
                                                    (SCALAR)))
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_STATIC_PROP))
                                (SCALAR))
                            (AST_STATIC_PROP))
                        (SCALAR))
                    (AST_STATIC_PROP))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_STATIC_PROP)
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_CLASS_CONST
                (SCALAR)))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_VAR))
            (AST_ASSIGN
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN_OP
        (AST_STATIC_PROP)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_CLASS_CONST
                                                            (SCALAR)))
                                                    (SCALAR))
                                                (AST_CLASS_CONST
                                                    (SCALAR)))
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (SCALAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_STATIC_PROP))
                                (SCALAR))
                            (AST_STATIC_PROP))
                        (SCALAR))
                    (AST_STATIC_PROP))
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (SCALAR))
        (SCALAR)))