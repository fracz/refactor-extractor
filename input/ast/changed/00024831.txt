    private function validateCookieDomainAgainstUrl($cookieDomain, $url)
    {
        $host = strtolower(parse_url($url, PHP_URL_HOST));

        $hostLen = strlen($host);
        if (!$hostLen) {
            return false;
        }

        $domain = strtolower($cookieDomain);

        // Let cookie-domain be the attribute-value without the leading %x2E (".") character
        // see 5.2.3. The Domain Attribute <https://tools.ietf.org/html/rfc6265#section-5.2.3>
        if (strlen($domain) && ($domain[0] === '.')) {
            $domain = substr($domain, 1);
        }

        $domainLen = strlen($domain);

        if (!$domainLen) {
            return false;
        }

        return (
            ($host === $domain)
            || (
                ($hostLen > $domainLen)
                && (substr($host, -$domainLen) === $domain)
                && (substr($host, -$domainLen - 1, 1) === '.')
                && (ip2long($host) === false)
            )
        );
    }
}||||||||    public function validateCookieDomainAgainstUrl($cookieDomain, $siteUrl)
    {
        $siteDomain = strtolower(parse_url($siteUrl, PHP_URL_HOST));
        $siteLen    = strlen($siteDomain);

        if (0 === $siteLen) {
            return false;
        }

        $cookieDomain = strtolower($cookieDomain);
        $cookieLen    = strlen($cookieDomain);

        if (3 > $cookieLen) {
            return false;
        }

        $hasLeadingDot = $cookieDomain[0] === '.';
        if ($hasLeadingDot) {
            $cookieDomain = substr($cookieDomain, 1);
            $cookieLen    = strlen($cookieDomain);
        } elseif ($siteDomain === $cookieDomain) {
            return true;
        }

        // cookie domain must at least contain a SLD.TLD, no match or match at offset 0 for '.' invalidates
        if (!strpos($cookieDomain, '.')) {
            return false;
        }

        $suffix = substr($siteDomain, -$cookieLen);

        if ($suffix !== $cookieDomain) {
            return false;
        }

        $prefix = substr($siteDomain, 0, -$cookieLen);
        if (0 === strlen($prefix)) {
            return false;
        }

        if (substr($prefix, -1) !== '.') {
            return false;
        }

        return true;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (AST_VAR))))
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_VAR))
                                    (SCALAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_UNARY_OP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR))))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))