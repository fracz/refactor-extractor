    public function get_non_empty_children($extensions = '*') {
        if (!$this->lf->is_directory()) {
            return array();
        }

        $result = array();
        $fs = get_file_storage();

        $storedfiles = $fs->get_directory_files($this->context->id, 'course', 'legacy', 0,
                                                $this->lf->get_filepath(), false, true, "filepath, filename");
        foreach ($storedfiles as $file) {
            $extension = strtolower(pathinfo($file->get_filename(), PATHINFO_EXTENSION));
            if ($file->is_directory() || $extensions === '*' || (!empty($extension) && in_array('.'.$extension, $extensions))) {
                $fileinfo = new file_info_area_course_legacy($this->browser, $this->context, $file, $this->urlbase, $this->topvisiblename,
                                                 $this->itemidused, $this->readaccess, $this->writeaccess, false);
                if (!$file->is_directory() || $fileinfo->count_non_empty_children($extensions)) {
                    $result[] = $fileinfo;
                }
            }
        }

        return $result;
    }
}

/**
 * Represents a course category context in the tree navigated by {@link file_browser}.
 *
 * @package    core_files
 * @copyright  2008 Petr Skoda (http://skodak.org)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class file_info_area_course_section extends file_info {
    /** @var stdClass course object */
    protected $course;
    /** @var file_info_context_course course file info object */
    protected $courseinfo;

    /**
     * Constructor
     *
     * @param file_browser $browser file browser instance
     * @param stdClass $context context object
     * @param stdClass $course course object
     * @param file_info_context_course $courseinfo file info instance
     */
    public function __construct($browser, $context, $course, file_info_context_course $courseinfo) {
        parent::__construct($browser, $context);
        $this->course     = $course;
        $this->courseinfo = $courseinfo;
    }

    /**
     * Returns list of standard virtual file/directory identification.
     * The difference from stored_file parameters is that null values
     * are allowed in all fields
     *
     * @return array with keys contextid, filearea, itemid, filepath and filename
     */
    public function get_params() {
        return array('contextid' => $this->context->id,
                     'component' => 'course',
                     'filearea'  => 'section',
                     'itemid'    => null,
                     'filepath'  => null,
                     'filename'  => null);
    }

    /**
     * Returns localised visible name.
     *
     * @return string
     */
    public function get_visible_name() {
        //$format = $this->course->format;
        $sectionsname = get_string("coursesectionsummaries");

        return $sectionsname;
    }

    /**
     * Return whether or not new files or directories can be added
     *
     * @return bool
     */
    public function is_writable() {
        return false;
    }

    /**
     * Return whether or not this is a empty area
     *
     * @return bool
     */
    public function is_empty_area() {
        $fs = get_file_storage();
        return $fs->is_area_empty($this->context->id, 'course', 'section');
    }

    /**
     * Return whether or not this is a empty area
     *
     * @return bool
     */
    public function is_directory() {
        return true;
    }

    /**
     * Returns list of children.
     *
     * @return array of file_info instances
     */
    public function get_children() {
        global $DB;

        $children = array();

        $course_sections = $DB->get_records('course_sections', array('course'=>$this->course->id), 'section');
        foreach ($course_sections as $section) {
            if ($child = $this->courseinfo->get_file_info('course', 'section', $section->id, '/', '.')) {
                $children[] = $child;
            }
        }

        return $children;
    }

    /**
     * Returns the number of children which are either files matching the specified extensions
     * or folders containing at least one such file.
     *
     * NOTE: We don't need the exact number of non empty children if it is >=2
     * In this function 1 is never returned to avoid skipping the single subfolder
     *
     * @param string|array $extensions, for example '*' or array('.gif','.jpg')
     * @return int
     */
    public function count_non_empty_children($extensions = '*') {
        global $DB;
        $params1 = array(
            'courseid' => $this->course->id,
            'contextid' => $this->context->id,
            'component' => 'course',
            'filearea' => 'section',
            'emptyfilename' => '.');
        $sql1 = "SELECT 1 from {files} f, {course_sections} cs
            WHERE cs.course = :courseid
            AND f.contextid = :contextid
            AND f.component = :component
            AND f.filearea = :filearea
            AND f.itemid = cs.id
            AND f.filename <> :emptyfilename";
        list($sql2, $params2) = $this->build_search_files_sql($extensions);
        return $DB->record_exists_sql($sql1.' '.$sql2, array_merge($params1, $params2)) ? 2 : 0;
    }

    /**
     * Returns parent file_info instance
     *
     * @return file_info|null file_info or null for root
     */
    public function get_parent() {
        return $this->courseinfo;
    }
}


/**
 * Implementation of course section backup area
 *
 * @package    core_files
 * @copyright  2008 Petr Skoda (http://skodak.org)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class file_info_area_backup_section extends file_info {
    /** @var stdClass course object */
    protected $course;
    /** @var file_info_context_course course file info object */
    protected $courseinfo;

    /**
     * Constructor
     *
     * @param file_browser $browser file browser instance
     * @param stdClass $context context object
     * @param stdClass $course course object
     * @param file_info_context_course $courseinfo file info instance
     */
    public function __construct($browser, $context, $course, file_info_context_course $courseinfo) {
        parent::__construct($browser, $context);
        $this->course     = $course;
        $this->courseinfo = $courseinfo;
    }

    /**
     * Returns list of standard virtual file/directory identification.
     * The difference from stored_file parameters is that null values
     * are allowed in all fields
     *
     * @return array with keys contextid, component, filearea, itemid, filepath and filename
     */
    public function get_params() {
        return array('contextid' => $this->context->id,
                     'component' => 'backup',
                     'filearea'  => 'section',
                     'itemid'    => null,
                     'filepath'  => null,
                     'filename'  => null);
    }

    /**
     * Returns localised visible name.
     *
     * @return string
     */
    public function get_visible_name() {
        return get_string('sectionbackup', 'repository');
    }

    /**
     * Return whether or not new files and directories can be added
     *
     * @return bool
     */
    public function is_writable() {
        return false;
    }

    /**
     * Whether or not this is an empty area
     *
     * @return bool
     */
    public function is_empty_area() {
        $fs = get_file_storage();
        return $fs->is_area_empty($this->context->id, 'backup', 'section');
    }

    /**
     * Return whether or not this is a directory
     *
     * @return bool
     */
    public function is_directory() {
        return true;
    }

    /**
     * Returns list of children.
     *
     * @return array of file_info instances
     */
    public function get_children() {
        global $DB;

        $children = array();

        $course_sections = $DB->get_records('course_sections', array('course'=>$this->course->id), 'section');
        foreach ($course_sections as $section) {
            if ($child = $this->courseinfo->get_file_info('backup', 'section', $section->id, '/', '.')) {
                $children[] = $child;
            }
        }

        return $children;
    }

    /**
     * Returns the number of children which are either files matching the specified extensions
     * or folders containing at least one such file.
     *
     * NOTE: We don't need the exact number of non empty children if it is >=2
     * In this function 1 is never returned to avoid skipping the single subfolder
     *
     * @param string|array $extensions, for example '*' or array('.gif','.jpg')
     * @return int
     */
    public function count_non_empty_children($extensions = '*') {
        global $DB;
        $params1 = array(
            'courseid' => $this->course->id,
            'contextid' => $this->context->id,
            'component' => 'backup',
            'filearea' => 'section',
            'emptyfilename' => '.');
        $sql1 = "SELECT 1 from {files} f, {course_sections} cs
            WHERE cs.course = :courseid
            AND f.contextid = :contextid
            AND f.component = :component
            AND f.filearea = :filearea
            AND f.itemid = cs.id
            AND f.filename <> :emptyfilename";
        list($sql2, $params2) = $this->build_search_files_sql($extensions);
        return $DB->record_exists_sql($sql1.' '.$sql2, array_merge($params1, $params2)) ? 2 : 0;
    }

    /**
     * Returns parent file_info instance
     *
     * @return file_info or null for root
     */
    public function get_parent() {
        return $this->browser->get_file_info($this->context);
    }
}||||||||    public function get_non_empty_children($extensions = '*') {
        if (!$this->lf->is_directory()) {
            return array();
        }

        $result = array();
        $fs = get_file_storage();

        $storedfiles = $fs->get_directory_files($this->context->id, 'course', 'legacy', 0,
                                                $this->lf->get_filepath(), false, true, "filepath, filename");
        foreach ($storedfiles as $file) {
            $extension = textlib::strtolower(pathinfo($file->get_filename(), PATHINFO_EXTENSION));
            if ($file->is_directory() || $extensions === '*' || (!empty($extension) && in_array('.'.$extension, $extensions))) {
                $fileinfo = new file_info_area_course_legacy($this->browser, $this->context, $file, $this->urlbase, $this->topvisiblename,
                                                 $this->itemidused, $this->readaccess, $this->writeaccess, false);
                if (!$file->is_directory() || $fileinfo->count_non_empty_children($extensions)) {
                    $result[] = $fileinfo;
                }
            }
        }

        return $result;
    }
}

/**
 * Represents a course category context in the tree navigated by {@link file_browser}.
 *
 * @package    core_files
 * @copyright  2008 Petr Skoda (http://skodak.org)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class file_info_area_course_section extends file_info {
    /** @var stdClass course object */
    protected $course;
    /** @var file_info_context_course course file info object */
    protected $courseinfo;

    /**
     * Constructor
     *
     * @param file_browser $browser file browser instance
     * @param stdClass $context context object
     * @param stdClass $course course object
     * @param file_info_context_course $courseinfo file info instance
     */
    public function __construct($browser, $context, $course, file_info_context_course $courseinfo) {
        parent::__construct($browser, $context);
        $this->course     = $course;
        $this->courseinfo = $courseinfo;
    }

    /**
     * Returns list of standard virtual file/directory identification.
     * The difference from stored_file parameters is that null values
     * are allowed in all fields
     *
     * @return array with keys contextid, filearea, itemid, filepath and filename
     */
    public function get_params() {
        return array('contextid' => $this->context->id,
                     'component' => 'course',
                     'filearea'  => 'section',
                     'itemid'    => null,
                     'filepath'  => null,
                     'filename'  => null);
    }

    /**
     * Returns localised visible name.
     *
     * @return string
     */
    public function get_visible_name() {
        //$format = $this->course->format;
        $sectionsname = get_string("coursesectionsummaries");

        return $sectionsname;
    }

    /**
     * Return whether or not new files or directories can be added
     *
     * @return bool
     */
    public function is_writable() {
        return false;
    }

    /**
     * Return whether or not this is a empty area
     *
     * @return bool
     */
    public function is_empty_area() {
        $fs = get_file_storage();
        return $fs->is_area_empty($this->context->id, 'course', 'section');
    }

    /**
     * Return whether or not this is a empty area
     *
     * @return bool
     */
    public function is_directory() {
        return true;
    }

    /**
     * Returns list of children.
     *
     * @return array of file_info instances
     */
    public function get_children() {
        global $DB;

        $children = array();

        $course_sections = $DB->get_records('course_sections', array('course'=>$this->course->id), 'section');
        foreach ($course_sections as $section) {
            if ($child = $this->courseinfo->get_file_info('course', 'section', $section->id, '/', '.')) {
                $children[] = $child;
            }
        }

        return $children;
    }

    /**
     * Returns the number of children which are either files matching the specified extensions
     * or folders containing at least one such file.
     *
     * @param string|array $extensions, for example '*' or array('.gif','.jpg')
     * @param int $limit stop counting after at least $limit non-empty children are found
     * @return int
     */
    public function count_non_empty_children($extensions = '*', $limit = 1) {
        global $DB;
        $params1 = array(
            'courseid' => $this->course->id,
            'contextid' => $this->context->id,
            'component' => 'course',
            'filearea' => 'section',
            'emptyfilename' => '.');
        $sql1 = "SELECT DISTINCT cs.id FROM {files} f, {course_sections} cs
            WHERE cs.course = :courseid
            AND f.contextid = :contextid
            AND f.component = :component
            AND f.filearea = :filearea
            AND f.itemid = cs.id
            AND f.filename <> :emptyfilename";
        list($sql2, $params2) = $this->build_search_files_sql($extensions);
        $rs = $DB->get_recordset_sql($sql1. ' '. $sql2, array_merge($params1, $params2));
        $cnt = 0;
        foreach ($rs as $record) {
            if ((++$cnt) >= $limit) {
                break;
            }
        }
        $rs->close();
        return $cnt;
    }

    /**
     * Returns parent file_info instance
     *
     * @return file_info|null file_info or null for root
     */
    public function get_parent() {
        return $this->courseinfo;
    }
}


/**
 * Implementation of course section backup area
 *
 * @package    core_files
 * @copyright  2008 Petr Skoda (http://skodak.org)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class file_info_area_backup_section extends file_info {
    /** @var stdClass course object */
    protected $course;
    /** @var file_info_context_course course file info object */
    protected $courseinfo;

    /**
     * Constructor
     *
     * @param file_browser $browser file browser instance
     * @param stdClass $context context object
     * @param stdClass $course course object
     * @param file_info_context_course $courseinfo file info instance
     */
    public function __construct($browser, $context, $course, file_info_context_course $courseinfo) {
        parent::__construct($browser, $context);
        $this->course     = $course;
        $this->courseinfo = $courseinfo;
    }

    /**
     * Returns list of standard virtual file/directory identification.
     * The difference from stored_file parameters is that null values
     * are allowed in all fields
     *
     * @return array with keys contextid, component, filearea, itemid, filepath and filename
     */
    public function get_params() {
        return array('contextid' => $this->context->id,
                     'component' => 'backup',
                     'filearea'  => 'section',
                     'itemid'    => null,
                     'filepath'  => null,
                     'filename'  => null);
    }

    /**
     * Returns localised visible name.
     *
     * @return string
     */
    public function get_visible_name() {
        return get_string('sectionbackup', 'repository');
    }

    /**
     * Return whether or not new files and directories can be added
     *
     * @return bool
     */
    public function is_writable() {
        return false;
    }

    /**
     * Whether or not this is an empty area
     *
     * @return bool
     */
    public function is_empty_area() {
        $fs = get_file_storage();
        return $fs->is_area_empty($this->context->id, 'backup', 'section');
    }

    /**
     * Return whether or not this is a directory
     *
     * @return bool
     */
    public function is_directory() {
        return true;
    }

    /**
     * Returns list of children.
     *
     * @return array of file_info instances
     */
    public function get_children() {
        global $DB;

        $children = array();

        $course_sections = $DB->get_records('course_sections', array('course'=>$this->course->id), 'section');
        foreach ($course_sections as $section) {
            if ($child = $this->courseinfo->get_file_info('backup', 'section', $section->id, '/', '.')) {
                $children[] = $child;
            }
        }

        return $children;
    }

    /**
     * Returns the number of children which are either files matching the specified extensions
     * or folders containing at least one such file.
     *
     * @param string|array $extensions, for example '*' or array('.gif','.jpg')
     * @param int $limit stop counting after at least $limit non-empty children are found
     * @return int
     */
    public function count_non_empty_children($extensions = '*', $limit = 1) {
        global $DB;
        $params1 = array(
            'courseid' => $this->course->id,
            'contextid' => $this->context->id,
            'component' => 'backup',
            'filearea' => 'section',
            'emptyfilename' => '.');
        $sql1 = "SELECT DISTINCT cs.id sectionid FROM {files} f, {course_sections} cs
            WHERE cs.course = :courseid
            AND f.contextid = :contextid
            AND f.component = :component
            AND f.filearea = :filearea
            AND f.itemid = cs.id
            AND f.filename <> :emptyfilename";
        list($sql2, $params2) = $this->build_search_files_sql($extensions);
        $rs = $DB->get_recordset_sql($sql1. ' '. $sql2, array_merge($params1, $params2));
        $cnt = 0;
        foreach ($rs as $record) {
            if ((++$cnt) >= $limit) {
                break;
            }
        }
        $rs->close();
        return $cnt;
    }

    /**
     * Returns parent file_info instance
     *
     * @return file_info or null for root
     */
    public function get_parent() {
        return $this->browser->get_file_info($this->context);
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_CONST)
                (AST_CONST)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CONST))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_EMPTY
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (AST_CONST)
                (AST_CONST)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_CONST))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_EMPTY
                                    (AST_VAR)))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_VAR))
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_VAR)))