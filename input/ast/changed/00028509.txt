    public function assertEquals($expected, $actual, $delta = 0, $canonicalize = FALSE, $ignoreCase = FALSE, array &$processed = array())
    {
        if ($canonicalize) {
            sort($expected);
            sort($actual);
        }

        $remaining = $actual;
        $expString = $actString = "Array (\n";
        $equal = TRUE;

        foreach ($expected as $key => $value) {
            unset($remaining[$key]);

            if (!array_key_exists($key, $actual)) {
                $expString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  PHPUnit_Util_Type::shortenedExport($value)
                );
                $equal = FALSE;
                continue;
            }

            try {
                self::getInstance($value, $actual[$key])->assertEquals($value, $actual[$key], $delta, $canonicalize, $ignoreCase, $processed);
                $expString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  PHPUnit_Util_Type::shortenedExport($value)
                );
                $actString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  PHPUnit_Util_Type::shortenedExport($actual[$key])
                );
            }

            catch (PHPUnit_Framework_ComparisonFailure $e) {
                $expString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  $e->getExpectedAsString()
                    ? $this->indent($e->getExpectedAsString())
                    : PHPUnit_Util_Type::shortenedExport($e->getExpected())
                );
                $actString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  $e->getActualAsString()
                    ? $this->indent($e->getActualAsString())
                    : PHPUnit_Util_Type::shortenedExport($e->getActual())
                );
                $equal = FALSE;
            }
        }

        foreach ($remaining as $key => $value) {
            $actString .= sprintf(
              "    %s => %s\n",

              PHPUnit_Util_Type::export($key),
              PHPUnit_Util_Type::shortenedExport($value)
            );
            $equal = FALSE;
        }

        $expString .= ')';
        $actString .= ')';

        if (!$equal) {
            throw new PHPUnit_Framework_ComparisonFailure(
              $expected,
              $actual,
              $expString,
              $actString,
              FALSE,
             'Failed asserting that two arrays are equal.'
            );
        }
    }

||||||||    public function assertEquals($expected, $actual, $delta = 0, $canonicalize = FALSE, $ignoreCase = FALSE, array &$processed = array())
    {
        if ($canonicalize) {
            sort($expected);
            sort($actual);
        }

        $remaining = $actual;
        $expString = $actString = "Array (\n";
        $equal = TRUE;

        foreach ($expected as $key => $value) {
            unset($remaining[$key]);

            if (!array_key_exists($key, $actual)) {
                $expString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  PHPUnit_Util_Type::shortenedExport($value)
                );
                $equal = FALSE;
                continue;
            }

            try {
                $this->factory->getComparatorFor($value, $actual[$key])->assertEquals($value, $actual[$key], $delta, $canonicalize, $ignoreCase, $processed);
                $expString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  PHPUnit_Util_Type::shortenedExport($value)
                );
                $actString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  PHPUnit_Util_Type::shortenedExport($actual[$key])
                );
            }

            catch (PHPUnit_Framework_ComparisonFailure $e) {
                $expString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  $e->getExpectedAsString()
                    ? $this->indent($e->getExpectedAsString())
                    : PHPUnit_Util_Type::shortenedExport($e->getExpected())
                );
                $actString .= sprintf(
                  "    %s => %s\n",

                  PHPUnit_Util_Type::export($key),
                  $e->getActualAsString()
                    ? $this->indent($e->getActualAsString())
                    : PHPUnit_Util_Type::shortenedExport($e->getActual())
                );
                $equal = FALSE;
            }
        }

        foreach ($remaining as $key => $value) {
            $actString .= sprintf(
              "    %s => %s\n",

              PHPUnit_Util_Type::export($key),
              PHPUnit_Util_Type::shortenedExport($value)
            );
            $equal = FALSE;
        }

        $expString .= ')';
        $actString .= ')';

        if (!$equal) {
            throw new PHPUnit_Framework_ComparisonFailure(
              $expected,
              $actual,
              $expString,
              $actString,
              FALSE,
             'Failed asserting that two arrays are equal.'
            );
        }
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_TRY
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (AST_STATIC_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST)))))
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)
                            (SCALAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_TRY
                (
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))
                        (
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))
                                (AST_STATIC_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR))))))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))
                                        (AST_CONDITIONAL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONST)))))
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST)
                            (SCALAR))))))))