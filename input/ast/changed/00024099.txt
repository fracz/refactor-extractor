	public function __construct($file)
	{
		if (!self::isAvailable()) {
			throw new \NotSupportedException("SQLite or SQLite3 extension is required for storing tags and priorities.");
		}

		$initialized = file_exists($file);
		$this->database = extension_loaded('sqlite3') ? new \SQLite3($file) : new SQLiteMimic($file);
		if (!$initialized) {
			$this->database->exec(
				'CREATE TABLE cache (entry VARCHAR NOT NULL, priority INTEGER, tag VARCHAR); '
				. 'CREATE INDEX IDX_ENTRY ON cache (entry); '
				. 'CREATE INDEX IDX_PRI ON cache (priority); '
				. 'CREATE INDEX IDX_TAG ON cache (tag);'
			);
		}
	}



	/**
	 * Writes entry information into the journal.
	 * @param  string $key
	 * @param  array  $dependencies
	 * @return bool
	 */
||||||||	public function __construct($file)
	{
		if (!self::isAvailable()) {
			throw new \NotSupportedException("SQLite or SQLite3 extension is required for storing tags and priorities.");
		}

		$this->database = extension_loaded('sqlite3') ? new \SQLite3($file) : new SQLiteMimic($file);
		@$this->database->exec( // simulates IGNORE IF EXISTS (available since SQLite3 )
			'CREATE TABLE cache (entry VARCHAR NOT NULL, priority INTEGER, tag VARCHAR); '
			. 'CREATE INDEX IDX_ENTRY ON cache (entry); '
			. 'CREATE INDEX IDX_PRI ON cache (priority); '
			. 'CREATE INDEX IDX_TAG ON cache (tag);'
		);
	}



	/**
	 * Writes entry information into the journal.
	 * @param  string $key
	 * @param  array  $dependencies
	 * @return bool
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)))
            (AST_NEW
                (
                    (AST_VAR)))
            (AST_NEW
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (SCALAR))
                                (SCALAR))
                            (SCALAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (SCALAR)))
            (AST_NEW
                (
                    (AST_VAR)))
            (AST_NEW
                (
                    (AST_VAR)))))
    (AST_UNARY_OP
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (SCALAR))
                        (SCALAR))
                    (SCALAR))))))