    public function addDirectory($path)
    {
        // if the given is not a directory, skip it
        if (!is_dir($path)) {
            throw new InvalidArgumentException('Expected the path to a folder but received: '.var_export($path, true));
        }

        // get all files recursively to the files array
        $files_iterator = new RecursiveDirectoryIterator($path);

        // add the CATCH_GET_CHILD option to make sure that an unreadable directory does not halt process but
        // skip that folder
        $recursive_iterator = new RecursiveIteratorIterator(
            $files_iterator, RecursiveIteratorIterator::LEAVES_ONLY, RecursiveIteratorIterator::CATCH_GET_CHILD
        );

        /** @var SplFileInfo $file */
        foreach ($recursive_iterator as $file) {
            // skipping dots (should any be encountered)
            if (($file->getFilename() == '.') || ($file->getFilename() == '..')) {
                continue;
            }

            $this->addFile($file->getRealPath());
        }
    }

||||||||    public function addDirectory($path)
    {
        // if the given is not a directory, skip it
        if (!is_dir($path)) {
            throw new InvalidArgumentException('Expected the path to a folder but received: '.var_export($path, true));
        }

        // get all files recursively to the files array
        $files_iterator = new RecursiveDirectoryIterator($path);

        // add the CATCH_GET_CHILD option to make sure that an unreadable directory does not halt process but
        // skip that folder
        $recursive_iterator = new RecursiveIteratorIterator(
            $files_iterator, RecursiveIteratorIterator::LEAVES_ONLY, RecursiveIteratorIterator::CATCH_GET_CHILD
        );

        /** @var SplFileInfo $file */
        foreach ($recursive_iterator as $file) {
            // skipping dots (should any be encountered)
            if (($file->getFilename() == '.') || ($file->getFilename() == '..')) {
                continue;
            }

            // Phar files return false on a call to getRealPath
            $this->addFile(
                (substr($file->getPathname(), 0, 7) != 'phar://')
                    ? $file->getRealPath()
                    : $file->getPathname()
            );
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))))