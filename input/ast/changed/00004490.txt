	public function getStream($stream)
	{
		if ($stream === NULL) {
			return null;
		}

		$streamData = '';

		if ($this->props[$stream]['size'] < self::SMALL_BLOCK_THRESHOLD) {
			$rootdata = $this->_readData($this->props[$this->rootentry]['startBlock']);

			$block = $this->props[$stream]['startBlock'];

			while ($block != -2) {
	  			$pos = $block * self::SMALL_BLOCK_SIZE;
				$streamData .= substr($rootdata, $pos, self::SMALL_BLOCK_SIZE);

				$block = $this->smallBlockChain[$block];
			}

			return $streamData;
		} else {
			$numBlocks = $this->props[$stream]['size'] / self::BIG_BLOCK_SIZE;
			if ($this->props[$stream]['size'] % self::BIG_BLOCK_SIZE != 0) {
				++$numBlocks;
			}

			if ($numBlocks == 0) return '';

			$block = $this->props[$stream]['startBlock'];

			while ($block != -2) {
				$pos = ($block + 1) * self::BIG_BLOCK_SIZE;
				$streamData .= substr($this->data, $pos, self::BIG_BLOCK_SIZE);
				$block = $this->bigBlockChain[$block];
			}

			return $streamData;
		}
	}

	/**
	 * Read a standard stream (by joining sectors using information from SAT)
	 *
	 * @param int $bl Sector ID where the stream starts
	 * @return string Data for standard stream
	 */
||||||||	public function getStream($stream)
	{
		if ($stream === NULL) {
			return null;
		}

		$streamData = '';

		if ($this->props[$stream]['size'] < self::SMALL_BLOCK_THRESHOLD) {
			$rootdata = $this->_readData($this->props[$this->rootentry]['startBlock']);

			$block = $this->props[$stream]['startBlock'];

			while ($block != -2) {
	  			$pos = $block * self::SMALL_BLOCK_SIZE;
				$streamData .= substr($rootdata, $pos, self::SMALL_BLOCK_SIZE);

//				$block = $this->smallBlockChain[$block];
//				$block = unpack('l', substr($this->smallBlockChain, $block*4, 4));
//				$block = $block[1];
				$block = self::_GetInt4d($this->smallBlockChain, $block*4);
			}

			return $streamData;
		} else {
			$numBlocks = $this->props[$stream]['size'] / self::BIG_BLOCK_SIZE;
			if ($this->props[$stream]['size'] % self::BIG_BLOCK_SIZE != 0) {
				++$numBlocks;
			}

			if ($numBlocks == 0) return '';

			$block = $this->props[$stream]['startBlock'];

			while ($block != -2) {
				$pos = ($block + 1) * self::BIG_BLOCK_SIZE;
				$streamData .= substr($this->data, $pos, self::BIG_BLOCK_SIZE);
//				$block = $this->bigBlockChain[$block];
//				$block = unpack('l', substr($this->bigBlockChain, $block*4, 4));
//				$block = $block[1];
				$block = self::_GetInt4d($this->bigBlockChain, $block*4);
			}

			return $streamData;
		}
	}

	/**
	 * Read a standard stream (by joining sectors using information from SAT)
	 *
	 * @param int $bl Sector ID where the stream starts
	 * @return string Data for standard stream
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_PRE_INC
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_RETURN
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))))
                (AST_RETURN
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (SCALAR))
                        (
                            (AST_PRE_INC
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_RETURN
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_WHILE
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_VAR))))))