    private function can_skip(file_info $fileinfo, $extensions, $parent = -1) {
        global $CFG;
        static $skipcategories = null;
        if (!$fileinfo->is_directory()) {
            // do not skip files
            return false;
        }
        if ($fileinfo instanceof file_info_context_coursecat) {
            // This is a course category. For non-admins we do not display categories
            return empty($CFG->navshowmycoursecategories) &&
                            !has_capability('moodle/course:update', context_system::instance());
        } else if ($fileinfo instanceof file_info_context_course ||
                $fileinfo instanceof file_info_context_user ||
                $fileinfo instanceof file_info_area_course_legacy ||
                $fileinfo instanceof file_info_context_module ||
                $fileinfo instanceof file_info_context_system) {
            // these instances can never be filearea inside an activity, they will never be skipped
            return false;
        } else {
            $params = $fileinfo->get_params();
            if (strlen($params['filearea']) &&
                    ($params['filepath'] === '/' || empty($params['filepath'])) &&
                    ($params['filename'] === '.' || empty($params['filename']))) {
                if ($parent === -1) {
                    $parent = $fileinfo->get_parent();
                }
                // This is a filearea inside an activity, it can be skipped if it has no non-empty siblings
                if ($parent && ($parent instanceof file_info_context_module)) {
                    if ($parent->count_non_empty_children($extensions) <= 1) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * Converts file_info object to element of repository return list
     *
     * @param file_info $fileinfo
     * @return array
     */
||||||||    private function can_skip(file_info $fileinfo, $extensions, $parent = -1) {
        global $CFG;
        if (!$fileinfo->is_directory()) {
            // do not skip files
            return false;
        }
        if ($fileinfo instanceof file_info_context_coursecat) {
            // This is a course category. For non-admins we do not display categories
            return empty($CFG->navshowmycoursecategories) &&
                            !has_capability('moodle/course:update', context_system::instance());
        } else if ($fileinfo instanceof file_info_context_course ||
                $fileinfo instanceof file_info_context_user ||
                $fileinfo instanceof file_info_area_course_legacy ||
                $fileinfo instanceof file_info_context_module ||
                $fileinfo instanceof file_info_context_system) {
            // these instances can never be filearea inside an activity, they will never be skipped
            return false;
        } else {
            $params = $fileinfo->get_params();
            if (strlen($params['filearea']) &&
                    ($params['filepath'] === '/' || empty($params['filepath'])) &&
                    ($params['filename'] === '.' || empty($params['filename'])) &&
                    context::instance_by_id($params['contextid'])->contextlevel == CONTEXT_MODULE) {
                if ($parent === -1) {
                    $parent = $fileinfo->get_parent();
                }
                // This is a filearea inside an activity, it can be skipped if it has no non-empty siblings
                if ($parent && ($parent instanceof file_info_context_module)) {
                    if ($parent->count_non_empty_children($extensions, 2) <= 1) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * Converts file_info object to element of repository return list
     *
     * @param file_info $fileinfo
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_STATIC_CALL))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_INSTANCEOF
                                            (AST_VAR))
                                        (AST_INSTANCEOF
                                            (AST_VAR)))
                                    (AST_INSTANCEOF
                                        (AST_VAR)))
                                (AST_INSTANCEOF
                                    (AST_VAR)))
                            (AST_INSTANCEOF
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR))))
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (SCALAR))
                                                (AST_EMPTY
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))
                                                (SCALAR))
                                            (AST_EMPTY
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR)))))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_UNARY_OP
                                                        (SCALAR)))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_INSTANCEOF
                                                        (AST_VAR)))
                                                (
                                                    (AST_IF
                                                        (AST_IF_ELEM
                                                            (AST_BINARY_OP
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR)
                                                                    (
                                                                        (AST_VAR)))
                                                                (SCALAR))
                                                            (
                                                                (AST_RETURN
                                                                    (AST_CONST)))))))))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR)))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_STATIC_CALL))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_INSTANCEOF
                                            (AST_VAR))
                                        (AST_INSTANCEOF
                                            (AST_VAR)))
                                    (AST_INSTANCEOF
                                        (AST_VAR)))
                                (AST_INSTANCEOF
                                    (AST_VAR)))
                            (AST_INSTANCEOF
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_DIM
                                                            (AST_VAR)
                                                            (SCALAR))))
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_DIM
                                                            (AST_VAR)
                                                            (SCALAR))
                                                        (SCALAR))
                                                    (AST_EMPTY
                                                        (AST_DIM
                                                            (AST_VAR)
                                                            (SCALAR)))))
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (SCALAR))
                                                (AST_EMPTY
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_STATIC_CALL
                                                    (
                                                        (AST_DIM
                                                            (AST_VAR)
                                                            (SCALAR)))))
                                            (AST_CONST)))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_UNARY_OP
                                                        (SCALAR)))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))))))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (AST_INSTANCEOF
                                                        (AST_VAR)))
                                                (
                                                    (AST_IF
                                                        (AST_IF_ELEM
                                                            (AST_BINARY_OP
                                                                (AST_METHOD_CALL
                                                                    (AST_VAR)
                                                                    (
                                                                        (AST_VAR)
                                                                        (SCALAR)))
                                                                (SCALAR))
                                                            (
                                                                (AST_RETURN
                                                                    (AST_CONST)))))))))))))))))
    (AST_RETURN
        (AST_CONST)))