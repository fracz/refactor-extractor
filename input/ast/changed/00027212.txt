    public function addDirectory($path)
    {
        $result = substr($path, 0, 7) !== 'phar://' ? glob($path) : array($path);
        if ($result === false) {
            throw new phpDocumentor_Parser_Exception(
                '"'.$path . '" does not match an existing directory pattern'
            );
        }

        // if the given path is the only one AND there are no registered files.
        // then use this as project root instead of the calculated version.
        // This will make sure than when a _single_ path is given, that the
        // root will not inadvertently skip to a higher location because no
        // file were found in the given location.
        // i.e. if only path `src` us given and no PHP files reside there, but
        // they do reside in `src/php` then with this code `src` will remain
        // root so that ignore statements work as expected. Without this the
        // root would be `src/php`, which is unexpected when only a single folder
        // is provided.
        if ((count($result) == 1) && (empty($this->files))) {
            $this->project_root = realpath(reset($result));
        } else {
            $this->project_root = null;
        }

        foreach ($result as $result_path) {
            // if the given is not a directory or is hidden and must be ignored,
            // skip it
            if (!is_dir($result_path)) {
                continue;
            }

            // add the CATCH_GET_CHILD option to make sure that an unreadable
            // directory does not halt process but skip that folder
            $recursive_iterator = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator($result_path,
                    $this->getFollowSymlinks()
                        ? RecursiveDirectoryIterator::FOLLOW_SYMLINKS : 0
                ),
                RecursiveIteratorIterator::LEAVES_ONLY,
                RecursiveIteratorIterator::CATCH_GET_CHILD
            );

            /** @var SplFileInfo $file */
            foreach ($recursive_iterator as $file) {
                $is_hidden = ((substr($file->getPath(), 0, 1) == '.')
                    || (strpos($file->getPath(), DIRECTORY_SEPARATOR.'.')
                        !== false));

                // skipping dots (should any be encountered) or skipping
                // files starting with a dot if IgnoreHidden is true
                if (($file->getFilename() == '.')
                    || ($file->getFilename() == '..')
                    || ($this->getIgnoreHidden() && $is_hidden)
                ) {
                    continue;
                }

                // Phar files return false on a call to getRealPath
                $this->addFile(
                    (substr($file->getPathname(), 0, 7) != 'phar://')
                    ? $file->getRealPath()
                    : $file->getPathname()
                );
            }
        }
    }

    /**
     * Adds a list of individual files to the collection.
     *
     * @param array $paths File locations, may be absolute, relative or even phar.
     *
     * @return void
     */
||||||||    public function addDirectory($path)
    {
        $this->finder->in($path);
    }

    /**
     * Adds a list of individual files to the collection.
     *
     * @param array $paths File locations, may be absolute, relative or even phar.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR))
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_CONDITIONAL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (SCALAR))))
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_BINARY_OP
                                            (AST_CONST)
                                            (SCALAR))))
                                (AST_CONST))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR)))
                                (AST_BINARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_VAR)))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CONDITIONAL
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR)
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))