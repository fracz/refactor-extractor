  protected function getParameterValue(AphrontRequest $request, $key) {
    $value = $request->getStrList($key);
    if ($value) {
      return head($value);
    }

    // NOTE: At least for now, we'll attempt to read a direct upload if we
    // miss on a PHID. Currently, PHUIFormFileControl does a client-side
    // upload on workflow forms (which is good) but doesn't have a hook for
    // non-workflow forms (which isn't as good). Giving it a hook is desirable,
    // but complicated. Even if we do hook it, it may be reasonable to keep
    // this code around as a fallback if the client-side JS goes awry.

    $file_key = $this->getFileKey($key);
    if (!$request->getFileExists($file_key)) {
      return null;
    }

    $viewer = $this->getViewer();
    $file = PhabricatorFile::newFromPHPUpload(
      idx($_FILES, $file_key),
      array(
        'authorPHID' => $viewer->getPHID(),
        'viewPolicy' => PhabricatorPolicies::POLICY_NOONE,
      ));
    return $file->getPHID();
  }

||||||||  protected function getParameterValue(AphrontRequest $request, $key) {
    $value = $request->getStrList($key);
    if ($value) {
      return head($value);
    }

    // NOTE: At least for now, we'll attempt to read a direct upload if we
    // miss on a PHID. Currently, PHUIFormFileControl does a client-side
    // upload on workflow forms (which is good) but doesn't have a hook for
    // non-workflow forms (which isn't as good). Giving it a hook is desirable,
    // but complicated. Even if we do hook it, it may be reasonable to keep
    // this code around as a fallback if the client-side JS goes awry.

    $file_key = $this->getFileKey($key);
    $default_key = $this->getDefaultKey($key);
    if (!$request->getFileExists($file_key)) {
      return $request->getStr($default_key);
    }

    $viewer = $this->getViewer();
    $file = PhabricatorFile::newFromPHPUpload(
      idx($_FILES, $file_key),
      array(
        'authorPHID' => $viewer->getPHID(),
        'viewPolicy' => PhabricatorPolicies::POLICY_NOONE,
      ));
    return $file->getPHID();
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))