	protected function get_plugin_meta() {
		/**
		 * Ensure get_plugins() function is available.
		 */
		include_once( ABSPATH . '/wp-admin/includes/plugin.php' );

		$plugins     = get_plugins();
		$git_plugins = array();

		foreach ( (array) $plugins as $plugin => $headers ) {
			if ( empty( $headers['GitHub Plugin URI'] ) &&
				empty( $headers['Bitbucket Plugin URI'] )
			) {
				continue;
			}

			$git_repo = $this->get_local_plugin_meta( $headers );

			$git_repo['slug']                    = $plugin;
			$plugin_data                         = get_plugin_data( WP_PLUGIN_DIR . '/' . $git_repo['slug'] );
			$git_repo['author']                  = $plugin_data['AuthorName'];
			$git_repo['name']                    = $plugin_data['Name'];
			$git_repo['local_version']           = strtolower( $plugin_data['Version'] );
			$git_repo['sections']['description'] = $plugin_data['Description'];
			$git_plugins[ $git_repo['repo'] ]    = (object) $git_repo;
		}

		return $git_plugins;
	}

	/**
	* Parse extra headers to determine repo type and populate info
	*
	* @param array - extra headers
	* @return array - repo information
	*
	* parse_url( ..., PHP_URL_PATH ) is either clever enough to handle the short url format
	* (in addition to the long url format), or it's coincidentally returning all of the short
	* URL string, which is what we want anyway.
	*
	*/
||||||||	protected function get_plugin_meta() {
		/**
		 * Ensure get_plugins() function is available.
		 */
		include_once( ABSPATH . '/wp-admin/includes/plugin.php' );

		$plugins     = get_plugins();
		$git_plugins = array();

		foreach ( (array) $plugins as $plugin => $headers ) {
			if ( empty( $headers['GitHub Plugin URI'] ) &&
			     empty( $headers['Bitbucket Plugin URI'] ) &&
			     empty( $headers['GitLab Plugin URI'] )
			) {
				continue;
			}

			$git_repo = $this->get_local_plugin_meta( $headers );

			$git_repo['slug']                    = $plugin;
			$plugin_data                         = get_plugin_data( WP_PLUGIN_DIR . '/' . $git_repo['slug'] );
			$git_repo['author']                  = $plugin_data['AuthorName'];
			$git_repo['name']                    = $plugin_data['Name'];
			$git_repo['local_version']           = strtolower( $plugin_data['Version'] );
			$git_repo['sections']['description'] = $plugin_data['Description'];
			$git_plugins[ $git_repo['repo'] ]    = (object) $git_repo;
		}

		return $git_plugins;
	}

	/**
	* Parse extra headers to determine repo type and populate info
	*
	* @param array - extra headers
	* @return array - repo information
	*
	* parse_url( ..., PHP_URL_PATH ) is either clever enough to handle the short url format
	* (in addition to the long url format), or it's coincidentally returning all of the short
	* URL string, which is what we want anyway.
	*
	*/
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_CAST
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_EMPTY
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_CAST
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_CAST
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_EMPTY
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_EMPTY
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_CAST
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))