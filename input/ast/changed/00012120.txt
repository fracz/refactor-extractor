    public function asUnionType() : UnionType
    {
        return new UnionType([$this]);
    }

    /**
     * @return FQSEN
     * A fully-qualified structural element name derived
     * from this type
     */
||||||||    public function asUnionType() : UnionType
    {
        $object_id = \runkit_object_id($this);
        $types_set = self::$singleton_map[$object_id] ?? null;
        if ($types_set === null) {
            $types_set = [$object_id => $this];  // same as ArraySet::singleton, but why bother recomputing object id.
            self::$singleton_map[$object_id] = $types_set;
        }
        // var_export($types_set);
        /**
        if (!ArraySet::is_array_set($types_set)) {
            printf("Assertion failed: %s %s %d %s %s %s\n", $this, json_encode($this instanceof StringType), $object_id, $old_hash, spl_object_hash($this), var_export($types_set, true));
            debug_zval_dump([self::$singleton_map[$object_id], $types_set]);
            debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
        }
         */
        // return new UnionType([$this]);
        // Memoize the set of types. The constructed UnionType object can be modified later, so it isn't memoized.
        // TODO: Figure out why this is buggy
        return new UnionType($types_set, true);
    }

    /**
     * @return FQSEN
     * A fully-qualified structural element name derived
     * from this type
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_RETURN
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_STATIC_PROP)
                (AST_VAR))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)
                (AST_CONST)))))