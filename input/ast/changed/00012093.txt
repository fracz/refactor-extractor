    public function analyze(Context $context, CodeBase $code_base) : Context
    {
        // Don't do anything if we care about being
        // fast
        if (Config::get()->quick_mode) {
            return $context;
        }

        if (!$this->hasNode()) {
            return $context;
        }

        // Closures depend on the context surrounding them such
        // as for getting `use(...)` variables. Since we don't
        // have them, we can't re-analyze them until we change
        // that.
        //
        // TODO: Store the parent context on Analyzable objects
        if ($this->getNode()->kind === \ast\AST_CLOSURE) {
            return $context;
        }

        // Don't go deeper than one level in
        if ($this->recursion_depth++ > 2) {
            return $context;
        }

        // Analyze the node in a cloned context so that we
        // don't overwrite anything
        return (new BlockAnalysisVisitor($code_base, clone($context)))(
            $this->getNode()
        );
    }
}||||||||    public function analyze(Context $context, CodeBase $code_base) : Context
    {
        // Don't do anything if we care about being
        // fast
        if (Config::get()->quick_mode) {
            return $context;
        }

        if (!$this->hasNode()) {
            return $context;
        }

        // Closures depend on the context surrounding them such
        // as for getting `use(...)` variables. Since we don't
        // have them, we can't re-analyze them until we change
        // that.
        //
        // TODO: Store the parent context on Analyzable objects
        if ($this->getNode()->kind === \ast\AST_CLOSURE) {
            return $context;
        }

        // Don't go deeper than one level in
        // TODO: Due to optimizations in checking for duplicate parameter lists, it should now be possible to increase this depth limit.
        if (self::$recursion_depth >= 2) {
            return $context;
        }

        self::$recursion_depth++;

        try {
            // Analyze the node in a cloned context so that we
            // don't overwrite anything
            return (new BlockAnalysisVisitor($code_base, clone($context)))(
                $this->getNode()
            );
        } finally {
            self::$recursion_depth--;
        }
    }

    /**
     * Gets the recursion depth. Starts at 0, increases the deeper the recursion goes
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_STATIC_CALL))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_POST_INC
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_CLONE
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_STATIC_CALL))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_POST_INC
        (AST_STATIC_PROP))
    (AST_TRY
        (
            (AST_RETURN
                (AST_CALL
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_CLONE
                                (AST_VAR))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (AST_CATCH_LIST)
        (
            (AST_POST_DEC
                (AST_STATIC_PROP)))))