	public function __construct($dependencies = array())
	{
		foreach ($dependencies as $key => $value)
		{
			$this->register($key, $value['resolver'], (isset($value['singleton'])) ? $value['singleton'] : false);
		}
	}

	/**
	 * Register a dependency and its resolver.
	 *
	 * The resolver function when the registered dependency is requested.
	 *
	 * @param  string   $name
	 * @param  Closure  $resolver
	 * @return void
	 */
||||||||	public function __construct($registry = array())
	{
		$this->registry = $registry;
	}

	/**
	 * Register a dependency and its resolver.
	 *
	 * The resolver function is called when the registered dependency is requested.
	 *
	 * <code>
	 *		// Register a dependency in the container
	 *		IoC::register('something', function($container) {return new Something;});
	 *
	 *		// Register a dependency in the container as a singleton
	 *		IoC::register('something', function($container) {return new Something;}, true);
	 * </code>
	 *
	 * @param  string   $name
	 * @param  Closure  $resolver
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (AST_CONST)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))