  public function testDomainNameIsPlaceInEhlo()
  {
    /* -- RFC 2821, 4.1.4.

       The SMTP client MUST, if possible, ensure that the domain parameter
       to the EHLO command is a valid principal host name (not a CNAME or MX
       name) for its host.  If this is not possible (e.g., when the client's
       address is dynamically assigned and the client does not have an
       obvious name), an address literal SHOULD be substituted for the
       domain name and supplemental information provided that will assist in
       identifying the client.
    */

    $this->_buffer->setReturnValue(
      'readLine', '220 server.com foo' . "\r\n", array(0)
      );
    $this->_buffer->expectAt(
      0, 'write', array("EHLO mydomain.com\r\n")
      );
    $this->_buffer->setReturnValue(
      'write', 1, array("EHLO mydomain.com\r\n")
      );
    $this->_buffer->setReturnValue(
      'readLine', '250 ServerName.tld' . "\r\n", array(1)
      );
    $this->_buffer->expectMinimumCallCount('write', 1);
    $this->_finishBuffer();

    $this->_smtp->setLocalDomain('mydomain.com');

    $this->_smtp->start();
  }

||||||||  public function testDomainNameIsPlaceInEhlo()
  {
    /* -- RFC 2821, 4.1.4.

       The SMTP client MUST, if possible, ensure that the domain parameter
       to the EHLO command is a valid principal host name (not a CNAME or MX
       name) for its host.  If this is not possible (e.g., when the client's
       address is dynamically assigned and the client does not have an
       obvious name), an address literal SHOULD be substituted for the
       domain name and supplemental information provided that will assist in
       identifying the client.
    */

    $context = new Mockery();
    $buf = $this->_getBuffer($context);
    $smtp = $this->_getTransport($buf);
    $s = $context->sequence('SMTP-convo');
    $context->checking(Expectations::create()
      -> one($buf)->initialize() -> inSequence($s)
      -> one($buf)->readLine(0) -> inSequence($s) -> returns("220 some.server.tld bleh\r\n")
      -> one($buf)->write("EHLO mydomain.com\r\n") -> inSequence($s) -> returns(1)
      -> one($buf)->readLine(1) -> inSequence($s) -> returns('250 ServerName' . "\r\n")
      );
    $this->_finishBuffer($context, $buf);
    $smtp->setLocalDomain('mydomain.com');
    $smtp->start();
    $context->assertIsSatisfied();
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_METHOD_CALL
                                                        (AST_METHOD_CALL
                                                            (AST_METHOD_CALL
                                                                (AST_METHOD_CALL
                                                                    (AST_METHOD_CALL
                                                                        (AST_STATIC_CALL)
                                                                        (
                                                                            (AST_VAR))))
                                                                (
                                                                    (AST_VAR)))
                                                            (
                                                                (AST_VAR)))
                                                        (
                                                            (SCALAR)))
                                                    (
                                                        (AST_VAR)))
                                                (
                                                    (SCALAR)))
                                            (
                                                (AST_VAR)))
                                        (
                                            (SCALAR)))
                                    (
                                        (AST_VAR)))
                                (
                                    (SCALAR)))
                            (
                                (AST_VAR)))
                        (
                            (SCALAR)))
                    (
                        (AST_VAR)))
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)))