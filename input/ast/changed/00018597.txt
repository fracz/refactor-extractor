	private static function connect_to_sqlite($config)
	{
		if (file_exists($path = DATABASE_PATH.$config->database.'.sqlite'))
		{
			return new \PDO('sqlite:'.$path, null, null, static::$options);
		}
		elseif (file_exists($config->database))
		{
			return new \PDO('sqlite:'.$config->database, null, null, static::$options);
		}
		else
		{
			throw new \Exception("SQLite database [".$config->database."] could not be found.");
		}
	}

	/**
	 * Connect to a MySQL or PostgreSQL database server.
	 *
	 * @param  object  $config
	 * @return PDO
	 */
||||||||	private function connect_to_sqlite($config)
	{
		if ($config->database == ':memory:')
		{
			return new \PDO('sqlite::memory:', null, null, $this->options);
		}
		elseif (file_exists($path = DATABASE_PATH.$config->database.'.sqlite'))
		{
			return new \PDO('sqlite:'.$path, null, null, $this->options);
		}
		elseif (file_exists($config->database))
		{
			return new \PDO('sqlite:'.$config->database, null, null, $this->options);
		}
		else
		{
			throw new \Exception("SQLite database [".$config->database."] could not be found.");
		}
	}

	/**
	 * Connect to a MySQL or PostgreSQL database server.
	 *
	 * @param  object  $config
	 * @return PDO
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (AST_CONST)
                            (AST_CONST)
                            (AST_STATIC_PROP))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_CONST)
                            (AST_CONST)
                            (AST_STATIC_PROP))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (AST_CONST)
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_CONST)
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))))))))