    public function nonGenericArrayTypes() : UnionType
    {
        return new UnionType(
            $this->type_set->filter(
                function (Type $type) : bool {
                    return !$type->isGenericArray();
                }
            )
        );
    }

    /**
     * Takes "a|b[]|c|d[]|e" and returns "b[]|d[]"
     *
     * @return UnionType
     * A UnionType with generic array types kept, other types filtered out.
     *
     * @see nonGenericArrayTypes
     * @see genericArrayElementTypes
     */
||||||||    public function nonGenericArrayTypes() : UnionType
    {
        return $this->makeFromFilter(function (Type $type) : bool {
            return !$type->isGenericArray();
        });
    }

    /**
     * Takes "a|b[]|c|d[]|e" and returns "b[]|d[]"
     *
     * @return UnionType
     * A UnionType with generic array types kept, other types filtered out.
     *
     * @see nonGenericArrayTypes
     * @see genericArrayElementTypes
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_RETURN
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CLOSURE
                            (PARAM_TYPENO_PARAM_DEFAULT)
                            (NULL)
                            (
                                (AST_RETURN
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))))))))))