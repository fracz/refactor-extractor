	public static function mimetypeIcon($mimetype) {
		$alias = array('application/xml' => 'code/xml');
		if (isset($alias[$mimetype])) {
			$mimetype = $alias[$mimetype];
		}
		if (isset(self::$mimetypeIcons[$mimetype])) {
			return self::$mimetypeIcons[$mimetype];
		}
		// Replace slash and backslash with a minus
		$icon = str_replace('/', '-', $mimetype);
		$icon = str_replace( '\\', '-', $icon);

		// Is it a dir?
		if ($mimetype === 'dir') {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/folder.png';
			return OC::$WEBROOT.'/core/img/filetypes/folder.png';
		}

		// Icon exists?
		if (file_exists(OC::$SERVERROOT.'/core/img/filetypes/'.$icon.'.png')) {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/'.$icon.'.png';
			return OC::$WEBROOT.'/core/img/filetypes/'.$icon.'.png';
		}

		// Try only the first part of the filetype
		$mimePart = substr($icon, 0, strpos($icon, '-'));
		if (file_exists(OC::$SERVERROOT.'/core/img/filetypes/'.$mimePart.'.png')) {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/'.$mimePart.'.png';
			return OC::$WEBROOT.'/core/img/filetypes/'.$mimePart.'.png';
		} else {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/file.png';
			return OC::$WEBROOT.'/core/img/filetypes/file.png';
		}
	}

	/**
	 * @brief get path to preview of file
	 * @param string $path path
	 * @return string the url
	 *
	 * Returns the path to the preview of the file.
	 */
||||||||	public static function mimetypeIcon($mimetype) {
		$alias = array(
			'application/xml' => 'code/xml',
			'application/msword' => 'x-office/document',
			'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'x-office/document',
			'application/vnd.openxmlformats-officedocument.wordprocessingml.template' => 'x-office/document',
			'application/vnd.ms-word.document.macroEnabled.12' => 'x-office/document',
			'application/vnd.ms-word.template.macroEnabled.12' => 'x-office/document',
			'application/vnd.oasis.opendocument.text' => 'x-office/document',
			'application/vnd.oasis.opendocument.text-template' => 'x-office/document',
			'application/vnd.oasis.opendocument.text-web' => 'x-office/document',
			'application/vnd.oasis.opendocument.text-master' => 'x-office/document',
			'application/vnd.ms-powerpoint' => 'x-office/presentation',
			'application/vnd.openxmlformats-officedocument.presentationml.presentation' => 'x-office/presentation',
			'application/vnd.openxmlformats-officedocument.presentationml.template' => 'x-office/presentation',
			'application/vnd.openxmlformats-officedocument.presentationml.slideshow' => 'x-office/presentation',
			'application/vnd.ms-powerpoint.addin.macroEnabled.12' => 'x-office/presentation',
			'application/vnd.ms-powerpoint.presentation.macroEnabled.12' => 'x-office/presentation',
			'application/vnd.ms-powerpoint.template.macroEnabled.12' => 'x-office/presentation',
			'application/vnd.ms-powerpoint.slideshow.macroEnabled.12' => 'x-office/presentation',
			'application/vnd.oasis.opendocument.presentation' => 'x-office/presentation',
			'application/vnd.oasis.opendocument.presentation-template' => 'x-office/presentation',
			'application/vnd.ms-excel' => 'x-office/spreadsheet',
			'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'x-office/spreadsheet',
			'application/vnd.openxmlformats-officedocument.spreadsheetml.template' => 'x-office/spreadsheet',
			'application/vnd.ms-excel.sheet.macroEnabled.12' => 'x-office/spreadsheet',
			'application/vnd.ms-excel.template.macroEnabled.12' => 'x-office/spreadsheet',
			'application/vnd.ms-excel.addin.macroEnabled.12' => 'x-office/spreadsheet',
			'application/vnd.ms-excel.sheet.binary.macroEnabled.12' => 'x-office/spreadsheet',
			'application/vnd.oasis.opendocument.spreadsheet' => 'x-office/spreadsheet',
			'application/vnd.oasis.opendocument.spreadsheet-template' => 'x-office/spreadsheet',
		);

		if (isset($alias[$mimetype])) {
			$mimetype = $alias[$mimetype];
		}
		if (isset(self::$mimetypeIcons[$mimetype])) {
			return self::$mimetypeIcons[$mimetype];
		}
		// Replace slash and backslash with a minus
		$icon = str_replace('/', '-', $mimetype);
		$icon = str_replace( '\\', '-', $icon);

		// Is it a dir?
		if ($mimetype === 'dir') {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/folder.png';
			return OC::$WEBROOT.'/core/img/filetypes/folder.png';
		}

		// Icon exists?
		if (file_exists(OC::$SERVERROOT.'/core/img/filetypes/'.$icon.'.png')) {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/'.$icon.'.png';
			return OC::$WEBROOT.'/core/img/filetypes/'.$icon.'.png';
		}

		// Try only the first part of the filetype
		$mimePart = substr($icon, 0, strpos($icon, '-'));
		if (file_exists(OC::$SERVERROOT.'/core/img/filetypes/'.$mimePart.'.png')) {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/'.$mimePart.'.png';
			return OC::$WEBROOT.'/core/img/filetypes/'.$mimePart.'.png';
		} else {
			self::$mimetypeIcons[$mimetype] = OC::$WEBROOT.'/core/img/filetypes/file.png';
			return OC::$WEBROOT.'/core/img/filetypes/file.png';
		}
	}

	/**
	 * @brief get path to preview of file
	 * @param string $path path
	 * @return string the url
	 *
	 * Returns the path to the preview of the file.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_STATIC_PROP)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_STATIC_PROP)
                        (SCALAR)))))))