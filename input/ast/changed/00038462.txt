	protected function setValue($key, $value, $expire)
	{
		if ($expire <= 0) {
			$expire = 31536000; // 1 year
		}
		$expire += time();

		$cacheFile = $this->getCacheFile($key);
		if ($this->directoryLevel > 0) {
			@mkdir(dirname($cacheFile), 0777, true);
		}
		if (@file_put_contents($cacheFile, $value, LOCK_EX) !== false) {
			@chmod($cacheFile, 0777);
			return @touch($cacheFile, $expire);
		} else {
			return false;
		}
	}

	/**
	 * Stores a value identified by a key into cache if the cache does not contain this key.
	 * This is the implementation of the method declared in the parent class.
	 *
	 * @param string $key the key identifying the value to be cached
	 * @param string $value the value to be cached
	 * @param integer $expire the number of seconds in which the cached value will expire. 0 means never expire.
	 * @return boolean true if the value is successfully stored into cache, false otherwise
	 */
||||||||	protected function setValue($key, $value, $expire)
	{
		if ($expire <= 0) {
			$expire = 31536000; // 1 year
		}
		$expire += time();

		$cacheFile = $this->getCacheFile($key);
		if ($this->directoryLevel > 0) {
			@FileHelper::createDirectory(dirname($cacheFile), $this->dirMode, true);
		}
		if (@file_put_contents($cacheFile, $value, LOCK_EX) !== false) {
			if ($this->fileMode !== null) {
				@chmod($cacheFile, $this->fileMode);
			}
			return @touch($cacheFile, $expire);
		} else {
			return false;
		}
	}

	/**
	 * Stores a value identified by a key into cache if the cache does not contain this key.
	 * This is the implementation of the method declared in the parent class.
	 *
	 * @param string $key the key identifying the value to be cached
	 * @param string $value the value to be cached
	 * @param integer $expire the number of seconds in which the cached value will expire. 0 means never expire.
	 * @return boolean true if the value is successfully stored into cache, false otherwise
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST))))
                (AST_CONST))
            (
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_RETURN
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_UNARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_CONST))))
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_UNARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_RETURN
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))