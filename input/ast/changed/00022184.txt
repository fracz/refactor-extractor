    function set_as_parent($children) {
        global $CFG;

        if (empty($children) || !is_array($children)) {
            debugging("Passed an empty or non-array variable to grade_category::set_as_parent()");
            return false;
        }

        // Check type and sortorder of first child
        $first_child = current($children);
        $first_child_type = get_class($first_child);

        // If this->courseid is not set, set it to the first child's courseid
        if (empty($this->courseid)) {
            $this->courseid = $first_child->courseid;
        }

        $grade_tree = new grade_tree();

        foreach ($children as $child) {
            if (get_class($child) != $first_child_type) {
                debugging("Violated constraint: Attempted to set a category as a parent over children of 2 different types.");
                return false;
            }

            if ($grade_tree->get_element_type($child) == 'topcat') {
                debugging("Violated constraint: Attempted to set a category over children which are already top categories.");
                return false;
            }

            if ($first_child_type == 'grade_category' or $first_child_type == 'grade_item') {
                if (!empty($child->parent)) {
                    debugging("Violated constraint: Attempted to set a category over children that already have a top category.");
                    return false;
                }
            } else {
                debugging("Attempted to set a category over children that are neither grade_items nor grade_categories.");
                return false;
            }

            if ($child->courseid != $this->courseid) {
                debugging("Attempted to set a category over children which do not belong to the same course.");
                return false;
            }
        }

        // We passed all the checks, time to set the category as a parent.
        foreach ($children as $child) {
            $child->divorce_parent();
            $child->set_parent_id($this->id);
            if (!$child->update()) {
                debugging("Could not set this category as a parent for one of its children, DB operation failed.");
                return false;
            }
        }

        // TODO Assign correct sortorders to the newly assigned children and parent. Simply add 1 to all of them!
        $this->load_grade_item();
        $this->grade_item->sortorder = $first_child->get_sortorder();

        if (!$this->update()) {
            debugging("Could not update this category's sortorder in DB.");
            return false;
        }

        $query = "UPDATE {$CFG->prefix}grade_items SET sortorder = sortorder + 1 WHERE sortorder >= {$this->grade_item->sortorder}";
        $query .= " AND courseid = $this->courseid";

        if (!execute_sql($query)) {
            debugging("Could not update the sortorder of grade_items listed after this category.");
            return false;
        } else {
            return true;
        }
    }

    /**
     * Returns the most descriptive field for this object. This is a standard method used
     * when we do not know the exact type of an object.
     * @return string name
     */
||||||||    function set_as_parent($children) {
        global $CFG;

        if (empty($children) || !is_array($children)) {
            debugging("Passed an empty or non-array variable to grade_category::set_as_parent()");
            return false;
        }

        $result = true;

        foreach ($children as $child) {
            // check sanity of course id
            if ($child->courseid != $this->courseid) {
                debugging("Attempted to set a category over children which do not belong to the same course.");
                continue;
            }
            // change parrent if possible
            if (!$child->set_parent_id($this->id)) {
                $result = false;
            }
        }

        return $result;
    }

    /**
     * Returns the most descriptive field for this object. This is a standard method used
     * when we do not know the exact type of an object.
     * @return string name
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_EMPTY
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (AST_RETURN
                                        (AST_CONST)))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_RETURN
                            (AST_CONST)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_RETURN
                            (AST_CONST)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_CALL
                            (
                                (SCALAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_RETURN
        (AST_VAR)))