    public function testCanCheckStatusOfACommand()
    {
        $this->expectOutputRegex('/.+An error occured: "Oh noes", while running:\ngit clone.+/');

        $prophecy = $this->bindProphecy(ConnectionsFactory::class);
        $prophecy->make(Argument::type(ConnectionKey::class))->willReturn(clone $this->getRemote()->shouldReceive('status')->andReturn(1)->mock());
        $prophecy->isConnected(Argument::type(ConnectionKey::class))->willReturn(true);

        $this->mockEchoingCommand();

        $status = $this->task('Deploy')->checkStatus('Oh noes', 'git clone');
        $this->assertFalse($status);
    }

||||||||    public function testCanCheckStatusOfACommand()
    {
        $this->expectOutputRegex('/.+An error occured: "Oh noes", while running:\ngit clone.+/');

        $this->mockEchoingCommand();
        $this->mockRemote(
            $this->getRemote()->shouldReceive('status')->andReturn(1)->mock()
        );

        $status = $this->task('Deploy')->checkStatus('Oh noes', 'git clone');
        $this->assertFalse($status);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))))
        (
            (AST_CLONE
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_CLASS_CONST
                            (SCALAR))))))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))