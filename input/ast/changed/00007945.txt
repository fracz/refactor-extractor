  private function _createTableHead() {
    $out = <<< EOT
    <thead>
	<tr>
		<th class="reqNum">#</th>
		<th class="reqUrl">Resource</th>
		<th class="reqMime">Content Type</th>
		<th class="reqStart">Request Start</th>
		<th class="reqDNS">DNS Lookup</th>
		<th class="reqSocket">Initial Connection</th>
EOT;
    if ($this->requests->hasSecureRequests()) {
      $out .= "<th class=\"reqSSL\">SSL Negotiation</th>\n";
    }
    $out .= <<<EOT
<th class="reqTTFB">Time to First Byte</th>
<th class="reqDownload">Content Download</th>
<th class="reqBytes">Bytes Downloaded</th>
<th class="reqResult">Error/Status Code</th>
<th class="reqIP">IP</th>
EOT;
    if ($this->requests->hasLocationData()) {
      $out .= "<th class=\"reqLocation\">Location*</th>";
    }
    $out .= "</tr>\n</thead>\n";
    return $out;
  }

||||||||  private function _createTableHead() {
    $out = "<thead>\n<tr>\n";
    $out .= "<th class=\"reqNum\">#</th>\n";
    $out .= "<th class=\"reqUrl\">Resource</th>\n";
    $out .= "<th class=\"reqMime\">Content Type</th>\n";
    $out .= "<th class=\"reqStart\">Request Start</th>\n";
    $out .= "<th class=\"reqDNS\">DNS Lookup</th>\n";
    $out .= "<th class=\"reqSocket\">Initial Connection</th>\n";
    if ($this->requests->hasSecureRequests()) {
      $out .= "<th class=\"reqSSL\">SSL Negotiation</th>\n";
    }
    $out .= "<th class=\"reqTTFB\">Time to First Byte</th>\n";
    $out .= "<th class=\"reqDownload\">Content Download</th>\n";
    $out .= "<th class=\"reqBytes\">Bytes Downloaded</th>\n";
    $out .= "<th class=\"reqResult\">Error/Status Code</th>\n";
    $out .= "<th class=\"reqIP\">IP</th>\n";

    if ($this->requests->hasLocationData()) {
      $out .= "<th class=\"reqLocation\">Location*</th>";
    }
    $out .= "</tr>\n</thead>\n";
    return $out;
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_RETURN
        (AST_VAR)))