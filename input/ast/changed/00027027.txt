  protected function gotoTokenByTypeInDirection($type, $direction = 'next', $max_count = 0, $stop_at = null)
  {
    // direction must be 'next' or 'previous'
    if (!in_array($direction, array('next', 'previous')))
    {
      throw new InvalidArgumentException('The direction must be a string containing either "next" or "previous"');
    }

    if ($max_count < 0)
    {
      throw new InvalidArgumentException('The maximum count must be a greater or equal to 0');
    }

    $type = is_array($type) ? $type : array($type);

    // initialize basic data
    $token = null;
    $found = false;
    $count = 0;
    $index = $this->key();

    // if $stop_at is a single value, convert to array for ease of parsing
    if (!is_array($stop_at) && ($stop_at !== null))
    {
      $stop_at = array($stop_at);
    }

    // start with the next item
    $this->$direction();
    while ($this->valid())
    {
      $count++;

      // break away if we found our token
      $token = $this->current();
      if (in_array($token->getType(), $type))
      {
        $found = true;
        break;
      }

      $result = $this->$direction();

      // the direction methods (next() and previous()) return false if the end of the store is encountered
      if ($result === false || // End of Array (EoA)
        (($max_count > 0) && ($count == $max_count)) || // the max_count is reached
        (($stop_at !== null) && // when a stop is defined, stop if this token matches the condition
          (in_array($token->getType(), $stop_at) || in_array($token->getContent(), $stop_at))))
      {
        break;
      }
    }

    // return to the last known position if none was found
    if (!$found)
    {
      $this->seek($index);
    }

    // return the result
    return $found ? $token : false;
  }

  /**
   * Finds a token of $type within $max_count tokens in the given $direction and returns
   * the found token, false if none found.
   *
   * Note: this function does _not_ move the internal pointer.
   *
   * @throws InvalidArgumentException
   * @param int      $type      The type of token to find as identified by the token constants, i.e. T_STRING
   * @param string   $direction The direction where to search, may be 'next' or 'previous'
   * @param int      $max_count The maximum number of tokens to iterate, 0 is unlimited (not recommended)
   * @param string[] $stop_at   Stops searching when one of these token constants or literals is encountered
   *
   * @return bool|DocBlox_Token
   */
||||||||  protected function gotoTokenByTypeInDirection($type, $direction = 'next', $max_count = 0, $stop_at = null)
  {
    // direction must be 'next' or 'previous'
    if (($direction != 'next') && ($direction != 'previous'))
    {
      throw new InvalidArgumentException('The direction must be a string containing either "next" or "previous"');
    }

    if ($max_count < 0)
    {
      throw new InvalidArgumentException('The maximum count must be a greater or equal to 0');
    }

    $type = is_array($type) ? $type : array($type);

    // initialize basic data
    $token = null;
    $found = false;
    $count = 0;
    $index = $this->key();

    // if $stop_at is a single value, convert to array for ease of parsing
    if (!is_array($stop_at) && ($stop_at !== null))
    {
      $stop_at = array($stop_at);
    }

    // start with the next item
    $this->$direction();
    while ($this->valid())
    {
      $count++;

      // break away if we found our token
      $token = $this->current();
      $token_type = $token->type;

      if (in_array($token_type, $type))
      {
        $found = true;
        break;
      }

      $result = $this->$direction();

      // the direction methods (next() and previous()) return false if the end of the store is encountered
      if ($result === false || // End of Array (EoA)
        (($max_count > 0) && ($count == $max_count)) || // the max_count is reached
        (($stop_at !== null) && // when a stop is defined, stop if this token matches the condition
          (in_array($token_type, $stop_at) || in_array($token->content, $stop_at))))
      {
        break;
      }
    }

    // return to the last known position if none was found
    if (!$found)
    {
      $this->seek($index);
    }

    // return the result
    return $found ? $token : false;
  }

  /**
   * Finds a token of $type within $max_count tokens in the given $direction and returns
   * the found token, false if none found.
   *
   * Note: this function does _not_ move the internal pointer.
   *
   * @throws InvalidArgumentException
   * @param int      $type      The type of token to find as identified by the token constants, i.e. T_STRING
   * @param string   $direction The direction where to search, may be 'next' or 'previous'
   * @param int      $max_count The maximum number of tokens to iterate, 0 is unlimited (not recommended)
   * @param string[] $stop_at   Stops searching when one of these token constants or literals is encountered
   *
   * @return bool|DocBlox_Token
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_POST_INC
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_BREAK
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_VAR))))))
                    (
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_POST_INC
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_BREAK
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))))))
                    (
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_CONST))))