    public function compile(ContainerBuilder $container)
    {
        foreach ($this->passConfig->getPasses() as $pass) {
            $this->startPass($pass);
            $pass->process($container);
            $this->endPass($pass);
        }
    }

    /**
     * Starts an individual pass.
     *
     * @param CompilerPassInterface $pass The pass to start
     */
||||||||    public function compile(ContainerBuilder $container)
    {
        $start = microtime(true);
        foreach ($this->passConfig->getPasses() as $pass) {
            $this->startPass($pass);
            $pass->process($container);
            $this->endPass($pass);
        }

        $this->addLogMessage(sprintf('Compilation finished in %.3fs.', microtime(true) - $start));
    }

    /**
     * Starts an individual pass.
     *
     * @param CompilerPassInterface $pass The pass to start
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_CONST)))
                        (AST_VAR)))))))