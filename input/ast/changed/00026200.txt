  public function build(array $changesets) {
    assert_instances_of($changesets, 'DifferentialChangeset');

    $nav = new AphrontSideNavFilterView();
    $nav->setBaseURI($this->getBaseURI());
    $nav->setFlexible(true);

    $anchor = $this->getAnchorName();

    $tree = new PhutilFileTree();
    foreach ($changesets as $changeset) {
      try {
        $tree->addPath($changeset->getFilename(), $changeset);
      } catch (Exception $ex) {
        // TODO: See T1702. When viewing the versus diff of diffs, we may
        // have files with the same filename. For example, if you have a setup
        // like this in SVN:
        //
        //  a/
        //    README
        //  b/
        //    README
        //
        // ...and you run "arc diff" once from a/, and again from b/, you'll
        // get two diffs with path README. However, in the versus diff view we
        // will compute their absolute repository paths and detect that they
        // aren't really the same file. This is correct, but causes us to
        // throw when inserting them.
        //
        // We should probably compute the smallest unique path for each file
        // and show these as "a/README" and "b/README" when diffed against
        // one another. However, we get this wrong in a lot of places (the
        // other TOC shows two "README" files, and we generate the same anchor
        // hash for both) so I'm just stopping the bleeding until we can get
        // a proper fix in place.
      }
    }

    require_celerity_resource('phabricator-filetree-view-css');

    $filetree = array();

    $path = $tree;
    while (($path = $path->getNextNode())) {
      $data = $path->getData();

      $name = $path->getName();
      $style = 'padding-left: '.(2 + (3 * $path->getDepth())).'px';

      $href = null;
      if ($data) {
        $href = '#'.$data->getAnchorName();
        $title = $name;
        $icon = 'phabricator-filetree-icon-file';
      } else {
        $name .= '/';
        $title = $path->getFullPath().'/';
        $icon = 'phabricator-filetree-icon-dir';
      }

      $icon = phutil_tag(
        'span',
        array(
          'class' => 'phabricator-filetree-icon '.$icon,
        ),
        '');

      $name_element = phutil_tag(
        'span',
        array(
          'class' => 'phabricator-filetree-name',
        ),
        $name);

      $filetree[] = javelin_tag(
        $href ? 'a' : 'span',
        array(
          'href' => $href,
          'style' => $style,
          'title' => $title,
          'class' => 'phabricator-filetree-item',
        ),
        array($icon, $name_element));
    }
    $tree->destroy();

    $filetree =
      '<div class="phabricator-filetree">'.
        implode("\n", $filetree).
      '</div>';
    $nav->addLabel(pht('Changed Files'));
    $nav->addCustomBlock($filetree);
    $nav->setActive(true);
    $nav->selectFilter(null);
    return $nav;
  }

}
||||||||  public function build(array $changesets) {
    assert_instances_of($changesets, 'DifferentialChangeset');

    $nav = new AphrontSideNavFilterView();
    $nav->setBaseURI($this->getBaseURI());
    $nav->setFlexible(true);

    $anchor = $this->getAnchorName();

    $tree = new PhutilFileTree();
    foreach ($changesets as $changeset) {
      try {
        $tree->addPath($changeset->getFilename(), $changeset);
      } catch (Exception $ex) {
        // TODO: See T1702. When viewing the versus diff of diffs, we may
        // have files with the same filename. For example, if you have a setup
        // like this in SVN:
        //
        //  a/
        //    README
        //  b/
        //    README
        //
        // ...and you run "arc diff" once from a/, and again from b/, you'll
        // get two diffs with path README. However, in the versus diff view we
        // will compute their absolute repository paths and detect that they
        // aren't really the same file. This is correct, but causes us to
        // throw when inserting them.
        //
        // We should probably compute the smallest unique path for each file
        // and show these as "a/README" and "b/README" when diffed against
        // one another. However, we get this wrong in a lot of places (the
        // other TOC shows two "README" files, and we generate the same anchor
        // hash for both) so I'm just stopping the bleeding until we can get
        // a proper fix in place.
      }
    }

    require_celerity_resource('phabricator-filetree-view-css');

    $filetree = array();

    $path = $tree;
    while (($path = $path->getNextNode())) {
      $data = $path->getData();

      $name = $path->getName();
      $style = 'padding-left: '.(2 + (3 * $path->getDepth())).'px';

      $href = null;
      if ($data) {
        $href = '#'.$data->getAnchorName();
        $title = $name;
        $icon = 'phabricator-filetree-icon-file';
      } else {
        $name .= '/';
        $title = $path->getFullPath().'/';
        $icon = 'phabricator-filetree-icon-dir';
      }

      $icon = phutil_tag(
        'span',
        array(
          'class' => 'phabricator-filetree-icon '.$icon,
        ),
        '');

      $name_element = phutil_tag(
        'span',
        array(
          'class' => 'phabricator-filetree-name',
        ),
        $name);

      $filetree[] = javelin_tag(
        $href ? 'a' : 'span',
        array(
          'href' => $href,
          'style' => $style,
          'title' => $title,
          'class' => 'phabricator-filetree-item',
        ),
        array($icon, $name_element));
    }
    $tree->destroy();

    $filetree = phutil_tag(
      'div',
      array(
        'class' => 'phabricator-filetree',
      ),
      $filetree);

    $nav->addLabel(pht('Changed Files'));
    $nav->addCustomBlock($filetree);
    $nav->setActive(true);
    $nav->selectFilter(null);
    return $nav;
  }

}
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_TRY
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)))
                (NULL))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_TRY
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)))
                (NULL))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_RETURN
        (AST_VAR)))