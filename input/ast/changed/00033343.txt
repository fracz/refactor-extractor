    public function isExisting ()
    {
        return $this->isExisting === null ?
        $this->isExisting = $this->resource_objects[$this->resource_type]->isExisting($this) :
        $this->isExisting;
    }
    /**
    * Returns if the template resource uses the Smarty compiler
    *
    * The status is determined by the actual resource handler
    *
    * @return boolean true if the template will use the compiler
    */
||||||||    public function isExisting ($error= false)
    {
        if ($this->isExisting === null) {
        $this->isExisting = $this->smarty->resource_objects[$this->resource_type]->isExisting($this);
        }
        if (!$this->isExisting && $error) {
            throw new Exception("Unable to load template \"{$this->resource_type} : {$this->resource_name}\"");
        }
        return $this->isExisting;
    }
    /**
    * Returns if the template resource uses the Smarty compiler
    *
    * The status is determined by the actual resource handler
    *
    * @return boolean true if the template will use the compiler
    */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_VAR))))
            (AST_PROP
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))