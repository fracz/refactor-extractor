    public static function can_change_parent_any() {
        global $DB;
        if (!isloggedin() || isguestuser()) {
            return false;
        }
        $cache = cache::make('core', 'coursecat');
        $canchangeany = $cache->get('can_change_parent_any');
        if ($canchangeany !== false) {
            return ((int)$canchangeany === 1);
        }
        $canchangeany = false;
        if (self::get(0)->has_manage_capability()) {
            $canchangeany = true;
        } else {
            $fields = context_helper::get_preload_record_columns_sql('ctx');
            $sql = "SELECT ctx.instanceid AS categoryid, $fields
                      FROM {context} ctx
                     WHERE contextlevel = :contextlevel
                  ORDER BY depth ASC";
            $params = array('contextlevel' => CONTEXT_COURSECAT);
            $recordset = $DB->get_recordset_sql($sql, $params);
            foreach ($recordset as $context) {
                context_helper::preload_from_record($context);
                $context = context_coursecat::instance($context->categoryid);
                if (has_capability('moodle/category:manage', $context)) {
                    $canchangeany = true;
                    break;
                }
            }
            $recordset->close();
        }
        $cache->set('can_resort_any', $canchangeany ? 1 : 0);
        $cache->set('can_change_parent_any', $canchangeany ? 1 : 0);
        return $canchangeany;
    }

    /**
     * Returns number of subcategories visible to the current user
     *
     * @return int
     */
||||||||    public static function can_change_parent_any() {
        return self::has_manage_capability_on_any();
    }

    /**
     * Returns number of subcategories visible to the current user
     *
     * @return int
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL))
                (AST_CALL))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_CAST
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_CONST)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_BREAK
                                        (NULL)))))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONDITIONAL
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONDITIONAL
                (AST_VAR)
                (SCALAR)
                (SCALAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_STATIC_CALL)))