  public function getTarget()
  {
    return parent::getTarget()
      ? parent::getTarget()
      : 'output';
  }

  /**
   * Returns the source structure file location, or the default.
   *
   * @return string
   */
||||||||  public function getTarget()
  {
    $target = parent::getTarget();
    $target = ($target === null)
      ? trim(DocBlox_Core_Abstract::config()->transformer->target)
      : trim($target);

    if (($target == '') || ($target == DIRECTORY_SEPARATOR))
    {
      throw new Zend_Console_Getopt_Exception('Either an empty path or root was given: '.$target);
    }

    if (!is_dir($target))
    {
      throw new Zend_Console_Getopt_Exception('The given location "' . $target . '" is not a folder.');
    }

    if (!is_writable($target))
    {
      throw new Zend_Console_Getopt_Exception(
        'The given path "' . $target . '" either does not exist or is not writable.'
      );
    }

    return realpath($target);
  }

  /**
   * Returns the source structure file location, or the default.
   *
   * Please note that the default is the target location of the parser appended with the structure.xml filename.
   * This is because in a default situation the structure.xml is located in the target folder of the parser.
   *
   * @return string
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_STATIC_CALL)
            (AST_STATIC_CALL)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_CALL
                (
                    (AST_PROP
                        (AST_PROP
                            (AST_STATIC_CALL)))))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))