    public function getLocalized($template)
    {
        $template = $this->replaceLegacyPlaceholders($template);

        if (substr($template, 0, 5) == 'Intl_') {
            $translator = StaticContainer::get('Piwik\Translation\Translator');
            $template = $translator->translate($template);
        }

        if (strpos($template, '{time}') !== false) {

            static $use12HourClock = null;

            if (is_null($use12HourClock)) {

                $model = new LanguagesManagerModel();

                $use12HourClock = $model->uses12HourClock(Piwik::getCurrentUserLogin());
            }

            $timeFormat = 'Intl_Format_Time_24';

            if ($use12HourClock) {
                $timeFormat = 'Intl_Format_Time_12';

            }

            $translator = StaticContainer::get('Piwik\Translation\Translator');
            $replacement = $translator->translate($timeFormat);

            $template = str_replace('{time}', $replacement, $template);
        }


        $tokens = self::parseFormat($template);

        $out = '';

        foreach ($tokens AS $token) {
            if (is_array($token)) {
                $out .= $this->formatToken(array_shift($token));

            } else {
                $out .= $token;
            }
        }

        return $out;
    }

    /**
     * Replaces legacy placeholders
     *
     * @deprecated should be removed in Piwik 3.0.0 or later
     *
     * - **%day%**: replaced with the day of the month without leading zeros, eg, **1** or **20**.
     * - **%shortMonth%**: the short month in the current language, eg, **Jan**, **Feb**.
     * - **%longMonth%**: the whole month name in the current language, eg, **January**, **February**.
     * - **%shortDay%**: the short day name in the current language, eg, **Mon**, **Tue**.
     * - **%longDay%**: the long day name in the current language, eg, **Monday**, **Tuesday**.
     * - **%longYear%**: the four digit year, eg, **2007**, **2013**.
     * - **%shortYear%**: the two digit year, eg, **07**, **13**.
     * - **%time%**: the time of day, eg, **07:35:00**, or **15:45:00**.
     */
||||||||    public function getLocalized($template)
    {
        $template = $this->replaceLegacyPlaceholders($template);

        if (substr($template, 0, 5) == 'Intl_') {
            $translator = StaticContainer::get('Piwik\Translation\Translator');
            $template = $translator->translate($template);
        }

        if (strpos($template, '{time}') !== false) {
            $template = str_replace('{time}', $this->getTimeFormat(), $template);
        }

        $tokens = self::parseFormat($template);

        $out = '';

        foreach ($tokens AS $token) {
            if (is_array($token)) {
                $out .= $this->formatToken(array_shift($token));

            } else {
                $out .= $token;
            }
        }

        return $out;
    }

    /**
     * Replaces legacy placeholders
     *
     * @deprecated should be removed in Piwik 3.0.0 or later
     *
     * - **%day%**: replaced with the day of the month without leading zeros, eg, **1** or **20**.
     * - **%shortMonth%**: the short month in the current language, eg, **Jan**, **Feb**.
     * - **%longMonth%**: the whole month name in the current language, eg, **January**, **February**.
     * - **%shortDay%**: the short day name in the current language, eg, **Mon**, **Tue**.
     * - **%longDay%**: the long day name in the current language, eg, **Monday**, **Tuesday**.
     * - **%longYear%**: the four digit year, eg, **2007**, **2013**.
     * - **%shortYear%**: the two digit year, eg, **07**, **13**.
     * - **%time%**: the time of day, eg, **07:35:00**, or **15:45:00**.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_STATIC
                    (AST_VAR)
                    (AST_CONST))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_STATIC_CALL)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))