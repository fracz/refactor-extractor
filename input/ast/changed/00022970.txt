    public function get_head_code(moodle_page $page, core_renderer $renderer) {
        // note: the $page and $output are not stored here because it would
        // create circular references in memory which prevents garbage collection
        $this->init_requirements_data($page, $renderer);

        // yui3 JS and CSS is always loaded first - it is cached in browser
        $output = $this->get_yui3lib_headcode();

        // BC: load basic YUI2 for now, all yui2 things should be loaded via Y.use('yui2-oldmodulename')
        $output .= $this->get_yui2lib_code();

        // now theme CSS + custom CSS in this specific order
        $output .= $this->get_css_code();

        // all the other linked things from HEAD - there should be as few as possible
        // because we need to minimise number of http requests,
        // all core stuff should go into /lib/javascript-static.js
        $output .= $this->get_linked_resources_code(self::WHEN_IN_HEAD);

        // finally all JS that should go directly into head tag - mostly global config
        $output .= html_writer::script($this->get_javascript_code(self::WHEN_IN_HEAD));

        // mark head sending done, it is not possible to anything there
        $this->headdone = true;

        return $output;
    }

    /**
     * Generate any HTML that needs to go at the start of the <body> tag.
     *
     * Normally, this method is called automatically by the code that prints the
     * <head> tag. You should not normally need to call it in your own code.
     *
     * @return string the HTML code to go at the start of the <body> tag.
     */
||||||||    public function get_head_code(moodle_page $page, core_renderer $renderer) {
        global $CFG;

        // note: the $page and $output are not stored here because it would
        // create circular references in memory which prevents garbage collection
        $this->init_requirements_data($page, $renderer);

        // yui3 JS and CSS is always loaded first - it is cached in browser
        $output = $this->get_yui3lib_headcode();

        // BC: load basic YUI2 for now, all yui2 things should be loaded via Y.use('yui2-oldmodulename')
        $output .= $this->get_yui2lib_code();

        // now theme CSS + custom CSS in this specific order
        $output .= $this->get_css_code();

        // set up global YUI3 loader object - this should contain all code needed by plugins
        // note: in JavaScript just use "YUI(M.yui.loader).use('overlay', function(Y) { .... });"
        // this needs to be done before including any other script
        $js = "var M = {}; M.yui = {}; " . js_writer::set_variable('M.yui.loader', $this->M_yui_loader, false);
        $output .= html_writer::script($js);

        // link our main JS file, all core stuff should be there
        $output .= html_writer::script('', $CFG->httpswwwroot.'/lib/javascript-static.js');

        // all the other linked things from HEAD - there should be as few as possible
        // because we need to minimise number of http requests,
        $output .= $this->get_linked_resources_code(self::WHEN_IN_HEAD);

        // finally all JS that should go directly into head tag - mostly global config
        $output .= html_writer::script($this->get_javascript_code(self::WHEN_IN_HEAD));

        // mark head sending done, it is not possible to anything there
        $this->headdone = true;

        return $output;
    }

    /**
     * Generate any HTML that needs to go at the start of the <body> tag.
     *
     * Normally, this method is called automatically by the code that prints the
     * <head> tag. You should not normally need to call it in your own code.
     *
     * @return string the HTML code to go at the start of the <body> tag.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_RETURN
        (AST_VAR)))