	public function testConstruct()
	{
		$app_bkp = JFactory::$application;
		$app = TestMockApplication::create($this);
		JFactory::$application = $app;
		$menu = TestMockMenu::create($this);

		/**
		 * Test if standard setup of JComponentRouterBase works and $app and
		 * $menu are properly populated
		 */
		$object = new JComponentRouterBaseInspector();
		$this->assertInstanceOf('JComponentRouterInterface', $object);
		$this->assertInstanceOf('JComponentRouterBase', $object);
		$this->assertEquals($app, $object->app);
		$this->assertEquals($app->getMenu(), $object->menu);
		$this->assertEquals(null, $object->app->get('value'));

		/**
		 * Test if the setup works when an app object is handed over
		 * Especially test if the app objects are different
		 */
		$app2 = TestMockApplication::create($this);
		$object = new JComponentRouterBaseInspector($app2);
		$this->assertEquals($app2, $object->app);
		//The original $app is not the same object as $app2, thus we did not use JFactory
		$this->assertFalse($app === $object->app);

		/**
		 * Test if the setup works when both an app and menu object is handed over
		 */
		$menu2 = new stdClass();
		$object = new JComponentRouterBaseInspector($app, $menu2);
		$this->assertEquals($app, $object->app);
		$this->assertEquals($menu2, $object->menu);

		/**
		 * Test what happens when no application, but a menu object is handed over
		 */
		$object = new JComponentRouterBaseInspector(false, $menu);
		$this->assertEquals($app, $object->app);
		$this->assertEquals($menu, $object->menu);

		JFactory::$language = $app_bkp;
	}

	/**
	 * Test JComponentRouterBase::preprocess
	 *
	 * @return  void
	 *
	 * @since   3.4
	 * @covers  JComponentRouterBase::preprocess
	 */
||||||||	public function testConstruct()
	{
		$app_bkp = JFactory::$application;
		$app = TestMockApplication::create($this);
		JFactory::$application = $app;
		$menu = TestMockMenu::create($this);

		/**
		 * Test if standard setup of JComponentRouterBase works and $app and
		 * $menu are properly populated
		 */
		$object = new JComponentRouterBaseInspector();
		$this->assertInstanceOf('JComponentRouterInterface', $object);
		$this->assertInstanceOf('JComponentRouterBase', $object);
		$this->assertEquals($app, $object->app);
		$this->assertEquals($app->getMenu(), $object->menu);
		$this->assertEquals(null, $object->app->get('value'));

		/**
		 * Test if the setup works when an app object is handed over
		 * Especially test if the app objects are different
		 */
		$app2 = TestMockApplication::create($this);
		$object = new JComponentRouterBaseInspector($app2);
		$this->assertEquals($app2, $object->app);
		//The original $app is not the same object as $app2, thus we did not use JFactory
		$this->assertNotSame($app, $object->app);

		/**
		 * Test if the setup works when both an app and menu object is handed over
		 */
		$menu2 = new stdClass();
		$object = new JComponentRouterBaseInspector($app, $menu2);
		$this->assertEquals($app, $object->app);
		$this->assertEquals($menu2, $object->menu);

		/**
		 * Test what happens when no application, but a menu object is handed over
		 */
		$object = new JComponentRouterBaseInspector(false, $menu);
		$this->assertEquals($app, $object->app);
		$this->assertEquals($menu, $object->menu);

		JFactory::$language = $app_bkp;
	}

	/**
	 * Test JComponentRouterBase::preprocess
	 *
	 * @return  void
	 *
	 * @since   3.4
	 * @covers  JComponentRouterBase::preprocess
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR)))