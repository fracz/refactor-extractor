    public function visitCall(Node $node) : Context {
        $found = false;
        $call_node = $node->children[0];

        if($call_node->kind == \ast\AST_NAME) {

            $function_name = $call_node->children[0];

            $method_fqsen =
                $this->context->getScopeFQSEN()->withMethodName($function_name);

            if (!$this->context->getCodeBase()->hasMethodWithFQSEN(
                $method_fqsen
            )) {
                // TODO: There are missing methods like 'apache_note'
                //       that we'll want to do something with other
                //       than ignoring.
                // assert(false, "Method with FQSEN $method_fqsen not found.");
                return $this->context;
            }

            // Get the current method in scope or fail real hard
            // if we're in an impossible state
            $method = $this->context->getCodeBase()->getMethodByFQSEN(
                $method_fqsen
            );

            // if($func_name == 'func_get_args' || $func_name == 'func_get_arg' || $func_name == 'func_num_args') {
            if (in_array($function_name, [
                'func_get_args',
                'func_get_arg',
                'func_num_args'
            ])) {

                // TODO: We don't actually have to check the class
                //       scope. Scoped methods can be method or
                //       functions.

                // if(!empty($current_class)) {
                if ($this->context->isClassScope()) {
                    $method->setNumberOfOptionalParameters(999999);
                    // $classes[$lc]['methods'][strtolower($current_function)]['optional'] = 999999;

                } else {
                    $method->setNumberOfOptionalParameters(999999);
                    // $functions[strtolower($current_function)]['optional'] = 999999;
                }
            }
        }

        if(Configuration::instance()->bc_checks) {
            \Phan\Deprecated::bc_check(
                $this->context->getFile(),
                $node
            );
        }

        return $this->context;
    }

    /**
     * Visit a node with kind `\ast\AST_STATIC_CALL`
     *
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||    public function visitCall(Node $node) : Context {
        $found = false;
        $call_node = $node->children[0];

        if($call_node->kind == \ast\AST_NAME) {

            $function_name = $call_node->children[0];

            $method_fqsen =
                $this->context->getScopeFQSEN()
                ->withMethodName($this->context, $function_name);

            if (!$this->context->getCodeBase()->hasMethodWithFQSEN(
                $method_fqsen
            )) {
                // TODO: There are missing methods like 'apache_note'
                //       that we'll want to do something with other
                //       than ignoring.
                // assert(false, "Method with FQSEN $method_fqsen not found.");
                return $this->context;
            }

            // Get the current method in scope or fail real hard
            // if we're in an impossible state
            $method = $this->context->getCodeBase()->getMethodByFQSEN(
                $method_fqsen
            );

            // if($func_name == 'func_get_args' || $func_name == 'func_get_arg' || $func_name == 'func_num_args') {
            if (in_array($function_name, [
                'func_get_args',
                'func_get_arg',
                'func_num_args'
            ])) {

                // TODO: We don't actually have to check the class
                //       scope. Scoped methods can be method or
                //       functions.

                // if(!empty($current_class)) {
                if ($this->context->isClassScope()) {
                    $method->setNumberOfOptionalParameters(999999);
                    // $classes[$lc]['methods'][strtolower($current_function)]['optional'] = 999999;

                } else {
                    $method->setNumberOfOptionalParameters(999999);
                    // $functions[strtolower($current_function)]['optional'] = 999999;
                }
            }
        }

        if(Configuration::instance()->bc_checks) {
            \Phan\Deprecated::bc_check(
                $this->context->getFile(),
                $node
            );
        }

        return $this->context;
    }

    /**
     * Visit a node with kind `\ast\AST_STATIC_CALL`
     *
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL)))))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_STATIC_CALL))
            (
                (AST_STATIC_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL))
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL)))))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_STATIC_CALL))
            (
                (AST_STATIC_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))