	protected function _mapRecord($data) {
		$primary = $this->_model;
		$conn = $primary::connection();
		$main = $record = array();
		$i = 0;

		foreach ($this->_keyIndex as $key => $value) {
			$main[$key] = $data[$key];
		}

		do {
			$offset = 0;
			if ($i != 0) {
				$keys = array();
				foreach ($this->_keyIndex as $key => $value) {
					$keys[$key] = $data[$key];
				}
				if ($main != $keys) {
					$this->_result->prev();
					break;
				}
			}
			foreach ($this->_columns as $name => $fields) {
				$fieldCount = count($fields);
				$record[$i][$name] = array_combine($fields, array_slice($data, $offset, $fieldCount));
				$offset += $fieldCount;
			}
			$i++;
		} while ($data = $this->_result->next());

		$relMap = $this->_query->relationships();
		return $this->_hydrateRecord($this->_dependencies, $primary, $record, 0, $i, '', $relMap, $conn);
	}

	/**
	 * Hydrate a 2 dimensional PDO `Result` array
	 *
	 * @param array $relations The cascading with relation
	 * @param string $primary Model classname
	 * @param array $record Loaded Records
	 * @param integer $min
	 * @param integer $max
	 * @param string $name Alias name
	 * @param array $relMap The query relationships array
	 * @param object $conn The connection object
	 * @return object Returns a `Record` object
	 */
||||||||	protected function _mapRecord($data) {
		$primary = $this->_model;
		$conn = $primary::connection();
		$main = $record = array();
		$i = 0;

		foreach ($this->_keyIndex as $key => $value) {
			$main[$key] = $data[$key];
		}

		do {
			$offset = 0;
			if ($i != 0) {
				$keys = array();
				foreach ($this->_keyIndex as $key => $value) {
					$keys[$key] = $data[$key];
				}
				if ($main != $keys) {
					$this->_result->prev();
					break;
				}
			}
			foreach ($this->_columns as $name => $fields) {
				$fieldCount = count($fields);
				$record[$i][$name] = array_combine($fields, array_slice($data, $offset, $fieldCount));
				$offset += $fieldCount;
			}
			$i++;
		} while ($main && $data = $this->_result->next());

		$relMap = $this->_query->relationships();
		return $this->_hydrateRecord($this->_dependencies, $primary, $record, 0, $i, '', $relMap, $conn);
	}

	/**
	 * Hydrate a 2 dimensional PDO `Result` array
	 *
	 * @param array $relations The cascading with relation
	 * @param string $primary Model classname
	 * @param array $record Loaded Records
	 * @param integer $min
	 * @param integer $max
	 * @param string $name Alias name
	 * @param array $relMap The query relationships array
	 * @param object $conn The connection object
	 * @return object Returns a `Record` object
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_DO_WHILE
        (
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY))
                        (AST_FOREACH
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_BREAK
                                        (NULL))))))))
            (AST_FOREACH
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_VAR))))
            (AST_POST_INC
                (AST_VAR)))
        (AST_ASSIGN
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_VAR)
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_DO_WHILE
        (
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY))
                        (AST_FOREACH
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_BREAK
                                        (NULL))))))))
            (AST_FOREACH
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR))
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_VAR))))
            (AST_POST_INC
                (AST_VAR)))
        (AST_BINARY_OP
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (AST_VAR)))))