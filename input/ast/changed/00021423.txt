    public function test_available_update() {
        $pluginman = testable_plugin_manager::instance();
        $plugins = $pluginman->get_plugins();
        $this->assertFalse($plugins['mod']['foo']->available_update());
        $this->assertNull($plugins['mod']['buz']->available_update());
        $this->assertIsA($plugins['mod']['bar']->available_update(), 'stdClass');
        $this->assertEqual($plugins['mod']['bar']->available_update()->version, 2012030501);
    }
}


/**
 * Tests of the basic API of the available update checker
 */
class available_update_checker_test extends UnitTestCase {

    public function test_core_available_update() {
        $provider = testable_available_update_checker::instance();
        $this->assertTrue($provider instanceof available_update_checker);
    }

    public function test_merge_components_info() {
        $old = (object)array(
            '2.2' => (object)array(
                'core' => (object)array(
                    'version' => 2011120501.11,
                    'release' => '2.2.1+ (Build: 20120301)',
                    'maturity' => MATURITY_STABLE,
                ),
                'mod_foo' => (object)array(
                    'version' => 2011010100,
                ),
                'mod_bar' => (object)array(
                    'version' => 2011020200,
                )
            )
        );
        $new = (object)array(
            '2.2' => (object)array(
                'core' => (object)array(
                    'version' => 2011120501.12,
                    'release' => '2.2.1+ (Build: 20120302)',
                    'maturity' => MATURITY_STABLE,
                ),
                'mod_bar' => (object)array(
                    'version' => 2011020201,
                ),
            ),
            '2.3' => (object)array(
                'core' => (object)array(
                    'version' => 2012030100.00,
                    'release' => '2.3dev (Build: 20120301)',
                    'maturity' => MATURITY_ALPHA,
                ),
                'mod_foo' => (object)array(
                    'version' => 2012010200,
                )
            )
        );
        $checker = testable_available_update_checker::instance();
        $now = time();
        $merged = $checker->merge_components_info($old, $new, $now);
        $this->assertEqual($merged->{2.2}->core->version, 2011120501.12); // from $new
        $this->assertEqual($merged->{2.2}->mod_bar->version, 2011020201); // from $new
        $this->assertEqual($merged->{2.2}->mod_foo->version, 2011010100); // from $old
        $this->assertEqual($merged->{2.3}->core->version, 2012030100.00); // from $new
        $this->assertFalse(isset($merged->{2.3}->mod_bar));
    }
}||||||||    public function test_available_update() {
        $pluginman = testable_plugin_manager::instance();
        $plugins = $pluginman->get_plugins();
        $this->assertNull($plugins['mod']['bar']->available_updates());
        $this->assertIsA($plugins['mod']['foo']->available_updates(), 'array');
        foreach ($plugins['mod']['foo']->available_updates() as $availableupdate) {
            $this->assertIsA($availableupdate, 'available_update_info');
        }
    }
}


/**
 * Tests of the basic API of the available update checker
 */
class available_update_checker_test extends UnitTestCase {

    public function test_core_available_update() {
        $provider = testable_available_update_checker::instance();
        $this->assertTrue($provider instanceof available_update_checker);
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_DIM
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_DIM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (SCALAR))))))