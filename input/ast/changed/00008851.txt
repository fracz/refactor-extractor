        public function set_active_instance($uid) {


        } // set_active_instance

        /**
         * get_active_instance
         * This returns the UID of the current active instance
         * false if none are active
         */
||||||||        public function set_active_instance($uid,$user_id='') {

		// Not an admin? bubkiss!
		if (!$GLOBALS['user']->has_access('100')) {
			$user_id = $GLOBALS['user']->id;
		}

		$user_id = $user_id ? $user_id : $GLOBALS['user']->id;

		Preference::update('httpq_active',$user_id,intval($uid));

		return true;

        } // set_active_instance

        /**
         * get_active_instance
         * This returns the UID of the current active instance
         * false if none are active
         */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_PROP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_VAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CONST)))