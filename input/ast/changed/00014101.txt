	public function getCached($columns = array('*'))
	{
		if (is_null($this->columns)) $this->columns = $columns;

		// If the query is requested ot be cached, we will cache it using a unique key
		// for this database connection and query statement, including the bindings
		// that are used on this query, providing great convenience when caching.
		list($key, $minutes) = $this->getCacheInfo();

		$cache = $this->connection->getCacheManager();

		$callback = $this->getCacheCallback($columns);

		// If the "minutes" value is less than zero, we will use that as the indicator
		// that the value should be remembered values should be stored indefinitely
		// and if we have minutes we will use the typical remember function here.
		if ($minutes < 0)
		{
			return $cache->rememberForever($key, $callback);
		}
		else
		{
			return $cache->remember($key, $minutes, $callback);
		}
	}

	/**
	 * Get the cache key and cache minutes as an array.
	 *
	 * @return array
	 */
||||||||	public function getCached($columns = array('*'))
	{
		if (is_null($this->columns)) $this->columns = $columns;

		// If the query is requested ot be cached, we will cache it using a unique key
		// for this database connection and query statement, including the bindings
		// that are used on this query, providing great convenience when caching.
		list($key, $minutes) = $this->getCacheInfo();

		$cache = $this->getCache();

		$callback = $this->getCacheCallback($columns);

		// If the "minutes" value is less than zero, we will use that as the indicator
		// that the value should be remembered values should be stored indefinitely
		// and if we have minutes we will use the typical remember function here.
		if ($minutes < 0)
		{
			return $cache->rememberForever($key, $callback);
		}
		else
		{
			return $cache->remember($key, $minutes, $callback);
		}
	}

	/**
	 * Get the cache object with tags assigned, if applicable
	 *
	 * @return \Illuminate\Cache\StoreInterface
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))))