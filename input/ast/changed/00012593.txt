	public function model($key, $class, Closure $callback = null)
	{
		$this->bind($key, function($value) use ($class, $callback)
		{
			if (is_null($value)) return;

			// For model binders, we will attempt to retrieve the models using the first
			// method on the model instance. If we cannot retrieve the models we'll
			// throw a not found exception otherwise we will return the instance.
			if ($model = (new $class)->find($value))
			{
				return $model;
			}

			// If a callback was supplied to the method we will call that to determine
			// what we should do when the model is not found. This just gives these
			// developer a little greater flexibility to decide what will happen.
			if ($callback instanceof Closure)
			{
				return call_user_func($callback, $value);
			}

			throw new NotFoundHttpException;
		});
	}

	/**
	 * Add a new route parameter binder.
	 *
	 * @param  string  $key
	 * @param  string|callable  $binder
	 * @return void
	 */
||||||||	public function model($key, $class, Closure $callback = null)
	{
		$this->bind($key, function($value) use ($class, $callback)
		{
			if (is_null($value)) return;

			// For model binders, we will attempt to retrieve the models using the first
			// method on the model instance. If we cannot retrieve the models we'll
			// throw a not found exception otherwise we will return the instance.
			$instance = new $class;

			if ($model = $instance->where($instance->getRouteKeyName(), $value)->first())
			{
				return $model;
			}

			// If a callback was supplied to the method we will call that to determine
			// what we should do when the model is not found. This just gives these
			// developer a little greater flexibility to decide what will happen.
			if ($callback instanceof Closure)
			{
				return call_user_func($callback, $value);
			}

			throw new NotFoundHttpException;
		});
	}

	/**
	 * Add a new route parameter binder.
	 *
	 * @param  string  $key
	 * @param  string|callable  $binder
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR)
                    (AST_CLOSURE_VAR))
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_RETURN
                                    (NULL)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_NEW
                                        (AST_VAR))
                                    (
                                        (AST_VAR))))
                            (
                                (AST_RETURN
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_INSTANCEOF
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))))))
                    (AST_THROW
                        (AST_NEW)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR)
                    (AST_CLOSURE_VAR))
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_RETURN
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_VAR)))))
                            (
                                (AST_RETURN
                                    (AST_VAR)))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_INSTANCEOF
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))))))
                    (AST_THROW
                        (AST_NEW)))))))