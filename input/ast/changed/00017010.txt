	public function parseEncodedString(&$s,&$p) {
		$l = $this->parseEncodedBinary($s, $p);

		if (
			($l === null)
			|| ($l === false)
		) {
			return $l;
		}

		$o = $p;
		$p += $l;

		return binarySubstr($s, $o, $l);
	}

	/**
	 * Generates auth. token
	 * @param string Scramble string
	 * @param string Password
	 * @return string Result
	 */
||||||||	public function parseEncodedString() {
		$l = $this->parseEncodedBinary();
		if (($l === null) || ($l === false)) {
			return $l;
		}
		return $this->read($l);
	}

	/**
	 * Generates auth. token
	 * @param string Scramble string
	 * @param string Password
	 * @return string Result
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_VAR))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))