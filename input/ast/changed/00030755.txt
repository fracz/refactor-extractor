    public function callAggregateAllPlugins($visits, $visitsConverted)
    {
        Log::debug("PluginsArchiver::%s: Initializing archiving process for all plugins [visits = %s, visits converted = %s]",
            __FUNCTION__, $visits, $visitsConverted);

        $this->archiveProcessor->setNumberOfVisits($visits, $visitsConverted);

        $archivers = $this->getPluginArchivers();

        foreach ($archivers as $pluginName => $archiverClass) {
            // We clean up below all tables created during this function call (and recursive calls)
            $latestUsedTableId = Manager::getInstance()->getMostRecentTableId();

            /** @var Archiver $archiver */
            $archiver = new $archiverClass($this->archiveProcessor);

            if (!$archiver->isEnabled()) {
                Log::debug("PluginsArchiver::%s: Skipping archiving for plugin '%s'.", __FUNCTION__, $pluginName);
                continue;
            }

            if ($this->shouldProcessReportsForPlugin($pluginName)) {

                $this->logAggregator->setQueryOriginHint($pluginName);

                try {
                    $timer = new Timer();
                    if ($this->isSingleSiteDayArchive) {
                        Log::debug("PluginsArchiver::%s: Archiving day reports for plugin '%s'.", __FUNCTION__, $pluginName);

                        $archiver->aggregateDayReport();
                    } else {
                        Log::debug("PluginsArchiver::%s: Archiving period reports for plugin '%s'.", __FUNCTION__, $pluginName);

                        $archiver->aggregateMultipleReports();
                    }

                    $this->logAggregator->setQueryOriginHint('');

                    Log::debug("PluginsArchiver::%s: %s while archiving %s reports for plugin '%s'.",
                        __FUNCTION__,
                        $timer->getMemoryLeak(),
                        $this->params->getPeriod()->getLabel(),
                        $pluginName
                    );
                } catch (Exception $e) {
                    $className = get_class($e);
                    $exception = new $className($e->getMessage() . " - caused by plugin $pluginName", $e->getCode(), $e);

                    throw $exception;
                }
            } else {
                Log::debug("PluginsArchiver::%s: Not archiving reports for plugin '%s'.", __FUNCTION__, $pluginName);
            }

            Manager::getInstance()->deleteAll($latestUsedTableId);
            unset($archiver);
        }
    }

||||||||    public function callAggregateAllPlugins($visits, $visitsConverted)
    {
        Log::debug("PluginsArchiver::%s: Initializing archiving process for all plugins [visits = %s, visits converted = %s]",
            __FUNCTION__, $visits, $visitsConverted);

        $this->archiveProcessor->setNumberOfVisits($visits, $visitsConverted);

        $archivers = $this->getPluginArchivers();

        foreach ($archivers as $pluginName => $archiverClass) {
            // We clean up below all tables created during this function call (and recursive calls)
            $latestUsedTableId = Manager::getInstance()->getMostRecentTableId();

            /** @var Archiver $archiver */
            $archiver = $this->makeNewArchiverObject($archiverClass, $pluginName);

            if (!$archiver->isEnabled()) {
                Log::debug("PluginsArchiver::%s: Skipping archiving for plugin '%s'.", __FUNCTION__, $pluginName);
                continue;
            }

            if ($this->shouldProcessReportsForPlugin($pluginName)) {

                $this->logAggregator->setQueryOriginHint($pluginName);

                try {
                    $timer = new Timer();
                    if ($this->isSingleSiteDayArchive) {
                        Log::debug("PluginsArchiver::%s: Archiving day reports for plugin '%s'.", __FUNCTION__, $pluginName);

                        $archiver->aggregateDayReport();
                    } else {
                        Log::debug("PluginsArchiver::%s: Archiving period reports for plugin '%s'.", __FUNCTION__, $pluginName);

                        $archiver->aggregateMultipleReports();
                    }

                    $this->logAggregator->setQueryOriginHint('');

                    Log::debug("PluginsArchiver::%s: %s while archiving %s reports for plugin '%s'.",
                        __FUNCTION__,
                        $timer->getMemoryLeak(),
                        $this->params->getPeriod()->getLabel(),
                        $pluginName
                    );
                } catch (Exception $e) {
                    $className = get_class($e);
                    $exception = new $className($e->getMessage() . " - caused by plugin $pluginName", $e->getCode(), $e);

                    throw $exception;
                }
            } else {
                Log::debug("PluginsArchiver::%s: Not archiving reports for plugin '%s'.", __FUNCTION__, $pluginName);
            }

            Manager::getInstance()->deleteAll($latestUsedTableId);
            unset($archiver);
        }
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_MAGIC_CONST)
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_MAGIC_CONST)
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)))
                        (AST_TRY
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_MAGIC_CONST)
                                                    (AST_VAR)))
                                            (AST_METHOD_CALL
                                                (AST_VAR))))
                                    (AST_IF_ELEM
                                        (NULL)
                                        (
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_MAGIC_CONST)
                                                    (AST_VAR)))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR)))
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)
                                        (AST_MAGIC_CONST)
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (AST_VAR))))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (AST_VAR)
                                                (
                                                    (AST_BINARY_OP
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_ENCAPS_LIST
                                                            (SCALAR)
                                                            (AST_VAR)))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (AST_VAR))))
                                        (AST_THROW
                                            (AST_VAR)))))
                            (NULL))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_MAGIC_CONST)
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (AST_VAR)))
            (AST_UNSET
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_MAGIC_CONST)
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_MAGIC_CONST)
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)))
                        (AST_TRY
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_NEW))
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_MAGIC_CONST)
                                                    (AST_VAR)))
                                            (AST_METHOD_CALL
                                                (AST_VAR))))
                                    (AST_IF_ELEM
                                        (NULL)
                                        (
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)
                                                    (AST_MAGIC_CONST)
                                                    (AST_VAR)))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR)))
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)
                                        (AST_MAGIC_CONST)
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (AST_VAR))))
                            (AST_CATCH_LIST
                                (AST_CATCH
                                    (AST_NAME_LIST)
                                    (AST_VAR)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR))))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (AST_VAR)
                                                (
                                                    (AST_BINARY_OP
                                                        (AST_METHOD_CALL
                                                            (AST_VAR))
                                                        (AST_ENCAPS_LIST
                                                            (SCALAR)
                                                            (AST_VAR)))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR))
                                                    (AST_VAR))))
                                        (AST_THROW
                                            (AST_VAR)))))
                            (NULL))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_MAGIC_CONST)
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (AST_VAR)))
            (AST_UNSET
                (AST_VAR)))))