    public function execute(InputInterface $input, OutputInterface $output)
    {
        $baseDir = $input->getOption('base-dir');
        $config = GrumPHP::loadFromComposerFile($baseDir);

        $filesystem = new Filesystem();
        foreach (self::$hooks as $hook) {
            $gitHook = $config->getGitDir() . '/.git/hooks/' . $hook;
            $hookTemplate = GRUMPHP_PATH . '/resources/hooks/' . $hook;

            if (!$filesystem->exists($hookTemplate)) {
                throw new \RuntimeException(sprintf('Could not find hook template for %s at %s.', $hook, $hookTemplate));
            }

            $content = $this->parseHookBody($config, $hook, $hookTemplate);
            file_put_contents($gitHook, $content);
            $filesystem->chmod($gitHook, 0775);
        }
    }

    /**
     * @param $config
     * @param $hook
     * @param $templateFile
     *
     * @return mixed
     */
||||||||    public function execute(InputInterface $input, OutputInterface $output)
    {
        $filesystem = $this->grumPHP->getContainer()->get('filesystem');
        foreach (self::$hooks as $hook) {
            $gitHook = $this->grumPHP->getGitDir() . '/.git/hooks/' . $hook;
            $hookTemplate = GRUMPHP_PATH . '/resources/hooks/' . $hook;

            if (!$filesystem->exists($hookTemplate)) {
                throw new \RuntimeException(sprintf('Could not find hook template for %s at %s.', $hook, $hookTemplate));
            }

            $content = $this->parseHookBody($hook, $hookTemplate);
            file_put_contents($gitHook, $content);
            $filesystem->chmod($gitHook, 0775);
        }
    }

    /**
     * @param $hook
     * @param $templateFile
     *
     * @return mixed
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_VAR)
                                            (AST_VAR)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR))))
    (AST_FOREACH
        (AST_STATIC_PROP)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_VAR)
                                            (AST_VAR)))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (SCALAR))))))