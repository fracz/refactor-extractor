	public function createIndex($name, $table, $column, $unique = false)
	{
		echo "    > create" . ($unique ? ' unique' : '') . " index $name on $table ($column) ...";
		$time = microtime(true);
		$this->getDbConnection()->createCommand()->createIndex($name, $table, $column, $unique);
		echo " done (time: " . sprintf('%.3f', microtime(true) - $time) . "s)\n";
	}

	/**
	 * Builds and executes a SQL statement for dropping an index.
	 * @param string $name the name of the index to be dropped. The name will be properly quoted by the method.
	 * @param string $table the table whose index is to be dropped. The name will be properly quoted by the method.
	 */
||||||||	public function createIndex($name, $table, $column, $unique = false)
	{
		echo "    > create" . ($unique ? ' unique' : '') . " index $name on $table ($column) ...";
		$time = microtime(true);
		$this->db->createCommand()->createIndex($name, $table, $column, $unique)->execute();
		echo " done (time: " . sprintf('%.3f', microtime(true) - $time) . "s)\n";
	}

	/**
	 * Builds and executes a SQL statement for dropping an index.
	 * @param string $name the name of the index to be dropped. The name will be properly quoted by the method.
	 * @param string $table the table whose index is to be dropped. The name will be properly quoted by the method.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CONST)))
                            (AST_VAR)))))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CONST)))
                            (AST_VAR)))))
            (SCALAR))))