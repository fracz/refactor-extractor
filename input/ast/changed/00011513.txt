	public function _executeTestsRenamed($di)
	{

		$manager = $di->getShared('modelsManager');

		$success = $manager->existsBelongsTo('RobottersDeles', 'Robotters');
		$this->assertTrue($success);

		$success = $manager->existsBelongsTo('RobottersDeles', 'Deles');
		$this->assertTrue($success);

		$success = $manager->existsHasMany('Robotters', 'RobottersDeles');
		$this->assertTrue($success);

		$success = $manager->existsHasMany('Deles', 'RobottersDeles');
		$this->assertTrue($success);

		$robotter = Robotters::findFirst();
		$this->assertNotEquals($robotter, false);

		$robottersDeles = $robotter->getRobottersDeles();
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 3);

		/** Passing parameters to magic methods **/
		$robottersDeles = $robotter->getRobottersDeles("delesCode = 1");
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 1);

		$robottersDeles = $robotter->getRobottersDeles(array(
			"delesCode > :delesCode:",
			"bind" => array("delesCode" => 1)
		));
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 2);
		$this->assertEquals($robottersDeles->getFirst()->delesCode, 2);

		$robottersDeles = $robotter->getRobottersDeles(array(
			"delesCode > :delesCode:",
			"bind" => array("delesCode" => 1),
			"order" => "delesCode DESC"
		));
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 2);
		$this->assertEquals($robottersDeles->getFirst()->delesCode, 3);

		/** Magic counting */
		$number = $robotter->countRobottersDeles();
		$this->assertEquals($number, 3);

		$dele = Deles::findFirst();
		$this->assertNotEquals($dele, false);

		$robottersDeles = $dele->getRobottersDeles();
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 1);

		$number = $dele->countRobottersDeles();
		$this->assertEquals($number, 1);

		$robotterDele = RobottersDeles::findFirst();
		$this->assertNotEquals($robotterDele, false);

		$robotter = $robotterDele->getRobotters();
		$this->assertEquals(get_class($robotter), 'Robotters');

		$dele = $robotterDele->getDeles();
		$this->assertEquals(get_class($dele), 'Deles');

		/** Relations in namespaced models */
		$robotter = Some\Robotters::findFirst();
		$this->assertNotEquals($robotter, false);

		$robottersDeles = $robotter->getRobottersDeles();
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 3);

		$robottersDeles = $robotter->getRobottersDeles("delesCode = 1");
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 1);

	}

}||||||||	public function _executeTestsRenamed($di)
	{

		$manager = $di->getShared('modelsManager');

		$success = $manager->existsBelongsTo('RobottersDeles', 'Robotters');
		$this->assertTrue($success);

		$success = $manager->existsBelongsTo('RobottersDeles', 'Deles');
		$this->assertTrue($success);

		$success = $manager->existsHasMany('Robotters', 'RobottersDeles');
		$this->assertTrue($success);

		$success = $manager->existsHasMany('Deles', 'RobottersDeles');
		$this->assertTrue($success);

		$robotter = Robotters::findFirst();
		$this->assertNotEquals($robotter, false);

		$robottersDeles = $robotter->getRobottersDeles();
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 3);

		/** Passing parameters to magic methods **/
		$robottersDeles = $robotter->getRobottersDeles("delesCode = 1");
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 1);

		$robottersDeles = $robotter->getRobottersDeles(array(
			"delesCode > :delesCode:",
			"bind" => array("delesCode" => 1)
		));
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 2);
		$this->assertEquals($robottersDeles->getFirst()->delesCode, 2);

		$robottersDeles = $robotter->getRobottersDeles(array(
			"delesCode > :delesCode:",
			"bind" => array("delesCode" => 1),
			"order" => "delesCode DESC"
		));
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 2);
		$this->assertEquals($robottersDeles->getFirst()->delesCode, 3);

		/** Magic counting */
		$number = $robotter->countRobottersDeles();
		$this->assertEquals($number, 3);

		$dele = Deles::findFirst();
		$this->assertNotEquals($dele, false);

		$robottersDeles = $dele->getRobottersDeles();
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 1);

		$number = $dele->countRobottersDeles();
		$this->assertEquals($number, 1);

		$robotterDele = RobottersDeles::findFirst();
		$this->assertNotEquals($robotterDele, false);

		$robotter = $robotterDele->getRobotters();
		$this->assertEquals(get_class($robotter), 'Robotters');

		$dele = $robotterDele->getDeles();
		$this->assertEquals(get_class($dele), 'Deles');

		/** Relations in namespaced models */
		$robotter = Some\Robotters::findFirst();
		$this->assertNotEquals($robotter, false);

		$robottersDeles = $robotter->getRobottersDeles();
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 3);

		$robottersDeles = $robotter->getRobottersDeles("delesCode = 1");
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 1);

		$robottersDeles = $robotter->getRobottersDeles(array(
			"delesCode > :delesCode:",
			"bind" => array("delesCode" => 1),
			"order" => "delesCode DESC"
		));
		$this->assertEquals(get_class($robottersDeles), 'Phalcon\Mvc\Model\Resultset\Simple');
		$this->assertEquals(count($robottersDeles), 2);
		$this->assertEquals($robottersDeles->getFirst()->delesCode, 3);

	}

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR))))