	public static function setupBeforeClass()
	{
		if (!file_exists(_PS_MODULE_DIR_.'/prestafraud/prestafraud.php'))
		{
			$download = file_put_contents(_PS_CACHE_DIR_.'sandbox/prestafraud.zip', Tools::addonsRequest('module', array('id_module' => 4181)));
			Assert::assertGreaterThan(20000, $download, 'Fail download module from Addons');
			$extract = Tools::ZipExtract(_PS_CACHE_DIR_.'sandbox/prestafraud.zip', _PS_MODULE_DIR_);
			Assert::assertTrue($extract, 'Fail extract module');
			unlink(_PS_CACHE_DIR_.'sandbox/prestafraud.zip');
		}

		self::$prestafraud = Module::getInstanceByName('prestafraud');

		Assert::assertTrue(is_object(self::$prestafraud), 'Fail Module::getInstanceByName(\'prestafraud\')');
		Assert::assertEquals('prestafraud', self::$prestafraud->name);
		if (!Module::isInstalled('prestafraud'))
			Assert::assertTrue((bool)self::$prestafraud->install());

		$uniqid = uniqid().time();
		$email = 'prestabot+'.$uniqid.'@gmail.com';
		$shop_url = 'http://www.prestashop-unit-test-'.$uniqid.'.com/';
		$result = self::$prestafraud->_createAccount($email, $shop_url);

		Assert::assertTrue($result, implode(', ', self::$prestafraud->_errors));
	}

||||||||	public static function setupBeforeClass()
	{
		if (!file_exists(_PS_MODULE_DIR_.'/prestafraud/prestafraud.php'))
		{
			$download = file_put_contents(_PS_CACHE_DIR_.'sandbox/prestafraud.zip', Tools::addonsRequest('module', array('id_module' => 4181)));
			Assert::assertGreaterThan(20000, $download, 'Fail download module from Addons');
			$extract = Tools::ZipExtract(_PS_CACHE_DIR_.'sandbox/prestafraud.zip', _PS_MODULE_DIR_);
			Assert::assertTrue($extract, 'Fail extract module');
			unlink(_PS_CACHE_DIR_.'sandbox/prestafraud.zip');
		}

		self::$prestafraud = Module::getInstanceByName('prestafraud');

		Assert::assertTrue(is_object(self::$prestafraud), 'Fail Module::getInstanceByName(\'prestafraud\')');
		Assert::assertEquals('prestafraud', self::$prestafraud->name);
		if (!Module::isInstalled('prestafraud'))
			Assert::assertTrue((bool)self::$prestafraud->install());

		Assert::assertTrue((bool)self::$prestafraud->isRegisteredInHook('actionValidateOrder'), 'Fail Module::isRegisteredInHook(\'actionValidateOrder\')');

		$uniqid = uniqid().time();
		$email = 'prestabot+'.$uniqid.'@gmail.com';
		$shop_url = 'http://www.prestashop-unit-test-'.$uniqid.'.com/';
		$result = self::$prestafraud->_createAccount($email, $shop_url);

		Assert::assertTrue($result, implode(', ', self::$prestafraud->_errors));
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (SCALAR))))))))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_CONST))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (AST_STATIC_PROP)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_PROP))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CAST
                            (AST_METHOD_CALL
                                (AST_STATIC_PROP))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL)
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_PROP)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (SCALAR))))))))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_BINARY_OP
                                (AST_CONST)
                                (SCALAR))
                            (AST_CONST))))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (AST_STATIC_PROP)))
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_PROP
                (AST_STATIC_PROP))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (AST_CAST
                            (AST_METHOD_CALL
                                (AST_STATIC_PROP))))))))
    (AST_STATIC_CALL
        (
            (AST_CAST
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (SCALAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL)
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_PROP
                        (AST_STATIC_PROP)))))))