    public function initRelation($model, $field = null)
    {
        if ($field == null) {
            $field = post(self::PARAM_FIELD);
        }

        $this->config = $this->originalConfig;
        $this->model = $model;
        $this->field = $field;

        if ($field == null) {
            return;
        }

        if (!$this->model) {
            throw new ApplicationException(Lang::get(
                'backend::lang.relation.missing_model',
                ['class'=>get_class($this->controller)]
            ));
        }

        if (!$this->model instanceof Model) {
            throw new ApplicationException(Lang::get(
                'backend::lang.model.invalid_class',
                ['model'=>get_class($this->model), 'class'=>get_class($this->controller)]
            ));
        }

        if (!$this->getConfig($field)) {
            throw new ApplicationException(Lang::get('backend::lang.relation.missing_definition', compact('field')));
        }

        $this->alias = camel_case('relation ' . $field);
        $this->config = $this->makeConfig($this->getConfig($field), $this->requiredRelationProperties);

        /*
         * Relationship details
         */
        $this->relationName = $field;
        $this->relationType = $this->model->getRelationType($field);
        $this->relationObject = $this->model->{$field}();
        $this->relationModel = $this->relationObject->getRelated();

        $this->readOnly = $this->getConfig('readOnly');
        $this->viewMode = $this->evalViewMode();
        $this->manageMode = $this->evalManageMode();
        $this->manageId = post('manage_id');

        /*
         * Toolbar widget
         */
        if ($this->toolbarWidget = $this->makeToolbarWidget()) {
            $this->toolbarWidget->bindToController();
        }

        /*
         * View widget
         */
        if ($this->viewWidget = $this->makeViewWidget()) {
            $this->viewWidget->bindToController();
        }

        /*
         * Manage widget
         */
        if ($this->manageWidget = $this->makeManageWidget()) {
            $this->manageWidget->bindToController();
        }

        /*
         * Pivot widget
         */
        if ($this->manageMode == 'pivot') {
            if ($this->pivotWidget = $this->makePivotWidget()) {
                $this->pivotWidget->bindToController();
            }
        }
    }

    /**
     * Determine the view mode based on the model relationship type.
     * @return string
     */
||||||||    public function initRelation($model, $field = null)
    {
        if ($field == null) {
            $field = post(self::PARAM_FIELD);
        }

        $this->config = $this->originalConfig;
        $this->model = $model;
        $this->field = $field;

        if ($field == null) {
            return;
        }

        if (!$this->model) {
            throw new ApplicationException(Lang::get(
                'backend::lang.relation.missing_model',
                ['class'=>get_class($this->controller)]
            ));
        }

        if (!$this->model instanceof Model) {
            throw new ApplicationException(Lang::get(
                'backend::lang.model.invalid_class',
                ['model'=>get_class($this->model), 'class'=>get_class($this->controller)]
            ));
        }

        if (!$this->getConfig($field)) {
            throw new ApplicationException(Lang::get('backend::lang.relation.missing_definition', compact('field')));
        }

        $this->alias = camel_case('relation ' . $field);
        $this->config = $this->makeConfig($this->getConfig($field), $this->requiredRelationProperties);

        /*
         * Relationship details
         */
        $this->relationName = $field;
        $this->relationType = $this->model->getRelationType($field);
        $this->relationObject = $this->model->{$field}();
        $this->relationModel = $this->relationObject->getRelated();

        $this->readOnly = $this->getConfig('readOnly');
        $this->toolbarButtons = $this->evalToolbarButtons();
        $this->viewMode = $this->viewMode ?: $this->evalViewMode();
        $this->manageMode = $this->manageMode ?: $this->evalManageMode();
        $this->manageId = post('manage_id');

        /*
         * Toolbar widget
         */
        if ($this->toolbarWidget = $this->makeToolbarWidget()) {
            $this->toolbarWidget->bindToController();
        }

        /*
         * View widget
         */
        if ($this->viewWidget = $this->makeViewWidget()) {
            $this->viewWidget->bindToController();
        }

        /*
         * Manage widget
         */
        if ($this->manageWidget = $this->makeManageWidget()) {
            $this->manageWidget->bindToController();
        }

        /*
         * Pivot widget
         */
        if ($this->manageMode == 'pivot') {
            if ($this->pivotWidget = $this->makePivotWidget()) {
                $this->pivotWidget->bindToController();
            }
        }
    }

    /**
     * Determine the default buttons based on the model relationship type.
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)))))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR))
                                        (AST_ARRAY_ELEM
                                            (AST_CALL
                                                (
                                                    (AST_PROP
                                                        (AST_VAR))))
                                            (SCALAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)))))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_PROP
                (AST_VAR))
            (NULL)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_PROP
                (AST_VAR))
            (NULL)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))))))))