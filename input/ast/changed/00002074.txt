    public function testCodecept()
    {
        $scenario = $this->scenario;

        $this->fire('test.before', new Test($this));
        $scenario->run();
        if (file_exists($this->bootstrap)) require $this->bootstrap;

        try {
            require $this->testfile;
        } catch (\PHPUnit_Framework_ExpectationFailedException $e) {
            $this->fireEnd('test.fail', new Fail($this, $e));
            throw $e;
        } catch (\Exception $e) {
            $this->fireEnd('test.fail.error', new Test($this));
            throw $e;
        }
        $this->fireEnd('test.success', new Test($this));
    }

}||||||||    public function testCodecept()
    {
        $scenario = $this->scenario;

        $this->fire('test.before', new Test($this));
        $scenario->run();
        if (file_exists($this->bootstrap)) require $this->bootstrap;

        try {
            require $this->testfile;
        } catch (\Exception $e) {
            $this->fire('test.after', new Test($this));
            throw $e;
        }
        $this->fire('test.after', new Test($this));
    }

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_TRY
        (
            (AST_INCLUDE_OR_EVAL
                (AST_PROP
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_NEW
                                (
                                    (AST_VAR)))))
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_PROP
                        (AST_VAR))))))
    (AST_TRY
        (
            (AST_INCLUDE_OR_EVAL
                (AST_PROP
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_NEW
                                (
                                    (AST_VAR)))))
                    (AST_THROW
                        (AST_VAR)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (AST_VAR))))))