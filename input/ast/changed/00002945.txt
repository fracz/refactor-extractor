    public function creating(Issue $issue)
    {
        if (isset($issue->product_backlog_id)) {
            $product_backlog_id = $issue->product_backlog_id;
        } else {
            try {
                $product_backlog_id = UserStory::find($issue->user_story_id)->product_backlog_id;
            } catch (\Exception $e) {
                $product_backlog_id = $issue->sprint()->first()->product_backlog_id;
            }
        }

        $issue->slug = Helper::slug($issue->title);

        if (!isset($issue->user_id)) {
            $issue->user_id = Auth::user()->id;
        }

        if (!isset($issue->config_status_id)) {
            $issue->config_status_id = ConfigStatus::where('default', '=', 1)->first()->id;
        }

        $issue->product_backlog_id = $product_backlog_id;

        $tmp = app(Auth::user()->provider)->createOrUpdateIssue($issue);
        if (isset($tmp->id)) {
            $issue->provider_id = $tmp->id;
            $issue->number = $tmp->number;
        }
        // TODO Create a branch in GitHub
        //$model->branch->sync([['sprint_id' => true]]);
    }

||||||||    public function creating(Issue $issue)
    {
        if (isset($issue->product_backlog_id)) {
            $product_backlog_id = $issue->product_backlog_id;
        } else {
            try {
                $product_backlog_id = UserStory::find($issue->user_story_id)->product_backlog_id;
            } catch (\Exception $e) {
                $product_backlog_id = $issue->sprint()->first()->product_backlog_id;
            }
        }

        $issue->slug = Helper::slug($issue->title);

        if (!isset($issue->user_id)) {
            $issue->user_id = Auth::user()->id;
        }

        if (!isset($issue->config_status_id)) {
            $issue->config_status_id = ConfigStatus::where('default', '=', 1)->first()->id;
        }

        $issue->product_backlog_id = $product_backlog_id;

        $tmp = app(Auth::user()->provider)->createOrUpdateIssue($issue);
        if (isset($tmp->id)) {
            $issue->provider_id = $tmp->id;
            $issue->number = $tmp->number;
        }

        $issue->provider = strtolower(Auth::user()->provider);

        // TODO Create a branch in GitHub
        //$model->branch->sync([['sprint_id' => true]]);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_STATIC_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_STATIC_CALL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_PROP
                        (AST_STATIC_CALL))))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_STATIC_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_STATIC_CALL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_PROP
                        (AST_STATIC_CALL))))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_STATIC_CALL))))))