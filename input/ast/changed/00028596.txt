    static public function factory($defaultType = null, $force = false)
    {
        if (is_null($defaultType)) {
            $defaultType = 'table';
        }

        if ($force === true) {
            $type = $defaultType;
        } else {
            $type = Piwik_Common::getRequestVar('viewDataTable', $defaultType, 'string');
        }
        switch ($type) {
            case 'cloud':
                return new Piwik_ViewDataTable_Cloud();
                break;

            case 'graphPie':
                return new Piwik_ViewDataTable_GenerateGraphHTML_ChartPie();
                break;

            case 'graphVerticalBar':
                return new Piwik_ViewDataTable_GenerateGraphHTML_ChartVerticalBar();
                break;

            case 'graphEvolution':
                return new Piwik_ViewDataTable_GenerateGraphHTML_ChartEvolution();
                break;

            case 'sparkline':
                return new Piwik_ViewDataTable_Sparkline();
                break;

            case 'generateDataChartVerticalBar':
                return new Piwik_ViewDataTable_GenerateGraphData_ChartVerticalBar();
                break;

            case 'generateDataChartPie':
                return new Piwik_ViewDataTable_GenerateGraphData_ChartPie();
                break;

            case 'generateDataChartEvolution':
                return new Piwik_ViewDataTable_GenerateGraphData_ChartEvolution();
                break;

            case 'tableAllColumns':
                return new Piwik_ViewDataTable_HtmlTable_AllColumns();
                break;

            case 'tableGoals':
                return new Piwik_ViewDataTable_HtmlTable_Goals();
                break;

            case 'table':
            default:
                return new Piwik_ViewDataTable_HtmlTable();
                break;
        }
    }

    /**
     * Inits the object given the $currentControllerName, $currentControllerAction of
     * the calling controller action, eg. 'Referers' 'getLongListOfKeywords'.
     * The initialization also requires the $apiMethodToRequestDataTable of the API method
     * to call in order to get the DataTable, eg. 'Referers.getKeywords'.
     * The optional $controllerActionCalledWhenRequestSubTable defines the method name of the API to call when there is a idSubtable.
     * This value would be used by the javascript code building the GET request to the API.
     *
     * Example:
     *    For the keywords listing, a click on the row loads the subTable of the Search Engines for this row.
     *  In this case $controllerActionCalledWhenRequestSubTable = 'getSearchEnginesFromKeywordId'.
     *  The GET request will hit 'Referers.getSearchEnginesFromKeywordId'.
     *
     * @param string $currentControllerName eg. 'Referers'
     * @param string $currentControllerAction eg. 'getKeywords'
     * @param string $apiMethodToRequestDataTable eg. 'Referers.getKeywords'
     * @param string $controllerActionCalledWhenRequestSubTable eg. 'getSearchEnginesFromKeywordId'
     */
||||||||    static public function factory($defaultType = null, $action = false)
    {
        if ($action !== false) {
            $defaultProperties = self::getDefaultPropertiesForReport($action);
            if (isset($defaultProperties['default_view_type'])) {
                $defaultType = $defaultProperties['default_view_type'];
            }
        }

        if ($defaultType === null) {
            $defaultType = 'table';
        }

        $type = Piwik_Common::getRequestVar('viewDataTable', $defaultType, 'string');
        switch ($type) {
            case 'cloud':
                $result = new Piwik_ViewDataTable_Cloud();
                break;

            case 'graphPie':
                $result = new Piwik_ViewDataTable_GenerateGraphHTML_ChartPie();
                break;

            case 'graphVerticalBar':
                $result = new Piwik_ViewDataTable_GenerateGraphHTML_ChartVerticalBar();
                break;

            case 'graphEvolution':
                $result = new Piwik_ViewDataTable_GenerateGraphHTML_ChartEvolution();
                break;

            case 'sparkline':
                $result = new Piwik_ViewDataTable_Sparkline();
                break;

            case 'generateDataChartVerticalBar':
                $result = new Piwik_ViewDataTable_GenerateGraphData_ChartVerticalBar();
                break;

            case 'generateDataChartPie':
                $result = new Piwik_ViewDataTable_GenerateGraphData_ChartPie();
                break;

            case 'generateDataChartEvolution':
                $result = new Piwik_ViewDataTable_GenerateGraphData_ChartEvolution();
                break;

            case 'tableAllColumns':
                $result = new Piwik_ViewDataTable_HtmlTable_AllColumns();
                break;

            case 'tableGoals':
                $result = new Piwik_ViewDataTable_HtmlTable_Goals();
                break;

            case 'table':
            default:
                $result = new Piwik_ViewDataTable_HtmlTable();
                break;
        }

        if ($action !== false) {
            list($plugin, $controllerAction) = explode('.', $action);

            $subtableAction = $controllerAction;
            if (isset($defaultProperties['subtable_action'])) {
                $subtableAction = $defaultProperties['subtable_action'];
            }

            $result->init($plugin, $controllerAction, $action, $subtableAction, $defaultProperties);
        }

        return $result;
    }

    /**
     * Returns the list of view properties that can be overridden by query parameters.
     *
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_RETURN
                        (AST_NEW))
                    (AST_BREAK
                        (NULL)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_BREAK
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ISSET
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))