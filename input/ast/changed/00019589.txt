    private function isInteger($number)
    {
        // Check if number is a valid integer
        if (false !== filter_var($number, FILTER_VALIDATE_INT)) {
            return true;
        }

        // Check if number is invalid because of integer overflow
        $invalid = array_filter(
            str_split($number, strlen((string) PHP_INT_MAX) - 1),
            function ($chunk) {
                // Leading zeros should not invalidate the chunk
                $chunk = ltrim($chunk, '0');

                // Allow chunks containing zeros only
                return '' !== $chunk && false === filter_var($chunk, FILTER_VALIDATE_INT);
            }
        );

        return count($invalid) === 0;
    }

    /**
     * @param string $moneyValue
     * @param int    $targetDigits
     * @param int    $havingDigits
     *
     * @return string
     */
||||||||    public function isInteger()
    {
        return $this->fractionalPart === '';
    }

    /**
     * @return bool
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_CAST
                                        (AST_CONST))))
                            (SCALAR))))
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_RETURN
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_CONST)))))))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR))))