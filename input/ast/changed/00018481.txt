	public static function decrypt($value)
	{
		// Since all encrypted strings generated by this class are base64
		// encoded, we will first attempt to base64 decode the string.
		// If we can't do it, we'll bail out.
		if ( ! is_string($value = base64_decode($value, true)))
		{
			throw new \Exception('Decryption error. Input value is not valid base64 data.');
		}

		// Extract the input vector and the encrypted string from the value.
		// These will be used by Mcrypt to properly decrypt the value.
		$iv = substr($value, 0, static::iv_size());

		$value = substr($value, static::iv_size());

		return rtrim(mcrypt_decrypt(static::$cipher, Config::get('application.key'), $value, static::$mode, $iv), "\0");
	}

	/**
	 * Get the input vector size for the cipher and mode.
	 *
	 * Different ciphers and modes use varying lengths of input vectors.
	 *
	 * @return int
	 */
||||||||	public static function decrypt($value)
	{
		// Since all encrypted strings generated by this class are base64
		// encoded, we will first attempt to base64 decode the string.
		// If we can't do it, we'll bail out.
		if ( ! is_string($value = base64_decode($value, true)))
		{
			throw new \Exception('Decryption error. Input value is not valid base64 data.');
		}

		// Extract the input vector and the encrypted string from the value.
		// These will be used by Mcrypt to properly decrypt the value.
		$iv = substr($value, 0, static::iv_size());

		$value = substr($value, static::iv_size());

		$key = Config::$items['application']['key'];

		return rtrim(mcrypt_decrypt(static::$cipher, $key, $value, static::$mode, $iv), "\0");
	}

	/**
	 * Get the input vector size for the cipher and mode.
	 *
	 * Different ciphers and modes use varying lengths of input vectors.
	 *
	 * @return int
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_CONST)))))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_STATIC_CALL))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_STATIC_PROP)
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (AST_VAR)
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_CONST)))))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_STATIC_PROP)
                (SCALAR))
            (SCALAR)))
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_STATIC_PROP)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (SCALAR)))))